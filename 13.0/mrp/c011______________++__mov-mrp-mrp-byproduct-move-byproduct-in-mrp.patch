PR: https://github.com/odoo/odoo/pull/

From: 5d1e73c5cb4c7e119356590ad3b8032947b7cea0
From: Arnold Moyaux
Date: 2019-04-12 08:46:07

Structural Changes: 7
Total Changes: 90

[MOV] mrp, mrp_byproduct: move byproduct in mrp

Move code from mrp_byproduct to mrp module. The purpose is to
delete mrp_byproduct module.

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_abstract_workorder.py
+++ b/addons/mrp/models/mrp_abstract_workorder.py
@@ -245,6 +245,32 @@ class MrpAbstractWorkorder(models.AbstractModel):
                 float_round(self.qty_producing, precision_rounding=rounding)
             )
 
+        by_product_moves = self.production_id.move_finished_ids.filtered(lambda m: m.product_id != self.product_id and m.state not in ('done', 'cancel'))
+        for by_product_move in by_product_moves:
+            rounding = by_product_move.product_uom.rounding
+            quantity = float_round(self.qty_producing * by_product_move.unit_factor, precision_rounding=rounding)
+            values = {
+                'move_id': by_product_move.id,
+                'product_id': by_product_move.product_id.id,
+                'production_id': self.production_id.id,
+                'product_uom_id': by_product_move.product_uom.id,
+                'location_id': by_product_move.location_id.id,
+                'location_dest_id': by_product_move.location_dest_id.id,
+            }
+            if by_product_move.product_id.tracking == 'lot':
+                values.update({
+                    'product_uom_qty': quantity,
+                    'qty_done': quantity,
+                })
+                self.env['stock.move.line'].create(values)
+            else:
+                values.update({
+                    'product_uom_qty': 1.0,
+                    'qty_done': 1.0,
+                })
+                for i in range(0, int(quantity)):
+                    self.env['stock.move.line'].create(values)
+
     def _update_raw_moves(self):
         """ Once the production is done. Modify the workorder lines into
         stock move line with the registered lot and quantity done.

--- a/addons/mrp/models/mrp_bom.py
+++ b/addons/mrp/models/mrp_bom.py
@@ -36,6 +36,7 @@ class MrpBom(models.Model):
         domain="['&', ('product_tmpl_id', '=', product_tmpl_id), ('type', 'in', ['product', 'consu'])]",
         help="If a product variant is defined the BOM is available only for this product.")
     bom_line_ids = fields.One2many('mrp.bom.line', 'bom_id', 'BoM Lines', copy=True)
+    sub_products = fields.One2many('mrp.subproduct', 'bom_id', 'Byproducts', copy=True)
     product_qty = fields.Float(
         'Quantity', default=1.0,
         digits=dp.get_precision('Unit of Measure'), required=True)
@@ -357,3 +358,33 @@ class MrpBomLine(models.Model):
             'limit': 80,
             'context': "{'default_res_model': '%s','default_res_id': %d}" % ('product.product', self.product_id.id)
         }
+
+
+class MrpSubProduct(models.Model):
+    _name = 'mrp.subproduct'
+    _description = 'Byproduct'
+
+    product_id = fields.Many2one('product.product', 'Product', required=True)
+    product_qty = fields.Float(
+        'Product Qty',
+        default=1.0, digits=dp.get_precision('Product Unit of Measure'), required=True)
+    product_uom_id = fields.Many2one('uom.uom', 'Unit of Measure', required=True)
+    bom_id = fields.Many2one('mrp.bom', 'BoM', ondelete='cascade')
+    operation_id = fields.Many2one('mrp.routing.workcenter', 'Produced at Operation')
+
+    @api.onchange('product_id')
+    def onchange_product_id(self):
+        """ Changes UoM if product_id changes. """
+        if self.product_id:
+            self.product_uom_id = self.product_id.uom_id.id
+
+    @api.onchange('product_uom_id')
+    def onchange_uom(self):
+        res = {}
+        if self.product_uom_id and self.product_id and self.product_uom_id.category_id != self.product_id.uom_id.category_id:
+            res['warning'] = {
+                'title': _('Warning'),
+                'message': _('The unit of measure you choose is in a different category than the product unit of measure.')
+            }
+            self.product_uom_id = self.product_id.uom_id.id
+        return res

--- a/addons/mrp/models/mrp_production.py
+++ b/addons/mrp/models/mrp_production.py
@@ -482,6 +482,9 @@ class MrpProduction(models.Model):
             'propagate': self.propagate,
             'move_dest_ids': [(4, x.id) for x in self.move_dest_ids],
         })
+        for production in self.filtered(lambda production: production.bom_id):
+            for sub_product in production.bom_id.sub_products:
+                production._create_byproduct_move(sub_product)
         return move
 
     def _get_moves_raw_values(self):
@@ -553,6 +556,33 @@ class MrpProduction(models.Model):
             move = self.env['stock.move'].create(move_values)
             return move, 0, quantity
 
+    def _create_byproduct_move(self, sub_product):
+        Move = self.env['stock.move']
+        for production in self:
+            source = production.product_id.property_stock_production.id
+            product_uom_factor = production.product_uom_id._compute_quantity(production.product_qty - production.qty_produced, production.bom_id.product_uom_id)
+            qty1 = sub_product.product_qty
+            qty1 *= product_uom_factor / production.bom_id.product_qty
+            data = {
+                'name': 'PROD:%s' % production.name,
+                'date': production.date_planned_start,
+                'product_id': sub_product.product_id.id,
+                'product_uom_qty': qty1,
+                'product_uom': sub_product.product_uom_id.id,
+                'location_id': source,
+                'location_dest_id': production.location_dest_id.id,
+                'operation_id': sub_product.operation_id.id,
+                'production_id': production.id,
+                'warehouse_id': production.location_dest_id.get_warehouse().id,
+                'origin': production.name,
+                'unit_factor': qty1 / (production.product_qty - production.qty_produced),
+                'propagate': self.propagate,
+                'group_id': self.move_dest_ids and self.move_dest_ids.mapped('group_id')[0].id or self.procurement_group_id.id,
+                'subproduct_id': sub_product.id
+            }
+            move = Move.create(data)
+            move._action_confirm()
+
     def _get_ready_to_produce_state(self):
         """ returns 'assigned' if enough components are reserved in order to complete
         the first operation in the routing. If not returns 'waiting'

--- a/addons/mrp/models/stock_move.py
+++ b/addons/mrp/models/stock_move.py
@@ -70,6 +70,9 @@ class StockMove(models.Model):
         'mrp.workorder', 'Work Order To Consume')
     # Quantities to process, in normalized UoMs
     bom_line_id = fields.Many2one('mrp.bom.line', 'BoM Line')
+    subproduct_id = fields.Many2one(
+        'mrp.subproduct', 'Subproduct',
+        help="Subproduct line that generated the move in a manufacturing order")
     unit_factor = fields.Float('Unit Factor')
     is_done = fields.Boolean(
         'Done', compute='_compute_is_done',
