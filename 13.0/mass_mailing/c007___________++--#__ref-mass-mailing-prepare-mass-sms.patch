PR: https://github.com/odoo/odoo/pull/

From: c7a14e9109ff81611b77b91ae1910a2f2e9b576e
From: Thibault Delavall√©e
Date: 2019-08-12 12:00:22

Structural Changes: 12
Total Changes: 131

[REF] mass_mailing: prepare mass_sms

PURPOSE

SMS are a powerful marketing tool. For instance it is perfect to announce a
sale or to communicate a coupon code, to welcome a new customer in a fidelity
program, ...

Purpose of this task is to integrate SMS sending in batch in mass mailing. It
will use same mailing objects but sending SMS instead of emails. Some metrics
and flows will have to be slightly updated at the same time.

SPECIFICATIONS

Prepare mass mailing module to addition of mass_mailing_sms.

Mailing model: mailing type
  * add a mailing_type selection field;
  * mass mailing contains only 'mail';
  * synchronize medium accordingly;
  * update actions of mass mailing application to add a domain on mailing
    type being 'mail';

Mailing contact
  * remove is_email_valid field as its purpose is achieved by email_normalized
    field coming from address mixin (added by blacklist management);

Mailing contact subscription
  * clean a bit fields and views as this should stay a technical model;

Trace model and report: trace type
  * add a trace_type selection field;
  * mass mailing contains only 'mail';

Various
  * clean some bits of code in views, remove old code bits;
  * add anchors to ease view inheritance to be able to customize views for
    SMS mailings;
  * ensure all views in mass mailing filter content on mail type (mailing
    and traces being type mail only);
  * rename some methods to be more updated with current guidelines, notably
    main action methods;

LINKS

Task 1997464
PR #34424
Original SMS addition: Task 1922163 (4287481)

================================= pseudo patch: =================================

--- a/addons/mass_mailing/models/mail_mail.py
+++ b/addons/mass_mailing/models/mail_mail.py
@@ -99,5 +99,5 @@ class MailMail(models.Model):
                 if mail_sent is True and mail.mailing_trace_ids:
                     mail.mailing_trace_ids.write({'sent': fields.Datetime.now(), 'exception': False})
                 elif mail_sent is False and mail.mailing_trace_ids:
-                    mail.mailing_trace_ids.write({'exception': fields.Datetime.now()})
+                    mail.mailing_trace_ids.write({'exception': fields.Datetime.now(), 'failure_type': failure_type})
         return super(MailMail, self)._postprocess_sent_message(success_pids, failure_reason=failure_reason, failure_type=failure_type)

--- a/addons/mass_mailing/models/mailing.py
+++ b/addons/mass_mailing/models/mailing.py
@@ -33,6 +33,7 @@ MASS_MAILING_BUSINESS_MODELS = [
 # Used to find inline images
 image_re = re.compile(r"data:(image/[A-Za-z]+);base64,(.*)")
 
+
 class MassMailing(models.Model):
     """ MassMailing models a wave of emails for a mass mailign campaign.
     A mass mailing is an occurence of sending emails. """
@@ -85,6 +86,7 @@ class MassMailing(models.Model):
     color = fields.Integer(string='Color Index')
     user_id = fields.Many2one('res.users', string='Responsible', default=lambda self: self.env.user)
     # mailing options
+    mailing_type = fields.Selection([('mail', 'Email')], string="Mailing Type", default="mail", required=True)
     reply_to_mode = fields.Selection(
         [('thread', 'Recipient Followers'), ('email', 'Specified Email Address')], string='Reply-To Mode', required=True)
     reply_to = fields.Char(string='Reply To', help='Preferred Reply-To Address',
@@ -155,10 +157,9 @@ class MassMailing(models.Model):
                 m.id as mailing_id,
                 COUNT(s.id) AS expected,
                 COUNT(CASE WHEN s.sent is not null THEN 1 ELSE null END) AS sent,
-                COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is null AND s.ignored is null THEN 1 ELSE null END) AS scheduled,
-                COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is not null THEN 1 ELSE null END) AS failed,
+                COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is null AND s.ignored is null AND s.bounced is null THEN 1 ELSE null END) AS scheduled,
                 COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is null AND s.ignored is not null THEN 1 ELSE null END) AS ignored,
-                COUNT(CASE WHEN s.sent is not null AND s.bounced is null THEN 1 ELSE null END) AS delivered,
+                COUNT(CASE WHEN s.sent is not null AND s.exception is null AND s.bounced is null THEN 1 ELSE null END) AS delivered,
                 COUNT(CASE WHEN s.opened is not null THEN 1 ELSE null END) AS opened,
                 COUNT(CASE WHEN s.clicked is not null THEN 1 ELSE null END) AS clicked,
                 COUNT(CASE WHEN s.replied is not null THEN 1 ELSE null END) AS replied,
@@ -217,11 +218,21 @@ class MassMailing(models.Model):
             mailing_domain = [(0, '=', 1)]
         self.mailing_domain = repr(mailing_domain)
 
+    @api.onchange('mailing_type')
+    def _onchange_mailing_type(self):
+        if self.mailing_type == 'mail' and not self.medium_id:
+            self.medium_id = self.env.ref('utm.utm_medium_email').id
+
     @api.onchange('subject')
     def _onchange_subject(self):
         if self.subject and not self.name:
             self.name = self.subject
 
+    @api.onchange('name')
+    def _onchange_name(self):
+        if self.name and not self.subject:
+            self.subject = self.name
+
     # ------------------------------------------------------
     # ORM
     # ------------------------------------------------------
@@ -232,7 +243,7 @@ class MassMailing(models.Model):
             values['subject'] = values['name']
         if values.get('body_html'):
             values['body_html'] = self._convert_inline_images_to_urls(values['body_html'])
-        if 'medium_id' not in values:
+        if 'medium_id' not in values and values.get('mailing_type', 'mail') == 'mail':
             values['medium_id'] = self.env.ref('utm.utm_medium_email').id
         return super(MassMailing, self).create(values)
 
@@ -270,7 +281,7 @@ class MassMailing(models.Model):
             }
         return False
 
-    def action_test_mailing(self):
+    def action_test(self):
         self.ensure_one()
         ctx = dict(self.env.context, default_mass_mailing_id=self.id)
         return {
@@ -282,30 +293,44 @@ class MassMailing(models.Model):
             'context': ctx,
         }
 
-    def action_schedule_date(self):
+    def action_schedule(self):
         self.ensure_one()
         action = self.env.ref('mass_mailing.mailing_mailing_schedule_date_action').read()[0]
         action['context'] = dict(self.env.context, default_mass_mailing_id=self.id)
         return action
 
-    def put_in_queue(self):
+    def action_put_in_queue(self):
         self.write({'state': 'in_queue'})
 
-    def cancel_mass_mailing(self):
+    def action_cancel(self):
         self.write({'state': 'draft', 'schedule_date': False})
 
-    def retry_failed_mail(self):
-        failed_mails = self.env['mail.mail'].search([('mailing_id', 'in', self.ids), ('state', '=', 'exception')])
+    def action_retry_failed(self):
+        failed_mails = self.env['mail.mail'].sudo().search([
+            ('mailing_id', 'in', self.ids),
+            ('state', '=', 'exception')
+        ])
         failed_mails.mapped('mailing_trace_ids').unlink()
-        failed_mails.sudo().unlink()
-        res_ids = self._get_recipients()
-        except_mailed = self.env['mailing.trace'].search([
-            ('model', '=', self.mailing_model_real),
-            ('res_id', 'in', res_ids),
-            ('exception', '!=', False),
-            ('mass_mailing_id', '=', self.id)]).unlink()
+        failed_mails.unlink()
         self.write({'state': 'in_queue'})
 
+    def action_view_traces_scheduled(self):
+        return self._action_view_traces_filtered('scheduled')
+
+    def action_view_traces_ignored(self):
+        return self._action_view_traces_filtered('ignored')
+
+    def action_view_traces_failed(self):
+        return self._action_view_traces_filtered('failed')
+
+    def _action_view_traces_filtered(self, view_filter):
+        action = self.env.ref('mass_mailing.mailing_trace_action').read()[0]
+        action['name'] = _('%s Traces') % (self.name)
+        action['context'] = {'search_default_mass_mailing_id': self.id,}
+        filter_key = 'search_default_filter_%s' % (view_filter)
+        action['context'][filter_key] = True
+        return action
+
     def action_view_sent(self):
         return self._action_view_documents_filtered('sent')
 
@@ -387,7 +412,7 @@ class MassMailing(models.Model):
             _logger.info("Mass-mailing %s targets %s, no opt out list available", self, target._name)
         return opt_out
 
-    def _get_convert_links(self):
+    def _get_link_tracker_values(self):
         self.ensure_one()
         vals = {'mass_mailing_id': self.id}
 
@@ -456,7 +481,7 @@ class MassMailing(models.Model):
         return {
             'mass_mailing_opt_out_list': self._get_opt_out_list(),
             'mass_mailing_seen_list': self._get_seen_list(),
-            'post_convert_links': self._get_convert_links(),
+            'post_convert_links': self._get_link_tracker_values(),
         }
 
     def _get_recipients(self):

--- a/addons/mass_mailing/models/mailing_contact.py
+++ b/addons/mass_mailing/models/mailing_contact.py
@@ -19,7 +19,6 @@ class MassMailingContactListRel(models.Model):
     opt_out = fields.Boolean(string='Opt Out',
                              help='The contact has chosen not to receive mails anymore from this list', default=False)
     unsubscription_date = fields.Datetime(string='Unsubscription Date')
-    contact_count = fields.Integer(related='list_id.contact_nbr', store=False, readonly=False)
     message_bounce = fields.Integer(related='contact_id.message_bounce', store=False, readonly=False)
     is_blacklisted = fields.Boolean(related='contact_id.is_blacklisted', store=False, readonly=False)
 
@@ -39,19 +38,6 @@ class MassMailingContactListRel(models.Model):
             vals['unsubscription_date'] = vals['opt_out'] and fields.Datetime.now()
         return super(MassMailingContactListRel, self).write(vals)
 
-    def action_open_mailing_list_contact(self):
-        """TODO DBE : To remove - Deprecated"""
-        contact_id = self.contact_id
-        action = {
-            'name': _(contact_id.name),
-            'type': 'ir.actions.act_window',
-            'res_model': 'mailing.contact',
-            'view_mode': 'form',
-            'target': 'current',
-            'res_id': contact_id.id
-        }
-        return action
-
 
 class MassMailingContact(models.Model):
     """Model of a contact. This model is different from the partner model
@@ -67,8 +53,7 @@ class MassMailingContact(models.Model):
     name = fields.Char()
     company_name = fields.Char(string='Company Name')
     title_id = fields.Many2one('res.partner.title', string='Title')
-    email = fields.Char(required=True)
-    is_email_valid = fields.Boolean(compute='_compute_is_email_valid', store=True)
+    email = fields.Char('Email')
     list_ids = fields.Many2many(
         'mailing.list', 'mailing_contact_list_rel',
         'contact_id', 'list_id', string='Mailing Lists')
@@ -79,12 +64,6 @@ class MassMailingContact(models.Model):
                              help='Opt out flag for a specific mailing list.'
                                   'This field should not be used in a view without a unique and active mailing list context.')
 
-    @api.depends('email')
-    def _compute_is_email_valid(self):
-        for record in self:
-            normalized = tools.email_normalize(record.email)
-            record.is_email_valid = normalized if not normalized else True
-
     @api.model
     def _search_opt_out(self, operator, value):
         # Assumes operator is '=' or '!=' and value is True or False

--- a/addons/mass_mailing/models/mailing_list.py
+++ b/addons/mass_mailing/models/mailing_list.py
@@ -45,6 +45,13 @@ class MassMailingList(models.Model):
     def name_get(self):
         return [(list.id, "%s (%s)" % (list.name, list.contact_nbr)) for list in self]
 
+    def action_view_contacts(self):
+        action = self.env.ref('mass_mailing.action_view_mass_mailing_contacts').read()[0]
+        action['domain'] = [('list_ids', 'in', self.ids)]
+        context = dict(self.env.context, search_default_filter_valid_email_recipient=1, default_list_ids=self.ids)
+        action['context'] = context
+        return action
+
     def action_merge(self, src_lists, archive):
         """
             Insert all the contact from the mailing lists 'src_lists' to the

--- a/addons/mass_mailing/models/mailing_trace.py
+++ b/addons/mass_mailing/models/mailing_trace.py
@@ -11,9 +11,11 @@ class MailingTrace(models.Model):
     without loosing the statistics about them. """
     _name = 'mailing.trace'
     _description = 'Mailing Statistics'
-    _rec_name = 'message_id'
-    _order = 'message_id'
+    _rec_name = 'id'
+    _order = 'scheduled DESC'
 
+    trace_type = fields.Selection([('mail', 'Mail')], string='Type', default='mail', required=True)
+    display_name = fields.Char(compute='_compute_display_name')
     # mail data
     mail_mail_id = fields.Many2one('mail.mail', string='Mail', index=True)
     mail_mail_id_int = fields.Integer(
@@ -23,16 +25,16 @@ class MailingTrace(models.Model):
              'However the ID is needed for several action and controllers.',
         index=True,
     )
-    email = fields.Char(string="Recipient email address")
+    email = fields.Char(string="Email")
     message_id = fields.Char(string='Message-ID')
     # document
     model = fields.Char(string='Document model')
     res_id = fields.Integer(string='Document ID')
     # campaign / wave data
-    mass_mailing_id = fields.Many2one('mailing.mailing', string='Mass Mailing', index=True)
+    mass_mailing_id = fields.Many2one('mailing.mailing', string='Mailing', index=True)
     campaign_id = fields.Many2one(
         related='mass_mailing_id.campaign_id',
-        string='Mass Mailing Campaign',
+        string='Campaign',
         store=True, readonly=True, index=True)
     # Bounce and tracking
     ignored = fields.Datetime(help='Date when the email has been invalidated. '
@@ -55,10 +57,21 @@ class MailingTrace(models.Model):
                                         ('replied', 'Replied'),
                                         ('bounced', 'Bounced'),
                                         ('ignored', 'Ignored')], store=True)
+    failure_type = fields.Selection(selection=[
+        ("SMTP", "Connection failed (outgoing mail server problem)"),
+        ("RECIPIENT", "Invalid email address"),
+        ("BOUNCE", "Email address rejected by destination"),
+        ("UNKNOWN", "Unknown error"),
+    ], string='Failure type')
     state_update = fields.Datetime(compute="_compute_state", string='State Update',
                                    help='Last state update of the mail',
                                    store=True)
 
+    @api.depends('trace_type', 'mass_mailing_id')
+    def _compute_display_name(self):
+        for trace in self:
+            trace.display_name = '%s: %s (%s)' % (trace.trace_type, trace.mass_mailing_id.name, trace.id)
+
     @api.depends('sent', 'opened', 'clicked', 'replied', 'bounced', 'exception', 'ignored')
     def _compute_state(self):
         self.update({'state_update': fields.Datetime.now()})
@@ -78,12 +91,12 @@ class MailingTrace(models.Model):
             else:
                 stat.state = 'outgoing'
 
-    @api.model
-    def create(self, values):
-        if 'mail_mail_id' in values:
-            values['mail_mail_id_int'] = values['mail_mail_id']
-        res = super(MailingTrace, self).create(values)
-        return res
+    @api.model_create_multi
+    def create(self, values_list):
+        for values in values_list:
+            if 'mail_mail_id' in values:
+                values['mail_mail_id_int'] = values['mail_mail_id']
+        return super(MailingTrace, self).create(values_list)
 
     def _get_records(self, mail_mail_ids=None, mail_message_ids=None, domain=None):
         if not self.ids and mail_mail_ids:

--- a/addons/mass_mailing/models/utm.py
+++ b/addons/mass_mailing/models/utm.py
@@ -3,6 +3,7 @@
 
 from odoo import api, fields, models
 
+
 class UtmCampaign(models.Model):
     _inherit = 'utm.campaign'
 
