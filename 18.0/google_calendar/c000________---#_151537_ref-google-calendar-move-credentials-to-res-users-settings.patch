PR: https://github.com/odoo/odoo/pull/151537

From: 717457e9c128e23c2587d05d108458dd3453943a
From: Gabriel (gdpf)
Date: 2024-03-13 17:16:10

Breaking data model changes scores: del:9 + add:0, change matches:
-    user_ids = fields.One2many('res.users', 'google_calendar_account_id', required=True)
-    calendar_rtoken = fields.Char('Refresh Token', copy=False)
-    calendar_token = fields.Char('User token', copy=False)
-    calendar_token_validity = fields.Datetime('Token Validity', copy=False)
-    calendar_sync_token = fields.Char('Next Sync Token', copy=False)
-    calendar_cal_id = fields.Char('Calendar ID', copy=False, help='Last Calendar ID who has been synchronized. If it is changed, we remove all links between GoogleID and Odoo Google Internal ID')
-    synchronization_stopped = fields.Boolean('Google Synchronization stopped', copy=False)
-    google_calendar_account_id = fields.Many2one('google.calendar.credentials')

Total Changes: 216

[REF] google_calendar: move credentials to res.users.settings

Before this commit, creating variables inside the res.users model was a problem
because accessing variables in it could block the row while during read.

After this commit, all synchronization credentials are moved to `res.users.settings`,
allowing the creation of new variables that should not be stored in res.users in order
to not overload the model. After moving the synchronization credentials to the `res.users.settings`
model, we agreed on dropping the access rule of "allow a normal user (non-admin) to read the
token of another user" since this feature is not being currently used. Also, we decided on adding
the `groups=base.group_system` attribute to the synchronization variables in order to add an
extra security layer in their access. From now on, these variables must be accessed using the
`sudo()` decorator.

task-3707128

Part-of: odoo/odoo#151537

================================= pseudo patch: =================================

--- a/addons/google_calendar/models/__init__.py
+++ b/addons/google_calendar/models/__init__.py
@@ -6,5 +6,5 @@ from . import google_sync
 from . import calendar
 from . import calendar_recurrence_rule
 from . import res_users
+from . import res_users_settings
 from . import calendar_attendee
-from . import google_credentials

--- a/addons/google_calendar/models/google_credentials.py
+++ b/None
@@ -1,79 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-import logging
-import requests
-from datetime import timedelta
-
-from odoo import fields, models, _
-from odoo.exceptions import UserError
-from odoo.addons.google_account.models.google_service import GOOGLE_TOKEN_ENDPOINT
-
-_logger = logging.getLogger(__name__)
-
-class GoogleCredentials(models.Model):
-    """"Google Account of res_users"""
-
-    _name = 'google.calendar.credentials'
-    _description = 'Google Calendar Account Data'
-
-    user_ids = fields.One2many('res.users', 'google_calendar_account_id', required=True)
-    calendar_rtoken = fields.Char('Refresh Token', copy=False)
-    calendar_token = fields.Char('User token', copy=False)
-    calendar_token_validity = fields.Datetime('Token Validity', copy=False)
-    calendar_sync_token = fields.Char('Next Sync Token', copy=False)
-
-    calendar_cal_id = fields.Char('Calendar ID', copy=False, help='Last Calendar ID who has been synchronized. If it is changed, we remove all links between GoogleID and Odoo Google Internal ID')
-    synchronization_stopped = fields.Boolean('Google Synchronization stopped', copy=False)
-
-    def _set_auth_tokens(self, access_token, refresh_token, ttl):
-        self.write({
-            'calendar_rtoken': refresh_token,
-            'calendar_token': access_token,
-            'calendar_token_validity': fields.Datetime.now() + timedelta(seconds=ttl) if ttl else False,
-        })
-
-    def _google_calendar_authenticated(self):
-        self.ensure_one()
-        return bool(self.sudo().calendar_rtoken)
-
-    def _is_google_calendar_valid(self):
-        self.ensure_one()
-        return self.calendar_token_validity and self.calendar_token_validity >= (fields.Datetime.now() + timedelta(minutes=1))
-
-    def _refresh_google_calendar_token(self):
-        # LUL TODO similar code exists in google_drive. Should be factorized in google_account
-        self.ensure_one()
-        get_param = self.env['ir.config_parameter'].sudo().get_param
-        client_id = get_param('google_calendar_client_id')
-        client_secret = get_param('google_calendar_client_secret')
-
-        if not client_id or not client_secret:
-            raise UserError(_("The account for the Google Calendar service is not configured."))
-
-        headers = {"content-type": "application/x-www-form-urlencoded"}
-        data = {
-            'refresh_token': self.calendar_rtoken,
-            'client_id': client_id,
-            'client_secret': client_secret,
-            'grant_type': 'refresh_token',
-        }
-
-        try:
-            _dummy, response, _dummy = self.env['google.service']._do_request(GOOGLE_TOKEN_ENDPOINT, params=data, headers=headers, method='POST', preuri='')
-            ttl = response.get('expires_in')
-            self.write({
-                'calendar_token': response.get('access_token'),
-                'calendar_token_validity': fields.Datetime.now() + timedelta(seconds=ttl),
-            })
-        except requests.HTTPError as error:
-            if error.response.status_code in (400, 401):  # invalid grant or invalid client
-                # Delete refresh token and make sure it's commited
-                self.env.cr.rollback()
-                self._set_auth_tokens(False, False, 0)
-                self.env.cr.commit()
-            error_key = error.response.json().get("error", "nc")
-            error_msg = _("An error occurred while generating the token. Your authorization code may be invalid or has already expired [%s]. "
-                          "You should check your Client ID and secret on the Google APIs plateform or try to stop and restart your calendar synchronisation.",
-                          error_key)
-            raise UserError(error_msg)

--- a/addons/google_calendar/models/res_users.py
+++ b/addons/google_calendar/models/res_users.py
@@ -15,39 +15,25 @@ _logger = logging.getLogger(__name__)
 class User(models.Model):
     _inherit = 'res.users'
 
-    google_calendar_account_id = fields.Many2one('google.calendar.credentials')
-    google_calendar_rtoken = fields.Char(related='google_calendar_account_id.calendar_rtoken', groups="base.group_system")
-    google_calendar_token = fields.Char(related='google_calendar_account_id.calendar_token')
-    google_calendar_token_validity = fields.Datetime(related='google_calendar_account_id.calendar_token_validity')
-    google_calendar_sync_token = fields.Char(related='google_calendar_account_id.calendar_sync_token')
-    google_calendar_cal_id = fields.Char(related='google_calendar_account_id.calendar_cal_id')
-    google_synchronization_stopped = fields.Boolean(related='google_calendar_account_id.synchronization_stopped', readonly=False)
-
-    _sql_constraints = [
-        ('google_token_uniq', 'unique (google_calendar_account_id)', "The user has already a google account"),
-    ]
-
-
-    @property
-    def SELF_READABLE_FIELDS(self):
-        return super().SELF_READABLE_FIELDS + ['google_synchronization_stopped', 'google_calendar_account_id']
-
-    @property
-    def SELF_WRITEABLE_FIELDS(self):
-        return super().SELF_WRITEABLE_FIELDS + ['google_synchronization_stopped', 'google_calendar_account_id']
+    google_calendar_rtoken = fields.Char(related='res_users_settings_id.google_calendar_rtoken', groups="base.group_system")
+    google_calendar_token = fields.Char(related='res_users_settings_id.google_calendar_token', groups="base.group_system")
+    google_calendar_token_validity = fields.Datetime(related='res_users_settings_id.google_calendar_token_validity', groups="base.group_system")
+    google_calendar_sync_token = fields.Char(related='res_users_settings_id.google_calendar_sync_token', groups="base.group_system")
+    google_calendar_cal_id = fields.Char(related='res_users_settings_id.google_calendar_cal_id', groups="base.group_system")
+    google_synchronization_stopped = fields.Boolean(related='res_users_settings_id.google_synchronization_stopped', readonly=False, groups="base.group_system")
 
     def _get_google_calendar_token(self):
         self.ensure_one()
-        if self.google_calendar_account_id.calendar_rtoken and not self.google_calendar_account_id._is_google_calendar_valid():
-            self.sudo().google_calendar_account_id._refresh_google_calendar_token()
-        return self.google_calendar_account_id.calendar_token
+        if self.res_users_settings_id.sudo().google_calendar_rtoken and not self.res_users_settings_id._is_google_calendar_valid():
+            self.sudo().res_users_settings_id._refresh_google_calendar_token()
+        return self.res_users_settings_id.sudo().google_calendar_token
 
     def _get_google_sync_status(self):
         """ Returns the calendar synchronization status (active, paused or stopped). """
         status = "sync_active"
         if str2bool(self.env['ir.config_parameter'].sudo().get_param("google_calendar_sync_paused"), default=False):
             status = "sync_paused"
-        elif self.google_synchronization_stopped:
+        elif self.sudo().google_synchronization_stopped:
             status = "sync_stopped"
         return status
 
@@ -99,11 +85,11 @@ class User(models.Model):
             _logger.info("skipping calendar sync, locked user %s", self.login)
             return False
 
-        full_sync = not bool(self.google_calendar_sync_token)
+        full_sync = not bool(self.sudo().google_calendar_sync_token)
         with google_calendar_token(self) as token:
             try:
                 if not event_id:
-                    events, next_sync_token, default_reminders = calendar_service.get_events(self.google_calendar_account_id.calendar_sync_token, token=token)
+                    events, next_sync_token, default_reminders = calendar_service.get_events(self.res_users_settings_id.sudo().google_calendar_sync_token, token=token)
                 else:
                     # We force the sync_token parameter to avoid doing a full sync.
                     # Other events are fetched when the calendar view is displayed.
@@ -112,7 +98,7 @@ class User(models.Model):
                 events, next_sync_token, default_reminders = calendar_service.get_events(token=token)
                 full_sync = True
         if next_sync_token:
-            self.google_calendar_account_id.calendar_sync_token = next_sync_token
+            self.res_users_settings_id.sudo().google_calendar_sync_token = next_sync_token
         return {
             'events': events,
             'default_reminders': default_reminders,
@@ -122,7 +108,7 @@ class User(models.Model):
     @api.model
     def _sync_all_google_calendar(self):
         """ Cron job """
-        users = self.env['res.users'].search([('google_calendar_rtoken', '!=', False), ('google_synchronization_stopped', '=', False)])
+        users = self.env['res.users'].sudo().search([('google_calendar_rtoken', '!=', False), ('google_synchronization_stopped', '=', False)])
         google = GoogleCalendarService(self.env['google.service'])
         for user in users:
             _logger.info("Calendar Synchro - Starting synchronization for %s", user)
@@ -137,17 +123,15 @@ class User(models.Model):
         """ True if Google Calendar settings are filled (Client ID / Secret) and user calendar is synced
         meaning we can make API calls, false otherwise."""
         self.ensure_one()
-        return self.google_calendar_token and self._get_google_sync_status() == 'sync_active'
+        return self.sudo().google_calendar_token and self._get_google_sync_status() == 'sync_active'
 
     def stop_google_synchronization(self):
         self.ensure_one()
-        self.google_synchronization_stopped = True
+        self.sudo().google_synchronization_stopped = True
 
     def restart_google_synchronization(self):
         self.ensure_one()
-        if not self.google_calendar_account_id:
-            self.google_calendar_account_id = self.env['google.calendar.credentials'].sudo().create([{'user_ids': [Command.set(self.ids)]}])
-        self.google_synchronization_stopped = False
+        self.sudo().google_synchronization_stopped = False
         self.env['calendar.recurrence']._restart_google_sync()
         self.env['calendar.event']._restart_google_sync()
 

--- a/None
+++ b/addons/google_calendar/models/res_users_settings.py
@@ -0,0 +1,85 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from datetime import timedelta
+
+import requests
+
+from odoo import api, fields, models, _
+from odoo.exceptions import UserError
+from odoo.addons.google_account.models.google_service import GOOGLE_TOKEN_ENDPOINT
+
+class ResUsersSettings(models.Model):
+    _inherit = "res.users.settings"
+
+    # Google Calendar tokens and synchronization information.
+    google_calendar_rtoken = fields.Char('Refresh Token', copy=False, groups='base.group_system')
+    google_calendar_token = fields.Char('User token', copy=False, groups='base.group_system')
+    google_calendar_token_validity = fields.Datetime('Token Validity', copy=False, groups='base.group_system')
+    google_calendar_sync_token = fields.Char('Next Sync Token', copy=False, groups='base.group_system')
+    google_calendar_cal_id = fields.Char('Calendar ID', copy=False, groups='base.group_system',
+        help='Last Calendar ID who has been synchronized. If it is changed, we remove all links between GoogleID and Odoo Google Internal ID')
+    google_synchronization_stopped = fields.Boolean('Google Synchronization stopped', copy=False, groups='base.group_system')
+
+    @api.model
+    def _get_fields_blacklist(self):
+        """ Get list of google fields that won't be formatted in session_info. """
+        google_fields_blacklist = [
+            'google_calendar_rtoken',
+            'google_calendar_token',
+            'google_calendar_token_validity',
+            'google_calendar_sync_token',
+            'google_calendar_cal_id',
+            'google_synchronization_stopped'
+        ]
+        return super()._get_fields_blacklist() + google_fields_blacklist
+
+    def _set_google_auth_tokens(self, access_token, refresh_token, ttl):
+        self.sudo().write({
+            'google_calendar_rtoken': refresh_token,
+            'google_calendar_token': access_token,
+            'google_calendar_token_validity': fields.Datetime.now() + timedelta(seconds=ttl) if ttl else False,
+        })
+
+    def _google_calendar_authenticated(self):
+        self.ensure_one()
+        return bool(self.sudo().google_calendar_rtoken)
+
+    def _is_google_calendar_valid(self):
+        self.ensure_one()
+        return self.sudo().google_calendar_token_validity and self.sudo().google_calendar_token_validity >= (fields.Datetime.now() + timedelta(minutes=1))
+
+    def _refresh_google_calendar_token(self):
+        self.ensure_one()
+        get_param = self.env['ir.config_parameter'].sudo().get_param
+        client_id = get_param('google_calendar_client_id')
+        client_secret = get_param('google_calendar_client_secret')
+
+        if not client_id or not client_secret:
+            raise UserError(_("The account for the Google Calendar service is not configured."))
+
+        headers = {"content-type": "application/x-www-form-urlencoded"}
+        data = {
+            'refresh_token': self.sudo().google_calendar_rtoken,
+            'client_id': client_id,
+            'client_secret': client_secret,
+            'grant_type': 'refresh_token',
+        }
+
+        try:
+            _dummy, response, _dummy = self.env['google.service']._do_request(GOOGLE_TOKEN_ENDPOINT, params=data, headers=headers, method='POST', preuri='')
+            ttl = response.get('expires_in')
+            self.sudo().write({
+                'google_calendar_token': response.get('access_token'),
+                'google_calendar_token_validity': fields.Datetime.now() + timedelta(seconds=ttl),
+            })
+        except requests.HTTPError as error:
+            if error.response.status_code in (400, 401):  # invalid grant or invalid client
+                # Delete refresh token and make sure it's commited
+                self.env.cr.rollback()
+                self.sudo()._set_google_auth_tokens(False, False, 0)
+                self.env.cr.commit()
+            error_key = error.response.json().get("error", "nc")
+            error_msg = _("An error occurred while generating the token. Your authorization code may be invalid or has already expired [%s]. "
+                          "You should check your Client ID and secret on the Google APIs plateform or try to stop and restart your calendar synchronization.",
+                          error_key)
+            raise UserError(error_msg)
