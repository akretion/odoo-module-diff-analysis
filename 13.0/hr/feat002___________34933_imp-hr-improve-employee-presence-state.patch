PR: https://github.com/odoo/odoo/pull/34933

From: f6fdde96bddfedf8764cd8a73089e44340d476ae
From: Lucas Lefèvre
Date: 2019-07-17 09:11:18

Breaking data model changes score: 0, change matches:

Total Changes: 53

[IMP] hr_*: Improve employee presence state

Purpose
=======
There are currently multiple ways to determine if an employee is presence
or absent:
- login state (user status on chat)
- checkin/checkout from the Attendance app
- leave
- hr_presence (email, ip)
Those states are displayed in several different places and can be inconsitent.
e.g. Logged in -> green in the chat
Not checked in -> red on the employee kanban view.

The multiple ways to determine employee presence described above
should be aggregated together to have a better consistency.

Specification
=============
There are 3 presence states (previously defined in module `hr_presence`),
namely `present`, `absent`, `to_define`. They are now defined as soon as
`hr` module is installed.

The state computation can have several behaviors according to which apps
are installed:

1. `hr` is installed
Check employee presence based on login by default (only for employees with
a user).
Kanban state (private and public): should be green when logged in, red when logged out and
orange when the user is away.
Private employee form: Display a stat button "Connected" on the form view
when the user is logged in or "Last Activity xx/xx/xxx" otherwise.

2. `hr_attendance` is installed:
when the user is logged out, the state
is determined from the checked in/out state. But when the user is logged in,
consider the user as present (even if he checked out).
Kanban state: green for checked in, red for checked out
Private form view: attendance stat button.

3. `hr_holidays` is installed:
Has the highest priority if the employee is on leave.
Kanban state: red if employee is on leave.
Private form view: stat button "Absent Until xx/xx/xxxx" if employee
is on leave.

4. `hr_presence` is installed:
Two additionnal presence checking option: emails sent and IP address connected.
Once a user sent an email or the IP address was connected, he is considered
present for the entire day.

There should be at most one stat button on the employee form view, with the
relevent information.

Task id: 2024482

closes odoo/odoo#34933

Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr/models/__init__.py
+++ b/addons/hr/models/__init__.py
@@ -13,3 +13,4 @@ from . import mail_channel
 from . import res_config_settings
 from . import res_partner
 from . import res_users
+from . import res_company

--- a/addons/hr/models/hr_employee_base.py
+++ b/addons/hr/models/hr_employee_base.py
@@ -23,3 +23,31 @@ class HrEmployeeBase(models.AbstractModel):
     user_id = fields.Many2one('res.users')
     resource_id = fields.Many2one('resource.resource')
     resource_calendar_id = fields.Many2one('resource.calendar')
+    hr_presence_state = fields.Selection([
+        ('present', 'Present'),
+        ('absent', 'Absent'),
+        ('to_define', 'To Define')], compute='_compute_presence_state', default='to_define')
+    last_activity = fields.Date(compute="_compute_last_activity")
+
+    def _compute_presence_state(self):
+        """
+        This method is overritten in several other modules which add additional
+        presence criterions. e.g. hr_attendance, hr_holidays
+        """
+        # Check on login
+        check_login = self.env['ir.config_parameter'].sudo().get_param('hr.hr_presence_control_login')
+        for employee in self:
+            state = 'to_define'
+            if check_login:
+                if employee.user_id.im_status == 'online':
+                    state = 'present'
+                elif employee.user_id.im_status == 'offline':
+                    state = 'absent'
+            employee.hr_presence_state = state
+
+    def _compute_last_activity(self):
+        employees = self.filtered(lambda e: e.user_id)
+        presences = self.env['bus.presence'].search([('user_id', 'in', employees.mapped('user_id.id'))])
+
+        for presence in presences:
+            presence.user_id.employee_ids.last_activity = presence.last_presence.date()

--- a/None
+++ b/addons/hr/models/res_company.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class Company(models.Model):
+    _inherit = 'res.company'
+
+    hr_presence_control_email_amount = fields.Integer(string="# emails to send")
+    hr_presence_control_ip_list = fields.Char(string="Valid IP addresses")

--- a/addons/hr/models/res_config_settings.py
+++ b/addons/hr/models/res_config_settings.py
@@ -10,9 +10,12 @@ class ResConfigSettings(models.TransientModel):
         'resource.calendar', 'Company Working Hours',
         related='company_id.resource_calendar_id', readonly=False)
     module_hr_org_chart = fields.Boolean(string="Show Organizational Chart")
-    module_hr_presence = fields.Boolean(string="Control presence of employees")
+    module_hr_presence = fields.Boolean(string="Advanced control presence of employees")
     module_hr_skills = fields.Boolean(string="Employee Skills and Resumé")
     hr_presence_control_login = fields.Boolean(string="According to the system login (User status on chat)", config_parameter='hr.hr_presence_control_login')
-    hr_presence_control_email = fields.Boolean(string="According to the amount of sent emails", config_parameter='hr.hr_presence_control_email')
-    hr_presence_control_ip = fields.Boolean(string="According to the IP address", config_parameter='hr.hr_presence_control_ip')
+    hr_presence_control_email = fields.Boolean(string="According to the amount of sent emails", config_parameter='hr_presence.hr_presence_control_email')
+    hr_presence_control_ip = fields.Boolean(string="According to the IP address", config_parameter='hr_presence.hr_presence_control_ip')
+    module_hr_attendance = fields.Boolean(string="According to the Attendance module.")
+    hr_presence_control_email_amount = fields.Integer(related="company_id.hr_presence_control_email_amount", readonly=False)
+    hr_presence_control_ip_list = fields.Char(related="company_id.hr_presence_control_ip_list", readonly=False)
     hr_employee_self_edit = fields.Boolean(string="Employee Edition", config_parameter='hr.hr_employee_self_edit')

--- a/addons/hr/models/res_users.py
+++ b/addons/hr/models/res_users.py
@@ -52,6 +52,8 @@ class User(models.Model):
     study_field = fields.Char(related='employee_id.study_field', readonly=False, related_sudo=False)
     study_school = fields.Char(related='employee_id.study_school', readonly=False, related_sudo=False)
     employee_count = fields.Integer(compute='_compute_employee_count')
+    hr_presence_state = fields.Selection(related='employee_id.hr_presence_state')
+    last_activity = fields.Date(related='employee_id.last_activity')
 
     @api.depends('employee_ids')
     def _compute_employee_count(self):
@@ -69,6 +71,8 @@ class User(models.Model):
             'employee_id',
             'employee_ids',
             'employee_parent_id',
+            'hr_presence_state',
+            'last_activity',
         ]
 
         hr_writable_fields = [
