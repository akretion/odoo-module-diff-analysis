PR: https://github.com/odoo/odoo/pull/140076

From: f09ec9a4674b50b647dc82cae2f08b1e65e80194
From: Arnaud Joset
Date: 2023-12-11 17:40:40

Breaking data model changes scores: del:2 + add:0, change matches:
-    microsoft_id = fields.Char('Microsoft Calendar Event Id')
-    microsoft_id = fields.Char('Microsoft Calendar Recurrence Id')

Total Changes: 119

[IMP] microsoft_calendar: save microsoft ids in separated fields

https://github.com/odoo/odoo/pull/82863 introduces two ids to be able to update
microsoft events. As it was introduced in stable they were defined as
computed fields with inverse and search methods. Indeed new stored fields could
not be introduced and the microsoft_id field was hacked to store two fields
separated by a ':' character.

This commit stores these fields as they should to improve performances and
remove this hack.

closes odoo/odoo#140076

Taskid: 3525931
Related: odoo/upgrade#5417
Signed-off-by: Arnaud Joset (arj) <arj@odoo.com>

================================= pseudo patch: =================================

--- a/addons/microsoft_calendar/models/calendar.py
+++ b/addons/microsoft_calendar/models/calendar.py
@@ -11,7 +11,6 @@ from dateutil.relativedelta import relativedelta
 from odoo import api, fields, models, _
 from odoo.exceptions import UserError, ValidationError
 from odoo.tools import is_html_empty, email_normalize
-from odoo.addons.microsoft_calendar.utils.event_id_storage import combine_ids
 from odoo.osv import expression
 
 ATTENDEE_CONVERTER_O2M = {
@@ -39,8 +38,6 @@ class Meeting(models.Model):
     _name = 'calendar.event'
     _inherit = ['calendar.event', 'microsoft.calendar.sync']
 
-    # contains organizer event id and universal event id separated by a ':'
-    microsoft_id = fields.Char('Microsoft Calendar Event Id')
     microsoft_recurrence_master_id = fields.Char('Microsoft Recurrence Master Id')
 
     def _get_organizer(self):
@@ -150,7 +147,7 @@ class Meeting(models.Model):
         Suggest user to update recurrences in Outlook due to the Outlook Calendar spam limitation.
         """
         error_msg = _("Due to an Outlook Calendar limitation, recurrence updates must be done directly in Outlook Calendar.")
-        if any(not record.microsoft_id for record in self):
+        if any(not record.ms_universal_event_id for record in self):
             # If any event is not synced, suggest deleting it in Odoo and recreating it in Outlook.
             error_msg = _(
                 "Due to an Outlook Calendar limitation, recurrence updates must be done directly in Outlook Calendar.\n"
@@ -196,8 +193,9 @@ class Meeting(models.Model):
         if self.env.user._get_microsoft_sync_status() != "sync_paused" and values.get('recurrency'):
             for event in self:
                 if not event.recurrency and not event.recurrence_id:
-                    event._microsoft_delete(event._get_organizer(), event.ms_organizer_event_id, timeout=3)
+                    event._microsoft_delete(event._get_organizer(), event.microsoft_id, timeout=3)
                     event.microsoft_id = False
+                    event.ms_universal_event_id = False
 
         deactivated_events = self.browse(deactivated_events_ids)
         # Update attendee status before 'values' variable is overridden in super.
@@ -222,7 +220,7 @@ class Meeting(models.Model):
         event_copy = {**self.copy_data()[0], 'microsoft_id': False}
         self.env['calendar.event'].with_user(sender_user).create({**event_copy, **values})
         if self.ms_universal_event_id:
-            self._microsoft_delete(self._get_organizer(), self.ms_organizer_event_id)
+            self._microsoft_delete(self._get_organizer(), self.microsoft_id)
 
     @api.model
     def _get_organizer_user_change_info(self, values):
@@ -332,7 +330,9 @@ class Meeting(models.Model):
                 values['location'] = False
 
         if with_ids:
-            values['microsoft_id'] = combine_ids(microsoft_event.id, microsoft_event.iCalUId)
+            values['microsoft_id'] = microsoft_event.id
+            values['ms_universal_event_id'] = microsoft_event.iCalUId
+
 
         if microsoft_event.is_recurrent():
             values['microsoft_recurrence_master_id'] = microsoft_event.seriesMasterId
@@ -354,7 +354,8 @@ class Meeting(models.Model):
             stop = parse(microsoft_event.end.get('dateTime')).astimezone(timeZone_stop).replace(tzinfo=None)
         values = default_values or {}
         values.update({
-            'microsoft_id': combine_ids(microsoft_event.id, microsoft_event.iCalUId),
+            'microsoft_id': microsoft_event.id,
+            'ms_universal_event_id': microsoft_event.iCalUId,
             'microsoft_recurrence_master_id': microsoft_event.seriesMasterId,
             'start': start,
             'stop': stop,

--- a/addons/microsoft_calendar/models/calendar_recurrence_rule.py
+++ b/addons/microsoft_calendar/models/calendar_recurrence_rule.py
@@ -13,8 +13,6 @@ class RecurrenceRule(models.Model):
     # Don't sync by default. Sync only when the recurrence is applied
     need_sync_m = fields.Boolean(default=False)
 
-    microsoft_id = fields.Char('Microsoft Calendar Recurrence Id')
-
     def _compute_rrule(self):
         # Note: 'need_sync_m' is set to False to avoid syncing the updated recurrence with
         # Outlook, as this update may already come from Outlook. If not, this modification will
@@ -43,12 +41,13 @@ class RecurrenceRule(models.Model):
                 vals += [{
                     'name': event.name,
                     'microsoft_id': event.microsoft_id,
+                    'ms_universal_event_id': event.ms_universal_event_id,
                     'start': event.start,
                     'stop': event.stop,
                     'active': False,
                     'need_sync_m': True,
                 }]
-                event._microsoft_delete(event.user_id, event.ms_organizer_event_id)
+                event._microsoft_delete(event.user_id, event.microsoft_id)
                 event.ms_universal_event_id = False
         self.env['calendar.event'].create(vals)
         self.calendar_event_ids.need_sync_m = False
@@ -108,9 +107,10 @@ class RecurrenceRule(models.Model):
             # We archive the old events to recompute the recurrence. These events are already deleted on Microsoft side.
             # We can't call _cancel because events without user_id would not be deleted
             (self.calendar_event_ids - base_event_id).microsoft_id = False
+            (self.calendar_event_ids - base_event_id).ms_universal_event_id = False
             (self.calendar_event_ids - base_event_id).unlink()
             base_event_id.with_context(dont_notify=True).write(dict(
-                new_event_values, microsoft_id=False, need_sync_m=False
+                new_event_values, microsoft_id=False, ms_universal_event_id=False, need_sync_m=False
             ))
             if self.rrule == current_rrule:
                 # if the rrule has changed, it will be recalculated below
@@ -132,7 +132,7 @@ class RecurrenceRule(models.Model):
         # to base_event start datetime.
         if self.rrule != current_rrule:
             detached_events = self._apply_recurrence()
-            detached_events.microsoft_id = False
+            detached_events.ms_universal_event_id = False
             detached_events.unlink()
 
     def _get_microsoft_sync_domain(self):
@@ -151,7 +151,7 @@ class RecurrenceRule(models.Model):
         if with_ids:
             recurrence = {
                 **recurrence,
-                'ms_organizer_event_id': microsoft_recurrence.id,
+                'microsoft_id': microsoft_recurrence.id,
                 'ms_universal_event_id': microsoft_recurrence.iCalUId,
             }
 
@@ -178,7 +178,7 @@ class RecurrenceRule(models.Model):
         if new_recurrence and new_recurrence.base_event_id.microsoft_id:
             new_recurrence.base_event_id._microsoft_delete(
                 new_recurrence.base_event_id._get_organizer(),
-                new_recurrence.base_event_id.ms_organizer_event_id
+                new_recurrence.base_event_id.microsoft_id
             )
 
         return new_recurrence

--- a/addons/microsoft_calendar/models/microsoft_sync.py
+++ b/addons/microsoft_calendar/models/microsoft_sync.py
@@ -14,7 +14,6 @@ from odoo.osv import expression
 
 from odoo.addons.microsoft_calendar.utils.microsoft_event import MicrosoftEvent
 from odoo.addons.microsoft_calendar.utils.microsoft_calendar import MicrosoftCalendarService
-from odoo.addons.microsoft_calendar.utils.event_id_storage import IDS_SEPARATOR, combine_ids, split_ids
 from odoo.addons.microsoft_account.models.microsoft_service import TIMEOUT
 
 _logger = logging.getLogger(__name__)
@@ -56,20 +55,8 @@ class MicrosoftSync(models.AbstractModel):
     _name = 'microsoft.calendar.sync'
     _description = "Synchronize a record with Microsoft Calendar"
 
-    microsoft_id = fields.Char('Microsoft Calendar Id', copy=False)
-
-    ms_organizer_event_id = fields.Char(
-        'Organizer event Id',
-        compute='_compute_organizer_event_id',
-        inverse='_set_event_id',
-        search='_search_organizer_event_id',
-    )
-    ms_universal_event_id = fields.Char(
-        'Universal event Id',
-        compute='_compute_universal_event_id',
-        inverse='_set_event_id',
-        search='_search_universal_event_id',
-    )
+    microsoft_id = fields.Char('Organizer event Id', copy=False, index=True)
+    ms_universal_event_id = fields.Char('Universal event Id', copy=False, index=True)
 
     # This field helps to know when a microsoft event need to be resynced
     need_sync_m = fields.Boolean(default=True, copy=False)
@@ -84,15 +71,15 @@ class MicrosoftSync(models.AbstractModel):
 
         if self.env.user._get_microsoft_sync_status() != "sync_paused":
             for record in self:
-                if record.need_sync_m and record.ms_organizer_event_id:
+                if record.need_sync_m and record.microsoft_id:
                     if not vals.get('active', True):
                         # We need to delete the event. Cancel is not sufficient. Errors may occur.
-                        record._microsoft_delete(record._get_organizer(), record.ms_organizer_event_id, timeout=3)
+                        record._microsoft_delete(record._get_organizer(), record.microsoft_id, timeout=3)
                     elif fields_to_sync:
                         values = record._microsoft_values(fields_to_sync)
                         if not values:
                             continue
-                        record._microsoft_patch(record._get_organizer(), record.ms_organizer_event_id, values, timeout=3)
+                        record._microsoft_patch(record._get_organizer(), record.microsoft_id, values, timeout=3)
 
         return result
 
@@ -109,48 +96,6 @@ class MicrosoftSync(models.AbstractModel):
                     record._microsoft_insert(record._microsoft_values(self._get_microsoft_synced_fields()), timeout=3)
         return records
 
-    @api.depends('microsoft_id')
-    def _compute_organizer_event_id(self):
-        for event in self:
-            event.ms_organizer_event_id = split_ids(event.microsoft_id)[0] if event.microsoft_id else False
-
-    @api.depends('microsoft_id')
-    def _compute_universal_event_id(self):
-        for event in self:
-            event.ms_universal_event_id = split_ids(event.microsoft_id)[1] if event.microsoft_id else False
-
-    def _set_event_id(self):
-        for event in self:
-            event.microsoft_id = combine_ids(event.ms_organizer_event_id, event.ms_universal_event_id)
-
-    def _search_event_id(self, operator, value, with_uid):
-        def _domain(v):
-            return ('microsoft_id', '=like', f'%{IDS_SEPARATOR}{v}' if with_uid else f'{v}%')
-
-        if operator == '=' and not value:
-            return (
-                ['|', ('microsoft_id', '=', False), ('microsoft_id', '=ilike', f'%{IDS_SEPARATOR}')]
-                if with_uid
-                else [('microsoft_id', '=', False)]
-            )
-        elif operator == '!=' and not value:
-            return (
-                [('microsoft_id', 'ilike', f'{IDS_SEPARATOR}_')]
-                if with_uid
-                else [('microsoft_id', '!=', False)]
-            )
-        return (
-            ['|'] * (len(value) - 1) + [_domain(v) for v in value]
-            if operator.lower() == 'in'
-            else [_domain(value)]
-        )
-
-    def _search_organizer_event_id(self, operator, value):
-        return self._search_event_id(operator, value, with_uid=False)
-
-    def _search_universal_event_id(self, operator, value):
-        return self._search_event_id(operator, value, with_uid=True)
-
     @api.model
     def _get_microsoft_service(self):
         return MicrosoftCalendarService(self.env['microsoft.service'])
@@ -165,7 +110,7 @@ class MicrosoftSync(models.AbstractModel):
         synced = self._get_synced_events()
         if self.env.user._get_microsoft_sync_status() != "sync_paused":
             for ev in synced:
-                ev._microsoft_delete(ev._get_organizer(), ev.ms_organizer_event_id)
+                ev._microsoft_delete(ev._get_organizer(), ev.microsoft_id)
         return super().unlink()
 
     def _write_from_microsoft(self, microsoft_event, vals):
@@ -189,7 +134,7 @@ class MicrosoftSync(models.AbstractModel):
         new_records = records_to_sync - updated_records
 
         for record in cancelled_records._get_synced_events():
-            record._microsoft_delete(record._get_organizer(), record.ms_organizer_event_id)
+            record._microsoft_delete(record._get_organizer(), record.microsoft_id)
         for record in new_records:
             values = record._microsoft_values(self._get_microsoft_synced_fields())
             if isinstance(values, dict):
@@ -201,10 +146,11 @@ class MicrosoftSync(models.AbstractModel):
             values = record._microsoft_values(self._get_microsoft_synced_fields())
             if not values:
                 continue
-            record._microsoft_patch(record._get_organizer(), record.ms_organizer_event_id, values)
+            record._microsoft_patch(record._get_organizer(), record.microsoft_id, values)
 
     def _cancel_microsoft(self):
         self.microsoft_id = False
+        self.ms_universal_event_id = False
         self.unlink()
 
     def _sync_recurrence_microsoft2odoo(self, microsoft_events, new_events=None):
@@ -222,7 +168,7 @@ class MicrosoftSync(models.AbstractModel):
                 need_sync_m=False
             )
             to_create = recurrents.filter(
-                lambda e: e.seriesMasterId == new_calendar_recurrence['ms_organizer_event_id']
+                lambda e: e.seriesMasterId == new_calendar_recurrence['microsoft_id']
             )
             recurrents -= to_create
             base_values = dict(
@@ -252,10 +198,7 @@ class MicrosoftSync(models.AbstractModel):
         # is specific to the Microsoft user calendar.
         ms_recurrence_ids = list({x.seriesMasterId for x in recurrents})
         ms_recurrence_uids = {r.id: r.iCalUId for r in microsoft_events if r.id in ms_recurrence_ids}
-
-        recurrences = self.env['calendar.recurrence'].search([
-            ('ms_universal_event_id', 'in', ms_recurrence_uids.values())
-        ])
+        recurrences = self.env['calendar.recurrence'].search([('ms_universal_event_id', 'in', microsoft_events.uids)])
         for recurrent_master_id in ms_recurrence_ids:
             recurrence_id = recurrences.filtered(
                 lambda ev: ev.ms_universal_event_id == ms_recurrence_uids[recurrent_master_id]
@@ -285,7 +228,7 @@ class MicrosoftSync(models.AbstractModel):
         Update Odoo events from Outlook recurrence and events.
         """
         # get the list of events to update ...
-        events_to_update = events.filter(lambda e: e.seriesMasterId == self.ms_organizer_event_id)
+        events_to_update = events.filter(lambda e: e.seriesMasterId == self.microsoft_id)
         if self.end_type in ['count', 'forever']:
             events_to_update = list(events_to_update)[:MAX_RECURRENT_EVENT]
 
@@ -344,12 +287,12 @@ class MicrosoftSync(models.AbstractModel):
         cancelled_recurrences = self.env['calendar.recurrence'].search([
             '|',
             ('ms_universal_event_id', 'in', cancelled.uids),
-            ('ms_organizer_event_id', 'in', cancelled.ids),
+            ('microsoft_id', 'in', cancelled.ids),
         ])
         cancelled_events = self.browse([
             e.odoo_id(self.env)
             for e in cancelled
-            if e.id not in [r.ms_organizer_event_id for r in cancelled_recurrences]
+            if e.id not in [r.microsoft_id for r in cancelled_recurrences]
         ])
         cancelled_recurrences._cancel_microsoft()
         cancelled_events = cancelled_events.exists()
@@ -461,7 +404,8 @@ class MicrosoftSync(models.AbstractModel):
                 self._ensure_attendees_have_email()
                 event_id, uid = microsoft_service.insert(values, token=token, timeout=timeout)
                 self.with_context(dont_notify=True).write({
-                    'microsoft_id': combine_ids(event_id, uid),
+                    'microsoft_id': event_id,
+                    'ms_universal_event_id': uid,
                     'need_sync_m': False,
                 })
 
