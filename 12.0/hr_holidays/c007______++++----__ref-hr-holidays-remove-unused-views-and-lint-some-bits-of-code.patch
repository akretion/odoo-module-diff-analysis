PR: https://github.com/odoo/odoo/pull/

From: 3522fe1b89729e10eb3ce569c9f973181983a315
From: Thibault Delavall√©e
Date: 2018-09-10 11:08:43

Structural Changes: 55.9
Total Changes: 193

[REF] hr_holidays: remove unused views and lint some bits of code

Purpose is to clean a bit the code to prepare some incoming modifications.
More specifically this commit focuses on removing unused views and actions
to lessen future work in shaping them like requested.

This commit contains :

 * small linting of leave fields;
 * remove some unused and unnecessary views and actions;
 * ensure default values for request_unit_all;
 * small linting of tests;

This commit is linked to task ID 1876795 and PR #26571.

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -10,12 +10,11 @@ from datetime import timedelta, datetime, time
 from pytz import timezone, UTC
 
 from odoo import api, fields, models
+from odoo.addons.resource.models.resource import float_to_time
 from odoo.exceptions import AccessError, UserError, ValidationError
 from odoo.tools import float_compare
 from odoo.tools.translate import _
 
-from odoo.addons.resource.models.resource import float_to_time
-
 _logger = logging.getLogger(__name__)
 
 
@@ -87,25 +86,36 @@ class HolidaysRequest(models.Model):
         ('validate1', 'Second Approval'),
         ('validate', 'Approved')
         ], string='Status', readonly=True, track_visibility='onchange', copy=False, default='confirm',
-            help="The status is set to 'To Submit', when a leave request is created." +
-            "\nThe status is 'To Approve', when leave request is confirmed by user." +
-            "\nThe status is 'Refused', when leave request is refused by manager." +
-            "\nThe status is 'Approved', when leave request is approved by manager.")
-    payslip_status = fields.Boolean('Reported in last payslips',
-        help='Green this button when the leave has been taken into account in the payslip.')
+        help="The status is set to 'To Submit', when a leave request is created." +
+        "\nThe status is 'To Approve', when leave request is confirmed by user." +
+        "\nThe status is 'Refused', when leave request is refused by manager." +
+        "\nThe status is 'Approved', when leave request is approved by manager.")
+    payslip_status = fields.Boolean('Reported in last payslips', help='Green this button when the leave has been taken into account in the payslip.')
     report_note = fields.Text('HR Comments')
     user_id = fields.Many2one('res.users', string='User', related='employee_id.user_id', related_sudo=True, store=True, default=lambda self: self.env.uid, readonly=True)
-    date_from = fields.Datetime('Start Date', readonly=True, index=True, copy=False, required=True,
+    date_from = fields.Datetime(
+        'Start Date', readonly=True, index=True, copy=False, required=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, track_visibility='onchange')
-    date_to = fields.Datetime('End Date', readonly=True, copy=False, required=True,
+    date_to = fields.Datetime(
+        'End Date', readonly=True, copy=False, required=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, track_visibility='onchange')
-    holiday_status_id = fields.Many2one("hr.leave.type", string="Leave Type", required=True, readonly=True,
+    # leave type configuration
+    holiday_status_id = fields.Many2one(
+        "hr.leave.type", string="Leave Type", required=True, readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]},
         domain=lambda self: self._default_domain_holiday_status())
-    employee_id = fields.Many2one('hr.employee', string='Employee', index=True, readonly=True,
+    leave_type_request_unit = fields.Selection(related='holiday_status_id.request_unit', readonly=True)
+    validation_type = fields.Selection('Validation Type', related='holiday_status_id.validation_type')
+    # HR data
+    employee_id = fields.Many2one(
+        'hr.employee', string='Employee', index=True, readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, default=_default_employee, track_visibility='onchange')
     manager_id = fields.Many2one('hr.employee', string='Manager', readonly=True)
+    department_id = fields.Many2one(
+        'hr.department', string='Department', readonly=True,
+        states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
     notes = fields.Text('Reasons', readonly=True, states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
+    # details
     number_of_days_temp = fields.Float(
         'Duration (Days)', copy=False, readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]},
@@ -115,45 +125,41 @@ class HolidaysRequest(models.Model):
         'Duration (Hours)', copy=False, readonly=True, compute='_compute_number_of_hours',
         help='Number of hours of the leave request according to your working schedule.')
     meeting_id = fields.Many2one('calendar.event', string='Meeting')
-
     parent_id = fields.Many2one('hr.leave', string='Parent', copy=False)
     linked_request_ids = fields.One2many('hr.leave', 'parent_id', string='Linked Requests')
-    department_id = fields.Many2one('hr.department', string='Department', readonly=True, states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
-    category_id = fields.Many2one('hr.employee.category', string='Employee Tag', readonly=True,
+    category_id = fields.Many2one(
+        'hr.employee.category', string='Employee Tag', readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, help='Category of Employee')
     holiday_type = fields.Selection([
         ('employee', 'By Employee'),
         ('department', 'By Department'),
-        ('category', 'By Employee Tag')
-    ], string='Allocation Mode', readonly=True, required=True, default='employee',
+        ('category', 'By Employee Tag')],
+        string='Allocation Mode', readonly=True, required=True, default='employee',
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]},
         help='By Employee: Allocation/Request for individual Employee, By Employee Tag: Allocation/Request for group of employees in category')
-    first_approver_id = fields.Many2one('hr.employee', string='First Approval', readonly=True, copy=False,
+    first_approver_id = fields.Many2one(
+        'hr.employee', string='First Approval', readonly=True, copy=False,
         help='This area is automatically filled by the user who validate the leave', oldname='manager_id')
-    second_approver_id = fields.Many2one('hr.employee', string='Second Approval', readonly=True, copy=False, oldname='manager_id2',
+    second_approver_id = fields.Many2one(
+        'hr.employee', string='Second Approval', readonly=True, copy=False, oldname='manager_id2',
         help='This area is automaticly filled by the user who validate the leave with second level (If Leave type need second validation)')
-    validation_type = fields.Selection('Validation Type', related='holiday_status_id.validation_type')
     can_reset = fields.Boolean('Can reset', compute='_compute_can_reset')
     can_approve = fields.Boolean('Can Approve', compute='_compute_can_approve')
-
-    # Those fields are mostly for the interface only
-
-    # Interface fields used when not using hour-based computation
+    # UX FIELDS
+    # used when not using hour-based computation
     request_date_from = fields.Date('Request Start Date')
     request_date_to = fields.Date('Request End Date')
-
-    leave_type_request_unit = fields.Selection(related='holiday_status_id.request_unit', readonly=True)
-
-    # These fields are only used only when the leave is taken in half days
-    request_date_from_period = fields.Selection([('am', 'Morning'),
-                                                 ('pm', 'Afternoon')], string="Date Period Start", default='am')
-    request_date_to_period = fields.Selection([('am', 'Morning'),
-                                               ('pm', 'Afternoon')], string="Date Period End", default='pm')
-
+    # used only when the leave is taken in half days
+    request_date_from_period = fields.Selection([
+        ('am', 'Morning'), ('pm', 'Afternoon')],
+        string="Date Period Start", default='am')
+    request_date_to_period = fields.Selection([
+        ('am', 'Morning'), ('pm', 'Afternoon')],
+        string="Date Period End", default='pm')
+    # request type + duplicate because we cannot hide some entries of a selection field
     request_unit_all = fields.Selection([('half', 'Half-day'),
-                             ('day', '1 Day'),
-                             ('period', 'Period')])
-    # Duplicate field because we cannot hide some entries of a selection field
+                                         ('day', '1 Day'),
+                                         ('period', 'Period')], default='day')
     request_unit_day = fields.Selection([('day', '1 Day'),
                                          ('period', 'Period')], default='day')
 

--- a/addons/hr_holidays/models/hr_leave_allocation.py
+++ b/addons/hr_holidays/models/hr_leave_allocation.py
@@ -5,17 +5,14 @@
 
 import logging
 
-import pytz
-
 from datetime import datetime, time
 from dateutil.relativedelta import relativedelta
 
 from odoo import api, fields, models
+from odoo.addons.resource.models.resource import HOURS_PER_DAY
 from odoo.exceptions import AccessError, UserError
 from odoo.tools.translate import _
 
-from odoo.addons.resource.models.resource import HOURS_PER_DAY
-
 _logger = logging.getLogger(__name__)
 
 
@@ -48,18 +45,22 @@ class HolidaysAllocation(models.Model):
         ('validate1', 'Second Approval'),
         ('validate', 'Approved')
         ], string='Status', readonly=True, track_visibility='onchange', copy=False, default='confirm',
-            help="The status is set to 'To Submit', when a leave request is created." +
-            "\nThe status is 'To Approve', when leave request is confirmed by user." +
-            "\nThe status is 'Refused', when leave request is refused by manager." +
-            "\nThe status is 'Approved', when leave request is approved by manager.")
-    date_from = fields.Datetime('Start Date', readonly=True, index=True, copy=False,
+        help="The status is set to 'To Submit', when a leave request is created." +
+        "\nThe status is 'To Approve', when leave request is confirmed by user." +
+        "\nThe status is 'Refused', when leave request is refused by manager." +
+        "\nThe status is 'Approved', when leave request is approved by manager.")
+    date_from = fields.Datetime(
+        'Start Date', readonly=True, index=True, copy=False,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, track_visibility='onchange')
-    date_to = fields.Datetime('End Date', readonly=True, copy=False,
+    date_to = fields.Datetime(
+        'End Date', readonly=True, copy=False,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, track_visibility='onchange')
-    holiday_status_id = fields.Many2one("hr.leave.type", string="Leave Type", required=True, readonly=True,
+    holiday_status_id = fields.Many2one(
+        "hr.leave.type", string="Leave Type", required=True, readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]},
         domain=lambda self: self._default_domain_holiday_status_id(), default=_default_holiday_status_id)
-    employee_id = fields.Many2one('hr.employee', string='Employee', index=True, readonly=True,
+    employee_id = fields.Many2one(
+        'hr.employee', string='Employee', index=True, readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, default=_default_employee, track_visibility='onchange')
     notes = fields.Text('Reasons', readonly=True, states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
     number_of_days_temp = fields.Float(
@@ -70,24 +71,29 @@ class HolidaysAllocation(models.Model):
     number_of_hours = fields.Float('Duration (hours)', help="Number of hours of the leave allocation according to your working schedule.")
     parent_id = fields.Many2one('hr.leave.allocation', string='Parent')
     linked_request_ids = fields.One2many('hr.leave.allocation', 'parent_id', string='Linked Requests')
-    department_id = fields.Many2one('hr.department', string='Department', readonly=True, states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
-    category_id = fields.Many2one('hr.employee.category', string='Employee Tag', readonly=True,
-        states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, help='Category of Employee')
-    holiday_type = fields.Selection([
-        ('employee', 'By Employee'),
-        ('department', 'By Department'),
-        ('category', 'By Employee Tag')
-    ], string='Allocation Mode', readonly=True, required=True, default='employee',
-        states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]},
-        help='By Employee: Allocation for individual Employee, By Employee Tag: Allocation for group of employees in category')
-    first_approver_id = fields.Many2one('hr.employee', string='First Approval', readonly=True, copy=False,
+    first_approver_id = fields.Many2one(
+        'hr.employee', string='First Approval', readonly=True, copy=False,
         help='This area is automatically filled by the user who validate the leave', oldname='manager_id')
-    second_approver_id = fields.Many2one('hr.employee', string='Second Approval', readonly=True, copy=False, oldname='manager_id2',
+    second_approver_id = fields.Many2one(
+        'hr.employee', string='Second Approval', readonly=True, copy=False, oldname='manager_id2',
         help='This area is automaticly filled by the user who validate the leave with second level (If Leave type need second validation)')
     validation_type = fields.Selection('Validation Type', related='holiday_status_id.validation_type', readonly=True)
     can_reset = fields.Boolean('Can reset', compute='_compute_can_reset')
     can_approve = fields.Boolean('Can Approve', compute='_compute_can_approve')
     type_request_unit = fields.Selection(related='holiday_status_id.request_unit', readonly=True)
+    # mode
+    holiday_type = fields.Selection([
+        ('employee', 'By Employee'),
+        ('department', 'By Department'),
+        ('category', 'By Employee Tag')],
+        string='Allocation Mode', readonly=True, required=True, default='employee',
+        states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]},
+        help='By Employee: Allocation for individual Employee, By Employee Tag: Allocation for group of employees in category')
+    department_id = fields.Many2one('hr.department', string='Department', readonly=True, states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
+    category_id = fields.Many2one(
+        'hr.employee.category', string='Employee Tag', readonly=True,
+        states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, help='Category of Employee')
+    # accrual configuration
     accrual = fields.Boolean("Accrual", related='holiday_status_id.accrual', store=True, readonly=True)
     number_per_interval = fields.Float("Number of unit per interval", readonly=True, states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, default=1)
     interval_number = fields.Integer("Number of unit between two intervals", readonly=True, states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, default=1)

--- a/addons/hr_holidays/models/hr_leave_type.py
+++ b/addons/hr_holidays/models/hr_leave_type.py
@@ -21,7 +21,8 @@ class HolidaysType(models.Model):
     name = fields.Char('Leave Type', required=True, translate=True)
     sequence = fields.Integer(default=100,
                               help='The type with the smallest sequence is the default value in leave request')
-    categ_id = fields.Many2one('calendar.event.type', string='Meeting Type',
+    categ_id = fields.Many2one(
+        'calendar.event.type', string='Meeting Type',
         help='Once a leave is validated, Odoo will create a corresponding meeting of this type in the calendar.')
     color_name = fields.Selection([
         ('red', 'Red'),
@@ -41,56 +42,44 @@ class HolidaysType(models.Model):
         ('wheat', 'Wheat'),
         ('ivory', 'Ivory')], string='Color in Report', required=True, default='red',
         help='This color will be used in the leaves summary located in Reporting > Leaves by Department.')
-    limit = fields.Boolean('Exceed Allocation',
-        help="If you select this check box, the system will allow the employees to ask"
-             "for leaves without allocating some beforehand")
+    limit = fields.Boolean('Exceed Allocation', help="If you select this check box, the system will allow the employees to ask for leaves without allocating some beforehand")
     active = fields.Boolean('Active', default=True,
-        help="If the active field is set to false, it will allow you to hide the leave type without removing it.")
-
+                            help="If the active field is set to false, it will allow you to hide the leave type without removing it.")
     max_leaves = fields.Float(compute='_compute_leaves', string='Maximum Allowed',
-        help='This value is given by the sum of all leaves requests with a positive value.')
-    leaves_taken = fields.Float(compute='_compute_leaves', string='Leaves Already Taken',
+                              help='This value is given by the sum of all leaves requests with a positive value.')
+    leaves_taken = fields.Float(
+        compute='_compute_leaves', string='Leaves Already Taken',
         help='This value is given by the sum of all leaves requests with a negative value.')
-    remaining_leaves = fields.Float(compute='_compute_leaves', string='Remaining Leaves',
+    remaining_leaves = fields.Float(
+        compute='_compute_leaves', string='Remaining Leaves',
         help='Maximum Leaves Allowed - Leaves Already Taken')
-    virtual_remaining_leaves = fields.Float(compute='_compute_leaves', string='Virtual Remaining Leaves',
+    virtual_remaining_leaves = fields.Float(
+        compute='_compute_leaves', string='Virtual Remaining Leaves',
         help='Maximum Leaves Allowed - Leaves Already Taken - Leaves Waiting Approval')
-
     company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.user.company_id)
-
-    validation_type = fields.Selection([('hr', 'Human Resource officer'),
-                                      ('manager', 'Employee Manager'),
-                                      ('both', 'Double Validation')],
-                                     default='hr',
-                                     string='Validation By')
-
-    employee_applicability = fields.Selection([('both', 'Both'),
-                                            ('leave', 'Can be requested'),
-                                            ('allocation', 'Can be allocated')],
-                                           default=lambda self: 'leave' if self.limit else 'both', string='Mode',
-                                           help='This leave type will be available on Leave / Allocation request based on selected value')
-
+    validation_type = fields.Selection([
+        ('hr', 'Human Resource officer'),
+        ('manager', 'Employee Manager'),
+        ('both', 'Double Validation')], default='hr', string='Validation By')
+    employee_applicability = fields.Selection([
+        ('both', 'Both'),
+        ('leave', 'Can be requested'),
+        ('allocation', 'Can be allocated')],
+        default=lambda self: 'leave' if self.limit else 'both',
+        string='Mode', help='This leave type will be available on Leave / Allocation request based on selected value')
     validity_start = fields.Date("Start Date", default=fields.Date.today,
-                                 help='Adding validity to types of leaves so that it cannot be selected outside'
-                                 'this time period')
+                                 help='Adding validity to types of leaves so that it cannot be selected outside this time period')
     validity_stop = fields.Date("End Date")
-
     valid = fields.Boolean(compute='_compute_valid', search='_search_valid', help='This indicates if it is still possible to use this type of leave')
-
-
     time_type = fields.Selection([('leave', 'Leave'), ('other', 'Other')], default='leave', string="Kind of Leave",
                                  help="Whether this should be computed as a holiday or as work time (eg: formation)")
-    request_unit = fields.Selection([('day', 'Day'),
-                               ('half', 'Half-day'),
-                               ('hour', 'Hours')], default='day', string='Take Leaves in', required=True)
-
+    request_unit = fields.Selection([
+        ('day', 'Day'), ('half', 'Half-day'), ('hour', 'Hours')],
+        default='day', string='Take Leaves in', required=True)
     accrual = fields.Boolean('Accrual', default=False,
                              help='This option forces this type of leave to be allocated accrually')
-
     unpaid = fields.Boolean('Is Unpaid', default=False)
-
     negative = fields.Boolean('Allow Negative', help="This option allows to take more leaves than allocated")
-
     balance_limit = fields.Float('Max Balance Limit', default=0, help="The maximum quantity of allocated days on this allocation, zero meaning infinite amount")
 
     _sql_constraints = [
