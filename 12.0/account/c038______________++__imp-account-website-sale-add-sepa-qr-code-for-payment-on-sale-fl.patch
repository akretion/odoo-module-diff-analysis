PR: https://github.com/odoo/odoo/pull/

From: 358f050555b77c529b82adeccea904d74ba4f83f
From: sed-odoo
Date: 2018-08-10 14:38:03

Structural Changes: 6
Total Changes: 8

[IMP] account,website_sale: Add SEPA QR Code for payment on sale flows

Task id: 1866074

PURPOSE
=======

Creates a QR code which, when scanned, automatically populates a SEPA transfer form.
If your banking app provides this feature, you can populate an entire transfer form
at the touch of a button, just by scanning the QR code.

This was implemented in order to use it in ecommerce or portal payment views of
quotations and invoices.

SPECIFICATIONS
==============

Sepa qr code:
-------------

- Generate the qr code:
   - To figure out. a payment can be done on sales orders, invoices or not related to
     anything (simple payment form)

- Configuration:
   - Add a new settings in the invoicing config menu "SEPA QR Code" to activate QR
     Code payments
   - Show an explicit warning if the journal is not well configured to manage qr
     code (bank account set, etc.)

- Display: show the qr code after the 'Thank you' message (in web page and printed
  documents).

================================= pseudo patch: =================================

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -67,6 +67,10 @@ Best Regards,'''))
                                               default='none', help='You can set here the default communication that will appear on customer invoices, once validated, to help the customer to refer to that particular invoice when making the payment.')
     account_sanitize_invoice_ref = fields.Boolean(string="Sanitize Invoice References", default=True, help="Whether or not customer invoices and vendor bills should automatically correct their reference they are maximum 140 characters long, consist only of latin characters, contain no '//' sequence, and have no leading or trailing /. (these are the SEPA criteria for payment communications)")
 
+    qr_code = fields.Boolean(string='Display SEPA QR code')
+    qr_code_payment_journal_id = fields.Many2one('account.journal', string='SEPA QR Code Bank Journal account')
+    qr_code_valid = fields.Boolean(string='Has all required arguments', related="qr_code_payment_journal_id.bank_account_id.qr_code_valid")
+
     #Fields of the setup step for opening move
     account_opening_move_id = fields.Many2one(string='Opening Journal Entry', comodel_name='account.move', help="The journal entry containing the initial balance of all this company's accounts.")
     account_opening_journal_id = fields.Many2one(string='Opening Journal', comodel_name='account.journal', related='account_opening_move_id.journal_id', help="Journal where the opening entry of this company's accounting has been posted.")

--- a/addons/account/models/res_config_settings.py
+++ b/addons/account/models/res_config_settings.py
@@ -83,6 +83,10 @@ class ResConfigSettings(models.TransientModel):
                don't want to reconcile all the past payments with bank statements.""")
     account_sanitize_invoice_ref = fields.Boolean(string="Sanitize Invoice References", related='company_id.account_sanitize_invoice_ref', help="If checked, customer invoices' and vendor bills' referneces will automatically correct their reference so that they are maximum 140 characters long, consist only of latin characters, contain no '//' sequence, and have no leading or trailing /.")
 
+    qr_code = fields.Boolean(string='Display SEPA QR code', related='company_id.qr_code')
+    qr_code_payment_journal_id = fields.Many2one('account.journal', related='company_id.qr_code_payment_journal_id', string="Payment Journal", domain="['&',('type', '=', 'bank'), ('currency_id.name','=','EUR')]")
+    qr_code_valid = fields.Boolean(string='Has all required arguments', related="qr_code_payment_journal_id.bank_account_id.qr_code_valid")
+
     @api.multi
     def set_values(self):
         super(ResConfigSettings, self).set_values()
