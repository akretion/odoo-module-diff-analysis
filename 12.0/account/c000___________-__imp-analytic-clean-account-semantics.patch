PR: https://github.com/odoo/odoo/pull/

From: 00cdc5095ac73b58df1f19c092f58987cc6026c5
From: jem-odoo
Date: 2017-12-11 10:33:49

Breaking data model changes score: 5, change matches:
-    amount = fields.Monetary(currency_field='company_currency_id')
-    company_currency_id = fields.Many2one('res.currency', related='company_id.currency_id', readonly=True,
-    currency_id = fields.Many2one('res.currency', related='move_id.currency_id', string='Account Currency', store=True, help="The related account currency if not equal to the company one.", readonly=True)
-    amount_currency = fields.Monetary(related='move_id.amount_currency', store=True, help="The amount expressed in the related account currency if not equal to the company one.", readonly=True)
-    analytic_amount_currency = fields.Monetary(string='Amount Currency', compute="_get_analytic_amount_currency", help="The amount expressed in the related account currency if not equal to the company one.", readonly=True)

Total Changes: 12

[IMP] analytic: clean account semantics

When installing account module, some field semantic on AAL
changed. Indeed this module modify some concept for its own
use cases.

Since analytic accounting is only used inside the company,
there is no interess to have the amounts stored in both
currencies. So the fields amount_currency, analytic_amount_currency
and company_currency_id can be removed. Doing that, we remove the
unfair related of account module.

================================= pseudo patch: =================================

--- a/addons/account/models/account_analytic_line.py
+++ b/addons/account/models/account_analytic_line.py
@@ -9,25 +9,15 @@ class AccountAnalyticLine(models.Model):
     _description = 'Analytic Line'
     _order = 'date desc'
 
-    amount = fields.Monetary(currency_field='company_currency_id')
     product_uom_id = fields.Many2one('product.uom', string='Unit of Measure')
     product_id = fields.Many2one('product.product', string='Product')
-    general_account_id = fields.Many2one('account.account', string='Financial Account', ondelete='restrict', readonly=True, 
+    general_account_id = fields.Many2one('account.account', string='Financial Account', ondelete='restrict', readonly=True,
                                          related='move_id.account_id', store=True, domain=[('deprecated', '=', False)])
     move_id = fields.Many2one('account.move.line', string='Move Line', ondelete='cascade', index=True)
     code = fields.Char(size=8)
     ref = fields.Char(string='Ref.')
-    company_currency_id = fields.Many2one('res.currency', related='company_id.currency_id', readonly=True,
-        help='Utility field to express amount currency')
-    currency_id = fields.Many2one('res.currency', related='move_id.currency_id', string='Account Currency', store=True, help="The related account currency if not equal to the company one.", readonly=True)
-    amount_currency = fields.Monetary(related='move_id.amount_currency', store=True, help="The amount expressed in the related account currency if not equal to the company one.", readonly=True)
-    analytic_amount_currency = fields.Monetary(string='Amount Currency', compute="_get_analytic_amount_currency", help="The amount expressed in the related account currency if not equal to the company one.", readonly=True)
     partner_id = fields.Many2one('res.partner', related='account_id.partner_id', string='Partner', store=True, readonly=True)
 
-    def _get_analytic_amount_currency(self):
-        for line in self:
-            line.analytic_amount_currency = abs(line.amount_currency) * copysign(1, line.amount)
-
     @api.v8
     @api.onchange('product_id', 'product_uom_id', 'unit_amount', 'currency_id')
     def on_change_unit_amount(self):
