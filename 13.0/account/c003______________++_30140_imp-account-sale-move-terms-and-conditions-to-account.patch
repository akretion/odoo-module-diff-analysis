PR: https://github.com/odoo/odoo/pull/30140

From: ca25a692bd19fdca2b2600f2054eb419aae28999
From: mgh-odoo
Date: 2019-02-07 13:11:19

Structural Changes: 5
Total Changes: 13

[IMP] account, sale: Move terms and conditions to account

Purpose
=======

Be able to define terms and conditions if sales is not installed.

If sales is not installed, the user cannot define default terms and conditions
for his customer invoices since the setting in the sales section.

If sales is installed and default terms & conditions are defined, a customer
invoice created from scratch (not from an SO) will have them.

This is not consistent.

Task: 1917663

closes odoo/odoo#30140

================================= pseudo patch: =================================

--- a/addons/account/models/account_invoice.py
+++ b/addons/account/models/account_invoice.py
@@ -97,6 +97,11 @@ class AccountInvoice(models.Model):
         journal = self._default_journal()
         return journal.currency_id or journal.company_id.currency_id or self.env.user.company_id.currency_id
 
+    def _default_comment(self):
+        invoice_type = self.env.context.get('type', 'out_invoice')
+        if invoice_type == 'out_invoice' and self.env['ir.config_parameter'].sudo().get_param('account.use_invoice_terms'):
+            return self.env.user.company_id.invoice_terms
+
     @api.one
     @api.depends(
         'state', 'currency_id', 'invoice_line_ids.price_subtotal',
@@ -255,7 +260,7 @@ class AccountInvoice(models.Model):
         help="Technical field holding the number given to the invoice, automatically set when the invoice is validated then stored to set the same number again if the invoice is cancelled, set to draft and re-validated.")
     reference = fields.Char(string='Payment Ref.', copy=False, readonly=True, states={'draft': [('readonly', False)]},
         help='The payment communication that will be automatically populated once the invoice validation. You can also write a free communication.')
-    comment = fields.Text('Additional Information', readonly=True, states={'draft': [('readonly', False)]})
+    comment = fields.Text('Additional Information', readonly=True, states={'draft': [('readonly', False)]}, default=_default_comment)
 
     state = fields.Selection([
             ('draft','Draft'),

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -104,6 +104,7 @@ Best Regards,'''))
     # account dashboard onboarding
     account_invoice_onboarding_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done"), ('closed', "Closed")], string="State of the account invoice onboarding panel", default='not_done')
     account_dashboard_onboarding_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done"), ('closed', "Closed")], string="State of the account dashboard onboarding panel", default='not_done')
+    invoice_terms = fields.Text(string='Default Terms and Conditions', translate=True)
 
     @api.constrains('account_opening_date', 'fiscalyear_last_day', 'fiscalyear_last_month')
     def _check_fiscalyear_last_day(self):

--- a/addons/account/models/res_config_settings.py
+++ b/addons/account/models/res_config_settings.py
@@ -91,6 +91,11 @@ class ResConfigSettings(models.TransientModel):
     invoice_is_print = fields.Boolean(string='Print', related='company_id.invoice_is_print', readonly=False)
     invoice_is_email = fields.Boolean(string='Send Email', related='company_id.invoice_is_email', readonly=False)
     incoterm_id = fields.Many2one('account.incoterms', string='Default incoterm', related='company_id.incoterm_id', help='International Commercial Terms are a series of predefined commercial terms used in international transactions.', readonly=False)
+    invoice_terms = fields.Text(related='company_id.invoice_terms', string="Terms & Conditions", readonly=False)
+    use_invoice_terms = fields.Boolean(
+        string='Default Terms & Conditions',
+        oldname='default_use_sale_note',
+        config_parameter='account.use_invoice_terms')
 
     @api.multi
     def set_values(self):
