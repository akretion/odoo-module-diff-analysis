PR: https://github.com/odoo/odoo/pull/21982

From: 7c6b8baf03d9c942c25112c907626d5184e4dd09
From: Jaykishan Solanki
Date: 2019-02-06 11:57:29

Breaking data model changes score: 3, change matches:
-    check_next_number = fields.Integer('Next Check Number', compute='_get_check_next_number', inverse='_set_check_next_number',
-    check_number = fields.Integer(string="Check Number", readonly=True, copy=False, default=0,
-    check_number = fields.Integer(string="Check Number", readonly=True, copy=False,

Total Changes: 18

[IMP] account, point_of_sale,...: Improve usability

* Improve warning message when user tries to create credit note
* Hide 'Active' column in Taxes/Currencies and added default 'Active' filter in Taxes
* Removed 'save this page...' under 'Account Follow-up Levels','Budget Management',
  'Asset Management','Deferred Revenues Management' section in Accounting Settings
* Fixed margin between Cash Rounding checkbox and it's link in Accounting Settings
* Renamed action menu 'Confirm Payments' to 'Post Payments' for payments to make it
  consistent with it's form view
* Hide payment acquirers config for non-adviser users and also restric editing access
  rights for non advisior and employee user (only data read access rights on payment acquirers)
* Renamed Journal type from 'Sale' to 'Sales' and journals 'POS Sale Journal, Stock Journal,
  Cash Basis Tax Journal to Point of Sale Journal, Inventory Valuation Journal and Cash Basis
  Taxes Journal respectively
* Renamed the stat button 'Entries' to 'Items' for account assets form view
* Improved description and name of account_voucher module
* Improved Menu typo, Purchase Receipts to Purchases Receipts
* account_check_printing, hr_expense_check: made field storing check numbers character
  instead of integer, integer field for check numbers shows check numbers as amount
  (i.e., with thousand separator) on UI, which is wrong, hence replaced it with character
  type field and a constraint to allow only numbers to be stored in it.

TaskID: 40157

Co-authored-by: Ravi Gohil <rgo@odoo.com>

closes odoo/odoo#21982

================================= pseudo patch: =================================

--- a/addons/account_check_printing/models/account_journal.py
+++ b/addons/account_check_printing/models/account_journal.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+import re
 from odoo import models, fields, api, _
 from odoo.exceptions import ValidationError
 
@@ -22,17 +23,19 @@ class AccountJournal(models.Model):
 
     @api.one
     def _set_check_next_number(self):
-        if self.check_next_number < self.check_sequence_id.number_next_actual:
+        if self.check_next_number and not re.match(r'^[0-9]+$', self.check_next_number):
+            raise ValidationError(_('Next Check Number should only contains numbers.'))
+        if int(self.check_next_number) < self.check_sequence_id.number_next_actual:
             raise ValidationError(_("The last check number was %s. In order to avoid a check being rejected "
                 "by the bank, you can only use a greater number.") % self.check_sequence_id.number_next_actual)
         if self.check_sequence_id:
-            self.check_sequence_id.sudo().number_next_actual = self.check_next_number
+            self.check_sequence_id.sudo().number_next_actual = int(self.check_next_number)
 
     check_manual_sequencing = fields.Boolean('Manual Numbering', default=False,
         help="Check this option if your pre-printed checks are not numbered.")
     check_sequence_id = fields.Many2one('ir.sequence', 'Check Sequence', readonly=True, copy=False,
         help="Checks numbering sequence.")
-    check_next_number = fields.Integer('Next Check Number', compute='_get_check_next_number', inverse='_set_check_next_number',
+    check_next_number = fields.Char('Next Check Number', compute='_get_check_next_number', inverse='_set_check_next_number',
         help="Sequence number of the next printed check.")
     check_printing_payment_method_selected = fields.Boolean(compute='_compute_check_printing_payment_method_selected',
         help="Technical feature used to know whether check printing was enabled as payment method.")

--- a/addons/account_check_printing/models/account_payment.py
+++ b/addons/account_check_printing/models/account_payment.py
@@ -13,7 +13,7 @@ class AccountRegisterPayments(models.TransientModel):
     check_amount_in_words = fields.Char(string="Amount in Words")
     check_manual_sequencing = fields.Boolean(related='journal_id.check_manual_sequencing', readonly=1)
     # Note: a check_number == 0 means that it will be attributed when the check is printed
-    check_number = fields.Integer(string="Check Number", readonly=True, copy=False, default=0,
+    check_number = fields.Char(string="Check Number", readonly=True, copy=False, default=0,
         help="Number of the check corresponding to this payment. If your pre-printed check are not already numbered, "
              "you can manage the numbering in the journal configuration page.")
 
@@ -44,7 +44,7 @@ class AccountPayment(models.Model):
 
     check_amount_in_words = fields.Char(string="Amount in Words")
     check_manual_sequencing = fields.Boolean(related='journal_id.check_manual_sequencing', readonly=1)
-    check_number = fields.Integer(string="Check Number", readonly=True, copy=False,
+    check_number = fields.Char(string="Check Number", readonly=True, copy=False,
         help="The selected journal is configured to print check numbers. If your pre-printed check paper already has numbers "
              "or if the current numbering is wrong, you can change it in the journal configuration page.")
 
@@ -88,8 +88,9 @@ class AccountPayment(models.Model):
             # so payments are attributed the number of the check the'll be printed on.
             last_printed_check = self.search([
                 ('journal_id', '=', self[0].journal_id.id),
-                ('check_number', '!=', 0)], order="check_number desc", limit=1)
-            next_check_number = last_printed_check and last_printed_check.check_number + 1 or 1
+                ('check_number', '!=', "0")], order="check_number desc", limit=1)
+            next_check_number = last_printed_check and int(last_printed_check.check_number) + 1 or 1
+            
             return {
                 'name': _('Print Pre-numbered Checks'),
                 'type': 'ir.actions.act_window',
