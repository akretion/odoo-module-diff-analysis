PR: https://github.com/odoo/odoo/pull/117316

From: c57f9efe8301b0b22420a7dc3699f55267fa23e1
From: snd
Date: 2023-06-09 11:49:40

Structural Changes: 2
Total Changes: 33

[IMP] stock, stock_repair: various features

add the following features:
- add location in form , kanban and list view. Change location creates move
- add smart button for repairs
- add next activity widget in list and kanban
- from the lots/SN smartbutton on the product form, open the kanban view
- show the last delivery partner on serial

closes odoo/odoo#117316

Signed-off-by: Arnold Moyaux (arm) <arm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/product.py
+++ b/addons/stock/models/product.py
@@ -499,12 +499,13 @@ class Product(models.Model):
 
     def action_open_product_lot(self):
         self.ensure_one()
-        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_production_lot_form")
+        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_product_production_lot_form")
         action['domain'] = [('product_id', '=', self.id)]
         action['context'] = {
             'default_product_id': self.id,
             'set_product_readonly': True,
             'default_company_id': (self.company_id or self.env.company).id,
+            'search_default_group_by_location': True,
         }
         return action
 
@@ -944,11 +945,12 @@ class ProductTemplate(models.Model):
 
     def action_open_product_lot(self):
         self.ensure_one()
-        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_production_lot_form")
+        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_product_production_lot_form")
         action['domain'] = [('product_id.product_tmpl_id', '=', self.id)]
         action['context'] = {
             'default_product_tmpl_id': self.id,
             'default_company_id': (self.company_id or self.env.company).id,
+            'search_default_group_by_location': True,
         }
         if self.product_variant_count == 1:
             action['context'].update({

--- a/addons/stock/models/stock_lot.py
+++ b/addons/stock/models/stock_lot.py
@@ -34,6 +34,7 @@ class StockLot(models.Model):
     delivery_count = fields.Integer('Delivery order count', compute='_compute_delivery_ids')
     last_delivery_partner_id = fields.Many2one('res.partner', compute='_compute_delivery_ids')
     lot_properties = fields.Properties('Properties', definition='product_id.lot_properties_definition', copy=True)
+    location_id = fields.Many2one('stock.location', 'Location', compute='_compute_single_location', store=True, readonly=False, inverse='_set_single_location', domain="[('usage', '!=', 'view')]")
 
     @api.model
     def generate_lot_names(self, first_lot, count):
@@ -126,6 +127,19 @@ class StockLot(models.Model):
             if lot.product_id.tracking == 'serial' and lot.delivery_count > 0:
                 lot.last_delivery_partner_id = lot.delivery_ids.sorted(key=attrgetter('date_done'), reverse=True)[0].partner_id
 
+    @api.depends('quant_ids')
+    def _compute_single_location(self):
+        for lot in self:
+            location_id = lot.quant_ids.filtered(lambda q: q.quantity > 0).mapped('location_id')
+            lot.location_id = location_id if len(location_id) == 1 else False
+
+    def _set_single_location(self):
+        quant_to_move = self.quant_ids.filtered(lambda q: q.quantity > 0)
+        if len(quant_to_move) == 1:
+            quant_to_move._move_quants(self.location_id, 'Lot/Serial Number Relocated')
+        elif len(quant_to_move) > 1:
+            raise UserError(_('You can only move a lot/serial to a new location if it exists in a single location.'))
+
     @api.model_create_multi
     def create(self, vals_list):
         self._check_create()

--- a/addons/stock/models/stock_quant.py
+++ b/addons/stock/models/stock_quant.py
@@ -77,7 +77,6 @@ class StockQuant(models.Model):
         'stock.lot', 'Lot/Serial Number', index=True,
         ondelete='restrict', check_company=True,
         domain=lambda self: self._domain_lot_id())
-    lot_properties = fields.Properties(related='lot_id.lot_properties', definition='product_id.lot_properties_definition', readonly=True)
     sn_duplicated = fields.Boolean(string="Duplicated Serial Number", compute='_compute_sn_duplicated', help="If the same SN is in another Quant")
     package_id = fields.Many2one(
         'stock.quant.package', 'Package',
@@ -1237,6 +1236,18 @@ class StockQuant(models.Model):
                                     lot_id.name, source_location_id.display_name, ', '.join(sn_locations.mapped('display_name')))
         return message, recommended_location
 
+    def _move_quants(self, location_dest_id=False, message=False):
+        """ Directly move a stock.quant to another location by creating a stock.move. """
+        if not location_dest_id:
+            return
+        for quant in self:
+            move_vals = quant._get_inventory_move_values(quant.quantity, quant.location_id, location_dest_id)
+            move_vals.update({
+                'name': message or 'Quantity Relocated',
+            })
+            moves = self.env['stock.move'].with_context(inventory_mode=False).create(move_vals)
+            moves._action_done()
+
 
 class QuantPackage(models.Model):
     """ Packages containing quants and/or other packages """
