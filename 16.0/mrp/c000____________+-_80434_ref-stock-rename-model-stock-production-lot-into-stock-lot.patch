PR: https://github.com/odoo/odoo/pull/80434

From: 6a23b9bcd6aea529eb339640e6231e1aa4c9e207
From: William Henrotin
Date: 2021-12-07 16:20:05

Structural Changes: 6
Total Changes: 52

[REF] *stock*: rename model `stock.production.lot` into `stock.lot`

Task: 2648449
Part-of: odoo/odoo#80434

================================= pseudo patch: =================================

--- a/addons/mrp/models/__init__.py
+++ b/addons/mrp/models/__init__.py
@@ -15,7 +15,7 @@ from . import res_company
 from . import stock_move
 from . import stock_orderpoint
 from . import stock_picking
-from . import stock_production_lot
+from . import stock_lot
 from . import stock_rule
 from . import stock_scrap
 from . import stock_warehouse

--- a/addons/mrp/models/mrp_production.py
+++ b/addons/mrp/models/mrp_production.py
@@ -105,7 +105,7 @@ class MrpProduction(models.Model):
         readonly=True, required=True,
         states={'draft': [('readonly', False)]}, domain="[('category_id', '=', product_uom_category_id)]")
     lot_producing_id = fields.Many2one(
-        'stock.production.lot', string='Lot/Serial Number', copy=False,
+        'stock.lot', string='Lot/Serial Number', copy=False,
         domain="[('product_id', '=', product_id), ('company_id', '=', company_id)]", check_company=True)
     qty_producing = fields.Float(string="Quantity Producing", digits='Product Unit of Measure', copy=False)
     product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
@@ -1129,10 +1129,10 @@ class MrpProduction(models.Model):
 
     def action_generate_serial(self):
         self.ensure_one()
-        self.lot_producing_id = self.env['stock.production.lot'].create({
+        self.lot_producing_id = self.env['stock.lot'].create({
             'product_id': self.product_id.id,
             'company_id': self.company_id.id,
-            'name': self.env['stock.production.lot']._get_next_serial(self.company_id, self.product_id) or self.env['ir.sequence'].next_by_code('stock.lot.serial'),
+            'name': self.env['stock.lot']._get_next_serial(self.company_id, self.product_id) or self.env['ir.sequence'].next_by_code('stock.lot.serial'),
         })
         if self.move_finished_ids.filtered(lambda m: m.product_id == self.product_id).move_line_ids:
             self.move_finished_ids.filtered(lambda m: m.product_id == self.product_id).move_line_ids.lot_id = self.lot_producing_id
@@ -1743,7 +1743,7 @@ class MrpProduction(models.Model):
             message += "\n".join(component.name for component in multiple_lot_components)
         if message:
             raise UserError(message)
-        next_serial = self.env['stock.production.lot']._get_next_serial(self.company_id, self.product_id)
+        next_serial = self.env['stock.lot']._get_next_serial(self.company_id, self.product_id)
         action = self.env["ir.actions.actions"]._for_xml_id("mrp.act_assign_serial_numbers_production")
         action['context'] = {
             'default_production_id': self.id,
@@ -1945,7 +1945,7 @@ class MrpProduction(models.Model):
                 backorder.action_confirm()
             production.name = self._get_name_backorder(production.name, production.backorder_sequence)
             production.product_qty = 1
-            production.lot_producing_id = self.env['stock.production.lot'].create({
+            production.lot_producing_id = self.env['stock.lot'].create({
                 'product_id': production.product_id.id,
                 'company_id': production.company_id.id,
                 'name': serial_number,

--- a/addons/mrp/models/mrp_unbuild.py
+++ b/addons/mrp/models/mrp_unbuild.py
@@ -49,7 +49,7 @@ class MrpUnbuild(models.Model):
         states={'done': [('readonly', True)]}, check_company=True)
     mo_bom_id = fields.Many2one('mrp.bom', 'Bill of Material used on the Production Order', related='mo_id.bom_id')
     lot_id = fields.Many2one(
-        'stock.production.lot', 'Lot/Serial Number',
+        'stock.lot', 'Lot/Serial Number',
         domain="[('product_id', '=', product_id), ('company_id', '=', company_id)]", check_company=True,
         states={'done': [('readonly', True)]}, help="Lot/Serial Number of the product to unbuild.")
     has_tracking=fields.Selection(related='product_id.tracking', readonly=True)

--- a/addons/mrp/models/mrp_workorder.py
+++ b/addons/mrp/models/mrp_workorder.py
@@ -125,7 +125,7 @@ class MrpWorkorder(models.Model):
         'stock.move.line', 'workorder_id', 'Moves to Track',
         help="Inventory moves for which you must scan a lot number at this work order")
     finished_lot_id = fields.Many2one(
-        'stock.production.lot', string='Lot/Serial Number', compute='_compute_finished_lot_id',
+        'stock.lot', string='Lot/Serial Number', compute='_compute_finished_lot_id',
         inverse='_set_finished_lot_id', domain="[('product_id', '=', product_id), ('company_id', '=', company_id)]",
         check_company=True)
     time_ids = fields.One2many(

--- a/addons/mrp/models/stock_production_lot.py
+++ b/addons/mrp/models/stock_lot.py
@@ -5,8 +5,8 @@ from odoo import models, _
 from odoo.exceptions import UserError
 
 
-class StockProductionLot(models.Model):
-    _inherit = 'stock.production.lot'
+class StockLot(models.Model):
+    _inherit = 'stock.lot'
 
     def _check_create(self):
         active_mo_id = self.env.context.get('active_mo_id')
@@ -14,4 +14,4 @@ class StockProductionLot(models.Model):
             active_mo = self.env['mrp.production'].browse(active_mo_id)
             if not active_mo.picking_type_id.use_create_components_lots:
                 raise UserError(_('You are not allowed to create or edit a lot or serial number for the components with the operation type "Manufacturing". To change this, go on the operation type and tick the box "Create New Lots/Serial Numbers for Components".'))
-        return super(StockProductionLot, self)._check_create()
+        return super()._check_create()

--- a/addons/mrp/models/stock_move.py
+++ b/addons/mrp/models/stock_move.py
@@ -131,7 +131,7 @@ class StockMove(models.Model):
         'Done', compute='_compute_is_done',
         store=True,
         help='Technical Field to order moves')
-    order_finished_lot_ids = fields.Many2many('stock.production.lot', string="Finished Lot/Serial Number", compute='_compute_order_finished_lot_ids')
+    order_finished_lot_ids = fields.Many2many('stock.lot', string="Finished Lot/Serial Number", compute='_compute_order_finished_lot_ids')
     should_consume_qty = fields.Float('Quantity To Consume', compute='_compute_should_consume_qty', digits='Product Unit of Measure')
     cost_share = fields.Float(
         "Cost Share (%)", digits=(5, 2),  # decimal = 2 is important for rounding calculations!!
