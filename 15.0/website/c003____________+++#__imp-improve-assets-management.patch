PR: https://github.com/odoo/odoo/pull/

From: 8cc066173dfb61bd95b8e1f0716f71f4e251810a
From: Julien Mougenot
Date: 2021-03-31 11:57:17

Structural Changes: 16
Total Changes: 176

[IMP] *: Improve assets management

This commit changes the way assets are declared in Odoo modules.

Before: assets were declared in template files. Template bundles were
generated from primary templates, so technically any qweb template could
have been called as an asset bundle, with the 't-call-assets' directive.

Being standard qweb templates, they had access to standard HTML tags
(script, link, with or without raw scripts or style definition), qweb
directives (t-call, t-raw, etc.) and could be inherited by other
templates.

Now: assets are defined in the module's manifest and generated by the
't-call-assets' directive.

More information on the new system can be found on the updated user
documentation (see the "JavaScript Reference" section).

Task: 2352566

Co-authored-by: Bruno Boi <boi@odoo.com>
Co-authored-by: Julien Mougenot <jum@odoo.com>
Co-authored-by: Lucas Perais <lpe@odoo.com>
Co-authored-by: Mathieu Duckerts-Antoine <dam@odoo.com>
Co-authored-by: Raphael Collet <rco@odoo.com>
Co-authored-by: Simon Genin <ges@odoo.com>

================================= pseudo patch: =================================

--- a/addons/website/models/__init__.py
+++ b/addons/website/models/__init__.py
@@ -3,6 +3,7 @@
 
 from . import assets
 from . import ir_actions
+from . import ir_asset
 from . import ir_attachment
 from . import ir_http
 from . import ir_module_module

--- a/addons/website/models/assets.py
+++ b/addons/website/models/assets.py
@@ -61,33 +61,21 @@ class Assets(models.AbstractModel):
         res = super(Assets, self)._get_custom_attachment(custom_url, op=op)
         return res.with_context(website_id=website.id).filtered(lambda x: not x.website_id or x.website_id == website)
 
-    def _get_custom_view(self, custom_url, op='='):
+    def _get_custom_asset(self, custom_url):
         """
-        See web_editor.Assets._get_custom_view
+        See web_editor.Assets._get_custom_asset
         Extend to only return the views related to the current website.
         """
         website = self.env['website'].get_current_website()
-        res = super(Assets, self)._get_custom_view(custom_url, op=op)
+        res = super(Assets, self)._get_custom_asset(custom_url)
         return res.with_context(website_id=website.id).filter_duplicate()
 
-    def _save_asset_attachment_hook(self):
+    def _save_asset_hook(self):
         """
-        See web_editor.Assets._save_asset_attachment_hook
+        See web_editor.Assets._save_asset_hook
         Extend to add website ID at attachment creation.
         """
-        res = super(Assets, self)._save_asset_attachment_hook()
-
-        website = self.env['website'].get_current_website()
-        if website:
-            res['website_id'] = website.id
-        return res
-
-    def _save_asset_view_hook(self):
-        """
-        See web_editor.Assets._save_asset_view_hook
-        Extend to add website ID at view creation.
-        """
-        res = super(Assets, self)._save_asset_view_hook()
+        res = super(Assets, self)._save_asset_hook()
 
         website = self.env['website'].get_current_website()
         if website:

--- a/None
+++ b/addons/website/models/ir_asset.py
@@ -0,0 +1,60 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class IrAsset(models.Model):
+    _inherit = 'ir.asset'
+
+    key = fields.Char(copy=False, help='Technical field used to resolve multiple assets in a multi-website environment.')
+    website_id = fields.Many2one('website')
+
+    def _get_related_assets(self, domain):
+        website = self.env['website'].get_current_website(fallback=False)
+        if website:
+            domain += website.website_domain()
+        assets = super()._get_related_assets(domain)
+        return assets.filter_duplicate()
+
+    def _get_active_addons_list(self):
+        """Overridden to discard inactive themes."""
+        addons_list = super()._get_active_addons_list()
+        website = self.env['website'].get_current_website(fallback=False)
+
+        if not website:
+            return addons_list
+
+        IrModule = self.env['ir.module.module'].sudo()
+        # discard all theme modules except website.theme_id
+        themes = IrModule.search(IrModule.get_themes_domain()) - website.theme_id
+        to_remove = set(themes.mapped('name'))
+
+        return [name for name in addons_list if name not in to_remove]
+
+    def filter_duplicate(self):
+        """ Filter current recordset only keeping the most suitable asset per distinct name.
+            Every non-accessible asset will be removed from the set:
+              * In non website context, every asset with a website will be removed
+              * In a website context, every asset from another website
+        """
+        current_website = self.env['website'].get_current_website(fallback=False)
+        if not current_website:
+            return self.filtered(lambda asset: not asset.website_id)
+
+        most_specific_assets = self.env['ir.asset']
+        for asset in self:
+            if asset.website_id == current_website:
+                # specific asset: add it if it's for the current website and ignore
+                # it if it's for another website
+                most_specific_assets += asset
+            elif not asset.website_id:
+                # no key: added either way
+                if not asset.key:
+                    most_specific_assets += asset
+                # generic asset: add it iff for the current website, there is no
+                # specific asset for this asset (based on the same `key` attribute)
+                elif not any(asset.key == asset2.key and asset2.website_id == current_website for asset2 in self):
+                    most_specific_assets += asset
+
+        return most_specific_assets

--- a/addons/website/models/ir_module_module.py
+++ b/addons/website/models/ir_module_module.py
@@ -21,6 +21,7 @@ class IrModuleModule(models.Model):
     # The order is important because of dependencies (page need view, menu need page)
     _theme_model_names = OrderedDict([
         ('ir.ui.view', 'theme.ir.ui.view'),
+        ('ir.asset', 'theme.ir.asset'),
         ('website.page', 'theme.website.page'),
         ('website.menu', 'theme.website.menu'),
         ('ir.attachment', 'theme.ir.attachment'),
@@ -416,6 +417,20 @@ class IrModuleModule(models.Model):
                         'res_id': theme.id,
                     })
 
+    def get_themes_domain(self):
+        """Returns the 'ir.module.module' search domain matching all available themes."""
+        def get_id(model_id):
+            return self.env['ir.model.data'].xmlid_to_res_id(model_id)
+        return [
+            ('category_id', 'not in', [
+                get_id('base.module_category_hidden'),
+                get_id('base.module_category_theme_hidden'),
+            ]),
+            '|',
+            ('category_id', '=', get_id('base.module_category_theme')),
+            ('category_id.parent_id', '=', get_id('base.module_category_theme'))
+        ]
+
     def _check(self):
         super()._check()
         View = self.env['ir.ui.view']

--- a/addons/website/models/theme_models.py
+++ b/addons/website/models/theme_models.py
@@ -6,9 +6,49 @@ from odoo import api, fields, models
 from odoo.tools.translate import xml_translate
 from odoo.modules.module import get_resource_from_path
 
+from odoo.addons.base.models.ir_asset import AFTER_DIRECTIVE, APPEND_DIRECTIVE, BEFORE_DIRECTIVE, DEFAULT_SEQUENCE, INCLUDE_DIRECTIVE, PREPEND_DIRECTIVE, REMOVE_DIRECTIVE, REPLACE_DIRECTIVE
+
 _logger = logging.getLogger(__name__)
 
 
+class ThemeAsset(models.Model):
+    _name = 'theme.ir.asset'
+    _description = 'Theme Asset'
+
+    key = fields.Char()
+    name = fields.Char(required=True)
+    bundle = fields.Char(required=True)
+    directive = fields.Selection(selection=[
+        (APPEND_DIRECTIVE, 'Append'),
+        (PREPEND_DIRECTIVE, 'Prepend'),
+        (AFTER_DIRECTIVE, 'After'),
+        (BEFORE_DIRECTIVE, 'Before'),
+        (REMOVE_DIRECTIVE, 'Remove'),
+        (REPLACE_DIRECTIVE, 'Replace'),
+        (INCLUDE_DIRECTIVE, 'Include')], default=APPEND_DIRECTIVE)
+    glob = fields.Char(required=True)
+    target = fields.Char()
+    active = fields.Boolean(default=True)
+    sequence = fields.Integer(default=DEFAULT_SEQUENCE, required=True)
+    copy_ids = fields.One2many('ir.asset', 'theme_template_id', 'Assets using a copy of me', copy=False, readonly=True)
+
+    def _convert_to_base_model(self, website, **kwargs):
+        self.ensure_one()
+        new_asset = {
+            'name': self.name,
+            'key': self.key,
+            'bundle': self.bundle,
+            'directive': self.directive,
+            'glob': self.glob,
+            'target': self.target,
+            'active': self.active,
+            'sequence': self.sequence,
+            'website_id': website.id,
+            'theme_template_id': self.id,
+        }
+        return new_asset
+
+
 class ThemeView(models.Model):
     _name = 'theme.ir.ui.view'
     _description = 'Theme UI View'
@@ -23,7 +63,7 @@ class ThemeView(models.Model):
     name = fields.Char(required=True)
     key = fields.Char()
     type = fields.Char()
-    priority = fields.Integer(default=16, required=True)
+    priority = fields.Integer(default=DEFAULT_SEQUENCE, required=True)
     mode = fields.Selection([('primary', "Base view"), ('extension', "Extension View")])
     active = fields.Boolean(default=True)
     arch = fields.Text(translate=xml_translate)
@@ -181,7 +221,8 @@ class Theme(models.AbstractModel):
         )
 
         # Reinitialize effets
-        self.disable_view('website.option_ripple_effect')
+        self.disable_asset('website.ripple_effect_scss')
+        self.disable_asset('website.ripple_effect_js')
 
         # Reinitialize header templates
         self.enable_view('website.template_header_default')
@@ -210,6 +251,24 @@ class Theme(models.AbstractModel):
         # Reinitialize footer scrolltop template
         self.disable_view('website.option_footer_scrolltop')
 
+    @api.model
+    def _toggle_asset(self, name, active):
+        ThemeAsset = self.env['theme.ir.asset'].sudo().with_context(active_test=False)
+        obj = ThemeAsset.search([('name', '=', name)])
+        website = self.env['website'].get_current_website()
+        if obj:
+            obj = obj.copy_ids.filtered(lambda x: x.website_id == website)
+        else:
+            Asset = self.env['ir.asset'].sudo().with_context(active_test=False)
+            obj = Asset.search([('name', '=', name)])
+            has_specific = obj.key and Asset.search_count([
+                ('key', '=', obj.key),
+                ('website_id', '=', website.id)
+            ]) >= 1
+            if not has_specific and active == obj.active:
+                return
+        obj.write({'active': active})
+
     @api.model
     def _toggle_view(self, xml_id, active):
         obj = self.env.ref(xml_id)
@@ -232,6 +291,14 @@ class Theme(models.AbstractModel):
                 return
         obj.write({'active': active})
 
+    @api.model
+    def enable_asset(self, name):
+        self._toggle_asset(name, True)
+
+    @api.model
+    def disable_asset(self, name):
+        self._toggle_asset(name, False)
+
     @api.model
     def enable_view(self, xml_id):
         self._toggle_view(xml_id, True)
@@ -271,6 +338,11 @@ class IrUiView(models.Model):
             res &= super(IrUiView, no_arch_updated_views).write(vals)
         return res
 
+class IrAsset(models.Model):
+    _inherit = 'ir.asset'
+
+    theme_template_id = fields.Many2one('theme.ir.asset', copy=False)
+
 class IrAttachment(models.Model):
     _inherit = 'ir.attachment'
 
