PR: https://github.com/odoo/odoo/pull/

From: 6498f351451081de0440d7f6293bd547d56c74d2
From: Raphael Collet
Date: 2017-04-06 09:17:58

Structural Changes: 5
Total Changes: 61

[IMP] base: add individual module exclusions

================================= pseudo patch: =================================

--- a/odoo/addons/base/module/module.py
+++ b/odoo/addons/base/module/module.py
@@ -247,6 +247,8 @@ class Module(models.Model):
     sequence = fields.Integer('Sequence', default=100)
     dependencies_id = fields.One2many('ir.module.module.dependency', 'module_id',
                                        string='Dependencies', readonly=True)
+    exclusion_ids = fields.One2many('ir.module.module.exclusion', 'module_id',
+                                    string='Exclusions', readonly=True)
     auto_install = fields.Boolean('Automatic Installation',
                                    help='An auto-installable module is automatically installed by the '
                                         'system when all its dependencies are satisfied. '
@@ -372,6 +374,14 @@ class Module(models.Model):
         # the modules that are installed/to install/to upgrade
         install_mods = self.search([('state', 'in', list(install_states))])
 
+        # check individual exclusions
+        install_names = {module.name for module in install_mods}
+        for module in install_mods:
+            for exclusion in module.exclusion_ids:
+                if exclusion.name in install_names:
+                    msg = _('Modules "%s" and "%s" are incompatible.')
+                    raise UserError(msg % (module.shortdesc, exclusion.exclusion_id.shortdesc))
+
         # check category exclusions
         def closure(module):
             todo = result = module
@@ -626,6 +636,7 @@ class Module(models.Model):
                 res[1] += 1
 
             mod._update_dependencies(terp.get('depends', []))
+            mod._update_exclusions(terp.get('excludes', []))
             mod._update_category(terp.get('category', 'Uncategorized'))
 
         return res
@@ -740,6 +751,15 @@ class Module(models.Model):
             self._cr.execute('DELETE FROM ir_module_module_dependency WHERE module_id = %s and name = %s', (self.id, dep))
         self.invalidate_cache(['dependencies_id'], self.ids)
 
+    def _update_exclusions(self, excludes=None):
+        existing = set(excl.name for excl in self.exclusion_ids)
+        needed = set(excludes or [])
+        for name in (needed - existing):
+            self._cr.execute('INSERT INTO ir_module_module_exclusion (module_id, name) VALUES (%s, %s)', (self.id, name))
+        for name in (existing - needed):
+            self._cr.execute('DELETE FROM ir_module_module_exclusion WHERE module_id=%s AND name=%s', (self.id, name))
+        self.invalidate_cache(['exclusion_ids'], self.ids)
+
     def _update_category(self, category='Uncategorized'):
         current_category = self.category_id
         current_category_path = []
@@ -810,3 +830,35 @@ class ModuleDependency(models.Model):
     @api.depends('depend_id.state')
     def _compute_state(self):
         self.state = self.depend_id.state or 'unknown'
+
+
+class ModuleExclusion(models.Model):
+    _name = "ir.module.module.exclusion"
+    _description = "Module exclusion"
+
+    # the exclusion name
+    name = fields.Char(index=True)
+
+    # the module that excludes it
+    module_id = fields.Many2one('ir.module.module', 'Module', ondelete='cascade')
+
+    # the module corresponding to the exclusion, and its status
+    exclusion_id = fields.Many2one('ir.module.module', 'Exclusion Module', compute='_compute_exclusion')
+    state = fields.Selection(DEP_STATES, string='Status', compute='_compute_state')
+
+    @api.multi
+    @api.depends('name')
+    def _compute_exclusion(self):
+        # retrieve all modules corresponding to the exclusion names
+        names = list(set(excl.name for excl in self))
+        mods = self.env['ir.module.module'].search([('name', 'in', names)])
+
+        # index modules by name, and assign dependencies
+        name_mod = {mod.name: mod for mod in mods}
+        for excl in self:
+            excl.exclusion_id = name_mod.get(excl.name)
+
+    @api.one
+    @api.depends('exclusion_id.state')
+    def _compute_state(self):
+        self.state = self.exclusion_id.state or 'unknown'

--- a/odoo/addons/base/module/module_view.xml
+++ b/odoo/addons/base/module/module_view.xml
@@ -121,6 +121,14 @@
                                     <field name="state"/>
                                 </tree>
                             </field>
+                            <group string="Exclusions"/>
+                            <p class="oe_grey" attrs="{'invisible': [('exclusion_ids','not in',[None,False])]}"> -This module does not exclude any other module.</p>
+                            <field name="exclusion_ids">
+                                <tree string="Exclusions">
+                                    <field name="name"/>
+                                    <field name="state"/>
+                                </tree>
+                            </field>
                         </page>
                         <page string="Installed Features" attrs="{'invisible':[('state','!=','installed')]}">
                             <group string="Created Menus"/>

--- a/odoo/addons/base/security/ir.model.access.csv
+++ b/odoo/addons/base/security/ir.model.access.csv
@@ -17,6 +17,7 @@
 "access_ir_module_category_group_user","ir_module_category group_user","model_ir_module_category","group_erp_manager",1,0,0,0
 "access_ir_module_module_group_user","ir_module_module group_user","model_ir_module_module","group_system",1,1,1,1
 "access_ir_module_module_dependency_group_system","ir_module_module_dependency group_system","model_ir_module_module_dependency","group_system",1,1,1,1
+"access_ir_module_module_exclusion_group_system","ir_module_module_exclusion group_system","model_ir_module_module_exclusion","group_system",1,1,1,1
 "access_ir_property_group_user","ir_property group_user","model_ir_property",,1,0,0,0
 "access_ir_property_group_user_manager","ir_property group_manager","model_ir_property","base.group_partner_manager",1,1,1,0
 "access_ir_rule_group_erp_manager","ir_rule group_erp_manager","model_ir_rule","group_erp_manager",1,1,1,1
