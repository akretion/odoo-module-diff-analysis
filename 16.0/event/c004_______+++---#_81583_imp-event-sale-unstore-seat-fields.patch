PR: https://github.com/odoo/odoo/pull/81583

From: a0e7f6951326f7063158a3e1636d15432238957a
From: Florian Charlier
Date: 2022-05-31 11:57:24

Structural Changes: 17
Total Changes: 227

[IMP] event{,_sale}: unstore seat fields

With stored computed seat attributes, the database can be flooded with update
queries for the stored values for the event (ticket) seats computations (such
as reserved, expected, and available seats).
This can especially occur when a communication is sent to many people about
an event with a registration link, many users may want to register at the same
time, possibly resulting in concurrent_update errors.

In this commit, we remove the `store=True` attribute of those fields, and
therefore remove the Reporting/Event feature depending on them and rewrite some
domain searches and _compute fields in the event and event_sale modules.

This also impacts the way constraints are enforced on the number of
registrations vs defined maximum as no stored value is directly available.

For performance reasons, all events and tickets are now shown on backend form
views, with seat availability added in their displayed name.

Misc
To avoid delaying the inevitable, the Event configurator modal/wizard now
validates event/ticket consistency at closing.

The UI of the RegistrationEditor wizard is also improved:
* A warning alert will tell users that free registrations were not confirmed
because of insufficient seat availability.
* A first step to better explain the consequences of the actions taken on the
modal was to be taken, here via the description and buttons wording.

Tests
Query counts are (indeed reduced) and updated. However, as local testing with
`test-tags=/test_event_full` ("tef_only") is currently not reliable, these
values were updated by applying the same change from the commit as the one seen
for the runbots, while a "?" is appended to show this uncertainty.

Task-2654816
See odoo/upgrade#3118

Part-of: odoo/odoo#81583

================================= pseudo patch: =================================

--- a/addons/event/models/event_event.py
+++ b/addons/event/models/event_event.py
@@ -8,6 +8,7 @@ from odoo import _, api, Command, fields, models
 from odoo.addons.base.models.res_partner import _tz_get
 from odoo.tools import format_datetime, is_html_empty
 from odoo.exceptions import ValidationError
+from odoo.tools.misc import formatLang
 from odoo.tools.translate import html_translate
 
 _logger = logging.getLogger(__name__)
@@ -56,7 +57,7 @@ class EventType(models.Model):
     # registration
     has_seats_limitation = fields.Boolean('Limited Seats')
     seats_max = fields.Integer(
-        'Maximum Registrations', compute='_compute_default_registration',
+        'Maximum Registrations', compute='_compute_seats_max',
         readonly=False, store=True,
         help="It will select this default maximum value when you choose this event")
     auto_confirm = fields.Boolean(
@@ -74,7 +75,7 @@ class EventType(models.Model):
         help="This information will be printed on your tickets.")
 
     @api.depends('has_seats_limitation')
-    def _compute_default_registration(self):
+    def _compute_seats_max(self):
         for template in self:
             if not template.has_seats_limitation:
                 template.seats_max = 0
@@ -140,19 +141,19 @@ class EventEvent(models.Model):
                                    precompute=True, readonly=False, store=True)
     seats_reserved = fields.Integer(
         string='Number of Registrations',
-        store=True, readonly=True, compute='_compute_seats')
+        store=False, readonly=True, compute='_compute_seats')
     seats_available = fields.Integer(
         string='Available Seats',
-        store=True, readonly=True, compute='_compute_seats')
+        store=False, readonly=True, compute='_compute_seats')
     seats_unconfirmed = fields.Integer(
         string='Unconfirmed Registrations',
-        store=True, readonly=True, compute='_compute_seats')
+        store=False, readonly=True, compute='_compute_seats')
     seats_used = fields.Integer(
         string='Number of Attendees',
-        store=True, readonly=True, compute='_compute_seats')
+        store=False, readonly=True, compute='_compute_seats')
     seats_expected = fields.Integer(
         string='Number of Expected Attendees',
-        compute_sudo=True, readonly=True, compute='_compute_seats_expected')
+        store=False, readonly=True, compute='_compute_seats')
     # Registration fields
     auto_confirm = fields.Boolean(
         string='Autoconfirmation', compute='_compute_auto_confirm', readonly=False, store=True,
@@ -240,15 +241,12 @@ class EventEvent(models.Model):
             for event_id, state, num in res:
                 results[event_id][state_field[state]] = num
 
-        # compute seats_available
+        # compute seats_available and expected
         for event in self:
             event.update(results.get(event._origin.id or event.id, base_vals))
             if event.seats_max > 0:
                 event.seats_available = event.seats_max - (event.seats_reserved + event.seats_used)
 
-    @api.depends('seats_unconfirmed', 'seats_reserved', 'seats_used')
-    def _compute_seats_expected(self):
-        for event in self:
             event.seats_expected = event.seats_unconfirmed + event.seats_reserved + event.seats_used
 
     @api.depends('date_tz', 'start_sale_datetime')
@@ -262,7 +260,8 @@ class EventEvent(models.Model):
             else:
                 event.event_registrations_started = True
 
-    @api.depends('date_tz', 'event_registrations_started', 'date_end', 'seats_available', 'seats_limited', 'event_ticket_ids.sale_available')
+    @api.depends('date_tz', 'event_registrations_started', 'date_end', 'seats_available', 'seats_limited', 'seats_max',
+                 'event_ticket_ids.sale_available')
     def _compute_event_registrations_open(self):
         """ Compute whether people may take registrations for this event
 
@@ -278,7 +277,7 @@ class EventEvent(models.Model):
             date_end_tz = event.date_end.astimezone(pytz.timezone(event.date_tz or 'UTC')) if event.date_end else False
             event.event_registrations_open = event.event_registrations_started and \
                 (date_end_tz >= current_datetime if date_end_tz else True) and \
-                (not event.seats_limited or event.seats_available) and \
+                (not event.seats_limited or not event.seats_max or event.seats_available) and \
                 (not event.event_ticket_ids or any(ticket.sale_available for ticket in event.event_ticket_ids))
 
     @api.depends('event_ticket_ids.start_sale_datetime')
@@ -289,17 +288,19 @@ class EventEvent(models.Model):
             start_dates = [ticket.start_sale_datetime for ticket in event.event_ticket_ids if not ticket.is_expired]
             event.start_sale_datetime = min(start_dates) if start_dates and all(start_dates) else False
 
-    @api.depends('event_ticket_ids.sale_available')
+    @api.depends('event_ticket_ids.sale_available', 'seats_available', 'seats_limited')
     def _compute_event_registrations_sold_out(self):
+        """Note that max seats limits for events and sum of limits for all its tickets may not be
+        equal to enable flexibility.
+        E.g. max 20 seats for ticket A, 20 seats for ticket B
+            * With max 20 seats for the event
+            * Without limit set on the event (=40, but the customer didn't explicitly write 40)
+        """
         for event in self:
-            if event.seats_limited and not event.seats_available:
-                event.event_registrations_sold_out = True
-            elif event.event_ticket_ids:
-                event.event_registrations_sold_out = not any(
-                    ticket.seats_available > 0 if ticket.seats_limited else True for ticket in event.event_ticket_ids
-                )
-            else:
-                event.event_registrations_sold_out = False
+            event.event_registrations_sold_out = (
+                (event.seats_limited and event.seats_max and not event.seats_available)
+                or (event.event_ticket_ids and all(ticket.is_sold_out for ticket in event.event_ticket_ids))
+            )
 
     @api.depends('date_tz', 'date_begin')
     def _compute_date_begin_tz(self):
@@ -528,13 +529,17 @@ class EventEvent(models.Model):
             else:
                 event.address_inline = event.address_id.name or ''
 
-    @api.constrains('seats_max', 'seats_available', 'seats_limited')
-    def _check_seats_limit(self):
+    @api.constrains('seats_max', 'seats_limited', 'registration_ids')
+    def _check_seats_availability(self, minimal_availability=0):
+        sold_out_events = []
         for event in self:
-            if event.seats_limited and event.seats_max and event.seats_available < 0:
-                raise ValidationError(_('No more available seats for %s. '
-                                        'Raise the limit or remove some other confirmed registrations first.',
-                                        event.name))
+            if event.seats_limited and event.seats_max and event.seats_available < minimal_availability:
+                sold_out_events.append(
+                    (_('- "%(event_name)s": Missing %(nb_too_many)i seats.',
+                        event_name=event.name, nb_too_many=-event.seats_available)))
+        if sold_out_events:
+            raise ValidationError(_('There are not enough seats available for:')
+                                  + '\n%s\n' % '\n'.join(sold_out_events))
 
     @api.constrains('date_begin', 'date_end')
     def _check_closing_date(self):
@@ -564,6 +569,26 @@ class EventEvent(models.Model):
             self.message_subscribe([vals['organizer_id']])
         return res
 
+    def name_get(self):
+        """Adds ticket seats availability if requested by context."""
+        if not self.env.context.get('name_with_seats_availability'):
+            return super().name_get()
+        res = []
+        for event in self:
+            # event or its tickets are sold out
+            if event.event_registrations_sold_out:
+                name = _('%(event_name)s (Sold out)', event_name=event.name)
+            elif event.seats_limited and event.seats_max:
+                name = _(
+                    '%(event_name)s (%(count)s seats remaining)',
+                    event_name=event.name,
+                    count=formatLang(self.env, event.seats_available, digits=0),
+                )
+            else:
+                name = event.name
+            res.append((event.id, name))
+        return res
+
     @api.returns('self', lambda value: value.id)
     def copy(self, default=None):
         self.ensure_one()

--- a/addons/event/models/event_registration.py
+++ b/addons/event/models/event_registration.py
@@ -95,19 +95,6 @@ class EventRegistration(models.Model):
                 else:
                     registration.date_closed = False
 
-    @api.constrains('event_id', 'state')
-    def _check_seats_limit(self):
-        for registration in self:
-            event_id = registration.event_id
-            if event_id.seats_limited and event_id.seats_max and event_id.seats_available < (1 if registration.state == 'draft' and event_id.auto_confirm else 0):
-                raise ValidationError(_('There are no more available seats for %s. Raise the limit or remove some other confirmed registrations first.', event_id.name))
-
-    @api.constrains('event_ticket_id', 'state')
-    def _check_ticket_seats_limit(self):
-        for record in self:
-            if record.event_ticket_id.seats_max and record.event_ticket_id.seats_available < 0:
-                raise ValidationError(_('No more available seats for this ticket'))
-
     @api.constrains('event_id', 'event_ticket_id')
     def _check_event_ticket(self):
         if any(registration.event_id != registration.event_ticket_id.event_id for registration in self if registration.event_ticket_id):
@@ -141,22 +128,26 @@ class EventRegistration(models.Model):
             # we currently avoid this by not running the scheduler, would be best to find the actual
             # reason for this issue and fix it so we can remove this check
             registrations._update_mail_schedulers()
-
         return registrations
 
     def write(self, vals):
-        pre_draft = self.env['event.registration']
-        if vals.get('state') == 'open':
-            pre_draft = self.filtered(lambda registration: registration.state == 'draft')
-
+        confirming = vals.get('state') in {'open', 'done'}
+        to_confirm = (self.filtered(lambda registration: registration.state in {'draft', 'cancel'})
+                      if confirming else None)
         ret = super(EventRegistration, self).write(vals)
-
-        if vals.get('state') == 'open' and not self.env.context.get('install_mode', False):
-            # running the scheduler for demo data can cause an issue where wkhtmltopdf runs during
-            # server start and hangs indefinitely, leading to serious crashes
-            # we currently avoid this by not running the scheduler, would be best to find the actual
-            # reason for this issue and fix it so we can remove this check
-            pre_draft._update_mail_schedulers()
+        # As these Event(Ticket) methods are model constraints, it is not necessary to call them
+        # explicitly when creating new registrations. However, it is necessary to trigger them here
+        # as changes in registration states cannot be used as constraints triggers.
+        if confirming:
+            to_confirm.event_id._check_seats_availability()
+            to_confirm.event_ticket_id._check_seats_availability()
+
+            if not self.env.context.get('install_mode', False):
+                # running the scheduler for demo data can cause an issue where wkhtmltopdf runs
+                # during server start and hangs indefinitely, leading to serious crashes we
+                # currently avoid this by not running the scheduler, would be best to find the
+                # actual reason for this issue and fix it so we can remove this check
+                to_confirm._update_mail_schedulers()
 
         return ret
 
@@ -181,11 +172,18 @@ class EventRegistration(models.Model):
             ret_list.append((registration.id, name))
         return ret_list
 
+    def toggle_active(self):
+        pre_inactive = self - self.filtered(self._active_name)
+        super().toggle_active()
+        # Necessary triggers as changing registration states cannot be used as triggers for the
+        # Event(Ticket) models constraints.
+        if pre_inactive:
+            pre_inactive.event_id._check_seats_availability()
+            pre_inactive.event_ticket_id._check_seats_availability()
+
     def _check_auto_confirmation(self):
-        if any(not registration.event_id.auto_confirm or
-               (not registration.event_id.seats_available and registration.event_id.seats_limited) for registration in self):
-            return False
-        return True
+        """ Checks that all registrations are for `auto-confirm` events. """
+        return all(event.auto_confirm for event in self.event_id)
 
     # ------------------------------------------------------------
     # ACTIONS / BUSINESS

--- a/addons/event/models/event_ticket.py
+++ b/addons/event/models/event_ticket.py
@@ -3,6 +3,7 @@
 
 from odoo import api, fields, models, _
 from odoo.exceptions import ValidationError, UserError
+from odoo.tools.misc import formatLang
 
 
 class EventTemplateTicket(models.Model):
@@ -63,14 +64,19 @@ class EventTicket(models.Model):
     # sale
     start_sale_datetime = fields.Datetime(string="Registration Start")
     end_sale_datetime = fields.Datetime(string="Registration End")
+    is_launched = fields.Boolean(string='Are sales launched', compute='_compute_is_launched')
     is_expired = fields.Boolean(string='Is Expired', compute='_compute_is_expired')
-    sale_available = fields.Boolean(string='Is Available', compute='_compute_sale_available', compute_sudo=True)
+    sale_available = fields.Boolean(
+        string='Is Available', compute='_compute_sale_available', compute_sudo=True,
+        help='Whether it is possible to sell these tickets')
     registration_ids = fields.One2many('event.registration', 'event_ticket_id', string='Registrations')
     # seats
-    seats_reserved = fields.Integer(string='Reserved Seats', compute='_compute_seats', store=True)
-    seats_available = fields.Integer(string='Available Seats', compute='_compute_seats', store=True)
-    seats_unconfirmed = fields.Integer(string='Unconfirmed Seats', compute='_compute_seats', store=True)
-    seats_used = fields.Integer(string='Used Seats', compute='_compute_seats', store=True)
+    seats_reserved = fields.Integer(string='Reserved Seats', compute='_compute_seats', store=False)
+    seats_available = fields.Integer(string='Available Seats', compute='_compute_seats', store=False)
+    seats_unconfirmed = fields.Integer(string='Unconfirmed Seats', compute='_compute_seats', store=False)
+    seats_used = fields.Integer(string='Used Seats', compute='_compute_seats', store=False)
+    is_sold_out = fields.Boolean(
+        'Sold Out', compute='_compute_is_sold_out', help='Whether seats are not available for this ticket.')
 
     @api.depends('end_sale_datetime', 'event_id.date_tz')
     def _compute_is_expired(self):
@@ -83,13 +89,22 @@ class EventTicket(models.Model):
             else:
                 ticket.is_expired = False
 
+    @api.depends('start_sale_datetime', 'event_id.date_tz')
+    def _compute_is_launched(self):
+        now = fields.Datetime.now()
+        for ticket in self:
+            if not ticket.start_sale_datetime:
+                ticket.is_launched = True
+            else:
+                ticket = ticket._set_tz_context()
+                current_datetime = fields.Datetime.context_timestamp(ticket, now)
+                start_sale_datetime = fields.Datetime.context_timestamp(ticket, ticket.start_sale_datetime)
+                ticket.is_launched = start_sale_datetime <= current_datetime
+
     @api.depends('is_expired', 'start_sale_datetime', 'event_id.date_tz', 'seats_available', 'seats_max')
     def _compute_sale_available(self):
         for ticket in self:
-            if not ticket.is_launched() or ticket.is_expired or (ticket.seats_max and ticket.seats_available <= 0):
-                ticket.sale_available = False
-            else:
-                ticket.sale_available = True
+            ticket.sale_available = ticket.is_launched and not ticket.is_expired and not ticket.is_sold_out
 
     @api.depends('seats_max', 'registration_ids.state', 'registration_ids.active')
     def _compute_seats(self):
@@ -121,20 +136,48 @@ class EventTicket(models.Model):
             if ticket.seats_max > 0:
                 ticket.seats_available = ticket.seats_max - (ticket.seats_reserved + ticket.seats_used)
 
+    @api.depends('seats_limited', 'seats_available')
+    def _compute_is_sold_out(self):
+        for ticket in self:
+            ticket.is_sold_out = ticket.seats_limited and not ticket.seats_available
+
     @api.constrains('start_sale_datetime', 'end_sale_datetime')
     def _constrains_dates_coherency(self):
         for ticket in self:
             if ticket.start_sale_datetime and ticket.end_sale_datetime and ticket.start_sale_datetime > ticket.end_sale_datetime:
-                raise UserError(_('The stop date cannot be earlier than the start date.'))
+                raise UserError(_('The stop date cannot be earlier than the start date. '
+                                  'Please check ticket %(ticket_name)s', ticket_name=ticket.name))
 
-    @api.constrains('seats_available', 'seats_max')
-    def _constrains_seats_available(self):
-        for record in self:
-            if record.seats_max and record.seats_available < 0:
-                raise ValidationError(
-                    _('No more available seats for the ticket %s (%s). '
-                      'Raise the limit or remove some other confirmed registrations first.',
-                      record.name, record.event_id.name))
+    @api.constrains('registration_ids', 'seats_max')
+    def _check_seats_availability(self, minimal_availability=0):
+        sold_out_tickets = []
+        for ticket in self:
+            if ticket.seats_max and ticket.seats_available < minimal_availability:
+                sold_out_tickets.append((_(
+                    '- the ticket "%(ticket_name)s" (%(event_name)s): Missing %(nb_too_many)i seats.',
+                    ticket_name=ticket.name, event_name=ticket.event_id.name, nb_too_many=-ticket.seats_available)))
+        if sold_out_tickets:
+            raise ValidationError(_('There are not enough seats available for:')
+                                  + '\n%s\n' % '\n'.join(sold_out_tickets))
+
+    def name_get(self):
+        """Adds ticket seats availability if requested by context."""
+        if not self.env.context.get('name_with_seats_availability'):
+            return super().name_get()
+        res = []
+        for ticket in self:
+            if not ticket.seats_max:
+                name = ticket.name
+            elif not ticket.seats_available:
+                name = _('%(ticket_name)s (Sold out)', ticket_name=ticket.name)
+            else:
+                name = _(
+                    '%(ticket_name)s (%(count)s seats remaining)',
+                    ticket_name=ticket.name,
+                    count=formatLang(self.env, ticket.seats_available, digits=0),
+                )
+            res.append((ticket.id, name))
+        return res
 
     def _get_ticket_multiline_description(self):
         """ Compute a multiline description of this ticket. It is used when ticket
@@ -146,17 +189,6 @@ class EventTicket(models.Model):
         self.ensure_one()
         return self.with_context(tz=self.event_id.date_tz or 'UTC')
 
-    def is_launched(self):
-        # TDE FIXME: in master, make a computed field, easier to use
-        self.ensure_one()
-        if self.start_sale_datetime:
-            ticket = self._set_tz_context()
-            current_datetime = fields.Datetime.context_timestamp(ticket, fields.Datetime.now())
-            start_sale_datetime = fields.Datetime.context_timestamp(ticket, ticket.start_sale_datetime)
-            return start_sale_datetime <= current_datetime
-        else:
-            return True
-
     @api.ondelete(at_uninstall=False)
     def _unlink_except_if_registrations(self):
         if self.registration_ids:
