PR: https://github.com/odoo/odoo/pull/101018

From: 90af85c2e4fdec0a6ac7d70663f90443fad120d2
From: Valentin Vallaeys (vava)
Date: 2023-01-05 15:51:56

Breaking data model changes scores: del:1 + add:0, change matches:
-    asiapay_currency_id = fields.Many2one(

Total Changes: 35

[IMP] payment(_*): show available currencies for payment providers

Before this commit, the lists of supported currencies by payment
provider were hard-coded in the Python scripts, which made them
unavailable to the users.

With this commit, the implemented initial lists of supported currencies
are displayed on the form view and are editable, because Odoo lists may
not be up-to-date. Empty lists do not trigger any filtering on the
payment providers to access payment methods.

For Authorize.net and Asiapay payment providers, the specific
`(authorize,asiapay)_currency_id` are removed and the generic payment
provider field `available_currency_ids` is restricted to a single-item
list when one of those providers is enabled.

task-2926016

closes odoo/odoo#101018

Related: odoo/enterprise#34158
Related: odoo/documentation#2788
Related: odoo/upgrade#4069
Signed-off-by: Antoine Vandevenne (anv) <anv@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_asiapay/models/payment_provider.py
+++ b/addons/payment_asiapay/models/payment_provider.py
@@ -2,7 +2,8 @@
 
 from hashlib import new as hashnew
 
-from odoo import api, fields, models
+from odoo import _, api, fields, models
+from odoo.exceptions import ValidationError
 
 from odoo.addons.payment_asiapay import const
 
@@ -10,10 +11,6 @@ from odoo.addons.payment_asiapay import const
 class PaymentProvider(models.Model):
     _inherit = 'payment.provider'
 
-    def _domain_asiapay_currency_id(self):
-        currency_xmlids = [f'base.{key}' for key in const.CURRENCY_MAPPING]
-        return [('id', 'in', [self.env.ref(xmlid).id for xmlid in currency_xmlids])]
-
     code = fields.Selection(
         selection_add=[('asiapay', "AsiaPay")], ondelete={'asiapay': 'set default'}
     )
@@ -22,13 +19,6 @@ class PaymentProvider(models.Model):
         help="The Merchant ID solely used to identify your AsiaPay account.",
         required_if_provider='asiapay',
     )
-    asiapay_currency_id = fields.Many2one(
-        string="AsiaPay Currency",
-        help="The currency associated to your AsiaPay account.",
-        comodel_name='res.currency',
-        domain=_domain_asiapay_currency_id,
-        required_if_provider='asiapay',
-    )
     asiapay_secure_hash_secret = fields.Char(
         string="AsiaPay Secure Hash Secret",
         required_if_provider='asiapay',
@@ -42,20 +32,15 @@ class PaymentProvider(models.Model):
         required_if_provider='asiapay',
     )
 
-    # === BUSINESS METHODS ===#
-
-    @api.model
-    def _get_compatible_providers(self, *args, currency_id=None, **kwargs):
-        """ Override of `payment` to filter out AsiaPay providers for unsupported currencies. """
-        providers = super()._get_compatible_providers(*args, currency_id=currency_id, **kwargs)
+    # ==== CONSTRAINT METHODS ===#
 
-        currency = self.env['res.currency'].browse(currency_id).exists()
-        if currency:
-            providers = providers.filtered(
-                lambda p: p.code != 'asiapay' or currency == p.asiapay_currency_id
-            )
+    @api.constrains('available_currency_ids', 'state')
+    def _limit_available_currency_ids(self):
+        for provider in self.filtered(lambda p: p.code == 'asiapay'):
+            if len(provider.available_currency_ids) > 1 and provider.state != 'disabled':
+                raise ValidationError(_("Only one currency can be selected by AsiaPay account."))
 
-        return providers
+    # === BUSINESS METHODS ===#
 
     def _asiapay_get_api_url(self):
         """ Return the URL of the API corresponding to the provider's state.

--- a/addons/payment_asiapay/models/payment_transaction.py
+++ b/addons/payment_asiapay/models/payment_transaction.py
@@ -88,7 +88,7 @@ class PaymentTransaction(models.Model):
             'merchant_id': self.provider_id.asiapay_merchant_id,
             'amount': self.amount,
             'reference': self.reference,
-            'currency_code': const.CURRENCY_MAPPING[self.provider_id.asiapay_currency_id.name],
+            'currency_code': const.CURRENCY_MAPPING[self.provider_id.available_currency_ids[0].name],
             'mps_mode': 'SCP',
             'return_url': urls.url_join(base_url, AsiaPayController._return_url),
             'payment_type': 'N',
