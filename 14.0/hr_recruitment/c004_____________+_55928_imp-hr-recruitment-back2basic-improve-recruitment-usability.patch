PR: https://github.com/odoo/odoo/pull/55928

From: c06bb52f57f4719af7da944de2971556d03caff1
From: Francois (fge)
Date: 2020-08-14 14:51:41

Structural Changes: 3
Total Changes: 78

[IMP]hr_recruitment: Back2Basic - Improve Recruitment usability

Added a new tour for the module hr_recruitment

Hr.job:
Form view:
- Using a notebook view for increased clarity
Kanban view:
- Added a toggle button to publish/unpublish a job offer.
- In the menu, added the « Create Interview Form » button to create an interview form.

Hr.applicant:
Generale:
- Use of the "Applicant: Acknowledgement" template by default when an application is moved to the "First Interview" stage.
Form view:
- Possibility to consult an interview after this one and not before
- The "CREATE EMPLOYEE" button no longer directly creates an employee. The employee will be created if the "SAVE" button is pressed.

Hr.employee:
Generale:
- Added of two new certifications.
And some other minor style and name changes.

closes odoo/odoo#55928

Related: odoo/enterprise#12420
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_recruitment/models/hr_employee.py
+++ b/addons/hr_recruitment/models/hr_employee.py
@@ -1,6 +1,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models
+from odoo.tools.translate import _
 from datetime import timedelta
 
 
@@ -9,6 +10,7 @@ class HrEmployee(models.Model):
 
     newly_hired_employee = fields.Boolean('Newly hired employee', compute='_compute_newly_hired_employee',
                                           search='_search_newly_hired_employee')
+    applicant_id = fields.One2many('hr.applicant', 'emp_id', 'Applicant')
 
     def _compute_newly_hired_employee(self):
         now = fields.Datetime.now()
@@ -20,3 +22,13 @@ class HrEmployee(models.Model):
             ('create_date', '>', fields.Datetime.now() - timedelta(days=90))
         ])
         return [('id', 'in', employees.ids)]
+
+    @api.model
+    def create(self, vals):
+        new_employee = super(HrEmployee, self).create(vals)
+        if new_employee.applicant_id:
+            new_employee.applicant_id.message_post_with_view(
+                        'hr_recruitment.applicant_hired_template',
+                        values={'applicant': new_employee.applicant_id},
+                        subtype_id=self.env.ref("hr_recruitment.mt_applicant_hired").id)
+        return new_employee

--- a/addons/hr_recruitment/models/hr_job.py
+++ b/addons/hr_recruitment/models/hr_job.py
@@ -30,7 +30,7 @@ class Job(models.Model):
     manager_id = fields.Many2one(
         'hr.employee', related='department_id.manager_id', string="Department Manager",
         readonly=True, store=True)
-    user_id = fields.Many2one('res.users', "Responsible", tracking=True)
+    user_id = fields.Many2one('res.users', "Recruiter", tracking=True)
     hr_responsible_id = fields.Many2one(
         'res.users', "HR Responsible", tracking=True,
         help="Person responsible of validating the employee's contracts.")

--- a/addons/hr_recruitment/models/hr_recruitment.py
+++ b/addons/hr_recruitment/models/hr_recruitment.py
@@ -114,8 +114,8 @@ class Applicant(models.Model):
     categ_ids = fields.Many2many('hr.applicant.category', string="Tags")
     company_id = fields.Many2one('res.company', "Company", compute='_compute_company', store=True, readonly=False, tracking=True)
     user_id = fields.Many2one(
-        'res.users', "Responsible", compute='_compute_user',
-        tracking=True, store=True, readonly=False)
+        'res.users', "Recruiter", compute='_compute_user',
+        tracking=True, default=lambda self: self.env.uid, store=True, readonly=False)
     date_closed = fields.Datetime("Closed", compute='_compute_date_closed', store=True, index=True)
     date_open = fields.Datetime("Assigned", readonly=True, index=True)
     date_last_stage_update = fields.Datetime("Last Stage Update", index=True, default=fields.Datetime.now)
@@ -308,11 +308,28 @@ class Applicant(models.Model):
             res = super(Applicant, self).write(vals)
         return res
 
-    @api.model
     def get_empty_list_help(self, help):
-        return super(Applicant, self.with_context(empty_list_help_model='hr.job',
-                                                  empty_list_help_id=self.env.context.get('default_job_id'),
-                                                  empty_list_help_document_name=_("job applicant"))).get_empty_list_help(help)
+        if 'active_id' in  self.env.context:
+            alias_id = self.env['hr.job'].browse(self.env.context['active_id']).alias_id
+        else:
+            alias_id = False
+
+        nocontent_values = {
+            'help_title': _('No application yet'),
+            'para_1': _('Let people apply by email to save time.') ,
+            'para_2': _('Attachments, like resumes, get indexed automatically.'),
+        }
+        nocontent_body = """
+            <p class="o_view_nocontent_empty_folder">%(help_title)s</p>
+            <p>%(para_1)s<br/>%(para_2)s</p>"""
+
+        if alias_id and alias_id.alias_domain and alias_id.alias_name:
+            email = alias_id.display_name 
+            email_link = "<a href='mailto:%s'>%s</a>" % (email, email)
+            nocontent_values['email_link'] = email_link
+            nocontent_body += """<p class="o_copy_paste_email">%(email_link)s</p>"""
+
+        return nocontent_body % nocontent_values
 
     def action_makeMeeting(self):
         """ This opens Meeting's calendar view to schedule meeting on current applicant
@@ -454,33 +471,24 @@ class Applicant(models.Model):
                 applicant.partner_id = new_partner_id
                 address_id = new_partner_id.address_get(['contact'])['contact']
             if applicant.partner_name or contact_name:
-                employee = self.env['hr.employee'].create({
-                    'name': applicant.partner_name or contact_name,
-                    'job_id': applicant.job_id.id or False,
-                    'job_title': applicant.job_id.name,
+                employee_data = {
+                    'default_name': applicant.partner_name or contact_name,
+                    'default_job_id': applicant.job_id.id,
+                    'default_job_title': applicant.job_id.name,
                     'address_home_id': address_id,
-                    'department_id': applicant.department_id.id or False,
-                    'address_id': applicant.company_id and applicant.company_id.partner_id
+                    'default_department_id': applicant.department_id.id or False,
+                    'default_address_id': applicant.company_id and applicant.company_id.partner_id
                             and applicant.company_id.partner_id.id or False,
-                    'work_email': applicant.department_id and applicant.department_id.company_id
+                    'default_work_email': applicant.department_id and applicant.department_id.company_id
                             and applicant.department_id.company_id.email or False,
-                    'work_phone': applicant.department_id and applicant.department_id.company_id
-                            and applicant.department_id.company_id.phone or False})
-                applicant.write({'emp_id': employee.id})
-                if applicant.job_id:
-                    applicant.job_id.write({'no_of_hired_employee': applicant.job_id.no_of_hired_employee + 1})
-                    applicant.job_id.message_post(
-                        body=_('New Employee %s Hired', applicant.partner_name if applicant.partner_name else applicant.name),
-                        subtype_xmlid="hr_recruitment.mt_job_applicant_hired")
-                applicant.message_post_with_view(
-                    'hr_recruitment.applicant_hired_template',
-                    values={'applicant': applicant},
-                    subtype_id=self.env.ref("hr_recruitment.mt_applicant_hired").id)
-
+                    'default_work_phone': applicant.department_id.company_id.phone,
+                    'form_view_initial_mode': 'edit',
+                    'default_applicant_id': applicant.ids,
+                    }
+                    
         employee_action = self.env.ref('hr.open_view_employee_list')
         dict_act_window = employee_action.read([])[0]
-        dict_act_window['context'] = {'form_view_initial_mode': 'edit'}
-        dict_act_window['res_id'] = employee.id
+        dict_act_window['context'] = employee_data
         return dict_act_window
 
     def archive_applicant(self):
