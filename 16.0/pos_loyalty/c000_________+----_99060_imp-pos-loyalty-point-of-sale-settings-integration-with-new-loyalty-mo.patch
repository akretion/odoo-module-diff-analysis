PR: https://github.com/odoo/odoo/pull/99060

From: 41273923f85e1b96374c4143ec17e4e8dc8c661d
From: Eleftherios Kritsotakis
Date: 2022-09-07 21:10:48

Structural Changes: 19.9
Total Changes: 182

[IMP] pos_loyalty, point_of_sale: settings integration with new loyalty module

After this commit, the settings of coupons, promotions,
gift cards and loyalty cards are now managed under a
single one field in PoS Settings configuration. Moreover,
this settings field is "global" and shared between the
eCommerce and Sales app.

task-2959620

closes odoo/odoo#99060

Related: odoo/upgrade#3842
Signed-off-by: Masereel Pierre <pim@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_loyalty/models/loyalty_program.py
+++ b/addons/pos_loyalty/models/loyalty_program.py
@@ -1,16 +1,24 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import _, fields, models
+from odoo import _, api, fields, models
 from odoo.tools import unique
 
 class LoyaltyProgram(models.Model):
     _inherit = 'loyalty.program'
 
-    pos_config_ids = fields.Many2many('pos.config', string="Point of Sales", readonly=True)
+    # NOTE: `pos_config_ids` satisfies an excpeptional use case: when no PoS is specified, the loyalty program is
+    # applied to every PoS. You can access the loyalty programs of a PoS using _get_program_ids() of pos.config
+    pos_config_ids = fields.Many2many('pos.config', compute="_compute_pos_config_ids", store=True, readonly=False)
     pos_order_count = fields.Integer("PoS Order Count", compute='_compute_pos_order_count')
     pos_ok = fields.Boolean("Point of Sale", default=True)
 
+    @api.depends('pos_ok')
+    def _compute_pos_config_ids(self):
+        for program in self:
+            if not program.pos_ok:
+                program.pos_config_ids = False
+
     def _compute_pos_order_count(self):
         read_group_res = self.env['pos.order.line']._read_group(
             [('reward_id', 'in', self.reward_ids.ids)], ['reward_id:array_agg'], ['order_id'])

--- a/addons/pos_loyalty/models/pos_config.py
+++ b/addons/pos_loyalty/models/pos_config.py
@@ -1,70 +1,31 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import _, api, fields, models
+from odoo import _, fields, models
 from odoo.exceptions import UserError
 
 class PosConfig(models.Model):
     _inherit = 'pos.config'
 
-    def _default_loyalty_program(self):
-        return self.env['loyalty.program'].search([('program_type', '=', 'loyalty')], limit=1)
-
-    use_coupon_programs = fields.Boolean('Coupons & Promotions',
-        help="Use coupon and promotion programs in this PoS configuration.")
-    coupon_program_ids = fields.Many2many(
-        'loyalty.program', string="Coupon Programs", domain=[('pos_ok', '=', True), ('program_type', '=', 'coupons')],
-        relation='pos_config_coupon_program_rel')
-    promo_program_ids = fields.Many2many(
-        'loyalty.program', string="Promotion Programs", domain=[('pos_ok', '=', True), ('program_type', 'in', ('promotion', 'buy_x_get_y', 'promo_code', 'next_order_coupons'))],
-        relation='pos_config_promo_program_rel')
-
-    loyalty_program_id = fields.Many2one('loyalty.program', "PoS Loyalty Programs", domain=[('pos_ok', '=', True), ('program_type', '=', 'loyalty')], default=_default_loyalty_program)
-
-    use_gift_card = fields.Boolean('Gift Cards')
-    gift_card_program_id = fields.Many2one('loyalty.program', "PoS Gift Card Program", domain=[('pos_ok', '=', True), ('program_type', '=', 'gift_card')])
     gift_card_settings = fields.Selection(
         [
-            ("create_set", "Generate a new barcode and set a price"),
-            ("scan_set", "Scan an existing barcode and set a price"),
-            ("scan_use", "Scan an existing barcode with an existing price"),
+            ("create_set", "Generate PDF cards"),
+            ("scan_use", "Scan existing cards"),
         ],
         string="Gift Cards settings",
         default="create_set",
         help="Defines the way you want to set your gift cards.",
     )
-
-    # While we select all program types separately they will all behave the same
-    all_program_ids = fields.Many2many('loyalty.program', compute='_compute_all_programs')
-
-    @api.depends('use_coupon_programs', 'coupon_program_ids', 'promo_program_ids',
-        'loyalty_program_id', 'use_gift_card', 'gift_card_program_id')
-    def _compute_all_programs(self):
-        for config in self:
-            programs = self.env['loyalty.program']
-            if config.use_coupon_programs:
-                programs |= config.coupon_program_ids
-                programs |= config.promo_program_ids
-            # This may be a separate field on the config but it actually will be handled just like any other program
-            if config.loyalty_program_id:
-                programs |= config.loyalty_program_id
-            # We also include the gift card program to be able to claim the reward (discount)
-            # This one will behave a little differently as it will display more options
-            if config.use_gift_card:
-                programs |= config.gift_card_program_id
-            config.all_program_ids = programs
-
-    @api.model
-    def set_loyalty_program_to_main_config(self):
-        main_config = self.env.ref('point_of_sale.pos_config_main')
-        default_loyalty_program = self._default_loyalty_program()
-        main_config.write({'module_pos_loyalty': bool(default_loyalty_program), 'loyalty_program_id': default_loyalty_program.id})
+    # NOTE: this funtions acts as a m2m field with loyalty.program model. We do this to handle an excpetional use case:
+    # When no PoS is specified at a loyalty program form, this program is applied to every PoS (instead of none)
+    def _get_program_ids(self):
+        return self.env['loyalty.program'].search(['&', ('pos_ok', '=', True), '|', ('pos_config_ids', '=', self.id), ('pos_config_ids', '=', False)])
 
     def _check_before_creating_new_session(self):
         self.ensure_one()
         # Check validity of programs before opening a new session
         invalid_reward_products_msg = ''
-        for reward in self.all_program_ids.reward_ids:
+        for reward in self._get_program_ids().reward_ids:
             if reward.reward_type == 'product':
                 for product in reward.reward_product_ids:
                     if product.available_in_pos:
@@ -75,33 +36,33 @@ class PosConfig(models.Model):
                         name=reward.program_id.name,
                         reward_product=product.name,
                     )
-        if self.gift_card_program_id:
-            for product in self.gift_card_program_id.rule_ids.valid_product_ids:
-                if product.available_in_pos:
-                    continue
-                invalid_reward_products_msg += "\n\t"
-                invalid_reward_products_msg += _(
-                    "Program: %(name)s, Rule Product: `%(rule_product)s`",
-                    name=reward.program_id.name,
-                    rule_product=product.name,
-                )
+        gift_card_programs = self._get_program_ids().filtered(lambda p: p.program_type == 'gift_card')
+        for product in gift_card_programs.mapped('rule_ids.valid_product_ids'):
+            if product.available_in_pos:
+                continue
+            invalid_reward_products_msg += "\n\t"
+            invalid_reward_products_msg += _(
+                "Program: %(name)s, Rule Product: `%(rule_product)s`",
+                name=reward.program_id.name,
+                rule_product=product.name,
+            )
 
         if invalid_reward_products_msg:
             prefix_error_msg = _("To continue, make the following reward products available in Point of Sale.")
             raise UserError(f"{prefix_error_msg}\n{invalid_reward_products_msg}")
-        if self.use_gift_card and self.gift_card_program_id:
-            # Do not allow gift_card_program_id with more than one rule or reward, and check that they make sense
-            gc_program = self.gift_card_program_id
-            if len(gc_program.reward_ids) > 1:
-                raise UserError(_('Invalid gift card program. More than one reward.'))
-            elif len(gc_program.rule_ids) > 1:
-                raise UserError(_('Invalid gift card program. More than one rule.'))
-            rule = gc_program.rule_ids
-            if rule.reward_point_amount != 1 or rule.reward_point_mode != 'money':
-                raise UserError(_('Invalid gift card program rule. Use 1 point per currency spent.'))
-            reward = gc_program.reward_ids
-            if reward.reward_type != 'discount' or reward.discount_mode != 'per_point' or reward.discount != 1:
-                raise UserError(_('Invalid gift card program reward. Use 1 currency per point discount.'))
+        if  gift_card_programs:
+            for gc_program in gift_card_programs:
+                # Do not allow a gift card program with more than one rule or reward, and check that they make sense
+                if len(gc_program.reward_ids) > 1:
+                    raise UserError(_('Invalid gift card program. More than one reward.'))
+                elif len(gc_program.rule_ids) > 1:
+                    raise UserError(_('Invalid gift card program. More than one rule.'))
+                rule = gc_program.rule_ids
+                if rule.reward_point_amount != 1 or rule.reward_point_mode != 'money':
+                    raise UserError(_('Invalid gift card program rule. Use 1 point per currency spent.'))
+                reward = gc_program.reward_ids
+                if reward.reward_type != 'discount' or reward.discount_mode != 'per_point' or reward.discount != 1:
+                    raise UserError(_('Invalid gift card program reward. Use 1 currency per point discount.'))
         return super()._check_before_creating_new_session()
 
     def use_coupon_code(self, code, creation_date, partner_id):
@@ -110,7 +71,7 @@ class PosConfig(models.Model):
         #  it could happen with loyalty programs using a code
         # Points desc so that in coupon mode one could use a coupon multiple times
         coupon = self.env['loyalty.card'].search(
-            [('program_id', 'in', self.all_program_ids.ids), ('partner_id', 'in', (False, partner_id)), ('code', '=', code)],
+            [('program_id', 'in', self._get_program_ids().ids), ('partner_id', 'in', (False, partner_id)), ('code', '=', code)],
             order='partner_id, points desc', limit=1)
         if not coupon or not coupon.program_id.active:
             return {

--- a/addons/pos_loyalty/models/pos_session.py
+++ b/addons/pos_loyalty/models/pos_session.py
@@ -9,7 +9,7 @@ class PosSession(models.Model):
 
     def _pos_ui_models_to_load(self):
         result = super()._pos_ui_models_to_load()
-        if self.config_id.all_program_ids:
+        if self.config_id._get_program_ids():
             result += [
                 'loyalty.program',
                 'loyalty.rule',
@@ -20,7 +20,7 @@ class PosSession(models.Model):
     def _loader_params_loyalty_program(self):
         return {
             'search_params': {
-                'domain': [('id', 'in', self.config_id.all_program_ids.ids)],
+                'domain': [('id', 'in', self.config_id._get_program_ids().ids)],
                 'fields': ['name', 'trigger', 'applies_on', 'program_type', 'date_to',
                     'limit_usage', 'max_usage', 'is_nominative', 'portal_point_name'],
             },
@@ -29,7 +29,7 @@ class PosSession(models.Model):
     def _loader_params_loyalty_rule(self):
         return {
             'search_params': {
-                'domain': [('program_id', 'in', self.config_id.all_program_ids.ids)],
+                'domain': [('program_id', 'in', self.config_id._get_program_ids().ids)],
                 'fields': ['program_id', 'valid_product_ids', 'any_product', 'currency_id',
                     'reward_point_amount', 'reward_point_split', 'reward_point_mode',
                     'minimum_qty', 'minimum_amount', 'minimum_amount_tax_mode', 'mode', 'code'],
@@ -39,7 +39,7 @@ class PosSession(models.Model):
     def _loader_params_loyalty_reward(self):
         return {
             'search_params': {
-                'domain': [('program_id', 'in', self.config_id.all_program_ids.ids)],
+                'domain': [('program_id', 'in', self.config_id._get_program_ids().ids)],
                 'fields': ['description', 'program_id', 'reward_type', 'required_points', 'clear_wallet', 'currency_id',
                     'discount', 'discount_mode', 'discount_applicability', 'all_discount_product_ids', 'is_global_discount',
                     'discount_max_amount', 'discount_line_product_id',
@@ -67,7 +67,8 @@ class PosSession(models.Model):
     def _load_pos_ui_loyalty_points(self, result):
         # In order to make loyalty programs work offline we load the partner's point into
         # a non-existant field 'loyalty_points'.
-        if self.config_id.loyalty_program_id:
+        loyalty_programs = self.config_id._get_program_ids().filtered(lambda program: program.program_type == 'loyalty')
+        if loyalty_programs:
             # collect ids in a list, group by id and default points to 0
             partner_ids = []
             res_by_id = {}
@@ -79,7 +80,7 @@ class PosSession(models.Model):
             # Direct query to avoid loading loyalty cards in the cache for no reason.
             # There is no context where we would need to flush.
             query = self.env['loyalty.card']._search(
-                [('program_id', '=', self.config_id.loyalty_program_id.id), ('partner_id', 'in', partner_ids)]
+                [('program_id', '=', loyalty_programs[0].id), ('partner_id', 'in', partner_ids)]
             )
             # query can be falsy
             if not query:
@@ -97,8 +98,8 @@ class PosSession(models.Model):
     def _loader_params_product_product(self):
         result = super(PosSession, self)._loader_params_product_product()
         config = self.config_id
-        if config.all_program_ids:
-            programs = config.all_program_ids
+        if config._get_program_ids():
+            programs = config._get_program_ids()
             rewards = programs.reward_ids
             products = (programs.rule_ids.valid_product_ids | rewards.discount_line_product_id) |\
                 (rewards.all_discount_product_ids | rewards.reward_product_ids)
@@ -107,9 +108,41 @@ class PosSession(models.Model):
 
     def _get_pos_ui_product_product(self, params):
         result = super()._get_pos_ui_product_product(params)
-        rewards = self.config_id.all_program_ids.reward_ids
+        rewards = self.config_id._get_program_ids().reward_ids
         products = rewards.discount_line_product_id | rewards.reward_product_ids
         products = self.env['product.product'].search_read([('id', 'in', products.ids)], fields=params['search_params']['fields'])
         self._process_pos_ui_product_product(products)
         result.extend(products)
         return result
+
+    def _pos_data_process(self, loaded_data):
+        super()._pos_data_process(loaded_data)
+        config = loaded_data['pos.config']
+        if not loaded_data.get('loyalty.program'):
+            return
+        programs = loaded_data['loyalty.program']
+
+        loyalty_programs, coupons, promotions, gift_cards = [], [], [], []
+        for program in programs:
+            if (program['program_type'] == 'loyalty'):
+                loyalty_programs.append(program)
+            if (program['program_type'] == 'coupon'):
+                coupons.append(program)
+            if (program['program_type'] == 'promotion'):
+                promotions.append(program)
+            if (program['program_type'] == 'gift_card'):
+                gift_cards.append(program)
+
+        # NOTE: the following keys are only used in PoS frontend
+        # TODO: remove them
+        loyalty_program = loyalty_programs[0] if len(loyalty_programs) > 0 else False
+        config['loyalty_program_id'] = loyalty_program and (loyalty_program['id'], loyalty_program['name'])
+        config['module_pos_loyalty'] = bool(loyalty_program)
+
+        config['coupon_program_ids'] = [(coupon['id'], coupon['name']) for coupon in coupons]
+        config['promo_program_ids'] = [(promotion['id'], promotion['name']) for promotion in promotions]
+        config['use_coupon_programs'] = len(coupons) + len(promotions) > 0
+
+        gift_card = gift_cards[0] if len(gift_cards) > 0 else False
+        config['gift_card_program_id'] = gift_card and (gift_card['id'], gift_card['name'])
+        config['use_gift_card'] = bool(gift_card)

--- a/addons/pos_loyalty/models/res_config_settings.py
+++ b/addons/pos_loyalty/models/res_config_settings.py
@@ -6,20 +6,4 @@ from odoo import fields, models, api
 class ResConfigSettings(models.TransientModel):
     _inherit = 'res.config.settings'
 
-    pos_loyalty_program_id = fields.Many2one('loyalty.program', compute='_compute_pos_loyalty_id', store=True, readonly=False)
-
-    pos_use_coupon_programs = fields.Boolean(related='pos_config_id.use_coupon_programs', readonly=False)
-    pos_coupon_program_ids = fields.Many2many(related='pos_config_id.coupon_program_ids', readonly=False)
-    pos_promo_program_ids = fields.Many2many(related='pos_config_id.promo_program_ids', readonly=False)
-
-    pos_use_gift_card = fields.Boolean(related='pos_config_id.use_gift_card', readonly=False, string="Gift Cards (PoS)")
-    pos_gift_card_program_id = fields.Many2one(related='pos_config_id.gift_card_program_id', readonly=False)
     pos_gift_card_settings = fields.Selection(related='pos_config_id.gift_card_settings', readonly=False)
-
-    @api.depends('pos_module_pos_loyalty', 'pos_config_id')
-    def _compute_pos_loyalty_id(self):
-        for res_config in self:
-            if res_config.pos_module_pos_loyalty:
-                res_config.pos_loyalty_program_id = res_config.pos_config_id.loyalty_program_id or res_config.pos_config_id._default_loyalty_program()
-            else:
-                res_config.pos_loyalty_program_id = False
