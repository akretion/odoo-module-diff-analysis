PR: https://github.com/odoo/odoo/pull/83070

From: b15fc956ad5d468f07c5dce462764aa90d68a5d5
From: std-odoo
Date: 2022-01-20 10:06:47

Breaking data model changes score: 4.200000000000001, change matches:
-    user_id = fields.Many2one(
-    stage_id = fields.Many2one('utm.stage', string='Stage', ondelete='restrict', required=True,
-    tag_ids = fields.Many2many(
-    color = fields.Integer(
+    user_id = fields.Many2one(
+    stage_id = fields.Many2one(
+    tag_ids = fields.Many2many(
+    color = fields.Integer(

Total Changes: 210

[MOV] utm: split models in different files

Purpose
=======

This commit cleans the UTM module and uses a different file for each model
in order to clarify organization and ease reading. Each model belongs to
its file.

Task-2245823

Part-of: odoo/odoo#83070

================================= pseudo patch: =================================

--- a/addons/utm/models/__init__.py
+++ b/addons/utm/models/__init__.py
@@ -1,6 +1,10 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import utm
+from . import utm_campaign
+from . import utm_medium
 from . import utm_mixin
+from . import utm_source
+from . import utm_stage
+from . import utm_tag
 from . import ir_http

--- a/addons/utm/models/utm.py
+++ b/None
@@ -1,91 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from random import randint
-
-from odoo import _, api, fields, models, SUPERUSER_ID
-from odoo.exceptions import UserError
-
-
-class UtmStage(models.Model):
-
-    """Stage for utm campaigns. """
-    _name = 'utm.stage'
-    _description = 'Campaign Stage'
-    _order = 'sequence'
-
-    name = fields.Char(required=True, translate=True)
-    sequence = fields.Integer()
-
-
-class UtmMedium(models.Model):
-    # OLD crm.case.channel
-    _name = 'utm.medium'
-    _description = 'UTM Medium'
-    _order = 'name'
-
-    name = fields.Char(string='Medium Name', required=True)
-    active = fields.Boolean(default=True)
-
-    @api.ondelete(at_uninstall=False)
-    def _unlink_except_utm_medium_email(self):
-        utm_medium_email = self.env.ref('utm.utm_medium_email', raise_if_not_found=False)
-        if utm_medium_email and utm_medium_email in self:
-            raise UserError(_(
-                "The UTM medium '%s' cannot be deleted as it is used in some main "
-                "functional flows, such as the recruitment and the mass mailing.",
-                utm_medium_email.name
-            ))
-
-
-class UtmCampaign(models.Model):
-    # OLD crm.case.resource.type
-    _name = 'utm.campaign'
-    _description = 'UTM Campaign'
-
-    name = fields.Char(string='Campaign Name', required=True, translate=True)
-
-    user_id = fields.Many2one(
-        'res.users', string='Responsible',
-        required=True, default=lambda self: self.env.uid)
-    stage_id = fields.Many2one('utm.stage', string='Stage', ondelete='restrict', required=True,
-        default=lambda self: self.env['utm.stage'].search([], limit=1),
-        group_expand='_group_expand_stage_ids')
-    tag_ids = fields.Many2many(
-        'utm.tag', 'utm_tag_rel',
-        'tag_id', 'campaign_id', string='Tags')
-
-    is_auto_campaign = fields.Boolean(default=False, string="Automatically Generated Campaign", help="Allows us to filter relevant Campaigns")
-    color = fields.Integer(string='Color Index')
-
-    @api.model
-    def _group_expand_stage_ids(self, stages, domain, order):
-        """ Read group customization in order to display all the stages in the
-            kanban view, even if they are empty
-        """
-        stage_ids = stages._search([], order=order, access_rights_uid=SUPERUSER_ID)
-        return stages.browse(stage_ids)
-
-class UtmSource(models.Model):
-    _name = 'utm.source'
-    _description = 'UTM Source'
-
-    name = fields.Char(string='Source Name', required=True, translate=True)
-
-class UtmTag(models.Model):
-    """Model of categories of utm campaigns, i.e. marketing, newsletter, ... """
-    _name = 'utm.tag'
-    _description = 'UTM Tag'
-    _order = 'name'
-
-    def _default_color(self):
-        return randint(1, 11)
-
-    name = fields.Char(required=True, translate=True)
-    color = fields.Integer(
-        string='Color Index', default=lambda self: self._default_color(),
-        help='Tag color. No color means no display in kanban to distinguish internal tags from public categorization tags.')
-
-    _sql_constraints = [
-        ('name_uniq', 'unique (name)', "Tag name already exists !"),
-    ]

--- a/None
+++ b/addons/utm/models/utm_campaign.py
@@ -0,0 +1,34 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+
+from odoo import fields, models, api, SUPERUSER_ID
+
+
+class UtmCampaign(models.Model):
+    _name = 'utm.campaign'
+    _description = 'UTM Campaign'
+
+    name = fields.Char(string='Campaign Name', required=True, translate=True)
+
+    user_id = fields.Many2one(
+        'res.users', string='Responsible',
+        required=True, default=lambda self: self.env.uid)
+    stage_id = fields.Many2one(
+        'utm.stage', string='Stage', ondelete='restrict', required=True,
+        default=lambda self: self.env['utm.stage'].search([], limit=1),
+        group_expand='_group_expand_stage_ids')
+    tag_ids = fields.Many2many(
+        'utm.tag', 'utm_tag_rel',
+        'tag_id', 'campaign_id', string='Tags')
+
+    is_auto_campaign = fields.Boolean(default=False, string="Automatically Generated Campaign", help="Allows us to filter relevant Campaigns")
+    color = fields.Integer(string='Color Index')
+
+    @api.model
+    def _group_expand_stage_ids(self, stages, domain, order):
+        """Read group customization in order to display all the stages in the
+        Kanban view, even if they are empty.
+        """
+        stage_ids = stages._search([], order=order, access_rights_uid=SUPERUSER_ID)
+        return stages.browse(stage_ids)

--- a/None
+++ b/addons/utm/models/utm_medium.py
@@ -0,0 +1,25 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+
+from odoo import _, api, fields, models
+from odoo.exceptions import UserError
+
+
+class UtmMedium(models.Model):
+    _name = 'utm.medium'
+    _description = 'UTM Medium'
+    _order = 'name'
+
+    name = fields.Char(string='Medium Name', required=True, translate=True)
+    active = fields.Boolean(default=True)
+
+    @api.ondelete(at_uninstall=False)
+    def _unlink_except_utm_medium_email(self):
+        utm_medium_email = self.env.ref('utm.utm_medium_email', raise_if_not_found=False)
+        if utm_medium_email and utm_medium_email in self:
+            raise UserError(_(
+                "The UTM medium '%s' cannot be deleted as it is used in some main "
+                "functional flows, such as the recruitment and the mass mailing.",
+                utm_medium_email.name
+            ))

--- a/None
+++ b/addons/utm/models/utm_source.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+
+from odoo import fields, models
+
+
+class UtmSource(models.Model):
+    _name = 'utm.source'
+    _description = 'UTM Source'
+
+    name = fields.Char(string='Source Name', required=True, translate=True)

--- a/None
+++ b/addons/utm/models/utm_stage.py
@@ -0,0 +1,16 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+
+from odoo import fields, models
+
+
+class UtmStage(models.Model):
+    """Stage for utm campaigns."""
+
+    _name = 'utm.stage'
+    _description = 'Campaign Stage'
+    _order = 'sequence'
+
+    name = fields.Char(required=True, translate=True)
+    sequence = fields.Integer()

--- a/None
+++ b/addons/utm/models/utm_tag.py
@@ -0,0 +1,26 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from random import randint
+
+from odoo import fields, models
+
+
+class UtmTag(models.Model):
+    """Model of categories of utm campaigns, i.e. marketing, newsletter, ..."""
+
+    _name = 'utm.tag'
+    _description = 'UTM Tag'
+    _order = 'name'
+
+    def _default_color(self):
+        return randint(1, 11)
+
+    name = fields.Char(required=True, translate=True)
+    color = fields.Integer(
+        string='Color Index', default=lambda self: self._default_color(),
+        help='Tag color. No color means no display in kanban to distinguish internal tags from public categorization tags.')
+
+    _sql_constraints = [
+        ('name_uniq', 'unique (name)', "Tag name already exists !"),
+    ]
