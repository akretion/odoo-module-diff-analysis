PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = 'payment.acquirer'
-    provider = fields.Selection(

Total Changes: 136

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_payumoney/models/__init__.py
+++ b/addons/payment_payumoney/models/__init__.py
@@ -1,4 +1,4 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_transaction

--- a/addons/payment_payumoney/models/payment_acquirer.py
+++ b/addons/payment_payumoney/models/payment_provider.py
@@ -5,10 +5,10 @@ import hashlib
 from odoo import api, fields, models
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('payumoney', "PayUmoney")], ondelete={'payumoney': 'set default'})
     payumoney_merchant_key = fields.Char(
         string="Merchant Key", help="The key solely used to identify the account with PayU money",
@@ -17,15 +17,15 @@ class PaymentAcquirer(models.Model):
         string="Merchant Salt", required_if_provider='payumoney', groups='base.group_system')
 
     @api.model
-    def _get_compatible_acquirers(self, *args, currency_id=None, **kwargs):
-        """ Override of payment to unlist PayUmoney acquirers when the currency is not INR. """
-        acquirers = super()._get_compatible_acquirers(*args, currency_id=currency_id, **kwargs)
+    def _get_compatible_providers(self, *args, currency_id=None, **kwargs):
+        """ Override of payment to unlist PayUmoney providers when the currency is not INR. """
+        providers = super()._get_compatible_providers(*args, currency_id=currency_id, **kwargs)
 
         currency = self.env['res.currency'].browse(currency_id).exists()
         if currency and currency.name != 'INR':
-            acquirers = acquirers.filtered(lambda a: a.provider != 'payumoney')
+            providers = providers.filtered(lambda p: p.code != 'payumoney')
 
-        return acquirers
+        return providers
 
     def _payumoney_generate_sign(self, values, incoming=True):
         """ Generate the shasign for incoming or outgoing communications.

--- a/addons/payment_payumoney/models/payment_transaction.py
+++ b/addons/payment_payumoney/models/payment_transaction.py
@@ -18,18 +18,18 @@ class PaymentTransaction(models.Model):
         Note: self.ensure_one() from `_get_processing_values`
 
         :param dict processing_values: The generic and specific processing values of the transaction
-        :return: The dict of acquirer-specific processing values
+        :return: The dict of provider-specific processing values
         :rtype: dict
         """
         res = super()._get_specific_rendering_values(processing_values)
-        if self.provider != 'payumoney':
+        if self.provider_code != 'payumoney':
             return res
 
         first_name, last_name = payment_utils.split_partner_name(self.partner_id.name)
-        api_url = 'https://secure.payu.in/_payment' if self.acquirer_id.state == 'enabled' \
+        api_url = 'https://secure.payu.in/_payment' if self.provider_id.state == 'enabled' \
             else 'https://sandboxsecure.payu.in/_payment'
         payumoney_values = {
-            'key': self.acquirer_id.payumoney_merchant_key,
+            'key': self.provider_id.payumoney_merchant_key,
             'txnid': self.reference,
             'amount': self.amount,
             'productinfo': self.reference,
@@ -40,23 +40,23 @@ class PaymentTransaction(models.Model):
             'return_url': urls.url_join(self.get_base_url(), PayUMoneyController._return_url),
             'api_url': api_url,
         }
-        payumoney_values['hash'] = self.acquirer_id._payumoney_generate_sign(
+        payumoney_values['hash'] = self.provider_id._payumoney_generate_sign(
             payumoney_values, incoming=False,
         )
         return payumoney_values
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of payment to find the transaction based on Payumoney data.
 
-        :param str provider: The provider of the acquirer that handled the transaction
+        :param str provider_code: The code of the provider that handled the transaction
         :param dict notification_data: The notification data sent by the provider
         :return: The transaction if found
         :rtype: recordset of `payment.transaction`
         :raise: ValidationError if inconsistent data were received
         :raise: ValidationError if the data match no transaction
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'payumoney' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'payumoney' or len(tx) == 1:
             return tx
 
         reference = notification_data.get('txnid')
@@ -65,7 +65,7 @@ class PaymentTransaction(models.Model):
                 "PayUmoney: " + _("Received data with missing reference (%s)", reference)
             )
 
-        tx = self.search([('reference', '=', reference), ('provider', '=', 'payumoney')])
+        tx = self.search([('reference', '=', reference), ('provider_code', '=', 'payumoney')])
         if not tx:
             raise ValidationError(
                 "PayUmoney: " + _("No transaction found matching reference %s.", reference)
@@ -82,11 +82,11 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'payumoney':
+        if self.provider_code != 'payumoney':
             return
 
         status = notification_data.get('status')
-        self.acquirer_reference = notification_data.get('payuMoneyId')
+        self.provider_reference = notification_data.get('payuMoneyId')
 
         if status == 'success':
             self._set_done()
