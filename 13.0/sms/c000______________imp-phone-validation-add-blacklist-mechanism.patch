PR: https://github.com/odoo/odoo/pull/

From: 7e8a02cd6e9f08e5ff45db804b357bc3537ff1f6
From: Thibault Delavallée
Date: 2019-08-12 12:00:22

Breaking data model changes score: 1, change matches:
-    _inherit = 'res.partner'

Total Changes: 26

[IMP] phone_validation: add blacklist mechanism

PURPOSE

SMS are a powerful marketing tool. For instance it is perfect to announce a
sale or to communicate a coupon code, to welcome a new customer in a fidelity
program, ...

Purpose of this task is to integrate SMS sending in batch in mass mailing. It
will use same mailing objects but sending SMS instead of emails. Some metrics
and flows will have to be slightly updated at the same time.

SPECIFICATIONS

Purpose of this commit is to add a blacklist mechanism for phone numbers
used to send SMS like what already exists for email addresses when sending
emails.

Define a new phone.blacklist model, holding a number and the state of the
blacklist (active field), as well as tools methods to access it. Make it
as private as possible, accessing it in sudo once access are granted.

Also clean phone validation tools: lessen number of tool functions and update
caller to simplify code readability. Some fixes are also included in this
commit, notably blank spaces cleaning in phone numbers.

Improve phone.validation.mixin to add a tool method computing a sanitized
number, in addition to formatting it to national / international.

Define a new mail.thread.phone mixin computing the blacklist status of a
record. This mixin

  * inherit from phone.validation.mixin in order to have access to some
    base phone number parsing capabilities;
  * computes a sanitized phone number based on ´´_phone_get_number_fields´´.
    It takes first sanitized value, trying each field returned by the
    method. That means one sanitized phone number is available per record
    even if several fields are available;
  * compute blacklist state of records. It is based on phone.blacklist
    model and give an easy-to-use field and API to manipulate blacklisted
    records;
  * give some API methods :

    * ``_phone_set_blacklisted``: set recordset as blacklisted;
    * ``_phone_reset_blacklisted``: reactivate recordset (even if not blacklisted
        this method can be called safely);

Put menus in technical in order to have access to it. Add a Phone / SMS
menu below "Email" and use it to store SMS / Phone actions.

Finally prepare tests addition by performing some light cleaning while adding
blacklist tests. Purpose is to ease future tests related to SMS.

LINKS

Task 1997464
PR #34424
Original SMS addition: Task 1922163 (4287481)

================================= pseudo patch: =================================

--- a/addons/sms/models/__init__.py
+++ b/addons/sms/models/__init__.py
@@ -6,6 +6,7 @@ from . import mail_followers
 from . import mail_message
 from . import mail_notification
 from . import mail_thread
+from . import mail_thread_phone
 from . import res_partner
 from . import sms_api
 from . import sms_sms

--- a/addons/sms/models/mail_thread.py
+++ b/addons/sms/models/mail_thread.py
@@ -78,7 +78,7 @@ class MailThread(models.AbstractModel):
 
             valid_number = False
             for fname in [f for f in tocheck_fields if f in record]:
-                valid_number = phone_validation.phone_get_sanitized_record_number(record, number_fname=fname)
+                valid_number = phone_validation.phone_sanitize_numbers_w_record([record[fname]], record)[record[fname]]['sanitized']
                 if valid_number:
                     break
 
@@ -92,7 +92,7 @@ class MailThread(models.AbstractModel):
                 for partner in all_partners:
                     partner_number = partner.mobile or partner.phone
                     if partner_number:
-                        partner_number = phone_validation.phone_sanitize_numbers_string_w_record(partner_number, record)[partner_number]['sanitized']
+                        partner_number = phone_validation.phone_sanitize_numbers_w_record([partner_number], record)[partner_number]['sanitized']
                     if partner_number:
                         break
 
@@ -233,7 +233,7 @@ class MailThread(models.AbstractModel):
         if partner_ids:
             for partner in self.env['res.partner'].sudo().browse(partner_ids):
                 number = sms_pid_to_number.get(partner.id) or partner.mobile or partner.phone
-                sanitize_res = phone_validation.phone_sanitize_numbers_string_w_record(number, partner)[number]
+                sanitize_res = phone_validation.phone_sanitize_numbers_w_record([number], partner)[number]
                 number = sanitize_res['sanitized'] or number
                 sms_create_vals.append(dict(
                     sms_base_vals,

--- a/None
+++ b/addons/sms/models/mail_thread_phone.py
@@ -0,0 +1,16 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models
+
+
+class PhoneMixin(models.AbstractModel):
+    _inherit = 'mail.thread.phone'
+
+    def _phone_get_number_fields(self):
+        """ Add fields coming from sms implementation. """
+        sms_fields = self._sms_get_number_fields()
+        res = super(PhoneMixin, self)._phone_get_number_fields()
+        for fname in (f for f in res if f not in sms_fields):
+            sms_fields.append(fname)
+        return sms_fields

--- a/addons/sms/models/res_partner.py
+++ b/addons/sms/models/res_partner.py
@@ -5,7 +5,8 @@ from odoo import models
 
 
 class ResPartner(models.Model):
-    _inherit = 'res.partner'
+    _name = 'res.partner'
+    _inherit = ['res.partner', 'mail.thread.phone']
 
     def _sms_get_default_partners(self):
         """ Override of mail.thread method.
