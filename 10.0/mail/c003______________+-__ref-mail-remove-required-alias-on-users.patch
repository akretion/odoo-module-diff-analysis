PR: https://github.com/odoo/odoo/pull/

From: 029d1baf359eabb7ed531287f3cb2b3b8d586d39
From: Thibault Delavall√©e
Date: 2016-09-01 11:19:24

Structural Changes: 5
Total Changes: 31

[REF] mail: remove required alias on users

This commit remove required alias on res.users model. It also removes the
inheritance of mail.alias.mixin. The field alias_id is kept and allow people
to use aliases on users if they want. However there is no default void alias
created for each user anymore.

Default from of mail.message does not use user alias anymore. Indeed this
creates issues with aliases not being correctly configured and can be
confusing compared to private channels. Using user aliases is therefore
now done manually instead of being a default behavior.

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_message.py
+++ b/addons/mail/models/mail_message.py
@@ -26,11 +26,9 @@ class Message(models.Model):
 
     @api.model
     def _get_default_from(self):
-        if self.env.user.alias_name and self.env.user.alias_domain:
-            return formataddr((self.env.user.name, '%s@%s' % (self.env.user.alias_name, self.env.user.alias_domain)))
-        elif self.env.user.email:
+        if self.env.user.email:
             return formataddr((self.env.user.name, self.env.user.email))
-        raise UserError(_("Unable to send email, please configure the sender's email address or alias."))
+        raise UserError(_("Unable to send email, please configure the sender's email address."))
 
     @api.model
     def _get_default_author(self):

--- a/addons/mail/models/res_users.py
+++ b/addons/mail/models/res_users.py
@@ -14,11 +14,15 @@ class Users(models.Model):
           group, and the user. This is done by overriding the write method.
     """
     _name = 'res.users'
-    _inherit = ['mail.alias.mixin', 'res.users']
+    _inherit = ['res.users']
 
-    alias_id = fields.Many2one('mail.alias', 'Alias', ondelete="restrict", required=True,
+    alias_id = fields.Many2one('mail.alias', 'Alias', ondelete="set null", required=False,
             help="Email address internally associated with this user. Incoming "\
                  "emails will appear in the user's notifications.", copy=False, auto_join=True)
+    alias_contact = fields.Selection([
+        ('everyone', 'Everyone'),
+        ('partners', 'Authenticated Partners'),
+        ('followers', 'Followers only')], string='Alias Contact Security', related='alias_id.alias_contact')
 
     def __init__(self, pool, cr):
         """ Override of __init__ to add access rights on notification_email_send
@@ -31,17 +35,9 @@ class Users(models.Model):
         type(self).SELF_WRITEABLE_FIELDS.extend(['notify_email'])
         # duplicate list to avoid modifying the original reference
         type(self).SELF_READABLE_FIELDS = list(self.SELF_READABLE_FIELDS)
-        type(self).SELF_READABLE_FIELDS.extend(['notify_email', 'alias_domain', 'alias_name'])
+        type(self).SELF_READABLE_FIELDS.extend(['notify_email'])
         return init_res
 
-    def get_alias_model_name(self, vals):
-        return self._name
-
-    def get_alias_values(self):
-        values = super(Users, self).get_alias_values()
-        values['alias_force_thread_id'] = self.id
-        return values
-
     @api.model
     def create(self, values):
         if not values.get('login', False):
@@ -65,13 +61,6 @@ class Users(models.Model):
             self.env['mail.channel'].search([('group_ids', 'in', user_group_ids)])._subscribe_users()
         return write_res
 
-    @api.multi
-    def copy_data(self, default=None):
-        data = super(Users, self).copy_data(default)[0]
-        if data and data.get('alias_name'):
-            data['alias_name'] = data['login']
-        return [data]
-
     def _create_welcome_message(self):
         self.ensure_one()
         if not self.has_group('base.group_user'):
