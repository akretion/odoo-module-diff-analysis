PR: https://github.com/odoo/odoo/pull/

From: f8c2b02abe60ec4860e9472fe3b1e259fb35a1d2
From: Chong Wang (cwg)
Date: 2022-09-15 20:37:50

Structural Changes: 1
Total Changes: 101

[FIX] *: adapt code to jsonb translations

Website: the context install_filename='dummy' is used to prevent
arch_updated from becoming True while updating translations of
ir_ui_view.arch_db (if arch_update becomes True, test_inherit_specific
fails)

Fuzzy search for jsonb translated fields has been adapted in the case of
website.  It may require some refactoring later.

================================= pseudo patch: =================================

--- a/addons/mail/models/__init__.py
+++ b/addons/mail/models/__init__.py
@@ -52,7 +52,6 @@ from . import ir_http
 from . import ir_mail_server
 from . import ir_model
 from . import ir_model_fields
-from . import ir_translation
 from . import ir_ui_view
 from . import ir_qweb
 from . import ir_websocket

--- a/addons/mail/models/ir_translation.py
+++ b/None
@@ -1,59 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import models, _
-from odoo.exceptions import AccessError
-
-
-class IrTranslation(models.Model):
-    _inherit = 'ir.translation'
-
-    def create(self, vals_list):
-        translations = super().create(vals_list)
-        translations._check_is_dynamic()
-        return translations
-
-    def write(self, vals):
-        res = super().write(vals)
-        self._check_is_dynamic()
-        return res
-
-    def _check_is_dynamic(self):
-        # if we don't modify translation of at least a model that inherits from mail.render.mixin, we ignore it
-        # translation.name can be a path, and so not in the pool, so type(None) will exclude these translations.
-        translations_for_mail_render_mixin = self.filtered(
-            lambda translation: issubclass(type(self.env.get(translation.name.split(',')[0])), self.pool['mail.render.mixin'])
-        )
-        if not translations_for_mail_render_mixin:
-            return
-
-        # if we are admin, or that we can update mail.template we ignore
-        if self.env.is_admin() or self.env.user.has_group('mail.group_mail_template_editor'):
-            return
-
-        # Check that we don't add qweb code in translation when you don't have the rights
-
-        # prefill cache
-        ids_by_model_by_lang = {}
-        tuple_lang_model_id = translations_for_mail_render_mixin.mapped(
-            lambda translation: (translation.lang, translation.name.split(',')[0], translation.res_id)
-        )
-        for lang, model, _id in tuple_lang_model_id:
-            ids_by_model_by_lang.setdefault(lang, {}).setdefault(model, set()).add(_id)
-        for lang in ids_by_model_by_lang:
-            for res_model, res_ids in ids_by_model_by_lang[lang].items():
-                self.env[res_model].with_context(lang=lang).browse(res_ids)
-
-        for trans in translations_for_mail_render_mixin:
-            res_model, res_id = trans.name.split(',')[0], trans.res_id
-            rec = self.env[res_model].with_context(lang=trans.lang).browse(res_id)
-
-            if rec._is_dynamic():
-                group = self.env.ref('mail.group_mail_template_editor')
-                more_info = len(self) > 1 and ' [%s]' % rec or ''
-                raise AccessError(
-                    _('Only users belonging to the "%(group)s" group can modify translation related to dynamic templates.%(xtra)s',
-                      group=group.name,
-                      xtra=more_info
-                    )
-                )

--- a/addons/mail/models/mail_render_mixin.py
+++ b/addons/mail/models/mail_render_mixin.py
@@ -104,6 +104,16 @@ class MailRenderMixin(models.AbstractModel):
             self._check_access_right_dynamic_template()
         return True
 
+    def _update_field_translations(self, fname, translations, digest=None):
+        res = super()._update_field_translations(fname, translations, digest)
+        # TBD the below check is only for model_term translations.
+        # Because for model translations, super().update_field_translations will call write to check
+        if self._unrestricted_rendering:
+            # If the rendering is unrestricted (e.g. mail.template),
+            # check the user is part of the mail editor group to modify a template if the template is dynamic
+            self._check_access_right_dynamic_template()
+        return res
+
     # ------------------------------------------------------------
     # TOOLS
     # ------------------------------------------------------------

--- a/addons/mail/models/template_reset_mixin.py
+++ b/addons/mail/models/template_reset_mixin.py
@@ -11,7 +11,7 @@ from odoo.modules import get_module_resource
 from odoo.modules.module import get_resource_from_path, get_resource_path
 from odoo.tools.convert import xml_import
 from odoo.tools.misc import file_open
-from odoo.tools.translate import TranslationFileReader
+from odoo.tools.translate import TranslationFileReader, _trans_load_data
 
 
 class TemplateResetMixin(models.AbstractModel):
@@ -62,10 +62,8 @@ class TemplateResetMixin(models.AbstractModel):
 
     def _override_translation_term(self, module_name, xml_ids):
         processed_base_langs = []
-        trans_to_remove = []
         for code, _ in self.env['res.lang'].get_installed():
             lang_code = tools.get_iso_codes(code)
-            translation_processed = False
             # In case of sub languages (e.g fr_BE), load the base language first, (e.g fr.po) and
             # then load the main translation file (e.g fr_BE.po)
 
@@ -76,28 +74,17 @@ class TemplateResetMixin(models.AbstractModel):
                 if base_trans_file:
                     if base_lang_code not in processed_base_langs:
                         processed_base_langs.append(base_lang_code)
-                        translation_processed = self._process_translation_data(base_trans_file, code, xml_ids)
+                        self._process_translation_data(base_trans_file, code, xml_ids)
 
             # Step 2: reset translation file with main language file (can possibly override the
             # terms coming from the base language)
             trans_file = get_module_resource(module_name, 'i18n', lang_code + '.po')
             if trans_file:
-                translation_processed = self._process_translation_data(trans_file, code, xml_ids)
+                self._process_translation_data(trans_file, code, xml_ids)
 
-            # If no translation data available to update, unlink custom translated terms linked to template
-            if not translation_processed:
-                trans_to_remove.append(code)
-
-        if trans_to_remove:
-            self.env['ir.translation'].search([
-                ('name', 'like', f'{self._name},%'),
-                ('res_id', '=', self.id),
-                ('lang', 'in', trans_to_remove),
-                ('module', 'in', [module_name, False]),
-            ]).unlink()
 
     def _process_translation_data(self, trans_file, lang, xml_ids):
-        """Populates the ir_translation table.
+        """Load translations.
 
         :param trans_file: path to a translation file to open, e.g. {addon_path}/mail/i18n/es.po
         :param lang: language code of the translations contained in `trans_file`
@@ -106,17 +93,9 @@ class TemplateResetMixin(models.AbstractModel):
         :return Boolean: True if translation data is available and processed, False otherwise
         """
         with file_open(trans_file, mode='rb', filter_ext=(".po",)) as fileobj:
-            translation_processed = False
             reader = TranslationFileReader(fileobj)
             # Process a single PO entry
-            for row in reader:
-                if row.get('imd_name') in xml_ids:
-                    translation_processed = True
-                    # copy Translation from Source to Destination object
-                    self.env['ir.translation']._set_ids(
-                        row['name'], 'model', lang, self._ids, row.get('value', ''), row['src'],
-                    )
-            return translation_processed
+            _trans_load_data(self.env.cr, reader, lang, overwrite=True, force_overwrite=True, xml_ids=xml_ids)
 
     def reset_template(self):
         """Resets the Template with values given in source file. We ignore the case of
