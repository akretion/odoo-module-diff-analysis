PR: https://github.com/odoo/odoo/pull/109903

From: 55fa52be8a80e6f7ee2a526db29c0d97c24ae8f6
From: Florian Charlier
Date: 2023-08-18 17:16:15

Breaking data model changes score: 5, change matches:
-    is_conditional = fields.Boolean(
-    triggering_question_id = fields.Many2one(
+    triggering_question_ids = fields.Many2many(
-    triggering_answer_id = fields.Many2one(
+    triggering_answer_ids = fields.Many2many(

Total Changes: 258

[IMP] survey: enable multiple trigger questions and answers

Purpose: allowing users to select multiple answers, even from
different questions, as triggers to display a subsequent question.

For example, we could ask the question
"What qualities do you look for in a desk?"
if the participant selected one of the following answers before:
"What furniture did you already buy from us?" - "A desk"
"What kind of furniture are you looking for?" - "Office furniture"

Demo data and tests are adapted and new ones are added.

We also take this opportunity to remove `is_conditional` because:
1. This field isn't useful anymore.
2. It could cause inconsistencies as it is not supported to check
 with a sql constraint that `suggested_answer_ids` is set when this
  flag is `True`.

Task-2937533

Part-of: odoo/odoo#109903
Co-authored-by: Pratik Raval <prra@odoo.com>

================================= pseudo patch: =================================

--- a/addons/survey/models/survey_question.py
+++ b/addons/survey/models/survey_question.py
@@ -3,9 +3,10 @@
 
 import collections
 import contextlib
-import json
 import itertools
+import json
 import operator
+from textwrap import shorten
 
 from odoo import api, fields, models, tools, _
 from odoo.exceptions import UserError, ValidationError
@@ -132,27 +133,28 @@ class SurveyQuestion(models.Model):
         'survey.user_input.line', 'question_id', string='Answers',
         domain=[('skipped', '=', False)], groups='survey.group_survey_user')
 
-    # Conditional display
-    is_conditional = fields.Boolean(
-        string='Conditional Display', copy=False, help="""If checked, this question will be displayed only
-        if the specified conditional answer have been selected in a previous question""")
-    triggering_question_id = fields.Many2one(
-        'survey.question', string="Triggering Question", copy=False, compute="_compute_triggering_question_id",
-        store=True, readonly=False, help="Question containing the triggering answer to display the current question.",
-        domain="[('survey_id', '=', survey_id), \
-                 '&', ('question_type', 'in', ['simple_choice', 'multiple_choice']), \
-                 '|', \
-                     ('sequence', '<', sequence), \
-                     '&', ('sequence', '=', sequence), ('id', '<', id)]")
+    # Not stored, convenient for trigger display computation.
+    triggering_question_ids = fields.Many2many(
+        'survey.question', string="Triggering Questions", compute="_compute_triggering_question_ids",
+        store=False, help="Questions containing the triggering answer(s) to display the current question.")
+
     allowed_triggering_question_ids = fields.Many2many(
         'survey.question', string="Allowed Triggering Questions", copy=False, compute="_compute_allowed_triggering_question_ids")
     is_placed_before_trigger = fields.Boolean(
-        string='Is misplaced?', help="Is this question placed before its trigger question?",
+        string='Is misplaced?', help="Is this question placed before any of its trigger questions?",
         compute="_compute_allowed_triggering_question_ids")
-    triggering_answer_id = fields.Many2one(
-        'survey.question.answer', string="Triggering Answer", copy=False, compute="_compute_triggering_answer_id",
-        store=True, readonly=False, help="Answer that will trigger the display of the current question.",
-        domain="[('question_id', '=', triggering_question_id)]")
+    triggering_answer_ids = fields.Many2many(
+        'survey.question.answer', string="Triggering Answers", copy=False, store=True,
+        readonly=False, help="Picking any of these answers will trigger this question.\n"
+                             "Leave the field empty if the question should always be displayed.",
+        domain="""[
+            ('question_id.survey_id', '=', survey_id),
+            '&', ('question_id.question_type', 'in', ['simple_choice', 'multiple_choice']),
+                 '|',
+                     ('question_id.sequence', '<', sequence),
+                     '&', ('question_id.sequence', '=', sequence), ('question_id.id', '<', id)
+        ]"""
+    )
 
     _sql_constraints = [
         ('positive_len_min', 'CHECK (validation_length_min >= 0)', 'A length must be positive!'),
@@ -166,12 +168,6 @@ class SurveyQuestion(models.Model):
             'All "Is a scored question = True" and "Question Type: Datetime" questions need an answer'),
         ('scored_date_have_answers', "CHECK (is_scored_question != True OR question_type != 'date' OR answer_date is not null)",
             'All "Is a scored question = True" and "Question Type: Date" questions need an answer'),
-        ('conditional_questions_have_triggering_question', 'CHECK (is_conditional != True OR triggering_question_id is not null)',
-            'All conditional display questions need a triggering question.\n'
-            'Please disable "Conditional Display" or specify a triggering question.'),
-        ('triggered_questions_have_triggering_answer', 'CHECK (triggering_question_id is null OR triggering_answer_id is not null)',
-            'All questions triggered by another need a triggering answer.\n'
-            'Please disable "Conditional Display" or specify a triggering answer.'),
     ]
 
     # -------------------------------------------------------------------------
@@ -280,19 +276,12 @@ class SurveyQuestion(models.Model):
             if not question.validation_required or question.question_type not in ['char_box', 'numerical_box', 'date', 'datetime']:
                 question.validation_required = False
 
-    @api.depends('is_conditional', 'survey_id', 'survey_id.question_ids', 'triggering_question_id')
+    @api.depends('survey_id', 'survey_id.question_ids', 'triggering_answer_ids')
     def _compute_allowed_triggering_question_ids(self):
-        """ Although the question (and possible trigger questions) sequence
+        """Although the question (and possible trigger questions) sequence
         is used here, we do not add these fields to the dependency list to
         avoid cascading rpc calls when reordering questions via the webclient.
         """
-        conditional_questions = self.filtered(lambda q: q.is_conditional)
-        non_conditional_questions = self - conditional_questions
-        non_conditional_questions.allowed_triggering_question_ids = False
-        non_conditional_questions.is_placed_before_trigger = False
-        if not conditional_questions:
-            return
-
         possible_trigger_questions = self.search([
             ('is_page', '=', False),
             ('question_type', 'in', ['simple_choice', 'multiple_choice']),
@@ -301,14 +290,14 @@ class SurveyQuestion(models.Model):
         ])
         # Using the sequence stored in db is necessary for existing questions that are passed as
         # NewIds because the sequence provided by the JS client can be incorrect.
-        (conditional_questions | possible_trigger_questions).flush_recordset()
+        (self | possible_trigger_questions).flush_recordset()
         self.env.cr.execute(
             "SELECT id, sequence FROM survey_question WHERE id =ANY(%s)",
-            [conditional_questions.ids]
+            [self.ids]
         )
         conditional_questions_sequences = dict(self.env.cr.fetchall())  # id: sequence mapping
 
-        for question in conditional_questions:
+        for question in self:
             question_id = question._origin.id
             if not question_id:  # New question
                 question.allowed_triggering_question_ids = possible_trigger_questions.filtered(
@@ -322,28 +311,15 @@ class SurveyQuestion(models.Model):
                 lambda q: q.survey_id.id == question.survey_id._origin.id
                 and (q.sequence < question_sequence or q.sequence == question_sequence and q.id < question_id)
             )
-            question.is_placed_before_trigger = (
-                question.triggering_question_id
-                and question.triggering_question_id.id not in question.allowed_triggering_question_ids.ids)
-
-    @api.depends('is_conditional')
-    def _compute_triggering_question_id(self):
-        """ Used as an 'onchange' : Reset the triggering question if user uncheck 'Conditional Display'
-            Avoid CacheMiss : set the value to False if the value is not set yet."""
-        for question in self:
-            if not question.is_conditional or question.triggering_question_id is None:
-                question.triggering_question_id = False
-
-    @api.depends('triggering_question_id')
-    def _compute_triggering_answer_id(self):
-        """ Used as an 'onchange' : Reset the triggering answer if user unset or change the triggering question
-            or uncheck 'Conditional Display'.
-            Avoid CacheMiss : set the value to False if the value is not set yet."""
+            question.is_placed_before_trigger = bool(
+                set(question.triggering_answer_ids.question_id.ids)
+                - set(question.allowed_triggering_question_ids.ids)  # .ids necessary to match ids with newIds
+            )
+
+    @api.depends('triggering_answer_ids')
+    def _compute_triggering_question_ids(self):
         for question in self:
-            if not question.triggering_question_id \
-                    or question.triggering_question_id != question.triggering_answer_id.question_id\
-                    or question.triggering_answer_id is None:
-                question.triggering_answer_id = False
+            question.triggering_question_ids = question.triggering_answer_ids.question_id
 
     @api.depends('question_type', 'scoring_type', 'answer_date', 'answer_datetime', 'answer_numerical_box', 'suggested_answer_ids.is_correct')
     def _compute_is_scored_question(self):
@@ -391,22 +367,10 @@ class SurveyQuestion(models.Model):
     def copy(self, default=None):
         self.ensure_one()
         clone = super().copy(default)
-        if self.is_conditional:
-            clone.is_conditional = True
-            clone.triggering_question_id = self.triggering_question_id.id
-            clone.triggering_answer_id = self.triggering_answer_id.id
+        if self.triggering_answer_ids:
+            clone.triggering_answer_ids = self.triggering_answer_ids
         return clone
 
-    def unlink(self):
-        """ Makes sure no question is left depending on the question we're deleting."""
-        depending_questions = self.env['survey.question'].search([('triggering_question_id', 'in', self.ids)])
-        depending_questions.write({
-            'is_conditional': False,
-            'triggering_question_id': False,
-            'triggering_answer_id': False,
-        })
-        return super().unlink()
-
     # ------------------------------------------------------------
     # CRUD
     # ------------------------------------------------------------
@@ -698,9 +662,12 @@ class SurveyQuestionAnswer(models.Model):
     """
     _name = 'survey.question.answer'
     _rec_name = 'value'
-    _order = 'sequence, id'
+    _rec_names_search = ['question_id.title', 'value']
+    _order = 'question_id, sequence, id'
     _description = 'Survey Label'
 
+    MAX_ANSWER_NAME_LENGTH = 90  # empirically tested in client dropdown
+
     # question and question related fields
     question_id = fields.Many2one('survey.question', string='Question', ondelete='cascade')
     matrix_question_id = fields.Many2one('survey.question', string='Question (as matrix row)', ondelete='cascade')
@@ -714,6 +681,27 @@ class SurveyQuestionAnswer(models.Model):
     is_correct = fields.Boolean('Correct')
     answer_score = fields.Float('Score', help="A positive score indicates a correct choice; a negative or null score indicates a wrong answer")
 
+    @api.depends('value', 'question_id.title')
+    def _compute_display_name(self):
+        """Render an answer name as "Question title : Answer value" making sure it is not too long.
+
+        This implementation makes sure we have at least 30 characters for the question title,
+        then we elide it, leaving the rest of the space for the answer.
+        """
+        for answer in self:
+            # _origin (or fallback title) is (likely temporarily) needed to support survey snapshot
+            # during onchange for a deleted answer used as trigger in another question.
+            title = answer._origin.question_id.title
+            n_extra_characters = len(title) + len(answer.value) + 3 - self.MAX_ANSWER_NAME_LENGTH  # 3 for `" : "`
+            if n_extra_characters <= 0:
+                answer.display_name = f'{title} : {answer.value}'
+            else:
+                answer.display_name = shorten(
+                    f'{shorten(title, max(30, len(title) - n_extra_characters), placeholder="...")} : {answer.value}',
+                    self.MAX_ANSWER_NAME_LENGTH,
+                    placeholder="..."
+                )
+
     @api.constrains('question_id', 'matrix_question_id')
     def _check_question_not_empty(self):
         """Ensure that field question_id XOR field matrix_question_id is not null"""
@@ -728,13 +716,3 @@ class SurveyQuestionAnswer(models.Model):
         elif self.question_type in ('multiple_choice', 'simple_choice'):
             return ['&', ('question_id', '=', self.question_id.id), ('suggested_answer_id', '=', self.id)]
         return []
-
-    def unlink(self):
-        """ Makes sure no question is left depending on the answer we're deleting."""
-        depending_questions = self.env['survey.question'].search([('triggering_answer_id', 'in', self.ids)])
-        depending_questions.write({
-            'is_conditional': False,
-            'triggering_question_id': False,
-            'triggering_answer_id': False,
-        })
-        return super().unlink()

--- a/addons/survey/models/survey_survey.py
+++ b/addons/survey/models/survey_survey.py
@@ -4,6 +4,8 @@
 import json
 import random
 import uuid
+from collections import defaultdict
+
 import werkzeug
 
 from odoo import api, exceptions, fields, models, _
@@ -253,12 +255,12 @@ class Survey(models.Model):
             survey.question_ids = survey.question_and_page_ids - survey.page_ids
             survey.question_count = len(survey.question_ids)
 
-    @api.depends('question_and_page_ids.is_conditional', 'users_login_required', 'access_mode')
+    @api.depends('question_and_page_ids.triggering_answer_ids', 'users_login_required', 'access_mode')
     def _compute_is_attempts_limited(self):
         for survey in self:
             if not survey.is_attempts_limited or \
                (survey.access_mode == 'public' and not survey.users_login_required) or \
-               any(question.is_conditional for question in survey.question_and_page_ids):
+               any(question.triggering_answer_ids for question in survey.question_and_page_ids):
                 survey.is_attempts_limited = False
 
     @api.depends('session_start_time', 'user_input_ids')
@@ -310,10 +312,10 @@ class Survey(models.Model):
             survey.session_show_leaderboard = survey.scoring_type != 'no_scoring' and \
                 any(question.save_as_nickname for question in survey.question_and_page_ids)
 
-    @api.depends('question_and_page_ids.is_conditional')
+    @api.depends('question_and_page_ids.triggering_answer_ids')
     def _compute_has_conditional_questions(self):
         for survey in self:
-            survey.has_conditional_questions = any(question.is_conditional for question in survey.question_and_page_ids)
+            survey.has_conditional_questions = any(question.triggering_answer_ids for question in survey.question_and_page_ids)
 
     @api.depends('scoring_type')
     def _compute_certification(self):
@@ -381,14 +383,14 @@ class Survey(models.Model):
 
     @api.returns('self', lambda value: value.id)
     def copy(self, default=None):
-        """ Correctly copy the 'triggering_question_id' and 'triggering_answer_id' fields from the original
-        to the clone.
-        This needs to be done in post-processing to make sure we get references to the newly created
-        answers/questions from the copy instead of references to the answers/questions of the original.
-        This implementation assumes that the order of created questions/answers will be kept between
+        """Correctly copy the 'triggering_answer_ids' field from the original to the clone.
+
+        This needs to be done in post-processing to make sure we get references to the newly
+        created answers from the copy instead of references to the answers of the original.
+        This implementation assumes that the order of created answers will be kept between
         the original and the clone, using 'zip()' to match the records between the two.
 
-        Note that when question_ids is provided in the default parameter, it falls back to the
+        Note that when `question_ids` is provided in the default parameter, it falls back to the
         standard copy, meaning that triggering logic will not be maintained.
         """
         self.ensure_one()
@@ -396,23 +398,18 @@ class Survey(models.Model):
         if default and 'question_ids' in default:
             return clone
 
-        src_questions = self.question_ids
-        dst_questions = clone.question_ids.sorted()
+        cloned_question_ids = clone.question_ids.sorted()
 
-        questions_map = {src.id: dst.id for src, dst in zip(src_questions, dst_questions)}
         answers_map = {
             src_answer.id: dst_answer.id
             for src, dst
-            in zip(src_questions, dst_questions)
+            in zip(self.question_ids, cloned_question_ids)
             for src_answer, dst_answer
             in zip(src.suggested_answer_ids, dst.suggested_answer_ids.sorted())
         }
-
-        for src, dst in zip(src_questions, dst_questions):
-            if src.is_conditional:
-                dst.is_conditional = True
-                dst.triggering_question_id = questions_map.get(src.triggering_question_id.id)
-                dst.triggering_answer_id = answers_map.get(src.triggering_answer_id.id)
+        for src, dst in zip(self.question_ids, cloned_question_ids):
+            if src.triggering_answer_ids:
+                dst.triggering_answer_ids = [answers_map[src_answer_id.id] for src_answer_id in src.triggering_answer_ids]
         return clone
 
     def copy_data(self, default=None):
@@ -615,22 +612,31 @@ class Survey(models.Model):
         return result
 
     def _get_pages_and_questions_to_show(self):
+        """Filter question_and_pages_ids to include only valid pages and questions.
+
+        Pages are invalid if they have no description. Questions are invalid if
+        they are conditional and all their triggers are invalid.
+        Triggers are invalid if they:
+          - Are a page (not a question)
+          - Have the wrong question type (`simple_choice` and `multiple_choice` are supported)
+          - Are misplaced (positioned after the conditional question)
+          - They are themselves conditional and were found invalid
         """
-        :return: survey.question recordset excluding invalid conditional questions and pages without description
-        """
-
         self.ensure_one()
         invalid_questions = self.env['survey.question']
         questions_and_valid_pages = self.question_and_page_ids.filtered(
             lambda question: not question.is_page or not is_html_empty(question.description))
-        for question in questions_and_valid_pages.filtered(lambda q: q.is_conditional).sorted():
-            trigger = question.triggering_question_id
-            if (trigger in invalid_questions
-                    or trigger.is_page
-                    or trigger.question_type not in ['simple_choice', 'multiple_choice']
-                    or not trigger.suggested_answer_ids
-                    or trigger.sequence > question.sequence
-                    or (trigger.sequence == question.sequence and trigger.id > question.id)):
+
+        for question in questions_and_valid_pages.filtered(lambda q: q.triggering_answer_ids).sorted():
+            for trigger in question.triggering_question_ids:
+                if (trigger not in invalid_questions
+                        and not trigger.is_page
+                        and trigger.question_type in ['simple_choice', 'multiple_choice']
+                        and (trigger.sequence < question.sequence
+                             or (trigger.sequence == question.sequence and trigger.id < question.id))):
+                    break
+            else:
+                # No valid trigger found
                 invalid_questions |= question
         return questions_and_valid_pages - invalid_questions
 
@@ -674,7 +680,7 @@ class Survey(models.Model):
             return Question
 
         # Conditional Questions Management
-        triggering_answer_by_question, triggered_questions_by_answer, selected_answers = user_input._get_conditional_values()
+        triggering_answers_by_question, _, selected_answers = user_input._get_conditional_values()
         inactive_questions = user_input._get_inactive_conditional_questions()
         if survey.questions_layout == 'page_per_question':
             question_candidates = pages_or_questions[0:current_page_index] if go_back \
@@ -687,8 +693,8 @@ class Survey(models.Model):
                     if contains_active_question or is_description_section:
                         return question
                 else:
-                    triggering_answer = triggering_answer_by_question.get(question)
-                    if not triggering_answer or triggering_answer in selected_answers:
+                    triggering_answers = triggering_answers_by_question.get(question)
+                    if not triggering_answers or triggering_answers & selected_answers:
                         # question is visible because not conditioned or conditioned by a selected answer
                         return question
         elif survey.questions_layout == 'page_per_section':
@@ -726,7 +732,7 @@ class Survey(models.Model):
         next_page_or_question_candidates = pages_or_questions[current_page_index + 1:]
         if next_page_or_question_candidates:
             inactive_questions = user_input._get_inactive_conditional_questions()
-            triggering_answer_by_question, triggered_questions_by_answer, selected_answers = user_input._get_conditional_values()
+            _, triggered_questions_by_answer, _ = user_input._get_conditional_values()
             if self.questions_layout == 'page_per_question':
                 next_active_question = any(next_question not in inactive_questions for next_question in next_page_or_question_candidates)
                 is_triggering_question = any(triggering_answer in triggered_questions_by_answer.keys() for triggering_answer in page_or_question.suggested_answer_ids)
@@ -794,17 +800,15 @@ class Survey(models.Model):
     # ------------------------------------------------------------
 
     def _get_conditional_maps(self):
-        triggering_answer_by_question = {}
-        triggered_questions_by_answer = {}
+        triggering_answers_by_question = defaultdict(lambda: self.env['survey.question.answer'])
+        triggered_questions_by_answer = defaultdict(lambda: self.env['survey.question'])
         for question in self.question_ids:
-            triggering_answer_by_question[question] = question.is_conditional and question.triggering_answer_id
+            triggering_answers_by_question[question] |= question.triggering_answer_ids
 
-            if question.is_conditional:
-                if question.triggering_answer_id in triggered_questions_by_answer:
-                    triggered_questions_by_answer[question.triggering_answer_id] |= question
-                else:
-                    triggered_questions_by_answer[question.triggering_answer_id] = question
-        return triggering_answer_by_question, triggered_questions_by_answer
+            for triggering_answer_id in question.triggering_answer_ids:
+                triggered_questions_by_answer[triggering_answer_id] |= question
+
+        return triggering_answers_by_question, triggered_questions_by_answer
 
     # ------------------------------------------------------------
     # SESSIONS MANAGEMENT

--- a/addons/survey/models/survey_user_input.py
+++ b/addons/survey/models/survey_user_input.py
@@ -536,20 +536,21 @@ class SurveyUserInput(models.Model):
                    that is the next in sequence and that is either not triggered by another question's answer, or that
                    is triggered by an already selected answer.
          To do all this, we need to return:
-            - list of all selected answers: [answer_id1, answer_id2, ...] (for survey reloading, otherwise, this list is
-              updated at client side)
+            - triggering_answers_by_question: dict -> for a given question, the answers that triggers it
+                Used mainly to ease template rendering
             - triggered_questions_by_answer: dict -> for a given answer, list of questions triggered by this answer;
                 Used mainly for dynamic show/hide behaviour at client side
-            - triggering_answer_by_question: dict -> for a given question, the answer that triggers it
-                Used mainly to ease template rendering
+            - list of all selected answers: [answer_id1, answer_id2, ...] (for survey reloading, otherwise, this list is
+              updated at client side)
         """
-        triggering_answer_by_question, triggered_questions_by_answer = {}, {}
+        triggering_answers_by_question = {}
+        triggered_questions_by_answer = {}
         # Ignore conditional configuration if randomised questions selection
         if self.survey_id.questions_selection != 'random':
-            triggering_answer_by_question, triggered_questions_by_answer = self.survey_id._get_conditional_maps()
+            triggering_answers_by_question, triggered_questions_by_answer = self.survey_id._get_conditional_maps()
         selected_answers = self._get_selected_suggested_answers()
 
-        return triggering_answer_by_question, triggered_questions_by_answer, selected_answers
+        return triggering_answers_by_question, triggered_questions_by_answer, selected_answers
 
     def _get_selected_suggested_answers(self):
         """
@@ -585,14 +586,13 @@ class SurveyUserInput(models.Model):
         answers_to_delete.unlink()
 
     def _get_inactive_conditional_questions(self):
-        triggering_answer_by_question, triggered_questions_by_answer, selected_answers = self._get_conditional_values()
+        triggering_answers_by_question, _, selected_answers = self._get_conditional_values()
 
         # get questions that should not be answered
         inactive_questions = self.env['survey.question']
-        for answer in triggered_questions_by_answer.keys():
-            if answer not in selected_answers:
-                for question in triggered_questions_by_answer[answer]:
-                    inactive_questions |= question
+        for question, triggering_answers in triggering_answers_by_question.items():
+            if triggering_answers and not triggering_answers & selected_answers:
+                inactive_questions |= question
         return inactive_questions
 
     def _get_print_questions(self):
