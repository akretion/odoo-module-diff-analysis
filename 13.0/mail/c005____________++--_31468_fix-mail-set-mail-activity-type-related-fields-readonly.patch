PR: https://github.com/odoo/odoo/pull/31468

From: 30bbfff8b43c359814b9a39221aafb5894ab7eb3
From: RomainLibert
Date: 2019-03-01 15:42:32

Structural Changes: 10
Total Changes: 10

[FIX] mail: set mail.activity.type related fields readonly

Currently it is not possible to create or write on a mail
activity without having the rights to write on mail activity type.

This is caused by the some related fields on mail activity are
not readonly hence trying to write on mail activity type

This issue was previously shadowed by a sudo call both in
the create and write methods, those disappeared
with the following commit odoo/odoo@b9c8ba83e6b367275eca28255dd7df9b8ac84aa1

As those fields should never have been defined as readonly=False,
this commit sets them to readonly=True

closes odoo/odoo#31468

Signed-off-by: "Romain Libert (rli)" <rli@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_activity.py
+++ b/addons/mail/models/mail_activity.py
@@ -130,9 +130,9 @@ class MailActivity(models.Model):
     activity_type_id = fields.Many2one(
         'mail.activity.type', string='Activity Type',
         domain="['|', ('res_model_id', '=', False), ('res_model_id', '=', res_model_id)]", ondelete='restrict')
-    activity_category = fields.Selection(related='activity_type_id.category', readonly=False)
-    activity_decoration = fields.Selection(related='activity_type_id.decoration_type', readonly=False)
-    icon = fields.Char('Icon', related='activity_type_id.icon', readonly=False)
+    activity_category = fields.Selection(related='activity_type_id.category', readonly=True)
+    activity_decoration = fields.Selection(related='activity_type_id.decoration_type', readonly=True)
+    icon = fields.Char('Icon', related='activity_type_id.icon', readonly=True)
     summary = fields.Char('Summary')
     note = fields.Html('Note')
     date_deadline = fields.Date('Due Date', index=True, required=True, default=fields.Date.context_today)
@@ -155,8 +155,8 @@ class MailActivity(models.Model):
         'Next activities available',
         compute='_compute_has_recommended_activities',
         help='Technical field for UX purpose')
-    mail_template_ids = fields.Many2many(related='activity_type_id.mail_template_ids', readonly=False)
-    force_next = fields.Boolean(related='activity_type_id.force_next', readonly=False)
+    mail_template_ids = fields.Many2many(related='activity_type_id.mail_template_ids', readonly=True)
+    force_next = fields.Boolean(related='activity_type_id.force_next', readonly=True)
     # access
     can_write = fields.Boolean(compute='_compute_can_write', help='Technical field to hide buttons if the current user has no access.')
 
