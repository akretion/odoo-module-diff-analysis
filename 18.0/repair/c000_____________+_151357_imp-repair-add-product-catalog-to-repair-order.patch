PR: https://github.com/odoo/odoo/pull/151357

From: 9a6bdfa27e3903ffe26d8b7544515aee58ceee10
From: Kamran Poladov
Date: 2024-03-18 14:11:32

Structural Changes: 2
Total Changes: 58

[IMP] repair: add product catalog to repair order

Product catalog is made accessible from Repair Orders.

Whenever BoM exists for repaired product, default filter for only BoM components is applied.

closes odoo/odoo#151357

Task: 3640422
Related: odoo/enterprise#58807
Signed-off-by: William Henrotin (whe) <whe@odoo.com>
Co-authored-by: William Henrotin <12071695+Whenrow@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/repair/models/repair.py
+++ b/addons/repair/models/repair.py
@@ -1,5 +1,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from collections import defaultdict
 from random import randint
 
 from odoo import api, Command, fields, models, _
@@ -19,7 +20,7 @@ class Repair(models.Model):
     """ Repair Orders """
     _name = 'repair.order'
     _description = 'Repair Order'
-    _inherit = ['mail.thread', 'mail.activity.mixin']
+    _inherit = ['mail.thread', 'mail.activity.mixin', 'product.catalog.mixin']
     _order = 'priority desc, create_date desc'
     _check_company_auto = True
 
@@ -584,6 +585,57 @@ class Repair(models.Model):
             else:
                 add_moves.sale_line_id._compute_price_unit()
 
+    # -------------------------------------------------------------------------
+    # CATALOG
+    # -------------------------------------------------------------------------
+
+    def action_add_from_catalog(self):
+        res = super().action_add_from_catalog()
+        if res['context'].get('product_catalog_order_model') == 'repair.order':
+            res['search_view_id'] = [self.env.ref('repair.product_view_search_catalog').id, 'search']
+        return res
+
+    def _default_order_line_values(self, child_field=False):
+        default_data = super()._default_order_line_values(child_field)
+        new_default_data = self.env['stock.move']._get_product_catalog_lines_data(parent_record=self)
+
+        return {**default_data, **new_default_data}
+
+    def _get_product_catalog_order_data(self, products, **kwargs):
+        return {product.id: self._get_product_price_and_data(product) for product in products}
+
+    def _get_product_price_and_data(self, product):
+        self.ensure_one()
+        return {'price': product.list_price}
+
+    def _get_product_catalog_record_lines(self, product_ids, **kwargs):
+        grouped_lines = defaultdict(lambda: self.env['stock.move'])
+
+        for line in self.move_ids:
+            if line.product_id.id in product_ids:
+                grouped_lines[line.product_id] |= line
+
+        return grouped_lines
+
+    def _update_order_line_info(self, product_id, quantity, **kwargs):
+        move = self.move_ids.filtered(lambda e: e.product_id.id == product_id)
+        if move:
+            if quantity != 0:
+                move.product_uom_qty = quantity
+            else:
+                move.unlink()
+        elif quantity > 0:
+            move = self.env['stock.move'].create({
+                'repair_id': self.id,
+                'product_uom_qty': quantity,
+                'product_id': product_id,
+                'location_id': self.location_id.id,
+                'location_dest_id': self.location_dest_id.id,
+                'repair_line_type': 'add'
+            })
+
+        return self.env['product.product'].browse(product_id).list_price
+
 class RepairTags(models.Model):
     """ Tags of Repair's tasks """
     _name = "repair.tags"

--- a/addons/repair/models/stock_move.py
+++ b/addons/repair/models/stock_move.py
@@ -115,6 +115,10 @@ class StockMove(models.Model):
         moves_to_create_so_line._create_repair_sale_order_line()
         return res
 
+    def action_add_from_catalog_repair(self):
+        repair_order = self.env['repair.order'].browse(self.env.context.get('order_id'))
+        return repair_order.action_add_from_catalog()
+
     # Needed to also cancel the lastly added part
     def _action_cancel(self):
         self._clean_repair_sale_order_line()
