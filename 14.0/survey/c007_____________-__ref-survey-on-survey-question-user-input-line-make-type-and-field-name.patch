PR: https://github.com/odoo/odoo/pull/

From: 0406b7049e7d00f710d38b14b5af4501387cf462
From: Thibault Delavall√©e
Date: 2019-12-05 15:21:28

Structural Changes: 5
Total Changes: 52

[REF] survey: on survey.{question,user_input.line}, make type and field names match

PURPOSE

As new features are about to land in survey, notably live interactions [1]
and new survey building [2] performing a pre cleaning is necessary. In this
PR we clean survey models by: removing unnecessary fields, cleaning some code
and finally renaming models.

SPECIFICATIONS

To better understand question type and their input type, we update some of
``survey.question`` ``question_type`` keys :

  Type----Old type-----New type

  text----free_text----text_box
  char----textbox------char_box

Untouched question types: ``numerical_box``, ``date``, ``datetime``,
``simple_choice``, ``multiple_choice``, ``matrix``. Those are already
understandable.

Then ``survey.user_input.line`` ``answer_type`` keys are also updated to
match their question type counterparts

  QuestType--------Old type-----New type

  text_box---------free_text----text_box
  char_box---------text---------char_box
  numerical_box----number-------numerical_box

Then ``survey.user_input.line`` fields used to store the value are updated to
propagate the new naming

  AnswerLineType----Old field----------New field

  text_box----------value_free_text----value_text_box
  char_box----------value_text---------value_char_box
  numerical_box-----value_number-------value_numerical_box

Untouched answer types and field storing value: ``date``, ``datetime`` still
refer to same question type and use value_date / value_datetime fields.
``simple_choice``, ``multiple_choice`` and ``matrix`` still use ``suggestion``
answer type and ``suggested_answer_id`` (+ ``matrix_row_id``) to store link
to ``survey.question.answer`` records.

LINKS

[0] Related to Task ID 2061901 (survey models cleaning and preparation)
[1] Task ID 1972640 (live interactions)
[2] Task ID 2119587 (new frontend for building surveys)

PR #40765

================================= pseudo patch: =================================

--- a/addons/survey/models/survey_question.py
+++ b/addons/survey/models/survey_question.py
@@ -44,7 +44,7 @@ class SurveyQuestion(models.Model):
     def default_get(self, fields):
         defaults = super(SurveyQuestion, self).default_get(fields)
         if (not fields or 'question_type' in fields):
-            defaults['question_type'] = False if defaults.get('is_page') == True else 'free_text'
+            defaults['question_type'] = False if defaults.get('is_page') == True else 'text_box'
         return defaults
 
     # question generic data
@@ -65,8 +65,8 @@ class SurveyQuestion(models.Model):
     # question specific
     page_id = fields.Many2one('survey.question', string='Page', compute="_compute_page_id", store=True)
     question_type = fields.Selection([
-        ('free_text', 'Multiple Lines Text Box'),
-        ('textbox', 'Single Line Text Box'),
+        ('text_box', 'Multiple Lines Text Box'),
+        ('char_box', 'Single Line Text Box'),
         ('numerical_box', 'Numerical Value'),
         ('date', 'Date'),
         ('datetime', 'Datetime'),
@@ -188,8 +188,8 @@ class SurveyQuestion(models.Model):
 
         # because in choices question types, comment can count as answer
         if answer or self.question_type in ['simple_choice', 'multiple_choice']:
-            if self.question_type == 'textbox':
-                return self._validate_textbox(answer)
+            if self.question_type == 'char_box':
+                return self._validate_char_box(answer)
             elif self.question_type == 'numerical_box':
                 return self._validate_numerical_box(answer)
             elif self.question_type in ['date', 'datetime']:
@@ -200,7 +200,7 @@ class SurveyQuestion(models.Model):
                 return self._validate_matrix(answer)
         return {}
 
-    def _validate_textbox(self, answer):
+    def _validate_char_box(self, answer):
         # Email format validation
         # all the strings of the form "<something>@<anything>.<extension>" will be accepted
         if self.validation_email:

--- a/addons/survey/models/survey_survey.py
+++ b/addons/survey/models/survey_survey.py
@@ -623,7 +623,7 @@ class Survey(models.Model):
             for input_line in input_lines:
                 if input_line.answer_type == 'suggestion' and answers.get(input_line.suggested_answer_id.id) and (not(current_filters) or input_line.user_input_id.id in current_filters):
                     answers[input_line.suggested_answer_id.id]['count'] += 1
-                if input_line.answer_type == 'text' and (not(current_filters) or input_line.user_input_id.id in current_filters):
+                if input_line.answer_type == 'char_box' and (not(current_filters) or input_line.user_input_id.id in current_filters):
                     comments.append(input_line)
             result_summary = {'answers': list(answers.values()), 'comments': comments}
 
@@ -640,12 +640,12 @@ class Survey(models.Model):
             for input_line in input_lines:
                 if input_line.answer_type == 'suggestion' and (not(current_filters) or input_line.user_input_id.id in current_filters) and input_line.matrix_row_id:
                     res[(input_line.matrix_row_id.id, input_line.suggested_answer_id.id)] += 1
-                if input_line.answer_type == 'text' and (not(current_filters) or input_line.user_input_id.id in current_filters):
+                if input_line.answer_type == 'char_box' and (not(current_filters) or input_line.user_input_id.id in current_filters):
                     comments.append(input_line)
             result_summary = {'answers': answers, 'rows': rows, 'result': res, 'comments': comments}
 
-        # Calculate and return statistics for free_text, textbox, date
-        if question.question_type in ['free_text', 'textbox', 'date', 'datetime']:
+        # Calculate and return statistics for text_box, char_box, date
+        if question.question_type in ['text_box', 'char_box', 'date', 'datetime']:
             result_summary = []
             for input_line in input_lines:
                 if not(current_filters) or input_line.user_input_id.id in current_filters:
@@ -657,7 +657,7 @@ class Survey(models.Model):
             all_inputs = []
             for input_line in input_lines:
                 if not(current_filters) or input_line.user_input_id.id in current_filters:
-                    all_inputs.append(input_line.value_number)
+                    all_inputs.append(input_line.value_numerical_box)
                     result_summary['input_lines'].append(input_line)
             if all_inputs:
                 result_summary.update({'average': round(sum(all_inputs) / len(all_inputs), 2),

--- a/addons/survey/models/survey_user.py
+++ b/addons/survey/models/survey_user.py
@@ -194,17 +194,17 @@ class SurveyUserInputLine(models.Model):
     # answer
     skipped = fields.Boolean('Skipped')
     answer_type = fields.Selection([
-        ('text', 'Text'),
-        ('number', 'Number'),
+        ('text_box', 'Free Text'),
+        ('char_box', 'Text'),
+        ('numerical_box', 'Number'),
         ('date', 'Date'),
         ('datetime', 'Datetime'),
-        ('free_text', 'Free Text'),
         ('suggestion', 'Suggestion')], string='Answer Type')
-    value_text = fields.Char('Text answer')
-    value_number = fields.Float('Numerical answer')
+    value_char_box = fields.Char('Text answer')
+    value_numerical_box = fields.Float('Numerical answer')
     value_date = fields.Date('Date answer')
     value_datetime = fields.Datetime('Datetime answer')
-    value_free_text = fields.Text('Free Text answer')
+    value_text_box = fields.Text('Free Text answer')
     suggested_answer_id = fields.Many2one('survey.question.answer', string="Suggested answer")
     matrix_row_id = fields.Many2one('survey.question.answer', string="Row answer")
     answer_score = fields.Float('Score')
@@ -228,10 +228,10 @@ class SurveyUserInputLine(models.Model):
     def _check_answer_type(self):
         for uil in self:
             fields_type = {
-                'text': bool(uil.value_text),
-                'number': (bool(uil.value_number) or uil.value_number == 0),
+                'char_box': bool(uil.value_char_box),
+                'numerical_box': (bool(uil.value_numerical_box) or uil.value_numerical_box == 0),
                 'date': bool(uil.value_date),
-                'free_text': bool(uil.value_free_text),
+                'text_box': bool(uil.value_text_box),
                 'suggestion': bool(uil.suggested_answer_id)
             }
             if not fields_type.get(uil.answer_type, True):
@@ -256,7 +256,7 @@ class SurveyUserInputLine(models.Model):
             return {'answer_type': None, 'skipped': True}
         if answer_type == 'suggestion':
             return {'answer_type': answer_type, 'suggested_answer_id': answer}
-        value = float(answer) if answer_type == 'number' else answer
+        value = float(answer) if answer_type == 'numerical_box' else answer
         return {'answer_type': answer_type, 'value_' + answer_type: value}
 
     @api.model
@@ -278,7 +278,7 @@ class SurveyUserInputLine(models.Model):
             ('question_id', '=', question.id)
         ])
 
-        if question.question_type in ['textbox', 'free_text', 'numerical_box', 'date', 'datetime']:
+        if question.question_type in ['char_box', 'text_box', 'numerical_box', 'date', 'datetime']:
             self._save_line_simple_answer(vals, old_answers, question, answer)
         elif question.question_type in ['simple_choice', 'multiple_choice']:
             self._save_line_choice(vals, old_answers, question, answer, comment)
@@ -290,10 +290,6 @@ class SurveyUserInputLine(models.Model):
     @api.model
     def _save_line_simple_answer(self, vals, old_answers, question, answer):
         answer_type = question.question_type
-        if question.question_type == 'textbox':
-            answer_type = 'text'
-        elif question.question_type == 'numerical_box':
-            answer_type = 'number'
 
         vals.update(self._get_save_line_values(answer, answer_type))
         if old_answers:
@@ -319,7 +315,7 @@ class SurveyUserInputLine(models.Model):
                 vals_list.append(vals.copy())
 
         if comment:
-            vals.update({'answer_type': 'text', 'value_text': comment, 'skipped': False, 'suggested_answer_id': False})
+            vals.update({'answer_type': 'char_box', 'value_char_box': comment, 'skipped': False, 'suggested_answer_id': False})
             vals_list.append(vals.copy())
 
         old_answers.sudo().unlink()
@@ -337,7 +333,7 @@ class SurveyUserInputLine(models.Model):
                 vals_list.append(vals.copy())
 
         if comment:
-            vals.update({'answer_type': 'text', 'value_text': comment, 'skipped': False, 'suggested_answer_id': False})
+            vals.update({'answer_type': 'char_box', 'value_char_box': comment, 'skipped': False, 'suggested_answer_id': False})
             vals_list.append(vals.copy())
 
         old_answers.sudo().unlink()
