PR: https://github.com/odoo/odoo/pull/104741

From: 5419d0ef7a6b2a81e608e1798aaa471f902ad995
From: Gorash
Date: 2023-08-18 07:49:10

Structural Changes: 15.8
Total Changes: 39

[REF] base,all: Update modifier syntax: clean fields keys

Part-of: odoo/odoo#104741

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_mail.py
+++ b/addons/mail/models/mail_mail.py
@@ -46,7 +46,7 @@ class MailMail(models.Model):
     mail_message_id_int = fields.Integer(compute='_compute_mail_message_id_int', compute_sudo=True)
     body_html = fields.Text('Text Contents', help="Rich-text/HTML message")
     body_content = fields.Html('Rich-text Contents', sanitize=True, compute='_compute_body_content', search="_search_body_content")
-    references = fields.Text('References', help='Message references, such as identifiers of previous messages', readonly=1)
+    references = fields.Text('References', help='Message references, such as identifiers of previous messages', readonly=True)
     headers = fields.Text('Headers', copy=False)
     restricted_attachment_count = fields.Integer('Restricted attachments', compute='_compute_restricted_attachments')
     unrestricted_attachment_ids = fields.Many2many('ir.attachment', string='Unrestricted Attachments',
@@ -81,7 +81,7 @@ class MailMail(models.Model):
         ("mail_dup", "Duplicated Email"),
         ], string='Failure type')
     failure_reason = fields.Text(
-        'Failure Reason', readonly=1, copy=False,
+        'Failure Reason', readonly=True, copy=False,
         help="Failure reason. This is usually the exception thrown by the email server, stored to ease the debugging of mailing issues.")
     auto_delete = fields.Boolean(
         'Auto Delete',

--- a/addons/mail/models/mail_message.py
+++ b/addons/mail/models/mail_message.py
@@ -163,7 +163,7 @@ class Message(models.Model):
     reply_to_force_new = fields.Boolean(
         'No threading for answers',
         help='If true, answers do not go in the original document discussion thread. Instead, it will check for the reply_to in tracking message-id and redirected accordingly. This has an impact on the generated message-id.')
-    message_id = fields.Char('Message-Id', help='Message unique identifier', index='btree', readonly=1, copy=False)
+    message_id = fields.Char('Message-Id', help='Message unique identifier', index='btree', readonly=True, copy=False)
     reply_to = fields.Char('Reply-To', help='Reply email address. Setting the reply_to bypasses the automatic thread creation.')
     mail_server_id = fields.Many2one('ir.mail_server', 'Outgoing mail server')
     # keep notification layout informations to be able to generate mail again

--- a/addons/mail/models/mail_thread_blacklist.py
+++ b/addons/mail/models/mail_thread_blacklist.py
@@ -31,8 +31,7 @@ class MailBlackListMixin(models.AbstractModel):
     _primary_email = 'email'
 
     email_normalized = fields.Char(
-        string='Normalized Email', compute="_compute_email_normalized", compute_sudo=True,
-        store=True, invisible=True,
+        string='Normalized Email', compute="_compute_email_normalized", compute_sudo=True, store=True,
         help="This field is used to search on email address as the primary email field can contain more than strictly an email address.")
     # Note : is_blacklisted sould only be used for display. As the compute is not depending on the blacklist,
     # once read, it won't be re-computed again if the blacklist is modified in the same request.

--- a/addons/mail/models/mail_tracking_value.py
+++ b/addons/mail/models/mail_tracking_value.py
@@ -12,31 +12,31 @@ class MailTracking(models.Model):
     _rec_name = 'field'
     _order = 'tracking_sequence asc'
 
-    field = fields.Many2one('ir.model.fields', required=True, readonly=1, index=True, ondelete='cascade')
-    field_desc = fields.Char('Field Description', required=True, readonly=1)
+    field = fields.Many2one('ir.model.fields', required=True, readonly=True, index=True, ondelete='cascade')
+    field_desc = fields.Char('Field Description', required=True, readonly=True)
     field_type = fields.Char('Field Type')
     field_groups = fields.Char(compute='_compute_field_groups')
 
-    old_value_integer = fields.Integer('Old Value Integer', readonly=1)
-    old_value_float = fields.Float('Old Value Float', readonly=1)
-    old_value_monetary = fields.Float('Old Value Monetary', readonly=1)
-    old_value_char = fields.Char('Old Value Char', readonly=1)
-    old_value_text = fields.Text('Old Value Text', readonly=1)
-    old_value_datetime = fields.Datetime('Old Value DateTime', readonly=1)
+    old_value_integer = fields.Integer('Old Value Integer', readonly=True)
+    old_value_float = fields.Float('Old Value Float', readonly=True)
+    old_value_monetary = fields.Float('Old Value Monetary', readonly=True)
+    old_value_char = fields.Char('Old Value Char', readonly=True)
+    old_value_text = fields.Text('Old Value Text', readonly=True)
+    old_value_datetime = fields.Datetime('Old Value DateTime', readonly=True)
 
-    new_value_integer = fields.Integer('New Value Integer', readonly=1)
-    new_value_float = fields.Float('New Value Float', readonly=1)
-    new_value_monetary = fields.Float('New Value Monetary', readonly=1)
-    new_value_char = fields.Char('New Value Char', readonly=1)
-    new_value_text = fields.Text('New Value Text', readonly=1)
-    new_value_datetime = fields.Datetime('New Value Datetime', readonly=1)
+    new_value_integer = fields.Integer('New Value Integer', readonly=True)
+    new_value_float = fields.Float('New Value Float', readonly=True)
+    new_value_monetary = fields.Float('New Value Monetary', readonly=True)
+    new_value_char = fields.Char('New Value Char', readonly=True)
+    new_value_text = fields.Text('New Value Text', readonly=True)
+    new_value_datetime = fields.Datetime('New Value Datetime', readonly=True)
 
     currency_id = fields.Many2one('res.currency', 'Currency', readonly=True, ondelete='set null',
         help="Used to display the currency when tracking monetary values")
 
     mail_message_id = fields.Many2one('mail.message', 'Message ID', required=True, index=True, ondelete='cascade')
 
-    tracking_sequence = fields.Integer('Tracking field sequence', readonly=1, default=100)
+    tracking_sequence = fields.Integer('Tracking field sequence', readonly=True, default=100)
 
     @api.depends('mail_message_id', 'field')
     def _compute_field_groups(self):
