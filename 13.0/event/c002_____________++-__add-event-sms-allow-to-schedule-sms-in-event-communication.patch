PR: https://github.com/odoo/odoo/pull/

From: 62ac23f0b93f05125f5067139898d81ede567130
From: Thibault Delavall√©e
Date: 2019-07-25 11:47:20

Structural Changes: 9
Total Changes: 22

[ADD] event_sms: allow to schedule SMS in event communication

PURPOSE

Allow the user to schedule SMS communication on events

SPECIFICATION

In event.event form view:
  * rename tab 'Email Schedule' to 'Communication'
  * add a selection field at the beginning of event_mail_ids with label 'Send'
    and values 'Email' and 'SMS Text Message' (required with default value
    'Email');
  * add support of SMS template and SMS sending in event communication;

When sending SMS on event registrations, keep a log of what has been sent.
Use mobile or phone field of event registration as both may contain valid
values, like partner model.

Add SMS template data
  * Name: Event: Registration (see data)
  * Name: Event: Reminder (see data)

Improve registration model
  * add a mobile field to the attendees form view: https://nimb.ws/p0VvyS

Technically this task uses the newly-introduced API methods allowing to
send and schedule SMS.

LINKS

Task 1922187
Part of PR #34705

================================= pseudo patch: =================================

--- a/addons/event/models/event.py
+++ b/addons/event/models/event.py
@@ -364,15 +364,22 @@ class EventRegistration(models.Model):
     _inherit = ['mail.thread', 'mail.activity.mixin']
     _order = 'name, create_date desc'
 
+    # event
     origin = fields.Char(
         string='Source Document', readonly=True,
         help="Reference of the document that created the registration, for example a sales order")
     event_id = fields.Many2one(
         'event.event', string='Event', required=True,
         readonly=True, states={'draft': [('readonly', False)]})
+    # attendee
     partner_id = fields.Many2one(
         'res.partner', string='Contact',
         states={'done': [('readonly', True)]})
+    name = fields.Char(string='Attendee Name', index=True)
+    email = fields.Char(string='Email')
+    phone = fields.Char(string='Phone')
+    mobile = fields.Char(string='Mobile')
+    # organization
     date_open = fields.Datetime(string='Registration Date', readonly=True, default=lambda self: fields.Datetime.now())  # weird crash is directly now
     date_closed = fields.Datetime(string='Attended Date', readonly=True)
     event_begin_date = fields.Datetime(string="Event Start Date", related='event_id.date_begin', readonly=True)
@@ -384,9 +391,6 @@ class EventRegistration(models.Model):
         ('draft', 'Unconfirmed'), ('cancel', 'Cancelled'),
         ('open', 'Confirmed'), ('done', 'Attended')],
         string='Status', default='draft', readonly=True, copy=False, tracking=True)
-    email = fields.Char(string='Email')
-    phone = fields.Char(string='Phone')
-    name = fields.Char(string='Attendee Name', index=True)
 
     @api.constrains('event_id', 'state')
     def _check_seats_limit(self):
@@ -421,6 +425,7 @@ class EventRegistration(models.Model):
         data = {
             'name': registration.get('name', partner_id.name),
             'phone': registration.get('phone', partner_id.phone),
+            'mobile': registration.get('mobile', partner_id.mobile),
             'email': registration.get('email', partner_id.email),
             'partner_id': partner_id.id,
             'event_id': event_id and event_id.id or False,
@@ -462,6 +467,7 @@ class EventRegistration(models.Model):
                 self.name = contact.name or self.name
                 self.email = contact.email or self.email
                 self.phone = contact.phone or self.phone
+                self.mobile = contact.mobile or self.mobile
 
     def _message_get_suggested_recipients(self):
         recipients = super(EventRegistration, self)._message_get_suggested_recipients()

--- a/addons/event/models/event_mail.py
+++ b/addons/event/models/event_mail.py
@@ -29,6 +29,7 @@ class EventTypeMail(models.Model):
     event_type_id = fields.Many2one(
         'event.type', string='Event Type',
         ondelete='cascade', required=True)
+    notification_type = fields.Selection([('mail', 'Mail')], string='Send', default='mail', required=True)
     interval_nbr = fields.Integer('Interval', default=1)
     interval_unit = fields.Selection([
         ('now', 'Immediately'),
@@ -42,7 +43,7 @@ class EventTypeMail(models.Model):
         string='Trigger', default="before_event", required=True)
     template_id = fields.Many2one(
         'mail.template', string='Email Template',
-        domain=[('model', '=', 'event.registration')], required=True, ondelete='restrict',
+        domain=[('model', '=', 'event.registration')], ondelete='restrict',
         help='This field contains the template of the mail that will be automatically sent')
 
 
@@ -56,6 +57,7 @@ class EventMailScheduler(models.Model):
 
     event_id = fields.Many2one('event.event', string='Event', required=True, ondelete='cascade')
     sequence = fields.Integer('Display order')
+    notification_type = fields.Selection([('mail', 'Mail')], string='Send', default='mail', required=True)
     interval_nbr = fields.Integer('Interval', default=1)
     interval_unit = fields.Selection([
         ('now', 'Immediately'),
@@ -69,7 +71,7 @@ class EventMailScheduler(models.Model):
         string='Trigger ', default="before_event", required=True)
     template_id = fields.Many2one(
         'mail.template', string='Email Template',
-        domain=[('model', '=', 'event.registration')], required=True, ondelete='restrict',
+        domain=[('model', '=', 'event.registration')], ondelete='restrict',
         help='This field contains the template of the mail that will be automatically sent')
     scheduled_date = fields.Datetime('Scheduled Sent Mail', compute='_compute_scheduled_date', store=True)
     mail_registration_ids = fields.One2many('event.mail.registration', 'scheduler_id')
@@ -113,7 +115,7 @@ class EventMailScheduler(models.Model):
                 mail.mail_registration_ids.filtered(lambda reg: reg.scheduled_date and reg.scheduled_date <= now).execute()
             else:
                 # Do not send emails if the mailing was scheduled before the event but the event is over
-                if not mail.mail_sent and (mail.interval_type != 'before_event' or mail.event_id.date_end > now):
+                if not mail.mail_sent and (mail.interval_type != 'before_event' or mail.event_id.date_end > now) and mail.notification_type == 'mail':
                     mail.event_id.mail_attendees(mail.template_id.id)
                     mail.write({'mail_sent': True})
         return True
@@ -180,7 +182,7 @@ class EventMailRegistration(models.Model):
 
     def execute(self):
         for mail in self:
-            if mail.registration_id.state in ['open', 'done'] and not mail.mail_sent:
+            if mail.registration_id.state in ['open', 'done'] and not mail.mail_sent and mail.scheduler_id.notification_type == 'mail':
                 mail.scheduler_id.template_id.send_mail(mail.registration_id.id)
                 mail.write({'mail_sent': True})
 
