PR: https://github.com/odoo/odoo/pull/

From: 2ac5888a8d1f8b2bac89314be1e846106c077cca
From: Akash Bhavsar
Date: 2018-01-17 08:34:18

Structural Changes: 16
Total Changes: 57

[IMP] hr_timesheet: hour fields calculation

This commit aims to improve duration field calculation
with subtask. So this commit :

- provides `subtask_planned_hours`as the total of planned our from
children tasks
- removes useless/unclear fields : delay_hours and total_hours
- makes progress computation independent from the stage (before,
progress
of task in fold stage was 100%)
- split the `hour_get` compute method into smaller ones in order to
improve
performances and code readability.
- makes 'progress' and subtask effective hours not including allocated
hours

Task: 38498

================================= pseudo patch: =================================

--- a/addons/hr_timesheet/models/project.py
+++ b/addons/hr_timesheet/models/project.py
@@ -1,8 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import models, fields, api, _
-from odoo.exceptions import UserError
+from odoo import models, fields, api
 
 
 class Project(models.Model):
@@ -14,38 +13,32 @@ class Project(models.Model):
 class Task(models.Model):
     _inherit = "project.task"
 
-    @api.depends('stage_id', 'timesheet_ids.unit_amount', 'planned_hours', 'child_ids.stage_id',
-                 'child_ids.planned_hours', 'child_ids.effective_hours', 'child_ids.children_hours', 'child_ids.timesheet_ids.unit_amount')
-    def _hours_get(self):
-        for task in self.sorted(key='id', reverse=True):
-            children_hours = 0
-            for child_task in task.child_ids:
-                if child_task.stage_id and child_task.stage_id.fold:
-                    children_hours += child_task.effective_hours + child_task.children_hours
-                else:
-                    children_hours += max(child_task.planned_hours, child_task.effective_hours + child_task.children_hours)
-
-            task.children_hours = children_hours
-            task.effective_hours = sum(task.sudo().timesheet_ids.mapped('unit_amount'))  # use 'sudo' here to allow project user (without timesheet user right) to create task
-            task.remaining_hours = task.planned_hours - task.effective_hours - task.children_hours
-            task.total_hours = max(task.planned_hours, task.effective_hours)
-            task.total_hours_spent = task.effective_hours + task.children_hours
-            task.delay_hours = max(-task.remaining_hours, 0.0)
-
-            if task.stage_id and task.stage_id.fold:
-                task.progress = 100.0
-            elif (task.planned_hours > 0.0):
-                task.progress = round(100.0 * (task.effective_hours + task.children_hours) / task.planned_hours, 2)
+    remaining_hours = fields.Float("Remaining Hours", compute='_compute_progress_hours', store=True, help="Total remaining time, can be re-estimated periodically by the assignee of the task.")
+    effective_hours = fields.Float("Hours Spent", compute='_compute_effective_hours', compute_sudo=True, store=True, help="Computed using the sum of the task work done.")
+    total_hours_spent = fields.Float("Total Hours", compute='_compute_progress_hours', store=True, help="Computed as: Time Spent + Sub-tasks Hours.")
+    progress = fields.Float("Progress", compute='_compute_progress_hours', store=True, group_operator="avg", help="Display progress of current task. In case if the total spent hours exceeds planned hours then the progress bar may go above 100%")
+    subtask_effective_hours = fields.Float("Sub-tasks Hours Spent", compute='_compute_subtask_effective_hours', store=True, help="Sum of actually spent hours on the subtask(s)", oldname='children_hours')
+    timesheet_ids = fields.One2many('account.analytic.line', 'task_id', 'Timesheets')
+
+    @api.depends('timesheet_ids.unit_amount')
+    def _compute_effective_hours(self):
+        for task in self:
+            task.effective_hours = sum(task.timesheet_ids.mapped('unit_amount'))
+
+    @api.depends('effective_hours', 'subtask_effective_hours', 'planned_hours')
+    def _compute_progress_hours(self):
+        for task in self:
+            if (task.planned_hours > 0.0):
+                task.progress = round(100.0 * (task.effective_hours + task.subtask_effective_hours) / task.planned_hours, 2)
             else:
                 task.progress = 0.0
 
-    remaining_hours = fields.Float(compute='_hours_get', store=True, string='Remaining Hours', help="Total remaining time, can be re-estimated periodically by the assignee of the task.")
-    effective_hours = fields.Float(compute='_hours_get', store=True, string='Hours Spent', help="Computed using the sum of the task work done.")
-    total_hours = fields.Float(compute='_hours_get', store=True, string='Total', help="Computed as: Time Spent + Remaining Time.")
-    total_hours_spent = fields.Float(compute='_hours_get', store=True, string='Total Hours', help="Computed as: Time Spent + Sub-tasks Hours.")
-    progress = fields.Float(compute='_hours_get', store=True, string='Progress', group_operator="avg")
-    delay_hours = fields.Float(compute='_hours_get', store=True, string='Delay Hours', help="Computed as difference between planned hours by the project manager and the total hours of the task.")
-    children_hours = fields.Float(compute='_hours_get', store=True, string='Sub-tasks Hours', help="Sum of the planned hours of all sub-tasks (when a sub-task is closed or its spent hours exceed its planned hours, spent hours are counted instead)")
-    timesheet_ids = fields.One2many('account.analytic.line', 'task_id', 'Timesheets')
+            task.remaining_hours = task.planned_hours - task.effective_hours - task.subtask_effective_hours
+            task.total_hours_spent = task.effective_hours + task.subtask_effective_hours
+
+    @api.depends('child_ids.effective_hours', 'child_ids.subtask_effective_hours')
+    def _compute_subtask_effective_hours(self):
+        for task in self:
+            task.subtask_effective_hours = sum(child_task.effective_hours + child_task.subtask_effective_hours for child_task in task.child_ids)
 
     _constraints = [(models.BaseModel._check_recursion, 'Circular references are not permitted between tasks and sub-tasks', ['parent_id'])]
