PR: https://github.com/odoo/odoo/pull/

From: 60d9f6fef9e15c96cb710a17318a56c1cc1c33dc
From: Raphael Collet
Date: 2017-08-28 07:53:23

Structural Changes: 5
Total Changes: 389

[ADD] base: model `ir.default` to store user-defined defaults

================================= pseudo patch: =================================

--- a/odoo/addons/base/__manifest__.py
+++ b/odoo/addons/base/__manifest__.py
@@ -33,6 +33,7 @@ The kernel of Odoo, needed for all installation.
         'ir/ir_ui_menu_view.xml',
         'ir/ir_ui_view_view.xml',
         'ir/ir_values_view.xml',
+        'ir/ir_default_view.xml',
         'ir/ir_autovacuum.xml',
         'ir/ir_model_report.xml',
         'ir/report_ir_model.xml',

--- a/odoo/addons/base/ir/__init__.py
+++ b/odoo/addons/base/ir/__init__.py
@@ -11,6 +11,7 @@ from . import ir_attachment
 from . import ir_cron
 from . import ir_filters
 from . import ir_values
+from . import ir_default
 from . import ir_translation
 from . import ir_exports
 from . import ir_rule

--- a/None
+++ b/odoo/addons/base/ir/ir_default.py
@@ -0,0 +1,170 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import json
+
+from odoo import api, fields, models, tools, _
+from odoo.exceptions import ValidationError
+
+
+class IrDefault(models.Model):
+    """ User-defined default values for fields. """
+    _name = 'ir.default'
+    _rec_name = 'field_id'
+
+    field_id = fields.Many2one('ir.model.fields', string="Field", required=True,
+                               ondelete='cascade', index=True)
+    user_id = fields.Many2one('res.users', string='User', ondelete='cascade', index=True,
+                              help="If set, action binding only applies for this user.")
+    company_id = fields.Many2one('res.company', string='Company', ondelete='cascade', index=True,
+                                 help="If set, action binding only applies for this company")
+    condition = fields.Char('Condition', help="If set, applies the default upon condition.")
+    json_value = fields.Char('Default Value (JSON format)', required=True)
+
+    @api.model
+    def create(self, vals):
+        self.clear_caches()
+        return super(IrDefault, self).create(vals)
+
+    @api.multi
+    def write(self, vals):
+        if self:
+            self.clear_caches()
+        return super(IrDefault, self).write(vals)
+
+    @api.multi
+    def unlink(self):
+        if self:
+            self.clear_caches()
+        return super(IrDefault, self).unlink()
+
+    @api.model
+    def set(self, model_name, field_name, value, user_id=False, company_id=False, condition=False):
+        """ Defines a default value for the given field. Any entry for the same
+            scope (field, user, company) will be replaced. The value is encoded
+            in JSON to be stored to the database.
+
+            :param user_id: may be ``False`` for all users, ``True`` for the
+                            current user, or any user id
+            :param company_id: may be ``False`` for all companies, ``True`` for
+                               the current user's company, or any company id
+            :param condition: optional condition that restricts the
+                              applicability of the default value; this is an
+                              opaque string, but the client typically uses
+                              single-field conditions in the form ``'key=val'``.
+        """
+        if user_id is True:
+            user_id = self.env.uid
+        if company_id is True:
+            company_id = self.env.user.company_id.id
+
+        # check consistency of model_name, field_name, and value
+        try:
+            model = self.env[model_name]
+            field = model._fields[field_name]
+            field.convert_to_cache(value, model)
+            json_value = json.dumps(value, ensure_ascii=False)
+        except KeyError:
+            raise ValidationError(_("Invalid field %s.%s") % (model_name, field_name))
+        except Exception:
+            raise ValidationError(_("Invalid value for %s.%s: %s") % (model_name, field_name, value))
+
+        # update existing default for the same scope, or create one
+        field = self.env['ir.model.fields']._get(model_name, field_name)
+        default = self.search([
+            ('field_id', '=', field.id),
+            ('user_id', '=', user_id),
+            ('company_id', '=', company_id),
+            ('condition', '=', condition),
+        ])
+        if default:
+            default.write({'json_value': json_value})
+        else:
+            self.create({
+                'field_id': field.id,
+                'user_id': user_id,
+                'company_id': company_id,
+                'condition': condition,
+                'json_value': json_value,
+            })
+        return True
+
+    @api.model
+    def get(self, model_name, field_name, user_id=False, company_id=False, condition=False):
+        """ Return the default value for the given field, user and company, or
+            ``None`` if no default is available.
+
+            :param user_id: may be ``False`` for all users, ``True`` for the
+                            current user, or any user id
+            :param company_id: may be ``False`` for all companies, ``True`` for
+                               the current user's company, or any company id
+            :param condition: optional condition that restricts the
+                              applicability of the default value; this is an
+                              opaque string, but the client typically uses
+                              single-field conditions in the form ``'key=val'``.
+        """
+        if user_id is True:
+            user_id = self.env.uid
+        if company_id is True:
+            company_id = self.env.user.company_id.id
+
+        field = self.env['ir.model.fields']._get(model_name, field_name)
+        default = self.search([
+            ('field_id', '=', field.id),
+            ('user_id', '=', user_id),
+            ('company_id', '=', company_id),
+            ('condition', '=', condition),
+        ], limit=1)
+        return json.loads(default.json_value) if default else None
+
+    @api.model
+    @tools.ormcache('self.env.uid', 'model_name', 'condition')
+    # Note about ormcache invalidation: it is not needed when deleting a field,
+    # a user, or a company, as the corresponding defaults will no longer be
+    # requested. It must only be done when a user's company is modified.
+    def get_model_defaults(self, model_name, condition=False):
+        """ Return the available default values for the given model (for the
+            current user), as a dict mapping field names to values.
+        """
+        cr = self.env.cr
+        query = """ SELECT f.name, d.json_value FROM ir_default d
+                    JOIN ir_model_fields f ON d.field_id=f.id
+                    JOIN res_users u ON u.id=%s
+                    WHERE f.model=%s
+                        AND (d.user_id IS NULL OR d.user_id=u.id)
+                        AND (d.company_id IS NULL OR d.company_id=u.company_id)
+                        AND {}
+                    ORDER BY d.user_id, d.company_id, d.id
+                """
+        params = [self.env.uid, model_name]
+        if condition:
+            query = query.format("d.condition=%s")
+            params.append(condition)
+        else:
+            query = query.format("d.condition IS NULL")
+        cr.execute(query, params)
+        result = {}
+        for row in cr.fetchall():
+            # keep the highest priority default for each field
+            if row[0] not in result:
+                result[row[0]] = json.loads(row[1])
+        return result
+
+    @api.model
+    def discard_records(self, records):
+        """ Discard all the defaults of many2one fields using any of the given
+            records.
+        """
+        json_vals = [json.dumps(id) for id in records.ids]
+        domain = [('field_id.ttype', '=', 'many2one'),
+                  ('field_id.relation', '=', records._name),
+                  ('json_value', 'in', json_vals)]
+        return self.search(domain).unlink()
+
+    @api.model
+    def discard_values(self, model_name, field_name, values):
+        """ Discard all the defaults for any of the given values. """
+        field = self.env['ir.model.fields']._get(model_name, field_name)
+        json_vals = [json.dumps(value, ensure_ascii=False) for value in values]
+        domain = [('field_id', '=', field.id), ('json_value', 'in', json_vals)]
+        return self.search(domain).unlink()

--- a/None
+++ b/odoo/addons/base/ir/ir_default_view.xml
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="utf-8"?>
+<odoo>
+
+    <record id="ir_default_form_view" model="ir.ui.view">
+        <field name="name">ir.default form view</field>
+        <field name="model">ir.default</field>
+        <field name="arch" type="xml">
+            <form string="User-defined Defaults">
+                <group>
+                    <group>
+                        <field name="field_id"/>
+                        <field name="json_value"/>
+                    </group>
+                    <group>
+                        <field name="user_id"/>
+                        <field name="company_id" groups="base.group_multi_company"/>
+                    </group>
+                </group>
+            </form>
+        </field>
+    </record>
+
+    <record id="ir_default_tree_view" model="ir.ui.view">
+        <field name="name">ir.default tree view</field>
+        <field name="model">ir.default</field>
+        <field name="arch" type="xml">
+            <tree string="User-defined Defaults">
+                <field name="field_id"/>
+                <field name="json_value"/>
+                <field name="user_id"/>
+                <field name="company_id" groups="base.group_multi_company"/>
+            </tree>
+        </field>
+    </record>
+
+    <record id="ir_default_search_view" model="ir.ui.view">
+        <field name="name">ir.default search view</field>
+        <field name="model">ir.default</field>
+        <field name="arch" type="xml">
+            <search string="User-defined Defaults">
+                <field name="field_id"/>
+                <field name="user_id"/>
+                <field name="company_id" groups="base.group_multi_company"/>
+                <group expand="0" string="Group By">
+                    <filter string="User" domain="[]" context="{'group_by':'user_id'}"/>
+                    <filter string="Company" domain="[]" context="{'group_by':'company_id'}"/>
+                </group>
+            </search>
+        </field>
+    </record>
+
+    <record id="ir_default_menu_action" model="ir.actions.act_window">
+        <field name="name">User-defined Defaults</field>
+        <field name="type">ir.actions.act_window</field>
+        <field name="res_model">ir.default</field>
+        <field name="view_type">form</field>
+        <field name="view_mode">tree,form</field>
+        <field name="search_view_id" ref="ir_default_search_view"/>
+    </record>
+    <menuitem action="ir_default_menu_action" id="ir_default_menu" parent="next_id_6"/>
+
+</odoo>

--- a/odoo/addons/base/res/res_config.py
+++ b/odoo/addons/base/res/res_config.py
@@ -469,14 +469,14 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
 
     @api.model
     def default_get(self, fields):
-        IrValues = self.env['ir.values']
+        IrDefault = self.env['ir.default']
         classified = self._get_classified_fields()
 
         res = super(ResConfigSettings, self).default_get(fields)
 
         # defaults: take the corresponding default value they set
         for name, model, field in classified['default']:
-            value = IrValues.get_default(model, field)
+            value = IrDefault.get(model, field)
             if value is not None:
                 res[name] = value
 
@@ -517,7 +517,7 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
         classified = self._get_classified_fields()
 
         # default values fields
-        IrValues = self.env['ir.values'].sudo()
+        IrDefault = self.env['ir.default'].sudo()
         for name, model, field in classified['default']:
             if isinstance(self[name], models.BaseModel):
                 if self._fields[name].type == 'many2one':
@@ -526,7 +526,7 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
                     value = self[name].ids
             else:
                 value = self[name]
-            IrValues.set_default(model, field, value)
+            IrDefault.set(model, field, value)
 
         # group fields: modify group / implied groups
         for name, groups, implied_group in classified['group']:

--- a/odoo/addons/base/res/res_lang.py
+++ b/odoo/addons/base/res/res_lang.py
@@ -163,10 +163,10 @@ class Lang(models.Model):
         lang = self.search([('code', '=', lang_code)])
         if not lang:
             self.load_lang(lang_code)
-        IrValues = self.env['ir.values']
-        default_value = IrValues.get_defaults('res.partner', condition=False)
-        if not default_value:
-            IrValues.set_default('res.partner', 'lang', lang_code, condition=False)
+        IrDefault = self.env['ir.default']
+        default_value = IrDefault.get('res.partner', 'lang')
+        if default_value is None:
+            IrDefault.set('res.partner', 'lang', lang_code)
             # set language of main company, created directly by db bootstrap SQL
             partner = self.env.user.company_id.partner_id
             if not partner.lang:
@@ -219,13 +219,8 @@ class Lang(models.Model):
         if vals.get('active') == False:
             if self.env['res.users'].search([('lang', 'in', lang_codes)]):
                 raise UserError(_("Cannot unactivate a language that is currently used by users."))
-            # delete linked ir.value specifying default partner's language
-            default_lang = self.env['ir.values'].search([
-                ('key', '=', 'default'),
-                ('name', '=', 'lang'),
-                ('model', '=', 'res.partner')])
-            if default_lang and default_lang.value_unpickle in lang_codes:
-                default_lang.unlink()
+            # delete linked ir.default specifying default partner's language
+            self.env['ir.default'].discard_values('res.partner', 'lang', lang_codes)
 
         res = super(Lang, self).write(vals)
         self.clear_caches()

--- a/odoo/addons/base/res/res_users.py
+++ b/odoo/addons/base/res/res_users.py
@@ -355,7 +355,7 @@ class Users(models.Model):
                 if user.partner_id.company_id and user.partner_id.company_id.id != values['company_id']:
                     user.partner_id.write({'company_id': user.company_id.id})
             # clear default ir values when company changes
-            self.env['ir.values'].get_defaults_dict.clear_cache(self.env['ir.values'])
+            self.env['ir.default'].clear_caches()
 
         # clear caches linked to the users
         if 'groups_id' in values:

--- a/odoo/addons/base/security/base_security.xml
+++ b/odoo/addons/base/security/base_security.xml
@@ -111,6 +111,22 @@
             <field name="perm_read" eval="False"/>
         </record>
 
+        <record model="ir.rule" id="ir_default_user_rule">
+            <field name="name">Defaults: alter personal defaults</field>
+            <field name="model_id" ref="model_ir_default"/>
+            <field name="domain_force">[('user_id','=',user.id)]</field>
+            <field name="groups" eval="[(4, ref('base.group_user'))]"/>
+            <field name="perm_read" eval="False"/>
+        </record>
+
+        <record model="ir.rule" id="ir_default_system_rule">
+            <field name="name">Defaults: alter all defaults</field>
+            <field name="model_id" ref="model_ir_default"/>
+            <field name="domain_force">[(1,'=',1)]</field>
+            <field name="groups" eval="[(4, ref('base.group_system'))]"/>
+            <field name="perm_read" eval="False"/>
+        </record>
+
         <!-- Used for dashboard customizations, users should only be able to edit their own dashboards -->
         <record model="ir.rule" id="ir_ui_view_custom_personal">
             <field name="name">ir.ui.view_custom rule</field>

--- a/odoo/addons/base/security/ir.model.access.csv
+++ b/odoo/addons/base/security/ir.model.access.csv
@@ -33,6 +33,9 @@
 "access_ir_ui_view_group_system","ir_ui_view group_system","model_ir_ui_view","group_system",1,1,1,1
 "access_ir_ui_view_custom_group_user","ir_ui_view_custom_group_user","model_ir_ui_view_custom",,1,1,1,1
 "access_ir_values_group_all","ir_values group_all","model_ir_values",,1,1,1,1
+"access_ir_default_all","ir_default all","model_ir_default",,1,0,0,0
+"access_ir_default_group_user","ir_default group_user","model_ir_default","group_user",1,1,1,1
+"access_ir_default_group_system","ir_default group_system","model_ir_default","group_system",1,1,1,1
 "access_res_company_group_erp_manager","res_company group_erp_manager","model_res_company","group_erp_manager",1,1,1,1
 "access_res_company_group_user","res_company group_user","model_res_company",,1,0,0,0
 "access_res_country_group_all","res_country group_user_all","model_res_country",,1,0,0,0

--- a/odoo/addons/base/tests/__init__.py
+++ b/odoo/addons/base/tests/__init__.py
@@ -13,6 +13,7 @@ from . import test_ir_filters
 from . import test_ir_sequence
 from . import test_ir_sequence_date_range
 from . import test_ir_values
+from . import test_ir_default
 from . import test_mail
 from . import test_menu
 from . import test_mimetypes

--- a/None
+++ b/odoo/addons/base/tests/test_ir_default.py
@@ -0,0 +1,108 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo.exceptions import ValidationError
+from odoo.tests.common import TransactionCase
+
+
+class TestIrDefault(TransactionCase):
+
+    def test_defaults(self):
+        """ check the mechanism of user-defined defaults """
+        companyA = self.env.user.company_id
+        companyB = companyA.create({'name': 'CompanyB'})
+        user1 = self.env.user
+        user2 = user1.create({'name': 'u2', 'login': 'u2'})
+        user3 = user1.create({'name': 'u3', 'login': 'u3',
+                              'company_id': companyB.id,
+                              'company_ids': companyB.ids})
+
+        # create some default value for some model
+        IrDefault1 = self.env['ir.default']
+        IrDefault2 = IrDefault1.sudo(user2)
+        IrDefault3 = IrDefault1.sudo(user3)
+
+        # set a default value for all users
+        IrDefault1.search([('field_id.model', '=', 'res.partner')]).unlink()
+        IrDefault1.set('res.partner', 'ref', 'GLOBAL', user_id=False, company_id=False)
+        self.assertEqual(IrDefault1.get_model_defaults('res.partner'), {'ref': 'GLOBAL'},
+                         "Can't retrieve the created default value for all users.")
+        self.assertEqual(IrDefault2.get_model_defaults('res.partner'), {'ref': 'GLOBAL'},
+                         "Can't retrieve the created default value for all users.")
+        self.assertEqual(IrDefault3.get_model_defaults('res.partner'), {'ref': 'GLOBAL'},
+                         "Can't retrieve the created default value for all users.")
+
+        # set a default value for current company (behavior of 'set default' from debug mode)
+        IrDefault1.set('res.partner', 'ref', 'COMPANY', user_id=False, company_id=True)
+        self.assertEqual(IrDefault1.get_model_defaults('res.partner'), {'ref': 'COMPANY'},
+                         "Can't retrieve the created default value for company.")
+        self.assertEqual(IrDefault2.get_model_defaults('res.partner'), {'ref': 'COMPANY'},
+                         "Can't retrieve the created default value for company.")
+        self.assertEqual(IrDefault3.get_model_defaults('res.partner'), {'ref': 'GLOBAL'},
+                         "Unexpected default value for company.")
+
+        # set a default value for current user (behavior of 'set default' from debug mode)
+        IrDefault2.set('res.partner', 'ref', 'USER', user_id=True, company_id=True)
+        self.assertEqual(IrDefault1.get_model_defaults('res.partner'), {'ref': 'COMPANY'},
+                         "Can't retrieve the created default value for user.")
+        self.assertEqual(IrDefault2.get_model_defaults('res.partner'), {'ref': 'USER'},
+                         "Unexpected default value for user.")
+        self.assertEqual(IrDefault3.get_model_defaults('res.partner'), {'ref': 'GLOBAL'},
+                         "Unexpected default value for company.")
+
+        # check default values on partners
+        default1 = IrDefault1.env['res.partner'].default_get(['ref']).get('ref')
+        self.assertEqual(default1, 'COMPANY', "Wrong default value.")
+        default2 = IrDefault2.env['res.partner'].default_get(['ref']).get('ref')
+        self.assertEqual(default2, 'USER', "Wrong default value.")
+        default3 = IrDefault3.env['res.partner'].default_get(['ref']).get('ref')
+        self.assertEqual(default3, 'GLOBAL', "Wrong default value.")
+
+    def test_conditions(self):
+        """ check user-defined defaults with condition """
+        IrDefault = self.env['ir.default']
+
+        # default without condition
+        IrDefault.search([('field_id.model', '=', 'res.partner')]).unlink()
+        IrDefault.set('res.partner', 'ref', 'X')
+        self.assertEqual(IrDefault.get_model_defaults('res.partner'),
+                         {'ref': 'X'})
+        self.assertEqual(IrDefault.get_model_defaults('res.partner', condition='name=Agrolait'),
+                         {})
+
+        # default with a condition
+        IrDefault.search([('field_id.model', '=', 'res.partner.title')]).unlink()
+        IrDefault.set('res.partner.title', 'shortcut', 'X')
+        IrDefault.set('res.partner.title', 'shortcut', 'Mr', condition='name=Mister')
+        self.assertEqual(IrDefault.get_model_defaults('res.partner.title'),
+                         {'shortcut': 'X'})
+        self.assertEqual(IrDefault.get_model_defaults('res.partner.title', condition='name=Miss'),
+                         {})
+        self.assertEqual(IrDefault.get_model_defaults('res.partner.title', condition='name=Mister'),
+                         {'shortcut': 'Mr'})
+
+    def test_invalid(self):
+        """ check error cases with 'ir.default' """
+        IrDefault = self.env['ir.default']
+        with self.assertRaises(ValidationError):
+            IrDefault.set('unknown_model', 'unknown_field', 42)
+        with self.assertRaises(ValidationError):
+            IrDefault.set('res.partner', 'unknown_field', 42)
+        with self.assertRaises(ValidationError):
+            IrDefault.set('res.partner', 'lang', 'some_LANG')
+        with self.assertRaises(ValidationError):
+            IrDefault.set('res.partner', 'credit_limit', 'foo')
+
+    def test_removal(self):
+        """ check defaults for many2one with their value being removed """
+        IrDefault = self.env['ir.default']
+        IrDefault.search([('field_id.model', '=', 'res.partner')]).unlink()
+
+        # set a record as a default value
+        title = self.env['res.partner.title'].create({'name': 'President'})
+        IrDefault.set('res.partner', 'title', title.id)
+        self.assertEqual(IrDefault.get_model_defaults('res.partner'), {'title': title.id})
+
+        # delete the record, and check the presence of the default value
+        title.unlink()
+        self.assertEqual(IrDefault.get_model_defaults('res.partner'), {})
