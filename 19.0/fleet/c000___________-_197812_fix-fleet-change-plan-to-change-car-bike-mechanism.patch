PR: https://github.com/odoo/odoo/pull/197812

From: 078fbba4decb32ae4b5d9878ee3788f7042382e8
From: ahta
Date: 2025-03-31 21:19:50

Breaking data model changes scores: del:3.8 + add:0, change matches:
-    plan_to_change_car = fields.Boolean(related='driver_id.plan_to_change_car', store=True, readonly=False)
-    plan_to_change_bike = fields.Boolean(related='driver_id.plan_to_change_bike', store=True, readonly=False)
+    plan_to_change_car = fields.Boolean()
+    plan_to_change_bike = fields.Boolean()
-    _inherit = 'res.partner'
-    plan_to_change_car = fields.Boolean('Plan To Change Car', default=False, tracking=True)
-    plan_to_change_bike = fields.Boolean('Plan To Change Bike', default=False)

Total Changes: 84

[FIX] fleet: change plan to change car/bike mechanism

The fleet/res_partner model was removed, and the fields
`plan_to_change_bike` and `plan_to_change_car` are no longer related
fields. As a result, they are no longer computed from the fields in the
`fleet/res_partner` model, which previously acted as a shared variable
for all vehicles of the same user. Now, these fields are associated with
each vehicle separately, and each vehicle's fields are set individually
instead of being defined in the `fleet/res_partner` model.

task-4555530

closes odoo/odoo#197812

Related: odoo/upgrade#7250
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/fleet/models/__init__.py
+++ b/addons/fleet/models/__init__.py
@@ -13,4 +13,3 @@ from . import fleet_vehicle_odometer
 from . import fleet_vehicle_state
 from . import fleet_vehicle_tag
 from . import res_config_settings
-from . import res_partner

--- a/addons/fleet/models/fleet_vehicle.py
+++ b/addons/fleet/models/fleet_vehicle.py
@@ -7,6 +7,7 @@ from dateutil.relativedelta import relativedelta
 from odoo import api, fields, models, _
 from odoo.exceptions import UserError
 from odoo.addons.fleet.models.fleet_vehicle_model import FUEL_TYPES
+from odoo.osv import expression
 
 
 #Some fields don't have the exact same name
@@ -111,8 +112,8 @@ class FleetVehicle(models.Model):
     car_value = fields.Float(string="Catalog Value (VAT Incl.)", tracking=True)
     net_car_value = fields.Float(string="Purchase Value")
     residual_value = fields.Float()
-    plan_to_change_car = fields.Boolean(related='driver_id.plan_to_change_car', store=True, readonly=False)
-    plan_to_change_bike = fields.Boolean(related='driver_id.plan_to_change_bike', store=True, readonly=False)
+    plan_to_change_car = fields.Boolean()
+    plan_to_change_bike = fields.Boolean()
     vehicle_type = fields.Selection(related='model_id.vehicle_type')
     frame_type = fields.Selection([('diamant', 'Diamant'), ('trapez', 'Trapez'), ('wave', 'Wave')], string="Bike Frame Type")
     electric_assistance = fields.Boolean(compute='_compute_model_fields', store=True, readonly=False)
@@ -290,20 +291,37 @@ class FleetVehicle(models.Model):
     def create(self, vals_list):
         ptc_values = [self._clean_vals_internal_user(vals) for vals in vals_list]
         vehicles = super().create(vals_list)
+        to_update_drivers_cars = set()
+        to_update_drivers_bikes = set()
+        state_waiting_list = self.env.ref('fleet.fleet_vehicle_state_waiting_list', raise_if_not_found=False)
         for vehicle, vals, ptc_value in zip(vehicles, vals_list, ptc_values):
             if ptc_value:
                 vehicle.sudo().write(ptc_value)
             if 'driver_id' in vals and vals['driver_id']:
                 vehicle.create_driver_history(vals)
             if 'future_driver_id' in vals and vals['future_driver_id']:
-                state_waiting_list = self.env.ref('fleet.fleet_vehicle_state_waiting_list', raise_if_not_found=False)
-                states = vehicle.mapped('state_id').ids
-                if not state_waiting_list or state_waiting_list.id not in states:
-                    future_driver = self.env['res.partner'].browse(vals['future_driver_id'])
-                    if self.vehicle_type == 'bike':
-                        future_driver.sudo().write({'plan_to_change_bike': True})
-                    if self.vehicle_type == 'car':
-                        future_driver.sudo().write({'plan_to_change_car': True})
+                state_id = vehicle.state_id.id
+                if not state_waiting_list or state_waiting_list.id != state_id:
+                    future_driver = vals['future_driver_id']
+                    if vehicle.vehicle_type == 'bike':
+                        to_update_drivers_bikes.add(future_driver)
+                    elif vehicle.vehicle_type == 'car':
+                        to_update_drivers_cars.add(future_driver)
+        car_domain, bike_domain = [], []
+        if to_update_drivers_cars:
+            car_domain = [('driver_id', 'in', to_update_drivers_cars), ('vehicle_type', '=', 'car')]
+        if to_update_drivers_bikes:
+            bike_domain = [('driver_id', 'in', to_update_drivers_bikes), ('vehicle_type', '=', 'bike')]
+        if car_domain or bike_domain:
+            vehicle_read_group = dict(self.env['fleet.vehicle']._read_group(
+                domain=expression.OR([car_domain, bike_domain]),
+                groupby=['vehicle_type'],
+                aggregates=['id:recordset']
+            ))
+            if 'bike' in vehicle_read_group:
+                vehicle_read_group['bike'].write({'plan_to_change_bike': True})
+            if 'car' in vehicle_read_group:
+                vehicle_read_group['car'].write({'plan_to_change_car': True})
         return vehicles
 
     def write(self, vals):
@@ -321,14 +339,20 @@ class FleetVehicle(models.Model):
                         note=_('Specify the End date of %s', vehicle.driver_id.name))
 
         if 'future_driver_id' in vals and vals['future_driver_id']:
+            future_driver = vals['future_driver_id']
             state_waiting_list = self.env.ref('fleet.fleet_vehicle_state_waiting_list', raise_if_not_found=False)
-            states = self.mapped('state_id').ids if 'state_id' not in vals else [vals['state_id']]
-            if not state_waiting_list or state_waiting_list.id not in states:
-                future_driver = self.env['res.partner'].browse(vals['future_driver_id'])
-                if self.vehicle_type == 'bike':
-                    future_driver.sudo().write({'plan_to_change_bike': True})
-                if self.vehicle_type == 'car':
-                    future_driver.sudo().write({'plan_to_change_car': True})
+            vehicle_types = set(self.filtered(lambda vehicle: not state_waiting_list or\
+                                state_waiting_list.id != vals.get('state_id', vehicle.state_id.id)).mapped('vehicle_type'))
+            if vehicle_types:
+                vehicle_read_group = dict(self.env['fleet.vehicle']._read_group(
+                    domain=[('driver_id', '=', future_driver), ('vehicle_type', 'in', vehicle_types)],
+                    groupby=['vehicle_type'],
+                    aggregates=['id:recordset'])
+                )
+                if 'bike' in vehicle_read_group:
+                    vehicle_read_group['bike'].write({'plan_to_change_bike': True})
+                if 'car' in vehicle_read_group:
+                    vehicle_read_group['car'].write({'plan_to_change_car': True})
 
         if 'active' in vals and not vals['active']:
             self.env['fleet.vehicle.log.contract'].search([('vehicle_id', 'in', self.ids)]).active = False
@@ -358,13 +382,15 @@ class FleetVehicle(models.Model):
         # Find all the vehicles of the same type for which the driver is the future_driver_id
         # remove their driver_id and close their history using current date
         vehicles = self.search([('driver_id', 'in', self.mapped('future_driver_id').ids), ('vehicle_type', '=', self.vehicle_type)])
-        vehicles.write({'driver_id': False})
-
+        vehicles.write({
+            'driver_id': False,
+            'plan_to_change_car': False,
+            'plan_to_change_bike': False,
+        })
+        
         for vehicle in self:
-            if vehicle.vehicle_type == 'bike':
-                vehicle.future_driver_id.sudo().write({'plan_to_change_bike': False})
-            if vehicle.vehicle_type == 'car':
-                vehicle.future_driver_id.sudo().write({'plan_to_change_car': False})
+            vehicle.plan_to_change_bike = False
+            vehicle.plan_to_change_car = False
             vehicle.driver_id = vehicle.future_driver_id
             vehicle.future_driver_id = False
 

--- a/addons/fleet/models/res_partner.py
+++ b/None
@@ -1,11 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-
-class ResPartner(models.Model):
-    _inherit = 'res.partner'
-
-    plan_to_change_car = fields.Boolean('Plan To Change Car', default=False, tracking=True)
-    plan_to_change_bike = fields.Boolean('Plan To Change Bike', default=False)
