PR: https://github.com/odoo/odoo/pull/122144

From: 16a07ed1bfd33a193b363f3e87aab3f9bd6f8bd0
From: damr
Date: 2023-07-19 21:17:53

Structural Changes: 13
Total Changes: 117

[IMP] project: make the field company_id of projects non required

This commit's purpose is to allow the user to set the company_id of a project to False, meaning the project is no longer restricted for the user who does not have access to the company of the project. This change induces a lot of other small behavior changes/approximation. Since some fields (currency_id, resource_calendar_id, etc) were company dependent, we had to updates some use cases.

task-3084819

closes odoo/odoo#122144

Related: odoo/enterprise#41363
Related: odoo/upgrade#4947
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/account_analytic_account.py
+++ b/addons/project/models/account_analytic_account.py
@@ -19,12 +19,6 @@ class AccountAnalyticAccount(models.Model):
         for account in self:
             account.project_count = mapping.get(account.id, 0)
 
-    @api.constrains('company_id')
-    def _check_company_id(self):
-        for record in self:
-            if record.company_id and not all(record.company_id == c for c in record.project_ids.mapped('company_id')):
-                raise UserError(_('You cannot change the company of an analytic account if it is related to a project.'))
-
     @api.ondelete(at_uninstall=False)
     def _unlink_except_existing_tasks(self):
         projects = self.env['project.project'].search([('analytic_account_id', 'in', self.ids)])

--- a/addons/project/models/project_project.py
+++ b/addons/project/models/project_project.py
@@ -9,7 +9,7 @@ from datetime import timedelta
 from odoo import api, Command, fields, models, _, _lt
 from odoo.addons.rating.models import rating_data
 from odoo.tools.misc import get_lang
-
+from odoo.exceptions import UserError
 from .project_update import STATUS_COLOR
 from .project_task import CLOSED_STATES
 
@@ -19,7 +19,6 @@ class Project(models.Model):
     _inherit = ['portal.mixin', 'mail.alias.mixin', 'rating.parent.mixin', 'mail.thread', 'mail.activity.mixin']
     _order = "sequence, name, id"
     _rating_satisfaction_days = 30  # takes 30 days by default
-    _check_company_auto = True
 
     def _compute_attached_docs_count(self):
         self.env.cr.execute(
@@ -102,11 +101,11 @@ class Project(models.Model):
     active = fields.Boolean(default=True,
         help="If the active field is set to False, it will allow you to hide the project without removing it.")
     sequence = fields.Integer(default=10)
-    partner_id = fields.Many2one('res.partner', string='Customer', auto_join=True, tracking=True, check_company=True)
-    company_id = fields.Many2one('res.company', string='Company', required=True, default=lambda self: self.env.company)
-    currency_id = fields.Many2one('res.currency', related="company_id.currency_id", string="Currency", readonly=True)
+    partner_id = fields.Many2one('res.partner', string='Customer', auto_join=True, tracking=True, domain="['|', ('company_id', '=?', company_id), ('company_id', '=', False)]")
+    company_id = fields.Many2one('res.company', string='Company', compute="_compute_company_id", inverse="_inverse_company_id", store=True, readonly=False)
+    currency_id = fields.Many2one('res.currency', compute="_compute_currency_id", string="Currency", readonly=True)
     analytic_account_id = fields.Many2one('account.analytic.account', string="Analytic Account", copy=False, ondelete='set null',
-        domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]", check_company=True,
+        domain="['|', ('company_id', '=', False), ('company_id', '=?', company_id)]", check_company=True,
         help="Analytic account to which this project, its tasks and its timesheets are linked. \n"
             "Track the costs and revenues of your project by setting this analytic account on your related documents (e.g. sales orders, invoices, purchase orders, vendor bills, expenses etc.).\n"
             "This analytic account can be changed on each task individually if necessary.\n"
@@ -123,8 +122,7 @@ class Project(models.Model):
         help="Name used to refer to the tasks of your project e.g. tasks, tickets, sprints, etc...")
     tasks = fields.One2many('project.task', 'project_id', string="Task Activities")
     resource_calendar_id = fields.Many2one(
-        'resource.calendar', string='Working Time',
-        related='company_id.resource_calendar_id')
+        'resource.calendar', string='Working Time', compute='_compute_resource_calendar_id')
     type_ids = fields.Many2many('project.task.type', 'project_task_type_rel', 'project_id', 'type_id', string='Tasks Stages')
     task_count = fields.Integer(compute='_compute_task_count', string="Task Count")
     task_ids = fields.One2many('project.task', 'project_id', string='Tasks',
@@ -236,6 +234,36 @@ class Project(models.Model):
     def _compute_allow_rating(self):
         self.allow_rating = self.env.user.has_group('project.group_project_rating')
 
+    @api.depends('analytic_account_id.company_id')
+    def _compute_company_id(self):
+        for project in self:
+            # if a new restriction is put on the account, the restriction on the project is updated.
+            if project.analytic_account_id.company_id:
+                project.company_id = project.analytic_account_id.company_id
+
+    @api.depends_context('company')
+    @api.depends('company_id', 'company_id.resource_calendar_id')
+    def _compute_resource_calendar_id(self):
+        for project in self:
+            project.resource_calendar_id = project.company_id.resource_calendar_id or self.env.company.resource_calendar_id
+
+    def _inverse_company_id(self):
+        """
+        Ensures that the new company of the project is valid for the account. If not set back the previous company, and raise a user Error.
+        Ensures that the new company of the project is valid for the partner
+        """
+        for project in self:
+            account = project.analytic_account_id
+            if project.partner_id and project.partner_id.company_id and project.company_id and project.company_id != project.partner_id.company_id:
+                raise UserError(_('The project and the associated partner must be linked to the same company.'))
+            if not account or not account.company_id:
+                continue
+            # if the account of the project has more than one company linked to it, or if it has aal, do not update the account, and set back the old company on the project.
+            if (account.project_count > 1 or account.line_ids) and project.company_id != account.company_id:
+                raise UserError(
+                    _("The project's company cannot be changed if its analytic account has analytic lines or if more than one project is linked to it."))
+            account.company_id = project.company_id
+
     @api.depends('rating_status', 'rating_status_period')
     def _compute_rating_request_deadline(self):
         periods = {'daily': 1, 'weekly': 7, 'bimonthly': 15, 'monthly': 30, 'quarterly': 90, 'yearly': 365}
@@ -281,6 +309,13 @@ class Project(models.Model):
         for project in self:
             project.is_milestone_exceeded = bool(mapped_count.get(project.id, 0))
 
+    @api.depends_context('company')
+    @api.depends('company_id')
+    def _compute_currency_id(self):
+        default_currency_id = self.env.company.currency_id
+        for project in self:
+            project.currency_id = project.company_id.currency_id or default_currency_id
+
     @api.model
     def _search_is_milestone_exceeded(self, operator, value):
         if not isinstance(value, bool):
@@ -790,22 +825,42 @@ class Project(models.Model):
 
     @api.model
     def _create_analytic_account_from_values(self, values):
-        company = self.env['res.company'].browse(values.get('company_id')) if values.get('company_id') else self.env.company
+        company = self.env['res.company'].browse(values.get('company_id', False))
+        plan = company.analytic_plan_id
+        if not plan:
+            plan = self.env['account.analytic.plan'].sudo().search([('company_id', '=', False)], limit=1)
+            if not plan:
+                plan = self.env['account.analytic.plan'].sudo().create({
+                    'name': _('Default'),
+                    'company_id': False,
+                })
         analytic_account = self.env['account.analytic.account'].create({
             'name': values.get('name', _('Unknown Analytic Account')),
             'company_id': company.id,
             'partner_id': values.get('partner_id'),
-            'plan_id': company.analytic_plan_id.id,
+            'plan_id': plan.id,
         })
         return analytic_account
 
     def _create_analytic_account(self):
+        default_plan = self.env['account.analytic.plan'].sudo().search([('company_id', '=', False)], limit=1)
         for project in self:
+            company_id = False
+            if project.company_id:
+                plan = project.company_id.analytic_plan_id
+                company_id = project.company_id.id
+            elif default_plan:
+                plan = default_plan
+            else:
+                plan = self.env['account.analytic.plan'].create({
+                    'name': _('Default'),
+                    'company_id': False,
+                })
             analytic_account = self.env['account.analytic.account'].create({
                 'name': project.name,
-                'company_id': project.company_id.id,
+                'company_id': company_id,
                 'partner_id': project.partner_id.id,
-                'plan_id': project.company_id.analytic_plan_id.id,
+                'plan_id': plan.id,
                 'active': True,
             })
             project.write({'analytic_account_id': analytic_account.id})

--- a/addons/project/models/project_task.py
+++ b/addons/project/models/project_task.py
@@ -77,7 +77,6 @@ class Task(models.Model):
     _mail_post_access = 'read'
     _order = "priority desc, sequence, date_deadline asc, id desc"
     _primary_email = 'email_from'
-    _check_company_auto = True
     _track_duration_field = 'stage_id'
 
     @api.model
@@ -104,7 +103,7 @@ class Task(models.Model):
     def _default_company_id(self):
         if self._context.get('default_project_id'):
             return self.env['project.project'].browse(self._context['default_project_id']).company_id
-        return self.env.company
+        return False
 
     @api.model
     def _read_group_stage_ids(self, stages, domain, order):
@@ -155,8 +154,7 @@ class Task(models.Model):
         help="Date on which the state of your task has last been modified.\n"
             "Based on this information you can identify tasks that are stalling and get statistics on the time it usually takes to move tasks from one stage/state to another.")
 
-    project_id = fields.Many2one('project.project', string='Project',
-        index=True, tracking=True, check_company=True, change_default=True)
+    project_id = fields.Many2one('project.project', string='Project', domain="['|', ('company_id', '=', False), ('company_id', '=?',  company_id)]", index=True, tracking=True, change_default=True)
     project_root_id = fields.Many2one('project.project', compute='_compute_project_root_id', search='_search_project_root_id', recursive=True)
     task_properties = fields.Properties('Properties', definition='project_id.task_properties_definition', copy=True)
     planned_hours = fields.Float("Allocated Time", tracking=True)
@@ -182,13 +180,10 @@ class Task(models.Model):
         search='_search_personal_stage_type_id', default=_default_personal_stage_type_id,
         help="The current user's personal task stage.")
     partner_id = fields.Many2one('res.partner',
-        string='Customer', recursive=True, tracking=True,
-        compute='_compute_partner_id', store=True, readonly=False,
-        domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
+        string='Customer', recursive=True, tracking=True, compute='_compute_partner_id', store=True, readonly=False,
+        domain="['|', ('company_id', '=?', company_id), ('company_id', '=', False)]", )
     email_cc = fields.Char(help='Email addresses that were in the CC of the incoming emails from this task and that are not currently linked to an existing customer.')
-    company_id = fields.Many2one(
-        'res.company', string='Company', compute='_compute_company_id', store=True, readonly=False, recursive=True,
-        required=True, copy=True, default=_default_company_id)
+    company_id = fields.Many2one('res.company', string='Company', compute='_compute_company_id', store=True, readonly=False, recursive=True, copy=True, default=_default_company_id)
     color = fields.Integer(string='Color Index')
     rating_active = fields.Boolean(string='Project Rating Status', related="project_id.rating_active")
     attachment_ids = fields.One2many('ir.attachment', compute='_compute_attachment_ids', string="Main Attachments",
@@ -258,7 +253,7 @@ class Task(models.Model):
 
     # Account analytic
     analytic_account_id = fields.Many2one('account.analytic.account', ondelete='set null', compute='_compute_analytic_account_id', store=True, readonly=False,
-        domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]", check_company=True,
+        domain="[('company_id', '=?', company_id)]",
         help="Analytic account to which this task and its timesheets are linked.\n"
             "Track the costs and revenues of your task by setting its analytic account on your related documents (e.g. sales orders, invoices, purchase orders, vendor bills, expenses etc.).\n"
             "By default, the analytic account of the project is set. However, it can be changed on each task individually if necessary.")
@@ -276,6 +271,13 @@ class Task(models.Model):
         ('recurring_task_has_no_parent', 'CHECK (NOT (recurring_task IS TRUE AND parent_id IS NOT NULL))', "A subtask cannot be recurrent.")
     ]
 
+    @api.constrains('company_id', 'partner_id')
+    def _ensure_company_consistency_with_partner(self):
+        """ Ensures that the company of the task is valid for the partner. """
+        for task in self:
+            if task.partner_id and task.partner_id.company_id and task.company_id and task.company_id != task.partner_id.company_id:
+                raise ValidationError(_('The task and the associated partner must be linked to the same company.'))
+
     @property
     def SELF_READABLE_FIELDS(self):
         return PROJECT_TASK_READABLE_FIELDS | self.SELF_WRITABLE_FIELDS
@@ -608,7 +610,7 @@ class Task(models.Model):
 
     @api.onchange('company_id')
     def _onchange_task_company(self):
-        if self.project_id.company_id != self.company_id:
+        if self.project_id.company_id and self.project_id.company_id != self.company_id:
             self.project_id = False
 
     @api.depends('project_id.company_id', 'parent_id.company_id')
@@ -957,7 +959,7 @@ class Task(models.Model):
             if project_id and not "company_id" in vals:
                 vals["company_id"] = self.env["project.project"].browse(
                     project_id
-                ).company_id.id or self.env.company.id
+                ).company_id.id
             if not project_id and ("stage_id" in vals or self.env.context.get('default_stage_id')):
                 vals["stage_id"] = False
 

--- a/addons/project/models/res_company.py
+++ b/addons/project/models/res_company.py
@@ -19,7 +19,7 @@ class ResCompany(models.Model):
             default_plan = self.env['ir.config_parameter'].with_company(company).sudo().get_param("default_analytic_plan_id_%s" % company.id)
             company.analytic_plan_id = int(default_plan) if default_plan else False
             if not company.analytic_plan_id:
-                company.analytic_plan_id = self.env['account.analytic.plan'].with_company(company)._get_default()
+                company.analytic_plan_id = self.env['account.analytic.plan']._get_default()
 
     def write(self, values):
         for company in self:

--- a/addons/project/models/res_partner.py
+++ b/addons/project/models/res_partner.py
@@ -11,7 +11,7 @@ class ResPartner(models.Model):
     _check_company_auto = True
 
     project_ids = fields.One2many('project.project', 'partner_id', string='Projects', check_company=True)
-    task_ids = fields.One2many('project.task', 'partner_id', string='Tasks')
+    task_ids = fields.One2many('project.task', 'partner_id', string='Tasks', check_company=True)
     task_count = fields.Integer(compute='_compute_task_count', string='# Tasks')
 
     def _compute_task_count(self):
