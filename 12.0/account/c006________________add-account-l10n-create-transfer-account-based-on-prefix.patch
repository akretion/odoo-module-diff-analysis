PR: https://github.com/odoo/odoo/pull/

From: 7a31a92afa9a2ad280a6ec110fc9547e48b89466
From: Laurent Smet
Date: 2018-05-23 13:43:39

Structural Changes: 2
Total Changes: 80

[ADD] account, l10n_*: create transfer account based on prefix.

This commit changes the mechanism to get the transfer account.
As the bank/cash accounts, the transfer account is now created automatically based on
a prefix.

-task: https://www.odoo.com/web#id=35857&action=333&active_id=967&model=project.task&view_type=form&menu_id=4720

================================= pseudo patch: =================================

--- a/addons/account/models/account.py
+++ b/addons/account/models/account.py
@@ -84,6 +84,16 @@ class AccountAccount(models.Model):
         ('code_company_uniq', 'unique (code,company_id)', 'The code of the account must be unique per company !')
     ]
 
+    @api.model
+    def _search_new_account_code(self, company, digits, prefix):
+        for num in range(1, 100):
+            new_code = str(prefix.ljust(digits - 1, '0')) + str(num)
+            rec = self.search([('code', '=', new_code), ('company_id', '=', company.id)], limit=1)
+            if not rec:
+                return new_code
+        else:
+            raise UserError(_('Cannot generate an unused account code.'))
+
     def _compute_opening_debit_credit(self):
         for record in self:
             opening_debit = opening_credit = 0.0
@@ -622,19 +632,12 @@ class AccountJournal(models.Model):
             account_code_prefix = company.bank_account_code_prefix or ''
         else:
             account_code_prefix = company.cash_account_code_prefix or company.bank_account_code_prefix or ''
-        for num in range(1, 100):
-            new_code = str(account_code_prefix.ljust(digits - 1, '0')) + str(num)
-            rec = self.env['account.account'].search([('code', '=', new_code), ('company_id', '=', company.id)], limit=1)
-            if not rec:
-                break
-        else:
-            raise UserError(_('Cannot generate an unused account code.'))
 
         liquidity_type = self.env.ref('account.data_account_type_liquidity')
         return {
                 'name': name,
                 'currency_id': currency_id or False,
-                'code': new_code,
+                'code': self.env['account.account']._search_new_account_code(company, digits, account_code_prefix),
                 'user_type_id': liquidity_type and liquidity_type.id or False,
                 'company_id': company.id,
         }

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -110,9 +110,7 @@ class AccountChartTemplate(models.Model):
         help='List of all the taxes that have to be installed by the wizard')
     bank_account_code_prefix = fields.Char(string='Prefix of the bank accounts', required=True, oldname="bank_account_code_char")
     cash_account_code_prefix = fields.Char(string='Prefix of the main cash accounts', required=True)
-    transfer_account_id = fields.Many2one('account.account.template', string='Transfer Account', required=True,
-        domain=lambda self: [('reconcile', '=', True), ('user_type_id.id', '=', self.env.ref('account.data_account_type_current_assets').id)],
-        help="Intermediary account used when moving money from a liquidity account to another")
+    transfer_account_code_prefix = fields.Char(string='Prefix of the main transfer accounts', required=True)
     income_currency_exchange_account_id = fields.Many2one('account.account.template',
         string="Gain Exchange Rate Account", domain=[('internal_type', '=', 'other'), ('deprecated', '=', False)])
     expense_currency_exchange_account_id = fields.Many2one('account.account.template',
@@ -137,10 +135,10 @@ class AccountChartTemplate(models.Model):
                 'company_id': self.env.user.company_id.id,
                 'chart_template_id': self.id,
                 'code_digits': self.code_digits,
-                'transfer_account_id': self.transfer_account_id.id,
                 'currency_id': self.currency_id.id,
                 'bank_account_code_prefix': self.bank_account_code_prefix,
                 'cash_account_code_prefix': self.cash_account_code_prefix,
+                'transfer_account_code_prefix': self.transfer_account_code_prefix,
             })
             wizard.onchange_chart_template_id()
             wizard.execute()
@@ -266,12 +264,11 @@ class AccountChartTemplate(models.Model):
         return True
 
     @api.multi
-    def _install_template(self, company, code_digits=None, transfer_account_id=None, obj_wizard=None, acc_ref=None, taxes_ref=None):
+    def _install_template(self, company, code_digits=None, obj_wizard=None, acc_ref=None, taxes_ref=None):
         """ Recursively load the template objects and create the real objects from them.
 
             :param company: company the wizard is running for
             :param code_digits: number of digits the accounts code should have in the COA
-            :param transfer_account_id: reference to the account template that will be used as intermediary account for transfers between 2 liquidity accounts
             :param obj_wizard: the current wizard for generating the COA from the templates
             :param acc_ref: Mapping between ids of account templates and real accounts created from them
             :param taxes_ref: Mapping between ids of tax templates and real taxes created from them
@@ -287,22 +284,21 @@ class AccountChartTemplate(models.Model):
         if taxes_ref is None:
             taxes_ref = {}
         if self.parent_id:
-            tmp1, tmp2 = self.parent_id._install_template(company, code_digits=code_digits, transfer_account_id=transfer_account_id, acc_ref=acc_ref, taxes_ref=taxes_ref)
+            tmp1, tmp2 = self.parent_id._install_template(company, code_digits=code_digits, acc_ref=acc_ref, taxes_ref=taxes_ref)
             acc_ref.update(tmp1)
             taxes_ref.update(tmp2)
         # Ensure, even if individually, that everything is translated according to the company's language.
-        tmp1, tmp2 = self.with_context(lang=company.partner_id.lang)._load_template(company, code_digits=code_digits, transfer_account_id=transfer_account_id, account_ref=acc_ref, taxes_ref=taxes_ref)
+        tmp1, tmp2 = self.with_context(lang=company.partner_id.lang)._load_template(company, code_digits=code_digits, account_ref=acc_ref, taxes_ref=taxes_ref)
         acc_ref.update(tmp1)
         taxes_ref.update(tmp2)
         return acc_ref, taxes_ref
 
     @api.multi
-    def _load_template(self, company, code_digits=None, transfer_account_id=None, account_ref=None, taxes_ref=None):
+    def _load_template(self, company, code_digits=None, account_ref=None, taxes_ref=None):
         """ Generate all the objects from the templates
 
             :param company: company the wizard is running for
             :param code_digits: number of digits the accounts code should have in the COA
-            :param transfer_account_id: reference to the account template that will be used as intermediary account for transfers between 2 liquidity accounts
             :param acc_ref: Mapping between ids of account templates and real accounts created from them
             :param taxes_ref: Mapping between ids of tax templates and real taxes created from them
             :returns: tuple with a dictionary containing
@@ -318,8 +314,6 @@ class AccountChartTemplate(models.Model):
             taxes_ref = {}
         if not code_digits:
             code_digits = self.code_digits
-        if not transfer_account_id:
-            transfer_account_id = self.transfer_account_id
         AccountTaxObj = self.env['account.tax']
 
         # Generate taxes from templates.
@@ -331,7 +325,6 @@ class AccountChartTemplate(models.Model):
         account_ref.update(account_template_ref)
 
         # writing account values after creation of accounts
-        company.transfer_account_id = account_template_ref[transfer_account_id.id]
         for key, value in generated_tax_res['account_dict'].items():
             if value['refund_account_id'] or value['account_id'] or value['cash_basis_account_id'] or value['cash_basis_base_account_id']:
                 AccountTaxObj.browse(key).write({
@@ -694,14 +687,12 @@ class WizardMultiChartsAccounts(models.TransientModel):
     bank_account_ids = fields.One2many('account.bank.accounts.wizard', 'bank_account_id', string='Cash and Banks', required=True, oldname="bank_accounts_id")
     bank_account_code_prefix = fields.Char('Bank Accounts Prefix', required=True, oldname="bank_account_code_char")
     cash_account_code_prefix = fields.Char('Cash Accounts Prefix', required=True)
+    transfer_account_code_prefix = fields.Char('Transfer Accounts Prefix', required=True)
     code_digits = fields.Integer(string='# of Digits', required=True, help="No. of Digits to use for account code")
     sale_tax_id = fields.Many2one('account.tax.template', string='Default Sales Tax', oldname="sale_tax")
     purchase_tax_id = fields.Many2one('account.tax.template', string='Default Purchase Tax', oldname="purchase_tax")
     sale_tax_rate = fields.Float(string='Sales Tax(%)')
     use_anglo_saxon = fields.Boolean(string='Use Anglo-Saxon Accounting', related='chart_template_id.use_anglo_saxon')
-    transfer_account_id = fields.Many2one('account.account.template', required=True, string='Transfer Account',
-        domain=lambda self: [('reconcile', '=', True), ('user_type_id.id', '=', self.env.ref('account.data_account_type_current_assets').id)],
-        help="Intermediary account used when moving money from a liquidity account to another")
     purchase_tax_rate = fields.Float(string='Purchase Tax(%)')
     complete_tax_set = fields.Boolean('Complete Set of Taxes',
         help="This boolean helps you to choose if you want to propose to the user to encode the sales and purchase rates or use "
@@ -749,14 +740,14 @@ class WizardMultiChartsAccounts(models.TransientModel):
             else:
                 self.sale_tax_id = False
                 self.purchase_tax_id = False
-            if self.chart_template_id.transfer_account_id:
-                self.transfer_account_id = self.chart_template_id.transfer_account_id.id
             if self.chart_template_id.code_digits:
                 self.code_digits = self.chart_template_id.code_digits
             if self.chart_template_id.bank_account_code_prefix:
                 self.bank_account_code_prefix = self.chart_template_id.bank_account_code_prefix
             if self.chart_template_id.cash_account_code_prefix:
                 self.cash_account_code_prefix = self.chart_template_id.cash_account_code_prefix
+            if self.chart_template_id.transfer_account_code_prefix:
+                self.transfer_account_code_prefix = self.chart_template_id.transfer_account_code_prefix
         return res
 
     @api.model
@@ -900,6 +891,7 @@ class WizardMultiChartsAccounts(models.TransientModel):
                                'anglo_saxon_accounting': self.use_anglo_saxon,
                                'bank_account_code_prefix': self.bank_account_code_prefix,
                                'cash_account_code_prefix': self.cash_account_code_prefix,
+                               'transfer_account_code_prefix': self.transfer_account_code_prefix,
                                'chart_template_id': self.chart_template_id.id})
 
         #set the coa currency to active
@@ -917,7 +909,11 @@ class WizardMultiChartsAccounts(models.TransientModel):
         self._create_tax_templates_from_rates(company.id)
 
         # Install all the templates objects and generate the real objects
-        acc_template_ref, taxes_ref = self.chart_template_id._install_template(company, code_digits=self.code_digits, transfer_account_id=self.transfer_account_id)
+        acc_template_ref, taxes_ref = self.chart_template_id._install_template(company, code_digits=self.code_digits)
+
+        # Create Transfer account
+        transfer_account_vals = self._prepare_transfer_account(_('Liquidity Transfers'), company)
+        company.transfer_account_id = self.env['account.account'].create(transfer_account_vals)
 
         # Create Bank journals
         self._create_bank_journals_from_o2m(company, acc_template_ref)
@@ -930,6 +926,30 @@ class WizardMultiChartsAccounts(models.TransientModel):
         company.account_purchase_tax_id = self.env['account.tax'].search([('type_tax_use', 'in', ('purchase', 'all')), ('company_id', '=', company.id)], limit=1).id
         return {}
 
+    @api.model
+    def _prepare_transfer_account(self, name, company):
+        ''' Prepare values to create the transfer account that is ani ntermediary account used when moving money
+        from a liquidity account to another.
+
+        :param name:        The transfer account name.
+        :param company:     The company owning this account.
+        :return:            A dictionary of values to create a new account.account.
+        '''
+        digits = 6
+        acc = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)
+        if acc:
+            digits = len(acc.code)
+
+        account_code_prefix = company.transfer_account_code_prefix or ''
+        current_assets_type = self.env.ref('account.data_account_type_current_assets', raise_if_not_found=False)
+        return {
+            'name': name,
+            'code': self.env['account.account']._search_new_account_code(company, digits, account_code_prefix),
+            'user_type_id': current_assets_type and current_assets_type.id or False,
+            'reconcile': True,
+            'company_id': company.id,
+        }
+
     @api.multi
     def _create_bank_journals_from_o2m(self, company, acc_template_ref):
         '''

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -23,6 +23,7 @@ class ResCompany(models.Model):
     chart_template_id = fields.Many2one('account.chart.template', help='The chart template for the company (if any)')
     bank_account_code_prefix = fields.Char(string='Prefix of the bank accounts', oldname="bank_account_code_char")
     cash_account_code_prefix = fields.Char(string='Prefix of the cash accounts')
+    transfer_account_code_prefix = fields.Char(string='Prefix of the transfer accounts')
     account_sale_tax_id = fields.Many2one('account.tax', string="Default Sale Tax")
     account_purchase_tax_id = fields.Many2one('account.tax', string="Default Purchase Tax")
     tax_cash_basis_journal_id = fields.Many2one('account.journal', string="Cash Basis Journal")

--- a/addons/account/models/res_config_settings.py
+++ b/addons/account/models/res_config_settings.py
@@ -68,7 +68,6 @@ class ResConfigSettings(models.TransientModel):
             wizard = self.env['wizard.multi.charts.accounts'].create({
                 'company_id': self.company_id.id,
                 'chart_template_id': self.chart_template_id.id,
-                'transfer_account_id': self.chart_template_id.transfer_account_id.id,
                 'code_digits': self.chart_template_id.code_digits,
                 'sale_tax_rate': 15.0,
                 'purchase_tax_rate': 15.0,
@@ -77,6 +76,7 @@ class ResConfigSettings(models.TransientModel):
                 'currency_id': self.currency_id.id,
                 'bank_account_code_prefix': self.chart_template_id.bank_account_code_prefix,
                 'cash_account_code_prefix': self.chart_template_id.cash_account_code_prefix,
+                'transfer_account_code_prefix': self.chart_template_id.transfer_account_code_prefix,
             })
             wizard.onchange_chart_template_id()
             wizard.execute()
