PR: https://github.com/odoo/odoo/pull/

From: e8c48f824e078d643a3385fb910707d5525e927d
From: Yannick Tivisse
Date: 2023-07-05 12:21:28

Structural Changes: 23
Total Changes: 137

[IMP] hr: Remove address_home_id field

Improve usability of employee form. It is confusing for end users
to create another record to encode the employee address.

Move all the private information on the hr.employee record itself.

Remove the M2O address_home_id.

TaskID: 3101400

================================= pseudo patch: =================================

--- a/addons/hr/models/__init__.py
+++ b/addons/hr/models/__init__.py
@@ -17,8 +17,8 @@ from . import mail_alias
 from . import discuss_channel
 from . import models
 from . import res_config_settings
-from . import res_partner
 from . import res_users
 from . import res_company
+from . import res_partner
 from . import resource
 from . import ir_ui_menu

--- a/addons/hr/models/hr_employee.py
+++ b/addons/hr/models/hr_employee.py
@@ -30,6 +30,10 @@ class HrEmployeePrivate(models.Model):
     _inherit = ['hr.employee.base', 'mail.thread.main.attachment', 'mail.activity.mixin', 'resource.mixin', 'avatar.mixin']
     _mail_post_access = 'read'
 
+    @api.model
+    def _lang_get(self):
+        return self.env['res.lang'].get_installed()
+
     # resource and user
     # required on the resource, make sure required="True" set in the view
     name = fields.Char(string="Employee Name", related='resource_id.name', store=True, readonly=False, tracking=True)
@@ -41,17 +45,19 @@ class HrEmployeePrivate(models.Model):
     company_id = fields.Many2one('res.company', required=True)
     company_country_id = fields.Many2one('res.country', 'Company Country', related='company_id.country_id', readonly=True)
     company_country_code = fields.Char(related='company_country_id.code', depends=['company_country_id'], readonly=True)
-    # private partner
-    address_home_id = fields.Many2one(
-        'res.partner', 'Address', help='Enter here the private address of the employee, not the one linked to your company.',
-        groups="hr.group_hr_user", tracking=True,
-        domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
-    is_address_home_a_company = fields.Boolean(
-        'The employee address has a company linked',
-        compute='_compute_is_address_home_a_company',
-    )
-    private_email = fields.Char(related='address_home_id.email', string="Private Email", groups="hr.group_hr_user")
-    lang = fields.Selection(related='address_home_id.lang', string="Lang", groups="hr.group_hr_user", readonly=False)
+    # private info
+    private_street = fields.Char(string="Private Street", groups="hr.group_hr_user")
+    private_street2 = fields.Char(string="Private Street2", groups="hr.group_hr_user")
+    private_city = fields.Char(string="Private City", groups="hr.group_hr_user")
+    private_state_id = fields.Many2one(
+        "res.country.state", string="Private State",
+        domain="[('country_id', '=?', private_country_id)]",
+        groups="hr.group_hr_user")
+    private_zip = fields.Char(string="Private Zip", groups="hr.group_hr_user")
+    private_country_id = fields.Many2one("res.country", string="Private Country", groups="hr.group_hr_user")
+    private_phone = fields.Char(string="Private Phone", groups="hr.group_hr_user")
+    private_email = fields.Char(string="Private Email", groups="hr.group_hr_user")
+    lang = fields.Selection(selection=_lang_get, string="Lang", groups="hr.group_hr_user")
     country_id = fields.Many2one(
         'res.country', 'Nationality (Country)', groups="hr.group_hr_user", tracking=True)
     gender = fields.Selection([
@@ -78,7 +84,7 @@ class HrEmployeePrivate(models.Model):
     passport_id = fields.Char('Passport No', groups="hr.group_hr_user", tracking=True)
     bank_account_id = fields.Many2one(
         'res.partner.bank', 'Bank Account Number',
-        domain="[('partner_id', '=', address_home_id), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
+        domain="[('partner_id', '=', work_contact_id), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
         groups="hr.group_hr_user",
         tracking=True,
         help='Employee bank account to pay salaries')
@@ -111,7 +117,6 @@ class HrEmployeePrivate(models.Model):
         help="The employee type. Although the primary purpose may seem to categorize employees, this field has also an impact in the Contract History. Only Employee type is supposed to be under contract and will have a Contract History.")
 
     job_id = fields.Many2one(tracking=True)
-    phone = fields.Char(related='address_home_id.phone', related_sudo=False, readonly=False, string="Private Phone", groups="hr.group_hr_user")
     # employee in company
     child_ids = fields.One2many('hr.employee', 'parent_id', string='Direct subordinates')
     category_ids = fields.Many2many(
@@ -372,7 +377,6 @@ class HrEmployeePrivate(models.Model):
         onboarding_notes_bodies = {}
         hr_root_menu = self.env.ref('hr.menu_hr_root')
         for employee in employees:
-            employee._message_subscribe(employee.address_home_id.ids)
             # Launch onboarding plans
             url = '/web#%s' % url_encode({
                 'action': 'hr.plan_wizard_action',
@@ -387,16 +391,16 @@ class HrEmployeePrivate(models.Model):
         return employees
 
     def write(self, vals):
-        if 'address_home_id' in vals:
+        if 'work_contact_id' in vals:
             account_id = vals.get('bank_account_id') or self.bank_account_id.id
             if account_id:
                 bank_account = self.env['res.partner.bank'].browse(account_id)
-                if vals['address_home_id'] != bank_account.partner_id.id:
+                if vals['work_contact_id'] != bank_account.partner_id.id:
                     bank_account.sudo().allow_out_payment = False
-                    bank_account.partner_id = vals['address_home_id']
-            self.message_unsubscribe(self.address_home_id.ids)
-            if vals['address_home_id']:
-                self._message_subscribe([vals['address_home_id']])
+                    bank_account.partner_id = vals['work_contact_id']
+            self.message_unsubscribe(self.work_contact_id.ids)
+            if vals['work_contact_id']:
+                self._message_subscribe([vals['work_contact_id']])
         if 'user_id' in vals:
             # Update the profile pictures with user, except if provided 
             vals.update(self._sync_user(self.env['res.users'].browse(vals['user_id']),
@@ -431,8 +435,6 @@ class HrEmployeePrivate(models.Model):
             'departure_description': False,
             'departure_date': False
         })
-        archived_addresses = unarchived_employees.mapped('address_home_id').filtered(lambda addr: not addr.active)
-        archived_addresses.toggle_active()
 
         archived_employees = self.filtered(lambda e: not e.active)
         if archived_employees:
@@ -474,22 +476,6 @@ class HrEmployeePrivate(models.Model):
         for employee in self:
             employee.barcode = '041'+"".join(choice(digits) for i in range(9))
 
-    @api.depends('address_home_id', 'user_partner_id')
-    def _compute_related_contacts(self):
-        super()._compute_related_contacts()
-        for employee in self:
-            employee.related_contact_ids |= employee.address_home_id | employee.user_partner_id
-
-    @api.depends('address_home_id.parent_id')
-    def _compute_is_address_home_a_company(self):
-        """Checks that chosen address (res.partner) is not linked to a company.
-        """
-        for employee in self:
-            try:
-                employee.is_address_home_a_company = employee.address_home_id.parent_id.id is not False
-            except AccessError:
-                employee.is_address_home_a_company = False
-
     def _get_tz(self):
         # Finds the first valid timezone in his tz, his work hours tz,
         #  the company calendar tz or UTC and returns it as a string

--- a/addons/hr/models/hr_employee_base.py
+++ b/addons/hr/models/hr_employee_base.py
@@ -31,8 +31,6 @@ class HrEmployeeBase(models.AbstractModel):
     mobile_phone = fields.Char('Work Mobile', compute="_compute_work_contact_details", store=True, inverse='_inverse_work_contact_details')
     work_email = fields.Char('Work Email', compute="_compute_work_contact_details", store=True, inverse='_inverse_work_contact_details')
     work_contact_id = fields.Many2one('res.partner', 'Work Contact', copy=False)
-    related_contact_ids = fields.Many2many('res.partner', 'Related Contacts', compute='_compute_related_contacts')
-    related_contacts_count = fields.Integer('Number of related contacts', compute='_compute_related_contacts_count')
     work_location_id = fields.Many2one('hr.work.location', 'Work Location', compute="_compute_work_location_id", store=True, readonly=False,
     domain="[('address_id', '=', address_id), '|', ('company_id', '=', False), ('company_id', '=', company_id)]")
     user_id = fields.Many2one('res.users')
@@ -174,26 +172,6 @@ class HrEmployeeBase(models.AbstractModel):
                     'mobile': employee.mobile_phone,
                 })
 
-    @api.depends('work_contact_id')
-    def _compute_related_contacts(self):
-        for employee in self:
-            employee.related_contact_ids = employee.work_contact_id
-
-    @api.depends('related_contact_ids')
-    def _compute_related_contacts_count(self):
-        for employee in self:
-            employee.related_contacts_count = len(employee.related_contact_ids)
-
-    def action_related_contacts(self):
-        self.ensure_one()
-        return {
-            'name': _("Related Contacts"),
-            'type': 'ir.actions.act_window',
-            'view_mode': 'kanban,tree,form',
-            'res_model': 'res.partner',
-            'domain': [('id', 'in', self.related_contact_ids.ids)]
-        }
-
     @api.depends('company_id')
     def _compute_address_id(self):
         for employee in self:

--- a/addons/hr/models/hr_employee_public.py
+++ b/addons/hr/models/hr_employee_public.py
@@ -25,7 +25,6 @@ class HrEmployeePublic(models.Model):
     work_phone = fields.Char(readonly=True)
     work_email = fields.Char(readonly=True)
     work_contact_id = fields.Many2one(readonly=True)
-    related_contact_ids = fields.Many2many(readonly=True)
     work_location_id = fields.Many2one(readonly=True)
     user_id = fields.Many2one(readonly=True)
     resource_id = fields.Many2one(readonly=True)
@@ -57,12 +56,6 @@ class HrEmployeePublic(models.Model):
         for employee in self:
             employee.employee_id = self.env['hr.employee'].browse(employee.id)
 
-    @api.depends('user_partner_id')
-    def _compute_related_contacts(self):
-        super()._compute_related_contacts()
-        for employee in self:
-            employee.related_contact_ids |= employee.user_partner_id
-
     @api.model
     def _get_fields(self):
         return ','.join('emp.%s' % name for name, field in self._fields.items() if field.store and field.type not in ['many2many', 'one2many'])

--- a/addons/hr/models/res_partner.py
+++ b/addons/hr/models/res_partner.py
@@ -2,30 +2,16 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import fields, models, _
-from odoo.exceptions import AccessError
 
 
 class Partner(models.Model):
     _inherit = ['res.partner']
 
     employee_ids = fields.One2many(
-        'hr.employee', 'address_home_id', string='Employees', groups="hr.group_hr_user",
+        'hr.employee', 'work_contact_id', string='Employees', groups="hr.group_hr_user",
         help="Related employees based on their private address")
     employees_count = fields.Integer(compute='_compute_employees_count', groups="hr.group_hr_user")
 
-    def _compute_display_name(self):
-        """ Override to allow an employee to see its private address in his profile.
-            This avoids to relax access rules on `res.parter` and to add an `ir.rule`.
-            (advantage in both security and performance).
-            Use a try/except instead of systematically checking to minimize the impact on performance.
-            """
-        try:
-            super()._compute_display_name()
-        except AccessError as e:
-            if len(self) == 1 and self in self.env.user.employee_ids.mapped('address_home_id'):
-                super(Partner, self.sudo())._compute_display_name()
-            raise e
-
     def _compute_employees_count(self):
         for partner in self:
             partner.employees_count = len(partner.employee_ids)

--- a/addons/hr/models/res_users.py
+++ b/addons/hr/models/res_users.py
@@ -12,7 +12,6 @@ HR_READABLE_FIELDS = [
     'active',
     'child_ids',
     'employee_id',
-    'address_home_id',
     'employee_ids',
     'employee_parent_id',
     'hr_presence_state',
@@ -21,6 +20,7 @@ HR_READABLE_FIELDS = [
     'can_edit',
     'is_system',
     'employee_resource_calendar_id',
+    'work_contact_id',
 ]
 
 HR_WRITABLE_FIELDS = [
@@ -31,6 +31,8 @@ HR_WRITABLE_FIELDS = [
     'private_state_id',
     'private_zip',
     'private_country_id',
+    'private_phone',
+    'private_email',
     'address_id',
     'barcode',
     'birthday',
@@ -46,9 +48,7 @@ HR_WRITABLE_FIELDS = [
     'employee_country_id',
     'gender',
     'identification_id',
-    'is_address_home_a_company',
     'job_title',
-    'private_email',
     'km_home_work',
     'marital',
     'mobile_phone',
@@ -56,7 +56,6 @@ HR_WRITABLE_FIELDS = [
     'employee_parent_id',
     'passport_id',
     'permit_no',
-    'employee_phone',
     'pin',
     'place_of_birth',
     'spouse_birthdate',
@@ -90,26 +89,25 @@ class User(models.Model):
     job_title = fields.Char(related='employee_id.job_title', readonly=False, related_sudo=False)
     work_phone = fields.Char(related='employee_id.work_phone', readonly=False, related_sudo=False)
     mobile_phone = fields.Char(related='employee_id.mobile_phone', readonly=False, related_sudo=False)
-    employee_phone = fields.Char(related='employee_id.phone', readonly=False, related_sudo=False)
     work_email = fields.Char(related='employee_id.work_email', readonly=False, related_sudo=False)
     category_ids = fields.Many2many(related='employee_id.category_ids', string="Employee Tags", readonly=False, related_sudo=False)
     department_id = fields.Many2one(related='employee_id.department_id', readonly=False, related_sudo=False)
     address_id = fields.Many2one(related='employee_id.address_id', readonly=False, related_sudo=False)
+    work_contact_id = fields.Many2one(related='employee_id.work_contact_id', readonly=False, related_sudo=False)
     work_location_id = fields.Many2one(related='employee_id.work_location_id', readonly=False, related_sudo=False)
     employee_parent_id = fields.Many2one(related='employee_id.parent_id', readonly=False, related_sudo=False)
     coach_id = fields.Many2one(related='employee_id.coach_id', readonly=False, related_sudo=False)
-    address_home_id = fields.Many2one(related='employee_id.address_home_id', readonly=False, related_sudo=False)
-    private_street = fields.Char(related='address_home_id.street', string="Private Street", readonly=False, related_sudo=False)
-    private_street2 = fields.Char(related='address_home_id.street2', string="Private Street2", readonly=False, related_sudo=False)
-    private_city = fields.Char(related='address_home_id.city', string="Private City", readonly=False, related_sudo=False)
+    private_street = fields.Char(related='employee_id.private_street', string="Private Street", readonly=False, related_sudo=False)
+    private_street2 = fields.Char(related='employee_id.private_street2', string="Private Street2", readonly=False, related_sudo=False)
+    private_city = fields.Char(related='employee_id.private_city', string="Private City", readonly=False, related_sudo=False)
     private_state_id = fields.Many2one(
-        related='address_home_id.state_id', string="Private State", readonly=False, related_sudo=False,
+        related='employee_id.private_state_id', string="Private State", readonly=False, related_sudo=False,
         domain="[('country_id', '=?', private_country_id)]")
-    private_zip = fields.Char(related='address_home_id.zip', readonly=False, string="Private Zip", related_sudo=False)
-    private_country_id = fields.Many2one(related='address_home_id.country_id', string="Private Country", readonly=False, related_sudo=False)
-    is_address_home_a_company = fields.Boolean(related='employee_id.is_address_home_a_company', readonly=False, related_sudo=False)
-    private_email = fields.Char(related='address_home_id.email', string="Private Email", readonly=False)
-    private_lang = fields.Selection(related='address_home_id.lang', string="Employee Lang", readonly=False)
+    private_zip = fields.Char(related='employee_id.private_zip', readonly=False, string="Private Zip", related_sudo=False)
+    private_country_id = fields.Many2one(related='employee_id.private_country_id', string="Private Country", readonly=False, related_sudo=False)
+    private_phone = fields.Char(related='employee_id.private_phone', readonly=False, related_sudo=False)
+    private_email = fields.Char(related='employee_id.private_email', string="Private Email", readonly=False)
+    private_lang = fields.Selection(related='employee_id.lang', string="Employee Lang", readonly=False)
     km_home_work = fields.Integer(related='employee_id.km_home_work', readonly=False, related_sudo=False)
     # res.users already have a field bank_account_id and country_id from the res.partner inheritance: don't redefine them
     employee_bank_account_id = fields.Many2one(related='employee_id.bank_account_id', string="Employee's Bank Account Number", related_sudo=False, readonly=False)
