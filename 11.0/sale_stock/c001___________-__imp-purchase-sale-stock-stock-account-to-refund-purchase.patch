PR: https://github.com/odoo/odoo/pull/

From: 49c159a9060af25b49669d3b18079a95fac6229b
From: Srushti Patel
Date: 2017-04-25 09:08:14

Breaking data model changes scores: del:4 + add:0, change matches:
-    to_refund_so = fields.Boolean(
-    _inherit = "stock.return.picking"
-    _inherit = "stock.return.picking.line"
-    to_refund_so = fields.Boolean(string="To Refund", help='Trigger a decrease of the delivered quantity in the associated Sales Order')

Total Changes: 27

[IMP] purchase, sale_stock, stock_account: to refund purchase

When we have purchase orders and we return some products to the
supplier, we now have the possibilty to set those moves as 'to refund'
and so the quantity received is decreased.

Because the feature 'to refund' already exists on the sale orders, we
will generalize it in the module 'stock_account' which is a dependency
of both 'sale_stock' and 'purchase' which are the both module that use
the feature 'to refund'.

================================= pseudo patch: =================================

--- a/addons/sale_stock/models/sale_order.py
+++ b/addons/sale_stock/models/sale_order.py
@@ -192,7 +192,7 @@ class SaleOrderLine(models.Model):
             if move.location_dest_id.usage == "customer":
                 if not move.origin_returned_move_id:
                     qty += move.product_uom._compute_quantity(move.product_uom_qty, self.product_uom)
-            elif move.location_dest_id.usage == "internal" and move.to_refund_so:
+            elif move.location_dest_id.usage == "internal" and move.to_refund:
                 qty -= move.product_uom._compute_quantity(move.product_uom_qty, self.product_uom)
         return qty
 

--- a/addons/sale_stock/models/stock.py
+++ b/addons/sale_stock/models/stock.py
@@ -13,10 +13,6 @@ class StockLocationRoute(models.Model):
 class StockMove(models.Model):
     _inherit = "stock.move"
 
-    to_refund_so = fields.Boolean(
-        "To Refund in SO", default=False,
-        help='Trigger a decrease of the delivered quantity in the associated Sales Order')
-
     @api.multi
     def action_done(self):
         result = super(StockMove, self).action_done()
@@ -66,24 +62,3 @@ class StockPicking(models.Model):
                     values={'self': backorder, 'origin': order},
                     subtype_id=self.env.ref('mail.mt_note').id)
         return res
-
-
-class StockReturnPicking(models.TransientModel):
-    _inherit = "stock.return.picking"
-
-    @api.multi
-    def _create_returns(self):
-        new_picking_id, pick_type_id = super(StockReturnPicking, self)._create_returns()
-        new_picking = self.env['stock.picking'].browse([new_picking_id])
-        for move in new_picking.move_lines:
-            return_picking_line = self.product_return_moves.filtered(lambda r: r.move_id == move.origin_returned_move_id)
-            if return_picking_line and return_picking_line.to_refund_so:
-                move.to_refund_so = True
-
-        return new_picking_id, pick_type_id
-
-
-class StockReturnPickingLine(models.TransientModel):
-    _inherit = "stock.return.picking.line"
-
-    to_refund_so = fields.Boolean(string="To Refund", help='Trigger a decrease of the delivered quantity in the associated Sales Order')
