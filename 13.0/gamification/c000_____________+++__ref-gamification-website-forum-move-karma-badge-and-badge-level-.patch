PR: https://github.com/odoo/odoo/pull/

From: 3b9dcb6d8d8c50000828f3503e69c567d0daa98c
From: David Beguin
Date: 2019-02-07 12:11:44

Structural Changes: 12
Total Changes: 87

[REF] gamification, website_forum: move karma, badge and badge level to gamification

Purpose of this commit is to prepare addition of gamification in slides /
eLearning platform. In order to be able to use karma and the badges in other
modules we move those models in gamification.

Partial commit linked to eLearning project. Main specifications related
to gamification and user profile can be found on task 1922159 (PR #30514).
Main specifications related to eLearning can be found on task 1902304
(PR #29876).

================================= pseudo patch: =================================

--- a/addons/gamification/models/__init__.py
+++ b/addons/gamification/models/__init__.py
@@ -4,3 +4,5 @@
 from . import goal
 from . import challenge
 from . import badge
+from . import gamification_karma_rank
+from . import res_users

--- a/addons/gamification/models/badge.py
+++ b/addons/gamification/models/badge.py
@@ -4,10 +4,11 @@
 import logging
 from datetime import date
 
-from odoo import api, fields, models, _, exceptions
+from odoo import api, tools, fields, models, _, exceptions
 
 _logger = logging.getLogger(__name__)
 
+
 class BadgeUser(models.Model):
     """User having received a badge"""
 
@@ -22,6 +23,9 @@ class BadgeUser(models.Model):
     challenge_id = fields.Many2one('gamification.challenge', string='Challenge originating', help="If this badge was rewarded through a challenge")
     comment = fields.Text('Comment')
     badge_name = fields.Char(related='badge_id.name', string="Badge Name", readonly=False)
+    level = fields.Selection(
+        [('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold')],
+        string='Badge Level', related="badge_id.level", store=True, readonly=True)
 
     def _send_badge(self):
         """Send a notification to a user for receiving a badge
@@ -66,7 +70,20 @@ class GamificationBadge(models.Model):
     name = fields.Char('Badge', required=True, translate=True)
     active = fields.Boolean('Active', default=True)
     description = fields.Text('Description', translate=True)
-    image = fields.Binary("Image", help="This field holds the image used for the badge, limited to 256x256")
+    image = fields.Binary("Image", help="This field holds the image used for the badge.")
+    image_medium = fields.Binary(
+        "Medium-sized badge image",
+        help="Medium-sized image of the badge. It is automatically "
+             "resized as a 128x128px image, with aspect ratio preserved. "
+             "Use this field in form views or some kanban views.")
+    image_small = fields.Binary(
+        "Small-sized badge image",
+        help="Small-sized image of the badge. It is automatically "
+             "resized as a 64x64px image, with aspect ratio preserved. "
+             "Use this field anywhere a small image is required.")
+    level = fields.Selection([
+        ('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold')],
+        string='Forum Badge Level', default='bronze')
 
     rule_auth = fields.Selection([
             ('everyone', 'Everyone'),
@@ -120,6 +137,17 @@ class GamificationBadge(models.Model):
         "Remaining Sending Allowed", compute='_remaining_sending_calc',
         help="If a maximum is set")
 
+    @api.model_create_multi
+    def create(self, values_list):
+        for vals in values_list:
+            tools.image_resize_images(vals)
+        return super(GamificationBadge, self).create(values_list)
+
+    @api.multi
+    def write(self, vals):
+        tools.image_resize_images(vals)
+        return super(GamificationBadge, self).write(vals)
+
     @api.depends('owner_ids')
     def _get_owners_info(self):
         """Return:

--- a/None
+++ b/addons/gamification/models/gamification_karma_rank.py
@@ -0,0 +1,9 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from werkzeug.exceptions import Forbidden
+
+
+class KarmaError(Forbidden):
+    """ Karma-related error, used for forum and posts. """
+    pass

--- a/None
+++ b/addons/gamification/models/res_users.py
@@ -0,0 +1,44 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class Users(models.Model):
+    _inherit = 'res.users'
+
+    karma = fields.Integer('Karma', default=0)
+    badge_ids = fields.One2many('gamification.badge.user', 'user_id', string='Badges', copy=False)
+    gold_badge = fields.Integer('Gold badges count', compute="_get_user_badge_level")
+    silver_badge = fields.Integer('Silver badges count', compute="_get_user_badge_level")
+    bronze_badge = fields.Integer('Bronze badges count', compute="_get_user_badge_level")
+
+    @api.multi
+    def add_karma(self, karma):
+        for user in self:
+            user.karma += karma
+        return True
+
+    @api.multi
+    @api.depends('badge_ids')
+    def _get_user_badge_level(self):
+        """ Return total badge per level of users
+        TDE CLEANME: shouldn't check type is forum ? """
+        for user in self:
+            user.gold_badge = 0
+            user.silver_badge = 0
+            user.bronze_badge = 0
+
+        self.env.cr.execute("""
+            SELECT bu.user_id, b.level, count(1)
+            FROM gamification_badge_user bu, gamification_badge b
+            WHERE bu.user_id IN %s
+              AND bu.badge_id = b.id
+              AND b.level IS NOT NULL
+            GROUP BY bu.user_id, b.level
+            ORDER BY bu.user_id;
+        """, [tuple(self.ids)])
+
+        for (user_id, level, count) in self.env.cr.fetchall():
+            # levels are gold, silver, bronze but fields have _badge postfix
+            self.browse(user_id)['{}_badge'.format(level)] = count
