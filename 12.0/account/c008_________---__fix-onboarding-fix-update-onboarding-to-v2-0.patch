PR: https://github.com/odoo/odoo/pull/

From: 89e358caa8627c5eff21ee63015dece0997db2b4
From: eco-odoo
Date: 2018-08-10 14:08:47

Breaking data model changes scores: del:13 + add:0, change matches:
-    account_setup_bank_data_done = fields.Boolean(string='Bank setup marked as done', related='company_id.account_setup_bank_data_done', help="Technical field used in the special view for the setup bar step.")
-    account_setup_company_data_done = fields.Boolean(string='Company Setup Marked As Done', help="Technical field holding the status of the company setup step.")
-    account_setup_bank_data_done = fields.Boolean('Bank Setup Marked As Done', help="Technical field holding the status of the bank setup step.")
-    account_setup_fy_data_done = fields.Boolean('Financial Year Setup Marked As Done', help="Technical field holding the status of the financial year setup step.")
-    account_setup_coa_done = fields.Boolean(string='Chart of Account Checked', help="Technical field holding the status of the chart of account setup step.")
-    account_setup_bar_closed = fields.Boolean(string='Setup Bar Closed', help="Technical field set to True when setup bar has been closed by the user.")
-    account_invoice_onboarding_closed = fields.Boolean(
-    account_invoice_onboarding_folded = fields.Boolean(
-    account_onboarding_invoice_layout_done = fields.Boolean("Onboarding invoice layout step done",
-    account_onboarding_sample_invoice_sent = fields.Boolean(
-    account_dashboard_onboarding_closed = fields.Boolean(
-    account_dashboard_onboarding_folded = fields.Boolean(
-    account_hide_setup_bar = fields.Boolean(string='Hide Setup Bar', related='company_id.account_setup_bar_closed',help="Tick if you wish to hide the setup bar on the dashboard")

Total Changes: 175

[FIX] onboarding: Fix/Update onboarding to v2.0

Specification
=============

* Fix lots of bug due to the BS4 migration
* Improve steps
* Validate some steps (Like the company configuration) in all the
  onboarding bars if done in one onboarding bar.
* Only animate the confetti one time if a step is done, instead of
  on each view loading

For more information, see: https://www.odoo.com/web#id=1869513&action=333&active_id=965&model=project.task&view_type=form&menu_id=4720

================================= pseudo patch: =================================

--- a/addons/account/models/account_invoice.py
+++ b/addons/account/models/account_invoice.py
@@ -607,7 +607,7 @@ class AccountInvoice(models.Model):
     def message_post(self, **kwargs):
         if self.env.context.get('mark_invoice_as_sent'):
             self.filtered(lambda inv: not inv.sent).write({'sent': True})
-            self.env.user.company_id.account_onboarding_sample_invoice_sent = True
+            self.env.user.company_id.set_onboarding_step_done('account_onboarding_sample_invoice_state')
         return super(AccountInvoice, self.with_context(mail_post_autofollow=True)).message_post(**kwargs)
 
     @api.model

--- a/addons/account/models/account_journal_dashboard.py
+++ b/addons/account/models/account_journal_dashboard.py
@@ -26,7 +26,6 @@ class account_journal(models.Model):
     kanban_dashboard_graph = fields.Text(compute='_kanban_dashboard_graph')
     show_on_dashboard = fields.Boolean(string='Show journal on dashboard', help="Whether this journal should be displayed on the dashboard or not", default=True)
     color = fields.Integer("Color Index", default=0)
-    account_setup_bank_data_done = fields.Boolean(string='Bank setup marked as done', related='company_id.account_setup_bank_data_done', help="Technical field used in the special view for the setup bar step.")
 
     def _graph_title_and_key(self):
         if self.type in ['sale', 'purchase']:
@@ -434,23 +433,10 @@ class account_journal(models.Model):
     #####################
     # Setup Steps Stuff #
     #####################
-    @api.model
-    def retrieve_account_dashboard_setup_bar(self):
-        """ Returns the data used by the setup bar on the Accounting app dashboard."""
-        company = self.env.user.company_id
-        return {
-            'show_setup_bar': not company.account_setup_bar_closed,
-            'company': company.account_setup_company_data_done,
-            'bank': company.account_setup_bank_data_done,
-            'fiscal_year': company.account_setup_fy_data_done,
-            'chart_of_accounts': company.account_setup_coa_done,
-            'initial_balance': company.opening_move_posted(),
-        }
-
     def mark_bank_setup_as_done_action(self):
         """ Marks the 'bank setup' step as done in the setup bar and in the company."""
-        self.company_id.account_setup_bank_data_done = True
+        self.company_id.set_onboarding_step_done('account_setup_bank_data_state')
 
     def unmark_bank_setup_as_done_action(self):
         """ Marks the 'bank setup' step as not done in the setup bar and in the company."""
-        self.company_id.account_setup_bank_data_done = False
+        self.company_id.account_setup_bank_data_state = 'not_done'

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -71,33 +71,45 @@ Best Regards,'''))
     account_opening_journal_id = fields.Many2one(string='Opening Journal', comodel_name='account.journal', related='account_opening_move_id.journal_id', help="Journal where the opening entry of this company's accounting has been posted.")
     account_opening_date = fields.Date(string='Opening Date', related='account_opening_move_id.date', help="Date at which the opening entry of this company's accounting has been posted.")
 
-    #Fields marking the completion of a setup step
-    account_setup_company_data_done = fields.Boolean(string='Company Setup Marked As Done', help="Technical field holding the status of the company setup step.")
-    account_setup_bank_data_done = fields.Boolean('Bank Setup Marked As Done', help="Technical field holding the status of the bank setup step.")
-    account_setup_fy_data_done = fields.Boolean('Financial Year Setup Marked As Done', help="Technical field holding the status of the financial year setup step.")
-    account_setup_coa_done = fields.Boolean(string='Chart of Account Checked', help="Technical field holding the status of the chart of account setup step.")
-    account_setup_bar_closed = fields.Boolean(string='Setup Bar Closed', help="Technical field set to True when setup bar has been closed by the user.")
-
-    # account invoice onboarding
-    account_invoice_onboarding_closed = fields.Boolean(
-        string="Account invoice onboarding panel closed",
-        help="Refers to the account invoice onboarding panel closed state.")
-    account_invoice_onboarding_folded = fields.Boolean(
-        string="Account invoice onboarding panel folded",
-        help="Refers to the account invoice onboarding panel folded state.")
-
-    account_onboarding_invoice_layout_done = fields.Boolean("Onboarding invoice layout step done",
-        compute="_compute_account_onboarding_invoice_layout_done")
-    account_onboarding_sample_invoice_sent = fields.Boolean(
-        "Onboarding sample invoice step completed", default=False)
+    # Fields marking the completion of a setup step
+    # YTI FIXME : The selection should be factorize as a static list in base, like ONBOARDING_STEP_STATES
+    account_setup_bank_data_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done")], string="State of the onboarding bank data step", default='not_done')
+    account_setup_fy_data_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done")], string="State of the onboarding fiscal year step", default='not_done')
+    account_setup_coa_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done")], string="State of the onboarding charts of account step", default='not_done')
+    account_onboarding_invoice_layout_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done")], string="State of the onboarding invoice layout step", default='not_done')
+    account_onboarding_sample_invoice_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done")], string="State of the onboarding sample invoice step", default='not_done')
+    account_onboarding_sale_tax_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done")], string="State of the onboarding sale tax step", default='not_done')
 
     # account dashboard onboarding
-    account_dashboard_onboarding_closed = fields.Boolean(
-        string="Account dashboard onboarding panel closed",
-        help="Refers to the account dashboard onboarding panel closed state.")
-    account_dashboard_onboarding_folded = fields.Boolean(
-        string="Account dashboard onboarding panel folded",
-        help="Refers to the account dashboard onboarding panel folded state.")
+    account_invoice_onboarding_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done"), ('closed', "Closed")], string="State of the account invoice onboarding panel", default='not_done')
+    account_dashboard_onboarding_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done"), ('closed', "Closed")], string="State of the account dashboard onboarding panel", default='not_done')
+
+    def get_and_update_account_invoice_onboarding_state(self):
+        """ This method is called on the controller rendering method and ensures that the animations
+            are displayed only one time. """
+        return self.get_and_update_onbarding_state(
+            'account_invoice_onboarding_state',
+            self.get_account_invoice_onboarding_steps_states_names()
+        )
+
+    # YTI FIXME: Define only one method that returns {'account': [], 'sale': [], ...}
+    def get_account_invoice_onboarding_steps_states_names(self):
+        """ Necessary to add/edit steps from other modules (payment acquirer in this case). """
+        return [
+            'base_onboarding_company_state',
+            'account_onboarding_invoice_layout_state',
+            'account_onboarding_sample_invoice_state',
+        ]
+
+    def get_and_update_account_dashboard_onboarding_state(self):
+        """ This method is called on the controller rendering method and ensures that the animations
+            are displayed only one time. """
+        return self.get_and_update_onbarding_state('account_dashboard_onboarding_state', [
+            'base_onboarding_company_state',
+            'account_setup_bank_data_state',
+            'account_setup_fy_data_state',
+            'account_setup_coa_state',
+        ])
 
     @api.multi
     def _check_lock_dates(self, vals):
@@ -260,20 +272,6 @@ Best Regards,'''))
 
         return super(ResCompany, self).write(values)
 
-    @api.model
-    def setting_init_company_action(self):
-        """ Called by the 'Company Data' button of the setup bar."""
-        company = self.env.user.company_id
-        view_id = self.env.ref('account.setup_view_company_form').id
-        return {'type': 'ir.actions.act_window',
-                'name': _('Company Data'),
-                'res_model': 'res.company',
-                'target': 'new',
-                'view_mode': 'form',
-                'res_id': company.id,
-                'views': [[view_id, 'form']],
-        }
-
     @api.model
     def setting_init_bank_account_action(self):
         """ Called by the 'Bank Accounts' button of the setup bar."""
@@ -308,7 +306,7 @@ Best Regards,'''))
     def setting_chart_of_accounts_action(self):
         """ Called by the 'Chart of Accounts' button of the setup bar."""
         company = self.env.user.company_id
-        company.account_setup_coa_done = True
+        company.set_onboarding_step_done('account_setup_coa_state')
 
         # If an opening move has already been posted, we open the tree view showing all the accounts
         if company.opening_move_posted():
@@ -332,11 +330,6 @@ Best Regards,'''))
             'domain': domain,
         }
 
-    @api.model
-    def setting_hide_setup_bar(self):
-        """ Called by the cross button of the setup bar, to close it."""
-        self.env.user.company_id.account_setup_bar_closed = True
-
     @api.model
     def create_op_move_if_non_existant(self):
         """ Creates an empty opening move in 'draft' state for the current company
@@ -356,14 +349,6 @@ Best Regards,'''))
                 'journal_id': default_journal.id,
             })
 
-    def mark_company_setup_as_done_action(self):
-        """ Marks the 'company' setup step as completed."""
-        self.account_setup_company_data_done = True
-
-    def unmark_company_setup_as_done_action(self):
-        """ Marks the 'company' setup step as uncompleted."""
-        self.account_setup_company_data_done = False
-
     def opening_move_posted(self):
         """ Returns true if this company has an opening account move and this move is posted."""
         return bool(self.account_opening_move_id) and self.account_opening_move_id.state == 'posted'
@@ -430,36 +415,15 @@ Best Regards,'''))
                         'credit': debit_diff,
                     })
 
-    @api.depends('logo', 'account_invoice_onboarding_closed')
-    def _compute_account_onboarding_invoice_layout_done(self):
-        """ The invoice onboarding step is marked as done if logo is filled
-            and different from the default one. """
-        for record in self:
-            record.account_onboarding_invoice_layout_done = \
-                record.account_invoice_onboarding_closed or (
-                    bool(record.logo) and record.logo != record._get_logo())
-
-    @api.model
-    def action_toggle_fold_account_invoice_onboarding(self):
-        """ Toggle the onboarding panel `folded` state. """
-        self.env.user.company_id.account_invoice_onboarding_folded =\
-            not self.env.user.company_id.account_invoice_onboarding_folded
-
     @api.model
     def action_close_account_invoice_onboarding(self):
-        """ Mark the onboarding panel as closed. """
-        self.env.user.company_id.account_invoice_onboarding_closed = True
-
-    @api.model
-    def action_toggle_fold_account_dashboard_onboarding(self):
-        """ Toggle the dashboard onboarding panel `folded` state. """
-        self.env.user.company_id.account_dashboard_onboarding_folded =\
-            not self.env.user.company_id.account_dashboard_onboarding_folded
+        """ Mark the invoice onboarding panel as closed. """
+        self.env.user.company_id.account_invoice_onboarding_state = 'closed'
 
     @api.model
     def action_close_account_dashboard_onboarding(self):
         """ Mark the dashboard onboarding panel as closed. """
-        self.env.user.company_id.account_dashboard_onboarding_closed = True
+        self.env.user.company_id.account_dashboard_onboarding_state = 'closed'
 
     @api.model
     def action_open_account_onboarding_invoice_layout(self):
@@ -468,6 +432,13 @@ Best Regards,'''))
         action['res_id'] = self.env.user.company_id.id
         return action
 
+    @api.model
+    def action_open_account_onboarding_sale_tax(self):
+        """ Onboarding step for the invoice layout. """
+        action = self.env.ref('account.action_open_account_onboarding_sale_tax').read()[0]
+        action['res_id'] = self.env.user.company_id.id
+        return action
+
     @api.model
     def _get_sample_invoice(self):
         """ Get a sample invoice or create one if it does not exist. """
@@ -482,13 +453,7 @@ Best Regards,'''))
 
         if len(sample_invoice) == 0:
             # If there are no existing accounts or no journal, fail
-            account = self.env['account.account'].search([('company_id', '=', company_id)], limit=1)
-            if len(account) == 0:
-                action = self.env.ref('account.action_account_config')
-                msg = _(
-                    "We cannot find a chart of accounts for this company, you should configure it. \n"
-                    "Please go to Account Configuration and select or install a fiscal localization.")
-                raise RedirectWarning(msg, action.id, _("Go to the configuration panel"))
+            account = self.env.user.company_id.get_chart_of_accounts_or_fail()
 
             journal = self.env['account.journal'].search([('company_id', '=', company_id)], limit=1)
             if len(journal) == 0:
@@ -537,3 +502,24 @@ Best Regards,'''))
             'force_email': True,
         }
         return action
+
+    @api.multi
+    def action_save_onboarding_invoice_layout(self):
+        """ Set the onboarding step as done """
+        if bool(self.logo) and self.logo != self._get_logo():
+            self.set_onboarding_step_done('account_onboarding_invoice_layout_state')
+
+    @api.multi
+    def action_save_onboarding_sale_tax(self):
+        """ Set the onboarding step as done """
+        self.set_onboarding_step_done('account_onboarding_sale_tax_state')
+
+    def get_chart_of_accounts_or_fail(self):
+        account = self.env['account.account'].search([('company_id', '=', self.id)], limit=1)
+        if len(account) == 0:
+            action = self.env.ref('account.action_account_config')
+            msg = _(
+                "We cannot find a chart of accounts for this company, you should configure it. \n"
+                "Please go to Account Configuration and select or install a fiscal localization.")
+            raise RedirectWarning(msg, action.id, _("Go to the configuration panel"))
+        return account

--- a/addons/account/models/res_config_settings.py
+++ b/addons/account/models/res_config_settings.py
@@ -74,7 +74,6 @@ class ResConfigSettings(models.TransientModel):
     module_account_taxcloud = fields.Boolean(string="Account TaxCloud")
     tax_exigibility = fields.Boolean(string='Cash Basis', related='company_id.tax_exigibility')
     tax_cash_basis_journal_id = fields.Many2one('account.journal', related='company_id.tax_cash_basis_journal_id', string="Tax Cash Basis Journal")
-    account_hide_setup_bar = fields.Boolean(string='Hide Setup Bar', related='company_id.account_setup_bar_closed',help="Tick if you wish to hide the setup bar on the dashboard")
     invoice_reference_type = fields.Selection(string='Communication',
         related='company_id.invoice_reference_type', help='Default Reference Type on Invoices.')
     account_bank_reconciliation_start = fields.Date(string="Bank Reconciliation Threshold",
