PR: https://github.com/odoo/odoo/pull/166497

From: d0c9ceeb684ac19ff38463ed4abef82420076aac
From: kcv-odoo
Date: 2024-05-29 17:32:09

Structural Changes: 6.9
Total Changes: 80

[IMP] {website_,}event{,booth}_sale: remove product types

Purpose of this commit to clean up product types and remove
`detailed_type` field.

In this commit remove `event` and `event_booth` type and use
service type and move those types in to `service_tracking`
field so now service type field with `service_tracking` equals
to event would be event type product. Since remove of
different kind of types from detailed_type field
`detailed_type` field will contains same type as `type` field
so we can remove `detailed_type` field and use type field as
radio button in UX.

task-3938213

closes odoo/odoo#166497

Related: odoo/enterprise#63064
Related: odoo/upgrade#6065
Signed-off-by: Morgane Demesmaeker <edm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/event_booth_sale/models/__init__.py
+++ b/addons/event_booth_sale/models/__init__.py
@@ -1,11 +1,11 @@
-# -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from . import account_move
-from . import product
 from . import event_booth_registration
 from . import event_booth
 from . import event_booth_category
 from . import event_type_booth
+from . import product_product
+from . import product_template
 from . import sale_order
 from . import sale_order_line

--- a/addons/event_booth_sale/models/event_booth_category.py
+++ b/addons/event_booth_sale/models/event_booth_category.py
@@ -17,7 +17,7 @@ class EventBoothCategory(models.Model):
 
     product_id = fields.Many2one(
         'product.product', string='Product', required=True,
-        domain=[('detailed_type', '=', 'event_booth')], default=_default_product_id,
+        domain=[('service_tracking', '=', 'event_booth')], default=_default_product_id,
         groups="event.group_event_registration_desk")
     price = fields.Float(
         string='Price', compute='_compute_price', digits='Product Price', readonly=False,
@@ -97,7 +97,8 @@ class EventBoothCategory(models.Model):
                 'categ_id': self.env.ref('event_sale.product_category_events').id,
                 'list_price': 100,
                 'standard_price': 0,
-                'detailed_type': 'event_booth',
+                'type': 'service',
+                'service_tracking': 'event_booth',
                 'invoice_policy': 'order',
             }).id
             self.env['ir.model.data'].create({

--- a/addons/event_booth_sale/models/product.py
+++ b/None
@@ -1,31 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, fields, models
-
-
-class ProductTemplate(models.Model):
-    _inherit = 'product.template'
-
-    detailed_type = fields.Selection(selection_add=[
-        ('event_booth', 'Event Booth'),
-    ], ondelete={'event_booth': 'set service'})
-
-    @api.onchange('detailed_type')
-    def _onchange_type_event_booth(self):
-        if self.detailed_type == 'event_booth':
-            self.invoice_policy = 'order'
-
-    def _detailed_type_mapping(self):
-        type_mapping = super()._detailed_type_mapping()
-        type_mapping['event_booth'] = 'service'
-        return type_mapping
-
-
-class Product(models.Model):
-    _inherit = 'product.product'
-
-    @api.onchange('detailed_type')
-    def _onchange_type_event_booth(self):
-        if self.detailed_type == 'event_booth':
-            self.invoice_policy = 'order'

--- a/None
+++ b/addons/event_booth_sale/models/product_product.py
@@ -0,0 +1,10 @@
+from odoo import api, models
+
+
+class Product(models.Model):
+    _inherit = 'product.product'
+
+    @api.onchange('service_tracking')
+    def _onchange_type_event_booth(self):
+        if self.service_tracking == 'event_booth':
+            self.invoice_policy = 'order'

--- a/None
+++ b/addons/event_booth_sale/models/product_template.py
@@ -0,0 +1,14 @@
+from odoo import api, fields, models
+
+
+class ProductTemplate(models.Model):
+    _inherit = 'product.template'
+
+    service_tracking = fields.Selection(selection_add=[
+        ('event_booth', 'Event Booth'),
+    ], ondelete={'event_booth': 'set default'})
+
+    @api.onchange('service_tracking')
+    def _onchange_type_event_booth(self):
+        if self.service_tracking == 'event_booth':
+            self.invoice_policy = 'order'

--- a/addons/event_booth_sale/models/sale_order.py
+++ b/addons/event_booth_sale/models/sale_order.py
@@ -3,6 +3,7 @@
 
 from odoo import api, fields, models, _
 from odoo.exceptions import ValidationError
+from odoo.osv import expression
 
 
 class SaleOrder(models.Model):
@@ -24,9 +25,9 @@ class SaleOrder(models.Model):
     def action_confirm(self):
         res = super(SaleOrder, self).action_confirm()
         for so in self:
-            if not any(line.product_type == 'event_booth' for line in so.order_line):
+            if not any(line.service_tracking == 'event_booth' for line in so.order_line):
                 continue
-            so_lines_missing_booth = so.order_line.filtered(lambda line: line.product_type == 'event_booth' and not line.event_booth_pending_ids)
+            so_lines_missing_booth = so.order_line.filtered(lambda line: line.service_tracking == 'event_booth' and not line.event_booth_pending_ids)
             if so_lines_missing_booth:
                 so_lines_descriptions = "".join(f"\n- {so_line_description.name}" for so_line_description in so_lines_missing_booth)
                 raise ValidationError(_("Please make sure all your event-booth related lines are configured before confirming this order:%s", so_lines_descriptions))
@@ -37,3 +38,12 @@ class SaleOrder(models.Model):
         action = self.env['ir.actions.act_window']._for_xml_id('event_booth.event_booth_action')
         action['domain'] = [('sale_order_id', 'in', self.ids)]
         return action
+
+    def _get_product_catalog_domain(self):
+        """Override of `_get_product_catalog_domain` to extend the domain.
+
+        :returns: A list of tuples that represents a domain.
+        :rtype: list
+        """
+        domain = super()._get_product_catalog_domain()
+        return expression.AND([domain, [('service_tracking', '!=', 'event_booth')]])

--- a/addons/event_booth_sale/models/sale_order_line.py
+++ b/addons/event_booth_sale/models/sale_order_line.py
@@ -22,7 +22,7 @@ class SaleOrderLine(models.Model):
     @api.depends('product_id.type')
     def _compute_is_event_booth(self):
         for record in self:
-            record.is_event_booth = record.product_id.detailed_type == 'event_booth'
+            record.is_event_booth = record.product_id.service_tracking == 'event_booth'
 
     @api.depends('event_booth_ids')
     def _compute_name_short(self):
