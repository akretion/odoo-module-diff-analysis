PR: https://github.com/odoo/odoo/pull/

From: 3f4f77fd9d5c79c21665fa08d703bba7571decd8
From: Adrian Torres
Date: 2018-09-27 10:10:23

Structural Changes: 56
Total Changes: 60

[REF] *: adapt code to new related default behaviour

This commit adapts the business code to changes introduced by
the parent commit in order to keep the same behaviour as before.

All readonly=False fields will have to be checked afterwards to confirm
that the business case requires write access to the source field.

================================= pseudo patch: =================================

--- a/addons/website/models/ir_attachment.py
+++ b/addons/website/models/ir_attachment.py
@@ -13,7 +13,7 @@ class Attachment(models.Model):
     _inherit = "ir.attachment"
 
     # related for backward compatibility with saas-6
-    website_url = fields.Char(string="Website URL", related='local_url', deprecated=True)
+    website_url = fields.Char(string="Website URL", related='local_url', deprecated=True, readonly=False)
     key = fields.Char(help='Technical field used to resolve multiple attachments in a multi-website environment.')
     website_id = fields.Many2one('website')
 

--- a/addons/website/models/res_config_settings.py
+++ b/addons/website/models/res_config_settings.py
@@ -15,40 +15,40 @@ class ResConfigSettings(models.TransientModel):
 
     website_id = fields.Many2one('website', string="website",
                                  default=_default_website, ondelete='cascade')
-    website_name = fields.Char('Website Name', related='website_id.name')
-    website_domain = fields.Char('Website Domain', related='website_id.domain')
-    website_country_group_ids = fields.Many2many(related='website_id.country_group_ids')
-    website_company_id = fields.Many2one(related='website_id.company_id', string='Website Company')
-    language_ids = fields.Many2many(related='website_id.language_ids', relation='res.lang')
+    website_name = fields.Char('Website Name', related='website_id.name', readonly=False)
+    website_domain = fields.Char('Website Domain', related='website_id.domain', readonly=False)
+    website_country_group_ids = fields.Many2many(related='website_id.country_group_ids', readonly=False)
+    website_company_id = fields.Many2one(related='website_id.company_id', string='Website Company', readonly=False)
+    language_ids = fields.Many2many(related='website_id.language_ids', relation='res.lang', readonly=False)
     language_count = fields.Integer(string='Number of languages', compute='_compute_language_count', readonly=True)
     website_default_lang_id = fields.Many2one(
-        string='Default language', related='website_id.default_lang_id',
+        string='Default language', related='website_id.default_lang_id', readonly=False,
         relation='res.lang', required=True,
         oldname='default_lang_id')
     website_default_lang_code = fields.Char(
-        'Default language code', related='website_id.default_lang_code',
+        'Default language code', related='website_id.default_lang_code', readonly=False,
         oldname='default_lang_code')
-    specific_user_account = fields.Boolean(related='website_id.specific_user_account',
+    specific_user_account = fields.Boolean(related='website_id.specific_user_account', readonly=False,
                                            help='Are newly created user accounts website specific')
 
-    google_analytics_key = fields.Char('Google Analytics Key', related='website_id.google_analytics_key')
-    google_management_client_id = fields.Char('Google Client ID', related='website_id.google_management_client_id')
-    google_management_client_secret = fields.Char('Google Client Secret', related='website_id.google_management_client_secret')
+    google_analytics_key = fields.Char('Google Analytics Key', related='website_id.google_analytics_key', readonly=False)
+    google_management_client_id = fields.Char('Google Client ID', related='website_id.google_management_client_id', readonly=False)
+    google_management_client_secret = fields.Char('Google Client Secret', related='website_id.google_management_client_secret', readonly=False)
 
-    cdn_activated = fields.Boolean(related='website_id.cdn_activated')
-    cdn_url = fields.Char(related='website_id.cdn_url')
-    cdn_filters = fields.Text(related='website_id.cdn_filters')
+    cdn_activated = fields.Boolean(related='website_id.cdn_activated', readonly=False)
+    cdn_url = fields.Char(related='website_id.cdn_url', readonly=False)
+    cdn_filters = fields.Text(related='website_id.cdn_filters', readonly=False)
     module_website_version = fields.Boolean("A/B Testing")
     module_website_links = fields.Boolean("Link Trackers")
-    auth_signup_uninvited = fields.Selection("Customer Account", related='website_id.auth_signup_uninvited')
+    auth_signup_uninvited = fields.Selection("Customer Account", related='website_id.auth_signup_uninvited', readonly=False)
 
-    social_twitter = fields.Char(related='website_id.social_twitter')
-    social_facebook = fields.Char(related='website_id.social_facebook')
-    social_github = fields.Char(related='website_id.social_github')
-    social_linkedin = fields.Char(related='website_id.social_linkedin')
-    social_youtube = fields.Char(related='website_id.social_youtube')
-    social_googleplus = fields.Char(related='website_id.social_googleplus')
-    social_instagram = fields.Char(related='website_id.social_instagram')
+    social_twitter = fields.Char(related='website_id.social_twitter', readonly=False)
+    social_facebook = fields.Char(related='website_id.social_facebook', readonly=False)
+    social_github = fields.Char(related='website_id.social_github', readonly=False)
+    social_linkedin = fields.Char(related='website_id.social_linkedin', readonly=False)
+    social_youtube = fields.Char(related='website_id.social_youtube', readonly=False)
+    social_googleplus = fields.Char(related='website_id.social_googleplus', readonly=False)
+    social_instagram = fields.Char(related='website_id.social_instagram', readonly=False)
 
     @api.depends('website_id', 'social_twitter', 'social_facebook', 'social_github', 'social_linkedin', 'social_youtube', 'social_googleplus', 'social_instagram')
     def has_social_network(self):
@@ -67,9 +67,9 @@ class ResConfigSettings(models.TransientModel):
 
     has_social_network = fields.Boolean("Configure Social Network", compute=has_social_network, inverse=inverse_has_social_network)
 
-    favicon = fields.Binary('Favicon', related='website_id.favicon')
+    favicon = fields.Binary('Favicon', related='website_id.favicon', readonly=False)
 
-    google_maps_api_key = fields.Char(related='website_id.google_maps_api_key')
+    google_maps_api_key = fields.Char(related='website_id.google_maps_api_key', readonly=False)
     group_multi_website = fields.Boolean("Multi-website", implied_group="website.group_multi_website")
 
     @api.depends('website_id')

--- a/addons/website/models/website.py
+++ b/addons/website/models/website.py
@@ -56,7 +56,7 @@ class Website(models.Model):
     company_id = fields.Many2one('res.company', string="Company", default=lambda self: self.env.ref('base.main_company').id, required=True)
     language_ids = fields.Many2many('res.lang', 'website_lang_rel', 'website_id', 'lang_id', 'Languages', default=_active_languages)
     default_lang_id = fields.Many2one('res.lang', string="Default Language", default=_default_language, required=True)
-    default_lang_code = fields.Char("Default language code", related='default_lang_id.code', store=True)
+    default_lang_code = fields.Char("Default language code", related='default_lang_id.code', store=True, readonly=False)
     auto_redirect_lang = fields.Boolean('Autoredirect Language', default=True, help="Should users be redirected to their browser's language")
 
     def _default_social_facebook(self):
@@ -98,7 +98,7 @@ class Website(models.Model):
     cdn_activated = fields.Boolean('Content Delivery Network (CDN)')
     cdn_url = fields.Char('CDN Base URL', default='')
     cdn_filters = fields.Text('CDN Filters', default=lambda s: '\n'.join(DEFAULT_CDN_FILTERS), help="URL matching those filters will be rewritten using the CDN Base URL")
-    partner_id = fields.Many2one(related='user_id.partner_id', relation='res.partner', string='Public Partner')
+    partner_id = fields.Many2one(related='user_id.partner_id', relation='res.partner', string='Public Partner', readonly=False)
     menu_id = fields.Many2one('website.menu', compute='_compute_menu', string='Main Menu')
     homepage_id = fields.Many2one('website.page', string='Homepage')
     favicon = fields.Binary(string="Website Favicon", help="This field holds the image used to display a favicon on the website.")
@@ -776,7 +776,7 @@ class WebsitePublishedMixin(models.AbstractModel):
     _name = "website.published.mixin"
     _description = 'Website Published Mixin'
 
-    website_published = fields.Boolean('Visible on current website', related='is_published')
+    website_published = fields.Boolean('Visible on current website', related='is_published', readonly=False)
     is_published = fields.Boolean('Is published')
     website_url = fields.Char('Website URL', compute='_compute_website_url', help='The full URL to access the document through the website.')
 
@@ -815,7 +815,7 @@ class WebsitePublishedMultiMixin(WebsitePublishedMixin):
     website_published = fields.Boolean(compute='_compute_website_published',
                                        inverse='_inverse_website_published',
                                        search='_search_website_published',
-                                       related=False)
+                                       related=False, readonly=False)
 
     @api.multi
     @api.depends('is_published', 'website_id')
@@ -870,7 +870,7 @@ class Page(models.Model):
     header_color = fields.Char()
 
     # don't use mixin website_id but use website_id on ir.ui.view instead
-    website_id = fields.Many2one(related='view_id.website_id', store=True)
+    website_id = fields.Many2one(related='view_id.website_id', store=True, readonly=False)
 
     @api.one
     def _compute_homepage(self):
