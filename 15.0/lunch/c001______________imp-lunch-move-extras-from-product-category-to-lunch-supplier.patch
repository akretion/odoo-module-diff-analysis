PR: https://github.com/odoo/odoo/pull/

From: 95ae10e8ef20af4f4a27881bd29412af025f0de3
From: Yannick Tivisse
Date: 2021-07-16 10:02:56

Breaking data model changes score: 2, change matches:
-    price = fields.Float('Price', digits='Account', required=True)
-    category_id = fields.Many2one('lunch.product.category', ondelete='cascade')

Total Changes: 93

[IMP] lunch: Move extras from product category to lunch supplier

================================= pseudo patch: =================================

--- a/addons/lunch/models/lunch_order.py
+++ b/addons/lunch/models/lunch_order.py
@@ -41,12 +41,12 @@ class LunchOrder(models.Model):
     display_toppings = fields.Text('Extras', compute='_compute_display_toppings', store=True)
 
     product_description = fields.Html('Description', related='product_id.description')
-    topping_label_1 = fields.Char(related='product_id.category_id.topping_label_1')
-    topping_label_2 = fields.Char(related='product_id.category_id.topping_label_2')
-    topping_label_3 = fields.Char(related='product_id.category_id.topping_label_3')
-    topping_quantity_1 = fields.Selection(related='product_id.category_id.topping_quantity_1')
-    topping_quantity_2 = fields.Selection(related='product_id.category_id.topping_quantity_2')
-    topping_quantity_3 = fields.Selection(related='product_id.category_id.topping_quantity_3')
+    topping_label_1 = fields.Char(related='product_id.supplier_id.topping_label_1')
+    topping_label_2 = fields.Char(related='product_id.supplier_id.topping_label_2')
+    topping_label_3 = fields.Char(related='product_id.supplier_id.topping_label_3')
+    topping_quantity_1 = fields.Selection(related='product_id.supplier_id.topping_quantity_1')
+    topping_quantity_2 = fields.Selection(related='product_id.supplier_id.topping_quantity_2')
+    topping_quantity_3 = fields.Selection(related='product_id.supplier_id.topping_quantity_3')
     image_1920 = fields.Image(compute='_compute_product_images')
     image_128 = fields.Image(compute='_compute_product_images')
 
@@ -62,10 +62,10 @@ class LunchOrder(models.Model):
 
     @api.depends('category_id')
     def _compute_available_toppings(self):
-        for line in self:
-            line.available_toppings_1 = bool(line.env['lunch.topping'].search_count([('category_id', '=', line.category_id.id), ('topping_category', '=', 1)]))
-            line.available_toppings_2 = bool(line.env['lunch.topping'].search_count([('category_id', '=', line.category_id.id), ('topping_category', '=', 2)]))
-            line.available_toppings_3 = bool(line.env['lunch.topping'].search_count([('category_id', '=', line.category_id.id), ('topping_category', '=', 3)]))
+        for order in self:
+            order.available_toppings_1 = bool(order.env['lunch.topping'].search_count([('supplier_id', '=', order.supplier_id.id), ('topping_category', '=', 1)]))
+            order.available_toppings_2 = bool(order.env['lunch.topping'].search_count([('supplier_id', '=', order.supplier_id.id), ('topping_category', '=', 2)]))
+            order.available_toppings_3 = bool(order.env['lunch.topping'].search_count([('supplier_id', '=', order.supplier_id.id), ('topping_category', '=', 3)]))
 
     def init(self):
         self._cr.execute("""CREATE INDEX IF NOT EXISTS lunch_order_user_product_date ON %s (user_id, product_id, date)"""

--- a/addons/lunch/models/lunch_product_category.py
+++ b/addons/lunch/models/lunch_product_category.py
@@ -22,24 +22,6 @@ class LunchProductCategory(models.Model):
     name = fields.Char('Product Category', required=True, translate=True)
     company_id = fields.Many2one('res.company')
     currency_id = fields.Many2one('res.currency', related='company_id.currency_id')
-    topping_label_1 = fields.Char('Extra 1 Label', required=True, default='Extras')
-    topping_label_2 = fields.Char('Extra 2 Label', required=True, default='Beverages')
-    topping_label_3 = fields.Char('Extra 3 Label', required=True, default='Extra Label 3')
-    topping_ids_1 = fields.One2many('lunch.topping', 'category_id', domain=[('topping_category', '=', 1)])
-    topping_ids_2 = fields.One2many('lunch.topping', 'category_id', domain=[('topping_category', '=', 2)])
-    topping_ids_3 = fields.One2many('lunch.topping', 'category_id', domain=[('topping_category', '=', 3)])
-    topping_quantity_1 = fields.Selection([
-        ('0_more', 'None or More'),
-        ('1_more', 'One or More'),
-        ('1', 'Only One')], 'Extra 1 Quantity', default='0_more', required=True)
-    topping_quantity_2 = fields.Selection([
-        ('0_more', 'None or More'),
-        ('1_more', 'One or More'),
-        ('1', 'Only One')], 'Extra 2 Quantity', default='0_more', required=True)
-    topping_quantity_3 = fields.Selection([
-        ('0_more', 'None or More'),
-        ('1_more', 'One or More'),
-        ('1', 'Only One')], 'Extra 3 Quantity', default='0_more', required=True)
     product_count = fields.Integer(compute='_compute_product_count', help="The number of products related to this category")
     active = fields.Boolean(string='Active', default=True)
     image_1920 = fields.Image(default=_default_image)
@@ -50,25 +32,6 @@ class LunchProductCategory(models.Model):
         for category in self:
             category.product_count = data.get(category.id, 0)
 
-    @api.model
-    def create(self, vals):
-        for topping in vals.get('topping_ids_2', []):
-            topping[2].update({'topping_category': 2})
-        for topping in vals.get('topping_ids_3', []):
-            topping[2].update({'topping_category': 3})
-        return super(LunchProductCategory, self).create(vals)
-
-    def write(self, vals):
-        for topping in vals.get('topping_ids_2', []):
-            topping_values = topping[2]
-            if topping_values:
-                topping_values.update({'topping_category': 2})
-        for topping in vals.get('topping_ids_3', []):
-            topping_values = topping[2]
-            if topping_values:
-                topping_values.update({'topping_category': 3})
-        return super(LunchProductCategory, self).write(vals)
-
     def toggle_active(self):
         """ Archiving related lunch product """
         res = super().toggle_active()

--- a/addons/lunch/models/lunch_supplier.py
+++ b/addons/lunch/models/lunch_supplier.py
@@ -90,6 +90,25 @@ class LunchSupplier(models.Model):
         ('no_delivery', 'No Delivery')
     ], default='no_delivery')
 
+    topping_label_1 = fields.Char('Extra 1 Label', required=True, default='Extras')
+    topping_label_2 = fields.Char('Extra 2 Label', required=True, default='Beverages')
+    topping_label_3 = fields.Char('Extra 3 Label', required=True, default='Extra Label 3')
+    topping_ids_1 = fields.One2many('lunch.topping', 'supplier_id', domain=[('topping_category', '=', 1)])
+    topping_ids_2 = fields.One2many('lunch.topping', 'supplier_id', domain=[('topping_category', '=', 2)])
+    topping_ids_3 = fields.One2many('lunch.topping', 'supplier_id', domain=[('topping_category', '=', 3)])
+    topping_quantity_1 = fields.Selection([
+        ('0_more', 'None or More'),
+        ('1_more', 'One or More'),
+        ('1', 'Only One')], 'Extra 1 Quantity', default='0_more', required=True)
+    topping_quantity_2 = fields.Selection([
+        ('0_more', 'None or More'),
+        ('1_more', 'One or More'),
+        ('1', 'Only One')], 'Extra 2 Quantity', default='0_more', required=True)
+    topping_quantity_3 = fields.Selection([
+        ('0_more', 'None or More'),
+        ('1_more', 'One or More'),
+        ('1', 'Only One')], 'Extra 3 Quantity', default='0_more', required=True)
+
     _sql_constraints = [
         ('automatic_email_time_range',
          'CHECK(automatic_email_time >= 0 AND automatic_email_time <= 12)',
@@ -132,6 +151,11 @@ class LunchSupplier(models.Model):
 
     @api.model_create_multi
     def create(self, vals_list):
+        for vals in vals_list:
+            for topping in vals.get('topping_ids_2', []):
+                topping[2].update({'topping_category': 2})
+            for topping in vals.get('topping_ids_3', []):
+                topping[2].update({'topping_category': 3})
         crons = self.env['ir.cron'].sudo().create([
             {
                 'user_id': self.env.ref('base.user_root').id,
@@ -155,6 +179,14 @@ class LunchSupplier(models.Model):
         return suppliers
 
     def write(self, values):
+        for topping in values.get('topping_ids_2', []):
+            topping_values = topping[2]
+            if topping_values:
+                topping_values.update({'topping_category': 2})
+        for topping in values.get('topping_ids_3', []):
+            topping_values = topping[2]
+            if topping_values:
+                topping_values.update({'topping_category': 3})
         super().write(values)
         if not CRON_DEPENDS.isdisjoint(values):
             self._sync_cron()

--- a/addons/lunch/models/lunch_topping.py
+++ b/addons/lunch/models/lunch_topping.py
@@ -13,8 +13,8 @@ class LunchTopping(models.Model):
     name = fields.Char('Name', required=True)
     company_id = fields.Many2one('res.company', default=lambda self: self.env.company)
     currency_id = fields.Many2one('res.currency', related='company_id.currency_id')
-    price = fields.Float('Price', digits='Account', required=True)
-    category_id = fields.Many2one('lunch.product.category', ondelete='cascade')
+    price = fields.Monetary('Price', required=True)
+    supplier_id = fields.Many2one('lunch.supplier', ondelete='cascade')
     topping_category = fields.Integer('Topping Category', help="This field is a technical field", required=True, default=1)
 
     def name_get(self):
