PR: https://github.com/odoo/odoo/pull/135502

From: bc01c7bcec974ee095f5855f225667645ef40213
From: svs-odoo
Date: 2023-10-26 07:22:56

Breaking data model changes score: 1, change matches:
-    _inherit = ['portal.mixin', 'mail.thread', 'mail.activity.mixin']

Total Changes: 202

[IMP] product,purchase,sale,*: product catalog

This commit makes two major things:

1. Move the product catalog from `sale` to `product`.
It moves the product catalog's code from `sale` to `product` module in
order to be able to use it in other modules.
A mixin, `product.catalog.mixin`, was created for to make other models
catalog compatible.

2. It enables the product's catalog in `purchase`.
In `purchase`, the catalog differs a little bit from `sale`:
- If Unit of Measure is enable, the UoM for each product will appear in
  the catalog;
- If the product purchase's UoM or the purchase order line's UoM is
  different than the default product's UoM, the former one will be
  displayed (in bold so the user can know it's the UoM to refer);
- When opening the product's catalog from a purchase order, the products
  will be filtered by the PO's vendor;
- Some data from the vendor list will be used if appliant: the minimum
  quantity and the price;
- If there is at least one product's packaging, a button will be
  displayed to increase the qty by the packaging's one. If a packaging
  is set on the purchase order line, this one will be used.

task-3373589

Part-of: odoo/odoo#135502

================================= pseudo patch: =================================

--- a/addons/purchase/models/purchase_order.py
+++ b/addons/purchase/models/purchase_order.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
+from collections import defaultdict
 from datetime import datetime
 from dateutil.relativedelta import relativedelta
 
@@ -7,6 +8,7 @@ from markupsafe import escape, Markup
 from werkzeug.urls import url_encode
 
 from odoo import api, fields, models, _
+from odoo.osv import expression
 from odoo.tools import format_amount, format_date, formatLang, groupby
 from odoo.tools.float_utils import float_is_zero
 from odoo.exceptions import UserError, ValidationError
@@ -14,7 +16,7 @@ from odoo.exceptions import UserError, ValidationError
 
 class PurchaseOrder(models.Model):
     _name = "purchase.order"
-    _inherit = ['portal.mixin', 'mail.thread', 'mail.activity.mixin']
+    _inherit = ['portal.mixin', 'product.catalog.mixin', 'mail.thread', 'mail.activity.mixin']
     _description = "Purchase Order"
     _rec_names_search = ['name', 'partner_ref']
     _order = 'priority desc, id desc'
@@ -814,6 +816,85 @@ class PurchaseOrder(models.Model):
             ('mail_reminder_confirmed', '=', False)
         ]).filtered(lambda p: p.mapped('order_line.product_id.product_tmpl_id.type') != ['service'])
 
+    def _default_order_line_values(self):
+        default_data = super()._default_order_line_values()
+        new_default_data = self.env['purchase.order.line']._get_product_catalog_lines_data()
+        return {**default_data, **new_default_data}
+
+    def _get_action_add_from_catalog_extra_context(self):
+        return {
+            **super()._get_action_add_from_catalog_extra_context(),
+            'display_uom': self.env.user.has_group('uom.group_uom'),
+            'precision': self.env['decimal.precision'].precision_get('Product Unit of Measure'),
+            'product_catalog_currency_id': self.currency_id.id,
+            'product_catalog_digits': self.order_line._fields['price_unit'].get_digits(self.env),
+            'search_default_seller_ids': self.partner_id.name,
+        }
+
+    def _get_product_catalog_domain(self):
+        return expression.AND([super()._get_product_catalog_domain(), [('purchase_ok', '=', True)]])
+
+    def _get_product_catalog_order_data(self, products, **kwargs):
+        return {product.id: self._get_product_price_and_data(product) for product in products}
+
+    def _get_product_catalog_record_lines(self, product_ids):
+        grouped_lines = defaultdict(lambda: self.env['purchase.order.line'])
+        for line in self.order_line:
+            if line.display_type or line.product_id.id not in product_ids:
+                continue
+            grouped_lines[line.product_id] |= line
+        return grouped_lines
+
+    def _get_product_price_and_data(self, product):
+        """ Fetch the product's data used by the purchase's catalog.
+
+        :return: the product's price and, if applicable, the minimum quantity to
+                 buy and the product's packaging data.
+        :rtype: dict
+        """
+        self.ensure_one()
+        product_infos = {
+            'price': product.standard_price,
+            'uom': {
+                'display_name': product.uom_id.display_name,
+                'id': product.uom_id.id,
+            },
+        }
+        if product.uom_id != product.uom_po_id:
+            product_infos['purchase_uom'] = {
+                'display_name': product.uom_po_id.display_name,
+                'id': product.uom_po_id.id,
+            }
+        params = {'order_id': self}
+        # Check if there is a price and a minimum quantity for the order's vendor.
+        seller = product._select_seller(
+            partner_id=self.partner_id,
+            quantity=None,
+            date=self.date_order and self.date_order.date(),
+            uom_id=product.uom_id,
+            ordered_by='min_qty',
+            params=params
+        )
+        if seller:
+            product_infos.update(
+                price=seller.price,
+                min_qty=seller.min_qty,
+            )
+        # Check if the product uses some packaging.
+        packaging = self.env['product.packaging'].search(
+            [('product_id', '=', product.id), ('purchase', '=', True)], limit=1
+        )
+        if packaging:
+            qty = packaging.product_uom_id._compute_quantity(packaging.qty, product.uom_po_id)
+            product_infos.update(
+                packaging={
+                    'id': packaging.id,
+                    'name': packaging.display_name,
+                    'qty': qty,
+                }
+            )
+        return product_infos
+
     def get_confirm_url(self, confirm_type=None):
         """Create url for confirm reminder or purchase reception email for sending
         in mail."""
@@ -871,6 +952,47 @@ class PurchaseOrder(models.Model):
         for line, date in updated_dates:
             line._update_date_planned(date)
 
+    def _update_order_line_info(self, product_id, quantity, **kwargs):
+        """ Update purchase order line information for a given product or create
+        a new one if none exists yet.
+        :param int product_id: The product, as a `product.product` id.
+        :return: The unit price of the product, based on the pricelist of the
+                 purchase order and the quantity selected.
+        :rtype: float
+        """
+        self.ensure_one()
+        product_packaging_qty = kwargs.get('product_packaging_qty', False)
+        product_packaging_id = kwargs.get('product_packaging_id', False)
+        pol = self.order_line.filtered(lambda line: line.product_id.id == product_id)
+        if pol:
+            if product_packaging_qty:
+                pol.product_packaging_id = product_packaging_id
+                pol.product_packaging_qty = product_packaging_qty
+            elif quantity != 0:
+                pol.product_qty = quantity
+            elif self.state in ['draft', 'sent']:
+                price_unit = self._get_product_price_and_data(pol.product_id)['price']
+                pol.unlink()
+                return price_unit
+            else:
+                pol.product_qty = 0
+        elif quantity > 0:
+            pol = self.env['purchase.order.line'].create({
+                'order_id': self.id,
+                'product_id': product_id,
+                'product_qty': quantity,
+                'sequence': ((self.order_line and self.order_line[-1].sequence + 1) or 10),  # put it at the end of the order
+            })
+            seller = pol.product_id._select_seller(
+                partner_id=pol.partner_id,
+                quantity=pol.product_qty,
+                date=pol.order_id.date_order and pol.order_id.date_order.date() or fields.Date.context_today(pol),
+                uom_id=pol.product_uom)
+            if seller:
+                # Fix the PO line's price on the seller's one.
+                pol.price_unit = seller.price
+        return pol.price_unit
+
     def _create_update_date_activity(self, updated_dates):
         note = Markup('<p>%s</p>\n') % _('%s modified receipt dates for the following products:', self.partner_id.name)
         for line, date in updated_dates:
@@ -907,3 +1029,13 @@ class PurchaseOrder(models.Model):
         if 'reminder_date_before_receipt' in vals:
             partner_values['reminder_date_before_receipt'] = vals.pop('reminder_date_before_receipt')
         return vals, partner_values
+
+    def _is_readonly(self):
+        """ Return whether the purchase order is read-only or not based on the state.
+        A purchase order is considered read-only if its state is 'cancel'.
+
+        :return: Whether the purchase order is read-only or not.
+        :rtype: bool
+        """
+        self.ensure_one()
+        return self.state == 'cancel'

--- a/addons/purchase/models/purchase_order_line.py
+++ b/addons/purchase/models/purchase_order_line.py
@@ -433,6 +433,10 @@ class PurchaseOrderLine(models.Model):
             price_unit *= self.product_uom.factor / self.product_id.uom_id.factor
         return price_unit
 
+    def action_add_from_catalog(self):
+        order = self.env['purchase.order'].browse(self.env.context.get('order_id'))
+        return order.action_add_from_catalog()
+
     def action_purchase_history(self):
         self.ensure_one()
         action = self.env["ir.actions.actions"]._for_xml_id("purchase.action_purchase_history")
@@ -459,6 +463,70 @@ class PurchaseOrderLine(models.Model):
         else:
             self.product_qty = 1.0
 
+    def _get_product_catalog_lines_data(self):
+        """ Return information about purchase order lines in `self`.
+
+        If `self` is empty, this method returns only the default value(s) needed for the product
+        catalog. In this case, the quantity that equals 0.
+
+        Otherwise, it returns a quantity and a price based on the product of the POL(s) and whether
+        the product is read-only or not.
+
+        A product is considered read-only if the order is considered read-only (see
+        ``PurchaseOrder._is_readonly`` for more details) or if `self` contains multiple records.
+
+        Note: This method cannot be called with multiple records that have different products linked.
+
+        :raise odoo.exceptions.ValueError: ``len(self.product_id) != 1``
+        :rtype: dict
+        :return: A dict with the following structure:
+            {
+                'quantity': float,
+                'price': float,
+                'readOnly': bool,
+                'uom': dict,
+                'purchase_uom': dict,
+                'packaging': dict,
+            }
+        """
+        if len(self) == 1:
+            catalog_info = self.order_id._get_product_price_and_data(self.product_id)
+            uom = {
+                'display_name': self.product_id.uom_id.display_name,
+                'id': self.product_id.uom_id.id,
+            }
+            catalog_info.update(
+                quantity=self.product_qty,
+                price=self.price_unit,
+                readOnly=self.order_id._is_readonly(),
+                uom=uom,
+            )
+            if self.product_id.uom_id != self.product_uom:
+                catalog_info['purchase_uom'] = {
+                'display_name': self.product_uom.display_name,
+                'id': self.product_uom.id,
+            }
+            if self.product_packaging_id:
+                packaging = self.product_packaging_id
+                catalog_info['packaging'] = {
+                    'id': packaging.id,
+                    'name': packaging.display_name,
+                    'qty': packaging.product_uom_id._compute_quantity(packaging.qty, self.product_uom),
+                }
+            return catalog_info
+        elif self:
+            self.product_id.ensure_one()
+            order_line = self[0]
+            catalog_info = order_line.order_id._get_product_price_and_data(order_line.product_id)
+            catalog_info['quantity'] = sum(self.mapped(
+                lambda line: line.product_uom._compute_quantity(
+                    qty=line.product_qty,
+                    to_unit=line.product_id.uom_id,
+            )))
+            catalog_info['readOnly'] = True
+            return catalog_info
+        return {'quantity': 0}
+
     def _get_product_purchase_description(self, product_lang):
         self.ensure_one()
         name = product_lang.display_name
