PR: https://github.com/odoo/odoo/pull/

From: afad149eb8a542b39e9508a458d7aeb43aeb60ed
From: Joseph Caburnay
Date: 2020-05-08 14:27:29

Structural Changes: 20
Total Changes: 279

[REF] *_sale_coupon: create coupon module

This refactoring extracts parts of `sale_coupon` module to create a more
generic module called `coupon`. This new module can be extended in
different sales modules to implement functionalities specific to modules
that extend it.

================================= pseudo patch: =================================

--- a/None
+++ b/addons/sale_coupon/models/__init__.py
@@ -0,0 +1,6 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from . import coupon
+from . import coupon_program
+from . import sale_order

--- a/None
+++ b/addons/sale_coupon/models/coupon.py
@@ -0,0 +1,47 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+
+
+class Coupon(models.Model):
+    _inherit = 'coupon.coupon'
+
+    order_id = fields.Many2one('sale.order', 'Order Reference', readonly=True,
+        help="The sales order from which coupon is generated")
+    sales_order_id = fields.Many2one('sale.order', 'Used in', readonly=True,
+        help="The sales order on which the coupon is applied")
+
+    def _check_coupon_code(self, order):
+        message = {}
+        applicable_programs = order._get_applicable_programs()
+        if self.state == 'used':
+            message = {'error': _('This coupon has already been used (%s).') % (self.code)}
+        elif self.state == 'reserved':
+            message = {'error': _('This coupon %s exists but the origin sales order is not validated yet.') % (self.code)}
+        elif self.state == 'cancel':
+            message = {'error': _('This coupon has been cancelled (%s).') % (self.code)}
+        elif self.state == 'expired' or (self.expiration_date and self.expiration_date < order.date_order.date()):
+            message = {'error': _('This coupon is expired (%s).') % (self.code)}
+        # Minimum requirement should not be checked if the coupon got generated by a promotion program (the requirement should have only be checked to generate the coupon)
+        elif self.program_id.program_type == 'coupon_program' and not self.program_id._filter_on_mimimum_amount(order):
+            message = {'error': _('A minimum of %s %s should be purchased to get the reward') % (self.program_id.rule_minimum_amount, self.program_id.currency_id.name)}
+        elif not self.program_id.active:
+            message = {'error': _('The coupon program for %s is in draft or closed state') % (self.code)}
+        elif self.partner_id and self.partner_id != order.partner_id:
+            message = {'error': _('Invalid partner.')}
+        elif self.program_id in order.applied_coupon_ids.mapped('program_id'):
+            message = {'error': _('A Coupon is already applied for the same reward')}
+        elif self.program_id._is_global_discount_program() and order._is_global_discount_already_applied():
+            message = {'error': _('Global discounts are not cumulable.')}
+        elif self.program_id.reward_type == 'product' and not order._is_reward_in_order_lines(self.program_id):
+            message = {'error': _('The reward products should be in the sales order lines to apply the discount.')}
+        elif not self.program_id._is_valid_partner(order.partner_id):
+            message = {'error': _("The customer doesn't have access to this reward.")}
+        # Product requirement should not be checked if the coupon got generated by a promotion program (the requirement should have only be checked to generate the coupon)
+        elif self.program_id.program_type == 'coupon_program' and not self.program_id._filter_programs_on_products(order):
+            message = {'error': _("You don't have the required product quantities on your sales order. All the products should be recorded on the sales order. (Example: You need to have 3 T-shirts on your sales order if the promotion is 'Buy 2, Get 1 Free').")}
+        else:
+            if self.program_id not in applicable_programs and self.program_id.promo_applicability == 'on_current_order':
+                message = {'error': _('At least one of the required conditions is not met to get the reward!')}
+        return message

--- a/None
+++ b/addons/sale_coupon/models/coupon_program.py
@@ -0,0 +1,181 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+
+
+class CouponProgram(models.Model):
+    _inherit = 'coupon.program'
+
+    order_count = fields.Integer(compute='_compute_order_count')
+
+    # The api.depends is handled in `def modified` of `sale_coupon/models/sale_order.py`
+    def _compute_order_count(self):
+        product_data = self.env['sale.order.line'].read_group([('product_id', 'in', self.mapped('discount_line_product_id').ids)], ['product_id'], ['product_id'])
+        mapped_data = dict([(m['product_id'][0], m['product_id_count']) for m in product_data])
+        for program in self:
+            program.order_count = mapped_data.get(program.discount_line_product_id.id, 0)
+
+    def action_view_sales_orders(self):
+        self.ensure_one()
+        orders = self.env['sale.order.line'].search([('product_id', '=', self.discount_line_product_id.id)]).mapped('order_id')
+        return {
+            'name': _('Sales Orders'),
+            'view_mode': 'tree,form',
+            'res_model': 'sale.order',
+            'type': 'ir.actions.act_window',
+            'domain': [('id', 'in', orders.ids), ('state', 'not in', ('draft', 'sent', 'cancel'))],
+            'context': dict(self._context, create=False)
+        }
+
+    def _check_promo_code(self, order, coupon_code):
+        message = {}
+        applicable_programs = order._get_applicable_programs()
+        if self.maximum_use_number != 0 and self.order_count >= self.maximum_use_number:
+            message = {'error': _('Promo code %s has been expired.') % (coupon_code)}
+        elif not self._filter_on_mimimum_amount(order):
+            message = {'error': _('A minimum of %s %s should be purchased to get the reward') % (self.rule_minimum_amount, self.currency_id.name)}
+        elif self.promo_code and self.promo_code == order.promo_code:
+            message = {'error': _('The promo code is already applied on this order')}
+        elif not self.promo_code and self in order.no_code_promo_program_ids:
+            message = {'error': _('The promotional offer is already applied on this order')}
+        elif not self.active:
+            message = {'error': _('Promo code is invalid')}
+        elif self.rule_date_from and self.rule_date_from > order.date_order or self.rule_date_to and order.date_order > self.rule_date_to:
+            message = {'error': _('Promo code is expired')}
+        elif order.promo_code and self.promo_code_usage == 'code_needed':
+            message = {'error': _('Promotionals codes are not cumulative.')}
+        elif self._is_global_discount_program() and order._is_global_discount_already_applied():
+            message = {'error': _('Global discounts are not cumulative.')}
+        elif self.promo_applicability == 'on_current_order' and self.reward_type == 'product' and not order._is_reward_in_order_lines(self):
+            message = {'error': _('The reward products should be in the sales order lines to apply the discount.')}
+        elif not self._is_valid_partner(order.partner_id):
+            message = {'error': _("The customer doesn't have access to this reward.")}
+        elif not self._filter_programs_on_products(order):
+            message = {'error': _("You don't have the required product quantities on your sales order. If the reward is same product quantity, please make sure that all the products are recorded on the sales order (Example: You need to have 3 T-shirts on your sales order if the promotion is 'Buy 2, Get 1 Free'.")}
+        else:
+            if self not in applicable_programs and self.promo_applicability == 'on_current_order':
+                message = {'error': _('At least one of the required conditions is not met to get the reward!')}
+        return message
+
+    @api.model
+    def _filter_on_mimimum_amount(self, order):
+        filtered_programs = self.env['coupon.program']
+
+        no_effect_lines = order._get_no_effect_on_threshold_lines()
+        order_amount = {
+            'amount_untaxed' : order.amount_untaxed - sum([line.price_subtotal for line in no_effect_lines]),
+            'amount_tax' : order.amount_tax - sum([line.price_tax for line in no_effect_lines])
+        }
+        for program in self:
+            lines = order.order_line.filtered(lambda line:
+                program.reward_type == 'discount' and
+                (line.product_id == program.discount_line_product_id or
+                line.product_id == program.reward_id.discount_line_product_id
+            ))
+            untaxed_amount = order_amount['amount_untaxed'] - sum([line.price_subtotal for line in lines])
+            tax_amount = order_amount['amount_tax'] - sum([line.price_tax for line in lines])
+            program_amount = program._compute_program_amount('rule_minimum_amount', order.currency_id)
+            if program.rule_minimum_amount_tax_inclusion == 'tax_included' and program_amount <= (untaxed_amount + tax_amount) or program.rule_minimum_amount_tax_inclusion == 'tax_excluded' and program_amount <= untaxed_amount:
+                filtered_programs |= program
+
+        return filtered_programs
+
+    @api.model
+    def _filter_on_validity_dates(self, order):
+        return self.filtered(lambda program:
+            program.rule_date_from and program.rule_date_to and
+            program.rule_date_from <= order.date_order and program.rule_date_to >= order.date_order or
+            not program.rule_date_from or not program.rule_date_to)
+
+    @api.model
+    def _filter_promo_programs_with_code(self, order):
+        '''Filter Promo program with code with a different promo_code if a promo_code is already ordered'''
+        return self.filtered(lambda program: program.promo_code_usage == 'code_needed' and program.promo_code != order.promo_code)
+
+    def _filter_unexpired_programs(self, order):
+        return self.filtered(lambda program: program.maximum_use_number == 0 or program.order_count <= program.maximum_use_number)
+
+    def _filter_programs_on_partners(self, order):
+        return self.filtered(lambda program: program._is_valid_partner(order.partner_id))
+
+    def _filter_programs_on_products(self, order):
+        """
+        To get valid programs according to product list.
+        i.e Buy 1 imac + get 1 ipad mini free then check 1 imac is on cart or not
+        or  Buy 1 coke + get 1 coke free then check 2 cokes are on cart or not
+        """
+        order_lines = order.order_line.filtered(lambda line: line.product_id) - order._get_reward_lines()
+        products = order_lines.mapped('product_id')
+        products_qties = dict.fromkeys(products, 0)
+        for line in order_lines:
+            products_qties[line.product_id] += line.product_uom_qty
+        valid_programs = self.filtered(lambda program: not program.rule_products_domain)
+        for program in self - valid_programs:
+            valid_products = program._get_valid_products(products)
+            ordered_rule_products_qty = sum(products_qties[product] for product in valid_products)
+            # Avoid program if 1 ordered foo on a program '1 foo, 1 free foo'
+            if program.promo_applicability == 'on_current_order' and \
+               program._is_valid_product(program.reward_product_id) and program.reward_type == 'product':
+                ordered_rule_products_qty -= program.reward_product_quantity
+            if ordered_rule_products_qty >= program.rule_min_quantity:
+                valid_programs |= program
+        return valid_programs
+
+    def _filter_not_ordered_reward_programs(self, order):
+        """
+        Returns the programs when the reward is actually in the order lines
+        """
+        programs = self.env['coupon.program']
+        for program in self:
+            if program.reward_type == 'product' and \
+               not order.order_line.filtered(lambda line: line.product_id == program.reward_product_id):
+                continue
+            elif program.reward_type == 'discount' and program.discount_apply_on == 'specific_products' and \
+               not order.order_line.filtered(lambda line: line.product_id in program.discount_specific_product_ids):
+                continue
+            programs |= program
+        return programs
+
+    @api.model
+    def _filter_programs_from_common_rules(self, order, next_order=False):
+        """ Return the programs if every conditions is met
+            :param bool next_order: is the reward given from a previous order
+        """
+        programs = self
+        # Minimum requirement should not be checked if the coupon got generated by a promotion program (the requirement should have only be checked to generate the coupon)
+        if not next_order:
+            programs = programs and programs._filter_on_mimimum_amount(order)
+        programs = programs and programs._filter_on_validity_dates(order)
+        programs = programs and programs._filter_unexpired_programs(order)
+        programs = programs and programs._filter_programs_on_partners(order)
+        # Product requirement should not be checked if the coupon got generated by a promotion program (the requirement should have only be checked to generate the coupon)
+        if not next_order:
+            programs = programs and programs._filter_programs_on_products(order)
+
+        programs_curr_order = programs.filtered(lambda p: p.promo_applicability == 'on_current_order')
+        programs = programs.filtered(lambda p: p.promo_applicability == 'on_next_order')
+        if programs_curr_order:
+            # Checking if rewards are in the SO should not be performed for rewards on_next_order
+            programs += programs_curr_order._filter_not_ordered_reward_programs(order)
+        return programs
+
+    def _is_global_discount_program(self):
+        self.ensure_one()
+        return self.promo_applicability == 'on_current_order' and \
+               self.reward_type == 'discount' and \
+               self.discount_type == 'percentage' and \
+               self.discount_apply_on == 'on_order'
+
+    def _keep_only_most_interesting_auto_applied_global_discount_program(self):
+        '''Given a record set of programs, remove the less interesting auto
+        applied global discount to keep only the most interesting one.
+        We should not take promo code programs into account as a 10% auto
+        applied is considered better than a 50% promo code, as the user might
+        not know about the promo code.
+        '''
+        programs = self.filtered(lambda p: p._is_global_discount_program() and p.promo_code_usage == 'no_code_needed')
+        if not programs: return self
+        most_interesting_program = max(programs, key=lambda p: p.discount_percentage)
+        # remove least interesting programs
+        return self - (programs - most_interesting_program)

--- a/addons/sale_coupon/models/mail_compose_message.py
+++ b/None
@@ -1,15 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import models
-
-
-class MailComposeMessage(models.TransientModel):
-    _inherit = 'mail.compose.message'
-
-    def send_mail(self, **kwargs):
-        for wizard in self:
-            if self._context.get('mark_coupon_as_sent') and wizard.model == 'sale.coupon' and wizard.partner_ids:
-                # Mark coupon as sent in sudo, as helpdesk users don't have the right to write on coupons
-                self.env[wizard.model].sudo().browse(wizard.res_id).state = 'sent'
-        return super().send_mail(**kwargs)

--- a/addons/sale_coupon/models/sale_order.py
+++ b/addons/sale_coupon/models/sale_order.py
@@ -8,12 +8,12 @@ from odoo.tools.misc import formatLang
 class SaleOrder(models.Model):
     _inherit = "sale.order"
 
-    applied_coupon_ids = fields.One2many('sale.coupon', 'sales_order_id', string="Applied Coupons", copy=False)
-    generated_coupon_ids = fields.One2many('sale.coupon', 'order_id', string="Offered Coupons", copy=False)
+    applied_coupon_ids = fields.One2many('coupon.coupon', 'sales_order_id', string="Applied Coupons", copy=False)
+    generated_coupon_ids = fields.One2many('coupon.coupon', 'order_id', string="Offered Coupons", copy=False)
     reward_amount = fields.Float(compute='_compute_reward_total')
-    no_code_promo_program_ids = fields.Many2many('sale.coupon.program', string="Applied Immediate Promo Programs",
+    no_code_promo_program_ids = fields.Many2many('coupon.program', string="Applied Immediate Promo Programs",
         domain="[('promo_code_usage', '=', 'no_code_needed'), '|', ('company_id', '=', False), ('company_id', '=', company_id)]", copy=False)
-    code_promo_program_id = fields.Many2one('sale.coupon.program', string="Applied Promo Program",
+    code_promo_program_id = fields.Many2one('coupon.program', string="Applied Promo Program",
         domain="[('promo_code_usage', '=', 'code_needed'), '|', ('company_id', '=', False), ('company_id', '=', company_id)]", copy=False)
     promo_code = fields.Char(related='code_promo_program_id.promo_code', help="Applied program code", readonly=False)
 
@@ -105,7 +105,7 @@ class SaleOrder(models.Model):
     def _get_paid_order_lines(self):
         """ Returns the sale order lines that are not reward lines.
             It will also return reward lines being free product lines. """
-        free_reward_product = self.env['sale.coupon.program'].search([('reward_type', '=', 'product')]).mapped('discount_line_product_id')
+        free_reward_product = self.env['coupon.program'].search([('reward_type', '=', 'product')]).mapped('discount_line_product_id')
         return self.order_line.filtered(lambda x: not x.is_reward_line or x.product_id in free_reward_product)
 
     def _get_reward_values_discount_fixed_amount(self, program):
@@ -156,7 +156,7 @@ class SaleOrder(models.Model):
         elif program.discount_apply_on in ['specific_products', 'on_order']:
             if program.discount_apply_on == 'specific_products':
                 # We should not exclude reward line that offer this product since we need to offer only the discount on the real paid product (regular product - free product)
-                free_product_lines = self.env['sale.coupon.program'].search([('reward_type', '=', 'product'), ('reward_product_id', 'in', program.discount_specific_product_ids.ids)]).mapped('discount_line_product_id')
+                free_product_lines = self.env['coupon.program'].search([('reward_type', '=', 'product'), ('reward_product_id', 'in', program.discount_specific_product_ids.ids)]).mapped('discount_line_product_id')
                 lines = lines.filtered(lambda x: x.product_id in (program.discount_specific_product_ids | free_product_lines))
 
             for line in lines:
@@ -214,7 +214,7 @@ class SaleOrder(models.Model):
 
     def _create_reward_coupon(self, program):
         # if there is already a coupon that was set as expired, reactivate that one instead of creating a new one
-        coupon = self.env['sale.coupon'].search([
+        coupon = self.env['coupon.coupon'].search([
             ('program_id', '=', program.id),
             ('state', '=', 'expired'),
             ('partner_id', '=', self.partner_id.id),
@@ -224,7 +224,7 @@ class SaleOrder(models.Model):
         if coupon:
             coupon.write({'state': 'reserved'})
         else:
-            coupon = self.env['sale.coupon'].create({
+            coupon = self.env['coupon.coupon'].create({
                 'program_id': program.id,
                 'state': 'reserved',
                 'partner_id': self.partner_id.id,
@@ -235,12 +235,12 @@ class SaleOrder(models.Model):
         return coupon
 
     def _send_reward_coupon_mail(self):
-        template = self.env.ref('sale_coupon.mail_template_sale_coupon', raise_if_not_found=False)
+        template = self.env.ref('coupon.mail_template_sale_coupon', raise_if_not_found=False)
         if template:
             for coupon in self.generated_coupon_ids:
                 self.message_post_with_template(
                     template.id, composition_mode='comment',
-                    model='sale.coupon', res_id=coupon.id,
+                    model='coupon.coupon', res_id=coupon.id,
                     email_layout_xmlid='mail.mail_notification_light',
                 )
 
@@ -250,7 +250,7 @@ class SaleOrder(models.Model):
         param: order - The sale order for which method will get applicable programs.
         """
         self.ensure_one()
-        programs = self.env['sale.coupon.program'].search([
+        programs = self.env['coupon.program'].search([
         ])._filter_programs_from_common_rules(self)
         if self.promo_code:
             programs._filter_promo_programs_with_code(self)
@@ -258,7 +258,7 @@ class SaleOrder(models.Model):
 
     def _get_applicable_no_code_promo_program(self):
         self.ensure_one()
-        programs = self.env['sale.coupon.program'].search([
+        programs = self.env['coupon.program'].search([
             ('promo_code_usage', '=', 'no_code_needed'),
         ])._filter_programs_from_common_rules(self)
         return programs
@@ -402,7 +402,7 @@ class SaleOrderLine(models.Model):
             line.order_id.applied_coupon_ids -= coupons_to_reactivate
             # Remove the program from the order if the deleted line is the reward line of the program
             # And delete the other lines from this program (It's the case when discount is split per different taxes)
-            related_program = self.env['sale.coupon.program'].search([('discount_line_product_id', '=', line.product_id.id)])
+            related_program = self.env['coupon.program'].search([('discount_line_product_id', '=', line.product_id.id)])
             if related_program:
                 line.order_id.no_code_promo_program_ids -= related_program
                 line.order_id.code_promo_program_id -= related_program
@@ -422,7 +422,7 @@ class SaleOrderLine(models.Model):
             taxes = line.tax_id.filtered(lambda r: not line.company_id or r.company_id == line.company_id)
             line.tax_id = fpos.map_tax(taxes, line.product_id, line.order_id.partner_shipping_id)
 
-    # Invalidation of `sale.coupon.program.order_count`
+    # Invalidation of `coupon.program.order_count`
     # `test_program_rules_validity_dates_and_uses`,
     # Overriding modified is quite hardcore as you need to know how works the cache and the invalidation system,
     # but at least the below works and should be efficient.
@@ -432,7 +432,7 @@ class SaleOrderLine(models.Model):
     def modified(self, fnames, create=False):
         super(SaleOrderLine, self).modified(fnames, create)
         if 'product_id' in fnames:
-            Program = self.env['sale.coupon.program'].sudo()
+            Program = self.env['coupon.program'].sudo()
             field_order_count = Program._fields['order_count']
             programs = self.env.cache.get_records(Program, field_order_count)
             if programs:
