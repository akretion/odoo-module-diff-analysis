PR: https://github.com/odoo/odoo/pull/157249

From: f2cf8167d7a36c91d7058785d9c532cec7d61f0e
From: Chong Wang (cwg)
Date: 2024-06-21 14:10:47

Structural Changes: 6
Total Changes: 208

[IMP] cloud_storage: support google/azure cloud storage

A cloud storage integration to allow attachments for mail can be stored in the
cloud storage.
1. file can be directly uploaded to cloud
2. file can be directly downloaded from cloud

Here is the work flow (make sure your window is wide enough)
Create a cloud storage attachment

+--------+                        1. upload file info    +---------+   2. create ir.attachment
|        | --------------------------------------------> |         | --------------------------+
|        |                                               |  Odoo   |                           |
|        |  3. cloud storage upload url with token       |         |                           |
|  Web   | <-------------------------------------------- |         | <-------------------------+
| Client |                                               +---------+
|        |                                               +---------+
|        |                             4. upload file    |  Cloud  |
|        | --------------------------------------------> | Storage |
+--------+                                               +---------+

Download a cloud storage attachment

+--------+                     1. odoo attachment url    +---------+
|        | --------------------------------------------> |         |
|        |                                               |  Odoo   |
|        |  2. cloud storage download url with token     |         |
|  Web   | <-------------------------------------------- |         |
| Client |                                               +---------+
|        |                                               +---------+
|        |                                3. redirect    |  Cloud  |
|        | --------------------------------------------> | Storage |
+--------+                                               +---------+

Unlink a cloud storage attachment
the cloud blobs won't be deleted automatically by Odoo after their ir.attachment
records are unlinked. The administrator can manually delete them using
cloud_storage_xxx/utils/cleanup_cloud_storage_xxx.py

closes odoo/odoo#157249

Task: 3692084
Related: odoo/enterprise#64572
Signed-off-by: Raphael Collet <rco@odoo.com>

================================= pseudo patch: =================================

--- a/None
+++ b/addons/cloud_storage_google/models/__init__.py
@@ -0,0 +1,4 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from . import ir_attachment
+from . import res_config_settings

--- a/None
+++ b/addons/cloud_storage_google/models/ir_attachment.py
@@ -0,0 +1,81 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import json
+import re
+from urllib.parse import unquote, quote
+
+try:
+    from google.oauth2 import service_account
+    from google.auth.transport.requests import Request
+except ImportError:
+    service_account = Request = None
+
+from odoo import models
+from odoo.exceptions import ValidationError
+
+from ..utils.cloud_storage_google_utils import generate_signed_url_v4
+
+
+class IrAttachment(models.Model):
+    _inherit = 'ir.attachment'
+    _cloud_storage_google_url_pattern = re.compile(r'https://storage\.googleapis\.com/(?P<bucket_name>[\w\-.]+)/(?P<blob_name>[^?]+)')
+    __cloud_storage_credentials = {}  # {db_name: (account_info, credential)}
+
+    def _get_cloud_storage_google_info(self):
+        match = self._cloud_storage_google_url_pattern.match(self.url)
+        if not match:
+            raise ValidationError('%s is not a valid Google Cloud Storage URL.', self.url)
+        return {
+            'bucket_name': match['bucket_name'],
+            'blob_name': unquote(match['blob_name']),
+        }
+
+    def _get_cloud_storage_google_credential(self):
+        """ Get the credentials object of currently used account info.
+        This method is cached to because from_service_account_info is slow.
+        """
+        cached_account_info, cached_credential = self.__cloud_storage_credentials.get(self.env.registry.db_name, (None, None))
+        account_info = json.loads(self.env['ir.config_parameter'].sudo().get_param('cloud_storage_google_account_info'))
+        if cached_account_info == account_info:
+            return cached_credential
+        credential = service_account.Credentials.from_service_account_info(account_info)
+        self.__cloud_storage_credentials[self.env.registry.db_name] = (account_info, credential)
+        return credential
+
+    def _generate_cloud_storage_google_url(self, blob_name):
+        bucket_name = self.env['ir.config_parameter'].get_param('cloud_storage_google_bucket_name')
+        return f"https://storage.googleapis.com/{bucket_name}/{quote(blob_name)}"
+
+    def _generate_cloud_storage_google_signed_url(self, bucket_name, blob_name, **kwargs):
+        quote_blob_name = quote(blob_name)
+        return generate_signed_url_v4(
+            credentials=self._get_cloud_storage_google_credential(),
+            resource=f'/{bucket_name}/{quote_blob_name}',
+            **kwargs,
+        )
+
+    # OVERRIDES
+    def _generate_cloud_storage_url(self):
+        if self.env['ir.config_parameter'].sudo().get_param('cloud_storage_provider') != 'google':
+            return super()._generate_cloud_storage_url()
+        blob_name = self._generate_cloud_storage_blob_name()
+        return self._generate_cloud_storage_google_url(blob_name)
+
+    def _generate_cloud_storage_download_info(self):
+        if self.env['ir.config_parameter'].sudo().get_param('cloud_storage_provider') != 'google':
+            return super()._generate_cloud_storage_download_info()
+        info = self._get_cloud_storage_google_info()
+        return {
+            'url': self._generate_cloud_storage_google_signed_url(info['bucket_name'], info['blob_name'], method='GET', expiration=self._cloud_storage_download_url_time_to_expiry),
+            'time_to_expiry': self._cloud_storage_download_url_time_to_expiry,
+        }
+
+    def _generate_cloud_storage_upload_info(self):
+        if self.env['ir.config_parameter'].sudo().get_param('cloud_storage_provider') != 'google':
+            return super()._generate_cloud_storage_upload_info()
+        info = self._get_cloud_storage_google_info()
+        return {
+            'url': self._generate_cloud_storage_google_signed_url(info['bucket_name'], info['blob_name'], method='PUT', expiration=self._cloud_storage_upload_url_time_to_expiry),
+            'method': 'PUT',
+            'response_status': 200,
+        }

--- a/None
+++ b/addons/cloud_storage_google/models/res_config_settings.py
@@ -0,0 +1,123 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import base64
+import json
+import requests
+from datetime import datetime, timezone
+
+try:
+    from google.oauth2 import service_account
+    from google.auth.transport.requests import Request
+except ImportError:
+    service_account = Request = None
+
+from odoo import models, fields, api, _
+from odoo.exceptions import ValidationError, UserError
+
+
+class CloudStorageSettings(models.TransientModel):
+    """
+    Instructions:
+    cloud_storage_google_bucket_name: if changed and the old bucket name
+        are still in use, you should promise the current service account
+        has the permission to access the old bucket.
+    """
+    _inherit = 'res.config.settings'
+
+    cloud_storage_provider = fields.Selection(selection_add=[('google', 'Google Cloud Storage')])
+
+    cloud_storage_google_bucket_name = fields.Char(
+        string='Google Bucket Name',
+        config_parameter='cloud_storage_google_bucket_name')
+    # Google Service Account Key in JSON format
+    cloud_storage_google_service_account_key = fields.Binary(
+        string='Google Service Account Key', store=False
+    )
+    cloud_storage_google_account_info = fields.Char(
+        string='Google Service Account Info',
+        compute='_compute_cloud_storage_google_account_info',
+        store=True,
+        readonly=False,
+        config_parameter='cloud_storage_google_account_info',
+    )
+
+    def get_values(self):
+        res = super().get_values()
+        if account_info := self.env['ir.config_parameter'].get_param('cloud_storage_google_account_info'):
+            res['cloud_storage_google_service_account_key'] = base64.b64encode(account_info.encode())
+        return res
+
+    @api.onchange('cloud_storage_google_service_account_key')
+    def _compute_cloud_storage_google_account_info(self):
+        for setting in self:
+            key = setting.with_context(bin_size=False).cloud_storage_google_service_account_key
+            setting.cloud_storage_google_account_info = base64.b64decode(key) if key else False
+
+    def _setup_cloud_storage_provider(self):
+        ICP = self.env['ir.config_parameter']
+        if ICP.get_param('cloud_storage_provider') != 'google':
+            return super()._setup_cloud_storage_provider()
+        # check bucket access
+        bucket_name = ICP.get_param('cloud_storage_google_bucket_name')
+        # use different blob names in case the credentials are allowed to
+        # overwrite an existing blob created by previous tests
+        blob_name = f'0/{datetime.now(timezone.utc)}.txt'
+
+        IrAttachment = self.env['ir.attachment']
+        # check blob create permission
+        upload_url = IrAttachment._generate_cloud_storage_google_signed_url(bucket_name, blob_name, method='PUT', expiration=IrAttachment._cloud_storage_upload_url_time_to_expiry)
+        upload_response = requests.put(upload_url, data=b'', timeout=5)
+        if upload_response.status_code != 200:
+            raise ValidationError(_('The account info is not allowed to upload blobs to the bucket.\n%s', str(upload_response.text)))
+
+        # check blob read permission
+        download_url = IrAttachment._generate_cloud_storage_google_signed_url(bucket_name, blob_name, method='GET', expiration=IrAttachment._cloud_storage_download_url_time_to_expiry)
+        download_response = requests.get(download_url, timeout=5)
+        if download_response.status_code != 200:
+            raise ValidationError(_('The account info is not allowed to download blobs from the bucket.\n%s', str(upload_response.text)))
+
+        # CORS management is not allowed in the Google Cloud console.
+        # configure CORS on bucket to allow .pdf preview and direct upload
+        cors = [{
+            'origin': ['*'],
+            'method': ['GET', 'PUT'],
+            'responseHeader': ['Content-Type'],
+            'maxAgeSeconds': IrAttachment._cloud_storage_download_url_time_to_expiry,
+        }]
+        credential = IrAttachment._get_cloud_storage_google_credential().with_scopes(['https://www.googleapis.com/auth/devstorage.full_control'])
+        credential.refresh(Request())
+        url = f"https://storage.googleapis.com/storage/v1/b/{bucket_name}?fields=cors"
+        headers = {
+            'Authorization': f'Bearer {credential.token}',
+            'Content-Type': 'application/json'
+        }
+        data = json.dumps({'cors': cors})
+        patch_response = requests.patch(url, data=data, headers=headers, timeout=5)
+        if patch_response.status_code != 200:
+            raise ValidationError(_("The account info is not allowed to set the bucket's CORS.\n%s", str(patch_response.text)))
+
+    def _get_cloud_storage_configuration(self):
+        ICP = self.env['ir.config_parameter'].sudo()
+        if ICP.get_param('cloud_storage_provider') != 'google':
+            return super()._get_cloud_storage_configuration()
+        configuration = {
+            'bucket_name': ICP.get_param('cloud_storage_google_bucket_name'),
+            'account_info': ICP.get_param('cloud_storage_google_account_info'),
+        }
+        return configuration if all(configuration.values()) else {}
+
+    def _check_cloud_storage_uninstallable(self, provider_name):
+        if provider_name != 'google':
+            return super()._check_cloud_storage_uninstallable(provider_name)
+        cr = self.env.cr
+        cr.execute(
+            """
+                SELECT type
+                FROM ir_attachment
+                WHERE type = 'cloud_storage'
+                AND url LIKE 'https://storage.googleapis.com/%'
+                LIMIT 1
+            """
+        )
+        if cr.fetchone():
+            raise UserError(_('Some Google attachments are in use, please migrate cloud storages before disable the provider'))
