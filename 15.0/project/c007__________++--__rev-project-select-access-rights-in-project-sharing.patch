PR: https://github.com/odoo/odoo/pull/

From: a28cc6333af3a1799fd5f5437a8f88de1b73b70f
From: Xavier BOL (xbo)
Date: 2021-08-26 14:57:23

Structural Changes: 10
Total Changes: 160

[REV] project: select access rights in project sharing

This reverts commit fc7778f8c512202dc3361d6b87be8c28b299c3c8 because of
a change in the spec.
The access mode are removed and replaced by this access mode for portal
user:
- read: the user goes to the classic portal view
- edit: the user is added as collaborator of the shared project and can
access to project sharing views.

To do this, the portal share is inherited by the project share wizard.
This new wizard can be open to share in readonly and open to share in
edit mode via 2 buttons in the form view of the shared project.
A new stat button is added to form view of project to see the
collaborators of this project. That is, the ones can access to the
project sharing views. The project manager will can remove or also add
new collaborators via the views in this stat button.

task-2379518

closes #73341

================================= pseudo patch: =================================

--- a/addons/project/models/__init__.py
+++ b/addons/project/models/__init__.py
@@ -6,7 +6,7 @@ from . import project_milestone
 from . import project_project_stage
 from . import project_task_recurrence
 from . import project
-from . import project_sharing_access
+from . import project_collaborator
 from . import project_update
 from . import res_config_settings
 from . import res_partner

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -7,13 +7,12 @@ from collections import defaultdict
 from datetime import timedelta, datetime
 from random import randint
 
-from odoo import api, fields, models, tools, SUPERUSER_ID, _
+from odoo import api, Command, fields, models, tools, SUPERUSER_ID, _
 from odoo.exceptions import UserError, ValidationError, AccessError
-from odoo.osv import expression
+from odoo.osv.expression import OR
 
 from .project_task_recurrence import DAYS, WEEKS
 from .project_update import STATUS_COLOR
-from .project_sharing_access import PROJECT_SHARING_ACCESS_MODE
 
 
 PROJECT_TASK_READABLE_FIELDS = {
@@ -38,7 +37,6 @@ PROJECT_TASK_READABLE_FIELDS = {
     'displayed_image_id',
     'display_name',
     'priority',
-    'project_sharing_access_mode',
 }
 
 PROJECT_TASK_WRITABLE_FIELDS = {
@@ -283,7 +281,8 @@ class Project(models.Model):
     tag_ids = fields.Many2many('project.tags', relation='project_project_project_tags_rel', string='Tags')
 
     # Project Sharing fields
-    project_sharing_access_ids = fields.One2many('project.sharing.access', 'project_id', 'Project Sharing Access', copy=False)
+    collaborator_ids = fields.One2many('project.collaborator', 'project_id', string='Collaborators', copy=False)
+    collaborator_count = fields.Integer('# Collaborators', compute='_compute_collaborator_count')
 
     # rating fields
     rating_request_deadline = fields.Datetime(compute='_compute_rating_request_deadline', store=True)
@@ -397,6 +396,18 @@ class Project(models.Model):
             else:
                 project.alias_value = "%s@%s" % (project.alias_name, project.alias_domain)
 
+    @api.depends('collaborator_ids', 'privacy_visibility')
+    def _compute_collaborator_count(self):
+        project_sharings = self.filtered(lambda project: project.privacy_visibility == 'portal')
+        collaborator_read_group = self.env['project.collaborator'].read_group(
+            [('project_id', 'in', project_sharings.ids)],
+            ['project_id'],
+            ['project_id'],
+        )
+        collaborator_count_by_project = {res['project_id'][0]: res['project_id_count'] for res in collaborator_read_group}
+        for project in self:
+            project.collaborator_count = collaborator_count_by_project.get(project.id, 0)
+
     @api.model
     def _map_tasks_default_valeus(self, task, project):
         """ get the default value for the copied task on project duplication """
@@ -700,25 +711,6 @@ class Project(models.Model):
             })
             project.write({'analytic_account_id': analytic_account.id})
 
-    def _check_project_sharing_access(self, access_mode='read'):
-        self.ensure_one()
-        if access_mode not in map(lambda access: access[0], PROJECT_SHARING_ACCESS_MODE):
-            raise ValidationError('The %s does not exists in project sharing accesses.' % access_mode)
-        if self.privacy_visibility != 'portal' or self.env.user._is_public():
-            return False
-        if self.env.user.has_group('base.group_portal'):
-            # check in project sharing access model of the project
-            project_sharing_access = self.project_sharing_access_ids.filtered(lambda access: access.user_id == self.env.user)
-            if not project_sharing_access:
-                return False
-            if access_mode == 'edit':
-                return project_sharing_access.access_mode == 'edit'
-            elif access_mode == 'comment':
-                return project_sharing_access.access_mode in ('comment', 'edit')
-            else:
-                return True
-        return self.env.user.has_group('base.group_user')
-
     # ---------------------------------------------------
     # Rating business
     # ---------------------------------------------------
@@ -750,6 +742,35 @@ class Project(models.Model):
             project.message_unsubscribe(partner_ids=portal_users.partner_id.ids)
             project.mapped('tasks')._change_project_privacy_visibility()
 
+    # ---------------------------------------------------
+    # Project sharing
+    # ---------------------------------------------------
+    def _check_project_sharing_access(self):
+        self.ensure_one()
+        if self.privacy_visibility != 'portal':
+            return False
+        if self.env.user.has_group('base.group_portal'):
+            return self.env.user.partner_id in self.collaborator_ids.partner_id
+        return self.env.user.has_group('base.group_user')
+
+    def _add_collaborators(self, partners):
+        self.ensure_one()
+        user_group_id = self.env['ir.model.data']._xmlid_to_res_id('base.group_user')
+        all_collaborators = self.collaborator_ids.partner_id
+        new_collaborators = partners.filtered(
+            lambda partner:
+                partner not in all_collaborators
+                and (not partner.user_ids or user_group_id not in partner.user_ids[0].groups_id.ids)
+        )
+        if not new_collaborators:
+            # Then we have nothing to do
+            return
+        self.write({'collaborator_ids': [
+            Command.create({
+                'partner_id': collaborator.id,
+            }) for collaborator in new_collaborators],
+        })
+
 class Task(models.Model):
     _name = "project.task"
     _description = "Task"
@@ -880,9 +901,6 @@ class Task(models.Model):
     allow_task_dependencies = fields.Boolean(related='project_id.allow_task_dependencies')
     depend_on_ids = fields.Many2many('project.task', relation="task_dependencies_rel", column1="task_id", column2="depends_on_id", string="Blocked By", domain="[('allow_task_dependencies', '=', True), ('id', '!=', id)]")
 
-    # Project Sharing fields
-    project_sharing_access_mode = fields.Selection(PROJECT_SHARING_ACCESS_MODE, compute='_compute_project_sharing_access_mode')
-
     # recurrence fields
     allow_recurring_tasks = fields.Boolean(related='project_id.allow_recurring_tasks')
     recurring_task = fields.Boolean(string="Recurrent")
@@ -1189,26 +1207,6 @@ class Task(models.Model):
             else:
                 task.stage_id = False
 
-    @api.depends_context('uid')
-    @api.depends('project_id.project_sharing_access_ids', 'project_id.privacy_visibility')
-    def _compute_project_sharing_access_mode(self):
-        if self.env.user._is_public():
-            self.project_sharing_access_mode = False
-            return
-        portal_user = self.user_has_groups('base.group_portal')
-        project_sharings = self.project_id.filtered(lambda project: project.privacy_visibility == 'portal')
-        if portal_user:
-            project_sharing_access_read = self.env['project.sharing.access'].search_read(
-                [('user_id', '=', self.env.user.id), ('project_id', 'in', project_sharings.ids)],
-                ['project_id', 'access_mode']
-            )
-            project_sharing_access_dict = {res['project_id'][0]: res['access_mode'] for res in project_sharing_access_read}
-        for task in self:
-            if not portal_user:
-                task.project_sharing_access_mode = task.project_id in project_sharings and 'edit'
-                continue
-            task.project_sharing_access_mode = project_sharing_access_dict.get(task.project_id.id, False)
-
     @api.constrains('recurring_task')
     def _check_recurring_task(self):
         if self.filtered(lambda task: task.parent_id and task.recurring_task):
@@ -1497,7 +1495,7 @@ class Task(models.Model):
             recurrence_domain = []
             if recurrence_update == 'subsequent':
                 for task in self:
-                    recurrence_domain = expression.OR([recurrence_domain, ['&', ('recurrence_id', '=', task.recurrence_id.id), ('create_date', '>=', task.create_date)]])
+                    recurrence_domain = OR([recurrence_domain, ['&', ('recurrence_id', '=', task.recurrence_id.id), ('create_date', '>=', task.create_date)]])
             else:
                 recurrence_domain = [('recurrence_id', 'in', self.recurrence_id.ids)]
             tasks |= self.env['project.task'].search(recurrence_domain)

--- a/None
+++ b/addons/project/models/project_collaborator.py
@@ -0,0 +1,23 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class ProjectCollaborator(models.Model):
+    _name = 'project.collaborator'
+    _description = 'Collaborators in project shared'
+
+    project_id = fields.Many2one('project.project', 'Project Shared', domain=[('privacy_visibility', '=', 'portal')], required=True)
+    partner_id = fields.Many2one('res.partner', 'Collaborator', required=True)
+
+    _sql_constraints = [
+        ('unique_collaborator', 'UNIQUE(project_id, partner_id)', 'A collaborator cannot be selected more than once in the project sharing access. Please remove duplicate(s) and try again.'),
+    ]
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        project_collaborators = super().create(vals_list)
+        non_authenticated_collaborator = project_collaborators.partner_id.filtered(lambda partner: not partner.user_ids)
+        non_authenticated_collaborator._create_portal_users()
+        return project_collaborators

--- a/addons/project/models/project_sharing_access.py
+++ b/None
@@ -1,24 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-
-PROJECT_SHARING_ACCESS_MODE = [
-    ('read', 'Read'),
-    ('comment', 'Comment'),
-    ('edit', 'Edit'),
-]
-
-
-class ProjectSharingAccess(models.Model):
-    _name = 'project.sharing.access'
-    _description = 'Project Sharing Access'
-
-    project_id = fields.Many2one('project.project', 'Project Shared', required=True)
-    user_id = fields.Many2one('res.users', string='Portal Users', domain=lambda self: [('groups_id', 'in', self.env.ref('base.group_portal').id)], required=True)
-    access_mode = fields.Selection(PROJECT_SHARING_ACCESS_MODE, string='Access Mode', required=True)
-
-    _sql_constraints = [
-        ('unique_user', 'UNIQUE(project_id, user_id)', 'A user cannot be selected more than once in the project sharing access. Please remove duplicate(s) and try again.'),
-    ]

--- a/addons/project/models/res_partner.py
+++ b/addons/project/models/res_partner.py
@@ -2,6 +2,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import fields, models
+from odoo.tools import email_normalize
 
 
 class ResPartner(models.Model):
@@ -28,3 +29,19 @@ class ResPartner(models.Model):
                 if partner in self:
                     partner.task_count += group['partner_id_count']
                 partner = partner.parent_id
+
+    def _create_portal_users(self):
+        partners_without_user = self.filtered(lambda partner: not partner.user_ids)
+        if not partners_without_user:
+            return self.env['res.users']
+        created_users = self.env['res.users']
+        for partner in partners_without_user:
+            created_users += self.env['res.users'].with_context(no_reset_password=True)._create_user_from_template({
+                'email': email_normalize(partner.email),
+                'login': email_normalize(partner.email),
+                'partner_id': partner.id,
+                'company_id': self.env.company.id,
+                'company_ids': [(6, 0, self.env.company.ids)],
+                'active': True,
+            })
+        return created_users
