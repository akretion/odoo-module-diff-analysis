PR: https://github.com/odoo/odoo/pull/

From: 5a9cff3387cbb85034e58b587bd8e5ca9bbd089d
From: Thibault Delavall√©e
Date: 2017-02-27 13:04:48

Structural Changes: 9
Total Changes: 15

[REF] mrp: remove inherits from workcenter to resource and use resource mixin

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_workcenter.py
+++ b/addons/mrp/models/mrp_workcenter.py
@@ -10,9 +10,15 @@ from odoo import api, exceptions, fields, models, _
 class MrpWorkcenter(models.Model):
     _name = 'mrp.workcenter'
     _description = 'Work Center'
-    _inherits = {'resource.resource': 'resource_id'}
     _order = "sequence, id"
+    _inherit = ['resource.mixin']
 
+    # resource
+    name = fields.Char(related='resource_id.name', store=True)
+    time_efficiency = fields.Float('Time Efficiency', related='resource_id.time_efficiency', store=True)
+    active = fields.Boolean('Active', related='resource_id.active', default=True, store=True)
+
+    code = fields.Char('Code', copy=False)
     note = fields.Text(
         'Description',
         help="Description of the Work Center.")
@@ -25,10 +31,7 @@ class MrpWorkcenter(models.Model):
     color = fields.Integer('Color')
     time_start = fields.Float('Time before prod.', help="Time in minutes for the setup.")
     time_stop = fields.Float('Time after prod.', help="Time in minutes for the cleaning.")
-    resource_id = fields.Many2one('resource.resource', 'Resource', ondelete='cascade', required=True)
-    code = fields.Char('Code', copy=False)
     routing_line_ids = fields.One2many('mrp.routing.workcenter', 'workcenter_id', "Routing Lines")
-
     order_ids = fields.One2many('mrp.workorder', 'workcenter_id', "Orders")
     workorder_count = fields.Integer('# Work Orders', compute='_compute_workorder_count')
     workorder_ready_count = fields.Integer('# Read Work Orders', compute='_compute_workorder_count')
@@ -206,8 +209,8 @@ class MrpWorkcenterProductivity(models.Model):
                 d1 = fields.Datetime.from_string(blocktime.date_start)
                 d2 = fields.Datetime.from_string(blocktime.date_end)
                 diff = d2 - d1
-                if (blocktime.loss_type not in ('productive', 'performance')) and blocktime.workcenter_id.calendar_id:
-                    r = blocktime.workcenter_id.calendar_id.get_work_hours_count(d1, d2, blocktime.workcenter_id.resource_id.id)
+                if (blocktime.loss_type not in ('productive', 'performance')) and blocktime.workcenter_id.resource_calendar_id:
+                    r = blocktime.workcenter_id.resource_calendar_id.get_work_hours_count(d1, d2, blocktime.workcenter_id.resource_id.id)
                     blocktime.duration = round(r * 60, 2)
                 else:
                     blocktime.duration = round(diff.total_seconds() / 60.0, 2)
