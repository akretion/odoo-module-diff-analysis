PR: https://github.com/odoo/odoo/pull/

From: 89e358caa8627c5eff21ee63015dece0997db2b4
From: eco-odoo
Date: 2018-08-10 14:08:47

Breaking data model changes scores: del:6 + add:0, change matches:
-    portal_confirmation_sign_radio = fields.Selection([('yes', "Yes"), ('no', "No")], "Digital Signature (radio)",
-    sale_quotation_onboarding_closed = fields.Boolean(
-    sale_quotation_onboarding_folded = fields.Boolean(
-    sale_onboarding_quotation_layout_done = fields.Boolean("Onboarding quotation layout step done",
-    sale_onboarding_payment_acquirer_done = fields.Boolean("Sale onboarding payment acquirer step done",
-    sale_onboarding_signature_done = fields.Boolean("Sale onboarding signature step done",

Total Changes: 126

[FIX] onboarding: Fix/Update onboarding to v2.0

Specification
=============

* Fix lots of bug due to the BS4 migration
* Improve steps
* Validate some steps (Like the company configuration) in all the
  onboarding bars if done in one onboarding bar.
* Only animate the confetti one time if a step is done, instead of
  on each view loading

For more information, see: https://www.odoo.com/web#id=1869513&action=333&active_id=965&model=project.task&view_type=form&menu_id=4720

================================= pseudo patch: =================================

--- a/addons/sale/models/res_company.py
+++ b/addons/sale/models/res_company.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models
+from odoo import api, fields, models, _
 
 
 class ResCompany(models.Model):
@@ -11,60 +11,99 @@ class ResCompany(models.Model):
     portal_confirmation_sign = fields.Boolean(string='Digital Signature')
     portal_confirmation_pay = fields.Boolean(string='Electronic Payment')
 
-    @api.depends('portal_confirmation_sign')
-    def _get_sale_onboarding_signature_radio(self):
-        """ Convert portal_confirmation_sign from boolean to radio. """
-        for record in self:
-            record.portal_confirmation_sign_radio = 'yes' if record.portal_confirmation_sign else 'no'
-
-    @api.depends('portal_confirmation_sign')
-    def _set_sale_onboarding_signature_radio(self):
-        """ Convert portal_confirmation_sign from radio to boolean. """
-        for record in self:
-            record.portal_confirmation_sign = record.portal_confirmation_sign_radio == 'yes'
-
-    # the target field, portal_confirmation_sign, is a boolean but we would like to render it as a radio button
-    portal_confirmation_sign_radio = fields.Selection([('yes', "Yes"), ('no', "No")], "Digital Signature (radio)",
-        compute=_get_sale_onboarding_signature_radio, inverse=_set_sale_onboarding_signature_radio)
-
     # sale quotation onboarding
-    sale_quotation_onboarding_closed = fields.Boolean(
-        string="Onboarding sale quotation closed",
-        help="Refers to the sale quotation onboarding panel closed state.")
-    sale_quotation_onboarding_folded = fields.Boolean(
-        string="Onboarding sale quotation folded",
-        help="Refers to the sale quotation onboarding panel folded state.")
-    sale_onboarding_quotation_layout_done = fields.Boolean("Onboarding quotation layout step done",
-        compute="_compute_sale_onboarding_quotation_layout_done")
-    sale_onboarding_payment_acquirer_done = fields.Boolean("Sale onboarding payment acquirer step done",
-        default=False)
-    sale_onboarding_signature_done = fields.Boolean("Sale onboarding signature step done",
-        default=False)
+    sale_quotation_onboarding_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done"), ('closed', "Closed")], string="State of the sale onboarding panel", default='not_done')
+    sale_onboarding_order_confirmation_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done")], string="State of the onboarding confirmation order step", default='not_done')
+    sale_onboarding_sample_quotation_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done")], string="State of the onboarding sample quotation step", default='not_done')
 
-    @api.model
-    def action_toggle_fold_sale_quotation_onboarding(self):
-        """ Toggle the onboarding panel `folded` state. """
-        self.env.user.company_id.sale_quotation_onboarding_folded =\
-            not self.env.user.company_id.sale_quotation_onboarding_folded
+    sale_onboarding_payment_method = fields.Selection([
+        ('digital_signature', 'Digital signature, without payment'),
+        ('paypal', 'PayPal'),
+        ('stripe', 'Stripe'),
+        ('manual', 'Wire Transfer'),
+        ('none', 'No digital signature or payment'),
+    ], string="Sale onboarding selected payment method")
 
     @api.model
     def action_close_sale_quotation_onboarding(self):
         """ Mark the onboarding panel as closed. """
-        self.env.user.company_id.sale_quotation_onboarding_closed = True
+        self.env.user.company_id.sale_quotation_onboarding_state = 'closed'
 
     @api.model
-    def action_open_sale_onboarding_signature(self):
+    def action_open_sale_onboarding_payment_acquirer(self):
         """ Called by onboarding panel above the quotation list."""
-        action = self.env.ref('sale.action_open_sale_onboarding_signature').read()[0]
-        action['res_id'] = self.env.user.company_id.id
+        self.env.user.company_id.get_chart_of_accounts_or_fail()
+        action = self.env.ref('sale.action_open_sale_onboarding_payment_acquirer_wizard').read()[0]
         return action
 
+    def _get_sample_sales_order(self):
+        """ Get a sample quotation or create one if it does not exist. """
+        # use current user as partner
+        partner = self.env.user.partner_id
+        company_id = self.env.user.company_id.id
+        # is there already one?
+        sample_sales_order = self.env['sale.order'].search(
+            [('company_id', '=', company_id), ('partner_id', '=', partner.id),
+             ('state', '=', 'draft')], limit=1)
+        if len(sample_sales_order) == 0:
+            sample_sales_order = self.env['sale.order'].create({
+                'partner_id': partner.id
+            })
+            # take any existing product or create one
+            product = self.env['product.product'].search([], limit=1)
+            if len(product) == 0:
+                product = self.env['product.product'].create({
+                    'name': _('Sample Product')
+                })
+            self.env['sale.order.line'].create({
+                'name': _('Sample Order Line'),
+                'product_id': product.id,
+                'product_uom_qty': 10,
+                'price_unit': 123,
+                'order_id': sample_sales_order.id,
+            })
+        return sample_sales_order
+
     @api.model
-    def action_open_sale_onboarding_payment_acquirer(self):
-        """ Called by onboarding panel above the quotation list."""
-        action = self.env.ref('sale.action_open_sale_onboarding_payment_acquirer_wizard').read()[0]
+    def action_open_sale_onboarding_sample_quotation(self):
+        """ Onboarding step for sending a sample quotation. Open a window to compose an email,
+            with the edi_invoice_template message loaded by default. """
+        sample_sales_order = self._get_sample_sales_order()
+        template = self.env.ref('sale.email_template_edi_sale', False)
+        action = self.env.ref('sale.action_open_sale_onboarding_sample_quotation').read()[0]
+        action['context'] = {
+            'default_res_id': sample_sales_order.id,
+            'default_use_template': bool(template),
+            'default_template_id': template and template.id or False,
+            'default_model': 'sale.order',
+            'default_composition_mode': 'comment',
+            'mark_so_as_sent': True,
+            'custom_layout': 'mail.mail_notification_paynow',
+            'proforma': self.env.context.get('proforma', False),
+            'force_email': True,
+        }
         return action
 
     @api.multi
-    def action_save_onboarding_signature(self):
-        self.sale_onboarding_signature_done = True
+    def action_save_onboarding_quotation_layout(self):
+        """ Set the onboarding step as done """
+        if bool(self.logo) and self.logo != self._get_logo():
+            self.set_onboarding_step_done('account_onboarding_invoice_layout_state')
+
+    def get_and_update_sale_quotation_onboarding_state(self):
+        """ This method is called on the controller rendering method and ensures that the animations
+            are displayed only one time. """
+        steps = [
+            'base_onboarding_company_state',
+            'account_onboarding_invoice_layout_state',
+            'sale_onboarding_order_confirmation_state',
+            'sale_onboarding_sample_quotation_state',
+        ]
+        return self.get_and_update_onbarding_state('sale_quotation_onboarding_state', steps)
+
+    @api.model
+    def action_open_sale_onboarding_quotation_layout(self):
+        """ Onboarding step for the quotation layout. """
+        action = self.env.ref('sale.action_open_sale_onboarding_quotation_layout').read()[0]
+        action['res_id'] = self.env.user.company_id.id
+        return action

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -519,6 +519,7 @@ class SaleOrder(models.Model):
     def message_post(self, **kwargs):
         if self.env.context.get('mark_so_as_sent'):
             self.filtered(lambda o: o.state == 'draft').with_context(tracking_disable=True).write({'state': 'sent'})
+            self.env.user.company_id.set_onboarding_step_done('sale_onboarding_sample_quotation_state')
         return super(SaleOrder, self.with_context(mail_post_autofollow=True)).message_post(**kwargs)
 
     @api.multi
