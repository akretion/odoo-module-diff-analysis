PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:4 + add:0, change matches:
-    _inherit = 'calendar.attendee'
-    _inherit = 'res.config.settings'
-    _inherit = 'res.users'
-    _inherit = "res.users.settings"

Total Changes: 32

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/microsoft_calendar/models/calendar.py
+++ b/addons/microsoft_calendar/models/calendar.py
@@ -34,8 +34,8 @@ MAX_RECURRENT_EVENT = 720
 
 _logger = logging.getLogger(__name__)
 
-class Meeting(models.Model):
-    _name = 'calendar.event'
+
+class CalendarEvent(models.Model):
     _inherit = ['calendar.event', 'microsoft.calendar.sync']
 
     microsoft_recurrence_master_id = fields.Char('Microsoft Recurrence Master Id')
@@ -95,7 +95,7 @@ class Meeting(models.Model):
         # for a recurrent event, we do not create events separately but we directly
         # create the recurrency from the corresponding calendar.recurrence.
         # That's why, events from a recurrency have their `need_sync_m` attribute set to False.
-        return super(Meeting, self.with_context(dont_notify=notify_context)).create([
+        return super(CalendarEvent, self.with_context(dont_notify=notify_context)).create([
             dict(vals, need_sync_m=False) if vals.get('recurrence_id') or vals.get('recurrency') else vals
             for vals in vals_list
         ])
@@ -210,11 +210,11 @@ class Meeting(models.Model):
         if attendee_ids and values.get('partner_ids'):
             (self - deactivated_events)._update_attendee_status(attendee_ids)
 
-        res = super(Meeting, (self - deactivated_events).with_context(dont_notify=notify_context)).write(values)
+        res = super(CalendarEvent, (self - deactivated_events).with_context(dont_notify=notify_context)).write(values)
 
         # Deactivate events that were recreated after changing organizer.
         if deactivated_events:
-            res |= super(Meeting, deactivated_events.with_context(dont_notify=notify_context)).write({**values, 'active': False})
+            res |= super(CalendarEvent, deactivated_events.with_context(dont_notify=notify_context)).write({**values, 'active': False})
 
         if recurrence_update_setting in ('all_events',) and len(self) == 1 \
            and values.keys() & self._get_microsoft_synced_fields():
@@ -670,7 +670,7 @@ class Meeting(models.Model):
         for event in records:
             # remove the tracking data to avoid calling _track_template in the pre-commit phase
             self.env.cr.precommit.data.pop(f'mail.tracking.create.{event._name}.{event.id}', None)
-        super(Meeting, records)._cancel_microsoft()
+        super(CalendarEvent, records)._cancel_microsoft()
         attendees = (self - records).attendee_ids.filtered(lambda a: a.partner_id == user.partner_id)
         attendees.do_decline()
 

--- a/addons/microsoft_calendar/models/calendar_attendee.py
+++ b/addons/microsoft_calendar/models/calendar_attendee.py
@@ -5,9 +5,8 @@
 from odoo import models
 
 
-class Attendee(models.Model):
-    _name = 'calendar.attendee'
-    _inherit = 'calendar.attendee'
+class CalendarAttendee(models.Model):
+    _inherit = ['calendar.attendee']
 
     def do_tentative(self):
         # Synchronize event after state change

--- a/addons/microsoft_calendar/models/calendar_recurrence_rule.py
+++ b/addons/microsoft_calendar/models/calendar_recurrence_rule.py
@@ -5,8 +5,7 @@ from odoo import api, fields, models
 from odoo.osv import expression
 
 
-class RecurrenceRule(models.Model):
-    _name = 'calendar.recurrence'
+class CalendarRecurrence(models.Model):
     _inherit = ['calendar.recurrence', 'microsoft.calendar.sync']
 
 

--- a/addons/microsoft_calendar/models/microsoft_sync.py
+++ b/addons/microsoft_calendar/models/microsoft_sync.py
@@ -51,8 +51,8 @@ def after_commit(func):
 def microsoft_calendar_token(user):
     yield user._get_microsoft_calendar_token()
 
-class MicrosoftSync(models.AbstractModel):
-    _name = 'microsoft.calendar.sync'
+
+class MicrosoftCalendarSync(models.AbstractModel):
     _description = "Synchronize a record with Microsoft Calendar"
 
     microsoft_id = fields.Char('Organizer event Id', copy=False, index=True)

--- a/addons/microsoft_calendar/models/res_config_settings.py
+++ b/addons/microsoft_calendar/models/res_config_settings.py
@@ -5,7 +5,7 @@ from odoo import api, fields, models
 
 
 class ResConfigSettings(models.TransientModel):
-    _inherit = 'res.config.settings'
+    _inherit = ['res.config.settings']
 
     cal_microsoft_client_id = fields.Char("Microsoft Client_id", config_parameter='microsoft_calendar_client_id', default='')
     cal_microsoft_client_secret = fields.Char("Microsoft Client_key", config_parameter='microsoft_calendar_client_secret', default='')

--- a/addons/microsoft_calendar/models/res_users.py
+++ b/addons/microsoft_calendar/models/res_users.py
@@ -16,8 +16,8 @@ from odoo.tools import str2bool
 _logger = logging.getLogger(__name__)
 
 
-class User(models.Model):
-    _inherit = 'res.users'
+class ResUsers(models.Model):
+    _inherit = ['res.users']
 
     microsoft_calendar_sync_token = fields.Char(related='res_users_settings_id.microsoft_calendar_sync_token', groups='base.group_system')
     microsoft_synchronization_stopped = fields.Boolean(related='res_users_settings_id.microsoft_synchronization_stopped', readonly=False, groups='base.group_system')

--- a/addons/microsoft_calendar/models/res_users_settings.py
+++ b/addons/microsoft_calendar/models/res_users_settings.py
@@ -4,7 +4,7 @@ from odoo import api, fields, models
 
 
 class ResUsersSettings(models.Model):
-    _inherit = "res.users.settings"
+    _inherit = ["res.users.settings"]
 
     # Microsoft Calendar settings.
     microsoft_calendar_sync_token = fields.Char('Microsoft Next Sync Token', copy=False, groups='base.group_system')
