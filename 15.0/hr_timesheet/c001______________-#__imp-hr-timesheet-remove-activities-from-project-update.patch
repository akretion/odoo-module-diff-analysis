PR: https://github.com/odoo/odoo/pull/

From: e8d0473b3b1fe2832e913339b9e6a696f4d5d77c
From: Cedric Prieels (cpr)
Date: 2021-09-06 08:41:13

Structural Changes: 2
Total Changes: 110

[IMP] hr_timesheet: remove activities from project update

This commit removes the activities from the project update default
description.

This commit prepares the removal of the project overview feature and is
a part of the global project update description improvement.

PR : #72736
See odoo/upgrade#2706

task-2545084

================================= pseudo patch: =================================

--- a/addons/hr_timesheet/models/__init__.py
+++ b/addons/hr_timesheet/models/__init__.py
@@ -9,5 +9,4 @@ from . import res_company
 from . import res_config_settings
 from . import project
 from . import project_collaborator
-from . import project_update
 from . import uom

--- a/addons/hr_timesheet/models/project.py
+++ b/addons/hr_timesheet/models/project.py
@@ -174,11 +174,48 @@ class Project(models.Model):
                 warning_msg, self.env.ref('hr_timesheet.timesheet_action_project').id,
                 _('See timesheet entries'), {'active_ids': projects_with_timesheets.ids})
 
+    def action_show_timesheets_by_employee_invoice_type(self):
+        action = self.env["ir.actions.actions"]._for_xml_id("hr_timesheet.timesheet_action_all")
+        #Let's put the chart view first
+        new_views = []
+        for view in action['views']:
+            new_views.insert(0, view) if view[1] == 'graph' else new_views.append(view)
+        action.update({
+            'display_name': _("Timesheets"),
+            'domain': [('project_id', '=', self.id)],
+            'context': {
+                'default_project_id': self.id,
+                'search_default_groupby_employee': True,
+                'search_default_groupby_timesheet_invoice_type': True
+            },
+            'views': new_views
+        })
+
+        return action
+
     def _convert_project_uom_to_timesheet_encode_uom(self, time):
         uom_from = self.company_id.project_time_mode_id
         uom_to = self.env.company.timesheet_encode_uom_id
         return round(uom_from._compute_quantity(time, uom_to, raise_if_failure=False), 2)
 
+    # ----------------------------
+    #  Project Updates
+    # ----------------------------
+
+    def _get_stat_buttons(self):
+        buttons = super(Project, self)._get_stat_buttons()
+        buttons.append({
+            'icon': 'clock-o',
+            'text': _('Recorded'),
+            'number': '%s %s' % (self.total_timesheet_time, self.env.company.timesheet_encode_uom_id.name),
+            'action_type': 'object',
+            'action': 'action_show_timesheets_by_employee_invoice_type',
+            'show': self.user_has_groups('hr_timesheet.group_hr_timesheet_user') and self.allow_timesheets,
+            'sequence': 4,
+        })
+        return buttons
+
+
 class Task(models.Model):
     _name = "project.task"
     _inherit = "project.task"

--- a/addons/hr_timesheet/models/project_update.py
+++ b/None
@@ -1,72 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from collections import defaultdict
-
-from odoo import api, fields, models
-from odoo.tools.misc import formatLang
-
-class ProjectUpdate(models.Model):
-    _inherit = 'project.update'
-
-    @api.model
-    def _get_template_values(self, project):
-        return {
-            **super(ProjectUpdate, self)._get_template_values(project),
-            'people': self._get_people_values(project),
-        }
-
-    @api.model
-    def _get_people_values(self, project):
-        return {
-            'uom': self.env.company._timesheet_uom_text(),
-            'is_uom_hour': self.env.company._is_timesheet_hour_uom(),
-            'activities': self._get_activities(project)
-        }
-
-    @api.model
-    def _get_activities(self, project):
-        if not self.user_has_groups('hr_timesheet.group_hr_timesheet_user'):
-            return []
-        today = fields.Date.context_today(self)
-        query = """
-                SELECT timesheet.employee_id as employee_id,
-                       gs::date as period,
-                       sum(timesheet.unit_amount) as unit_amount,
-                       employee.name as name
-                  FROM project_project p
-            INNER JOIN account_analytic_line timesheet
-                    ON timesheet.project_id = p.id
-            INNER JOIN hr_employee employee
-                    ON timesheet.employee_id = employee.id
-            CROSS JOIN generate_series(
-                        %(today)s - '180 days'::interval,
-                        %(today)s,
-                        '30 days'::interval
-                       ) gs
-                 WHERE p.id = %(project_id)s
-                   AND gs >= timesheet.date
-                   AND gs - '30 days'::interval < timesheet.date
-              GROUP BY timesheet.employee_id,
-                       gs, employee.name
-              ORDER BY gs DESC, employee.name ASC
-        """
-        self.env.cr.execute(query, {'project_id': project.id, 'today': today})
-        results = self.env.cr.dictfetchall()
-        activities = defaultdict(lambda: {
-            'unit_amount': 0,
-            'worked': False,
-        })
-        digits = not self.env.company._is_timesheet_hour_uom() and 2 or 0
-        for result in results:
-            if result['period'] == today:
-                activities[result['employee_id']] = {
-                    'name': result['name'],
-                    'unit_amount': formatLang(self.env, project._convert_project_uom_to_timesheet_encode_uom(result['unit_amount']), digits=digits),
-                    'worked': True,
-                    'new': True,
-                }
-            else:
-                name = activities[result['employee_id']].get('name', result['name'])
-                activities[result['employee_id']].update(name=name, new=False)
-        return list(activities.values())
