PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = 'payment.acquirer'
-    provider = fields.Selection(

Total Changes: 206

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_paypal/models/__init__.py
+++ b/addons/payment_paypal/models/__init__.py
@@ -1,4 +1,4 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_transaction

--- a/addons/payment_paypal/models/payment_acquirer.py
+++ b/addons/payment_paypal/models/payment_provider.py
@@ -9,10 +9,10 @@ from odoo.addons.payment_paypal.const import SUPPORTED_CURRENCIES
 _logger = logging.getLogger(__name__)
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('paypal', "Paypal")], ondelete={'paypal': 'set default'})
     paypal_email_account = fields.Char(
         string="Email",
@@ -29,25 +29,25 @@ class PaymentAcquirer(models.Model):
     def _compute_feature_support_fields(self):
         """ Override of `payment` to enable additional features. """
         super()._compute_feature_support_fields()
-        self.filtered(lambda acq: acq.provider == 'paypal').update({
+        self.filtered(lambda p: p.code == 'paypal').update({
             'support_fees': True,
         })
 
     #=== BUSINESS METHODS ===#
 
     @api.model
-    def _get_compatible_acquirers(self, *args, currency_id=None, **kwargs):
-        """ Override of payment to unlist PayPal acquirers when the currency is not supported. """
-        acquirers = super()._get_compatible_acquirers(*args, currency_id=currency_id, **kwargs)
+    def _get_compatible_providers(self, *args, currency_id=None, **kwargs):
+        """ Override of payment to unlist PayPal providers when the currency is not supported. """
+        providers = super()._get_compatible_providers(*args, currency_id=currency_id, **kwargs)
 
         currency = self.env['res.currency'].browse(currency_id).exists()
         if currency and currency.name not in SUPPORTED_CURRENCIES:
-            acquirers = acquirers.filtered(lambda a: a.provider != 'paypal')
+            providers = providers.filtered(lambda p: p.code != 'paypal')
 
-        return acquirers
+        return providers
 
     def _paypal_get_api_url(self):
-        """ Return the API URL according to the acquirer state.
+        """ Return the API URL according to the provider state.
 
         Note: self.ensure_one()
 
@@ -64,7 +64,7 @@ class PaymentAcquirer(models.Model):
     def _paypal_send_configuration_reminder(self):
         render_template = self.env['ir.qweb']._render(
             'payment_paypal.mail_template_paypal_invite_user_to_configure',
-            {'acquirer': self},
+            {'provider': self},
             raise_if_not_found=False,
         )
         if render_template:

--- a/addons/payment_paypal/models/payment_transaction.py
+++ b/addons/payment_paypal/models/payment_transaction.py
@@ -27,20 +27,20 @@ class PaymentTransaction(models.Model):
         Note: self.ensure_one() from `_get_processing_values`
 
         :param dict processing_values: The generic and specific processing values of the transaction
-        :return: The dict of acquirer-specific processing values
+        :return: The dict of provider-specific processing values
         :rtype: dict
         """
         res = super()._get_specific_rendering_values(processing_values)
-        if self.provider != 'paypal':
+        if self.provider_code != 'paypal':
             return res
 
-        base_url = self.acquirer_id.get_base_url()
+        base_url = self.provider_id.get_base_url()
         partner_first_name, partner_last_name = payment_utils.split_partner_name(self.partner_name)
         webhook_url = urls.url_join(base_url, PaypalController._webhook_url)
         return {
             'address1': self.partner_address,
             'amount': self.amount,
-            'business': self.acquirer_id.paypal_email_account,
+            'business': self.provider_id.paypal_email_account,
             'city': self.partner_city,
             'country': self.partner_country_id.code,
             'currency_code': self.currency_id.name,
@@ -51,28 +51,28 @@ class PaymentTransaction(models.Model):
             'item_number': self.reference,
             'last_name': partner_last_name,
             'lc': self.partner_lang,
-            'notify_url': webhook_url if self.acquirer_id.paypal_use_ipn else None,
+            'notify_url': webhook_url if self.provider_id.paypal_use_ipn else None,
             'return_url': urls.url_join(base_url, PaypalController._return_url),
             'state': self.partner_state_id.name,
             'zip_code': self.partner_zip,
-            'api_url': self.acquirer_id._paypal_get_api_url(),
+            'api_url': self.provider_id._paypal_get_api_url(),
         }
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of payment to find the transaction based on Paypal data.
 
-        :param str provider: The provider of the acquirer that handled the transaction
+        :param str provider_code: The code of the provider that handled the transaction
         :param dict notification_data: The notification data sent by the provider
         :return: The transaction if found
         :rtype: recordset of `payment.transaction`
         :raise: ValidationError if the data match no transaction
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'paypal' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'paypal' or len(tx) == 1:
             return tx
 
         reference = notification_data.get('item_number')
-        tx = self.search([('reference', '=', reference), ('provider', '=', 'paypal')])
+        tx = self.search([('reference', '=', reference), ('provider_code', '=', 'paypal')])
         if not tx:
             raise ValidationError(
                 "PayPal: " + _("No transaction found matching reference %s.", reference)
@@ -89,7 +89,7 @@ class PaymentTransaction(models.Model):
         :raise: ValidationError if inconsistent data were received
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'paypal':
+        if self.provider_code != 'paypal':
             return
 
         txn_id = notification_data.get('txn_id')
@@ -101,15 +101,15 @@ class PaymentTransaction(models.Model):
                     txn_id=txn_id, txn_type=txn_type
                 )
             )
-        self.acquirer_reference = txn_id
+        self.provider_reference = txn_id
         self.paypal_type = txn_type
 
         payment_status = notification_data.get('payment_status')
 
         if payment_status in PAYMENT_STATUS_MAPPING['pending'] + PAYMENT_STATUS_MAPPING['done'] \
-            and not (self.acquirer_id.paypal_pdt_token and self.acquirer_id.paypal_seller_account):
+            and not (self.provider_id.paypal_pdt_token and self.provider_id.paypal_seller_account):
             # If a payment is made on an account waiting for configuration, send a reminder email
-            self.acquirer_id._paypal_send_configuration_reminder()
+            self.provider_id._paypal_send_configuration_reminder()
 
         if payment_status in PAYMENT_STATUS_MAPPING['pending']:
             self._set_pending(state_message=notification_data.get('pending_reason'))
