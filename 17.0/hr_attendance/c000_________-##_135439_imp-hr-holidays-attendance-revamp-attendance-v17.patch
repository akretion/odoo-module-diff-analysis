PR: https://github.com/odoo/odoo/pull/135439

From: bf67f1e20e0bc0cfc48f32114383f36fa0b09dfe
From: Jurgen (jugj)
Date: 2023-10-19 14:47:18

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = 'ir.ui.menu'
-    group_attendance_use_pin = fields.Boolean(

Total Changes: 445

[IMP] hr_(holidays)_attendance : Revamp Attendance V17

Part-of: odoo/odoo#135439

================================= pseudo patch: =================================

--- a/addons/hr_attendance/models/__init__.py
+++ b/addons/hr_attendance/models/__init__.py
@@ -6,6 +6,5 @@ from . import hr_attendance_overtime
 from . import hr_employee_base
 from . import hr_employee
 from . import hr_employee_public
-from . import ir_ui_menu
 from . import res_company
 from . import res_users

--- a/addons/hr_attendance/models/hr_attendance.py
+++ b/addons/hr_attendance/models/hr_attendance.py
@@ -14,12 +14,17 @@ from odoo.tools import format_datetime
 from odoo.osv.expression import AND, OR
 from odoo.tools.float_utils import float_is_zero
 from odoo.exceptions import AccessError
+from odoo.tools import format_duration
+
+def get_google_maps_url(latitude, longitude):
+    return "https://maps.google.com?q=%s,%s" % (latitude, longitude)
 
 
 class HrAttendance(models.Model):
     _name = "hr.attendance"
     _description = "Attendance"
     _order = "check_in desc"
+    _inherit = "mail.thread"
 
     def _default_employee(self):
         return self.env.user.employee_id
@@ -27,25 +32,101 @@ class HrAttendance(models.Model):
     employee_id = fields.Many2one('hr.employee', string="Employee", default=_default_employee, required=True, ondelete='cascade', index=True)
     department_id = fields.Many2one('hr.department', string="Department", related="employee_id.department_id",
         readonly=True)
-    check_in = fields.Datetime(string="Check In", default=fields.Datetime.now, required=True)
-    check_out = fields.Datetime(string="Check Out")
+    check_in = fields.Datetime(string="Check In", default=fields.Datetime.now, required=True, tracking=True)
+    check_out = fields.Datetime(string="Check Out", tracking=True)
     worked_hours = fields.Float(string='Worked Hours', compute='_compute_worked_hours', store=True, readonly=True)
+    color = fields.Integer(compute='_compute_color')
+    overtime_hours = fields.Float(string="Over Time", compute='_compute_overtime_hours', store=True)
+    in_latitude = fields.Float(string="Latitude", digits=(10, 7), readonly=True)
+    in_longitude = fields.Float(string="Longitude", digits=(10, 7), readonly=True)
+    in_country_name = fields.Char(string="Country", help="Based on IP Address", readonly=True)
+    in_city = fields.Char(string="City", readonly=True)
+    in_ip_address = fields.Char(string="IP Address", readonly=True)
+    in_browser = fields.Char(string="Browser", readonly=True)
+    in_mode = fields.Selection(string="Mode",
+                               selection=[('kiosk', "Kiosk"),
+                                          ('systray', "Systray"),
+                                          ('manual', "Manual")],
+                               readonly=True,
+                               default='manual')
+    out_latitude = fields.Float(digits=(10, 7), readonly=True)
+    out_longitude = fields.Float(digits=(10, 7), readonly=True)
+    out_country_name = fields.Char(help="Based on IP Address", readonly=True)
+    out_city = fields.Char(readonly=True)
+    out_ip_address = fields.Char(readonly=True)
+    out_browser = fields.Char(readonly=True)
+    out_mode = fields.Selection(selection=[('kiosk', "Kiosk"),
+                                           ('systray', "Systray"),
+                                           ('manual', "Manual")],
+                                readonly=True,
+                                default='manual')
+
+    def _compute_color(self):
+        for attendance in self:
+            if attendance.check_out:
+                attendance.color = 1 if attendance.worked_hours > 16 else 0
+            else:
+                attendance.color = 1 if attendance.check_in < (datetime.today() - timedelta(days=1)) else 10
+
+    @api.depends('worked_hours')
+    def _compute_overtime_hours(self):
+        self.env['hr.attendance'].flush_model(['worked_hours'])
+        self.env['hr.attendance.overtime'].flush_model(['duration'])
+        self.env.cr.execute('''
+            SELECT att.id as att_id,
+                   att.worked_hours as att_wh,
+                   ot.id as ot_id,
+                   ot.duration as ot_d,
+                   ot.date as od,
+                   att.check_in as ad
+              FROM hr_attendance att
+         INNER JOIN hr_attendance_overtime ot
+                ON date_trunc('day',att.check_in) = date_trunc('day', ot.date)
+                AND date_trunc('day',att.check_out) = date_trunc('day', ot.date)
+                AND att.employee_id IN %s
+                AND att.employee_id = ot.employee_id
+                ORDER BY att.check_in DESC
+        ''', (tuple(self.employee_id.ids),))
+        a = self.env.cr.dictfetchall()
+        grouped_dict = dict()
+        for row in a:
+            if row['ot_id'] and row['att_wh']:
+                if row['ot_id'] not in grouped_dict:
+                    grouped_dict[row['ot_id']] = {'attendances': [(row['att_id'], row['att_wh'])], 'overtime_duration': row['ot_d']}
+                else:
+                    grouped_dict[row['ot_id']]['attendances'].append((row['att_id'], row['att_wh']))
+
+        att_progress_values = dict()
+        for ot in grouped_dict:
+            ot_bucket = grouped_dict[ot]['overtime_duration']
+            for att in grouped_dict[ot]['attendances']:
+                if ot_bucket > 0:
+                    sub_time = att[1] - ot_bucket
+                    if sub_time < 0:
+                        att_progress_values[att[0]] = 0
+                        ot_bucket -= att[1]
+                    else:
+                        att_progress_values[att[0]] = float(((att[1] - ot_bucket) / att[1])*100)
+                        ot_bucket = 0
+                else:
+                    att_progress_values[att[0]] = 100
+        for attendance in self:
+            attendance.overtime_hours = attendance.worked_hours * ((100 - att_progress_values.get(attendance.id, 100))/100)
 
     @api.depends('employee_id', 'check_in', 'check_out')
     def _compute_display_name(self):
         for attendance in self:
             if not attendance.check_out:
                 attendance.display_name = _(
-                    "%s from %s",
-                    attendance.employee_id.name,
-                    format_datetime(self.env, attendance.check_in, dt_format=False)
+                    "From %s",
+                    format_datetime(self.env, attendance.check_in, dt_format="HH:mm"),
                 )
             else:
                 attendance.display_name = _(
-                    "%s from %s to %s",
-                    attendance.employee_id.name,
-                    format_datetime(self.env, attendance.check_in, dt_format=False),
-                    format_datetime(self.env, attendance.check_out, dt_format=False),
+                    "%s : (%s-%s)",
+                    format_duration(attendance.worked_hours),
+                    format_datetime(self.env, attendance.check_in, dt_format="HH:mm"),
+                    format_datetime(self.env, attendance.check_out, dt_format="HH:mm"),
                 )
 
     def _get_employee_calendar(self):
@@ -156,7 +237,7 @@ class HrAttendance(models.Model):
 
         overtime_to_unlink = self.env['hr.attendance.overtime']
         overtime_vals_list = []
-
+        affected_employees = self.env['hr.employee']
         for emp, attendance_dates in employee_attendance_dates.items():
             # get_attendances_dates returns the date translated from the local timezone without tzinfo,
             # and contains all the date which we need to check for overtime
@@ -295,10 +376,16 @@ class HrAttendance(models.Model):
                             'duration': overtime_duration,
                             'duration_real': overtime_duration
                         })
+                        affected_employees |= overtime.employee_id
                 elif overtime:
                     overtime_to_unlink |= overtime
-        self.env['hr.attendance.overtime'].sudo().create(overtime_vals_list)
+        created_overtimes = self.env['hr.attendance.overtime'].sudo().create(overtime_vals_list)
+        employees_worked_hours_to_compute = (affected_employees.ids +
+                                             created_overtimes.employee_id.ids +
+                                             overtime_to_unlink.employee_id.ids)
         overtime_to_unlink.sudo().unlink()
+        self.env.add_to_compute(self._fields['overtime_hours'],
+                                self.search([('employee_id', 'in', employees_worked_hours_to_compute)]))
 
     @api.model_create_multi
     def create(self, vals_list):
@@ -309,7 +396,7 @@ class HrAttendance(models.Model):
     def write(self, vals):
         if vals.get('employee_id') and \
             vals['employee_id'] not in self.env.user.employee_ids.ids and \
-            not self.env.user.has_group('hr_attendance.group_hr_attendance_user'):
+            not self.env.user.has_group('hr_attendance.group_hr_attendance_officer'):
             raise AccessError(_("Do not have access, user cannot edit the attendances that are not his own."))
         attendances_dates = self._get_attendances_dates()
         result = super(HrAttendance, self).write(vals)
@@ -330,3 +417,19 @@ class HrAttendance(models.Model):
     @api.returns('self', lambda value: value.id)
     def copy(self, default=None):
         raise exceptions.UserError(_('You cannot duplicate an attendance.'))
+
+    def action_in_attendance_maps(self):
+        self.ensure_one()
+        return {
+            'type': 'ir.actions.act_url',
+            'url': get_google_maps_url(self.in_latitude, self.in_longitude),
+            'target': 'new'
+        }
+
+    def action_out_attendance_maps(self):
+        self.ensure_one()
+        return {
+            'type': 'ir.actions.act_url',
+            'url': get_google_maps_url(self.out_latitude, self.out_longitude),
+            'target': 'new'
+        }

--- a/addons/hr_attendance/models/hr_employee.py
+++ b/addons/hr_attendance/models/hr_employee.py
@@ -11,33 +11,70 @@ from odoo.tools import float_round
 class HrEmployee(models.Model):
     _inherit = "hr.employee"
 
+    attendance_manager_id = fields.Many2one(
+        'res.users', store=True, readonly=False,
+        domain="[('share', '=', False), ('company_ids', 'in', company_id)]",
+        groups="hr_attendance.group_hr_attendance_manager",
+        help="The user set in Attendance will access the attendance of the employee through the dedicated app and will be able to edit them.")
     attendance_ids = fields.One2many(
-        'hr.attendance', 'employee_id', groups="hr_attendance.group_hr_attendance_user,hr.group_hr_user")
+        'hr.attendance', 'employee_id', groups="hr_attendance.group_hr_attendance_officer,hr.group_hr_user")
     last_attendance_id = fields.Many2one(
         'hr.attendance', compute='_compute_last_attendance_id', store=True,
-        groups="hr_attendance.group_hr_attendance_kiosk,hr_attendance.group_hr_attendance,hr.group_hr_user")
+        groups="hr_attendance.group_hr_attendance_officer,hr.group_hr_user")
     last_check_in = fields.Datetime(
         related='last_attendance_id.check_in', store=True,
-        groups="hr_attendance.group_hr_attendance_user,hr.group_hr_user")
+        groups="hr_attendance.group_hr_attendance_officer,hr.group_hr_user", tracking=False)
     last_check_out = fields.Datetime(
         related='last_attendance_id.check_out', store=True,
-        groups="hr_attendance.group_hr_attendance_user,hr.group_hr_user")
+        groups="hr_attendance.group_hr_attendance_officer,hr.group_hr_user", tracking=False)
     attendance_state = fields.Selection(
         string="Attendance Status", compute='_compute_attendance_state',
         selection=[('checked_out', "Checked out"), ('checked_in', "Checked in")],
-        groups="hr_attendance.group_hr_attendance_kiosk,hr_attendance.group_hr_attendance,hr.group_hr_user")
+        groups="hr_attendance.group_hr_attendance_officer,hr.group_hr_user")
     hours_last_month = fields.Float(
-        compute='_compute_hours_last_month', groups="hr_attendance.group_hr_attendance_user,hr.group_hr_user")
+        compute='_compute_hours_last_month', groups="hr_attendance.group_hr_attendance_officer,hr.group_hr_user")
     hours_today = fields.Float(
         compute='_compute_hours_today',
-        groups="hr_attendance.group_hr_attendance_kiosk,hr_attendance.group_hr_attendance,hr.group_hr_user")
+        groups="hr_attendance.group_hr_attendance_officer,hr.group_hr_user")
+    hours_previously_today = fields.Float(
+        compute='_compute_hours_today',
+        groups="hr_attendance.group_hr_attendance_officer,hr.group_hr_user")
+    last_attendance_worked_hours = fields.Float(
+        compute='_compute_hours_today',
+        groups="hr_attendance.group_hr_attendance_officer,hr.group_hr_user")
     hours_last_month_display = fields.Char(
-        compute='_compute_hours_last_month', groups="hr_attendance.group_hr_attendance_user,hr.group_hr_user")
+        compute='_compute_hours_last_month')
     overtime_ids = fields.One2many(
-        'hr.attendance.overtime', 'employee_id', groups="hr_attendance.group_hr_attendance_user,hr.group_hr_user")
+        'hr.attendance.overtime', 'employee_id', groups="hr_attendance.group_hr_attendance_officer,hr.group_hr_user")
     total_overtime = fields.Float(
-        compute='_compute_total_overtime', compute_sudo=True,
-        groups="hr_attendance.group_hr_attendance_kiosk,hr_attendance.group_hr_attendance,hr.group_hr_user")
+        compute='_compute_total_overtime', compute_sudo=True)
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        officer_group = self.env.ref('hr_attendance.group_hr_attendance_officer', raise_if_not_found=False)
+        group_updates = []
+        for vals in vals_list:
+            if officer_group and vals.get('attendance_manager_id'):
+                group_updates.append((4, vals['attendance_manager_id']))
+        if group_updates:
+            officer_group.sudo().write({'users': group_updates})
+        return super().create(vals_list)
+
+    def write(self, values):
+        old_officers = self.env['res.users']
+        if 'attendance_manager_id' in values:
+            old_officers = self.attendance_manager_id
+            # Officer was added
+            if values['attendance_manager_id']:
+                officer = self.env['res.users'].browse(values['attendance_manager_id'])
+                officers_group = self.env.ref('hr_attendance.group_hr_attendance_officer', raise_if_not_found=False)
+                if officers_group and not officer.has_group('hr_attendance.group_hr_attendance_officer'):
+                    officer.sudo().write({'groups_id': [(4, officers_group.id)]})
+
+        res = super(HrEmployee, self).write(values)
+        old_officers.sudo()._clean_attendance_officers()
+
+        return res
 
     @api.depends('overtime_ids.duration', 'attendance_ids')
     def _compute_total_overtime(self):
@@ -48,30 +85,26 @@ class HrEmployee(models.Model):
                 employee.total_overtime = 0
 
     def _compute_hours_last_month(self):
+        """
+        Compute hours in the current month, if we are the 15th of october, will compute hours from 1 oct to 15 oct
+        """
         now = fields.Datetime.now()
         now_utc = pytz.utc.localize(now)
         for employee in self:
             tz = pytz.timezone(employee.tz or 'UTC')
             now_tz = now_utc.astimezone(tz)
-            start_tz = now_tz + relativedelta(months=-1, day=1, hour=0, minute=0, second=0, microsecond=0)
+            start_tz = now_tz.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
             start_naive = start_tz.astimezone(pytz.utc).replace(tzinfo=None)
-            end_tz = now_tz + relativedelta(day=1, hour=0, minute=0, second=0, microsecond=0)
+            end_tz = now_tz
             end_naive = end_tz.astimezone(pytz.utc).replace(tzinfo=None)
-
             attendances = self.env['hr.attendance'].search([
                 ('employee_id', '=', employee.id),
                 '&',
-                ('check_in', '<=', end_naive),
-                ('check_out', '>=', start_naive),
+                ('check_in', '>=', start_naive),
+                ('check_out', '<=', end_naive),
             ])
 
-            hours = 0
-            for attendance in attendances:
-                check_in = max(attendance.check_in, start_naive)
-                check_out = min(attendance.check_out, end_naive)
-                hours += (check_out - check_in).total_seconds() / 3600.0
-
-            employee.hours_last_month = round(hours, 2)
+            employee.hours_last_month = round(sum([att.worked_hours for att in attendances]), 2)
             employee.hours_last_month_display = "%g" % employee.hours_last_month
 
     def _compute_hours_today(self):
@@ -88,12 +121,18 @@ class HrEmployee(models.Model):
                 ('employee_id', '=', employee.id),
                 ('check_in', '<=', now),
                 '|', ('check_out', '>=', start_naive), ('check_out', '=', False),
-            ])
-
+            ], order='check_in asc')
+            hours_previously_today = 0
             worked_hours = 0
+            attendance_worked_hours = 0
             for attendance in attendances:
                 delta = (attendance.check_out or now) - max(attendance.check_in, start_naive)
-                worked_hours += delta.total_seconds() / 3600.0
+                attendance_worked_hours = delta.total_seconds() / 3600.0
+                worked_hours += attendance_worked_hours
+                hours_previously_today += attendance_worked_hours
+            employee.last_attendance_worked_hours = attendance_worked_hours
+            hours_previously_today -= attendance_worked_hours
+            employee.hours_previously_today = hours_previously_today
             employee.hours_today = worked_hours
 
     @api.depends('attendance_ids')
@@ -101,7 +140,7 @@ class HrEmployee(models.Model):
         for employee in self:
             employee.last_attendance_id = self.env['hr.attendance'].search([
                 ('employee_id', '=', employee.id),
-            ], limit=1)
+            ], order="check_in desc", limit=1)
 
     @api.depends('last_attendance_id.check_in', 'last_attendance_id.check_out', 'last_attendance_id')
     def _compute_attendance_state(self):
@@ -109,55 +148,7 @@ class HrEmployee(models.Model):
             att = employee.last_attendance_id.sudo()
             employee.attendance_state = att and not att.check_out and 'checked_in' or 'checked_out'
 
-    @api.model
-    def attendance_scan(self, barcode):
-        """ Receive a barcode scanned from the Kiosk Mode and change the attendances of corresponding employee.
-            Returns either an action or a warning.
-        """
-        employee = self.sudo().search([('barcode', '=', barcode)], limit=1)
-        if employee:
-            return employee._attendance_action('hr_attendance.hr_attendance_action_kiosk_mode')
-        return {'warning': _("No employee corresponding to Badge ID '%(barcode)s.'") % {'barcode': barcode}}
-
-    def attendance_manual(self, next_action, entered_pin=None):
-        self.ensure_one()
-        attendance_user_and_no_pin = self.user_has_groups(
-            'hr_attendance.group_hr_attendance_user,'
-            '!hr_attendance.group_hr_attendance_use_pin')
-        can_check_without_pin = attendance_user_and_no_pin or (self.user_id == self.env.user and entered_pin is None)
-        if can_check_without_pin or entered_pin is not None and entered_pin == self.sudo().pin:
-            return self._attendance_action(next_action)
-        if not self.user_has_groups('hr_attendance.group_hr_attendance_user'):
-            return {'warning': _('To activate Kiosk mode without pin code, you must have access right as an Officer or above in the Attendance app. Please contact your administrator.')}
-        return {'warning': _('Wrong PIN')}
-
-    def _attendance_action(self, next_action):
-        """ Changes the attendance of the employee.
-            Returns an action to the check in/out message,
-            next_action defines which menu the check in/out message should return to. ("My Attendances" or "Kiosk Mode")
-        """
-        self.ensure_one()
-        employee = self.sudo()
-        action_message = self.env["ir.actions.actions"]._for_xml_id("hr_attendance.hr_attendance_action_greeting_message")
-        action_message['previous_attendance_change_date'] = employee.last_attendance_id and (employee.last_attendance_id.check_out or employee.last_attendance_id.check_in) or False
-        action_message['employee_name'] = employee.name
-        action_message['barcode'] = employee.barcode
-        action_message['next_action'] = next_action
-        action_message['hours_today'] = employee.hours_today
-        action_message['kiosk_delay'] = employee.company_id.attendance_kiosk_delay * 1000
-
-        if employee.user_id:
-            modified_attendance = employee.with_user(employee.user_id).sudo()._attendance_action_change()
-        else:
-            modified_attendance = employee._attendance_action_change()
-        action_message['attendance'] = modified_attendance.read()[0]
-        action_message['total_overtime'] = employee.total_overtime
-        # Overtime have an unique constraint on the day, no need for limit=1
-        action_message['overtime_today'] = self.env['hr.attendance.overtime'].sudo().search([
-            ('employee_id', '=', employee.id), ('date', '=', fields.Date.context_today(self)), ('adjustment', '=', False)]).duration or 0
-        return {'action': action_message}
-
-    def _attendance_action_change(self):
+    def _attendance_action_change(self, geo_information=None):
         """ Check In/Check Out action
             Check In: create a new attendance record
             Check Out: modify check_out field of appropriate attendance record
@@ -166,15 +157,57 @@ class HrEmployee(models.Model):
         action_date = fields.Datetime.now()
 
         if self.attendance_state != 'checked_in':
-            vals = {
-                'employee_id': self.id,
-                'check_in': action_date,
-            }
+            if geo_information:
+                vals = {
+                    'employee_id': self.id,
+                    'check_in': action_date,
+                    **{'in_%s' % key: geo_information[key] for key in geo_information}
+                }
+            else:
+                vals = {
+                    'employee_id': self.id,
+                    'check_in': action_date,
+                }
             return self.env['hr.attendance'].create(vals)
         attendance = self.env['hr.attendance'].search([('employee_id', '=', self.id), ('check_out', '=', False)], limit=1)
         if attendance:
-            attendance.check_out = action_date
+            if geo_information:
+                attendance.write({
+                    'check_out': action_date,
+                    **{'out_%s' % key: geo_information[key] for key in geo_information}
+                })
+            else:
+                attendance.write({
+                    'check_out': action_date
+                })
         else:
             raise exceptions.UserError(_('Cannot perform check out on %(empl_name)s, could not find corresponding check in. '
                 'Your attendances have probably been modified manually by human resources.') % {'empl_name': self.sudo().name, })
         return attendance
+
+    def action_open_last_month_attendances(self):
+        self.ensure_one()
+        return {
+            "type": "ir.actions.act_window",
+            "name": _("Attendances This Month"),
+            "res_model": "hr.attendance",
+            "views": [[self.env.ref('hr_attendance.hr_attendance_employee_simple_tree_view').id, "tree"]],
+            "context": {
+                "create": 0
+            },
+            "domain": [('employee_id', '=', self.id),
+                       ('check_in', ">=", fields.datetime.today().replace(day=1, hour=0, minute=0))]
+        }
+
+    def action_open_last_month_overtime(self):
+        self.ensure_one()
+        return {
+            "type": "ir.actions.act_window",
+            "name": _("Overtime"),
+            "res_model": "hr.attendance.overtime",
+            "views": [[False, "tree"]],
+            "context": {
+                "create": 0
+            },
+            "domain": [('employee_id', '=', self.id)]
+        }

--- a/addons/hr_attendance/models/hr_employee_public.py
+++ b/addons/hr_attendance/models/hr_employee_public.py
@@ -8,22 +8,16 @@ class HrEmployeePublic(models.Model):
 
     # These are required for manual attendance
     attendance_state = fields.Selection(related='employee_id.attendance_state', readonly=True,
-        groups="hr_attendance.group_hr_attendance_kiosk,hr_attendance.group_hr_attendance")
+        groups="hr_attendance.group_hr_attendance_officer")
     hours_today = fields.Float(related='employee_id.hours_today', readonly=True,
-        groups="hr_attendance.group_hr_attendance_kiosk,hr_attendance.group_hr_attendance")
+        groups="hr_attendance.group_hr_attendance_officer")
     last_attendance_id = fields.Many2one(related='employee_id.last_attendance_id', readonly=True,
-        groups="hr_attendance.group_hr_attendance_kiosk,hr_attendance.group_hr_attendance")
+        groups="hr_attendance.group_hr_attendance_officer")
     total_overtime = fields.Float(related='employee_id.total_overtime', readonly=True,
-        groups="hr_attendance.group_hr_attendance_kiosk,hr_attendance.group_hr_attendance")
-
-    def action_employee_kiosk_confirm(self):
-        self.ensure_one()
-        return {
-            'type': 'ir.actions.client',
-            'name': 'Confirm',
-            'tag': 'hr_attendance_kiosk_confirm',
-            'employee_id': self.id,
-            'employee_name': self.name,
-            'employee_state': self.attendance_state,
-            'employee_hours_today': self.hours_today,
-        }
+        groups="hr_attendance.group_hr_attendance_officer")
+    attendance_manager_id = fields.Many2one(related='employee_id.attendance_manager_id',
+        groups="hr_attendance.group_hr_attendance_officer")
+    last_check_in = fields.Datetime(related='employee_id.last_check_in',
+        groups="hr_attendance.group_hr_attendance_officer")
+    last_check_out = fields.Datetime(related='employee_id.last_check_out',
+        groups="hr_attendance.group_hr_attendance_officer")

--- a/addons/hr_attendance/models/ir_ui_menu.py
+++ b/None
@@ -1,14 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import models
-
-
-class IrUiMenu(models.Model):
-    _inherit = 'ir.ui.menu'
-
-    def _load_menus_blacklist(self):
-        res = super()._load_menus_blacklist()
-        if self.env.user.has_group('hr_attendance.group_hr_attendance_user'):
-            res.append(self.env.ref('hr_attendance.menu_hr_attendance_attendances_overview').id)
-        return res

--- a/addons/hr_attendance/models/res_company.py
+++ b/addons/hr_attendance/models/res_company.py
@@ -1,8 +1,10 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import fields, models
+from odoo import fields, models, api
 from odoo.osv.expression import OR
+import uuid
+from werkzeug.urls import url_join
 
 
 class ResCompany(models.Model):
@@ -12,7 +14,7 @@ class ResCompany(models.Model):
     overtime_start_date = fields.Date(string="Extra Hours Starting Date")
     overtime_company_threshold = fields.Integer(string="Tolerance Time In Favor Of Company", default=0)
     overtime_employee_threshold = fields.Integer(string="Tolerance Time In Favor Of Employee", default=0)
-
+    hr_attendance_display_overtime = fields.Boolean(string="Display Extra Hours")
     attendance_kiosk_mode = fields.Selection([
         ('barcode', 'Barcode / RFID'),
         ('barcode_manual', 'Barcode / RFID and Manual Selection'),
@@ -24,6 +26,15 @@ class ResCompany(models.Model):
         ('back', 'Back Camera'),
     ], string='Barcode Source', default='front')
     attendance_kiosk_delay = fields.Integer(default=10)
+    attendance_kiosk_key = fields.Char(default=lambda s: uuid.uuid4().hex, copy=False, groups='hr_attendance.group_hr_attendance_manager')
+    attendance_kiosk_url = fields.Char(compute="_compute_attendance_kiosk_url")
+    attendance_kiosk_use_pin = fields.Boolean(string='Employee PIN Identification')
+    attendance_from_systray = fields.Boolean(string='Attendance From Systray', default=True)
+
+    @api.depends("attendance_kiosk_key")
+    def _compute_attendance_kiosk_url(self):
+        for company in self:
+            company.attendance_kiosk_url = url_join(company.get_base_url(), '/hr_attendance/%s' % company.attendance_kiosk_key)
 
     def write(self, vals):
         search_domain = False  # Overtime to generate
@@ -72,3 +83,16 @@ class ResCompany(models.Model):
             self.env['hr.attendance'].search(search_domain)._update_overtime()
 
         return res
+
+    def _regenerate_attendance_kiosk_key(self):
+        self.ensure_one()
+        self.write({
+            'attendance_kiosk_key': uuid.uuid4().hex
+        })
+
+    def _action_open_kiosk_mode(self):
+        return {
+            'type': 'ir.actions.act_url',
+            'target': 'self',
+            'url': '/hr_attendance/kiosk_mode_menu'
+        }

--- a/addons/hr_attendance/models/res_config_settings.py
+++ b/addons/hr_attendance/models/res_config_settings.py
@@ -7,9 +7,6 @@ from odoo import api, fields, models
 class ResConfigSettings(models.TransientModel):
     _inherit = 'res.config.settings'
 
-    group_attendance_use_pin = fields.Boolean(
-        string='Employee PIN',
-        implied_group="hr_attendance.group_hr_attendance_use_pin")
     hr_attendance_overtime = fields.Boolean(
         string="Count Extra Hours", readonly=False)
     overtime_start_date = fields.Date(string="Extra Hours Starting Date", readonly=False)
@@ -17,9 +14,13 @@ class ResConfigSettings(models.TransientModel):
         string="Tolerance Time In Favor Of Company", readonly=False)
     overtime_employee_threshold = fields.Integer(
         string="Tolerance Time In Favor Of Employee", readonly=False)
+    hr_attendance_display_overtime = fields.Boolean(related='company_id.hr_attendance_display_overtime', readonly=False)
     attendance_kiosk_mode = fields.Selection(related='company_id.attendance_kiosk_mode', readonly=False)
     attendance_barcode_source = fields.Selection(related='company_id.attendance_barcode_source', readonly=False)
     attendance_kiosk_delay = fields.Integer(related='company_id.attendance_kiosk_delay', readonly=False)
+    attendance_kiosk_url = fields.Char(related='company_id.attendance_kiosk_url')
+    attendance_kiosk_use_pin = fields.Boolean(related='company_id.attendance_kiosk_use_pin', readonly=False)
+    attendance_from_systray = fields.Boolean(related="company_id.attendance_from_systray", readonly=False)
 
     @api.model
     def get_values(self):
@@ -47,3 +48,7 @@ class ResConfigSettings(models.TransientModel):
         ]
         if any(self[field] != company[field] for field in fields_to_check):
             company.write({field: self[field] for field in fields_to_check})
+
+    def regenerate_kiosk_key(self):
+        if self.user_has_groups("hr_attendance.group_hr_attendance_manager"):
+            self.company_id._regenerate_attendance_kiosk_key()

--- a/addons/hr_attendance/models/res_users.py
+++ b/addons/hr_attendance/models/res_users.py
@@ -1,8 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import models, fields
-
+from odoo import models, fields, _
 
 class User(models.Model):
     _inherit = ['res.users']
@@ -13,6 +12,8 @@ class User(models.Model):
     last_check_in = fields.Datetime(related='employee_id.last_attendance_id.check_in')
     last_check_out = fields.Datetime(related='employee_id.last_attendance_id.check_out')
     total_overtime = fields.Float(related='employee_id.total_overtime')
+    attendance_manager_id = fields.Many2one(related='employee_id.attendance_manager_id', readonly=False)
+    display_extra_hours = fields.Boolean(related='company_id.hr_attendance_display_overtime')
 
     @property
     def SELF_READABLE_FIELDS(self):
@@ -22,5 +23,41 @@ class User(models.Model):
             'attendance_state',
             'last_check_in',
             'last_check_out',
-            'total_overtime'
+            'total_overtime',
+            'attendance_manager_id',
+            'display_extra_hours',
         ]
+
+    def _clean_attendance_officers(self):
+        attendance_officers = self.env['hr.employee'].search(
+            [('attendance_manager_id', 'in', self.ids)]).attendance_manager_id
+        officers_to_remove_ids = self - attendance_officers
+        if officers_to_remove_ids:
+            self.env.ref('hr_attendance.group_hr_attendance_officer').users = [(3, user.id) for user in
+                                                                               officers_to_remove_ids]
+    def action_open_last_month_attendances(self):
+        self.ensure_one()
+        return {
+            "type": "ir.actions.act_window",
+            "name": _("Attendances This Month"),
+            "res_model": "hr.attendance",
+            "views": [[self.env.ref('hr_attendance.hr_attendance_employee_simple_tree_view').id, "tree"]],
+            "context": {
+                "create": 0
+            },
+            "domain": [('employee_id', '=', self.employee_id.id),
+                       ('check_in', ">=", fields.datetime.today().replace(day=1, hour=0, minute=0))]
+        }
+
+    def action_open_last_month_overtime(self):
+        self.ensure_one()
+        return {
+            "type": "ir.actions.act_window",
+            "name": _("Overtime"),
+            "res_model": "hr.attendance.overtime",
+            "views": [[False, "tree"]],
+            "context": {
+                "create": 0
+            },
+            "domain": [('employee_id', '=', self.employee_id.id)]
+        }
