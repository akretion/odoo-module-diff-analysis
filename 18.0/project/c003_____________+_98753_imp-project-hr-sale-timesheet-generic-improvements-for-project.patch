PR: https://github.com/odoo/odoo/pull/98753

From: 8fe450dbe822dbc39f3c5bcd7b39945cab3d86a3
From: Rohit Kumar
Date: 2023-11-29 18:45:45

Structural Changes: 4
Total Changes: 35

[IMP] project,(hr,sale)_timesheet: generic improvements for project

Purpose of the commit is to do the generic improvements for project.

So in this commit did the following changes:
 - add a space between 'access to:' and the name of the course in SOL nameget.
 - change the second part of the warning in project form view.
 - hide the 'remaining hours' value if the nb of 'initially planned hours' is
   equal to 0 in task list view.
 - hide the 'initially planned hours' and 'hours spent' values if they are equal
   to 0 in task list view.
 - hide the 'milestone' and 'assignees' fields if they are false in task calendar
   popover.
 - hide the 'remaining hours on SO' value if there is no SOL set on the task in
   task list view.
 - use the progressbar widget for the progress field in project update list view.
 - add the fields effective hours/days, timesheets progress, milestones progress,
   next milestone in project list view.

task-3178057

closes odoo/odoo#98753

Related: odoo/enterprise#30678
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/project_milestone.py
+++ b/addons/project/models/project_milestone.py
@@ -4,6 +4,7 @@
 from collections import defaultdict
 
 from odoo import api, fields, models
+from odoo.tools import format_date
 
 from .project_task import CLOSED_STATES
 
@@ -119,3 +120,11 @@ class ProjectMilestone(models.Model):
             milestone_mapping = self.env.context.get('milestone_mapping', {})
             milestone_mapping[self.id] = milestone_copy.id
         return milestone_copy
+
+    def _compute_display_name(self):
+        super()._compute_display_name()
+        if not self._context.get('display_milestone_deadline'):
+            return
+        for milestone in self:
+            if milestone.deadline:
+                milestone.display_name = f'{milestone.display_name} - {format_date(self.env, milestone.deadline)}'

--- a/addons/project/models/project_project.py
+++ b/addons/project/models/project_project.py
@@ -147,6 +147,7 @@ class Project(models.Model):
         ],
         string='Visibility', required=True,
         default='portal',
+        tracking=True,
         help="People to whom this project and its tasks will be visible.\n\n"
             "- Invited internal users: when following a project, internal users will get access to all of its tasks without distinction. "
             "Otherwise, they will only get access to the specific tasks they are following.\n "
@@ -211,6 +212,10 @@ class Project(models.Model):
     milestone_count = fields.Integer(compute='_compute_milestone_count', groups='project.group_project_milestone')
     milestone_count_reached = fields.Integer(compute='_compute_milestone_reached_count', groups='project.group_project_milestone')
     is_milestone_exceeded = fields.Boolean(compute="_compute_is_milestone_exceeded", search='_search_is_milestone_exceeded')
+    milestone_progress = fields.Integer("Milestones Reached", compute='_compute_milestone_reached_count', groups="project.group_project_milestone")
+    next_milestone_id = fields.Many2one('project.milestone', compute='_compute_next_milestone_id', groups="project.group_project_milestone")
+    can_mark_milestone_as_done = fields.Boolean(compute='_compute_next_milestone_id', groups="project.group_project_milestone")
+    is_milestone_deadline_exceeded = fields.Boolean(compute='_compute_next_milestone_id', groups="project.group_project_milestone")
 
     _sql_constraints = [
         ('project_date_greater', 'check(date >= date_start)', "The project's start date must be before its end date.")
@@ -226,6 +231,22 @@ class Project(models.Model):
                 limit=1,
             ).id
 
+    @api.depends('milestone_ids', 'milestone_ids.is_reached', 'milestone_ids.deadline')
+    def _compute_next_milestone_id(self):
+        milestone_ids_per_project_id = {
+            project.id: milestone_ids
+            for project, milestone_ids in self.env['project.milestone']._read_group(
+                [('project_id', 'in', self.ids), ('is_reached', '=', False)],
+                ['project_id'],
+                ['id:recordset'],
+            )
+        }
+        for project in self:
+            milestone = milestone_ids_per_project_id.get(project.id, self.env['project.milestone'])[:1]
+            project.next_milestone_id = milestone
+            project.can_mark_milestone_as_done = milestone.can_be_marked_as_done
+            project.is_milestone_deadline_exceeded = milestone.is_deadline_exceeded
+
     def _compute_access_url(self):
         super(Project, self)._compute_access_url()
         for project in self:
@@ -235,7 +256,7 @@ class Project(models.Model):
         super(Project, self)._compute_access_warning()
         for project in self.filtered(lambda x: x.privacy_visibility != 'portal'):
             project.access_warning = _(
-                "The project cannot be shared with the recipient(s) because the privacy of the project is too restricted. Set the privacy to 'Visible by following customers' in order to make it accessible by the recipient(s).")
+                "This project is currently restricted to \"Invited internal users\". The project's visibility will be changed to \"invited portal users and all internal users (public)\" in order to make it accessible to the recipients.")
 
     @api.depends_context('uid')
     def _compute_allow_rating(self):
@@ -294,7 +315,7 @@ class Project(models.Model):
         for project in self:
             project.milestone_count = mapped_count.get(project.id, 0)
 
-    @api.depends('milestone_ids.is_reached')
+    @api.depends('milestone_ids.is_reached', 'milestone_count')
     def _compute_milestone_reached_count(self):
         read_group = self.env['project.milestone']._read_group(
             [('project_id', 'in', self.ids), ('is_reached', '=', True)],
@@ -304,6 +325,7 @@ class Project(models.Model):
         mapped_count = {project.id: count for project, count in read_group}
         for project in self:
             project.milestone_count_reached = mapped_count.get(project.id, 0)
+            project.milestone_progress = project.milestone_count and project.milestone_count_reached * 100 // project.milestone_count
 
     @api.depends('milestone_ids', 'milestone_ids.is_reached', 'milestone_ids.deadline', 'allow_milestones')
     def _compute_is_milestone_exceeded(self):
