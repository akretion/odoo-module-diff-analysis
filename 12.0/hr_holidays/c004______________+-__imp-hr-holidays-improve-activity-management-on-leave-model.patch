PR: https://github.com/odoo/odoo/pull/

From: 1d71c0623334706abde82b45fd6fcef2b35ba9f9
From: Thibault Delavall√©e
Date: 2018-03-27 13:19:10

Structural Changes: 4
Total Changes: 100

[IMP] hr_holidays: improve activity management on leave model

This commit improves leave request and allocation management through a
better integration of activities and addition of automated activities.
Several things are done in this commit :

 * leave and allocation models do not inherit from mail.activity.mixin.
   This commit adds the inherit so that HR users and managers can now
   schedule and manage activities on leave and allocation requests. This
   will help them in their daily job;
 * automatic activities generation is added for leave and allocation.
   Activities are generated for approval and second approval. They are also
   automatically set as done when validating or unlinked when refusing or
   resetting to avoid bloating users with unnecessary activities;
 * a menu to configure activity types is added. Indeed HR managers should be
   able to see and configure activity types related to their job;
 * filters are added to be able to use the systray and to filter the kanban
   view based on activities

Having automated activities allow to replace some messages and tracking
that were implemented to warn people of leave and allocation to approve
or validate. This commit therefore

 * simplifies the tracking as only approved or refused state now trigger
   a subtype;
 * removes to approve and to validate subtypes on leave and allocation
   model as well as their parent subtypes on the department. This allows
   to simplify chatter a lot in hr_holidays app;

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -20,7 +20,7 @@ class HolidaysRequest(models.Model):
     _name = "hr.leave"
     _description = "Leave"
     _order = "date_from desc"
-    _inherit = ['mail.thread']
+    _inherit = ['mail.thread', 'mail.activity.mixin']
 
     @api.model
     def default_get(self, fields_list):
@@ -249,6 +249,7 @@ class HolidaysRequest(models.Model):
         holiday.add_follower(employee_id)
         if 'employee_id' in values:
             holiday._onchange_employee_id()
+        holiday.activity_update()
         return holiday
 
     @api.multi
@@ -357,13 +358,16 @@ class HolidaysRequest(models.Model):
             for linked_request in linked_requests:
                 linked_request.action_draft()
             linked_requests.unlink()
+        self.activity_update()
         return True
 
     @api.multi
     def action_confirm(self):
         if self.filtered(lambda holiday: holiday.state != 'draft'):
             raise UserError(_('Leave request must be in Draft state ("To Submit") in order to confirm it.'))
-        return self.write({'state': 'confirm'})
+        self.write({'state': 'confirm'})
+        self.activity_update()
+        return True
 
     @api.multi
     def action_approve(self):
@@ -387,6 +391,7 @@ class HolidaysRequest(models.Model):
 
         self.filtered(lambda hol: hol.validation_type == 'both').write({'state': 'validate1', 'first_approver_id': current_employee.id})
         self.filtered(lambda hol: not hol.validation_type == 'both').action_validate()
+        self.activity_update()
         return True
 
     @api.multi
@@ -418,6 +423,7 @@ class HolidaysRequest(models.Model):
                 leaves.action_approve()
                 if leaves and leaves[0].validation_type == 'both':
                     leaves.action_validate()
+        self.activity_update()
         return True
 
     @api.multi
@@ -440,8 +446,45 @@ class HolidaysRequest(models.Model):
             # If a category that created several holidays, cancel all related
             holiday.linked_request_ids.action_refuse()
         self._remove_resource_leave()
+        self.activity_update()
         return True
 
+    # ------------------------------------------------------------
+    # Activity methods
+    # ------------------------------------------------------------
+
+    def _get_responsible_for_approval(self):
+        if self.state == 'confirm' and self.manager_id.user_id:
+            return self.manager_id.user_id
+        elif self.state == 'confirm' and self.employee_id.parent_id.user_id:
+            return self.employee_id.parent_id.user_id
+        elif self.department_id.manager_id.user_id:
+            return self.department_id.manager_id.user_id
+        return self.env.user
+
+    def activity_update(self):
+        to_clean, to_do = self.env['hr.leave'], self.env['hr.leave']
+        for holiday in self:
+            if holiday.state == 'draft':
+                to_clean |= holiday
+            elif holiday.state == 'confirm':
+                holiday.activity_schedule(
+                    'hr_holidays.mail_act_leave_approval', fields.Date.today(),
+                    user_id=holiday._get_responsible_for_approval().id)
+            elif holiday.state == 'validate1':
+                holiday.activity_feedback(['hr_holidays.mail_act_leave_approval'])
+                holiday.activity_schedule(
+                    'hr_holidays.mail_act_leave_second_approval', fields.Date.today(),
+                    user_id=holiday._get_responsible_for_approval().id)
+            elif holiday.state == 'validate':
+                to_do |= holiday
+            elif holiday.state == 'refuse':
+                to_clean |= holiday
+        if to_clean:
+            to_clean.activity_unlink(['hr_holidays.mail_act_leave_approval', 'hr_holidays.mail_act_leave_second_approval'])
+        if to_do:
+            to_do.activity_feedback(['hr_holidays.mail_act_leave_approval', 'hr_holidays.mail_act_leave_second_approval'])
+
     ####################################################
     # Messaging methods
     ####################################################
@@ -450,10 +493,6 @@ class HolidaysRequest(models.Model):
     def _track_subtype(self, init_values):
         if 'state' in init_values and self.state == 'validate':
             return 'hr_holidays.mt_leave_approved'
-        elif 'state' in init_values and self.state == 'validate1':
-            return 'hr_holidays.mt_leave_first_validated'
-        elif 'state' in init_values and self.state == 'confirm':
-            return 'hr_holidays.mt_leave_confirmed'
         elif 'state' in init_values and self.state == 'refuse':
             return 'hr_holidays.mt_leave_refused'
         return super(HolidaysRequest, self)._track_subtype(init_values)

--- a/addons/hr_holidays/models/hr_leave_allocation.py
+++ b/addons/hr_holidays/models/hr_leave_allocation.py
@@ -15,7 +15,7 @@ _logger = logging.getLogger(__name__)
 class HolidaysAllocation(models.Model):
     _name = "hr.leave.allocation"
     _description = "Allocation"
-    _inherit = ['mail.thread']
+    _inherit = ['mail.thread', 'mail.activity.mixin']
 
     def _default_employee(self):
         return self.env.context.get('default_employee_id') or self.env['hr.employee'].search([('user_id', '=', self.env.uid)], limit=1)
@@ -147,6 +147,7 @@ class HolidaysAllocation(models.Model):
             values.update({'department_id': self.env['hr.employee'].browse(employee_id).department_id.id})
         holiday = super(HolidaysAllocation, self.with_context(mail_create_nolog=True, mail_create_nosubscribe=True)).create(values)
         holiday.add_follower(employee_id)
+        holiday.activity_update()
         return holiday
 
     @api.multi
@@ -200,13 +201,16 @@ class HolidaysAllocation(models.Model):
             for linked_request in linked_requests:
                 linked_request.action_draft()
             linked_requests.unlink()
+        self.activity_update()
         return True
 
     @api.multi
     def action_confirm(self):
         if self.filtered(lambda holiday: holiday.state != 'draft'):
             raise UserError(_('Leave request must be in Draft state ("To Submit") in order to confirm it.'))
-        return self.write({'state': 'confirm'})
+        res = self.write({'state': 'confirm'})
+        self.activity_update()
+        return res
 
     @api.multi
     def action_approve(self):
@@ -230,6 +234,7 @@ class HolidaysAllocation(models.Model):
 
         self.filtered(lambda hol: hol.validation_type == 'both').write({'state': 'validate1', 'first_approver_id': current_employee.id})
         self.filtered(lambda hol: not hol.validation_type == 'both').action_validate()
+        self.activity_update()
         return True
 
     @api.multi
@@ -259,6 +264,7 @@ class HolidaysAllocation(models.Model):
                 leaves.action_approve()
                 if leaves and leaves[0].validation_type == 'both':
                     leaves.action_validate()
+        self.activity_update()
         return True
 
     @api.multi
@@ -277,8 +283,43 @@ class HolidaysAllocation(models.Model):
                 holiday.write({'state': 'refuse', 'second_approver_id': current_employee.id})
             # If a category that created several holidays, cancel all related
             holiday.linked_request_ids.action_refuse()
+        self.activity_update()
         return True
 
+    # ------------------------------------------------------------
+    # Activity methods
+    # ------------------------------------------------------------
+
+    def _get_responsible_for_approval(self):
+        if self.state == 'confirm' and self.employee_id.parent_id.user_id:
+            return self.employee_id.parent_id.user_id
+        elif self.department_id.manager_id.user_id:
+            return self.department_id.manager_id.user_id
+        return self.env.user
+
+    def activity_update(self):
+        to_clean, to_do = self.env['hr.leave.allocation'], self.env['hr.leave.allocation']
+        for allocation in self:
+            if allocation.state == 'draft':
+                to_clean |= allocation
+            elif allocation.state == 'confirm':
+                allocation.activity_schedule(
+                    'hr_holidays.mail_act_leave_allocation_approval', fields.Date.today(),
+                    user_id=allocation._get_responsible_for_approval().id)
+            elif allocation.state == 'validate1':
+                allocation.activity_feedback(['hr_holidays.mail_act_leave_allocation_approval'])
+                allocation.activity_schedule(
+                    'hr_holidays.mail_act_leave_allocation_second_approval', fields.Date.today(),
+                    user_id=allocation._get_responsible_for_approval().id)
+            elif allocation.state == 'validate':
+                to_do |= allocation
+            elif allocation.state == 'refuse':
+                to_clean |= allocation
+        if to_clean:
+            to_clean.activity_unlink(['hr_holidays.mail_act_leave_allocation_approval', 'hr_holidays.mail_act_leave_allocation_second_approval'])
+        if to_do:
+            to_do.activity_feedback(['hr_holidays.mail_act_leave_allocation_approval', 'hr_holidays.mail_act_leave_allocation_second_approval'])
+
     ####################################################
     # Messaging methods
     ####################################################
@@ -287,10 +328,6 @@ class HolidaysAllocation(models.Model):
     def _track_subtype(self, init_values):
         if 'state' in init_values and self.state == 'validate':
             return 'hr_holidays.mt_leave_allocation_approved'
-        elif 'state' in init_values and self.state == 'validate1':
-            return 'hr_holidays.mt_leave_allocation_first_validated'
-        elif 'state' in init_values and self.state == 'confirm':
-            return 'hr_holidays.mt_leave_allocation_confirmed'
         elif 'state' in init_values and self.state == 'refuse':
             return 'hr_holidays.mt_leave_allocation_refused'
         return super(HolidaysAllocation, self)._track_subtype(init_values)
