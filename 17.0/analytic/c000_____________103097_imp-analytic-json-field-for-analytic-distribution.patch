PR: https://github.com/odoo/odoo/pull/103097

From: b8dca3b174e27dada6d15dcbe4dfe76c829109c7
From: gawa-odoo
Date: 2022-10-17 08:11:09

Breaking data model changes score: 2, change matches:
-    analytic_distribution_stored_char = fields.Char(
-    analytic_distribution = fields.Binary(

Total Changes: 100

[IMP] analytic, *: Json field for analytic distribution

The `analytic_distribution` field is a Json.
It was stored temporarily as a char.

Search is not available yet, so we do queries by hand when we need to search on keys.

Also added a constraint on account_analytic_distribution_model,
so we don't have models with accounts specific to a company when the model has no company or another company.
It would cause an issue when looking at the models from another company.

X-original-commit: 7064c95aa04e5138bb12ae97acfee04ebb67cc0e
Part-of: odoo/odoo#103097

================================= pseudo patch: =================================

--- a/addons/analytic/models/analytic_distribution_model.py
+++ b/addons/analytic/models/analytic_distribution_model.py
@@ -1,8 +1,9 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models
-import json
+from odoo import api, fields, models, _
+from odoo.exceptions import UserError
+
 
 class AccountAnalyticDistributionModel(models.Model):
     _name = 'account.analytic.distribution.model'
@@ -26,10 +27,27 @@ class AccountAnalyticDistributionModel(models.Model):
     company_id = fields.Many2one(
         'res.company',
         string='Company',
+        default=lambda self: self.env.company,
         ondelete='cascade',
         help="Select a company for which the analytic distribution will be used (e.g. create new customer invoice or Sales order if we select this company, it will automatically take this as an analytic account)",
     )
 
+    @api.constrains('company_id')
+    def _check_company_accounts(self):
+        query = """
+            SELECT model.id
+              FROM account_analytic_distribution_model model
+              JOIN account_analytic_account account
+                ON model.analytic_distribution ? CAST(account.id AS VARCHAR)
+             WHERE account.company_id IS NOT NULL 
+               AND (model.company_id IS NULL 
+                OR model.company_id != account.company_id)
+          GROUP BY model.id
+        """
+        self.env.cr.execute(query)
+        if self.env.cr.dictfetchone():
+            raise UserError(_('You defined a distribution with analytic account(s) belonging to a specific company but a model shared between companies or with a different company'))
+
     @api.model
     def _get_distribution(self, vals):
         """ Returns the distribution model that has the most fields that corresponds to the vals given
@@ -71,9 +89,3 @@ class AccountAnalyticDistributionModel(models.Model):
             return [(fname, 'in', value)]
         else:
             return [(fname, 'in', [value, False])]
-
-    @api.model
-    def _get_distributionjson(self, vals):
-        """ Returns the distribution model as a json for the compute_analytic_distribution_stored_char functions"""
-        distribution = self._get_distribution(vals)
-        return json.dumps(distribution) if distribution else None

--- a/addons/analytic/models/analytic_mixin.py
+++ b/addons/analytic/models/analytic_mixin.py
@@ -1,49 +1,51 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 from odoo import models, fields, api
-import json
-from odoo.tools import float_repr
+from odoo.tools.float_utils import float_round
 
 
 class AnalyticMixin(models.AbstractModel):
     _name = 'analytic.mixin'
     _description = 'Analytic Mixin'
 
-    # We create 2 different fields, with a computed binary field, so we don't have to decode encode each time the json.
-    # We also format the float values of the stored field, so we can use it as key (for tax detail for ex.)
-    analytic_distribution_stored_char = fields.Char(
-        compute="_compute_analytic_distribution_stored_char", store=True, copy=True)
-    analytic_distribution = fields.Binary(
-        string="Analytic",
-        compute="_compute_analytic_distribution",
-        inverse="_inverse_analytic_distribution",
-        readonly=False,
+    analytic_distribution = fields.Json(
+        'Analytic',
+        compute="_compute_analytic_distribution", store=True, copy=True, readonly=False,
+        precompute=True
     )
 
-    def _compute_analytic_distribution_stored_char(self):
-        pass
+    def init(self):
+        # Add a gin index for json search on the keys, on the models that actually have a table
+        query = ''' SELECT table_name
+                    FROM information_schema.tables
+                    WHERE table_name=%s '''
+        self.env.cr.execute(query, [self._table])
+        if self.env.cr.dictfetchone():
+            query = f"""
+                CREATE INDEX IF NOT EXISTS {self._table}_analytic_distribution_index
+                                        ON {self._table} USING gin(analytic_distribution);
+            """
+            self.env.cr.execute(query)
 
-    @api.depends('analytic_distribution_stored_char')
     def _compute_analytic_distribution(self):
-        for record in self:
-            if record.analytic_distribution_stored_char:
-                distribution_to_return = {}
-                distribution_json = json.loads(record.analytic_distribution_stored_char)
-                for account, distribution in distribution_json.items():
-                    distribution_to_return[int(account)] = float(distribution)
-                # Check if the account exists, can be removed when we have a constraint between account and model
-                account_ids = self.env['account.analytic.account'].browse(distribution_to_return.keys()).exists().ids
-                record.analytic_distribution = {account_id: distribution_to_return[account_id] for account_id in account_ids}
-
-    @api.onchange('analytic_distribution')
-    def _inverse_analytic_distribution(self):
+        pass
+
+    def write(self, vals):
+        """ Format the analytic_distribution float value, so equality on analytic_distribution can be done """
         decimal_precision = self.env['decimal.precision'].precision_get('Percentage Analytic')
-        self.env.remove_to_compute(self._fields['analytic_distribution_stored_char'], self)
-        for record in self:
-            if not record.analytic_distribution:
-                record.analytic_distribution_stored_char = None
-            else:
-                distribution_to_return = {}
-                for account, distribution in record.analytic_distribution.items():
-                    distribution_to_return[account] = float_repr(distribution, decimal_precision)
-                record.analytic_distribution_stored_char = json.dumps(distribution_to_return)
+        vals = self._sanitize_values(vals, decimal_precision)
+        return super().write(vals)
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        """ Format the analytic_distribution float value, so equality on analytic_distribution can be done """
+        decimal_precision = self.env['decimal.precision'].precision_get('Percentage Analytic')
+        vals_list = [self._sanitize_values(vals, decimal_precision) for vals in vals_list]
+        return super().create(vals_list)
+
+    def _sanitize_values(self, vals, decimal_precision):
+        """ Normalize the float of the distribution """
+        if 'analytic_distribution' in vals:
+            vals['analytic_distribution'] = vals.get('analytic_distribution') and {
+                account_id: float_round(distribution, decimal_precision) for account_id, distribution in vals['analytic_distribution'].items()}
+        return vals
