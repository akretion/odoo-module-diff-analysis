PR: https://github.com/odoo/odoo/pull/46110

From: 576a69e29e98532aa5de78eb3fcbff0b94cea32d
From: wan
Date: 2020-05-20 07:29:29

Structural Changes: 5
Total Changes: 115

[REF] account: remove unused actions

Task 2201948

*These actions were either unused or only used in enterprise modules.
The first ones have been deleted, and the second ones have been move to
the corresponding enterprise modules.

* account.fiscal.year: the whole model has been moved to enterprise

closes odoo/odoo#46110

Related: odoo/enterprise#8706
Related: odoo/upgrade#1083
Signed-off-by: Quentin De Paoli (qdp) <qdp@openerp.com>

================================= pseudo patch: =================================

--- a/addons/account/models/__init__.py
+++ b/addons/account/models/__init__.py
@@ -18,7 +18,6 @@ from . import chart_template
 from . import account_analytic_line
 from . import account_journal_dashboard
 from . import product
-from . import account_fiscal_year
 from . import company
 from . import res_config_settings
 from . import account_cash_rounding

--- a/addons/account/models/account_fiscal_year.py
+++ b/None
@@ -1,55 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from odoo.exceptions import ValidationError
-from odoo import api, fields, models, _
-
-
-from datetime import datetime
-
-
-class AccountFiscalYear(models.Model):
-    _name = 'account.fiscal.year'
-    _description = 'Fiscal Year'
-
-    name = fields.Char(string='Name', required=True)
-    date_from = fields.Date(string='Start Date', required=True,
-        help='Start Date, included in the fiscal year.')
-    date_to = fields.Date(string='End Date', required=True,
-        help='Ending Date, included in the fiscal year.')
-    company_id = fields.Many2one('res.company', string='Company', required=True,
-        default=lambda self: self.env.company)
-
-    @api.constrains('date_from', 'date_to', 'company_id')
-    def _check_dates(self):
-        '''
-        Check interleaving between fiscal years.
-        There are 3 cases to consider:
-
-        s1   s2   e1   e2
-        (    [----)----]
-
-        s2   s1   e2   e1
-        [----(----]    )
-
-        s1   s2   e2   e1
-        (    [----]    )
-        '''
-        for fy in self:
-            # Starting date must be prior to the ending date
-            date_from = fy.date_from
-            date_to = fy.date_to
-            if date_to < date_from:
-                raise ValidationError(_('The ending date must not be prior to the starting date.'))
-
-
-            domain = [
-                ('id', '!=', fy.id),
-                ('company_id', '=', fy.company_id.id),
-                '|', '|',
-                '&', ('date_from', '<=', fy.date_from), ('date_to', '>=', fy.date_from),
-                '&', ('date_from', '<=', fy.date_to), ('date_to', '>=', fy.date_to),
-                '&', ('date_from', '<=', fy.date_from), ('date_to', '>=', fy.date_to),
-            ]
-
-            if self.search_count(domain) > 0:
-                raise ValidationError(_('You can not have an overlap between two fiscal years, please correct the start and/or end dates of your fiscal years.'))

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -6,9 +6,8 @@ from dateutil.relativedelta import relativedelta
 
 from odoo import fields, models, api, _
 from odoo.exceptions import ValidationError, UserError, RedirectWarning
-from odoo.tools.misc import DEFAULT_SERVER_DATE_FORMAT, format_date
+from odoo.tools.misc import format_date
 from odoo.tools.float_utils import float_round, float_is_zero
-from odoo.tools import date_utils
 from odoo.tests.common import Form
 
 
@@ -165,61 +164,6 @@ class ResCompany(models.Model):
             'account_setup_coa_state',
         ]
 
-    def compute_fiscalyear_dates(self, current_date):
-        '''Computes the start and end dates of the fiscal year where the given 'date' belongs to.
-
-        :param current_date: A datetime.date/datetime.datetime object.
-        :return: A dictionary containing:
-            * date_from
-            * date_to
-            * [Optionally] record: The fiscal year record.
-        '''
-        self.ensure_one()
-        date_str = current_date.strftime(DEFAULT_SERVER_DATE_FORMAT)
-
-        # Search a fiscal year record containing the date.
-        # If a record is found, then no need further computation, we get the dates range directly.
-        fiscalyear = self.env['account.fiscal.year'].search([
-            ('company_id', '=', self.id),
-            ('date_from', '<=', date_str),
-            ('date_to', '>=', date_str),
-        ], limit=1)
-        if fiscalyear:
-            return {
-                'date_from': fiscalyear.date_from,
-                'date_to': fiscalyear.date_to,
-                'record': fiscalyear,
-            }
-
-        date_from, date_to = date_utils.get_fiscal_year(
-            current_date, day=self.fiscalyear_last_day, month=int(self.fiscalyear_last_month))
-
-        date_from_str = date_from.strftime(DEFAULT_SERVER_DATE_FORMAT)
-        date_to_str = date_to.strftime(DEFAULT_SERVER_DATE_FORMAT)
-
-        # Search for fiscal year records reducing the delta between the date_from/date_to.
-        # This case could happen if there is a gap between two fiscal year records.
-        # E.g. two fiscal year records: 2017-01-01 -> 2017-02-01 and 2017-03-01 -> 2017-12-31.
-        # => The period 2017-02-02 - 2017-02-30 is not covered by a fiscal year record.
-
-        fiscalyear_from = self.env['account.fiscal.year'].search([
-            ('company_id', '=', self.id),
-            ('date_from', '<=', date_from_str),
-            ('date_to', '>=', date_from_str),
-        ], limit=1)
-        if fiscalyear_from:
-            date_from = fiscalyear_from.date_to + timedelta(days=1)
-
-        fiscalyear_to = self.env['account.fiscal.year'].search([
-            ('company_id', '=', self.id),
-            ('date_from', '<=', date_to_str),
-            ('date_to', '>=', date_to_str),
-        ], limit=1)
-        if fiscalyear_to:
-            date_to = fiscalyear_to.date_from - timedelta(days=1)
-
-        return {'date_from': date_from, 'date_to': date_to}
-
     def get_new_account_code(self, current_code, old_prefix, new_prefix):
         digits = len(current_code)
         return new_prefix + current_code.replace(old_prefix, '', 1).lstrip('0').rjust(digits-len(new_prefix), '0')

--- a/addons/account/models/res_config_settings.py
+++ b/addons/account/models/res_config_settings.py
@@ -29,7 +29,6 @@ class ResConfigSettings(models.TransientModel):
     group_analytic_tags = fields.Boolean(string='Analytic Tags', implied_group='analytic.group_analytic_tags')
     group_warning_account = fields.Boolean(string="Warnings in Invoices", implied_group='account.group_warning_account')
     group_cash_rounding = fields.Boolean(string="Cash Rounding", implied_group='account.group_cash_rounding')
-    group_fiscal_year = fields.Boolean(string='Fiscal Years', implied_group='account.group_fiscal_year')
     # group_show_line_subtotals_tax_excluded and group_show_line_subtotals_tax_included are opposite,
     # so we can assume exactly one of them will be set, and not the other.
     # We need both of them to coexist so we can take advantage of automatic group assignation.
