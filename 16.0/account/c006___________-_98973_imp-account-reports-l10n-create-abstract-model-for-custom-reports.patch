PR: https://github.com/odoo/odoo/pull/98973

From: 5f66c57389b619ddf84c830fe502808da3230edc
From: John Laterre (jol)
Date: 2022-09-09 10:16:58

Breaking data model changes scores: del:6 + add:0, change matches:
-    caret_options_initializer = fields.Char(string="Caret Options Initializer", required=True, default='_caret_options_initializer_default')
-    dynamic_lines_generator = fields.Char(string="Dynamic Lines Generator")
-    custom_options_initializer = fields.Char(
-    custom_line_postprocessor = fields.Char(string="Custom Line Postprocessor")
-    custom_groupby_line_completer = fields.Char(string="Custom Groupby Line Completer")
-    custom_unfold_all_batch_data_generator = fields.Char(string="Custom Unfold All Batch Data Generator")

Total Changes: 13

[IMP] account_reports,l10n_*: create abstract model for custom reports

In Reportalypse, custom reports use fields to refer to functions
allowing customizing different behaviors of the engine.

With this, all account.report models contain all the functions
of all the custom reports, leading to possible name clashes
if the functions aren't properly prefixed.

We can improve that a little: instead of having multiple fields,
we use but one, referring to an AbstractModel inheriting
from a new AbstractModel called account.report.custom.handler.

This AbstractModel simply contains the different functions
that can be overridden, and its subclasses are responsible to do so.

In the code, instead of calling _get_custom_report_function,
we check whether there is a custom handler for the report,
and call the right function on it.

task-2954761

closes odoo/odoo#98973

Related: odoo/documentation#2673
Related: odoo/enterprise#30777
Signed-off-by: Olivier Colson (oco) <oco@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_report.py
+++ b/addons/account/models/account_report.py
@@ -33,7 +33,6 @@ class AccountReport(models.Model):
     chart_template_id = fields.Many2one(string="Chart of Accounts", comodel_name='account.chart.template')
     country_id = fields.Many2one(string="Country", comodel_name='res.country')
     only_tax_exigible = fields.Boolean(string="Only Tax Exigible Lines")
-    caret_options_initializer = fields.Char(string="Caret Options Initializer", required=True, default='_caret_options_initializer_default')
     availability_condition = fields.Selection(
         string="Availability",
         selection=[('country', "Country Matches"), ('coa', "Chart of Accounts Matches"), ('always', "Always")],
@@ -115,18 +114,6 @@ class AccountReport(models.Model):
         compute=lambda x: x._compute_report_option_filter('filter_fiscal_position'), readonly=False, store=True, depends=['root_report_id'],
     )
 
-    #  CUSTOM REPORTS ================================================================================================================================
-    # Those fields allow case-by-case fine-tuning or the engine, for custom reports
-
-    dynamic_lines_generator = fields.Char(string="Dynamic Lines Generator")
-    custom_options_initializer = fields.Char(
-        string="Custom Options Initializer",
-        compute=lambda x: x._compute_report_option_filter('custom_options_initializer'), readonly=False, store=True, depends=['root_report_id'],
-    )
-    custom_line_postprocessor = fields.Char(string="Custom Line Postprocessor")
-    custom_groupby_line_completer = fields.Char(string="Custom Groupby Line Completer")
-    custom_unfold_all_batch_data_generator = fields.Char(string="Custom Unfold All Batch Data Generator")
-
     def _compute_report_option_filter(self, field_name, default_value=False):
         # We don't depend on the different filter fields on the root report, as we don't want a manual change on it to be reflected on all the reports
         # using it as their root (would create confusion). The root report filters are only used as some kind of default values.
