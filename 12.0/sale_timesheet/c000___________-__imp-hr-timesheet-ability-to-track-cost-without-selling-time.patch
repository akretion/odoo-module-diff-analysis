PR: https://github.com/odoo/odoo/pull/

From: 8f3f1827cbb7d7ee0eae132b45394fc0547f940d
From: jem-odoo
Date: 2018-04-06 12:30:46

Breaking data model changes scores: del:3 + add:0, change matches:
-    _inherit = 'hr.employee'
-    timesheet_cost = fields.Monetary('Timesheet Cost', currency_field='currency_id', default=0.0)
-    currency_id = fields.Many2one('res.currency', related='company_id.currency_id', readonly=True)

Total Changes: 53

[IMP] hr_timesheet: ability to track cost without selling time

The cost of an employee should be in hr_timesheet for a long time, to
allow user to track time on project/task: hours spent and their cost.
This commit simply moves fields and related views. It also moves the
'postprocess' method from sale_timesheet to hr_timesheet since this
method is responsible to set the amount (cost) on AAL.

User can now track their time and cost, without having sale_timesheet
installed.

================================= pseudo patch: =================================

--- a/addons/sale_timesheet/models/__init__.py
+++ b/addons/sale_timesheet/models/__init__.py
@@ -3,7 +3,6 @@
 
 from . import account
 from . import account_invoice
-from . import hr
 from . import product
 from . import project
 from . import sale_order

--- a/addons/sale_timesheet/models/account.py
+++ b/addons/sale_timesheet/models/account.py
@@ -21,14 +21,6 @@ class AccountAnalyticLine(models.Model):
     timesheet_invoice_id = fields.Many2one('account.invoice', string="Invoice", readonly=True, copy=False, help="Invoice created from the timesheet")
     timesheet_revenue = fields.Monetary("Revenue", default=0.0, readonly=True, copy=False)
 
-    @api.model
-    def create(self, values):
-        result = super(AccountAnalyticLine, self).create(values)
-        # applied only for timesheet
-        if result.project_id:
-            result._timesheet_postprocess(values)
-        return result
-
     @api.multi
     def write(self, values):
         # prevent to update invoiced timesheets if one line is of type delivery
@@ -36,8 +28,6 @@ class AccountAnalyticLine(models.Model):
             if any([field_name in values for field_name in ['unit_amount', 'employee_id', 'task_id', 'timesheet_revenue', 'so_line', 'amount', 'date']]):
                 raise UserError(_('You can not modify already invoiced timesheets (linked to a Sales order items invoiced on Time and material).'))
         result = super(AccountAnalyticLine, self).write(values)
-        # applied only for timesheet
-        self.filtered(lambda t: t.project_id)._timesheet_postprocess(values)
         return result
 
     @api.model
@@ -55,30 +45,23 @@ class AccountAnalyticLine(models.Model):
         return values
 
     @api.multi
-    def _timesheet_postprocess(self, values):
+    def _timesheet_postprocess_values(self, values):
         sudo_self = self.sudo()  # this creates only one env for all operation that required sudo()
-        # (re)compute the amount (depending on unit_amount, employee_id for the cost, and account_id for currency)
-        if any([field_name in values for field_name in ['unit_amount', 'employee_id', 'account_id']]):
+        result = super(AccountAnalyticLine, self)._timesheet_postprocess_values(values)
+        # (re)compute the UoM from the employee company
+        if any([field_name in values for field_name in ['employee_id']]):
             for timesheet in sudo_self:
                 uom = timesheet.employee_id.company_id.project_time_mode_id
-                cost = timesheet.employee_id.timesheet_cost or 0.0
-                amount = -timesheet.unit_amount * cost
-                amount_converted = timesheet.employee_id.currency_id.compute(amount, timesheet.account_id.currency_id)
-                timesheet.write({
-                    'amount': amount_converted,
+                result[timesheet.id].update({
                     'product_uom_id': uom.id,
                 })
         # (re)compute the theorical revenue
         if any([field_name in values for field_name in ['so_line', 'unit_amount', 'account_id']]):
-            sudo_self._timesheet_compute_theorical_revenue()
-        return values
-
-    @api.multi
-    def _timesheet_compute_theorical_revenue(self):
-        for timesheet in self:
-            values = timesheet._timesheet_compute_theorical_revenue_values()
-            timesheet.write(values)
-        return True
+            for timesheet in sudo_self:
+                values_to_write = timesheet._timesheet_compute_theorical_revenue_values()
+                if values_to_write:
+                    result[timesheet.id].update(values_to_write)
+        return result
 
     @api.multi
     def _timesheet_compute_theorical_revenue_values(self):
@@ -93,6 +76,9 @@ class AccountAnalyticLine(models.Model):
                 )
             else:
                 0
+
+            :return: a dictionary mapping each record id to its corresponding
+                dictionnary values to write (may be empty).
         """
         self.ensure_one()
         timesheet = self

--- a/addons/sale_timesheet/models/hr.py
+++ b/None
@@ -1,12 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-
-class HrEmployee(models.Model):
-    _inherit = 'hr.employee'
-
-    # FIXME: this field should be in module hr_timesheet, not sale_timesheet
-    timesheet_cost = fields.Monetary('Timesheet Cost', currency_field='currency_id', default=0.0)
-    currency_id = fields.Many2one('res.currency', related='company_id.currency_id', readonly=True)
