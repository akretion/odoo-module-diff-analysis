PR: https://github.com/odoo/odoo/pull/

From: 1cd0a138cf1288e2bbcad0ad261696b7ff727feb
From: yhu-odoo
Date: 2021-03-31 08:55:44

Structural Changes: 12
Total Changes: 77

[REF] delivery, stock: make delivery product a new model

Currently, delivery packaging and product packaging share the same
model product.packaging. In this commit, we make delivery packaging
a new model stock.package.type. The code is also moved to stock
instead of delivery for compatibility reasons.

Task 2341820
PR #63516
ENT PR odoo/enterprise#15363
UPG PR odoo/upgrade#2040

================================= pseudo patch: =================================

--- a/addons/delivery/models/__init__.py
+++ b/addons/delivery/models/__init__.py
@@ -3,9 +3,9 @@
 
 from . import delivery_carrier
 from . import delivery_grid
-from . import product_packaging
 from . import product_template
 from . import sale_order
 from . import partner
 from . import stock_picking
 from . import stock_move
+from . import stock_package_type

--- a/addons/delivery/models/product_packaging.py
+++ b/None
@@ -1,48 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import models, fields, api
-
-
-class ProductPackaging(models.Model):
-    _inherit = 'product.packaging'
-
-
-    def _get_default_length_uom(self):
-        return self.env['product.template']._get_length_uom_name_from_ir_config_parameter()
-
-    def _get_default_weight_uom(self):
-        return self.env['product.template']._get_weight_uom_name_from_ir_config_parameter()
-
-    height = fields.Integer('Height')
-    width = fields.Integer('Width')
-    packaging_length = fields.Integer('Length')
-    max_weight = fields.Float('Max Weight', help='Maximum weight shippable in this packaging')
-    shipper_package_code = fields.Char('Package Code')
-    package_carrier_type = fields.Selection([('none', 'No carrier integration')], string='Carrier', default='none')
-    weight_uom_name = fields.Char(string='Weight unit of measure label', compute='_compute_weight_uom_name', default=_get_default_weight_uom)
-    length_uom_name = fields.Char(string='Length unit of measure label', compute='_compute_length_uom_name', default=_get_default_length_uom)
-
-    _sql_constraints = [
-        ('positive_height', 'CHECK(height>=0)', 'Height must be positive'),
-        ('positive_width', 'CHECK(width>=0)', 'Width must be positive'),
-        ('positive_length', 'CHECK(packaging_length>=0)', 'Length must be positive'),
-        ('positive_max_weight', 'CHECK(max_weight>=0.0)', 'Max Weight must be positive'),
-    ]
-
-    @api.onchange('package_carrier_type')
-    def _onchange_carrier_type(self):
-        carrier_id = self.env['delivery.carrier'].search([('delivery_type', '=', self.package_carrier_type)], limit=1)
-        if carrier_id:
-            self.shipper_package_code = carrier_id._get_default_custom_package_code()
-        else:
-            self.shipper_package_code = False
-
-
-    def _compute_length_uom_name(self):
-        for packaging in self:
-            packaging.length_uom_name = self.env['product.template']._get_length_uom_name_from_ir_config_parameter()
-
-    def _compute_weight_uom_name(self):
-        for packaging in self:
-            packaging.weight_uom_name = self.env['product.template']._get_weight_uom_name_from_ir_config_parameter()

--- a/None
+++ b/addons/delivery/models/stock_package_type.py
@@ -0,0 +1,19 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models, fields, api
+
+
+class PackageType(models.Model):
+    _inherit = 'stock.package.type'
+
+    shipper_package_code = fields.Char('Carrier Code')
+    package_carrier_type = fields.Selection([('none', 'No carrier integration')], string='Carrier', default='none')
+
+    @api.onchange('package_carrier_type')
+    def _onchange_carrier_type(self):
+        carrier_id = self.env['delivery.carrier'].search([('delivery_type', '=', self.package_carrier_type)], limit=1)
+        if carrier_id:
+            self.shipper_package_code = carrier_id._get_default_custom_package_code()
+        else:
+            self.shipper_package_code = False

--- a/addons/delivery/models/stock_picking.py
+++ b/addons/delivery/models/stock_picking.py
@@ -133,13 +133,13 @@ class StockPicking(models.Model):
         res = super(StockPicking, self)._pre_put_in_pack_hook(move_line_ids)
         if not res:
             if self.carrier_id:
-                return self._set_delivery_packaging()
+                return self._set_delivery_package_type()
         else:
             return res
 
-    def _set_delivery_packaging(self):
-        """ This method returns an action allowing to set the product packaging and the shipping weight
-         on the stock.quant.package.
+    def _set_delivery_package_type(self):
+        """ This method returns an action allowing to set the package type and the shipping weight
+        on the stock.quant.package.
         """
         self.ensure_one()
         view_id = self.env.ref('delivery.choose_delivery_package_view_form').id
