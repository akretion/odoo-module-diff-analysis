PR: https://github.com/odoo/odoo/pull/186906

From: 9144eb051538d5a92d403e1ad9c635ce39e090ec
From: Gorash
Date: 2024-11-14 10:39:02

Breaking data model changes scores: del:12 + add:0, change matches:
-    _inherit = ["account.move"]
-    _inherit = ['account.move.line']
-    _inherit = ['product.product']
-    _inherit = ['product.template']
-    _inherit = ['project.milestone']
-    _inherit = ['project.project']
-    _inherit = ["project.task"]
-    _inherit = ['project.task.recurrence']
-    _inherit = ['res.config.settings']
-    _inherit = ['sale.order']
-    _inherit = ["sale.order.line"]
-    _inherit = ['sale.order.template.line']

Total Changes: 24

[REV] *: Restore the model `_name`

Following internal discussions, the python typing and inheritance task is
canceled. The use of the class name instead of '_name' was done to allow
notations such as `partner_id = fields.Many2one[base.ResParter](string='Partner')`.
Since this notation is canceled, we put `_name` back (although the class
name is sufficient).

Partial revert:
https://github.com/odoo/enterprise/pull/69762
https://github.com/odoo/odoo/pull/178200

closes odoo/odoo#186906

Related: odoo/enterprise#73643
Signed-off-by: Raphael Collet <rco@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_project/models/account_move.py
+++ b/addons/sale_project/models/account_move.py
@@ -4,7 +4,7 @@ from odoo import models
 
 
 class AccountMove(models.Model):
-    _inherit = ["account.move"]
+    _inherit = "account.move"
 
     def _get_action_per_item(self):
         action = self.env.ref('account.action_move_out_invoice_type').id

--- a/addons/sale_project/models/account_move_line.py
+++ b/addons/sale_project/models/account_move_line.py
@@ -5,7 +5,7 @@ from odoo.osv.expression import AND, OR
 
 
 class AccountMoveLine(models.Model):
-    _inherit = ['account.move.line']
+    _inherit = 'account.move.line'
 
     def _compute_analytic_distribution(self):
         # when a project creates an aml, it adds an analytic account to it. the following filter is to save this

--- a/addons/sale_project/models/product_product.py
+++ b/addons/sale_project/models/product_product.py
@@ -4,7 +4,7 @@ from odoo import api, models
 
 
 class ProductProduct(models.Model):
-    _inherit = ['product.product']
+    _inherit = 'product.product'
 
     @api.onchange('service_tracking')
     def _onchange_service_tracking(self):

--- a/addons/sale_project/models/product_template.py
+++ b/addons/sale_project/models/product_template.py
@@ -5,7 +5,7 @@ from odoo.exceptions import ValidationError
 
 
 class ProductTemplate(models.Model):
-    _inherit = ['product.template']
+    _inherit = 'product.template'
 
     @api.model
     def _selection_service_policy(self):

--- a/addons/sale_project/models/project_milestone.py
+++ b/addons/sale_project/models/project_milestone.py
@@ -5,7 +5,7 @@ from odoo import api, fields, models, _
 
 
 class ProjectMilestone(models.Model):
-    _inherit = ['project.milestone']
+    _inherit = 'project.milestone'
 
     def _default_sale_line_id(self):
         project_id = self._context.get('default_project_id')

--- a/addons/sale_project/models/project_project.py
+++ b/addons/sale_project/models/project_project.py
@@ -12,7 +12,7 @@ from odoo.tools.translate import _
 
 
 class ProjectProject(models.Model):
-    _inherit = ['project.project']
+    _inherit = 'project.project'
 
     def _domain_sale_line_id(self):
         domain = expression.AND([

--- a/addons/sale_project/models/project_task.py
+++ b/addons/sale_project/models/project_task.py
@@ -8,7 +8,7 @@ from odoo.tools.misc import unquote
 
 
 class ProjectTask(models.Model):
-    _inherit = ["project.task"]
+    _inherit = "project.task"
 
     def _domain_sale_line_id(self):
         domain = expression.AND([

--- a/addons/sale_project/models/project_task_recurrence.py
+++ b/addons/sale_project/models/project_task_recurrence.py
@@ -4,7 +4,7 @@ from odoo import api, models
 
 
 class ProjectTaskRecurrence(models.Model):
-    _inherit = ['project.task.recurrence']
+    _inherit = 'project.task.recurrence'
 
     @api.model
     def _get_recurring_fields_to_copy(self):

--- a/addons/sale_project/models/res_config_settings.py
+++ b/addons/sale_project/models/res_config_settings.py
@@ -5,7 +5,7 @@ from odoo import models
 
 
 class ResConfigSettings(models.TransientModel):
-    _inherit = ['res.config.settings']
+    _inherit = 'res.config.settings'
 
     def set_values(self):
         super().set_values()

--- a/addons/sale_project/models/sale_order.py
+++ b/addons/sale_project/models/sale_order.py
@@ -10,7 +10,7 @@ from odoo.addons.project.models.project_task import CLOSED_STATES
 
 
 class SaleOrder(models.Model):
-    _inherit = ['sale.order']
+    _inherit = 'sale.order'
 
     tasks_ids = fields.Many2many('project.task', compute='_compute_tasks_ids', search='_search_tasks_ids', string='Tasks associated with this sale', export_string_translation=False)
     tasks_count = fields.Integer(string='Tasks', compute='_compute_tasks_ids', groups="project.group_project_user", export_string_translation=False)

--- a/addons/sale_project/models/sale_order_line.py
+++ b/addons/sale_project/models/sale_order_line.py
@@ -9,7 +9,7 @@ from odoo.tools.sql import column_exists, create_column
 
 
 class SaleOrderLine(models.Model):
-    _inherit = ["sale.order.line"]
+    _inherit = "sale.order.line"
 
     qty_delivered_method = fields.Selection(selection_add=[('milestones', 'Milestones')])
     project_id = fields.Many2one(

--- a/addons/sale_project/models/sale_order_template_line.py
+++ b/addons/sale_project/models/sale_order_template_line.py
@@ -5,7 +5,7 @@ from odoo import models
 
 
 class SaleOrderTemplateLine(models.Model):
-    _inherit = ['sale.order.template.line']
+    _inherit = 'sale.order.template.line'
 
     def _prepare_order_line_values(self):
         res = super()._prepare_order_line_values()
