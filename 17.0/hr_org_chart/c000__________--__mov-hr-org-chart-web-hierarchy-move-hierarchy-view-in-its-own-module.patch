PR: https://github.com/odoo/odoo/pull/

From: a055b9c20efc719d9a3c2e89a0ebbcd52a85d5a0
From: Xavier Bol (xbo)
Date: 2023-10-16 06:17:31

Breaking data model changes score: 4, change matches:
-    _inherit = 'ir.actions.act_window.view'
-    view_mode = fields.Selection(selection_add=[('hierarchy', 'Hierarchy')], ondelete={'hierarchy': 'cascade'})
-    _inherit = 'ir.ui.view'
-    type = fields.Selection(selection_add=[('hierarchy', "Hierarchy")])

Total Changes: 107

[MOV] hr_org_chart,web_hierarchy: move hierarchy view in its own module

This commit moves the generic code of hierarchy view into new module
called `web_hierarchy` to be able to use it outside the hr scope.

task-3376776

================================= pseudo patch: =================================

--- a/addons/hr_org_chart/models/__init__.py
+++ b/addons/hr_org_chart/models/__init__.py
@@ -3,6 +3,3 @@
 
 from . import hr_org_chart_mixin
 from . import hr_employee
-from . import ir_actions
-from . import ir_ui_view
-from . import models

--- a/addons/hr_org_chart/models/ir_actions.py
+++ b/None
@@ -1,9 +0,0 @@
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-
-class ActWindowView(models.Model):
-    _inherit = 'ir.actions.act_window.view'
-
-    view_mode = fields.Selection(selection_add=[('hierarchy', 'Hierarchy')], ondelete={'hierarchy': 'cascade'})

--- a/addons/hr_org_chart/models/ir_ui_view.py
+++ b/None
@@ -1,51 +0,0 @@
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from lxml import etree
-
-from odoo import fields, models, _
-
-HIERARCHY_VALID_ATTRIBUTES = {
-    '__validate__',                     # ir.ui.view implementation detail
-    'class',
-    'js_class',
-    'string',
-    'create',
-    'edit',
-    'delete',
-    'parent_field',
-    'child_field',
-    'icon',
-    'draggable',
-}
-
-class View(models.Model):
-    _inherit = 'ir.ui.view'
-
-    type = fields.Selection(selection_add=[('hierarchy', "Hierarchy")])
-
-    def _is_qweb_based_view(self, view_type):
-        return super()._is_qweb_based_view(view_type) or view_type == "hierarchy"
-
-    def _validate_tag_hierarchy(self, node, name_manager, node_info):
-        if not node_info['validate']:
-            return
-
-        templates_count = 0
-        for child in node.iterchildren(tag=etree.Element):
-            if child.tag == 'templates':
-                if not templates_count:
-                    templates_count += 1
-                else:
-                    msg = _('Hierarchy view can contain only one templates tag')
-                    self._raise_view_error(msg, child)
-            elif child.tag != 'field':
-                msg = _('Hierarchy child can only be field or template, got %s', child.tag)
-                self._raise_view_error(msg, child)
-
-        remaining = set(node.attrib) - HIERARCHY_VALID_ATTRIBUTES
-        if remaining:
-            msg = _(
-                "Invalid attributes (%s) in hierarchy view. Attributes must be in (%s)",
-                ','.join(remaining), ','.join(HIERARCHY_VALID_ATTRIBUTES),
-            )
-            self._raise_view_error(msg, node)

--- a/addons/hr_org_chart/models/models.py
+++ b/None
@@ -1,44 +0,0 @@
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, models
-
-
-class Base(models.AbstractModel):
-    _inherit = 'base'
-
-    @api.model
-    def hierarchy_read(self, domain, fields, parent_field, child_field=None):
-        if parent_field not in fields:
-            fields.append(parent_field)
-        records = self.search(domain)
-        focus_record = self.env[self._name]
-        fetch_child_ids_for_all_records = False
-        if len(records) == 1:
-            domain = [(parent_field, '=', records.id), ('id', '!=', records.id)]
-            if records[parent_field]:
-                focus_record = records
-                records += focus_record[parent_field]
-                domain = [('id', 'not in', records.ids), (parent_field, 'in', records.ids)]
-            records += self.search(domain)
-        elif not records:
-            records = self.search([(parent_field, '=', False)])
-        else:
-            fetch_child_ids_for_all_records = True
-        children_ids_per_record_id = {}
-        if not child_field:
-            children_ids_per_record_id = {
-                record.id: child_ids
-                for record, child_ids in self._read_group(
-                    [(parent_field, 'in', records.ids if fetch_child_ids_for_all_records else (records - records[parent_field]).ids)],
-                    (parent_field,),
-                    ('id:array_agg',),
-                )
-            }
-        result = records.read(fields)
-        if children_ids_per_record_id or focus_record:
-            for record_data in result:
-                if record_data['id'] in children_ids_per_record_id:
-                    record_data['__child_ids__'] = children_ids_per_record_id[record_data['id']]
-                if record_data['id'] == focus_record.id:
-                    record_data['__focus__'] = True
-        return result
