PR: https://github.com/odoo/odoo/pull/

From: d6a23144d5c5b85c2a02097bcbb3e006a9c2c52a
From: jbm-odoo
Date: 2020-06-15 13:51:20

Structural Changes: 10
Total Changes: 142

[MOV] timer: Move to Enterprise

taskId: 2217930

================================= pseudo patch: =================================

--- a/addons/hr_timesheet/models/hr_timesheet.py
+++ b/addons/hr_timesheet/models/hr_timesheet.py
@@ -9,8 +9,7 @@ from odoo.exceptions import UserError, AccessError
 from odoo.osv import expression
 
 class AccountAnalyticLine(models.Model):
-    _name = 'account.analytic.line'
-    _inherit = ['account.analytic.line', 'timer.mixin']
+    _inherit = 'account.analytic.line'
 
     @api.model
     def default_get(self, field_list):
@@ -48,9 +47,6 @@ class AccountAnalyticLine(models.Model):
     employee_id = fields.Many2one('hr.employee', "Employee", check_company=True, domain=_domain_employee_id)
     department_id = fields.Many2one('hr.department', "Department", compute='_compute_department_id', store=True, compute_sudo=True)
     encoding_uom_id = fields.Many2one('uom.uom', compute='_compute_encoding_uom_id')
-    display_timer = fields.Boolean(
-        compute='_compute_display_timer',
-        help="Technical field used to display the timer if the encoding unit is 'Hours'.")
 
     def _compute_encoding_uom_id(self):
         for analytic_line in self:
@@ -198,48 +194,3 @@ class AccountAnalyticLine(models.Model):
                     'amount': amount_converted,
                 })
         return result
-
-    def _compute_display_timer(self):
-        uom_hour = self.env.ref('uom.product_uom_hour')
-        for analytic_line in self:
-            analytic_line.display_timer = analytic_line.encoding_uom_id == uom_hour
-
-    def action_timer_start(self):
-        """ Start a timer if it isn't already started and the
-        timesheets allow to track time
-        """
-        if not self.user_timer_id.timer_start and self.display_timer:
-            super().action_timer_start()
-
-    def action_timer_stop(self):
-        """ Stop the current timer
-        """
-        if self.user_timer_id.timer_start and self.display_timer:
-            minutes_spent = super().action_timer_stop()
-            self._add_timesheet_time(minutes_spent)
-
-    def _add_timesheet_time(self, minutes_spent):
-        if self.unit_amount == 0 and minutes_spent < 1 and not self._context.get('prevent_deletion', False):
-            # Check if unit_amount equals 0 and minutes_spent is less than 1 minute,
-            # if yes, then remove the timesheet
-            self.unlink()
-        else:
-            if minutes_spent < 1:
-                amount = self.unit_amount
-            else:
-                minimum_duration = int(self.env['ir.config_parameter'].sudo().get_param('hr_timesheet.timesheet_min_duration', 0))
-                rounding = int(self.env['ir.config_parameter'].sudo().get_param('hr_timesheet.timesheet_rounding', 0))
-                minutes_spent = self._timer_rounding(minutes_spent, minimum_duration, rounding)
-                amount = self.unit_amount + minutes_spent * 60 / 3600
-            self.write({'unit_amount': amount})
-
-    def _action_interrupt_user_timers(self):
-        self.action_timer_stop()
-
-    def unlink(self):
-        res = super(AccountAnalyticLine, self).unlink()
-        self.env['timer.timer'].search([
-            ('res_model', '=', self._name),
-            ('res_id', 'in', self.ids)
-        ]).unlink()
-        return res

--- a/addons/hr_timesheet/models/project.py
+++ b/addons/hr_timesheet/models/project.py
@@ -16,12 +16,6 @@ class Project(models.Model):
             ('partner_id', '=?', partner_id),
         ]"""
     )
-    allow_timesheet_timer = fields.Boolean(
-        'Timesheet Timer',
-        compute='_compute_allow_timesheet_timer',
-        readonly=False,
-        store=True,
-        help="Use a timer to record timesheets on tasks")
 
     timesheet_ids = fields.One2many('account.analytic.line', 'project_id', 'Associated Timesheets')
     timesheet_encode_uom_id = fields.Many2one('uom.uom', related='company_id.timesheet_encode_uom_id')
@@ -29,10 +23,6 @@ class Project(models.Model):
         compute='_compute_total_timesheet_time',
         help="Total number of time (in the proper UoM) recorded in the project, rounded to the unit.")
 
-    _sql_constraints = [
-        ('timer_only_when_timesheet', "CHECK((allow_timesheets = 'f' AND allow_timesheet_timer = 'f') OR (allow_timesheets = 't'))", 'The timesheet timer can only be activated on project allowing timesheets.'),
-    ]
-
     @api.onchange('analytic_account_id')
     def _onchange_analytic_account(self):
         if not self.analytic_account_id and self._origin:
@@ -44,11 +34,6 @@ class Project(models.Model):
             if project.allow_timesheets and not project.analytic_account_id:
                 raise ValidationError(_('To allow timesheet, your project %s should have an analytic account set.' % (project.name,)))
 
-    @api.depends('allow_timesheets')
-    def _compute_allow_timesheet_timer(self):
-        for project in self:
-            project.allow_timesheet_timer = project.allow_timesheets
-
     @api.depends('timesheet_ids')
     def _compute_total_timesheet_time(self):
         for project in self:
@@ -87,13 +72,7 @@ class Project(models.Model):
             for project in self:
                 if not project.analytic_account_id and not values.get('analytic_account_id'):
                     project._create_analytic_account()
-        result = super(Project, self).write(values)
-        if 'allow_timesheet_timer' in values and not values.get('allow_timesheet_timer'):
-            self.with_context(active_test=False).mapped('task_ids').write({
-                'timer_start': False,
-                'timer_pause': False,
-            })
-        return result
+        return super(Project, self).write(values)
 
     @api.model
     def _init_data_analytic_account(self):
@@ -120,7 +99,7 @@ class Project(models.Model):
 
 class Task(models.Model):
     _name = "project.task"
-    _inherit = ["project.task", "timer.mixin"]
+    _inherit = "project.task"
 
     analytic_account_active = fields.Boolean("Active Analytic Account", compute='_compute_analytic_account_active')
     allow_timesheets = fields.Boolean("Allow timesheets", related='project_id.allow_timesheets', help="Timesheets can be logged on this task.", readonly=True)
@@ -132,38 +111,6 @@ class Task(models.Model):
     subtask_effective_hours = fields.Float("Sub-tasks Hours Spent", compute='_compute_subtask_effective_hours', store=True, help="Time spent on the sub-tasks (and their own sub-tasks) of this task.")
     timesheet_ids = fields.One2many('account.analytic.line', 'task_id', 'Timesheets')
 
-    # YTI FIXME: Those field seems quite useless
-    timesheet_timer_first_start = fields.Datetime("Timesheet Timer First Use", readonly=True)
-    timesheet_timer_last_stop = fields.Datetime("Timesheet Timer Last Use", readonly=True)
-    display_timesheet_timer = fields.Boolean("Display Timesheet Time", compute='_compute_display_timesheet_timer')
-
-    display_timer_start_secondary = fields.Boolean(compute='_compute_display_timer_buttons')
-
-    @api.depends('display_timesheet_timer', 'timer_start', 'timer_pause', 'total_hours_spent')
-    def _compute_display_timer_buttons(self):
-        for task in self:
-            if not task.display_timesheet_timer:
-                task.update({
-                    'display_timer_start_primary': False,
-                    'display_timer_start_secondary': False,
-                    'display_timer_stop': False,
-                    'display_timer_pause': False,
-                    'display_timer_resume': False,
-                })
-            else:
-                super(Task, task)._compute_display_timer_buttons()
-                task.display_timer_start_secondary = task.display_timer_start_primary
-                if not task.timer_start:
-                    task.update({
-                        'display_timer_stop': False,
-                        'display_timer_pause': False,
-                        'display_timer_resume': False,
-                    })
-                    if not task.total_hours_spent:
-                        task.display_timer_start_secondary = False
-                    else:
-                        task.display_timer_start_primary = False
-
     @api.depends('project_id.analytic_account_id.active')
     def _compute_analytic_account_active(self):
         """ Overridden in sale_timesheet """
@@ -204,11 +151,6 @@ class Task(models.Model):
         for task in self:
             task.subtask_effective_hours = sum(child_task.effective_hours + child_task.subtask_effective_hours for child_task in task.child_ids)
 
-    @api.depends('allow_timesheets', 'project_id.allow_timesheet_timer', 'analytic_account_active')
-    def _compute_display_timesheet_timer(self):
-        for task in self:
-            task.display_timesheet_timer = task.allow_timesheets and task.project_id.allow_timesheet_timer and task.analytic_account_active
-
     def action_view_subtask_timesheet(self):
         self.ensure_one()
         tasks = self._get_all_subtasks()
@@ -256,35 +198,6 @@ class Task(models.Model):
         result['arch'] = self.env['account.analytic.line']._apply_timesheet_label(result['arch'])
         return result
 
-    def action_timer_start(self):
-        if not self.user_timer_id.timer_start and self.display_timesheet_timer:
-            super(Task, self).action_timer_start()
-
-    def action_timer_stop(self):
-        # timer was either running or paused
-        if self.user_timer_id.timer_start and self.display_timesheet_timer:
-            minutes_spent = super().action_timer_stop()
-            minimum_duration = int(self.env['ir.config_parameter'].sudo().get_param('hr_timesheet.timesheet_min_duration', 0))
-            rounding = int(self.env['ir.config_parameter'].sudo().get_param('hr_timesheet.timesheet_rounding', 0))
-            minutes_spent = self._timer_rounding(minutes_spent, minimum_duration, rounding)
-            return self._action_create_timesheet(minutes_spent * 60 / 3600)
-        return False
-
-    def _action_create_timesheet(self, time_spent):
-        return {
-            "name": _("Validate Spent Time"),
-            "type": 'ir.actions.act_window',
-            "res_model": 'project.task.create.timesheet',
-            "views": [[False, "form"]],
-            "target": 'new',
-            "context": {
-                **self.env.context,
-                'active_id': self.id,
-                'active_model': self._name,
-                'default_time_spent': time_spent,
-            },
-        }
-
     def unlink(self):
         """
         If some tasks to unlink have some timesheets entries, these
