PR: https://github.com/odoo/odoo/pull/

From: 0d60e0c87be7392af40365773c40465fd40b9d43
From: Thibault Delavall√©e
Date: 2016-08-01 13:05:34

Structural Changes: 2
Total Changes: 65

[IMP] product: clean and simplify code after new API migration

* product.category: remove complete_name field as display_name can be used
  where the field was used
* product.supplierinfo: remove computed qty field. This field originally
  contained the min_qty computed into the product_uom. However commit
  3c186c580738511cfc805e9b4454a1eb9cf49e3c broke that field without reason.
  Since 2011 no one complained about this field being unnecessary, so let us
  remove it.
* product.template: shorter and less spaghetti version of create_variant
  method
* product_product._sellect_seller: fix use of default parameter in method
  kwargs + use odoo standard datetime default value

================================= pseudo patch: =================================

--- a/addons/product/models/product.py
+++ b/addons/product/models/product.py
@@ -2,9 +2,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 import re
-import time
-
-from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT, DEFAULT_SERVER_DATE_FORMAT
 
 from odoo import api, fields, models, tools, _
 from odoo.exceptions import ValidationError
@@ -22,7 +19,6 @@ class ProductCategory(models.Model):
     _order = 'parent_left'
 
     name = fields.Char('Name', index=True, required=True, translate=True)
-    complete_name = fields.Char('Name', compute='_name_get_fnc')
     parent_id = fields.Many2one('product.category', 'Parent Category', index=True, ondelete='cascade')
     child_id = fields.One2many('product.category', 'parent_id', 'Child Categories')
     type = fields.Selection([
@@ -35,13 +31,6 @@ class ProductCategory(models.Model):
         '# Products', compute='_compute_product_count',
         help="The number of products under this category (Does not consider the children categories)")
 
-    @api.depends('parent_id', 'parent_id.complete_name')
-    def _name_get_fnc(self):
-        # TDE FIXME: cannot use display name ?
-        res = dict(self.name_get())
-        for category in self:
-            category.complete_name = res[category.id]
-
     def _compute_product_count(self):
         read_group_res = self.env['product.template'].read_group([('categ_id', 'in', self.ids)], ['categ_id'], ['categ_id'])
         group_data = dict((data['categ_id'][0], data['categ_id_count']) for data in read_group_res)
@@ -475,9 +464,10 @@ class ProductProduct(models.Model):
                 'target': 'new'}
 
     @api.multi
-    def _select_seller(self, partner_id=False, quantity=0.0, date=time.strftime(DEFAULT_SERVER_DATE_FORMAT), uom_id=False):
-        # TDE FIXME: date parameter
+    def _select_seller(self, partner_id=False, quantity=0.0, date=None, uom_id=False):
         self.ensure_one()
+        if date is None:
+            date = fields.Date.today()
         res = self.env['product.supplierinfo']
         for seller in self.seller_ids:
             # Set quantity in UoM of seller
@@ -491,7 +481,7 @@ class ProductProduct(models.Model):
                 continue
             if partner_id and seller.name not in [partner_id, partner_id.parent_id]:
                 continue
-            if quantity_uom_seller < seller.qty:
+            if quantity_uom_seller < seller.min_qty:
                 continue
             if seller.product_id and seller.product_id != self:
                 continue
@@ -598,9 +588,6 @@ class SuppliferInfo(models.Model):
     min_qty = fields.Float(
         'Minimal Quantity', default=0.0, required=True,
         help="The minimal quantity to purchase from this vendor, expressed in the vendor Product Unit of Measure if not any, in the default unit of measure of the product otherwise.")
-    qty = fields.Float(
-        'Quantity', compute='_compute_qty', store=True,
-        help="This is a quantity which is converted into Default Unit of Measure.")
     price = fields.Float(
         'Price', default=0.0, digits_compute=dp.get_precision('Product Price'),
         required=True, help="The price to purchase a product")
@@ -622,9 +609,3 @@ class SuppliferInfo(models.Model):
     delay = fields.Integer(
         'Delivery Lead Time', default=1, required=True,
         help="Lead time in days between the confirmation of the purchase order and the receipt of the products in your warehouse. Used by the scheduler for automatic computation of the purchase order planning.")
-
-    @api.one
-    @api.depends('min_qty')
-    def _compute_qty(self):
-        # TDE FIXME: whaaaat ?
-        self.qty = self.min_qty

--- a/addons/product/models/product_template.py
+++ b/addons/product/models/product_template.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+import itertools
 import psycopg2
 
 import odoo.addons.decimal_precision as dp
@@ -342,53 +343,38 @@ class ProductTemplate(models.Model):
     @api.multi
     def create_variant_ids(self):
         Product = self.env["product.product"]
-        if self._context.get("create_product_variant"):
-            return None
-
-        for tmpl_id in self.with_context(active_test=False, create_product_variant=True):
 
+        for tmpl_id in self.with_context(active_test=False):
             # list of values combination
-            variant_alone = []
-            all_variants = [[]]
-            for variant_id in tmpl_id.attribute_line_ids:
-                if len(variant_id.value_ids) == 1:
-                    variant_alone.append(variant_id.value_ids[0])
-                temp_variants = []
-                for variant in all_variants:
-                    for value_id in variant_id.value_ids:
-                        temp_variants.append(sorted(variant + [int(value_id)]))
-                if temp_variants:
-                    all_variants = temp_variants
+            existing_variants = [set(variant.attribute_value_ids.ids) for variant in tmpl_id.product_variant_ids]
+            variant_matrix = itertools.product(*(line.value_ids for line in tmpl_id.attribute_line_ids))
+            variant_matrix = map(lambda record_list: reduce(lambda x, y: x+y, record_list, self.env['product.attribute.value']), variant_matrix)
+            to_create_variants = filter(lambda rec_set: set(rec_set.ids) not in existing_variants, variant_matrix)
 
             # adding an attribute with only one value should not recreate product
             # write this attribute on every product to make sure we don't lose them
+            variant_alone = tmpl_id.attribute_line_ids.filtered(lambda line: len(line.value_ids) == 1).mapped('value_ids')
             for value_id in variant_alone:
                 updated_products = tmpl_id.product_variant_ids.filtered(lambda product: value_id.attribute_id not in product.mapped('attribute_value_ids.attribute_id'))
                 updated_products.write({'attribute_value_ids': [(4, value_id.id)]})
 
             # check product
             variants_to_activate = self.env['product.product']
-            variants_active = self.env['product.product']
             variants_to_unlink = self.env['product.product']
             for product_id in tmpl_id.product_variant_ids:
-                variants = sorted(map(int, product_id.attribute_value_ids))
-                if variants in all_variants:
-                    variants_active |= product_id
-                    all_variants.pop(all_variants.index(variants))
-                    if not product_id.active:
-                        variants_to_activate |= product_id
-                else:
+                if not product_id.active and product_id.attribute_value_ids in variant_matrix:
+                    variants_to_activate |= product_id
+                elif product_id.attribute_value_ids not in variant_matrix:
                     variants_to_unlink |= product_id
             if variants_to_activate:
                 variants_to_activate.write({'active': True})
 
             # create new product
-            for variant_ids in all_variants:
+            for variant_ids in to_create_variants:
                 new_variant = Product.create({
                     'product_tmpl_id': tmpl_id.id,
-                    'attribute_value_ids': [(6, 0, variant_ids)]
+                    'attribute_value_ids': [(6, 0, variant_ids.ids)]
                 })
-                variants_active |= new_variant
 
             # unlink or inactive product
             for variant in variants_to_activate:
