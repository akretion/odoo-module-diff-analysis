PR: https://github.com/odoo/odoo/pull/86084

From: b897571b9f61574919dce40c39b6d4a94dedf3d4
From: Thibault DelavallÃ©e
Date: 2023-10-06 06:13:53

Structural Changes: 6.7
Total Changes: 162

[REF] mass_mailing: rename subscription model

PURPOSE

Overall cleaning of subscription and exclusion management code from portal.
This code comes mainly from v12 and can now benefit from cleaning and update.

SPECIFICATIONS

In this commit we rename ``mailing.contact.subscription`` model into the
shorter ``mailing.subscription``. This is sufficient to explain the model
purpose. As we plan to add an opt-out model this also allows to have sub
models with suffixes without being too long.

We also rename ``subscription_list_ids`` field on contact model to
``subscription_ids`` as this is shorter and clearer.

Finally the ``mailing_contact_list_rel`` table name that comes from old
implementations (simple m2m table) is renamed to ``mailing_subscription``
to match the model name.

Task-2669037 (Mass Mailing: Refactor js/portal for subscription)

Part-of: odoo/odoo#86084

================================= pseudo patch: =================================

--- a/addons/mass_mailing/models/__init__.py
+++ b/addons/mass_mailing/models/__init__.py
@@ -4,7 +4,7 @@
 from . import ir_mail_server
 from . import ir_model
 from . import link_tracker
-from . import mailing_contact_subscription
+from . import mailing_subscription  # keep before due to decorated m2m
 from . import mailing_contact
 from . import mailing_list
 from . import mailing_trace

--- a/addons/mass_mailing/models/mailing.py
+++ b/addons/mass_mailing/models/mailing.py
@@ -749,7 +749,7 @@ class MassMailing(models.Model):
         if self.contact_list_ids:
             action['context'] = {
                 'default_mailing_list_ids': self.contact_list_ids[0].ids,
-                'default_subscription_list_ids': [(0, 0, {'list_id': self.contact_list_ids[0].id})],
+                'default_subscription_ids': [(0, 0, {'list_id': self.contact_list_ids[0].id})],
             }
         action['domain'] = [('list_ids', 'in', self.contact_list_ids.ids)]
         return action

--- a/addons/mass_mailing/models/mailing_contact.py
+++ b/addons/mass_mailing/models/mailing_contact.py
@@ -19,13 +19,13 @@ class MassMailingContact(models.Model):
 
     def default_get(self, fields_list):
         """ When coming from a mailing list we may have a default_list_ids context
-        key. We should use it to create subscription_list_ids default value that
+        key. We should use it to create subscription_ids default value that
         are displayed to the user as list_ids is not displayed on form view. """
         res = super(MassMailingContact, self).default_get(fields_list)
-        if 'subscription_list_ids' in fields_list and not res.get('subscription_list_ids'):
+        if 'subscription_ids' in fields_list and not res.get('subscription_ids'):
             list_ids = self.env.context.get('default_list_ids')
             if 'default_list_ids' not in res and list_ids and isinstance(list_ids, (list, tuple)):
-                res['subscription_list_ids'] = [
+                res['subscription_ids'] = [
                     (0, 0, {'list_id': list_id}) for list_id in list_ids]
         return res
 
@@ -34,10 +34,10 @@ class MassMailingContact(models.Model):
     title_id = fields.Many2one('res.partner.title', string='Title')
     email = fields.Char('Email')
     list_ids = fields.Many2many(
-        'mailing.list', 'mailing_contact_list_rel',
+        'mailing.list', 'mailing_subscription',
         'contact_id', 'list_id', string='Mailing Lists')
-    subscription_list_ids = fields.One2many(
-        'mailing.contact.subscription', 'contact_id', string='Subscription Information')
+    subscription_ids = fields.One2many(
+        'mailing.subscription', 'contact_id', string='Subscription Information')
     country_id = fields.Many2one('res.country', string='Country')
     tag_ids = fields.Many2many('res.partner.category', string='Tags')
     opt_out = fields.Boolean(
@@ -57,17 +57,17 @@ class MassMailingContact(models.Model):
 
         if 'default_list_ids' in self._context and isinstance(self._context['default_list_ids'], (list, tuple)) and len(self._context['default_list_ids']) == 1:
             [active_list_id] = self._context['default_list_ids']
-            contacts = self.env['mailing.contact.subscription'].search([('list_id', '=', active_list_id)])
+            contacts = self.env['mailing.subscription'].search([('list_id', '=', active_list_id)])
             return [('id', 'in', [record.contact_id.id for record in contacts if record.opt_out == value])]
         return expression.FALSE_DOMAIN if value else expression.TRUE_DOMAIN
 
-    @api.depends('subscription_list_ids')
+    @api.depends('subscription_ids')
     @api.depends_context('default_list_ids')
     def _compute_opt_out(self):
         if 'default_list_ids' in self._context and isinstance(self._context['default_list_ids'], (list, tuple)) and len(self._context['default_list_ids']) == 1:
             [active_list_id] = self._context['default_list_ids']
             for record in self:
-                active_subscription_list = record.subscription_list_ids.filtered(lambda l: l.list_id.id == active_list_id)
+                active_subscription_list = record.subscription_ids.filtered(lambda l: l.list_id.id == active_list_id)
                 record.opt_out = active_subscription_list.opt_out
         else:
             for record in self:
@@ -76,7 +76,7 @@ class MassMailingContact(models.Model):
     @api.model_create_multi
     def create(self, vals_list):
         """ Synchronize default_list_ids (currently used notably for computed
-        fields) default key with subscription_list_ids given by user when creating
+        fields) default key with subscription_ids given by user when creating
         contacts.
 
         Those two values have the same purpose, adding a list to to the contact
@@ -90,21 +90,21 @@ class MassMailingContact(models.Model):
         default_list_ids = default_list_ids if isinstance(default_list_ids, (list, tuple)) else []
 
         for vals in vals_list:
-            if vals.get('list_ids') and vals.get('subscription_list_ids'):
-                raise UserError(_('You should give either list_ids, either subscription_list_ids to create new contacts.'))
+            if vals.get('list_ids') and vals.get('subscription_ids'):
+                raise UserError(_('You should give either list_ids, either subscription_ids to create new contacts.'))
 
         if default_list_ids:
             for vals in vals_list:
                 if vals.get('list_ids'):
                     continue
                 current_list_ids = []
-                subscription_ids = vals.get('subscription_list_ids') or []
+                subscription_ids = vals.get('subscription_ids') or []
                 for subscription in subscription_ids:
                     if len(subscription) == 3:
                         current_list_ids.append(subscription[2]['list_id'])
                 for list_id in set(default_list_ids) - set(current_list_ids):
                     subscription_ids.append((0, 0, {'list_id': list_id}))
-                vals['subscription_list_ids'] = subscription_ids
+                vals['subscription_ids'] = subscription_ids
 
         return super(MassMailingContact, self.with_context(default_list_ids=False)).create(vals_list)
 

--- a/addons/mass_mailing/models/mailing_list.py
+++ b/addons/mass_mailing/models/mailing_list.py
@@ -27,14 +27,14 @@ class MassMailingList(models.Model):
     contact_pct_blacklisted = fields.Float(compute="_compute_mailing_list_statistics", string="Percentage of Blacklisted")
     contact_pct_bounce = fields.Float(compute="_compute_mailing_list_statistics", string="Percentage of Bouncing")
     contact_ids = fields.Many2many(
-        'mailing.contact', 'mailing_contact_list_rel', 'list_id', 'contact_id',
+        'mailing.contact', 'mailing_subscription', 'list_id', 'contact_id',
         string='Mailing Lists', copy=False)
     mailing_count = fields.Integer(compute="_compute_mailing_count", string="Number of Mailing")
     mailing_ids = fields.Many2many(
         'mailing.mailing', 'mail_mass_mailing_list_rel',
         string='Mass Mailings', copy=False)
     subscription_ids = fields.One2many(
-        'mailing.contact.subscription', 'list_id',
+        'mailing.subscription', 'list_id',
         string='Subscription Information',
         copy=True, depends=['contact_ids'])
     is_public = fields.Boolean(
@@ -78,13 +78,13 @@ class MassMailingList(models.Model):
         bounce_per_mailing = {}
         if self.ids:
             sql = '''
-                SELECT mclr.list_id, COUNT(DISTINCT mc.id)
+                SELECT list_sub.list_id, COUNT(DISTINCT mc.id)
                 FROM mailing_contact mc
-                LEFT OUTER JOIN mailing_contact_list_rel mclr
-                ON mc.id = mclr.contact_id
+                LEFT OUTER JOIN mailing_subscription list_sub
+                ON mc.id = list_sub.contact_id
                 WHERE mc.message_bounce > 0
-                AND mclr.list_id in %s
-                GROUP BY mclr.list_id
+                AND list_sub.list_id in %s
+                GROUP BY list_sub.list_id
             '''
             self.env.cr.execute(sql, (tuple(self.ids),))
             bounce_per_mailing = dict(self.env.cr.fetchall())
@@ -144,7 +144,7 @@ class MassMailingList(models.Model):
         action['context'] = {
             **self.env.context,
             'default_mailing_list_ids': self.ids,
-            'default_subscription_list_ids': [
+            'default_subscription_ids': [
                 Command.create({'list_id': mailing_list.id})
                 for mailing_list in self
             ],
@@ -232,7 +232,7 @@ class MassMailingList(models.Model):
         src_lists |= self
         self.env.flush_all()
         self.env.cr.execute("""
-            INSERT INTO mailing_contact_list_rel (contact_id, list_id)
+            INSERT INTO mailing_subscription (contact_id, list_id)
             SELECT st.contact_id AS contact_id, %s AS list_id
             FROM
                 (
@@ -243,7 +243,7 @@ class MassMailingList(models.Model):
                     row_number() OVER (PARTITION BY email ORDER BY email) AS rn
                 FROM
                     mailing_contact contact,
-                    mailing_contact_list_rel contact_list_rel,
+                    mailing_subscription contact_list_rel,
                     mailing_list list
                 WHERE contact.id=contact_list_rel.contact_id
                 AND COALESCE(contact_list_rel.opt_out,FALSE) = FALSE
@@ -255,7 +255,7 @@ class MassMailingList(models.Model):
                     SELECT 1
                     FROM
                         mailing_contact contact2,
-                        mailing_contact_list_rel contact_list_rel2
+                        mailing_subscription contact_list_rel2
                     WHERE contact2.email = contact.email
                     AND contact_list_rel2.contact_id = contact2.id
                     AND contact_list_rel2.list_id = %s
@@ -303,14 +303,14 @@ class MassMailingList(models.Model):
 
         # switch opted-in subscriptions
         if opt_out:
-            current_opt_in = contacts.subscription_list_ids.filtered(
+            current_opt_in = contacts.subscription_ids.filtered(
                 lambda sub: not sub.opt_out and sub.list_id in self
             )
             if current_opt_in:
                 current_opt_in.write({'opt_out': True})
         # switch opted-out subscription and create missing subscriptions
         else:
-            subscriptions = contacts.subscription_list_ids.filtered(lambda sub: sub.list_id in self)
+            subscriptions = contacts.subscription_ids.filtered(lambda sub: sub.list_id in self)
             current_opt_out = subscriptions.filtered('opt_out')
             if current_opt_out:
                 current_opt_out.write({'opt_out': False})
@@ -318,7 +318,7 @@ class MassMailingList(models.Model):
             # create a subscription (for a single contact) for missing lists
             missing_lists = self - subscriptions.list_id
             if missing_lists:
-                self.env['mailing.contact.subscription'].create([
+                self.env['mailing.subscription'].create([
                     {'contact_id': contacts[0].id,
                      'list_id': mailing_list.id}
                     for mailing_list in missing_lists
@@ -397,7 +397,7 @@ class MassMailingList(models.Model):
                 SELECT
                     {','.join(self._get_contact_statistics_fields().values())}
                 FROM
-                    mailing_contact_list_rel r
+                    mailing_subscription r
                     {self._get_contact_statistics_joins()}
                 WHERE list_id IN %s
                 GROUP BY

--- a/addons/mass_mailing/models/mailing_contact_subscription.py
+++ b/addons/mass_mailing/models/mailing_subscription.py
@@ -4,13 +4,13 @@
 from odoo import api, fields, models
 
 
-class MassMailingContactListRel(models.Model):
+class MailingSubscription(models.Model):
     """ Intermediate model between mass mailing list and mass mailing contact
         Indicates if a contact is opted out for a particular list
     """
-    _name = 'mailing.contact.subscription'
-    _description = 'Mass Mailing Subscription Information'
-    _table = 'mailing_contact_list_rel'
+    _name = 'mailing.subscription'
+    _description = 'Mailing List Subscription'
+    _table = 'mailing_subscription'
     _rec_name = 'contact_id'
     _order = 'list_id DESC, contact_id DESC'
 
