PR: https://github.com/odoo/odoo/pull/

From: 7fb9c8129606538b004dea4e6ad071eabf6c6fb1
From: YOGRAJ TANDEL
Date: 2021-03-26 12:25:44

Breaking data model changes scores: del:14 + add:0, change matches:
-    mo = fields.Boolean('Mon', compute='_compute_recurrence', readonly=False)
-    tu = fields.Boolean('Tue', compute='_compute_recurrence', readonly=False)
-    we = fields.Boolean('Wed', compute='_compute_recurrence', readonly=False)
-    th = fields.Boolean('Thu', compute='_compute_recurrence', readonly=False)
-    fr = fields.Boolean('Fri', compute='_compute_recurrence', readonly=False)
-    sa = fields.Boolean('Sat', compute='_compute_recurrence', readonly=False)
-    su = fields.Boolean('Sun', compute='_compute_recurrence', readonly=False)
-    mo = fields.Boolean()
-    tu = fields.Boolean()
-    we = fields.Boolean()
-    th = fields.Boolean()
-    fr = fields.Boolean()
-    sa = fields.Boolean()
-    su = fields.Boolean()

Total Changes: 82

[IMP] calendar,lunch: change field names

with this commit we changes field names for week days like su, mo, tu etc. to
sun, mon, tue and so on in calendar module, this is going to be used in
task 2317795 where we developed recurrency module for recurrency mixin.

Also with this commit we change field names of weekdays in lunch module to have
same name as we have in calendar and project module so that we can easily use
custom widget "web_weekly_recurrence" instead of defining boolean field in xml
for each day.

task-2335399

Co-authored-by: Mohammed Shekha <msh@odoo.com>

================================= pseudo patch: =================================

--- a/addons/calendar/models/calendar_event.py
+++ b/addons/calendar/models/calendar_event.py
@@ -196,13 +196,13 @@ class Meeting(models.Model):
         help="Repeat every (Days/Week/Month/Year)")
     count = fields.Integer(
         string='Repeat', help="Repeat x times", compute='_compute_recurrence', readonly=False)
-    mo = fields.Boolean('Mon', compute='_compute_recurrence', readonly=False)
-    tu = fields.Boolean('Tue', compute='_compute_recurrence', readonly=False)
-    we = fields.Boolean('Wed', compute='_compute_recurrence', readonly=False)
-    th = fields.Boolean('Thu', compute='_compute_recurrence', readonly=False)
-    fr = fields.Boolean('Fri', compute='_compute_recurrence', readonly=False)
-    sa = fields.Boolean('Sat', compute='_compute_recurrence', readonly=False)
-    su = fields.Boolean('Sun', compute='_compute_recurrence', readonly=False)
+    mon = fields.Boolean(compute='_compute_recurrence', readonly=False)
+    tue = fields.Boolean(compute='_compute_recurrence', readonly=False)
+    wed = fields.Boolean(compute='_compute_recurrence', readonly=False)
+    thu = fields.Boolean(compute='_compute_recurrence', readonly=False)
+    fri = fields.Boolean(compute='_compute_recurrence', readonly=False)
+    sat = fields.Boolean(compute='_compute_recurrence', readonly=False)
+    sun = fields.Boolean(compute='_compute_recurrence', readonly=False)
     month_by = fields.Selection(
         MONTH_BY_SELECTION, string='Option', compute='_compute_recurrence', readonly=False)
     day = fields.Integer('Date of month', compute='_compute_recurrence', readonly=False)
@@ -908,8 +908,8 @@ class Meeting(models.Model):
     @api.model
     def _get_recurrent_fields(self):
         return {'byday', 'until', 'rrule_type', 'month_by', 'event_tz', 'rrule',
-                'interval', 'count', 'end_type', 'mo', 'tu', 'we', 'th', 'fr', 'sa',
-                'su', 'day', 'weekday'}
+                'interval', 'count', 'end_type', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat',
+                'sun', 'day', 'weekday'}
 
     @api.model
     def _get_time_fields(self):

--- a/addons/calendar/models/calendar_recurrence.py
+++ b/addons/calendar/models/calendar_recurrence.py
@@ -30,15 +30,17 @@ RRULE_FREQ_TO_SELECT = {
 }
 
 RRULE_WEEKDAY_TO_FIELD = {
-    rrule.MO.weekday: 'mo',
-    rrule.TU.weekday: 'tu',
-    rrule.WE.weekday: 'we',
-    rrule.TH.weekday: 'th',
-    rrule.FR.weekday: 'fr',
-    rrule.SA.weekday: 'sa',
-    rrule.SU.weekday: 'su',
+    rrule.MO.weekday: 'mon',
+    rrule.TU.weekday: 'tue',
+    rrule.WE.weekday: 'wed',
+    rrule.TH.weekday: 'thu',
+    rrule.FR.weekday: 'fri',
+    rrule.SA.weekday: 'sat',
+    rrule.SU.weekday: 'sun',
 }
 
+RRULE_WEEKDAYS = {'SUN': 'SU', 'MON': 'MO', 'TUE': 'TU', 'WED': 'WE', 'THU': 'TH', 'FRI': 'FR', 'SAT': 'SA'}
+
 RRULE_TYPE_SELECTION = [
     ('daily', 'Days'),
     ('weekly', 'Weeks'),
@@ -58,13 +60,13 @@ MONTH_BY_SELECTION = [
 ]
 
 WEEKDAY_SELECTION = [
-    ('MO', 'Monday'),
-    ('TU', 'Tuesday'),
-    ('WE', 'Wednesday'),
-    ('TH', 'Thursday'),
-    ('FR', 'Friday'),
-    ('SA', 'Saturday'),
-    ('SU', 'Sunday'),
+    ('MON', 'Monday'),
+    ('TUE', 'Tuesday'),
+    ('WED', 'Wednesday'),
+    ('THU', 'Thursday'),
+    ('FRI', 'Friday'),
+    ('SAT', 'Saturday'),
+    ('SUN', 'Sunday'),
 ]
 
 BYDAY_SELECTION = [
@@ -104,13 +106,13 @@ class RecurrenceRule(models.Model):
     end_type = fields.Selection(END_TYPE_SELECTION, default='count')
     interval = fields.Integer(default=1)
     count = fields.Integer(default=1)
-    mo = fields.Boolean()
-    tu = fields.Boolean()
-    we = fields.Boolean()
-    th = fields.Boolean()
-    fr = fields.Boolean()
-    sa = fields.Boolean()
-    su = fields.Boolean()
+    mon = fields.Boolean()
+    tue = fields.Boolean()
+    wed = fields.Boolean()
+    thu = fields.Boolean()
+    fri = fields.Boolean()
+    sat = fields.Boolean()
+    sun = fields.Boolean()
     month_by = fields.Selection(MONTH_BY_SELECTION, default='date')
     day = fields.Integer(default=1)
     weekday = fields.Selection(WEEKDAY_SELECTION, string='Weekday')
@@ -160,7 +162,7 @@ class RecurrenceRule(models.Model):
 
     @api.depends(
         'byday', 'until', 'rrule_type', 'month_by', 'interval', 'count', 'end_type',
-        'mo', 'tu', 'we', 'th', 'fr', 'sa', 'su', 'day', 'weekday')
+        'mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun', 'day', 'weekday')
     def _compute_rrule(self):
         for recurrence in self:
             recurrence.rrule = recurrence._rrule_serialize()
@@ -302,7 +304,7 @@ class RecurrenceRule(models.Model):
     def _rrule_parse(self, rule_str, date_start):
         # LUL TODO clean this mess
         data = {}
-        day_list = ['mo', 'tu', 'we', 'th', 'fr', 'sa', 'su']
+        day_list = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
 
         if 'Z' in rule_str and not date_start.tzinfo:
             date_start = pytz.utc.localize(date_start)
@@ -432,13 +434,13 @@ class RecurrenceRule(models.Model):
         return tuple(
             rrule.weekday(weekday_index)
             for weekday_index, weekday in {
-                rrule.MO.weekday: self.mo,
-                rrule.TU.weekday: self.tu,
-                rrule.WE.weekday: self.we,
-                rrule.TH.weekday: self.th,
-                rrule.FR.weekday: self.fr,
-                rrule.SA.weekday: self.sa,
-                rrule.SU.weekday: self.su,
+                rrule.MO.weekday: self.mon,
+                rrule.TU.weekday: self.tue,
+                rrule.WE.weekday: self.wed,
+                rrule.TH.weekday: self.thu,
+                rrule.FR.weekday: self.fri,
+                rrule.SA.weekday: self.sat,
+                rrule.SU.weekday: self.sun,
             }.items() if weekday
         )
 
@@ -458,7 +460,7 @@ class RecurrenceRule(models.Model):
         if freq == 'monthly' and self.month_by == 'date':  # e.g. every 15th of the month
             rrule_params['bymonthday'] = self.day
         elif freq == 'monthly' and self.month_by == 'day':  # e.g. every 2nd Monday in the month
-            rrule_params['byweekday'] = getattr(rrule, self.weekday)(int(self.byday))  # e.g. MO(+2) for the second Monday of the month
+            rrule_params['byweekday'] = getattr(rrule, RRULE_WEEKDAYS[self.weekday])(int(self.byday))  # e.g. MO(+2) for the second Monday of the month
         elif freq == 'weekly':
             weekdays = self._get_week_days()
             if not weekdays:
