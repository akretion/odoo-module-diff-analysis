PR: https://github.com/odoo/odoo/pull/

From: 12b580c953a762e40fb4a07a3fe5be3d119fa406
From: RomainLibert
Date: 2018-02-23 15:13:03

Structural Changes: 2
Total Changes: 32

[IMP] rating: Parent document name update

For objects inherting from rating.mixin, when their parent model change
(e.i.: task from a project to another), the "Parent document name" does
not change. The rating is still considered belonging to the old parent
object (rating stat of project is not correct).

Change the rating API. In rating mixin, instead of having 2 methods
returning parent id and parent model (rating_get_parent_id and
rating_get_parent_model_name), we should have one method returning the
'parent relation field' (inevitably m2o field). Then we can deduce its
parent_res_id/parent_res_model, and check this parent field is in values
of write to trigger the recompute of parent_res_name.

Also, add "ondelete=cascade" on parent_res_model_id

Impacted modules: project, rating, helpdesk, livechat

================================= pseudo patch: =================================

--- a/addons/rating/models/rating.py
+++ b/addons/rating/models/rating.py
@@ -37,7 +37,7 @@ class Rating(models.Model):
     res_model = fields.Char(string='Document Model', related='res_model_id.model', store=True, index=True, readonly=True)
     res_id = fields.Integer(string='Document', required=True, help="Identifier of the rated object", index=True)
     parent_res_name = fields.Char('Parent Document Name', compute='_compute_parent_res_name', store=True)
-    parent_res_model_id = fields.Many2one('ir.model', 'Parent Related Document Model', index=True)
+    parent_res_model_id = fields.Many2one('ir.model', 'Parent Related Document Model', index=True, ondelete='cascade')
     parent_res_model = fields.Char('Parent Document Model', store=True, related='parent_res_model_id.model', index=True)
     parent_res_id = fields.Integer('Parent Document', index=True)
     rated_partner_id = fields.Many2one('res.partner', string="Rated person", help="Owner of the rated resource")
@@ -105,10 +105,10 @@ class Rating(models.Model):
             'parent_res_model_id': False,
             'parent_res_id': False,
         }
-        if hasattr(current_record, 'rating_get_parent_model_name'):
-            parent_res_model = current_record.rating_get_parent_model_name(values)
-            data['parent_res_model_id'] = self.env['ir.model']._get(parent_res_model).id
-            data['parent_res_id'] = current_record.rating_get_parent_id()
+        if hasattr(current_record, 'rating_get_parent'):
+            parent_res_model = getattr(current_record, current_record.rating_get_parent())
+            data['parent_res_model_id'] = self.env['ir.model']._get(parent_res_model._name).id
+            data['parent_res_id'] = parent_res_model.id
         return data
 
     @api.multi
@@ -150,6 +150,7 @@ class RatingMixin(models.AbstractModel):
                 record.rating_last_value = ratings.rating
 
     @api.multi
+    @api.depends('rating_ids')
     def _compute_rating_count(self):
         read_group_res = self.env['rating.rating'].read_group(
             [('res_model', '=', self._name), ('res_id', 'in', self.ids), ('consumed', '=', True)],
@@ -161,11 +162,15 @@ class RatingMixin(models.AbstractModel):
             record.rating_count = result.get(record.id)
 
     def write(self, values):
-        """ If the rated ressource name is modified, we should update the rating res_name too. """
+        """ If the rated ressource name is modified, we should update the rating res_name too.
+            If the rated ressource parent is changed we should update the parent_res_id too"""
         result = super(RatingMixin, self).write(values)
-        for r in self:
-            if r._rec_name in values:
-                r.rating_ids._compute_res_name()
+        for record in self:
+            if record._rec_name in values:
+                record.rating_ids._compute_res_name()
+            if record.rating_get_parent() in values:
+                for rating in record.rating_ids:
+                    rating.parent_res_id = record[record.rating_get_parent()].id
         return result
 
     def unlink(self):
@@ -175,12 +180,9 @@ class RatingMixin(models.AbstractModel):
         self.env['rating.rating'].sudo().search([('res_model', '=', self._name), ('res_id', 'in', record_ids)]).unlink()
         return result
 
-    def rating_get_parent_model_name(self, vals):
-        """ Return the parent model name """
-        return None
-
-    def rating_get_parent_id(self):
-        """ Return the parent record id """
+    def rating_get_parent(self):
+        """Return the parent relation field name
+           Should return a Many2One"""
         return None
 
     def rating_get_partner_id(self):
