PR: https://github.com/odoo/odoo/pull/

From: 51e51055bf42a360838f9a22c61bc01b226301d1
From: Aur√©lien Warnon
Date: 2018-09-25 16:39:32

Structural Changes: 3
Total Changes: 46

[IMP] (website_)sale: Allow configuring variants creation on demand

Purpose
=======

Product attributes can be configured to create variants "on demand".
This means that product.templates having these attributes will only create product.product variant
when that combination is actually selected in a sale order/in the web shop.

Product attribute values are also improved to handle extra prices and exclusions
in all three modes ("never", "on demand", "always")

Specification
=============

Create variants on demand
- add a new mode to generate variants as they are added to the order/cart
  (needed for big # of combinations managed in the inventory and/or produced in mrp with specific boms)
- replace the boolean by a selection radio
  tooltip for this new field:
	Always:
	  Variants are generated straight away when
	  the attribute values are combined in the product configuration.
	Only when the product is added to a sales order:
	  Variants are generated once the combination is selected in the sales order.
	  This is advised when variants are customized on demand and manufactured as such in Odoo.
	Never:
	  Advised when variants are not needed in Odoo.
	  The selected values just show up in the description of sales order lines.
- ability to define attribute extra prices & exclude combinations in all variant modes
- if at least one attribute of the product in set to "on demand" mode, generate all the variants "on demand"

================================= pseudo patch: =================================

--- a/addons/sale/models/product_product.py
+++ b/addons/sale/models/product_product.py
@@ -85,6 +85,7 @@ class ProductProductAttributeValue(models.Model):
 class ProductAttributeCustomValue(models.Model):
     _name = "product.attribute.custom.value"
     _rec_name = 'custom_value'
+    _description = 'Product Attribute Custom Value'
 
     attribute_value_id = fields.Many2one('product.attribute.value', string='Attribute')
     sale_order_line_id = fields.Many2one('sale.order.line', string='Sale order line')

--- a/addons/sale/models/product_template.py
+++ b/addons/sale/models/product_template.py
@@ -4,6 +4,7 @@
 from odoo import api, fields, models, _
 from odoo.addons.base.models.res_partner import WARNING_MESSAGE, WARNING_HELP
 from odoo.tools.float_utils import float_round
+import json
 
 
 class ProductTemplate(models.Model):
@@ -54,6 +55,22 @@ class ProductTemplate(models.Model):
         }
         return action
 
+    def create_product_variant(self, product_attribute_value_ids):
+        self.ensure_one()
+
+        attribute_value_ids = \
+            self.env['product.product.attribute.value'] \
+                .browse(json.loads(product_attribute_value_ids)) \
+                .mapped('product_attribute_value_id') \
+                .filtered(lambda attribute_value_id: attribute_value_id.attribute_id.create_variant != 'never')
+
+        product_variant = self.env['product.product'].create({
+            'product_tmpl_id': self.id,
+            'attribute_value_ids': [(6, 0, attribute_value_ids.ids)]
+        })
+
+        return product_variant.id
+
     @api.onchange('type')
     def _onchange_type(self):
         """ Force values to stay consistent with integrity constraints """

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -936,6 +936,9 @@ class SaleOrderLine(models.Model):
             res['product_id'] = int(self._context.get('product_id'))
         if self._context.get('quantity'):
             res['product_uom_qty'] = float(self._context.get('quantity'))
+        if self._context.get('no_variant_attribute_values'):
+            attributes = self._context.get('no_variant_attribute_values')
+            res['product_no_variant_attribute_values'] = [(6, 0, [int(attribute['value']) for attribute in attributes])]
         if self._context.get('product_custom_variant_values'):
             values = self._context.get('product_custom_variant_values')
             res['product_custom_variant_values'] = [(0, 0, value) for value in values]
@@ -1128,7 +1131,10 @@ class SaleOrderLine(models.Model):
     product_updatable = fields.Boolean(compute='_compute_product_updatable', string='Can Edit Product', readonly=True, default=True)
     product_uom_qty = fields.Float(string='Ordered Quantity', digits=dp.get_precision('Product Unit of Measure'), required=True, default=1.0)
     product_uom = fields.Many2one('uom.uom', string='Unit of Measure')
-    product_custom_variant_values = fields.One2many('product.attribute.custom.value', 'sale_order_line_id', string='Custom variant values')
+    product_custom_variant_values = fields.One2many('product.attribute.custom.value', 'sale_order_line_id', string='User entered custom product attribute values')
+    # M2M holding the values of product.attribute with create_variant field set to 'never'
+    # It allows keeping track of the extra_price associated to those attribute values and add them to the SO line description
+    product_no_variant_attribute_values = fields.Many2many('product.product.attribute.value', string='Product attribute values that do not create variants')
     # Non-stored related field to allow portal user to see the image of the product he has ordered
     product_image = fields.Binary('Product Image', related="product_id.image", store=False)
 
@@ -1376,9 +1382,18 @@ class SaleOrderLine(models.Model):
     @api.multi
     def _get_display_price(self, product):
         # TO DO: move me in master/saas-16 on sale.order
+        # awa: don't know it it's still the case since we need the "product_no_variant_attribute_values" field now
+        # to be able to compute the full price
+        if self.product_no_variant_attribute_values:
+            product = product.with_context(no_variant_attributes_price_extra=[
+                no_variant_attribute_value.price_extra or 0
+                for no_variant_attribute_value in self.product_no_variant_attribute_values
+            ])
+
         if self.order_id.pricelist_id.discount_policy == 'with_discount':
             return product.with_context(pricelist=self.order_id.pricelist_id.id).price
         product_context = dict(self.env.context, partner_id=self.order_id.partner_id.id, date=self.order_id.date_order, uom=self.product_uom.id)
+
         final_price, rule_id = self.order_id.pricelist_id.with_context(product_context).get_product_price_rule(self.product_id, self.product_uom_qty or 1.0, self.order_id.partner_id)
         base_price, currency = self.with_context(product_context)._get_real_price_currency(product, rule_id, self.product_uom_qty, self.product_uom, self.order_id.pricelist_id.id)
         if currency != self.order_id.pricelist_id.currency_id:
@@ -1425,12 +1440,21 @@ class SaleOrderLine(models.Model):
                 return result
 
         name = self.get_sale_order_line_multiline_description_sale(product)
-        if self.product_custom_variant_values:
+
+        if self.product_custom_variant_values or self.product_no_variant_attribute_values:
             name += '\n'
+
+        if self.product_custom_variant_values:
             for product_custom_variant_value in self.product_custom_variant_values:
                 if product_custom_variant_value.custom_value and product_custom_variant_value.custom_value.strip():
                     name += '\n' + product_custom_variant_value.attribute_value_id.name + ': ' + product_custom_variant_value.custom_value.strip()
 
+        if self.product_no_variant_attribute_values:
+            for no_variant_attribute_value in self.product_no_variant_attribute_values.filtered(
+                lambda product_attribute_value: not product_attribute_value.is_custom
+            ):
+                name += '\n' + no_variant_attribute_value.attribute_id.name + ': ' + no_variant_attribute_value.name
+
         vals.update(name=name)
 
         self._compute_tax_id()
