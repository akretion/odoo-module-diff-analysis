PR: https://github.com/odoo/odoo/pull/83765

From: fc9e67bc6b793682389a633f55fb2bde5f3ddd4b
From: Didier (did)
Date: 2022-03-21 13:59:42

Structural Changes: 3
Total Changes: 57

[IMP] mail: move message unread counter to channel

The field could have been removed from thread since https://github.com/odoo/odoo/commit/88b8cd058713bfad2942f7e7434c34b6c1a6e7da

task-2746109

closes odoo/odoo#83765

Related: odoo/upgrade#3222
Signed-off-by: SÃ©bastien Theys (seb) <seb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_channel.py
+++ b/addons/mail/models/mail_channel.py
@@ -770,11 +770,10 @@ class Channel(models.Model):
             # find the channel partner state, if logged user
             if self.env.user and self.env.user.partner_id:
                 info['message_needaction_counter'] = channel.message_needaction_counter
-                info['message_unread_counter'] = channel.message_unread_counter
-                partner_channel = member_of_current_user_by_channel.get(channel, self.env['mail.channel.partner'])
+                partner_channel = member_of_current_user_by_channel.get(channel, self.env['mail.channel.partner']).with_prefetch([m.id for m in member_of_current_user_by_channel.values()])
                 if partner_channel:
-                    partner_channel = partner_channel[0]
                     info['state'] = partner_channel.fold_state or 'open'
+                    info['message_unread_counter'] = partner_channel.message_unread_counter
                     info['is_minimized'] = partner_channel.is_minimized
                     info['seen_message_id'] = partner_channel.seen_message_id.id
                     info['custom_channel_name'] = partner_channel.custom_channel_name

--- a/addons/mail/models/mail_channel_partner.py
+++ b/addons/mail/models/mail_channel_partner.py
@@ -23,6 +23,7 @@ class ChannelPartner(models.Model):
     custom_channel_name = fields.Char('Custom channel name')
     fetched_message_id = fields.Many2one('mail.message', string='Last Fetched')
     seen_message_id = fields.Many2one('mail.message', string='Last Seen')
+    message_unread_counter = fields.Integer('Unread Messages Counter', compute='_compute_message_unread', compute_sudo=True, help='Number of unread messages')
     fold_state = fields.Selection([('open', 'Open'), ('folded', 'Folded'), ('closed', 'Closed')], string='Conversation Fold State', default='open')
     is_minimized = fields.Boolean("Conversation is minimized")
     is_pinned = fields.Boolean("Is pinned on the interface", default=True)
@@ -31,6 +32,28 @@ class ChannelPartner(models.Model):
     rtc_session_ids = fields.One2many(string="RTC Sessions", comodel_name='mail.channel.rtc.session', inverse_name='channel_partner_id')
     rtc_inviting_session_id = fields.Many2one('mail.channel.rtc.session', string='Ringing session')
 
+    @api.depends('channel_id.message_ids', 'seen_message_id')
+    def _compute_message_unread(self):
+        self.flush()
+        self.env.cr.execute("""
+                 SELECT count(mail_message.id) AS count,
+                        mail_channel_partner.id
+                   FROM mail_message
+             INNER JOIN mail_channel_partner
+                     ON mail_channel_partner.channel_id = mail_message.res_id
+                  WHERE mail_message.model = 'mail.channel'
+                    AND mail_message.message_type NOT IN ('notification', 'user_notification')
+                    AND (
+                        mail_message.id > mail_channel_partner.seen_message_id
+                     OR mail_channel_partner.seen_message_id IS NULL
+                    )
+                    AND mail_channel_partner.id IN %(ids)s
+               GROUP BY mail_channel_partner.id
+        """, {'ids': tuple(self.ids)})
+        unread_counter_by_channel_partner = {res['id']: res['count'] for res in self.env.cr.dictfetchall()}
+        for channel_partner in self:
+            channel_partner.message_unread_counter = unread_counter_by_channel_partner.get(channel_partner.id)
+
     def name_get(self):
         return [(record.id, record.partner_id.name or record.guest_id.name) for record in self]
 

--- a/addons/mail/models/mail_message.py
+++ b/addons/mail/models/mail_message.py
@@ -1088,8 +1088,6 @@ class Message(models.Model):
             if issubclass(self.pool[model], self.pool['mail.thread']):
                 self.env[model].invalidate_cache(fnames=[
                     'message_ids',
-                    'message_unread',
-                    'message_unread_counter',
                     'message_needaction',
                     'message_needaction_counter',
                 ], ids=[res_id])

--- a/addons/mail/models/mail_thread.py
+++ b/addons/mail/models/mail_thread.py
@@ -89,12 +89,6 @@ class MailThread(models.AbstractModel):
         'mail.message', 'res_id', string='Messages',
         domain=lambda self: [('message_type', '!=', 'user_notification')], auto_join=True)
     has_message = fields.Boolean(compute="_compute_has_message", search="_search_has_message", store=False)
-    message_unread = fields.Boolean(
-        'Unread Messages', compute='_compute_message_unread',
-        help="If checked, new messages require your attention.")
-    message_unread_counter = fields.Integer(
-        'Unread Messages Counter', compute='_compute_message_unread',
-        help="Number of unread messages")
     message_needaction = fields.Boolean(
         'Action Needed',
         compute='_compute_message_needaction', search='_search_message_needaction',
@@ -176,27 +170,6 @@ class MailThread(models.AbstractModel):
             operator_new = 'not inselect'
         return [('id', operator_new, ("SELECT res_id FROM mail_message WHERE model=%s", [self._name]))]
 
-    def _compute_message_unread(self):
-        partner_id = self.env.user.partner_id.id
-        res = dict.fromkeys(self.ids, 0)
-        if self.ids:
-            # search for unread messages, directly in SQL to improve performances
-            self._cr.execute(""" SELECT msg.res_id FROM mail_message msg
-                                 RIGHT JOIN mail_channel_partner cp
-                                 ON (cp.channel_id = msg.res_id AND cp.partner_id = %s AND
-                                    (cp.seen_message_id IS NULL OR cp.seen_message_id < msg.id))
-                                 WHERE msg.model = %s AND msg.res_id = ANY(%s) AND
-                                        msg.message_type != 'user_notification' AND
-                                       (msg.author_id IS NULL OR msg.author_id != %s) AND
-                                       (msg.message_type not in ('notification', 'user_notification') OR msg.model != 'mail.channel')""",
-                             (partner_id, self._name, list(self.ids), partner_id,))
-            for result in self._cr.fetchall():
-                res[result[0]] += 1
-
-        for record in self:
-            record.message_unread_counter = res.get(record._origin.id, 0)
-            record.message_unread = bool(record.message_unread_counter)
-
     def _compute_message_needaction(self):
         res = dict.fromkeys(self.ids, 0)
         if self.ids:
