PR: https://github.com/odoo/odoo/pull/

From: c02982b4c46c107008d3bedc73e45248d8067b90
From: Thibault Delavall√©e
Date: 2015-08-21 10:11:56

Structural Changes: 10
Total Changes: 156

[REF] mail: mail_channel update

Some features from live_chat have been moved to the mail module :
- channels now have members, replacing followers;
- a decorated m2m is used to link channels and members. It stores the last
seen message on the channel for a specific partner;
- channels do not create menu entries anymore, because the
NewChatter will have its own display and use of channels;
- access rights have been updated accordingly, using members instead of
followers

================================= pseudo patch: =================================

--- a/addons/mail/models/__init__.py
+++ b/addons/mail/models/__init__.py
@@ -13,7 +13,6 @@ import mail_template
 import res_partner
 import res_users
 import res_config
-import ir_ui_menu
 import update
 import ir_actions
 import html2text
\ No newline at end of file

--- a/addons/mail/models/ir_ui_menu.py
+++ b/None
@@ -1,36 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from openerp import api, fields, models
-
-
-class IrUiMenu(models.Model):
-    """ Override of ir.ui.menu class. When adding mail_thread module, each
-        new mail.channel will create a menu entry. This overrides checks that
-        the current user is in the mail.channel followers. If not, the menu
-        entry is taken off the list of menu ids. This way the user will see
-        menu entries for the mail.channel he is following.
-    """
-    _inherit = 'ir.ui.menu'
-
-    mail_channel_id = fields.Many2one('mail.channel', 'Mail Group')
-
-    def search(self, cr, uid, args, offset=0, limit=None, order=None, context=None, count=False):
-        """ Remove mail.channel menu entries when the user is not a follower."""
-        ids = super(IrUiMenu, self).search(cr, uid, args, offset=offset,
-                                           limit=limit, order=order,
-                                           context=context, count=False)
-        if ids:
-            cr.execute("""
-                SELECT id FROM ir_ui_menu m
-                WHERE m.mail_channel_id IS NULL OR EXISTS (
-                        SELECT 1 FROM mail_followers
-                        WHERE res_model = 'mail.channel' AND res_id = m.mail_channel_id
-                            AND partner_id = (SELECT partner_id FROM res_users WHERE id = %s)
-                        ) AND id in %s
-                """, (uid, tuple(ids)))
-            # Preserve original search order
-            visible_ids = set(x[0] for x in cr.fetchall())
-            ids = [i for i in ids if i in visible_ids]
-        if count:
-            return len(ids)
-        return ids

--- a/addons/mail/models/mail_channel.py
+++ b/addons/mail/models/mail_channel.py
@@ -1,13 +1,25 @@
 # -*- coding: utf-8 -*-
 
+import uuid
+
 from openerp import _, api, fields, models, modules, tools
 from openerp.exceptions import UserError
 
 
-class MailGroup(models.Model):
-    """ A mail.channel is a collection of users sharing messages in a discussion
-        group. The group mechanics are based on the followers. """
-    _description = 'Discussion group'
+class ChannelPartner(models.Model):
+    _name = 'mail.channel.partner'
+    _description = 'Last Seen Many2many'
+    _rec_name = 'partner_id'
+
+    partner_id = fields.Many2one('res.partner', string='Recipient')
+    channel_id = fields.Many2one('mail.channel', string='Channel')
+    seen_datetime = fields.Datetime('Last Seen Datetime')
+
+
+class Channel(models.Model):
+    """ A mail.channel is a discussion group that may behave like a listener
+    on documents. """
+    _description = 'Discussion channel'
     _name = 'mail.channel'
     _mail_flat_thread = False
     _mail_post_access = 'read'
@@ -19,8 +31,18 @@ class MailGroup(models.Model):
         return tools.image_resize_image_big(open(image_path, 'rb').read().encode('base64'))
 
     name = fields.Char('Name', required=True, translate=True)
+    channel_type = fields.Selection([
+        ('chat', 'Chat Discussion'),
+        ('channel', 'Channel')],
+        'Channel Type', default='channel')
     description = fields.Text('Description')
-    menu_id = fields.Many2one('ir.ui.menu', string='Related Menu', required=True, ondelete="cascade")
+    uuid = fields.Char('UUID', size=50, select=True, default=lambda self: '%s' % uuid.uuid4())
+    email_send = fields.Boolean('Email Sent', default=True)  # True for mail.channel
+    # multi users channel
+    channel_last_seen_partner_ids = fields.One2many('mail.channel.partner', 'channel_id', string='Last Seen')
+    channel_partner_ids = fields.Many2many('res.partner', 'mail_channel_partner', 'channel_id', 'partner_id', string='Listeners')
+    channel_message_ids = fields.Many2many('mail.message', 'mail_message_mail_channel_rel')
+    # access
     public = fields.Selection([
         ('public', 'Everyone'),
         ('private', 'Invited people only'),
@@ -63,50 +85,24 @@ class MailGroup(models.Model):
 
     @api.model
     def create(self, vals):
-        # get parent menu
-        menu_parent = self.env.ref('mail.mail_channel_menu_root')
-
-        # Create menu id
-        menu = self.env['ir.ui.menu'].sudo().create({'name': vals['name'], 'parent_id': menu_parent.id})
-        vals['menu_id'] = menu.id
-
-        # Create group and alias
-        group = super(MailGroup, self.with_context(
+        # Create channel and alias
+        channel = super(Channel, self.with_context(
             alias_model_name=self._name, alias_parent_model_name=self._name, mail_create_nolog=True)
         ).create(vals)
-        group.alias_id.write({"alias_force_thread_id": group.id, 'alias_parent_thread_id': group.id})
-
-        # Create action window for this group and link the menu to it
-        inbox_ref = self.env.ref('mail.mail_channel_action_timeline')
-        search_ref = self.env.ref('mail.view_message_search')
-        act_domain = [('model', '=', 'mail.channel'), ('res_id', '=', group.id)]
-        act_context = {'default_model': 'mail.channel',
-                       'default_res_id': group.id,
-                       'options': {'view_mailbox': False,
-                                   'view_inbox': True,
-                                   'read_action': 'read',
-                                   'compose_placeholder': 'Send a message to the group'},
-                        'params': {'header_description': group._get_header(),
-                                   'name': vals['name'],}
-                      }
-        act_res_model = 'mail.message'
-        act_search_view_id = search_ref.id 
-
-        new_action = inbox_ref.sudo().copy(default={'domain': act_domain, 
-                                                    'context': act_context,
-                                                    'res_model': act_res_model,
-                                                    'search_view_id': act_search_view_id,
-                                                    'name': vals['name']})
-        menu.write({'action': 'ir.actions.act_window,%d' % new_action.id, 'mail_channel_id': group.id})
+        channel.alias_id.write({"alias_force_thread_id": channel.id, 'alias_parent_thread_id': channel.id})
 
         if vals.get('group_ids'):
-            group._subscribe_users()
-        return group
+            channel._subscribe_users()
+
+        # make channel listen itself: posting on a channel notifies the channel
+        if not self._context.get('mail_channel_noautofollow'):
+            channel.message_subscribe(channel_ids=[channel.id])
+
+        return channel
 
     @api.multi
     def unlink(self):
         aliases = self.mapped('alias_id')
-        menus = self.mapped('menu_id')
 
         # Delete mail.channel
         try:
@@ -115,59 +111,34 @@ class MailGroup(models.Model):
             all_emp_group = None
         if all_emp_group and all_emp_group in self:
             raise UserError(_('You cannot delete those groups, as the Whole Company group is required by other modules.'))
-        res = super(MailGroup, self).unlink()
+        res = super(Channel, self).unlink()
         # Cascade-delete mail aliases as well, as they should not exist without the mail.channel.
         aliases.sudo().unlink()
-        # Cascade-delete menu entries as well
-        menus.sudo().unlink()
         return res
 
     @api.multi
     def write(self, vals):
-        result = super(MailGroup, self).write(vals)
+        result = super(Channel, self).write(vals)
         if vals.get('group_ids'):
             self._subscribe_users()
-        # if description, name or alias is changed: update action window
-        if vals.get('description') or vals.get('name') or vals.get('alias_id') or vals.get('alias_name'):
-            for group in self:
-                if (vals.get('name')):
-                    group.menu_id.action.sudo().write({'name': vals.get('name')})
-        # if name is changed: update menu
-        if vals.get('name'):
-            self.sudo().mapped('menu_id').write({'name': vals.get('name')})
         return result
 
-    def _get_header(self):
-        self.ensure_one()
-        header = '%(description)s%(gateway)s' % {
-            'description': '%s<br />' % self.description if self.description else '',
-            'gateway': _('Group email gateway: %s@%s') % (self.alias_name, self.alias_domain) if self.alias_name and self.alias_domain else ''
-        }
-        return header
-    # compat
-    _generate_header_description = _get_header
-
     def _subscribe_users(self):
         for mail_channel in self:
-            partner_ids = mail_channel.mapped('group_ids').mapped('users').mapped('partner_id')
-            mail_channel.message_subscribe(partner_ids.ids)
+            mail_channel.write({'channel_partner_ids': [(4, pid) for pid in mail_channel.mapped('group_ids').mapped('users').mapped('partner_id').ids]})
 
     @api.multi
     def action_follow(self):
-        """ Wrapper because message_subscribe_users take a user_ids=None
-            that receive the context without the wrapper. """
-        return self.message_subscribe_users()
+        return self.write({'channel_partner_ids': [(4, self.env.user.partner_id.id)]})
 
     @api.multi
     def action_unfollow(self):
-        """ Wrapper because message_unsubscribe_users take a user_ids=None
-            that receive the context without the wrapper. """
-        return self.message_unsubscribe_users()
+        return self.write({'channel_partner_ids': [(3, self.env.user.partner_id.id)]})
 
     @api.multi
     def message_get_email_values(self, notif_mail=None):
         self.ensure_one()
-        res = super(MailGroup, self).message_get_email_values(notif_mail=notif_mail)
+        res = super(Channel, self).message_get_email_values(notif_mail=notif_mail)
         headers = {}
         if res.get('headers'):
             try:

--- a/addons/mail/models/res_users.py
+++ b/addons/mail/models/res_users.py
@@ -63,7 +63,7 @@ class Users(models.Model):
             # form: {'group_ids': [(3, 10), (3, 3), (4, 10), (4, 3)]} or {'group_ids': [(6, 0, [ids]}
             user_group_ids = [command[1] for command in vals['groups_id'] if command[0] == 4]
             user_group_ids += [id for command in vals['groups_id'] if command[0] == 6 for id in command[2]]
-            self.env['mail.channel'].search([('group_ids', 'in', user_group_ids)]).message_subscribe_users(self._ids)
+            self.env['mail.channel'].search([('group_ids', 'in', user_group_ids)])._subscribe_users()
         return write_res
 
     def copy_data(self, *args, **kwargs):
@@ -148,5 +148,5 @@ class res_groups_mail_channel(models.Model):
             # form: {'group_ids': [(3, 10), (3, 3), (4, 10), (4, 3)]} or {'group_ids': [(6, 0, [ids]}
             user_ids = [command[1] for command in vals['users'] if command[0] == 4]
             user_ids += [id for command in vals['users'] if command[0] == 6 for id in command[2]]
-            self.env['mail.channel'].search([('group_ids', 'in', self._ids)]).message_subscribe_users(user_ids)
+            self.env['mail.channel'].search([('group_ids', 'in', self._ids)])._subscribe_users()
         return write_res
