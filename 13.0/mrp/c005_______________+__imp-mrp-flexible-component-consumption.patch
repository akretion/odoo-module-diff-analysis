PR: https://github.com/odoo/odoo/pull/

From: 291eb73ce109bc1df3100c0a24b0adad7cf8078d
From: William Henrotin
Date: 2019-03-27 15:16:55

Structural Changes: 3
Total Changes: 42

[IMP] mrp: flexible component consumption

Purpose: The quantities to consume on Bill of Material lines should be
either strictly used or be taken as a reference more or less adjustable.

This commit adds a setting on BoM to specify if the consumption is 'strict'
or 'flexible'. This new option has the following impacts:

   On produce wizard: if consumption is set to 'strict', the done quantities
   are prefilled and checked when saving the wizard. If set to 'flexible',
   the production flow remains the same as present one.

   On workorders: if consumption is set to 'strict', the Validate button
   will save the consumed data, and propose to fill the remaining ones until
   the total is registered. If set to 'flexible', two button are displayed.
   'Validate' to register the current component and pass to next step either
   the quantity to consume is complete or not, and 'Continue Consumption'
   to registered the current component quantity but leaving the user the
   possibility to add more quantity (and possibly another lot number) for
   the current component

This commit also revert partially d3617fd852dbe471ca667f8cf3573a9327d6b064
as the warning become some sort of an error

Task: 1889393

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_abstract_workorder.py
+++ b/addons/mrp/models/mrp_abstract_workorder.py
@@ -19,6 +19,11 @@ class MrpAbstractWorkorder(models.AbstractModel):
     product_uom_id = fields.Many2one('uom.uom', 'Unit of Measure', required=True, readonly=True)
     final_lot_id = fields.Many2one('stock.production.lot', string='Lot/Serial Number', domain="[('product_id', '=', product_id)]")
     product_tracking = fields.Selection(related="product_id.tracking")
+    consumption = fields.Selection([
+        ('strict', 'Strict'),
+        ('flexible', 'Flexible')],
+        required=True,
+    )
 
     @api.onchange('qty_producing')
     def _onchange_qty_producing(self):
@@ -217,6 +222,8 @@ class MrpAbstractWorkorder(models.AbstractModel):
     def _update_raw_moves(self):
         """ Once the production is done, the lots written on workorder lines
         are saved on stock move lines"""
+        # Before writting produce quantities, we ensure they respect the bom strictness
+        self._strict_consumption_check()
         vals_list = []
         workorder_lines_to_process = self.workorder_line_ids.filtered(lambda line: line.qty_done > 0)
         for line in workorder_lines_to_process:
@@ -227,6 +234,16 @@ class MrpAbstractWorkorder(models.AbstractModel):
         self.workorder_line_ids.unlink()
         self.env['stock.move.line'].create(vals_list)
 
+    def _strict_consumption_check(self):
+        if self.consumption == 'strict':
+            for move in self.move_raw_ids:
+                lines = self.workorder_line_ids.filtered(lambda l: l.move_id == move)
+                qty_done = sum(lines.mapped('qty_done'))
+                qty_to_consume = sum(lines.mapped('qty_to_consume'))
+                rounding = self.product_uom_id.rounding
+                if float_compare(qty_done, qty_to_consume, precision_rounding=rounding) != 0:
+                    raise UserError(_('You should consume the quantity of %s defined in the BoM. If you want to consume more or less components, change the consumption setting on the BoM.') % lines[0].product_id.name)
+
 
 class MrpAbstractWorkorderLine(models.AbstractModel):
     _name = "mrp.abstract.workorder.line"

--- a/addons/mrp/models/mrp_bom.py
+++ b/addons/mrp/models/mrp_bom.py
@@ -61,6 +61,13 @@ class MrpBom(models.Model):
         'res.company', 'Company',
         default=lambda self: self.env['res.company']._company_default_get('mrp.bom'),
         required=True)
+    consumption = fields.Selection([
+        ('strict', 'Strict'),
+        ('flexible', 'Flexible')],
+        help="Defines if you can consume more or less components than the quantity defined on the BoM.",
+        default='strict',
+        string='Consumption'
+    )
 
     @api.onchange('product_id')
     def onchange_product_id(self):

--- a/addons/mrp/models/mrp_production.py
+++ b/addons/mrp/models/mrp_production.py
@@ -177,10 +177,6 @@ class MrpProduction(models.Model):
     post_visible = fields.Boolean(
         'Allowed to Post Inventory', compute='_compute_post_visible',
         help='Technical field to check when we can post')
-    consumed_less_than_planned = fields.Boolean(
-        compute='_compute_consumed_less_than_planned',
-        help='Technical field used to see if we have to display a warning or not when confirming an order.')
-
     user_id = fields.Many2one('res.users', 'Responsible', default=lambda self: self._uid)
     company_id = fields.Many2one(
         'res.company', 'Company',
@@ -340,19 +336,6 @@ class MrpProduction(models.Model):
             else:
                 order.post_visible = order.is_locked and any((x.quantity_done > 0 and x.state not in ['done', 'cancel']) for x in order.move_finished_ids)
 
-    @api.multi
-    @api.depends('move_raw_ids.quantity_done', 'move_raw_ids.product_uom_qty')
-    def _compute_consumed_less_than_planned(self):
-        """ Display a warning to the user if a component of the BoM has less
-        quantity than planned.
-        """
-        for order in self:
-            order.consumed_less_than_planned = any(order.move_raw_ids.filtered(
-                lambda move: float_compare(move.quantity_done,
-                                           move.product_uom_qty,
-                                           precision_rounding=move.product_uom.rounding) == -1)
-            )
-
     @api.multi
     @api.depends('workorder_ids.state', 'move_finished_ids', 'move_finished_ids.quantity_done', 'is_locked')
     def _get_produced_qty(self):
@@ -740,6 +723,7 @@ class MrpProduction(models.Model):
                 'state': len(workorders) == 0 and 'ready' or 'pending',
                 'qty_producing': quantity,
                 'capacity': operation.workcenter_id.capacity,
+                'consumption': self.bom_id.consumption,
             })
             if workorders:
                 workorders[-1].next_work_order_id = workorder.id
