PR: https://github.com/odoo/odoo/pull/

From: a35df8d37170790257876a54aa54f2c3ab596c44
From: Darshil Trivedi
Date: 2018-07-19 12:43:08

Structural Changes: 1
Total Changes: 37

[IMP] stock: merge push and pull rules

Usability improvement:
- Common view for push and pull rules
- Add an help text in order to describe the rule
- Rules menu
- Warehouse checked by default on route created by a warehouse
- Lower the MTO route sequence in order to take it first.
- Tooltip cleaning

Technical improvement:
The purpose of this task was also to merge stock.location.path(push rule) and
procrement.rule. Those two model were design to execute the same task
but in a different direction. Thus it contains duplicate code.

Task ID 1852969.

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_production.py
+++ b/addons/mrp/models/mrp_production.py
@@ -431,7 +431,7 @@ class MrpProduction(models.Model):
             routes = product.route_ids + product.route_from_categ_ids
             # TODO: optimize with read_group?
             pull = self.env['procurement.rule'].search([('route_id', 'in', [x.id for x in routes]), ('location_src_id', '=', move.location_id.id),
-                                                        ('location_id', '=', move.location_dest_id.id)], limit=1)
+                                                        ('location_id', '=', move.location_dest_id.id), ('action', '!=', 'push')], limit=1)
             if pull and (pull.procure_method == 'make_to_order'):
                 move.procure_method = pull.procure_method
             elif not pull: # If there is no make_to_stock rule either

--- a/addons/mrp/models/procurement.py
+++ b/addons/mrp/models/procurement.py
@@ -11,6 +11,24 @@ class ProcurementRule(models.Model):
     _inherit = 'procurement.rule'
     action = fields.Selection(selection_add=[('manufacture', 'Manufacture')])
 
+    def _get_message_dict(self):
+        message_dict = super(ProcurementRule, self)._get_message_dict()
+        source, destination, operation = self._get_message_values()
+        manufacture_message = _('When products are needed in <b>%s</b>, <br/> a manufacturing order is created to fulfill the need.') % (destination)
+        if self.location_src_id:
+            manufacture_message += _(' <br/><br/> The components will be taken from <b>%s</b>.') % (source)
+        message_dict.update({
+            'manufacture': manufacture_message
+        })
+        return message_dict
+
+    @api.onchange('action')
+    def _onchange_action_operation(self):
+        domain = {'picking_type_id': []}
+        if self.action == 'manufacture':
+            domain = {'picking_type_id': [('code', '=', 'mrp_operation')]}
+        return {'domain': domain}
+
     @api.multi
     def _run_manufacture(self, product_id, product_qty, product_uom, location_id, name, origin, values):
         Production = self.env['mrp.production']
@@ -65,3 +83,8 @@ class ProcurementRule(models.Model):
         date_planned = format_date_planned - relativedelta(days=product_id.produce_delay or 0.0)
         date_planned = date_planned - relativedelta(days=values['company_id'].manufacturing_lead)
         return date_planned
+
+    def _push_prepare_move_copy_values(self, move_to_copy, new_date):
+        new_move_vals = super(ProcurementRule, self)._push_prepare_move_copy_values(move_to_copy, new_date)
+        new_move_vals['production_id'] = False
+        return new_move_vals

--- a/addons/mrp/models/stock_move.py
+++ b/addons/mrp/models/stock_move.py
@@ -263,11 +263,3 @@ class StockMove(models.Model):
                 return super(StockMove, self)._get_upstream_documents_and_responsibles(visited)
 
 
-class PushedFlow(models.Model):
-    _inherit = "stock.location.path"
-
-    def _prepare_move_copy_values(self, move_to_copy, new_date):
-        new_move_vals = super(PushedFlow, self)._prepare_move_copy_values(move_to_copy, new_date)
-        new_move_vals['production_id'] = False
-
-        return new_move_vals

--- a/addons/mrp/models/stock_warehouse.py
+++ b/addons/mrp/models/stock_warehouse.py
@@ -25,7 +25,7 @@ class StockWarehouse(models.Model):
     def get_routes_dict(self):
         result = super(StockWarehouse, self).get_routes_dict()
         for warehouse in self:
-            result[warehouse.id]['manufacture'] = [self.Routing(warehouse.lot_stock_id, warehouse.lot_stock_id, warehouse.int_type_id)]
+            result[warehouse.id]['manufacture'] = [self.Routing(warehouse.lot_stock_id, warehouse.lot_stock_id, warehouse.int_type_id, 'manufacture')]
         return result
 
     def _get_manufacture_route_id(self):
@@ -39,7 +39,7 @@ class StockWarehouse(models.Model):
     def _get_manufacture_pull_rules_values(self, route_values):
         if not self.manu_type_id:
             self._create_manufacturing_picking_type()
-        dummy, pull_rules_list = self._get_push_pull_rules_values(route_values, pull_values={
+        pull_rules_list = self._get_rule_values(route_values, values={
             'name': self._format_routename(_(' Manufacture')),
             'location_src_id': False,  # TDE FIXME
             'action': 'manufacture',
