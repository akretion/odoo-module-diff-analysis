PR: https://github.com/odoo/odoo/pull/

From: d09d5c2e8af1b5c00b84c8961d8024e5cbfe76d3
From: RomainLibert
Date: 2019-05-31 08:21:20

Breaking data model changes scores: del:2 + add:1, change matches:
-    _inherit = "hr.employee"
-    child_all_count = fields.Integer(
+    subordinate_ids = fields.One2many('hr.employee.public', string='Subordinates', compute='_compute_subordinates', help="Direct and indirect subordinates")

Total Changes: 81

[IMP] hr_org_chart: Adapt module with new hr.employee.public model

================================= pseudo patch: =================================

--- a/addons/hr_org_chart/models/__init__.py
+++ b/addons/hr_org_chart/models/__init__.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from . import hr_org_chart_mixin
 from . import hr_employee

--- a/addons/hr_org_chart/models/hr_employee.py
+++ b/addons/hr_org_chart/models/hr_employee.py
@@ -1,43 +1,16 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models
+from odoo import fields, models
 
-class Employee(models.Model):
-    _name = "hr.employee"
-    _inherit = "hr.employee"
-
-    child_all_count = fields.Integer(
-        'Indirect Surbordinates Count',
-        compute='_compute_subordinates', store=False)
-
-    subordinate_ids = fields.One2many('hr.employee', string='Subordinates', compute='_compute_subordinates', help="Direct and indirect subordinates", groups='base.group_user')
 
+class Employee(models.Model):
+    _inherit = ["hr.employee"]
 
-    def _get_subordinates(self, parents=None):
-        """
-        Helper function to compute subordinates_ids.
-        Get all subordinates (direct and indirect) of an employee.
-        An employee can be a manager of his own manager (recursive hierarchy; e.g. the CEO is manager of everyone but is also
-        member of the RD department, managed by the CTO itself managed by the CEO).
-        In that case, the manager in not counted as a subordinate if it's in the 'parents' set.
-        """
-
-        if not parents:
-            parents = self.env['hr.employee']
+    subordinate_ids = fields.One2many('hr.employee', string='Subordinates', compute='_compute_subordinates', help="Direct and indirect subordinates")
 
-        indirect_subordinates = self.env['hr.employee']
-        parents |= self
-        direct_subordinates = self.child_ids - parents
-        for child in direct_subordinates:
-            child_subordinate = child._get_subordinates(parents=parents)
-            child.subordinate_ids = child_subordinate
-            indirect_subordinates |= child_subordinate
-        return indirect_subordinates | direct_subordinates
 
+class HrEmployeePublic(models.Model):
+    _inherit = ["hr.employee.public"]
 
-    @api.depends('child_ids', 'child_ids.child_all_count')
-    def _compute_subordinates(self):
-        for employee in self:
-            employee.subordinate_ids = employee._get_subordinates()
-            employee.child_all_count = len(employee.subordinate_ids)
+    subordinate_ids = fields.One2many('hr.employee.public', string='Subordinates', compute='_compute_subordinates', help="Direct and indirect subordinates")

--- a/None
+++ b/addons/hr_org_chart/models/hr_org_chart_mixin.py
@@ -0,0 +1,39 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class HrEmployeeBase(models.AbstractModel):
+    _inherit = "hr.employee.base"
+
+    child_all_count = fields.Integer(
+        'Indirect Surbordinates Count',
+        compute='_compute_subordinates', store=False)
+
+    def _get_subordinates(self, parents=None):
+        """
+        Helper function to compute subordinates_ids.
+        Get all subordinates (direct and indirect) of an employee.
+        An employee can be a manager of his own manager (recursive hierarchy; e.g. the CEO is manager of everyone but is also
+        member of the RD department, managed by the CTO itself managed by the CEO).
+        In that case, the manager in not counted as a subordinate if it's in the 'parents' set.
+        """
+        if not parents:
+            parents = self.env[self._name]
+
+        indirect_subordinates = self.env[self._name]
+        parents |= self
+        direct_subordinates = self.child_ids - parents
+        for child in direct_subordinates:
+            child_subordinate = child._get_subordinates(parents=parents)
+            child.subordinate_ids = child_subordinate
+            indirect_subordinates |= child_subordinate
+        return indirect_subordinates | direct_subordinates
+
+
+    @api.depends('child_ids', 'child_ids.child_all_count')
+    def _compute_subordinates(self):
+        for employee in self:
+            employee.subordinate_ids = employee._get_subordinates()
+            employee.child_all_count = len(employee.subordinate_ids)
