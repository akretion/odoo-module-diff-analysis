PR: https://github.com/odoo/odoo/pull/141078

From: e64737430d7c3cb7a557c6dc361446f841346d57
From: Abderraouf Ghrissi (abgh)
Date: 2023-11-06 17:43:46

Structural Changes: 1
Total Changes: 66

[FIX] project_timesheet_holidays: generate timesheets from leaves

Description of the bug:
timesheets are not being generated when validating time off

Steps to reproduce:
- activate Time Off setting
- timeoff type form: choose a project and a task
- create and validate a leave request with the type modified in
previous step
- no timesheets added

Source:
in task 3279188, leave validation function was replaced from
_timesheet_create_lines to _validate_leave_request, this one
checks if the company of the selected project of the leave type is
equal to the company of the type or env.company.
if not, we don't generate timesheets even if the project/task are set.

Solution:
leave type form:
- generate timesheets have a True default value
- in the absence of a company, we display the 'generate timesheets'
(in debug mode) and hide the project/task fields.
=> when the company is removed, project/task will be removed thanks
to the compute method, you can only change them manually if the company
is set.

When generating timesheets from leave validation, we refer to the project/task
set in the company of the employee if no company is set in the leave type.

task-3576751

closes odoo/odoo#141078

X-original-commit: e9225d52affb1c6132c7a225129d02ba5255f126
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project_timesheet_holidays/models/hr_holidays.py
+++ b/addons/project_timesheet_holidays/models/hr_holidays.py
@@ -9,7 +9,7 @@ class HolidaysType(models.Model):
     _inherit = "hr.leave.type"
 
     timesheet_generate = fields.Boolean(
-        'Generate Timesheet', compute='_compute_timesheet_generate', store=True, readonly=False,
+        'Generate Timesheets', compute='_compute_timesheet_generate', store=True, readonly=False,
         help="If checked, when validating a time off, timesheet will be generated in the Vacation Project of the company.")
     timesheet_project_id = fields.Many2one('project.project', string="Project", domain="[('company_id', '=', company_id)]",
         compute="_compute_timesheet_project_id", store=True, readonly=False)
@@ -23,7 +23,7 @@ class HolidaysType(models.Model):
     @api.depends('timesheet_task_id', 'timesheet_project_id')
     def _compute_timesheet_generate(self):
         for leave_type in self:
-            leave_type.timesheet_generate = leave_type.timesheet_task_id and leave_type.timesheet_project_id
+            leave_type.timesheet_generate = not leave_type.company_id or (leave_type.timesheet_task_id and leave_type.timesheet_project_id)
 
     @api.depends('company_id')
     def _compute_timesheet_project_id(self):
@@ -56,52 +56,60 @@ class Holidays(models.Model):
     timesheet_ids = fields.One2many('account.analytic.line', 'holiday_id', string="Analytic Lines")
 
     def _validate_leave_request(self):
-        """ Timesheet will be generated on leave validation only if a timesheet_project_id and a
-            timesheet_task_id are set on the corresponding leave type. The generated timesheet will
-            be attached to this project/task.
+        """ Timesheet will be generated on leave validation only if timesheet_generate is True
+            If company is set, timesheet_project_id and timesheet_task_id from leave type are
+            used as project_id and task_id.
+            Else, internal_project_id and leave_timesheet_task_id are used.
+            The generated timesheet will be attached to this project/task.
         """
-        holidays = self.filtered(
-            lambda l: l.holiday_type == 'employee' and
-            l.holiday_status_id.timesheet_project_id and
-            l.holiday_status_id.timesheet_task_id and
-            l.holiday_status_id.timesheet_project_id.sudo().company_id == (l.holiday_status_id.company_id or self.env.company))
-
-        # Unlink previous timesheets do avoid doublon (shouldn't happen on the interface but meh)
-        old_timesheets = holidays.sudo().timesheet_ids
-        if old_timesheets:
-            old_timesheets.holiday_id = False
-            old_timesheets.unlink()
+        vals_list = []
+        leave_ids = []
+        for leave in self:
+            if leave.holiday_type != 'employee' or not leave.holiday_status_id.timesheet_generate:
+                continue
 
-        # create the timesheet on the vacation project
-        holidays._timesheet_create_lines()
+            if leave.holiday_status_id.company_id:
+                project, task = leave.holiday_status_id.timesheet_project_id, leave.holiday_status_id.timesheet_task_id
+            else:
+                project, task = leave.employee_id.company_id.internal_project_id, leave.employee_id.company_id.leave_timesheet_task_id
 
-        return super()._validate_leave_request()
+            if not project or not task:
+                continue
 
-    def _timesheet_create_lines(self):
-        vals_list = []
-        for leave in self:
+            leave_ids.append(leave.id)
             if not leave.employee_id:
                 continue
+
             work_hours_data = leave.employee_id.list_work_time_per_day(
                 leave.date_from,
                 leave.date_to)
+
             for index, (day_date, work_hours_count) in enumerate(work_hours_data):
-                vals_list.append(leave._timesheet_prepare_line_values(index, work_hours_data, day_date, work_hours_count))
-        return self.env['account.analytic.line'].sudo().create(vals_list)
+                vals_list.append(leave._timesheet_prepare_line_values(index, work_hours_data, day_date, work_hours_count, project, task))
+
+        # Unlink previous timesheets to avoid doublon (shouldn't happen on the interface but meh)
+        old_timesheets = self.env["account.analytic.line"].sudo().search([('project_id', '!=', False), ('holiday_id', 'in', leave_ids)])
+        if old_timesheets:
+            old_timesheets.holiday_id = False
+            old_timesheets.unlink()
+
+        self.env['account.analytic.line'].sudo().create(vals_list)
+
+        return super()._validate_leave_request()
 
-    def _timesheet_prepare_line_values(self, index, work_hours_data, day_date, work_hours_count):
+    def _timesheet_prepare_line_values(self, index, work_hours_data, day_date, work_hours_count, project, task):
         self.ensure_one()
         return {
             'name': _("Time Off (%s/%s)", index + 1, len(work_hours_data)),
-            'project_id': self.holiday_status_id.timesheet_project_id.id,
-            'task_id': self.holiday_status_id.timesheet_task_id.id,
-            'account_id': self.holiday_status_id.timesheet_project_id.analytic_account_id.id,
+            'project_id': project.id,
+            'task_id': task.id,
+            'account_id': project.sudo().analytic_account_id.id,
             'unit_amount': work_hours_count,
             'user_id': self.employee_id.user_id.id,
             'date': day_date,
             'holiday_id': self.id,
             'employee_id': self.employee_id.id,
-            'company_id': self.holiday_status_id.timesheet_task_id.company_id.id or self.holiday_status_id.timesheet_project_id.company_id.id,
+            'company_id': task.sudo().company_id.id or project.sudo().company_id.id,
         }
 
     def action_refuse(self):
