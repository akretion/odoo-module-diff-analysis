PR: https://github.com/odoo/odoo/pull/75862

From: 3d7b9bbf27298dc7f2f7e61a13120988f9bd422a
From: wan
Date: 2021-09-07 15:50:02

Structural Changes: 3.9
Total Changes: 35

[IMP] {website_,}event_booth_sale: remove is_event_booth from product

This is now a type of product.

task-2605931

closes odoo/odoo#75862

Related: odoo/enterprise#20555
Related: odoo/upgrade#2797
Signed-off-by: Quentin De Paoli (qdp) <qdp@openerp.com>

================================= pseudo patch: =================================

--- a/addons/event_booth_sale/models/event_booth_category.py
+++ b/addons/event_booth_sale/models/event_booth_category.py
@@ -16,7 +16,7 @@ class EventBoothCategory(models.Model):
 
     product_id = fields.Many2one(
         'product.product', string='Product', required=True,
-        domain=[('is_event_booth', '=', True)], default=_default_product_id)
+        domain=[('detailed_type', '=', 'event_booth')], default=_default_product_id)
     price = fields.Float(string='Price', compute='_compute_price', digits='Product Price', readonly=False, store=True)
     price_reduce = fields.Float(
         string='Price Reduce', compute='_compute_price_reduce',
@@ -68,8 +68,7 @@ class EventBoothCategory(models.Model):
                 'categ_id': self.env.ref('event_sale.product_category_events').id,
                 'list_price': 100,
                 'standard_price': 0,
-                'is_event_booth': True,
-                'type': 'service',
+                'detailed_type': 'event_booth',
                 'invoice_policy': 'order',
             }).id
             self.env['ir.model.data'].create({

--- a/addons/event_booth_sale/models/product.py
+++ b/addons/event_booth_sale/models/product.py
@@ -7,20 +7,25 @@ from odoo import api, fields, models
 class ProductTemplate(models.Model):
     _inherit = 'product.template'
 
-    is_event_booth = fields.Boolean(string='Is an Event Booth')
+    detailed_type = fields.Selection(selection_add=[
+        ('event_booth', 'Event Booth'),
+    ], ondelete={'event_booth': 'set default'})
 
-    @api.onchange('is_event_booth')
-    def _onchange_is_event_booth(self):
-        if self.is_event_booth:
-            self.type = 'service'
+    @api.onchange('detailed_type')
+    def _onchange_type_event_booth(self):
+        if self.detailed_type == 'event_booth':
             self.invoice_policy = 'order'
 
+    def _detailed_type_mapping(self):
+        type_mapping = super()._detailed_type_mapping()
+        type_mapping['event_booth'] = 'service'
+        return type_mapping
+
 
 class Product(models.Model):
     _inherit = 'product.product'
 
-    @api.onchange('is_event_booth')
-    def _onchange_is_event_booth(self):
-        if self.is_event_booth:
-            self.type = 'service'
+    @api.onchange('detailed_type')
+    def _onchange_type_event_booth(self):
+        if self.detailed_type == 'event_booth':
             self.invoice_policy = 'order'

--- a/addons/event_booth_sale/models/sale_order_line.py
+++ b/addons/event_booth_sale/models/sale_order_line.py
@@ -17,7 +17,12 @@ class SaleOrderLine(models.Model):
     event_booth_registration_ids = fields.One2many(
         'event.booth.registration', 'sale_order_line_id', string='Confirmed Registration')
     event_booth_ids = fields.One2many('event.booth', 'sale_order_line_id', string='Confirmed Booths')
-    is_event_booth = fields.Boolean(related='product_id.is_event_booth', readonly=True)
+    is_event_booth = fields.Boolean(compute='_compute_is_event_booth')
+
+    @api.depends('product_id.type')
+    def _compute_is_event_booth(self):
+        for record in self:
+            record.is_event_booth = record.product_id.detailed_type == 'event_booth'
 
     @api.depends('event_booth_ids')
     def _compute_name_short(self):
