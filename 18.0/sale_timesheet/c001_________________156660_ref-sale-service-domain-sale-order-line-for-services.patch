PR: https://github.com/odoo/odoo/pull/156660

From: bd6c71412b4ba87d61e870509cdcfce6909b10a2
From: Victor Piryns (pivi)
Date: 2024-04-12 01:33:11

Structural Changes: 1
Total Changes: 71

[REF] sale_service, *: domain `sale.order.line` for services

Description:
The domain that specifies a `sale.order.line` as a service is
repetitive and always the same.
To avoid incoherence, refactoring it into a separate method.

Reference:
task-3747138

Part-of: odoo/odoo#156660

================================= pseudo patch: =================================

--- a/addons/sale_timesheet/models/hr_timesheet.py
+++ b/addons/sale_timesheet/models/hr_timesheet.py
@@ -25,13 +25,10 @@ class AccountAnalyticLine(models.Model):
     commercial_partner_id = fields.Many2one('res.partner', compute="_compute_commercial_partner")
     timesheet_invoice_id = fields.Many2one('account.move', string="Invoice", readonly=True, copy=False, help="Invoice created from the timesheet", index='btree_not_null')
     so_line = fields.Many2one(compute="_compute_so_line", store=True, readonly=False,
-        domain="""[
+        domain=lambda self: self.env['sale.order.line']._domain_sale_line_service_str("""[
             ('qty_delivered_method', 'in', ['analytic', 'timesheet']),
-            ('order_partner_id.commercial_partner_id', '=', commercial_partner_id),
-            ('is_service', '=', True),
-            ('is_expense', '=', False),
-            ('state', '=', 'sale')
-        ]""",
+            ('order_partner_id.commercial_partner_id', '=', commercial_partner_id)
+        ]""", check_is_downpayment=False),
         help="Sales order item to which the time spent will be added in order to be invoiced to your customer. Remove the sales order item for the timesheet entry to be non-billable.")
     # we needed to store it only in order to be able to groupby in the portal
     order_id = fields.Many2one(related='so_line.order_id', store=True, readonly=True, index=True)

--- a/addons/sale_timesheet/models/project_project.py
+++ b/addons/sale_timesheet/models/project_project.py
@@ -168,14 +168,11 @@ class ProjectProject(models.Model):
         super()._compute_sale_line_id()
         for project in self.filtered(lambda p: not p.sale_line_id and p.partner_id and p.pricing_type == 'employee_rate'):
             # Give a SOL by default either the last SOL with service product and remaining_hours > 0
-            sol = self.env['sale.order.line'].search([
-                ('is_service', '=', True),
-                ('order_partner_id', 'child_of', project.partner_id.commercial_partner_id.id),
-                ('is_expense', '=', False),
-                ('state', '=', 'sale'),
-                ('remaining_hours', '>', 0),
-                ('is_downpayment', '=', False),
-            ], limit=1)
+            SaleOrderLine = self.env['sale.order.line']
+            sol = SaleOrderLine.search(expression.AND([
+                SaleOrderLine._domain_sale_line_service(),
+                [('order_partner_id', 'child_of', project.partner_id.commercial_partner_id.id), ('remaining_hours', '>', 0)],
+            ]), limit=1)
             project.sale_line_id = sol or project.sale_line_employee_ids.sale_line_id[:1]  # get the first SOL containing in the employee mappings if no sol found in the search
 
     @api.depends('sale_line_employee_ids.sale_line_id', 'allow_billable')

--- a/addons/sale_timesheet/models/project_sale_line_employee_map.py
+++ b/addons/sale_timesheet/models/project_sale_line_employee_map.py
@@ -14,12 +14,8 @@ class ProjectProductEmployeeMap(models.Model):
     sale_line_id = fields.Many2one(
         'sale.order.line', "Sales Order Item",
         compute="_compute_sale_line_id", store=True, readonly=False,
-        domain="""[
-            ('is_service', '=', True),
-            ('is_expense', '=', False),
-            ('state', '=', 'sale'),
-            ('order_partner_id', '=?', partner_id),
-            ('is_downpayment', '=', False)]""")
+        domain=lambda self: self.env['sale.order.line']._domain_sale_line_service_str("[('order_partner_id', '=?', partner_id)]")
+    )
     sale_order_id = fields.Many2one(related="project_id.sale_order_id")
     company_id = fields.Many2one('res.company', string='Company', related='project_id.company_id')
     partner_id = fields.Many2one(related='project_id.partner_id')

--- a/addons/sale_timesheet/models/project_task.py
+++ b/addons/sale_timesheet/models/project_task.py
@@ -1,6 +1,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models
+from odoo.osv import expression
 
 
 class ProjectTask(models.Model):
@@ -91,18 +92,18 @@ class ProjectTask(models.Model):
         self.ensure_one()
         if not self.partner_id.commercial_partner_id or not self.allow_billable:
             return False
-        domain = [
-            ('company_id', '=?', self.company_id.id),
-            ('is_service', '=', True),
-            ('order_partner_id', 'child_of', self.partner_id.commercial_partner_id.ids),
-            ('is_expense', '=', False),
-            ('state', '=', 'sale'),
-            ('remaining_hours', '>', 0),
-            ('is_downpayment', '=', False),
-        ]
+        SaleOrderLine = self.env['sale.order.line']
+        domain = expression.AND([
+            SaleOrderLine._domain_sale_line_service(),
+            [
+                ('company_id', '=?', self.company_id.id),
+                ('order_partner_id', 'child_of', self.partner_id.commercial_partner_id.id),
+                ('remaining_hours', '>', 0),
+            ],
+        ])
         if self.project_id.pricing_type != 'task_rate' and self.project_sale_order_id and self.partner_id.commercial_partner_id == self.project_id.partner_id.commercial_partner_id:
-            domain.append(('order_id', '=?', self.project_sale_order_id.id))
-        return self.env['sale.order.line'].search(domain, limit=1)
+            domain = expression.AND([domain, [('order_id', '=?', self.project_sale_order_id.id)]])
+        return SaleOrderLine.search(domain, limit=1)
 
     def _get_timesheet(self):
         # return not invoiced timesheet and timesheet without so_line or so_line linked to task

--- a/addons/sale_timesheet/models/sale_order.py
+++ b/addons/sale_timesheet/models/sale_order.py
@@ -3,6 +3,7 @@
 from collections import defaultdict
 
 from odoo import api, fields, models, _
+from odoo.osv import expression
 from odoo.tools import float_compare
 
 
@@ -70,14 +71,15 @@ class SaleOrder(models.Model):
             order.show_hours_recorded_button = order.timesheet_count or order.project_count and order.id in show_button_ids
 
     def _get_order_with_valid_service_product(self):
-        return self.env['sale.order.line']._read_group([
-            ('order_id', 'in', self.ids),
-            ('state', '=', 'sale'),
-            ('is_service', '=', True),
-            '|',
-                ('product_id.service_type', 'not in', ['milestones', 'manual']),
-                ('product_id.invoice_policy', '!=', 'delivery'),
-        ], aggregates=['order_id:array_agg'])[0][0]
+        SaleOrderLine = self.env['sale.order.line']
+        return SaleOrderLine._read_group(expression.AND([
+            SaleOrderLine._domain_sale_line_service(),
+            [
+                ('order_id', 'in', self.ids),
+                '|', ('product_id.service_type', 'not in', ['milestones', 'manual']),
+                     ('product_id.invoice_policy', '!=', 'delivery'),
+            ]
+        ]), aggregates=['order_id:array_agg'])[0][0]
 
     def _get_prepaid_service_lines_to_upsell(self):
         """ Retrieve all sols which need to display an upsell activity warning in the SO
