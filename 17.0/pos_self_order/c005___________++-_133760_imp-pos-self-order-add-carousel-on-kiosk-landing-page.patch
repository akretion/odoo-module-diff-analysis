PR: https://github.com/odoo/odoo/pull/133760

From: 0bab00cb4f0f56241122d7ad0cb431fe44b13083
From: David Monnom (moda)
Date: 2023-09-05 19:58:07

Structural Changes: 8
Total Changes: 38

[IMP] pos_self_order: add carousel on kiosk landing page

Carousel is a slideshow for cycling through a series of images. It is a
dynamic display of content that can be used to show a rotating series of
pictures, articles, or advertisements.

Following the specifications, the carousel is displayed on the landing
page of the kiosk mode. Images of carousel can be configured from the
settings (ir.attachement).

Used carousel is a bootstrap carousel.

closes odoo/odoo#133760

Taskid: 3484170
Signed-off-by: Adrien Guilliams (adgu) <adgu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_self_order/models/pos_config.py
+++ b/addons/pos_self_order/models/pos_config.py
@@ -69,12 +69,10 @@ class PosConfig(models.Model):
             [("code", "=", self.env.lang)], limit=1
         ),
     )
-    self_order_kiosk_image_home = fields.Image(
-        string="Self Order Kiosk Image Home",
+    self_order_kiosk_image_home_ids = fields.Many2many(
+        'ir.attachment',
+        string="Home Images",
         help="Image to display on the self order screen",
-        max_width=1080,
-        max_height=1920,
-        default=_self_order_default_image,
     )
     self_order_kiosk_image_eat = fields.Image(
         string="Self Order Kiosk Image Eat",
@@ -89,11 +87,6 @@ class PosConfig(models.Model):
         max_width=1200,
         max_height=250,
     )
-    self_order_kiosk_image_home_name = fields.Char(
-        string="Self Order Kiosk Image Home Name",
-        help="Name of the image to display on the self order screen",
-        default=_self_order_default_image_name,
-    )
     self_order_kiosk_image_eat_name = fields.Char(
         string="Self Order Kiosk Image Eat Name",
         help="Name of the image to display on the self order screen",
@@ -163,6 +156,17 @@ class PosConfig(models.Model):
         pos_config_ids = super().create(vals_list)
 
         for pos_config_id in pos_config_ids:
+            for image_name in ['landing_01.jpg', 'landing_02.jpg', 'landing_03.jpg']:
+                image_path = modules.get_module_resource("pos_self_order", "static/img", image_name)
+                attachment = self.env['ir.attachment'].create({
+                    'name': image_name,
+                    'datas': base64.b64encode(file_open(image_path, "rb").read()),
+                    'res_model': 'pos.config',
+                    'res_id': pos_config_id.id,
+                    'type': 'binary',
+                })
+                pos_config_id.self_order_kiosk_image_home_ids = [(4, attachment.id)]
+
             if pos_config_id.module_pos_restaurant:
                 pos_config_id.self_order_view_mode = True
                 pos_config_id.self_order_table_mode = True
@@ -348,7 +352,7 @@ class PosConfig(models.Model):
             "kiosk_mode": self.self_order_kiosk_mode,
             "kiosk_takeaway": self.self_order_kiosk_takeaway,
             "kiosk_alternative_fp": self.self_order_kiosk_alternative_fp_id.id,
-            "kiosk_image_home":  self._get_kiosk_image(self.self_order_kiosk_image_home),
+            "kiosk_image_home":  self._get_kiosk_attachment(self.self_order_kiosk_image_home_ids),
             "kiosk_image_eat": self._get_kiosk_image(self.self_order_kiosk_image_eat),
             "kiosk_image_brand": self._get_kiosk_image(self.self_order_kiosk_image_brand),
             "kiosk_default_language": default_language[0] if default_language else [],
@@ -359,6 +363,15 @@ class PosConfig(models.Model):
         image = Image.open(io.BytesIO(base64.b64decode(image))) if image else False
         return image_to_base64(image, 'PNG').decode('utf-8') if image else False
 
+    def _get_kiosk_attachment(self, images):
+        encoded_images = []
+        for image in images:
+            encoded_images.append({
+                'id': image.id,
+                'data': image.datas.decode('utf-8'),
+            })
+        return encoded_images
+
     def _split_qr_codes_list(self, floors: List[Dict], cols: int) -> List[Dict]:
         """
         :floors: the list of floors

--- a/addons/pos_self_order/models/res_config_settings.py
+++ b/addons/pos_self_order/models/res_config_settings.py
@@ -12,10 +12,9 @@ class ResConfigSettings(models.TransientModel):
     pos_self_order_kiosk_mode = fields.Selection(related="pos_config_id.self_order_kiosk_mode", readonly=False)
     pos_self_order_kiosk_takeaway = fields.Boolean(related="pos_config_id.self_order_kiosk_takeaway", readonly=False)
     pos_self_order_kiosk_alternative_fp_id = fields.Many2one(related="pos_config_id.self_order_kiosk_alternative_fp_id", readonly=False)
-    pos_self_order_kiosk_image_home = fields.Image(related="pos_config_id.self_order_kiosk_image_home", readonly=False)
+    pos_self_order_kiosk_image_home_ids = fields.Many2many(related="pos_config_id.self_order_kiosk_image_home_ids", readonly=False)
     pos_self_order_kiosk_image_eat = fields.Image(related="pos_config_id.self_order_kiosk_image_eat", readonly=False)
     pos_self_order_kiosk_image_brand = fields.Image(related="pos_config_id.self_order_kiosk_image_brand", readonly=False)
-    pos_self_order_kiosk_image_home_name = fields.Char(related="pos_config_id.self_order_kiosk_image_home_name", readonly=False)
     pos_self_order_kiosk_image_eat_name = fields.Char(related="pos_config_id.self_order_kiosk_image_eat_name", readonly=False)
     pos_self_order_kiosk_image_brand_name = fields.Char(related="pos_config_id.self_order_kiosk_image_brand_name", readonly=False)
     pos_self_order_kiosk_available_language_ids = fields.Many2many(related="pos_config_id.self_order_kiosk_available_language_ids", readonly=False)
