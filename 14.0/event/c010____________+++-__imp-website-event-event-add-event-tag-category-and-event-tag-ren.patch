PR: https://github.com/odoo/odoo/pull/

From: 91eded2eb280ddb2dc4acfe92cab5c98a7554fee
From: qmo-odoo
Date: 2020-03-26 14:59:16

Structural Changes: 12
Total Changes: 40

[IMP] website_event, event: Add event.tag.category and event.tag + rename event.type display name

This commit changes the display name for the model event.type from
"Event Category" to "Event Template"

This change was needed before introducing the new model event.tag.category
which will be used to group tags (event.tag)

This commit introduces two new models: event.tag.category & event.tag

The tags will be grouped by category and will be used to filter events.

In the front-end, if the user activates the "filter by categories", each
event.tag.category will generate a new dropdown of related tags.
Clicking on one of these tags will add a new "tag badge" above the events
(same way as in eLearning).

LINKS:

TaskID:2162438
PR: #43856

================================= pseudo patch: =================================

--- a/addons/event/models/__init__.py
+++ b/addons/event/models/__init__.py
@@ -5,6 +5,7 @@ from . import event_event
 from . import event_mail
 from . import event_registration
 from . import event_stage
+from . import event_tag
 from . import event_ticket
 from . import res_config_settings
 from . import res_partner

--- a/addons/event/models/event_event.py
+++ b/addons/event/models/event_event.py
@@ -21,10 +21,10 @@ except ImportError:
 
 class EventType(models.Model):
     _name = 'event.type'
-    _description = 'Event Category'
+    _description = 'Event Template'
     _order = 'sequence, id'
 
-    name = fields.Char('Event Category', required=True, translate=True)
+    name = fields.Char('Event Template', required=True, translate=True)
     sequence = fields.Integer()
     # tickets
     use_ticket = fields.Boolean('Ticketing')
@@ -32,6 +32,7 @@ class EventType(models.Model):
         'event.type.ticket', 'event_type_id',
         string='Tickets', compute='_compute_event_type_ticket_ids',
         readonly=False, store=True)
+    tag_ids = fields.Many2many('event.tag', string="Tags", copy=True)
     # registration
     has_seats_limitation = fields.Boolean('Limited Seats')
     seats_max = fields.Integer(
@@ -91,7 +92,6 @@ class EventType(models.Model):
             if not template.has_seats_limitation:
                 template.seats_max = 0
 
-
 class EventEvent(models.Model):
     """Event"""
     _name = 'event.event'
@@ -118,11 +118,13 @@ class EventEvent(models.Model):
         'res.partner', string='Organizer', tracking=True,
         default=lambda self: self.env.company.partner_id,
         domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
-    event_type_id = fields.Many2one('event.type', string='Category', ondelete='set null')
+    event_type_id = fields.Many2one('event.type', string='Template', ondelete='set null')
     color = fields.Integer('Kanban Color Index')
     event_mail_ids = fields.One2many(
         'event.mail', 'event_id', string='Mail Schedule', copy=True,
         compute='_compute_from_event_type', readonly=False, store=True)
+    tag_ids = fields.Many2many('event.tag', string="Tags", readonly=False,
+        copy=True, store=True, compute="_compute_from_event_type")
     # Kanban fields
     kanban_state = fields.Selection([('normal', 'In Progress'), ('done', 'Done'), ('blocked', 'Blocked')], default='normal')
     kanban_state_label = fields.Char(
@@ -379,6 +381,9 @@ class EventEvent(models.Model):
                         })
                     for line in event.event_type_id.event_type_ticket_ids]
 
+            if event.event_type_id.tag_ids:
+                event.tag_ids = event.event_type_id.tag_ids
+
     @api.constrains('seats_max', 'seats_available', 'seats_availability')
     def _check_seats_limit(self):
         if any(event.seats_availability == 'limited' and event.seats_max and event.seats_available < 0 for event in self):

--- a/None
+++ b/addons/event/models/event_tag.py
@@ -0,0 +1,26 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import _, api, fields, models
+
+
+class EventTagCategory(models.Model):
+    _name = "event.tag.category"
+    _description = "Event Tag Category"
+    _order = "sequence"
+
+    name = fields.Char("Name", required=True, translate=True)
+    sequence = fields.Integer('Sequence', default=0)
+    tag_ids = fields.One2many('event.tag', 'category_id', string="Tags")
+
+class EventTag(models.Model):
+    _name = "event.tag"
+    _description = "Event Tag"
+    _order = "sequence"
+
+    name = fields.Char("Name", required=True, translate=True)
+    sequence = fields.Integer('Sequence', default=0)
+    category_id = fields.Many2one("event.tag.category", string="Category", required=True, ondelete='cascade')
+
+    def name_get(self):
+        return [(tag.id, _("%s: %s" % (tag.category_id.name, tag.name))) for tag in self]
