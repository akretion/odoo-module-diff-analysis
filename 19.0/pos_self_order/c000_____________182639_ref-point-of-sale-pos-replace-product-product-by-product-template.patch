PR: https://github.com/odoo/odoo/pull/182639

From: 5620a16d55091b0ed74feee694a02252e3d13c17
From: David Monnom (moda)
Date: 2024-10-16 07:50:26

Breaking data model changes scores: del:1 + add:0, change matches:
-    _inherit = ["product.product"]

Total Changes: 81

[REF] point_of_sale, pos_*: replace product.product by product.template

Historically, the point of sale module used the product.product model to
represent products cards in PoS. A workaround has been done to handle
variants, attributes and pricelist.

Now the fact that we miss the product.template model in the PoS module
is a blocker for the future of the PoS module. Causing a lot of
performance issues and limitations.

This commit replace the use of product.product as product card by the
product.template model. This will allow us to use the product.template
with pricelist, attributes, variants and other features.

The old product.product models has been proxied to the product.template
each variable that isn't on the product.product model will be taken from
the product.template model.

closes odoo/odoo#182639

Taskid: 4134659
Related: odoo/enterprise#71752
Signed-off-by: Joseph Caburnay (jcb) <jcb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_self_order/models/pos_config.py
+++ b/addons/pos_self_order/models/pos_config.py
@@ -257,10 +257,11 @@ class PosConfig(models.Model):
         return encoded_images
 
     def _load_self_data_models(self):
-        return ['pos.session', 'pos.order', 'pos.order.line', 'pos.payment', 'pos.payment.method', 'res.currency', 'pos.category', 'product.product', 'product.combo', 'product.combo.item',
-            'res.company', 'account.tax', 'account.tax.group', 'pos.printer', 'res.country', 'product.pricelist', 'product.pricelist.item', 'account.fiscal.position', 'account.fiscal.position.tax',
-            'res.lang', 'product.attribute', 'product.attribute.custom.value', 'product.template.attribute.line', 'product.template.attribute.value',
-            'decimal.precision', 'uom.uom', 'pos.printer', 'pos_self_order.custom_link', 'restaurant.floor', 'restaurant.table', 'account.cash.rounding']
+        return ['pos.session', 'pos.order', 'pos.order.line', 'pos.payment', 'pos.payment.method', 'res.currency', 'pos.category', 'product.template', 'product.product',
+            'product.combo', 'product.combo.item', 'res.company', 'account.tax', 'account.tax.group', 'pos.printer', 'res.country', 'product.pricelist',
+            'product.pricelist.item', 'account.fiscal.position', 'account.fiscal.position.tax', 'res.lang', 'product.attribute', 'product.attribute.custom.value',
+            'product.template.attribute.line', 'product.template.attribute.value', 'decimal.precision', 'uom.uom', 'pos.printer', 'pos_self_order.custom_link',
+            'restaurant.floor', 'restaurant.table', 'account.cash.rounding']
 
     def load_self_data(self):
         # Init our first record, in case of self_order is pos_config

--- a/addons/pos_self_order/models/product_product.py
+++ b/addons/pos_self_order/models/product_product.py
@@ -13,41 +13,6 @@ class ProductTemplate(models.Model):
         default=True,
     )
 
-    @api.onchange('available_in_pos')
-    def _on_change_available_in_pos(self):
-        for record in self:
-            if not record.available_in_pos:
-                record.self_order_available = False
-
-    def write(self, vals_list):
-        if 'available_in_pos' in vals_list:
-            if not vals_list['available_in_pos']:
-                vals_list['self_order_available'] = False
-
-        res = super().write(vals_list)
-
-        if 'self_order_available' in vals_list:
-            for record in self:
-                for product in record.product_variant_ids:
-                    product._send_availability_status()
-        return res
-
-
-class ProductProduct(models.Model):
-    _inherit = ["product.product"]
-
-    @api.model
-    def _load_pos_data_fields(self, config_id):
-        params = super()._load_pos_data_fields(config_id)
-        params += ['self_order_available']
-        return params
-
-    @api.model
-    def _load_pos_self_data_fields(self, config_id):
-        params = super()._load_pos_self_data_fields(config_id)
-        params += ['public_description']
-        return params
-
     def _load_pos_self_data(self, data):
         domain = self._load_pos_data_domain(data)
 
@@ -58,7 +23,7 @@ class ProductProduct(models.Model):
         fields = list(fields.union(product_fields))
 
         config = self.env['pos.config'].browse(data['pos.config']['data'][0]['id'])
-        products = self.with_context(display_default_code=False).search_read(
+        products = self.search_read(
             domain,
             fields,
             limit=config.get_limited_product_count(),
@@ -74,6 +39,41 @@ class ProductProduct(models.Model):
             'fields': fields,
         }
 
+    @api.model
+    def _load_pos_self_data_fields(self, config_id):
+        params = super()._load_pos_self_data_fields(config_id)
+        params += ['public_description']
+        return params
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        params = super()._load_pos_data_fields(config_id)
+        params += ['self_order_available']
+        return params
+
+    @api.onchange('available_in_pos')
+    def _on_change_available_in_pos(self):
+        for record in self:
+            if not record.available_in_pos:
+                record.self_order_available = False
+
+    def write(self, vals_list):
+        if 'available_in_pos' in vals_list:
+            if not vals_list['available_in_pos']:
+                vals_list['self_order_available'] = False
+
+        res = super().write(vals_list)
+
+        if 'self_order_available' in vals_list:
+            for record in self:
+                for product in record.product_variant_ids:
+                    product._send_availability_status()
+        return res
+
+
+class ProductProduct(models.Model):
+    _inherit = ["product.product"]
+
     def _filter_applicable_attributes(self, attributes_by_ptal_id: Dict) -> List[Dict]:
         """
         The attributes_by_ptal_id is a dictionary that contains all the attributes that have
