PR: https://github.com/odoo/odoo/pull/68286

From: ab179fb6008500b77aedcdc81d3fe91bc6bed9ba
From: std-odoo
Date: 2021-04-01 14:23:07

Structural Changes: 6
Total Changes: 93

[FIX] mail_plugin: avoid repeating company creation

Purpose
=======
Avoid creating / enriching multiple time the same company.

It can occur in many situation; when IAP do not return an email address
the the company, when the domain is blacklisted...

We also want to remove the field "iap_enrich_info" from the res.partner
model because this field can be heavy (JSON field) and the res.partner
model is used a lot.

Technical
=========
For this purpose, we create a new model <res.partner.iap> which will
store the IAP response and the requested domain.

So we can retrieve the previously enriched company regardless of the
partner's values

Task 2466653
See odoo/odoo/pull/68286
See odoo/upgrade/pull/2301

closes odoo/odoo#68286

Related: odoo/upgrade#2301
Related: odoo/enterprise#17426
Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/mail_plugin/models/__init__.py
+++ b/addons/mail_plugin/models/__init__.py
@@ -3,3 +3,4 @@
 
 from . import ir_http
 from . import res_partner
+from . import res_partner_iap

--- a/addons/mail_plugin/models/res_partner.py
+++ b/addons/mail_plugin/models/res_partner.py
@@ -1,8 +1,69 @@
 # -*- coding: utf-8 -*-
-from odoo import fields, models
+from odoo import api, fields, models
 
 
 class ResPartner(models.Model):
     _inherit = 'res.partner'
 
-    iap_enrich_info = fields.Text('IAP Enrich Info', help='Stores additional info retrieved from IAP in JSON')
+    iap_enrich_info = fields.Text('IAP Enrich Info', help='IAP response stored as a JSON string',
+                                  compute='_compute_partner_iap_info')
+
+    iap_search_domain = fields.Char('Search Domain / Email',
+                                compute='_compute_partner_iap_info')
+
+    def _compute_partner_iap_info(self):
+        partner_iaps = self.env['res.partner.iap'].sudo().search([('partner_id', 'in', self.ids)])
+        partner_iaps_per_partner = {
+            partner_iap.partner_id: partner_iap
+            for partner_iap in partner_iaps
+        }
+
+        for partner in self:
+            partner_iap = partner_iaps_per_partner.get(partner)
+            if partner_iap:
+                partner.iap_enrich_info = partner_iap.iap_enrich_info
+                partner.iap_search_domain = partner_iap.iap_search_domain
+            else:
+                partner.iap_enrich_info = False
+                partner.iap_search_domain = False
+
+    @api.model
+    def create(self, vals):
+        partner = super(ResPartner, self).create(vals)
+
+        if vals.get('iap_enrich_info') or vals.get('iap_search_domain'):
+            # Not done with inverse method so we do not need to search
+            # for existing <res.partner.iap>
+            self.env['res.partner.iap'].sudo().create({
+                'partner_id': partner.id,
+                'iap_enrich_info': vals.get('iap_enrich_info'),
+                'iap_search_domain': vals.get('iap_search_domain'),
+            })
+
+        return partner
+
+    def write(self, vals):
+        super(ResPartner, self).write(vals)
+
+        if 'iap_enrich_info' in vals or 'iap_search_domain' in vals:
+            # Not done with inverse method so we do need to search
+            # for existing <res.partner.iap> only once
+            partner_iaps = self.env['res.partner.iap'].sudo().search([('partner_id', 'in', self.ids)])
+            missing_partners = self
+            for partner_iap in partner_iaps:
+                if 'iap_enrich_info' in vals:
+                    partner_iap.iap_enrich_info = vals['iap_enrich_info']
+                if 'iap_search_domain' in vals:
+                    partner_iap.iap_search_domain = vals['iap_search_domain']
+
+                missing_partners -= partner_iap.partner_id
+
+            if missing_partners:
+                # Create new <res.partner.iap> for missing records
+                self.env['res.partner.iap'].sudo().create([
+                    {
+                        'partner_id': partner.id,
+                        'iap_enrich_info': vals.get('iap_enrich_info'),
+                        'iap_search_domain': vals.get('iap_search_domain'),
+                    } for partner in missing_partners
+                ])

--- a/None
+++ b/addons/mail_plugin/models/res_partner_iap.py
@@ -0,0 +1,27 @@
+# -*- coding: utf-8 -*-
+
+
+from odoo import fields, models
+
+
+class ResPartnerIap(models.Model):
+    """Technical model which stores the response returned by IAP.
+
+    The goal of this model is to not enrich 2 times the same company. We do it in a
+    separate model to not add heavy field (iap_enrich_info) on the <res.partner>
+    model.
+
+    We also save the requested domain, so whatever the values are on the <res.partner>,
+    we will always retrieve the already enriched <res.partner> and the corresponding
+    IAP information.
+    """
+
+    _name = 'res.partner.iap'
+    _description = 'Partner IAP'
+
+    partner_id = fields.Many2one('res.partner', string='Partner', help='Corresponding partner',
+                                 ondelete='cascade', required=True)
+    iap_search_domain = fields.Char('Search Domain / Email', help='Domain used to find the company')
+    iap_enrich_info = fields.Text('IAP Enrich Info', help='IAP response stored as a JSON string', readonly=True)
+
+    _sql_constraints = [('unique_partner_id', 'UNIQUE(partner_id)', 'Only one partner IAP is allowed for one partner')]
