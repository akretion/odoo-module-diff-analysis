PR: https://github.com/odoo/odoo/pull/68349

From: 17610e8ca97b2e5315cc063ee3973f81ab910f5e
From: oco-odoo
Date: 2021-04-01 12:09:20

Structural Changes: 12
Total Changes: 14

[IMP] account, account_edi, l10n_*, purchase, sale: Generalize the use of account_fiscal_country_id

Before, account_fiscal_country_id was only use for tax operations; and country_id was used for all the other accounting stuff. Now, with the new ability to use foreign tax reports (with foreign VAT fiscal positions), we can generalize the fiscal country, sot that it is the one that needs to be used for the whole accounting. Since foreign tax reports were not supported before, account_fiscal_country_id is already set on existing database as the country for the "main" accounting, so the impact of this change is small.

closes odoo/odoo#68349

Related: odoo/upgrade#2322
Related: odoo/enterprise#17299
Signed-off-by: Laurent Smet <smetl@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_bank_statement.py
+++ b/addons/account/models/account_bank_statement.py
@@ -249,7 +249,7 @@ class AccountBankStatement(models.Model):
     is_valid_balance_start = fields.Boolean(string="Is Valid Balance Start", store=True,
         compute="_compute_is_valid_balance_start",
         help="Technical field to display a warning message in case starting balance is different than previous ending balance")
-    country_code = fields.Char(related='company_id.country_id.code')
+    country_code = fields.Char(related='company_id.account_fiscal_country_id.code')
 
     def write(self, values):
         res = super(AccountBankStatement, self).write(values)
@@ -549,7 +549,7 @@ class AccountBankStatementLine(models.Model):
         compute='_compute_is_reconciled',
         help="Technical field indicating if the statement line is already reconciled.")
     state = fields.Selection(related='statement_id.state', string='Status', readonly=True)
-    country_code = fields.Char(related='company_id.country_id.code')
+    country_code = fields.Char(related='company_id.account_fiscal_country_id.code')
 
     # -------------------------------------------------------------------------
     # HELPERS

--- a/addons/account/models/account_journal.py
+++ b/addons/account/models/account_journal.py
@@ -118,7 +118,7 @@ class AccountJournal(models.Model):
     currency_id = fields.Many2one('res.currency', help='The currency used to enter statement', string="Currency")
     company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, index=True, default=lambda self: self.env.company,
         help="Company related to this journal")
-    country_code = fields.Char(related='company_id.country_id.code', readonly=True)
+    country_code = fields.Char(related='company_id.account_fiscal_country_id.code', readonly=True)
 
     refund_sequence = fields.Boolean(string='Dedicated Credit Note Sequence', help="Check this box if you don't want to share the same sequence for invoices and credit notes made from this journal", default=False)
     sequence_override_regex = fields.Text(help="Technical field used to enforce complex sequence composition that the system would normally misunderstand.\n"\

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -184,7 +184,7 @@ class AccountMove(models.Model):
         string='Partner', change_default=True)
     commercial_partner_id = fields.Many2one('res.partner', string='Commercial Entity', store=True, readonly=True,
         compute='_compute_commercial_partner_id')
-    country_code = fields.Char(related='company_id.country_id.code', readonly=True)
+    country_code = fields.Char(related='company_id.account_fiscal_country_id.code', readonly=True)
     user_id = fields.Many2one(string='User', related='invoice_user_id',
         help='Technical field used to fit the generic behavior in mail templates.')
     is_move_sent = fields.Boolean(

--- a/addons/account/models/account_payment.py
+++ b/addons/account/models/account_payment.py
@@ -129,7 +129,7 @@ class AccountPayment(models.Model):
     require_partner_bank_account = fields.Boolean(
         compute='_compute_show_require_partner_bank',
         help="Technical field used to know whether the field `partner_bank_id` needs to be required or not in the payments form views")
-    country_code = fields.Char(related='company_id.country_id.code')
+    country_code = fields.Char(related='company_id.account_fiscal_country_id.code')
 
     _sql_constraints = [
         (

--- a/addons/account/models/partner.py
+++ b/addons/account/models/partner.py
@@ -61,7 +61,7 @@ class AccountFiscalPosition(models.Model):
                     raise ValidationError(_("You cannot create a fiscal position within your fiscal country with the same VAT number as the main one set on your company."))
 
                 if not record.state_ids:
-                    if record.company_id.country_id.state_ids:
+                    if record.company_id.account_fiscal_country_id.state_ids:
                         raise ValidationError(_("You cannot create a fiscal position with a foreign VAT within your fiscal country without assigning it a state."))
                     else:
                         raise ValidationError(_("You cannot create a fiscal position with a foreign VAT within your fiscal country."))

--- a/addons/account/models/res_config_settings.py
+++ b/addons/account/models/res_config_settings.py
@@ -134,7 +134,7 @@ class ResConfigSettings(models.TransientModel):
         config_parameter='account.use_invoice_terms')
 
     # Technical field to hide country specific fields from accounting configuration
-    country_code = fields.Char(related='company_id.country_id.code', readonly=True)
+    country_code = fields.Char(related='company_id.account_fiscal_country_id.code', readonly=True)
 
     def set_values(self):
         super(ResConfigSettings, self).set_values()
