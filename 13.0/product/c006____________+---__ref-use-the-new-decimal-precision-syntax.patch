PR: https://github.com/odoo/odoo/pull/

From: 9d710df076b85ebe0f3db4491676f005c31631fe
From: Mitali Patel
Date: 2019-07-03 11:16:24

Structural Changes: 11
Total Changes: 40

[REF] *: use the new decimal precision syntax

Since previous commit moved decimal_precision module's feature into base,
use the new syntax for fields declaration
Remove the imports to the removed module
Remove the module from dependency in manifest

sed -i "s|digits=dp.get_precision('\([A-Z a-z]*\)')|digits='\1'|" **.py
sed -i "/from odoo.tools import decimal_precision as dp/d" **py

================================= pseudo patch: =================================

--- a/addons/product/models/product.py
+++ b/addons/product/models/product.py
@@ -8,7 +8,6 @@ from odoo import api, fields, models, tools, _
 from odoo.exceptions import ValidationError
 from odoo.osv import expression
 
-from odoo.addons import decimal_precision as dp
 
 from odoo.tools import float_compare
 
@@ -73,16 +72,16 @@ class ProductProduct(models.Model):
     # price: total price, context dependent (partner, pricelist, quantity)
     price = fields.Float(
         'Price', compute='_compute_product_price',
-        digits=dp.get_precision('Product Price'), inverse='_set_product_price')
+        digits='Product Price', inverse='_set_product_price')
     # price_extra: catalog extra value only, sum of variant extra attributes
     price_extra = fields.Float(
         'Variant Price Extra', compute='_compute_product_price_extra',
-        digits=dp.get_precision('Product Price'),
+        digits='Product Price',
         help="This is the sum of the extra price of all attributes")
     # lst_price: catalog value + extra, context dependent (uom)
     lst_price = fields.Float(
         'Public Price', compute='_compute_product_lst_price',
-        digits=dp.get_precision('Product Price'), inverse='_set_product_lst_price',
+        digits='Product Price', inverse='_set_product_lst_price',
         help="The sale price is managed from the product template. Click on the 'Configure Variants' button to set the extra attribute prices.")
 
     default_code = fields.Char('Internal Reference', index=True)
@@ -106,13 +105,13 @@ class ProductProduct(models.Model):
 
     standard_price = fields.Float(
         'Cost', company_dependent=True,
-        digits=dp.get_precision('Product Price'),
+        digits='Product Price',
         groups="base.group_user",
         help = "Cost used for stock valuation in standard price and as a first price to set in average/fifo. "
                "Also used as a base price for pricelists. "
                "Expressed in the default unit of measure of the product.")
     volume = fields.Float('Volume')
-    weight = fields.Float('Weight', digits=dp.get_precision('Stock Weight'))
+    weight = fields.Float('Weight', digits='Stock Weight')
 
     pricelist_item_ids = fields.Many2many(
         'product.pricelist.item', 'Pricelist Items', compute='_get_pricelist_items')
@@ -772,7 +771,7 @@ class SupplierInfo(models.Model):
         'Quantity', default=0.0, required=True,
         help="The quantity to purchase from this vendor to benefit from the price, expressed in the vendor Product Unit of Measure if not any, in the default unit of measure of the product otherwise.")
     price = fields.Float(
-        'Price', default=0.0, digits=dp.get_precision('Product Price'),
+        'Price', default=0.0, digits='Product Price',
         required=True, help="The price to purchase a product")
     company_id = fields.Many2one(
         'res.company', 'Company',

--- a/addons/product/models/product_attribute.py
+++ b/addons/product/models/product_attribute.py
@@ -2,7 +2,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models, _
-from odoo.addons import decimal_precision as dp
 from odoo.exceptions import UserError, ValidationError
 from odoo.osv import expression
 
@@ -243,7 +242,7 @@ class ProductTemplateAttributeValue(models.Model):
     price_extra = fields.Float(
         string='Attribute Price Extra',
         default=0.0,
-        digits=dp.get_precision('Product Price'),
+        digits='Product Price',
         help="""Price Extra: Extra price for the variant with
         this attribute value on sale price. eg. 200 price extra, 1000 + 200 = 1200.""")
     exclude_for = fields.One2many(

--- a/addons/product/models/product_pricelist.py
+++ b/addons/product/models/product_pricelist.py
@@ -6,7 +6,6 @@ from itertools import chain
 from odoo import api, fields, models, tools, _
 from odoo.exceptions import UserError, ValidationError
 
-from odoo.addons import decimal_precision as dp
 
 
 class Pricelist(models.Model):
@@ -424,19 +423,19 @@ class PricelistItem(models.Model):
     base_pricelist_id = fields.Many2one('product.pricelist', 'Other Pricelist')
     pricelist_id = fields.Many2one('product.pricelist', 'Pricelist', index=True, ondelete='cascade')
     price_surcharge = fields.Float(
-        'Price Surcharge', digits=dp.get_precision('Product Price'),
+        'Price Surcharge', digits='Product Price',
         help='Specify the fixed amount to add or substract(if negative) to the amount calculated with the discount.')
     price_discount = fields.Float('Price Discount', default=0, digits=(16, 2))
     price_round = fields.Float(
-        'Price Rounding', digits=dp.get_precision('Product Price'),
+        'Price Rounding', digits='Product Price',
         help="Sets the price so that it is a multiple of this value.\n"
              "Rounding is applied after the discount and before the surcharge.\n"
              "To have prices that end in 9.99, set rounding 10, surcharge -0.01")
     price_min_margin = fields.Float(
-        'Min. Price Margin', digits=dp.get_precision('Product Price'),
+        'Min. Price Margin', digits='Product Price',
         help='Specify the minimum amount of margin over the base price.')
     price_max_margin = fields.Float(
-        'Max. Price Margin', digits=dp.get_precision('Product Price'),
+        'Max. Price Margin', digits='Product Price',
         help='Specify the maximum amount of margin over the base price.')
     company_id = fields.Many2one(
         'res.company', 'Company',
@@ -450,7 +449,7 @@ class PricelistItem(models.Model):
         ('fixed', 'Fix Price'),
         ('percentage', 'Percentage (discount)'),
         ('formula', 'Formula')], index=True, default='fixed')
-    fixed_price = fields.Float('Fixed Price', digits=dp.get_precision('Product Price'))
+    fixed_price = fields.Float('Fixed Price', digits='Product Price')
     percent_price = fields.Float('Percentage Price')
     # functional fields used for usability purposes
     name = fields.Char(

--- a/addons/product/models/product_template.py
+++ b/addons/product/models/product_template.py
@@ -3,7 +3,6 @@
 
 import itertools
 
-from odoo.addons import decimal_precision as dp
 
 from odoo import api, fields, models, tools, _
 from odoo.exceptions import ValidationError, RedirectWarning, UserError
@@ -69,27 +68,27 @@ class ProductTemplate(models.Model):
     # price: total template price, context dependent (partner, pricelist, quantity)
     price = fields.Float(
         'Price', compute='_compute_template_price', inverse='_set_template_price',
-        digits=dp.get_precision('Product Price'))
+        digits='Product Price')
     # list_price: catalog price, user defined
     list_price = fields.Float(
         'Sale Price', default=1.0,
-        digits=dp.get_precision('Product Price'),
+        digits='Product Price',
         help="Price at which the product is sold to customers.")
     # lst_price: catalog price for template, but including extra for variants
     lst_price = fields.Float(
         'Public Price', related='list_price', readonly=False,
-        digits=dp.get_precision('Product Price'))
+        digits='Product Price')
     standard_price = fields.Float(
         'Cost', compute='_compute_standard_price',
         inverse='_set_standard_price', search='_search_standard_price',
-        digits=dp.get_precision('Product Price'), groups="base.group_user",
+        digits='Product Price', groups="base.group_user",
         help = "Cost used for stock valuation in standard price and as a first price to set in average/FIFO.")
 
     volume = fields.Float(
-        'Volume', compute='_compute_volume', inverse='_set_volume', digits=dp.get_precision('Volume'), store=True)
+        'Volume', compute='_compute_volume', inverse='_set_volume', digits='Volume', store=True)
     volume_uom_name = fields.Char(string='Volume unit of measure label', compute='_compute_volume_uom_name', default=_get_default_volume_uom)
     weight = fields.Float(
-        'Weight', compute='_compute_weight', digits=dp.get_precision('Stock Weight'),
+        'Weight', compute='_compute_weight', digits='Stock Weight',
         inverse='_set_weight', store=True)
     weight_uom_name = fields.Char(string='Weight unit of measure label', compute='_compute_weight_uom_name', readonly=True, default=_get_default_weight_uom)
 
