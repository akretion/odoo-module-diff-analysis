PR: https://github.com/odoo/odoo/pull/28567

From: f14092cbfa127ce8367779148b216284235a58e0
From: pha-odoo
Date: 2018-12-07 14:31:56

Breaking data model changes score: 2, change matches:
-    barcode = fields.Char(string="Badge ID", help="ID used for employee identification.", default=_default_random_barcode, copy=False)
-    pin = fields.Char(string="PIN", default=_default_random_pin, help="PIN used to Check In/Out in Kiosk Mode (if enabled in Configuration).", copy=False)

Total Changes: 47

[IMP] point_of_sale: Connect with Employee on PoS

=========
PURPOSE
=========

{Any employee can work on a PoS session, even if he has no user. This decreases the cost of PoS App.}

We are not competitive enough on the PoS Market because customers have to pay one user per cashier while they expect to pay one user per cash station.

===============
SPECIFICATIONS
===============

pos.config
- Add a checkbox : "Login with Employees"
- If set to TRUE, an "Allowed Employees" many2many appear
- If employees many2many is empty, all employees can log on this PoS
- If set to FALSE, can only log in with the currently logged user

hr.employee
- The barcode and pin fields were be moved to the hr.employee
- Set a barcode (not pin) by default at the creation of any employee
- No Employees module with PoS > dependency to hr

Open the PoS if "Log in with Employees" = FALSE
- Same behaviour than now, when I open the PoS, I'm logged in with the current user and can start working at once. The only difference is that it is not possible to switch users anymore.
- The button to close the session is visible

Open he PoS if "Log in with Employees" = TRUE
- When I open the PoS, the first screen I see is the login screen.
(a) I choose my employee and enter my pin code (if there is pin code on my employee, otherwise not required) (I can only see employees that have access to that PoS)
(b) I scan my barcode
(c) I scan my rfid card (future development)
- When I click on the employee name, I can log in with another employee
- If the employee is linked to a user that has the pos user/manager access right, I can see the button the close the session. Otherwise I cannot close the session (and thus cannot access backend).
- Add field employee on all records created by PoS (and replace the field user by that one) (on pos.orders)

Lock Screen
- Improve the PoS Interface
- Add a new feature to allow to "lock" the session. When a session has been locked, the user/employee has to re-log-in to access the PoS
- When I try to re-log-in, by default suggest the last employee logged in in the login screen

Migration
Plan a migration strategy > barcode and pin is now on the employee and not on the user anymore

closes odoo/odoo#28567

================================= pseudo patch: =================================

--- a/addons/hr_attendance/models/hr_employee.py
+++ b/addons/hr_attendance/models/hr_employee.py
@@ -1,9 +1,5 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from random import choice
-from string import digits
-
 from odoo import models, fields, api, exceptions, _, SUPERUSER_ID
 
 
@@ -11,26 +7,12 @@ class HrEmployee(models.Model):
     _inherit = "hr.employee"
     _description = "Employee"
 
-    def _default_random_pin(self):
-        return ("".join(choice(digits) for i in range(4)))
-
-    def _default_random_barcode(self):
-        barcode = None
-        while not barcode or self.env['hr.employee'].search([('barcode', '=', barcode)]):
-            barcode = "".join(choice(digits) for i in range(8))
-        return barcode
-
-    barcode = fields.Char(string="Badge ID", help="ID used for employee identification.", default=_default_random_barcode, copy=False)
-    pin = fields.Char(string="PIN", default=_default_random_pin, help="PIN used to Check In/Out in Kiosk Mode (if enabled in Configuration).", copy=False)
-
     attendance_ids = fields.One2many('hr.attendance', 'employee_id', help='list of attendances for the employee')
     last_attendance_id = fields.Many2one('hr.attendance', compute='_compute_last_attendance_id', store=True)
     attendance_state = fields.Selection(string="Attendance Status", compute='_compute_attendance_state', selection=[('checked_out', "Checked out"), ('checked_in', "Checked in")])
     manual_attendance = fields.Boolean(string='Manual Attendance', compute='_compute_manual_attendance', inverse='_inverse_manual_attendance',
                                        help='The employee will have access to the "My Attendances" menu to check in and out from his session')
 
-    _sql_constraints = [('barcode_uniq', 'unique (barcode)', "The Badge ID must be unique, this one is already assigned to another employee.")]
-
     @api.multi
     def _compute_manual_attendance(self):
         for employee in self:
@@ -59,12 +41,6 @@ class HrEmployee(models.Model):
             att = employee.last_attendance_id.sudo()
             employee.attendance_state = att and not att.check_out and 'checked_in' or 'checked_out'
 
-    @api.constrains('pin')
-    def _verify_pin(self):
-        for employee in self:
-            if employee.pin and not employee.pin.isdigit():
-                raise exceptions.ValidationError(_("The PIN must be a sequence of digits."))
-
     @api.model
     def attendance_scan(self, barcode):
         """ Receive a barcode scanned from the Kiosk Mode and change the attendances of corresponding employee.
@@ -126,26 +102,3 @@ class HrEmployee(models.Model):
                 raise exceptions.UserError(_('Cannot perform check out on %(empl_name)s, could not find corresponding check in. '
                     'Your attendances have probably been modified manually by human resources.') % {'empl_name': self.name, })
             return attendance
-
-    @api.model_cr_context
-    def _init_column(self, column_name):
-        """ Initialize the value of the given column for existing rows.
-            Overridden here because we need to have different default values
-            for barcode and pin for every employee.
-        """
-        if column_name not in ["barcode", "pin"]:
-            super(HrEmployee, self)._init_column(column_name)
-        else:
-            default_compute = self._fields[column_name].default
-
-            query = 'SELECT id FROM "%s" WHERE "%s" is NULL' % (
-                self._table, column_name)
-            self.env.cr.execute(query)
-            employee_ids = self.env.cr.fetchall()
-
-            for employee_id in employee_ids:
-                default_value = default_compute(self)
-
-                query = 'UPDATE "%s" SET "%s"=%%s WHERE id = %s' % (
-                    self._table, column_name, employee_id[0])
-                self.env.cr.execute(query, (default_value,))
