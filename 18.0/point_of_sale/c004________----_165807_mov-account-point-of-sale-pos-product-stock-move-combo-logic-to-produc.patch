PR: https://github.com/odoo/odoo/pull/165807

From: cac2999787e997fd167b90dd40e524ae94c21e1a
From: Louis (loti)
Date: 2024-08-01 14:04:01

Breaking data model changes scores: del:16 + add:0, change matches:
-    _inherit = ['pos.load.mixin']
-    name = fields.Char(string="Name", required=True)
-    combo_line_ids = fields.One2many("pos.combo.line", "combo_id", string="Products in Combo", copy=True)
-    num_of_products = fields.Integer("No of Products", compute="_compute_num_of_products")
-    sequence = fields.Integer(copy=False)
-    base_price = fields.Float(
-    _inherit = ['pos.load.mixin']
-    product_id = fields.Many2one("product.product", string="Product", required=True)
-    combo_price = fields.Float("Extra Price", default=0.0)
-    lst_price = fields.Float("Original Price", related="product_id.lst_price")
-    combo_id = fields.Many2one("pos.combo")
-    combo_line_id = fields.Many2one('pos.combo.line', string='Combo Line')
-    combo_ids = fields.Many2many('pos.combo', string='Combo Choices')
-    type = fields.Selection(selection_add=[

Total Changes: 173

[MOV] account,point_of_sale,pos_*,product,stock: move combo logic to product module

This change moves the combo logic (models, views, demo data) from
`point_of_sale` to `product`. It also renames `combo line` to `combo
item`, which is more fitting.

task-3716965

closes odoo/odoo#165807

Related: odoo/upgrade#6185
Signed-off-by: Louis Tinel (loti) <loti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/__init__.py
+++ b/addons/point_of_sale/models/__init__.py
@@ -17,9 +17,9 @@ from . import pos_category
 from . import pos_config
 from . import pos_order
 from . import pos_session
-from . import pos_combo
-from . import pos_combo_line
 from . import product
+from . import product_combo
+from . import product_combo_item
 from . import res_partner
 from . import res_company
 from . import res_config_settings

--- a/addons/point_of_sale/models/pos_combo.py
+++ b/None
@@ -1,66 +0,0 @@
-from odoo import api, fields, models, _
-from odoo.exceptions import ValidationError
-
-class PosCombo(models.Model):
-    """
-    This model is used to allow the pos user to create menus.
-    This means that products can be grouped together and sold as a combo.
-
-    ex: Create a product called `Burger Menu`
-        - This product will have multiple combos associated with it, for ex:
-            - Drinks - will contain the list of drinks from which the customer can choose
-            - Main Course - will contain the list of main courses from which the customer can choose
-            - Dessert - will contain the list of desserts from which the customer can choose
-        The `Burger Menu` will have a certain price, for example 20$ and the rest of the
-        products will be listed with a price of 0$.
-        In the event that one of the products inside one of the combos is to be more expensive,
-        this product will have a specific `combo_price` which will be added to the total price
-    """
-    _name = "pos.combo"
-    _description = "Product combo choices"
-    _order = "sequence, id"
-    _inherit = ['pos.load.mixin']
-    name = fields.Char(string="Name", required=True)
-    combo_line_ids = fields.One2many("pos.combo.line", "combo_id", string="Products in Combo", copy=True)
-    num_of_products = fields.Integer("No of Products", compute="_compute_num_of_products")
-    sequence = fields.Integer(copy=False)
-    base_price = fields.Float(
-        compute="_compute_base_price",
-        string="Combo Price",
-        help="The value from which pro-rating of the component price is based. This is to ensure that whatever product the user chooses for a component, it will always be they same price."
-    )
-
-    @api.model
-    def _load_pos_data_domain(self, data):
-        return [('id', 'in', list(set().union(*[product.get('combo_ids') for product in data['product.product']['data']])))]
-
-    @api.model
-    def _load_pos_data_fields(self, config_id):
-        return ['id', 'name', 'combo_line_ids', 'base_price']
-
-    @api.depends("combo_line_ids")
-    def _compute_num_of_products(self):
-        """
-        the read_group only returns info for the combos that have at least one line.
-        This is normally fine, because all the combos will have at least one line.
-        The problem is that this function is also run when the user creates a new combo,
-        and at that point, the combo doesn't have any lines, so the read_group will return
-        nothing and the function will fail to set the value of `num_of_products` to 0, thus
-        resulting in an error.
-        """
-        for rec in self:
-            rec.num_of_products = 0
-        # optimization trick to count the number of products in each combo
-        for combo, num_of_products in self.env["pos.combo.line"]._read_group([("combo_id", "in", self.ids)], groupby=["combo_id"], aggregates=["__count"]):
-            combo.num_of_products = num_of_products
-
-    @api.constrains("combo_line_ids")
-    def _check_combo_line_ids_is_not_null(self):
-        if any(not rec.combo_line_ids for rec in self):
-            raise ValidationError(_("Please add products in combo."))
-
-    @api.depends("combo_line_ids")
-    def _compute_base_price(self):
-        for rec in self:
-            # Use the lowest price of the combo lines as the base price
-            rec.base_price = min(rec.combo_line_ids.mapped("product_id.lst_price")) if rec.combo_line_ids else 0

--- a/addons/point_of_sale/models/pos_combo_line.py
+++ b/None
@@ -1,20 +0,0 @@
-from odoo import fields, models, api
-
-
-class PosComboLine(models.Model):
-    _name = "pos.combo.line"
-    _description = "Product Combo Items"
-    _inherit = ['pos.load.mixin']
-
-    product_id = fields.Many2one("product.product", string="Product", required=True)
-    combo_price = fields.Float("Extra Price", default=0.0)
-    lst_price = fields.Float("Original Price", related="product_id.lst_price")
-    combo_id = fields.Many2one("pos.combo")
-
-    @api.model
-    def _load_pos_data_domain(self, data):
-        return [('id', 'in', list(set().union(*[combo.get('combo_line_ids') for combo in data['pos.combo']['data']])))]
-
-    @api.model
-    def _load_pos_data_fields(self, config_id):
-        return ['id', 'product_id', 'combo_price', 'combo_id']

--- a/addons/point_of_sale/models/pos_config.py
+++ b/addons/point_of_sale/models/pos_config.py
@@ -756,7 +756,7 @@ class PosConfig(models.Model):
         product_ids = [r[0] for r in self.env.execute_query(sql)]
         products = self.env['product.product'].browse(product_ids)
         product_combo = products.filtered(lambda p: p['type'] == 'combo')
-        product_in_combo = product_combo.combo_ids.combo_line_ids.product_id
+        product_in_combo = product_combo.combo_ids.combo_item_ids.product_id
         products_available = products | product_in_combo
         return products_available.read(fields, load=False)
 

--- a/addons/point_of_sale/models/pos_order.py
+++ b/addons/point_of_sale/models/pos_order.py
@@ -1235,7 +1235,7 @@ class PosOrderLine(models.Model):
     combo_parent_id = fields.Many2one('pos.order.line', string='Combo Parent') # FIXME rename to parent_line_id
     combo_line_ids = fields.One2many('pos.order.line', 'combo_parent_id', string='Combo Lines') # FIXME rename to child_line_ids
 
-    combo_line_id = fields.Many2one('pos.combo.line', string='Combo Line')
+    combo_item_id = fields.Many2one('product.combo.item', string='Combo Item')
     is_edited = fields.Boolean('Edited', default=False)
 
     @api.model
@@ -1246,7 +1246,8 @@ class PosOrderLine(models.Model):
     def _load_pos_data_fields(self, config_id):
         return [
             'qty', 'attribute_value_ids', 'custom_attribute_value_ids', 'price_unit', 'skip_change', 'uuid', 'price_subtotal', 'price_subtotal_incl', 'order_id', 'note', 'price_type',
-            'product_id', 'discount', 'tax_ids', 'combo_line_id', 'pack_lot_ids', 'customer_note', 'refunded_qty', 'price_extra', 'full_product_name', 'refunded_orderline_id', 'combo_parent_id', 'combo_line_ids', 'combo_line_id', 'refund_orderline_ids']
+            'product_id', 'discount', 'tax_ids', 'pack_lot_ids', 'customer_note', 'refunded_qty', 'price_extra', 'full_product_name', 'refunded_orderline_id', 'combo_parent_id', 'combo_line_ids', 'combo_item_id', 'refund_orderline_ids'
+        ]
 
     @api.model
     def _is_field_accepted(self, field):

--- a/addons/point_of_sale/models/pos_session.py
+++ b/addons/point_of_sale/models/pos_session.py
@@ -131,7 +131,7 @@ class PosSession(models.Model):
     def _load_pos_data_models(self, config_id):
         return ['pos.config', 'pos.order', 'pos.order.line', 'pos.pack.operation.lot', 'pos.payment', 'pos.payment.method', 'pos.printer',
             'pos.category', 'pos.bill', 'res.company', 'account.tax', 'account.tax.group', 'product.product', 'product.attribute', 'product.attribute.custom.value',
-            'product.template.attribute.line', 'product.template.attribute.value', 'pos.combo', 'pos.combo.line', 'product.packaging', 'res.users', 'res.partner',
+            'product.template.attribute.line', 'product.template.attribute.value', 'product.combo', 'product.combo.item', 'product.packaging', 'res.users', 'res.partner',
             'decimal.precision', 'uom.uom', 'uom.category', 'res.country', 'res.country.state', 'res.lang', 'product.pricelist', 'product.pricelist.item', 'product.category',
             'account.cash.rounding', 'account.fiscal.position', 'account.fiscal.position.tax', 'stock.picking.type', 'res.currency', 'pos.note', 'ir.ui.view']
 

--- a/addons/point_of_sale/models/product.py
+++ b/addons/point_of_sale/models/product.py
@@ -16,10 +16,6 @@ class ProductTemplate(models.Model):
     pos_categ_ids = fields.Many2many(
         'pos.category', string='Point of Sale Category',
         help="Category used in the Point of Sale.")
-    combo_ids = fields.Many2many('pos.combo', string='Combo Choices')
-    type = fields.Selection(selection_add=[
-        ('combo', 'Combo')
-    ], ondelete={'combo': 'set consu'})
 
     @api.ondelete(at_uninstall=False)
     def _unlink_except_open_session(self):
@@ -30,14 +26,6 @@ class ProductTemplate(models.Model):
                     "Deleting a product available in a session would be like attempting to snatch a"
                     "hamburger from a customer’s hand mid-bite; chaos will ensue as ketchup and mayo go flying everywhere!"))
 
-    def _prepare_tooltip(self):
-        tooltip = super()._prepare_tooltip()
-        if self.type == 'combo':
-            tooltip = _(
-                "Combos allows to choose one product amongst a selection of choices per category."
-            )
-        return tooltip
-
     @api.onchange('sale_ok')
     def _onchange_sale_ok(self):
         if not self.sale_ok:
@@ -48,19 +36,11 @@ class ProductTemplate(models.Model):
         if self.available_in_pos and not self.sale_ok:
             self.sale_ok = True
 
-    @api.onchange('type')
-    def _onchange_type(self):
-        res = super()._onchange_type()
-        if self.type == 'combo':
-            self.taxes_id = False
-            self.supplier_taxes_id = False
-        return res
-
     @api.constrains('available_in_pos')
     def _check_combo_inclusions(self):
         for product in self:
             if not product.available_in_pos:
-                combo_name = self.env['pos.combo.line'].sudo().search([('product_id', 'in', product.product_variant_ids.ids)], limit=1).combo_id.name
+                combo_name = self.env['product.combo.item'].sudo().search([('product_id', 'in', product.product_variant_ids.ids)], limit=1).combo_id.name
                 if combo_name:
                     raise UserError(_('You must first remove this product from the %s combo', combo_name))
 
@@ -69,16 +49,16 @@ class ProductTemplate(models.Model):
         for template in self:
             archived_product = self.env['product.product'].search([('product_tmpl_id', '=', template.id), ('active', '=', False)], limit=1)
             if archived_product:
-                combo_choices_to_delete = self.env['pos.combo.line'].search([
+                combo_items_to_delete = self.env['product.combo.item'].search([
                     ('product_id', '=', archived_product.id)
                 ])
-                if combo_choices_to_delete:
-                    # Delete old combo line
-                    combo_ids = combo_choices_to_delete.mapped('combo_id')
-                    combo_choices_to_delete.unlink()
-                    # Create new combo line (one for each new variant) in each combo
+                if combo_items_to_delete:
+                    # Delete old combo item
+                    combo_ids = combo_items_to_delete.mapped('combo_id')
+                    combo_items_to_delete.unlink()
+                    # Create new combo item (one for each new variant) in each combo
                     new_variants = template.product_variant_ids.filtered(lambda v: v.active)
-                    self.env['pos.combo.line'].create([
+                    self.env['product.combo.item'].create([
                         {
                             'product_id': variant.id,
                             'combo_id': combo_id.id,
@@ -87,12 +67,6 @@ class ProductTemplate(models.Model):
                     ])
         return res
 
-    @api.onchange('type')
-    def _onchange_type(self):
-        if self.type == "combo" and self.attribute_line_ids:
-            raise UserError(_("Combo products cannot contains variants or attributes"))
-        return super()._onchange_type()
-
 
 class ProductProduct(models.Model):
     _name = 'product.product'

--- a/None
+++ b/addons/point_of_sale/models/product_combo.py
@@ -0,0 +1,16 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, models
+
+
+class ProductCombo(models.Model):
+    _name = 'product.combo'
+    _inherit = ['product.combo', 'pos.load.mixin']
+
+    @api.model
+    def _load_pos_data_domain(self, data):
+        return [('id', 'in', list(set().union(*[product.get('combo_ids') for product in data['product.product']['data']])))]
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return ['id', 'name', 'combo_item_ids', 'base_price']

--- a/None
+++ b/addons/point_of_sale/models/product_combo_item.py
@@ -0,0 +1,16 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, models
+
+
+class ProductComboItem(models.Model):
+    _name = 'product.combo.item'
+    _inherit = ['product.combo.item', 'pos.load.mixin']
+
+    @api.model
+    def _load_pos_data_domain(self, data):
+        return [('id', 'in', list(set().union(*[combo.get('combo_item_ids') for combo in data['product.combo']['data']])))]
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return ['id', 'combo_id', 'product_id', 'extra_price']
