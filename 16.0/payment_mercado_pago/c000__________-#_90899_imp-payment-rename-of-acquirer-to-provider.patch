PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = 'payment.acquirer'
-    provider = fields.Selection(

Total Changes: 208

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_mercado_pago/models/__init__.py
+++ b/addons/payment_mercado_pago/models/__init__.py
@@ -1,4 +1,4 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_transaction

--- a/addons/payment_mercado_pago/models/payment_acquirer.py
+++ b/addons/payment_mercado_pago/models/payment_provider.py
@@ -15,10 +15,10 @@ from odoo.addons.payment_mercado_pago.const import SUPPORTED_CURRENCIES
 _logger = logging.getLogger(__name__)
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class Paymentprovider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('mercado_pago', "Mercado Pago")], ondelete={'mercado_pago': 'set default'}
     )
     mercado_pago_access_token = fields.Char(
@@ -30,15 +30,15 @@ class PaymentAcquirer(models.Model):
     # === BUSINESS METHODS === #
 
     @api.model
-    def _get_compatible_acquirers(self, *args, currency_id=None, **kwargs):
-        """ Override of `payment` to unlist Mercado Pago acquirers for unsupported currencies. """
-        acquirers = super()._get_compatible_acquirers(*args, currency_id=currency_id, **kwargs)
+    def _get_compatible_providers(self, *args, currency_id=None, **kwargs):
+        """ Override of `payment` to unlist Mercado Pago providers for unsupported currencies. """
+        providers = super()._get_compatible_providers(*args, currency_id=currency_id, **kwargs)
 
         currency = self.env['res.currency'].browse(currency_id).exists()
         if currency and currency.name not in SUPPORTED_CURRENCIES:
-            acquirers = acquirers.filtered(lambda a: a.provider != 'mercado_pago')
+            providers = providers.filtered(lambda p: p.code != 'mercado_pago')
 
-        return acquirers
+        return providers
 
     def _mercado_pago_make_request(self, endpoint, payload=None, method='POST'):
         """ Make a request to Mercado Pago API at the specified endpoint.

--- a/addons/payment_mercado_pago/models/payment_transaction.py
+++ b/addons/payment_mercado_pago/models/payment_transaction.py
@@ -24,11 +24,11 @@ class PaymentTransaction(models.Model):
         Note: self.ensure_one() from `_get_rendering_values`.
 
         :param dict processing_values: The generic and specific processing values of the transaction
-        :return: The dict of acquirer-specific processing values.
+        :return: The dict of provider-specific processing values.
         :rtype: dict
         """
         res = super()._get_specific_rendering_values(processing_values)
-        if self.provider != 'mercado_pago':
+        if self.provider_code != 'mercado_pago':
             return res
 
         # Initiate the payment and retrieve the payment link data.
@@ -37,9 +37,9 @@ class PaymentTransaction(models.Model):
             "Sending '/checkout/preferences' request for link creation:\n%s",
             pprint.pformat(payload),
         )
-        api_url = self.acquirer_id._mercado_pago_make_request(
+        api_url = self.provider_id._mercado_pago_make_request(
             '/checkout/preferences', payload=payload
-        )['init_point' if self.acquirer_id.state == 'enabled' else 'sandbox_init_point']
+        )['init_point' if self.provider_id.state == 'enabled' else 'sandbox_init_point']
 
         # Extract the payment link URL and embed it in the redirect form.
         rendering_values = {
@@ -53,7 +53,7 @@ class PaymentTransaction(models.Model):
         :return: The request payload.
         :rtype: dict
         """
-        base_url = self.acquirer_id.get_base_url()
+        base_url = self.provider_id.get_base_url()
         return_url = urls.url_join(base_url, MercadoPagoController._return_url)
         webhook_url = urls.url_join(
             base_url, f'{MercadoPagoController._webhook_url}/{self.reference}'
@@ -89,25 +89,25 @@ class PaymentTransaction(models.Model):
             },
         }
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of `payment` to find the transaction based on Mercado Pago data.
 
-        :param str provider: The provider of the acquirer that handled the transaction.
+        :param str provider_code: The code of the provider that handled the transaction.
         :param dict notification_data: The notification data sent by the provider.
         :return: The transaction if found.
         :rtype: recordset of `payment.transaction`
         :raise ValidationError: If inconsistent data were received.
         :raise ValidationError: If the data match no transaction.
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'mercado_pago' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'mercado_pago' or len(tx) == 1:
             return tx
 
         reference = notification_data.get('external_reference')
         if not reference:
             raise ValidationError("Mercado Pago: " + _("Received data with missing reference."))
 
-        tx = self.search([('reference', '=', reference), ('provider', '=', 'mercado_pago')])
+        tx = self.search([('reference', '=', reference), ('provider_code', '=', 'mercado_pago')])
         if not tx:
             raise ValidationError(
                 "Mercado Pago: " + _("No transaction found matching reference %s.", reference)
@@ -124,17 +124,17 @@ class PaymentTransaction(models.Model):
         :raise ValidationError: If inconsistent data were received.
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'mercado_pago':
+        if self.provider_code != 'mercado_pago':
             return
 
         payment_id = notification_data.get('payment_id')
         if not payment_id:
             raise ValidationError("Mercado Pago: " + _("Received data with missing payment id."))
-        self.acquirer_reference = payment_id
+        self.provider_reference = payment_id
 
         # Verify the notification data.
-        verified_payment_data = self.acquirer_id._mercado_pago_make_request(
-            f'/v1/payments/{self.acquirer_reference}', method='GET'
+        verified_payment_data = self.provider_id._mercado_pago_make_request(
+            f'/v1/payments/{self.provider_reference}', method='GET'
         )
 
         payment_status = verified_payment_data.get('status')
