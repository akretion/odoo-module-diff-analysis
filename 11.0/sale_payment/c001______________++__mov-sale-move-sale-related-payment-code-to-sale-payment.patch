PR: https://github.com/odoo/odoo/pull/

From: 62c3ada8515764aa16c9fc4bfc8652b3565f6b63
From: Thibault Delavall√©e
Date: 2017-08-08 13:18:00

Structural Changes: 6
Total Changes: 64

[MOV] sale_*: move sale-related payment code to sale_payment

website_portal_sale contains code on sale.order and crm.team models
related to payments. This code is moved into the sale_payment module
that is the bridge between sale and payment and therefore is the
location where it belongs. First step toward removing content of
website_portal_sale module.

================================= pseudo patch: =================================

--- a/addons/sale_payment/models/__init__.py
+++ b/addons/sale_payment/models/__init__.py
@@ -2,4 +2,5 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from . import payment
+from . import crm_team
 from . import sale_order
\ No newline at end of file

--- a/None
+++ b/addons/sale_payment/models/crm_team.py
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class CrmTeam(models.Model):
+    _inherit = 'crm.team'
+
+    pending_payment_transactions_count = fields.Integer(
+        compute='_compute_payment_transactions',
+        string='Number of pending transactions', readonly=True)
+    pending_payment_transactions_amount = fields.Integer(
+        compute='_compute_payment_transactions',
+        string='Amount of pending transactions', readonly=True)
+    authorized_payment_transactions_count = fields.Integer(
+        compute='_compute_payment_transactions',
+        string='Number of transactions to capture', readonly=True)
+    authorized_payment_transactions_amount = fields.Integer(
+        compute='_compute_payment_transactions',
+        string='Amount of transactions to capture', readonly=True)
+
+    def _compute_payment_transactions(self):
+        for team in self:
+            payment_data = self.env['payment.transaction'].read_group([
+                ('state', 'in', ['authorized', 'pending']),
+                ('sale_order_id.team_id', '=', team.id)
+            ], ['amount', 'currency_id', 'state'], ['state', 'currency_id'], lazy=False)
+            for datum in payment_data:
+                datum_currency = self.env['res.currency'].browse(datum['currency_id'][0])
+                if datum['state'] == 'authorized':
+                    team.authorized_payment_transactions_count += datum['__count']
+                    team.authorized_payment_transactions_amount += datum_currency.compute(datum['amount'], self.env.user.company_id.currency_id)
+                elif datum['state'] == 'pending':
+                    team.pending_payment_transactions_count += datum['__count']
+                    team.pending_payment_transactions_amount += datum_currency.compute(datum['amount'], self.env.user.company_id.currency_id)

--- a/addons/sale_payment/models/sale_order.py
+++ b/addons/sale_payment/models/sale_order.py
@@ -9,6 +9,15 @@ class SaleOrder(models.Model):
 
     payment_tx_id = fields.Many2one('payment.transaction', string='Last Transaction', copy=False)
     payment_acquirer_id = fields.Many2one('payment.acquirer', string='Payment Acquirer', related='payment_tx_id.acquirer_id', store=True)
+    payment_transaction_count = fields.Integer(
+        string="Number of payment transactions",
+        compute='_compute_payment_transaction_count')
+
+    def _compute_payment_transaction_count(self):
+        transaction_data = self.env['payment.transaction'].read_group([('sale_order_id', 'in', self.ids)], ['sale_order_id'], ['sale_order_id'])
+        mapped_data = dict([(m['sale_order_id'][0], m['sale_order_id_count']) for m in transaction_data])
+        for order in self:
+            order.payment_transaction_count = mapped_data.get(order.id, 0)
 
     def _force_lines_to_invoice_policy_order(self):
         for line in self.order_line:
@@ -16,3 +25,21 @@ class SaleOrder(models.Model):
                 line.qty_to_invoice = line.product_uom_qty - line.qty_invoiced
             else:
                 line.qty_to_invoice = 0
+
+    def action_view_transaction(self):
+        action = {
+            'type': 'ir.actions.act_window',
+            'name': 'Payment Transactions',
+            'res_model': 'payment.transaction',
+        }
+        if self.payment_transaction_count == 1:
+            action.update({
+                'res_id': self.env['payment.transaction'].search([('sale_order_id', '=', self.id)]).id,
+                'view_mode': 'form',
+            })
+        else:
+            action.update({
+                'view_mode': 'tree,form',
+                'domain': [('sale_order_id', '=', self.id)],
+            })
+        return action
