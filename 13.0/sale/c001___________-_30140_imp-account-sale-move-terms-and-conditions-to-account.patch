PR: https://github.com/odoo/odoo/pull/30140

From: ca25a692bd19fdca2b2600f2054eb419aae28999
From: mgh-odoo
Date: 2019-02-07 13:11:19

Breaking data model changes scores: del:4 + add:0, change matches:
-    comment = fields.Text(default=_default_comment)
-    sale_note = fields.Text(string='Default Terms and Conditions', translate=True)
-    sale_note = fields.Text(related='company_id.sale_note', string="Terms & Conditions", readonly=False)
-    use_sale_note = fields.Boolean(

Total Changes: 20

[IMP] account, sale: Move terms and conditions to account

Purpose
=======

Be able to define terms and conditions if sales is not installed.

If sales is not installed, the user cannot define default terms and conditions
for his customer invoices since the setting in the sales section.

If sales is installed and default terms & conditions are defined, a customer
invoice created from scratch (not from an SO) will have them.

This is not consistent.

Task: 1917663

closes odoo/odoo#30140

================================= pseudo patch: =================================

--- a/addons/sale/models/account_invoice.py
+++ b/addons/sale/models/account_invoice.py
@@ -11,13 +11,7 @@ class AccountInvoice(models.Model):
     def _get_default_team(self):
         return self.env['crm.team']._get_default_team_id()
 
-    def _default_comment(self):
-        invoice_type = self.env.context.get('type', 'out_invoice')
-        if invoice_type == 'out_invoice' and self.env['ir.config_parameter'].sudo().get_param('sale.use_sale_note'):
-            return self.env.user.company_id.sale_note
-
     team_id = fields.Many2one('crm.team', string='Sales Team', default=_get_default_team, oldname='section_id')
-    comment = fields.Text(default=_default_comment)
     partner_shipping_id = fields.Many2one(
         'res.partner',
         string='Delivery Address',
@@ -48,7 +42,7 @@ class AccountInvoice(models.Model):
         self.partner_shipping_id = addr and addr.get('delivery')
         if self.env.context.get('type', 'out_invoice') == 'out_invoice':
             company = self.company_id or self.env.user.company_id
-            self.comment = company.with_context(lang=self.partner_id.lang).sale_note
+            self.comment = company.with_context(lang=self.partner_id.lang).invoice_terms
 
     @api.multi
     def action_invoice_open(self):

--- a/addons/sale/models/res_company.py
+++ b/addons/sale/models/res_company.py
@@ -7,7 +7,6 @@ from odoo import api, fields, models, _
 class ResCompany(models.Model):
     _inherit = "res.company"
 
-    sale_note = fields.Text(string='Default Terms and Conditions', translate=True)
     portal_confirmation_sign = fields.Boolean(string='Online Signature')
     portal_confirmation_pay = fields.Boolean(string='Online Payment')
     quotation_validity_days = fields.Integer(default=30, string="Default Quotation Validity (Days)")

--- a/addons/sale/models/res_config_settings.py
+++ b/addons/sale/models/res_config_settings.py
@@ -7,11 +7,6 @@ from odoo import api, fields, models
 class ResConfigSettings(models.TransientModel):
     _inherit = 'res.config.settings'
 
-    sale_note = fields.Text(related='company_id.sale_note', string="Terms & Conditions", readonly=False)
-    use_sale_note = fields.Boolean(
-        string='Default Terms & Conditions',
-        oldname='default_use_sale_note',
-        config_parameter='sale.use_sale_note')
     group_discount_per_so_line = fields.Boolean("Discounts", implied_group='sale.group_discount_per_so_line')
     module_sale_margin = fields.Boolean("Margins")
     quotation_validity_days = fields.Integer(related='company_id.quotation_validity_days', string="Default Quotation Validity (Days)", readonly=False)

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -101,7 +101,7 @@ class SaleOrder(models.Model):
 
     @api.model
     def _default_note(self):
-        return self.env['ir.config_parameter'].sudo().get_param('sale.use_sale_note') and self.env.user.company_id.sale_note or ''
+        return self.env['ir.config_parameter'].sudo().get_param('account.use_invoice_terms') and self.env.user.company_id.invoice_terms or ''
 
     @api.model
     def _get_default_team(self):
@@ -306,8 +306,8 @@ class SaleOrder(models.Model):
             'partner_shipping_id': addr['delivery'],
             'user_id': self.partner_id.user_id.id or self.env.uid
         }
-        if self.env['ir.config_parameter'].sudo().get_param('sale.use_sale_note') and self.env.user.company_id.sale_note:
-            values['note'] = self.with_context(lang=self.partner_id.lang).env.user.company_id.sale_note
+        if self.env['ir.config_parameter'].sudo().get_param('account.use_invoice_terms') and self.env.user.company_id.invoice_terms:
+            values['note'] = self.with_context(lang=self.partner_id.lang).env.user.company_id.invoice_terms
 
         # Use team of saleman before to fallback on team of partner.
         values['team_id'] = self.partner_id.user_id and self.partner_id.user_id.sale_team_id.id or self.partner_id.team_id.id
