PR: https://github.com/odoo/odoo/pull/

From: 1de9496f14a42d543ec9805dfc1d0e8df39017d2
From: XavierDo
Date: 2018-08-10 13:20:37

Structural Changes: 2
Total Changes: 71

[IMP] mail: add activity view

A simple new view to easily display all activity on a model grouped
by res_id and activity_type_id. Some action are possible like sending
a mail template for all record having an activity with this activity type
and present in the view (depends on the filter).

The view use the Kanban activity view on cells. It could be a good idea
to rename this widget to something like "DropdownActivityView" (maybe
after the freeze)

Task: #1870662
PR: #26272

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_activity.py
+++ b/addons/mail/models/mail_activity.py
@@ -147,6 +147,42 @@ class MailActivity(models.Model):
         help='Technical field for UX purpose')
     mail_template_ids = fields.Many2many(related='activity_type_id.mail_template_ids')
 
+    @api.model
+    def get_activity_data(self, res_model, domain):
+        res = self.env[res_model].search(domain)
+        activity_domain = [('res_id', 'in', res.ids), ('res_model', '=', res_model)]
+        grouped_activities = self.env['mail.activity'].read_group(activity_domain, ['res_id', 'activity_type_id', 'res_name:max(res_name)', 'ids:array_agg(id)', 'date_deadline:min(date_deadline)'], ['res_id', 'activity_type_id'], lazy=False)
+        activity_type_ids = self.env['mail.activity.type']
+        res_list = set()
+        activity_data = defaultdict(dict)
+        for group in grouped_activities:
+            res_id = group['res_id']
+            res_name = group['res_name']
+            activity_type_id = group['activity_type_id'][0]
+            activity_type_ids |= self.env['mail.activity.type'].browse(activity_type_id)  # we will get the name when reading mail_template_ids
+            res_list.add((res_id, res_name))
+            state = self._compute_state_from_date(group['date_deadline'], self.user_id.sudo().tz)
+            activity_data[res_id][activity_type_id] = {
+                'count': group['__count'],
+                'domain': group['__domain'],
+                'ids': group['ids'],
+                'state': state,
+                'o_closest_deadline': group['date_deadline'],
+            }
+        activity_type_infos = []
+        for elem in activity_type_ids:
+            mail_template_info = []
+            for mail_template_id in elem.mail_template_ids:
+                mail_template_info.append({"id": mail_template_id.id, "name": mail_template_id.name})
+            activity_type_infos.append([elem.id, elem.name, mail_template_info])
+
+        return {
+            'activity_types': activity_type_infos,
+            'res_ids': list(res_list),
+            'grouped_activities': activity_data,
+            'model': res_model,
+        }
+
     @api.multi
     @api.onchange('previous_activity_type_id')
     def _compute_has_recommended_activities(self):
@@ -167,24 +203,27 @@ class MailActivity(models.Model):
 
     @api.depends('date_deadline')
     def _compute_state(self):
-        today_default = date.today()
-
         for record in self.filtered(lambda activity: activity.date_deadline):
-            today = today_default
             tz = record.user_id.sudo().tz
-            if tz:
-                today_utc = pytz.UTC.localize(datetime.utcnow())
-                today_tz = today_utc.astimezone(pytz.timezone(tz))
-                today = date(year=today_tz.year, month=today_tz.month, day=today_tz.day)
-
-            date_deadline = fields.Date.from_string(record.date_deadline)
-            diff = (date_deadline - today)
-            if diff.days == 0:
-                record.state = 'today'
-            elif diff.days < 0:
-                record.state = 'overdue'
-            else:
-                record.state = 'planned'
+            date_deadline = record.date_deadline
+            record.state = self._compute_state_from_date(date_deadline, tz)
+
+    @api.model
+    def _compute_state_from_date(self, date_deadline, tz=False):
+        date_deadline = fields.Date.from_string(date_deadline)
+        today_default = date.today()
+        today = today_default
+        if tz:
+            today_utc = pytz.UTC.localize(datetime.utcnow())
+            today_tz = today_utc.astimezone(pytz.timezone(tz))
+            today = date(year=today_tz.year, month=today_tz.month, day=today_tz.day)
+        diff = (date_deadline - today)
+        if diff.days == 0:
+            return 'today'
+        elif diff.days < 0:
+            return 'overdue'
+        else:
+            return 'planned'
 
     @api.onchange('activity_type_id')
     def _onchange_activity_type_id(self):
