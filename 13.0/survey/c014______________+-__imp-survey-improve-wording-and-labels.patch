PR: https://github.com/odoo/odoo/pull/

From: 4fbd4a8c6a0dbf9d0ba039c7f0d61e8b26d9b51d
From: Jitendra Prajapati
Date: 2019-08-29 15:36:13

Structural Changes: 6
Total Changes: 6

[IMP] survey: improve wording and labels

PURPOSE

Perform a back2basics review of survey to improve daily use, new user
onboarding and labelling.

SPECIFICATIONS

Improve labels of fields and wording in actions. See commit content for proper
specifications.

LINKS

Task 2039068
PR #36229

================================= pseudo patch: =================================

--- a/addons/survey/models/survey_survey.py
+++ b/addons/survey/models/survey_survey.py
@@ -25,7 +25,7 @@ class Survey(models.Model):
         return str(uuid.uuid4())
 
     # description
-    title = fields.Char('Title', required=True, translate=True)
+    title = fields.Char('Survey Title', required=True, translate=True)
     description = fields.Html("Description", translate=True,
         help="The description will be displayed on the home page of the survey. You can use this to give the purpose and guidelines to your candidates before they start it.")
     color = fields.Integer('Color Index', default=0)

--- a/addons/survey/models/survey_user.py
+++ b/addons/survey/models/survey_user.py
@@ -202,7 +202,7 @@ class SurveyUserInputLine(models.Model):
 
     user_input_id = fields.Many2one('survey.user_input', string='User Input', ondelete='cascade', required=True)
     question_id = fields.Many2one('survey.question', string='Question', ondelete='cascade', required=True)
-    page_id = fields.Many2one(related='question_id.page_id', string="Page", readonly=False)
+    page_id = fields.Many2one(related='question_id.page_id', string="Section", readonly=False)
     survey_id = fields.Many2one(related='user_input_id.survey_id', string='Survey', store=True, readonly=False)
     skipped = fields.Boolean('Skipped')
     answer_type = fields.Selection([
@@ -219,7 +219,7 @@ class SurveyUserInputLine(models.Model):
     value_free_text = fields.Text('Free Text answer')
     value_suggested = fields.Many2one('survey.label', string="Suggested answer")
     value_suggested_row = fields.Many2one('survey.label', string="Row answer")
-    answer_score = fields.Float('Score given for this choice')
+    answer_score = fields.Float('Score')
 
     @api.constrains('skipped', 'answer_type')
     def _answered_or_skipped(self):
