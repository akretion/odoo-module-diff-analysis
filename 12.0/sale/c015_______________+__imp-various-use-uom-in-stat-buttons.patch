PR: https://github.com/odoo/odoo/pull/

From: 5118d248ccf16fe4d2703c2a64e0267f783a56d1
From: Kirti Choudhary
Date: 2018-08-08 12:51:12

Structural Changes: 3
Total Changes: 48

[IMP] various: use uom in stat buttons

In purchase we add a stat button that counts the number of purchase
orders linked to the product.
In this commit we change this count to count the quantity of products
linked to a purchase order.

We basically do the same thing with the stat button of sale (sale
orders) and mrp (manufacturing orders).

================================= pseudo patch: =================================

--- a/addons/sale/models/product_product.py
+++ b/addons/sale/models/product_product.py
@@ -1,28 +1,44 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from datetime import timedelta
 from odoo import api, fields, models
+from odoo.tools.float_utils import float_round
 
 
 class ProductProduct(models.Model):
     _inherit = 'product.product'
 
+    sales_count = fields.Float(compute='_compute_sales_count', string='Sold')
+
     @api.multi
-    def _sales_count(self):
+    def _compute_sales_count(self):
         r = {}
         if not self.user_has_groups('sales_team.group_sale_salesman'):
             return r
+
+        date_from = fields.Datetime.to_string(fields.datetime.now() - timedelta(days=365))
         domain = [
             ('state', 'in', ['sale', 'done']),
             ('product_id', 'in', self.ids),
+            ('date', '>', date_from)
         ]
         for group in self.env['sale.report'].read_group(domain, ['product_id', 'product_uom_qty'], ['product_id']):
             r[group['product_id'][0]] = group['product_uom_qty']
         for product in self:
-            product.sales_count = r.get(product.id, 0)
+            product.sales_count = float_round(r.get(product.id, 0), precision_rounding=product.uom_id.rounding)
         return r
 
-    sales_count = fields.Integer(compute='_sales_count', string='# Sales')
+    @api.multi
+    def action_view_sales(self):
+        action = self.env.ref('sale.report_all_channels_sales_action').read()[0]
+        action['domain'] = [('product_id', 'in', self.ids)]
+        action['context'] = {
+            'search_default_last_year': 1,
+            'pivot_measures': ['product_qty'],
+            'search_default_team_id': 1
+        }
+        return action
 
     def _get_invoice_policy(self):
         return self.invoice_policy

--- a/addons/sale/models/product_template.py
+++ b/addons/sale/models/product_template.py
@@ -3,6 +3,7 @@
 
 from odoo import api, fields, models, _
 from odoo.addons.base.models.res_partner import WARNING_MESSAGE, WARNING_HELP
+from odoo.tools.float_utils import float_round
 
 
 class ProductTemplate(models.Model):
@@ -43,27 +44,20 @@ class ProductTemplate(models.Model):
 
     @api.multi
     @api.depends('product_variant_ids.sales_count')
-    def _sales_count(self):
+    def _compute_sales_count(self):
         for product in self:
-            product.sales_count = sum([p.sales_count for p in product.with_context(active_test=False).product_variant_ids])
+            product.sales_count = float_round(sum([p.sales_count for p in product.with_context(active_test=False).product_variant_ids]), precision_rounding=product.uom_id.rounding)
 
     @api.multi
     def action_view_sales(self):
-        self.ensure_one()
-        action = self.env.ref('sale.action_product_sale_list')
-        product_ids = self.with_context(active_test=False).product_variant_ids.ids
-
-        return {
-            'name': action.name,
-            'help': action.help,
-            'type': action.type,
-            'view_type': action.view_type,
-            'view_mode': action.view_mode,
-            'target': action.target,
-            'context': "{'default_product_id': " + str(product_ids[0]) + "}",
-            'res_model': action.res_model,
-            'domain': [('state', 'in', ['sale', 'done']), ('product_id.product_tmpl_id', '=', self.id)],
+        action = self.env.ref('sale.report_all_channels_sales_action').read()[0]
+        action['domain'] = [('product_tmpl_id', 'in', self.ids)]
+        action['context'] = {
+            'search_default_last_year': 1,
+            'pivot_measures': ['product_qty'],
+            'search_default_team_id': 1
         }
+        return action
 
     @api.onchange('type')
     def _onchange_type(self):
