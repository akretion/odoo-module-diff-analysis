PR: https://github.com/odoo/odoo/pull/116472

From: 1b512efdac4bdfe2fd66eb910ad2c6f707998887
From: hapa-odoo
Date: 2023-08-08 19:09:51

Breaking data model changes score: 1, change matches:
-    has_stress_day = fields.Boolean(compute='_compute_has_stress_day')

Total Changes: 107

[IMP] holiday: improve UX holiday timeoff

-Display the state of a time off that you open from the dashboard
-Rename Stress Days into "Mandatory Days"
-My Allocations 
    Remove "Employee" from the Group By
    Replace filter `Current Year` with `Currently Valid`.
-My Time Off
    -Remove Employees from list view and kanban view
-Create an allocation / allocation request form
  - Create an allocation ux : employee side- compute the name of the allocation.
  - Make field `allocation_type` invisible if there is no active accrual plan in the database.
-Accruals
  -Add an "archive" in the action menu of the accrual plan.
  -Show Employee button in the form view of the Accrual Plan. 
-Renamed stress day into the mandatory days.
-Renamed string of the menu Approval into the Management.
-Remove two legends in the time-off Dashboard
  - Public Holiday
  - Mandatory Day

task-3084232

closes odoo/odoo#116472

Related: odoo/enterprise#40576
Related: odoo/upgrade#4472
Signed-off-by: Sofie Gvaladze (sgv) <sgv@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/__init__.py
+++ b/addons/hr_holidays/models/__init__.py
@@ -10,7 +10,7 @@ from . import hr_leave_allocation
 from . import hr_leave_type
 from . import hr_leave_accrual_plan_level
 from . import hr_leave_accrual_plan
-from . import hr_leave_stress_day
+from . import hr_leave_mandatory_day
 from . import mail_message_subtype
 from . import res_partner
 from . import res_users

--- a/addons/hr_holidays/models/hr_employee.py
+++ b/addons/hr_holidays/models/hr_employee.py
@@ -273,23 +273,23 @@ class HrEmployee(models.Model):
     def _is_leave_user(self):
         return self == self.env.user.employee_id and self.user_has_groups('hr_holidays.group_hr_holidays_user')
 
-    def get_stress_days(self, start_date, end_date):
+    def get_mandatory_days(self, start_date, end_date):
         all_days = {}
 
         self = self or self.env.user.employee_id
 
-        stress_days = self._get_stress_days(start_date, end_date)
-        for stress_day in stress_days:
-            num_days = (stress_day.end_date - stress_day.start_date).days
+        mandatory_days = self._get_mandatory_days(start_date, end_date)
+        for mandatory_day in mandatory_days:
+            num_days = (mandatory_day.end_date - mandatory_day.start_date).days
             for d in range(num_days + 1):
-                all_days[str(stress_day.start_date + relativedelta(days=d))] = stress_day.color
+                all_days[str(mandatory_day.start_date + relativedelta(days=d))] = mandatory_day.color
 
         return all_days
 
     @api.model
     def get_special_days_data(self, date_start, date_end):
         return {
-            'stressDays': self.get_stress_days_data(date_start, date_end),
+            'mandatoryDays': self.get_mandatory_days_data(date_start, date_end),
             'bankHolidays': self.get_public_holidays_data(date_start, date_end),
         }
 
@@ -328,9 +328,9 @@ class HrEmployee(models.Model):
         return self.env['resource.calendar.leaves'].search(domain)
 
     @api.model
-    def get_stress_days_data(self, date_start, date_end):
+    def get_mandatory_days_data(self, date_start, date_end):
         self = self._get_contextual_employee()
-        stress_days = self._get_stress_days(date_start, date_end).sorted('start_date')
+        mandatory_days = self._get_mandatory_days(date_start, date_end).sorted('start_date')
         return list(map(lambda sd: {
             'id': -sd.id,
             'colorIndex': sd.color,
@@ -340,16 +340,16 @@ class HrEmployee(models.Model):
             'start': datetime.datetime.combine(sd.start_date, datetime.datetime.min.time()).isoformat(),
             'startType': "datetime",
             'title': sd.name,
-        }, stress_days))
+        }, mandatory_days))
 
-    def _get_stress_days(self, start_date, end_date):
+    def _get_mandatory_days(self, start_date, end_date):
         domain = [
             ('start_date', '<=', end_date),
             ('end_date', '>=', start_date),
             ('company_id', 'in', self.env.companies.ids),
         ]
 
-        # a user with hr_holidays permissions will be able to see all stress days from his calendar
+        # a user with hr_holidays permissions will be able to see all mandatory days from his calendar
         if not self._is_leave_user():
             domain += [
                 '|',
@@ -365,4 +365,4 @@ class HrEmployee(models.Model):
             else:
                 domain += [('department_ids', '=', False)]
 
-        return self.env['hr.leave.stress.day'].search(domain)
+        return self.env['hr.leave.mandatory.day'].search(domain)

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -300,7 +300,7 @@ class HolidaysRequest(models.Model):
     # view
     is_hatched = fields.Boolean('Hatched', compute='_compute_is_hatched')
     is_striked = fields.Boolean('Striked', compute='_compute_is_hatched')
-    has_stress_day = fields.Boolean(compute='_compute_has_stress_day')
+    has_mandatory_day = fields.Boolean(compute='_compute_has_mandatory_day')
 
     _sql_constraints = [
         ('type_value',
@@ -473,10 +473,10 @@ class HolidaysRequest(models.Model):
                 holiday.department_id = False
 
     @api.depends('date_from', 'date_to', 'holiday_status_id')
-    def _compute_has_stress_day(self):
+    def _compute_has_mandatory_day(self):
         date_from, date_to = min(self.mapped('date_from')), max(self.mapped('date_to'))
         if date_from and date_to:
-            stress_days = self.employee_id._get_stress_days(
+            mandatory_days = self.employee_id._get_mandatory_days(
                 date_from.date(),
                 date_to.date())
 
@@ -491,9 +491,9 @@ class HolidaysRequest(models.Model):
 
                 if leave.holiday_status_id.company_id:
                     domain += [('company_id', '=', leave.holiday_status_id.company_id.id)]
-                leave.has_stress_day = leave.date_from and leave.date_to and stress_days.filtered_domain(domain)
+                leave.has_mandatory_day = leave.date_from and leave.date_to and mandatory_days.filtered_domain(domain)
         else:
-            self.has_stress_day = False
+            self.has_mandatory_day = False
 
     @api.depends('date_from', 'date_to', 'employee_id')
     def _compute_number_of_days(self):
@@ -862,10 +862,10 @@ class HolidaysRequest(models.Model):
             self.message_subscribe(partner_ids=employee.user_id.partner_id.ids)
 
     @api.constrains('date_from', 'date_to')
-    def _check_stress_day(self):
+    def _check_mandatory_day(self):
         is_leave_user = self.user_has_groups('hr_holidays.group_hr_holidays_user')
-        if not is_leave_user and any(leave.has_stress_day for leave in self):
-            raise ValidationError(_('You are not allowed to request a time off on a Stress Day.'))
+        if not is_leave_user and any(leave.has_mandatory_day for leave in self):
+            raise ValidationError(_('You are not allowed to request a time off on a Mandatory Day.'))
 
     def _check_double_validation_rules(self, employees, state):
         if self.user_has_groups('hr_holidays.group_hr_holidays_manager'):

--- a/addons/hr_holidays/models/hr_leave_accrual_plan.py
+++ b/addons/hr_holidays/models/hr_leave_accrual_plan.py
@@ -8,6 +8,7 @@ class AccrualPlan(models.Model):
     _name = "hr.leave.accrual.plan"
     _description = "Accrual Plan"
 
+    active = fields.Boolean(default=True)
     name = fields.Char('Name', required=True)
     time_off_type_id = fields.Many2one('hr.leave.type', string="Time Off Type",
         check_company=True,

--- a/addons/hr_holidays/models/hr_leave_allocation.py
+++ b/addons/hr_holidays/models/hr_leave_allocation.py
@@ -9,7 +9,7 @@ import logging
 from datetime import datetime, time
 from dateutil.relativedelta import relativedelta
 
-from odoo import api, fields, models
+from odoo import api, fields, models, _
 from odoo.addons.resource.models.utils import HOURS_PER_DAY
 from odoo.addons.hr_holidays.models.hr_leave import get_employee_from_context
 from odoo.exceptions import AccessError, UserError, ValidationError
@@ -136,6 +136,7 @@ class HolidaysAllocation(models.Model):
     max_leaves = fields.Float(compute='_compute_leaves')
     leaves_taken = fields.Float(compute='_compute_leaves', string='Time off Taken')
     taken_leave_ids = fields.One2many('hr.leave', 'holiday_allocation_id', domain="[('state', 'in', ['confirm', 'validate1', 'validate'])]")
+    has_accrual_plan = fields.Boolean(compute='_compute_has_accrual_plan', string='Accrual Plan Available')
 
     _sql_constraints = [
         ('type_value',
@@ -168,7 +169,14 @@ class HolidaysAllocation(models.Model):
 
         for allocation in self:
             if is_officer or allocation.employee_id.user_id == self.env.user or allocation.employee_id.leave_manager_id == self.env.user:
-                allocation.name = allocation.sudo().private_name
+                title = allocation.sudo().private_name
+                if allocation.env.context.get('is_employee_allocation'):
+                    allocation_duration = allocation.number_of_days_display if allocation.type_request_unit != 'hour' else allocation.number_of_hours_display
+                    title = _(" %s Allocation Request ( %s %s)" % (
+                        allocation.holiday_status_id.name,
+                        allocation_duration,
+                        allocation.type_request_unit))
+                allocation.name = title
             else:
                 allocation.name = '*****'
 
@@ -188,6 +196,10 @@ class HolidaysAllocation(models.Model):
         allocations = self.sudo().search(domain)
         return [('id', 'in', allocations.ids)]
 
+    @api.depends('accrual_plan_id')
+    def _compute_has_accrual_plan(self):
+        self.has_accrual_plan = bool(self.env['hr.leave.accrual.plan'].sudo().search_count([('active', '=', True)]))
+
     @api.depends('name', 'date_from', 'date_to')
     def _compute_description_validity(self):
         for allocation in self:

--- a/addons/hr_holidays/models/hr_leave_stress_day.py
+++ b/addons/hr_holidays/models/hr_leave_mandatory_day.py
@@ -4,9 +4,9 @@ from random import randint
 from odoo import fields, models
 
 
-class StressDay(models.Model):
-    _name = 'hr.leave.stress.day'
-    _description = 'Stress Day'
+class MandatoryDay(models.Model):
+    _name = 'hr.leave.mandatory.day'
+    _description = 'Mandatory Day'
     _order = 'start_date desc, end_date desc'
 
     name = fields.Char(required=True)
