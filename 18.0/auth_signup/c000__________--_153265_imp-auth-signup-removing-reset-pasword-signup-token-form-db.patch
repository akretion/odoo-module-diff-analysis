PR: https://github.com/odoo/odoo/pull/153265

From: 94b969b035da3d4200adde0d3581ef16f6858443
From: flvr-odoo
Date: 2024-07-10 19:20:16

Breaking data model changes score: 4, change matches:
-    signup_token = fields.Char(copy=False, groups="base.group_erp_manager", compute='_compute_token', inverse='_inverse_token')
-    signup_expiration = fields.Datetime(copy=False, groups="base.group_erp_manager")
-    signup_valid = fields.Boolean(compute='_compute_signup_valid', string='Signup Token is Valid')
-    signup_url = fields.Char(compute='_compute_signup_url', string='Signup URL')

Total Changes: 160

[IMP] auth_signup: removing reset pasword/signup token form db

This commit aims at not storing the tokens anymore.

The resonning behind this is that it is more secure to not store them
at all than to restrict the access to such tokens.

The token can now be stateless, it is a signed payload for which the
authenticity and integrity can be verified when used by the end-user.

This commits remove most field of res.users in auth_signup, and also
remove the warning on the user form view, saying that the link was
send with the link.

Also, add a toast warning when clicking the big button
"Send and Invitation Email" and "Send Password Reset Instruction"

closes odoo/odoo#153265

Related: odoo/enterprise#65902
Related: odoo/upgrade#5765
Signed-off-by: Denis Ledoux (dle) <dle@odoo.com>

================================= pseudo patch: =================================

--- a/addons/auth_signup/models/res_partner.py
+++ b/addons/auth_signup/models/res_partner.py
@@ -7,8 +7,8 @@ import werkzeug.urls
 from collections import defaultdict
 from datetime import datetime, timedelta
 
-from odoo import api, exceptions, fields, models, _
-from odoo.tools import sql
+from odoo import api, exceptions, fields, models, tools, _
+
 class SignupError(Exception):
     pass
 
@@ -24,42 +24,16 @@ def now(**kwargs):
 class ResPartner(models.Model):
     _inherit = 'res.partner'
 
-    signup_token = fields.Char(copy=False, groups="base.group_erp_manager", compute='_compute_token', inverse='_inverse_token')
     signup_type = fields.Char(string='Signup Token Type', copy=False, groups="base.group_erp_manager")
-    signup_expiration = fields.Datetime(copy=False, groups="base.group_erp_manager")
-    signup_valid = fields.Boolean(compute='_compute_signup_valid', string='Signup Token is Valid')
-    signup_url = fields.Char(compute='_compute_signup_url', string='Signup URL')
-
-    def init(self):
-        super().init()
-        if not sql.column_exists(self.env.cr, self._table, "signup_token"):
-            self.env.cr.execute("ALTER TABLE res_partner ADD COLUMN signup_token varchar")
-
-    @api.depends('signup_token', 'signup_expiration')
-    def _compute_signup_valid(self):
-        dt = now()
-        for partner, partner_sudo in zip(self, self.sudo()):
-            partner.signup_valid = bool(partner_sudo.signup_token) and \
-            (not partner_sudo.signup_expiration or dt <= partner_sudo.signup_expiration)
-
-    def _compute_signup_url(self):
-        """ proxy for function field towards actual implementation """
-        result = self.sudo()._get_signup_url_for_action()
-        for partner in self:
-            if any(u._is_internal() for u in partner.user_ids if u != self.env.user):
-                self.env['res.users'].check_access_rights('write')
-            if any(u._is_portal() for u in partner.user_ids if u != self.env.user):
-                self.env['res.partner'].check_access_rights('write')
-            partner.signup_url = result.get(partner.id, False)
-
-    def _compute_token(self):
-        for partner in self:
-            self.env.cr.execute('SELECT signup_token FROM res_partner WHERE id=%s', (partner._origin.id,))
-            partner.signup_token = self.env.cr.fetchone()[0]
 
-    def _inverse_token(self):
-        for partner in self:
-            self.env.cr.execute('UPDATE res_partner SET signup_token = %s WHERE id=%s', (partner.signup_token or None, partner.id))
+    def _get_signup_url(self):
+        self.ensure_one()
+        result = self.sudo()._get_signup_url_for_action()
+        if any(u._is_internal() for u in self.user_ids if u != self.env.user):
+            self.env['res.users'].check_access_rights('write')
+        if any(u._is_portal() for u in self.user_ids if u != self.env.user):
+            self.env['res.partner'].check_access_rights('write')
+        return result.get(self.id, False)
 
     def _get_signup_url_for_action(self, url=None, action=None, view_type=None, menu_id=None, res_id=None, model=None):
         """ generate a signup url for the given partner ids and action, possibly overriding
@@ -82,12 +56,7 @@ class ResPartner(models.Model):
             if signup_type:
                 route = 'reset_password' if signup_type == 'reset' else signup_type
 
-            if partner.sudo().signup_token and signup_type:
-                query['token'] = partner.sudo().signup_token
-            elif partner.user_ids:
-                query['login'] = partner.user_ids[0].login
-            else:
-                continue        # no signup token, no user, thus no signup url!
+            query['token'] = partner.sudo()._generate_signup_token()
 
             if url:
                 query['redirect'] = url
@@ -114,7 +83,6 @@ class ResPartner(models.Model):
             if not self.env.context.get('relative_url'):
                 signup_url = werkzeug.urls.url_join(base_url, signup_url)
             res[partner.id] = signup_url
-
         return res
 
     def action_signup_prepare(self):
@@ -134,24 +102,19 @@ class ResPartner(models.Model):
             partner = partner.sudo()
             if allow_signup and not partner.user_ids:
                 partner.signup_prepare()
-                res[partner.id]['auth_signup_token'] = partner.signup_token
+                res[partner.id]['auth_signup_token'] = partner._generate_signup_token()
             elif partner.user_ids:
                 res[partner.id]['auth_login'] = partner.user_ids[0].login
         return res
 
     def signup_cancel(self):
-        return self.write({'signup_token': False, 'signup_type': False, 'signup_expiration': False})
+        return self.write({'signup_type': None})
 
-    def signup_prepare(self, signup_type="signup", expiration=False):
+    def signup_prepare(self, signup_type="signup"):
         """ generate a new token for the partners with the given validity, if necessary
             :param expiration: the expiration datetime of the token (string, optional)
         """
-        for partner in self:
-            if expiration or not partner.signup_valid:
-                token = random_token()
-                while self._signup_retrieve_partner(token):
-                    token = random_token()
-                partner.write({'signup_token': token, 'signup_type': signup_type, 'signup_expiration': expiration})
+        self.write({'signup_type': signup_type})
         return True
 
     @api.model
@@ -162,36 +125,64 @@ class ResPartner(models.Model):
             :param raise_exception: if True, raise exception instead of returning False
             :return: partner (browse record) or False (if raise_exception is False)
         """
-        self.env.cr.execute("SELECT id FROM res_partner WHERE signup_token = %s AND active", (token,))
-        partner_id = self.env.cr.fetchone()
-        partner = self.browse(partner_id[0]) if partner_id else None
+        partner = self._get_partner_from_token(token)
         if not partner:
-            if raise_exception:
-                raise exceptions.UserError(_("Signup token '%s' is not valid", token))
-            return False
-        if check_validity and not partner.signup_valid:
-            if raise_exception:
-                raise exceptions.UserError(_("Signup token '%s' is no longer valid", token))
-            return False
+            raise exceptions.UserError(_("Signup token '%s' is not valid or expired", token))
         return partner
 
     @api.model
-    def signup_retrieve_info(self, token):
+    def _signup_retrieve_info(self, token):
         """ retrieve the user info about the token
-            :return: a dictionary with the user information:
+            :return: a dictionary with the user information if the token is valid, None otherwise:
                 - 'db': the name of the database
                 - 'token': the token, if token is valid
                 - 'name': the name of the partner, if token is valid
                 - 'login': the user login, if the user already exists
                 - 'email': the partner email, if the user does not exist
         """
-        partner = self._signup_retrieve_partner(token, raise_exception=True)
+        partner = self._get_partner_from_token(token)
+        if not partner:
+            return None
         res = {'db': self.env.cr.dbname}
-        if partner.signup_valid:
-            res['token'] = token
-            res['name'] = partner.name
+        res['token'] = token
+        res['name'] = partner.name
         if partner.user_ids:
             res['login'] = partner.user_ids[0].login
         else:
             res['email'] = res['login'] = partner.email or ''
         return res
+
+    def _get_login_date(self):
+        self.ensure_one()
+        users_login_dates = self.user_ids.mapped('login_date')
+        users_login_dates = list(filter(None, users_login_dates))  # remove falsy values
+        if any(users_login_dates):
+            return int(max(map(datetime.timestamp, users_login_dates)))
+        return None
+
+    def _generate_signup_token(self, expiration=None):
+        """ This function generate the signup token for the partner in self.
+            pre-condition: self.signup_type must be either 'signup' or 'reset'
+            :return: the signed payload/token that can be used to reset the password/signup.
+                - 'expiration': the time in hours before the expiration of the token
+        Since the last_login_date is part of the payload, this token is invalidated as soon as the user logs in
+        """
+        self.ensure_one()
+        if not expiration:
+            if self.signup_type == 'reset':
+                expiration = int(self.env['ir.config_parameter'].get_param("auth_signup.reset_password.validity.hours", 4))
+            else:
+                expiration = int(self.env['ir.config_parameter'].get_param("auth_signup.signup.validity.hours", 144))
+        plist = [self.id, self._get_login_date(), self.signup_type]
+        payload = tools.hash_sign(self.sudo().env, 'signup', plist, expiration_hours=expiration)
+        return payload
+
+    @api.model
+    def _get_partner_from_token(self, token):
+        if payload := tools.verify_hash_signed(self.sudo().env, 'signup', token):
+            partner_id, login_date, signup_type = payload
+            # login_date can be either an int or "None" as a string for signup
+            partner = self.browse(partner_id)
+            if login_date == partner._get_login_date() and signup_type == partner.browse(partner_id).signup_type:
+                return partner
+        return None

--- a/addons/auth_signup/models/res_users.py
+++ b/addons/auth_signup/models/res_users.py
@@ -68,8 +68,7 @@ class ResUsers(models.Model):
             # signup with a token: find the corresponding partner id
             partner = self.env['res.partner']._signup_retrieve_partner(token, check_validity=True, raise_exception=True)
             # invalidate signup token
-            partner.write({'signup_token': False, 'signup_type': False, 'signup_expiration': False})
-
+            partner.write({'signup_type': False})
             partner_user = partner.user_ids and partner.user_ids[0] or False
 
             # avoid overwriting existing (presumably correct) values with geolocation data
@@ -177,14 +176,17 @@ class ResUsers(models.Model):
 
     def action_reset_password(self):
         try:
-            return self._action_reset_password()
+            if self.env.context.get('create_user') == 1:
+                return self._action_reset_password(signup_type="signup")
+            else:
+                return self._action_reset_password(signup_type="reset")
         except MailDeliveryException as mde:
             if len(mde.args) == 2 and isinstance(mde.args[1], ConnectionRefusedError):
                 raise UserError(_("Could not contact the mail server, please check your outgoing email server configuration")) from mde
             else:
                 raise UserError(_("There was an error when trying to deliver your Email, please check your configuration")) from mde
 
-    def _action_reset_password(self):
+    def _action_reset_password(self, signup_type="reset"):
         """ create signup token for each user, and send their signup url by email """
         if self.env.context.get('install_mode') or self.env.context.get('import_file'):
             return
@@ -193,10 +195,7 @@ class ResUsers(models.Model):
         # prepare reset password signup
         create_mode = bool(self.env.context.get('create_user'))
 
-        # no time limit for initial invitation, only for reset password
-        expiration = False if create_mode else now(days=+1)
-
-        self.mapped('partner_id').signup_prepare(signup_type="reset", expiration=expiration)
+        self.mapped('partner_id').signup_prepare(signup_type=signup_type)
 
         # send email to users with their signup url
         account_created_template = None
@@ -236,7 +235,21 @@ class ResUsers(models.Model):
                         **email_values,
                     })
                     mail.send()
-            _logger.info("Password reset email sent for user <%s> to <%s>", user.login, user.email)
+            if signup_type == 'reset':
+                _logger.info("Password reset email sent for user <%s> to <%s>", user.login, user.email)
+                message = _('A reset password was send by email')
+            else:
+                _logger.info("Signup email sent for user <%s> to <%s>", user.login, user.email)
+                message = _('A signup link link was send by email')
+        return {
+            'type': 'ir.actions.client',
+            'tag': 'display_notification',
+            'params': {
+                'title': 'Notification',
+                'message': message,
+                'sticky': False
+            }
+        }
 
     def send_unregistered_user_reminder(self, after_days=5, batch_size=100):
         email_template = self.env.ref('auth_signup.mail_template_data_unregistered_users', raise_if_not_found=False)
@@ -346,7 +359,7 @@ class ResUsers(models.Model):
             users_with_email = users.filtered('email')
             if users_with_email:
                 try:
-                    users_with_email.with_context(create_user=True)._action_reset_password()
+                    users_with_email.with_context(create_user=True)._action_reset_password(signup_type='signup')
                 except MailDeliveryException:
                     users_with_email.partner_id.with_context(create_user=True).signup_cancel()
         return users
