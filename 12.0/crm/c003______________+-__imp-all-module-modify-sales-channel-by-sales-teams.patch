PR: https://github.com/odoo/odoo/pull/

From: 384647e58326476d5e68d2ecb5230cb6678a3fdb
From: lejeune quentin
Date: 2018-07-25 13:41:31

Structural Changes: 6
Total Changes: 30

[IMP] all_module : Modify "Sales Channel" by "Sales Teams"

================================= pseudo patch: =================================

--- a/addons/crm/models/crm_lead.py
+++ b/addons/crm/models/crm_lead.py
@@ -69,8 +69,8 @@ class Lead(models.Model):
     date_action_last = fields.Datetime('Last Action', readonly=True)
     email_from = fields.Char('Email', help="Email address of the contact", track_visibility='onchange', track_sequence=4, index=True)
     website = fields.Char('Website', index=True, help="Website of the contact")
-    team_id = fields.Many2one('crm.team', string='Sales Channel', oldname='section_id', default=lambda self: self.env['crm.team'].sudo()._get_default_team_id(user_id=self.env.uid),
-        index=True, track_visibility='onchange', help='When sending mails, the default email address is taken from the sales channel.')
+    team_id = fields.Many2one('crm.team', string='Sales Team', oldname='section_id', default=lambda self: self.env['crm.team'].sudo()._get_default_team_id(user_id=self.env.uid),
+        index=True, track_visibility='onchange', help='When sending mails, the default email address is taken from the Sales Team.')
     kanban_state = fields.Selection([('grey', 'No next activity planned'), ('red', 'Next activity late'), ('green', 'Next activity is planned')],
         string='Kanban State', compute='_compute_kanban_state')
     email_cc = fields.Text('Global CC', help="These email addresses will be added to the CC field of all inbound and outbound emails for this record before being sent. Separate multiple email addresses with a comma")
@@ -286,7 +286,7 @@ class Lead(models.Model):
 
     @api.model
     def create(self, vals):
-        # set up context used to find the lead's sales channel which is needed
+        # set up context used to find the lead's Sales Team which is needed
         # to correctly set the default stage_id
         context = dict(self._context or {})
         if vals.get('type') and not self._context.get('default_type'):
@@ -647,7 +647,7 @@ class Lead(models.Model):
             The resulting lead/opportunity will be the most important one (based on its confidence level)
             updated with values from other opportunities to merge.
             :param user_id : the id of the saleperson. If not given, will be determined by `_merge_data`.
-            :param team : the id of the sales channel. If not given, will be determined by `_merge_data`.
+            :param team : the id of the Sales Team. If not given, will be determined by `_merge_data`.
             :return crm.lead record resulting of th merge
         """
         if len(self.ids) <= 1:
@@ -671,7 +671,7 @@ class Lead(models.Model):
         # the first (head opp) will be a priority.
         merged_data = opportunities._merge_data(list(CRM_LEAD_FIELDS_TO_MERGE))
 
-        # force value for saleperson and sales channel
+        # force value for saleperson and Sales Team
         if user_id:
             merged_data['user_id'] = user_id
         if team_id:
@@ -680,7 +680,7 @@ class Lead(models.Model):
         # merge other data (mail.message, attachments, ...) from tail into head
         opportunities_head.merge_dependences(opportunities_tail)
 
-        # check if the stage is in the stages of the sales channel. If not, assign the stage with the lowest sequence
+        # check if the stage is in the stages of the Sales Team. If not, assign the stage with the lowest sequence
         if merged_data.get('team_id'):
             team_stage_ids = self.env['crm.stage'].search(['|', ('team_id', '=', merged_data['team_id']), ('team_id', '=', False)], order='sequence')
             if merged_data.get('stage_id') not in team_stage_ids.ids:
@@ -726,7 +726,7 @@ class Lead(models.Model):
     def _convert_opportunity_data(self, customer, team_id=False):
         """ Extract the data from a lead to create the opportunity
             :param customer : res.partner record
-            :param team_id : identifier of the sales channel to determine the stage
+            :param team_id : identifier of the Sales Team to determine the stage
         """
         if not team_id:
             team_id = self.team_id.id if self.team_id else False
@@ -951,7 +951,7 @@ class Lead(models.Model):
         return self.message_post(body=message)
 
     # ----------------------------------------
-    # Sales Channel Dashboard
+    # Sales Team Dashboard
     # ----------------------------------------
 
     @api.model

--- a/addons/crm/models/crm_stage.py
+++ b/addons/crm/models/crm_stage.py
@@ -25,7 +25,7 @@ class Stage(models.Model):
     @api.model
     def default_get(self, fields):
         """ Hack :  when going from the pipeline, creating a stage with a sales team in
-            context should not create a stage for the current sales channel only
+            context should not create a stage for the current Sales Team only
         """
         ctx = dict(self.env.context)
         if ctx.get('default_team_id') and not ctx.get('crm_team_mono'):
@@ -37,7 +37,7 @@ class Stage(models.Model):
     probability = fields.Float('Probability (%)', required=True, default=10.0, help="This percentage depicts the default/average probability of the Case for this stage to be a success")
     on_change = fields.Boolean('Change Probability Automatically', help="Setting this stage will change the probability automatically on the opportunity.")
     requirements = fields.Text('Requirements', help="Enter here the internal requirements for this stage (ex: Offer sent to customer). It will appear as a tooltip over the stage's name.")
-    team_id = fields.Many2one('crm.team', string='Sales Channel', ondelete='set null',
+    team_id = fields.Many2one('crm.team', string='Sales Team', ondelete='set null',
         help='Specific team that uses this stage. Other teams will not be able to see or use this stage.')
     legend_priority = fields.Text('Priority Management Explanation', translate=True,
         help='Explanation text to help users using the star and priority mechanism on stages or issues that are in this stage.')

--- a/addons/crm/models/crm_team.py
+++ b/addons/crm/models/crm_team.py
@@ -118,7 +118,7 @@ class Team(models.Model):
     @api.constrains('dashboard_graph_model', 'use_opportunities')
     def _check_graph_model(self):
         if not self.use_opportunities and self.dashboard_graph_model == 'crm.lead':
-            raise ValidationError(_("You have to enable the Pipeline on your sales channel to be able to set it as a content for the graph"))
+            raise ValidationError(_("You have to enable the Pipeline on your Sales Team to be able to set it as a content for the graph"))
 
     @api.multi
     def write(self, vals):
@@ -136,11 +136,11 @@ class Team(models.Model):
         if not user_team_id:
             user_team_id = self.search([], limit=1).id
             action['help'] = _("""<p class='o_view_nocontent_smiling_face'>Add new opportunities</p><p>
-    Looks like you are not a member of a sales channel. You should add yourself
-    as a member of one of the sales channel.
+    Looks like you are not a member of a Sales Team. You should add yourself
+    as a member of one of the Sales Team.
 </p>""")
             if user_team_id:
-                action['help'] += "<p>As you don't belong to any sales channel, Odoo opens the first one by default.</p>"
+                action['help'] += "<p>As you don't belong to any Sales Team, Odoo opens the first one by default.</p>"
 
         action_context = safe_eval(action['context'], {'uid': self.env.uid})
         if user_team_id:

--- a/addons/crm/models/res_partner.py
+++ b/addons/crm/models/res_partner.py
@@ -8,7 +8,7 @@ class Partner(models.Model):
 
     _inherit = 'res.partner'
 
-    team_id = fields.Many2one('crm.team', string='Sales Channel', oldname='section_id')
+    team_id = fields.Many2one('crm.team', string='Sales Team', oldname='section_id')
     opportunity_ids = fields.One2many('crm.lead', 'partner_id', string='Opportunities', domain=[('type', '=', 'opportunity')])
     meeting_ids = fields.Many2many('calendar.event', 'calendar_event_res_partner_rel', 'res_partner_id', 'calendar_event_id', string='Meetings', copy=False)
     opportunity_count = fields.Integer("Opportunity", compute='_compute_opportunity_count')
