PR: https://github.com/odoo/odoo/pull/79296

From: 5b64d252d219f314934809031c4efaf1f8255f1e
From: Thibault Libioulle
Date: 2022-01-17 14:07:45

Structural Changes: 13
Total Changes: 53

[IMP] product: add product tag model

This commit adds the product tag model.

Purpose
=======

The product tags allows to easily tag given types of product
independently from their category, following their product range, their
seasonal collection, their theme, etc

Specification
=============

A product template takes tags that are valid for all their variants.
In order to add granularity, product variants can also take additionnal
tags.
A field is defined on product variants to allow searching on both
product template and product variant tags.

task-2675384

Part-of: odoo/odoo#79296

================================= pseudo patch: =================================

--- a/addons/product/models/__init__.py
+++ b/addons/product/models/__init__.py
@@ -14,6 +14,7 @@ from . import product
 
 from . import product_attribute
 from . import product_pricelist
+from . import product_tag
 from . import res_company
 from . import res_currency
 from . import res_partner

--- a/addons/product/models/product.py
+++ b/addons/product/models/product.py
@@ -122,6 +122,9 @@ class ProductProduct(models.Model):
         'product.packaging', 'product_id', 'Product Packages',
         help="Gives the different ways to package the same product.")
 
+    additional_product_tag_ids = fields.Many2many('product.tag', 'product_tag_product_product_rel')
+    all_product_tag_ids = fields.Many2many('product.tag', compute='_compute_all_product_tag_ids', search='_search_all_product_tag_ids')
+
     # all image fields are base64 encoded and PIL-supported
 
     # all image_variant fields are technical and should not be displayed to the user
@@ -295,6 +298,16 @@ class ProductProduct(models.Model):
                 '&', ('product_id', '=', product.id), ('applied_on', '=', '0_product_variant')]
             product.pricelist_item_count = self.env['product.pricelist.item'].search_count(domain)
 
+    @api.depends('product_tag_ids', 'additional_product_tag_ids')
+    def _compute_all_product_tag_ids(self):
+        for product in self:
+            product.all_product_tag_ids = product.product_tag_ids | product.additional_product_tag_ids
+
+    def _search_all_product_tag_ids(self, operator, operand):
+        if operator in expression.NEGATIVE_TERM_OPERATORS:
+            return [('product_tag_ids', operator, operand), ('additional_product_tag_ids', operator, operand)]
+        return ['|', ('product_tag_ids', operator, operand), ('additional_product_tag_ids', operator, operand)]
+
     @api.onchange('uom_id')
     def _onchange_uom_id(self):
         if self.uom_id:

--- a/None
+++ b/addons/product/models/product_tag.py
@@ -0,0 +1,37 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+from random import randint
+
+from odoo import api, fields, models
+from odoo.osv import expression
+
+class ProductTag(models.Model):
+    _name = 'product.tag'
+    _description = 'Product Tag'
+
+    def _get_default_color(self):
+        return randint(1, 11)
+
+    name = fields.Char('Tag Name', required=True, translate=True)
+    color = fields.Integer('Color', default=_get_default_color)
+
+    product_template_ids = fields.Many2many('product.template', 'product_tag_product_template_rel')
+    product_product_ids = fields.Many2many('product.product', 'product_tag_product_product_rel')
+    product_ids = fields.Many2many(
+        'product.product', string='All Product Variants using this Tag',
+        compute='_compute_product_ids', search='_search_product_ids'
+    )
+
+    _sql_constraints = [
+        ('name_uniq', 'unique (name)', "Tag name already exists !"),
+    ]
+
+    @api.depends('product_template_ids', 'product_product_ids')
+    def _compute_product_ids(self):
+        for tag in self:
+            tag.product_ids = tag.product_template_ids.product_variant_ids | tag.product_product_ids
+
+    def _search_product_ids(self, operator, operand):
+        if operator in expression.NEGATIVE_TERM_OPERATORS:
+            return [('product_template_ids.product_variant_ids', operator, operand), ('product_product_ids', operator, operand)]
+        return ['|', ('product_template_ids.product_variant_ids', operator, operand), ('product_product_ids', operator, operand)]

--- a/addons/product/models/product_template.py
+++ b/addons/product/models/product_template.py
@@ -140,6 +140,8 @@ class ProductTemplate(models.Model):
         ('1', 'Favorite'),
     ], default='0', string="Favorite")
 
+    product_tag_ids = fields.Many2many('product.tag', 'product_tag_product_template_rel', string='Product Tags')
+
     def _compute_item_count(self):
         for template in self:
             # Pricelist item count counts the rules applicable on current template or on its variants.
