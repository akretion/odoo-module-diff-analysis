PR: https://github.com/odoo/odoo/pull/48395

From: 89ca89ca9269aea9ce2850db28ef6a7477e1ef18
From: std-odoo
Date: 2020-05-18 15:03:29

Breaking data model changes score: 1, change matches:
-    partner_address_email = fields.Char('Partner Contact Email', related='partner_id.email', readonly=True)

Total Changes: 52

[IMP] crm: allow editing phone and email of the lead

PURPOSE

Get rid of email / phone behavior on lead that is hard to understand: if
and contact is set fields are readonly, if not they are editable.

SPECIFICATIONS

We want to be able to edit them if a partner is set. If we write on the
email/phone of the lead, it should write on the partner (and vice-versa).

Even a Falsy value is propagated to the customer. Reason is that if you update
a contact information, it should be available for all other records. Setting
a void value probably means you want to stop contacting this contact. This is
now also propagated.

SIDE NOTE: MOBILE FIELD

Mobile field is a bit different. Main phone contact field is phone, and is
placed in the main contact section of the lead view. Mobile is under a more
technical / detailled tab and is not completely synchronized with the partner.
Like zip, city or country, changing partner updates lead information but
changing lead values does not propagate those to the customer. Those fields
can be used for deal-specific information if needed.

Statistics: 5k crm.lead use mobile for 80k active records which means it is
a "lesser field".

LINKS

Task ID 2207636
PR odoo/odoo#48395
Upgrade PR odoo/upgrade#1025

================================= pseudo patch: =================================

--- a/addons/crm/models/crm_lead.py
+++ b/addons/crm/models/crm_lead.py
@@ -3,9 +3,8 @@
 
 import logging
 import threading
+from datetime import date, datetime
 from psycopg2 import sql
-from datetime import datetime, timedelta, date
-from dateutil.relativedelta import relativedelta
 
 from odoo import api, fields, models, tools, SUPERUSER_ID
 from odoo.tools.translate import _
@@ -120,7 +119,6 @@ class Lead(models.Model):
         'res.partner', string='Customer', index=True, tracking=10,
         domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]",
         help="Linked partner (optional). Usually created when converting the lead. You can find a partner by its Name, TIN, Email or Internal Reference.")
-    partner_address_email = fields.Char('Partner Contact Email', related='partner_id.email', readonly=True)
     partner_is_blacklisted = fields.Boolean('Partner is blacklisted', related='partner_id.is_blacklisted', readonly=True)
     contact_name = fields.Char(
         'Contact Name', tracking=30,
@@ -133,10 +131,10 @@ class Lead(models.Model):
     title = fields.Many2one('res.partner.title', string='Title',compute='_compute_partner_id_values', readonly=False, store=True)
     email_from = fields.Char(
         'Email', tracking=40, index=True,
-        compute='_compute_partner_id_values', readonly=False, store=True)
+        compute='_compute_email_from', inverse='_inverse_email_from', readonly=False, store=True)
     phone = fields.Char(
         'Phone', tracking=50,
-        compute='_compute_partner_id_values', readonly=False, store=True)
+        compute='_compute_phone', inverse='_inverse_phone', readonly=False, store=True)
     mobile = fields.Char('Mobile', compute='_compute_partner_id_values', readonly=False, store=True)
     phone_mobile_search = fields.Char('Phone/Mobile', store=False, search='_search_phone_mobile_search')
     phone_state = fields.Selection([
@@ -170,6 +168,7 @@ class Lead(models.Model):
     lost_reason = fields.Many2one(
         'crm.lost.reason', string='Lost Reason',
         index=True, ondelete='restrict', tracking=True)
+    ribbon_message = fields.Char('Ribbon message', compute='_compute_ribbon_message')
 
     _sql_constraints = [
         ('check_probability', 'check(probability >= 0 and probability <= 100)', 'The probability of closing the deal should be between 0% and 100%!')
@@ -244,7 +243,29 @@ class Lead(models.Model):
     def _compute_partner_id_values(self):
         """ compute the new values when partner_id has changed """
         for lead in self:
-            lead.update(lead._preare_values_from_partner(lead.partner_id))
+            lead.update(lead._prepare_values_from_partner(lead.partner_id))
+
+    @api.depends('partner_id.email')
+    def _compute_email_from(self):
+        for lead in self:
+            if lead.partner_id and lead.partner_id.email != lead.email_from:
+                lead.email_from = lead.partner_id.email
+
+    def _inverse_email_from(self):
+        for lead in self:
+            if lead.partner_id and lead.email_from != lead.partner_id.email:
+                lead.partner_id.email = lead.email_from
+
+    @api.depends('partner_id.phone')
+    def _compute_phone(self):
+        for lead in self:
+            if lead.partner_id and lead.phone != lead.partner_id.phone:
+                lead.phone = lead.partner_id.phone
+
+    def _inverse_phone(self):
+        for lead in self:
+            if lead.partner_id and lead.phone != lead.partner_id.phone:
+                lead.partner_id.phone = lead.phone
 
     @api.depends('phone', 'country_id.code')
     def _compute_phone_state(self):
@@ -309,6 +330,21 @@ class Lead(models.Model):
         for lead in self:
             lead.meeting_count = mapped_data.get(lead.id, 0)
 
+    @api.depends('email_from', 'phone', 'partner_id')
+    def _compute_ribbon_message(self):
+        for lead in self:
+            will_write_email = lead.partner_id and lead.email_from != lead.partner_id.email
+            will_write_phone = lead.partner_id and lead.phone != lead.partner_id.phone
+
+            if will_write_email and will_write_phone:
+                lead.ribbon_message = _('By saving this change, the customer email and phone number will also be updated.')
+            elif will_write_email:
+                lead.ribbon_message = _('By saving this change, the customer email will also be updated.')
+            elif will_write_phone:
+                lead.ribbon_message = _('By saving this change, the customer phone number will also be updated.')
+            else:
+                lead.ribbon_message = False
+
     def _search_phone_mobile_search(self, operator, value):
         if len(value) <= 2:
             raise UserError(_('Please enter at least 3 digits when searching on phone / mobile.'))
@@ -344,7 +380,7 @@ class Lead(models.Model):
         if self.mobile:
             self.mobile = self.phone_format(self.mobile)
 
-    def _preare_values_from_partner(self, partner):
+    def _prepare_values_from_partner(self, partner):
         """ Get a dictionary with values coming from customer information to
         copy on a lead. Email_from and phone fields get the current lead
         values to avoid being reset if customer has no value for them. """
@@ -360,8 +396,6 @@ class Lead(models.Model):
             'city': partner.city,
             'state_id': partner.state_id.id,
             'country_id': partner.country_id.id,
-            'email_from': partner.email or self.email_from,
-            'phone': partner.phone or self.phone,
             'mobile': partner.mobile,
             'zip': partner.zip,
             'function': partner.function,
