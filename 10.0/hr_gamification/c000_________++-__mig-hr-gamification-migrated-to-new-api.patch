PR: https://github.com/odoo/odoo/pull/

From: 99e717733ba78e4f630cfabb988aabf069070f10
From: Jainik Patel
Date: 2016-08-05 08:18:02

Breaking data model changes score: 7, change matches:
-    _inherit = ['gamification.badge.user']
-    _inherit = ['gamification.badge']
+    goal_ids = fields.One2many('gamification.goal', string='Employee HR Goals', compute='_compute_employee_goals')
+    badge_ids = fields.One2many(
+    direct_badge_ids = fields.One2many(
+    goal_ids = fields.One2many('gamification.goal', 'user_id')
+    badge_ids = fields.One2many('gamification.badge.user', 'user_id')

Total Changes: 142

[MIG] hr_gamification: Migrated to new api.

================================= pseudo patch: =================================

--- a/addons/hr_gamification/models/gamification.py
+++ b/addons/hr_gamification/models/gamification.py
@@ -1,45 +1,39 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from openerp.osv import fields, osv
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
 
 
-class hr_gamification_badge_user(osv.Model):
+class GamificationBadgeUser(models.Model):
     """User having received a badge"""
+    _inherit = 'gamification.badge.user'
 
-    _name = 'gamification.badge.user'
-    _inherit = ['gamification.badge.user']
+    employee_id = fields.Many2one('hr.employee', string='Employee')
 
-    _columns = {
-        'employee_id': fields.many2one("hr.employee", string='Employee'),
-    }
+    @api.constrains('employee_id')
+    def _check_employee_related_user(self):
+        for badge_user in self:
+            if badge_user.employee_id not in badge_user.user_id.employee_ids:
+                raise ValidationError(_('The selected employee does not correspond to the selected user.'))
 
-    def _check_employee_related_user(self, cr, uid, ids, context=None):
-        for badge_user in self.browse(cr, uid, ids, context=context):
-            if badge_user.user_id and badge_user.employee_id:
-                if badge_user.employee_id not in badge_user.user_id.employee_ids:
-                    return False
-        return True
 
-    _constraints = [
-        (_check_employee_related_user, "The selected employee does not correspond to the selected user.", ['employee_id']),
-    ]
+class GamificationBadge(models.Model):
+    _inherit = 'gamification.badge'
 
+    granted_employees_count = fields.Integer(compute="_compute_granted_employees_count")
 
-class gamification_badge(osv.Model):
-    _name = 'gamification.badge'
-    _inherit = ['gamification.badge']
+    @api.depends('owner_ids.employee_id')
+    def _compute_granted_employees_count(self):
+        for badge in self:
+            badge.granted_employees_count = self.env['gamification.badge.user'].search_count([
+                ('badge_id', '=', badge.id),
+                ('employee_id', '!=', False)
+            ])
 
-    def get_granted_employees(self, cr, uid, badge_ids, context=None):
-        if context is None:
-            context = {}
-
-        employee_ids = []
-        badge_user_ids = self.pool.get('gamification.badge.user').search(cr, uid, [('badge_id', 'in', badge_ids), ('employee_id', '!=', False)], context=context)
-        for badge_user in self.pool.get('gamification.badge.user').browse(cr, uid, badge_user_ids, context):
-            employee_ids.append(badge_user.employee_id.id)
-        # remove duplicates
-        employee_ids = list(set(employee_ids))
+    @api.multi
+    def get_granted_employees(self):
+        employee_ids = self.mapped('owner_ids.employee_id').ids
         return {
             'type': 'ir.actions.act_window',
             'name': 'Granted Employees',
@@ -48,13 +42,3 @@ class gamification_badge(osv.Model):
             'res_model': 'hr.employee',
             'domain': [('id', 'in', employee_ids)]
         }
-
-    def _get_granted_employees_count(self, cr, uid, ids, field_name, arg, context=None):
-        res = {}
-        for badge in self.browse(cr, uid, ids, context=context):
-            res[badge.id] = self.pool.get('gamification.badge.user').search_count(cr, uid, [('badge_id', '=', badge.id), ('employee_id', '!=', False)], context=context)
-        return res
-
-    _columns = {
-        'granted_employees_count': fields.function(_get_granted_employees_count, type="integer")
-    }

--- a/addons/hr_gamification/models/hr_employee.py
+++ b/addons/hr_gamification/models/hr_employee.py
@@ -1,49 +1,45 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from openerp.osv import fields, osv
+from odoo import api, fields, models
 
 
-class hr_employee(osv.osv):
-    _name = "hr.employee"
+class HrEmployee(models.Model):
     _inherit = "hr.employee"
 
-    def _get_employee_goals(self, cr, uid, ids, field_name, arg, context=None):
-        """Return the list of goals assigned to the employee"""
-        res = {}
-        for employee in self.browse(cr, uid, ids, context=context):
-            res[employee.id] = self.pool.get('gamification.goal').search(cr,uid,[('user_id', '=', employee.user_id.id), ('challenge_id.category', '=', 'hr')], context=context)
-        return res
-
-    def _get_employee_badges(self, cr, uid, ids, field_name, arg, context=None):
-        """Return the list of badge_users assigned to the employee"""
-        res = {}
-        for employee in self.browse(cr, uid, ids, context=context):
-            res[employee.id] = self.pool.get('gamification.badge.user').search(cr, uid, [
-                '|',
-                    ('employee_id', '=', employee.id),
-                    '&',
-                        ('employee_id', '=', False),
-                        ('user_id', '=', employee.user_id.id)
-                ], context=context)
-        return res
-
-    def _has_badges(self, cr, uid, ids, field_name, arg, context=None):
-        """Return the list of badge_users assigned to the employee"""
-        res = {}
-        for employee in self.browse(cr, uid, ids, context=context):
-            employee_badge_ids = self.pool.get('gamification.badge.user').search(cr, uid, [
-                '|',
-                    ('employee_id', '=', employee.id),
-                    '&',
-                        ('employee_id', '=', False),
-                        ('user_id', '=', employee.user_id.id)
-                ], context=context)
-            res[employee.id] = len(employee_badge_ids) > 0
-        return res
-
-    _columns = {
-        'goal_ids': fields.function(_get_employee_goals, type="one2many", obj='gamification.goal', string="Employee HR Goals"),
-        'badge_ids': fields.function(_get_employee_badges, type="one2many", obj='gamification.badge.user', string="Employee Badges"),
-        'has_badges': fields.function(_has_badges, type="boolean", string="Has Badges"),
-    }
+    goal_ids = fields.One2many('gamification.goal', string='Employee HR Goals', compute='_compute_employee_goals')
+    badge_ids = fields.One2many(
+        'gamification.badge.user', string='Employee Badges', compute='_compute_employee_badges',
+        help="All employee badges, linked to the employee either directly or through the user"
+    )
+    has_badges = fields.Boolean(compute='_compute_employee_badges')
+    # necessary for correct dependencies of badge_ids and has_badges
+    direct_badge_ids = fields.One2many(
+        'gamification.badge.user', 'employee_id',
+        help="Badges directly linked to the employee")
+
+    @api.depends('user_id.goal_ids.challenge_id.category')
+    def _compute_employee_goals(self):
+        for employee in self:
+            employee.goal_ids = self.env['gamification.goal'].search([
+                ('user_id', '=', employee.user_id.id),
+                ('challenge_id.category', '=', 'hr'),
+            ])
+
+    @api.depends('direct_badge_ids', 'user_id.badge_ids.employee_id')
+    def _compute_employee_badges(self):
+        for employee in self:
+            badge_ids = self.env['gamification.badge.user'].search([
+                '|', ('employee_id', '=', employee.id),
+                     '&', ('employee_id', '=', False),
+                          ('user_id', '=', employee.user_id.id)
+            ])
+            employee.has_badges = bool(badge_ids)
+            employee.badge_ids = badge_ids
+
+
+class ResUsers(models.Model):
+    _inherit = 'res.users'
+
+    goal_ids = fields.One2many('gamification.goal', 'user_id')
+    badge_ids = fields.One2many('gamification.badge.user', 'user_id')
