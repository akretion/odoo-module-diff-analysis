PR: https://github.com/odoo/odoo/pull/61467

From: bbf4783ac68f296dd028b46aff882b4187a0f9fb
From: Thibault DelavallÃ©e
Date: 2021-08-18 13:38:08

Breaking data model changes scores: del:11 + add:0, change matches:
-    ignored = fields.Integer(compute="_compute_statistics")
-    ignored = fields.Datetime(help='Date when the email has been invalidated. '
-    scheduled = fields.Datetime(help='Date when the email has been created', default=fields.Datetime.now)
-    sent = fields.Datetime(help='Date when the email has been sent')
-    exception = fields.Datetime(help='Date of technical error leading to the email not being sent')
-    opened = fields.Datetime(help='Date when the email has been opened the first time')
-    replied = fields.Datetime(help='Date when this email has been replied for the first time.')
-    bounced = fields.Datetime(help='Date when this email has bounced.')
-    clicked = fields.Datetime(help='Date when customer clicked on at least one tracked link')
-    state = fields.Selection(compute="_compute_state",
-    state_update = fields.Datetime(compute="_compute_state", string='State Update',

Total Changes: 204

[REF] mass_mailing: improve traces state management

PURPOSE

Improve modeling and performances of mass mailing by manually updating trace
status instead of using complex computed fields and lessening fields usage.

Remove some fields and keep only relevant metrics to simplify and clean trace
model.

SPECIFICATIONS

In this commit we clean the way trace state is managed. Currently it is a
computed field based on several datetime fields. However this generates a
lot of noise in the table as well as unnecessary computation

  * there are several columns (one for each state) storing datetime at
    which status was reached. Generally only 2 or 3 contain relevant
    information;
  * state could be set in code directly to avoid a computed field based on
    many triggers;
  * recomputing it each time a date changes is not necessarily necessary;
  * state value can always be updated manually as this is main done through
    some automated server update (mailgateway, link clicks, ...);

As trace states and its triggers should not be updated manually it is better
to synchronize it in code flow. When there is an exception or update done
through sending or gateway status is updated as well accordingly. Various
datetime fields are also updated at the same time. In order to align with
notification model mail and sms trace status are updated to a classic field.
Only last status update is now kept as there is no need to store the entire
history of status change.

We keep only a datetime for relevant metrics: open, reply and click. Other
datetime bring no real value. Knowing when a trace was in error or bounced
is not necessary. Indeed exception generally indicates a server issue (at
sending), cancel indicates a data issue (at sending) and bounce depends on
customer email server.

Status update is removed as using write_date is sufficient. Once created
traces are updated only when an external event occurs (opened, replied, ...).
It allows to simplify trace model.

We also rename ignored field into canceled to match naming use through mail
and sms.

QUERY COUNTERS

This change has some positive update on query counters when sending mailings
as traces have less unnecessary status update compared to priori this change.

LINKS

Task ID-2377974
Community PR odoo/odoo#61467
Enterprise PR odoo/enterprise#14633
Upgrade PR odoo/upgrade#1907

================================= pseudo patch: =================================

--- a/addons/mass_mailing/models/mail_mail.py
+++ b/addons/mass_mailing/models/mail_mail.py
@@ -81,7 +81,7 @@ class MailMail(models.Model):
         for mail in self:
             if mail.mailing_id:
                 if mail_sent is True and mail.mailing_trace_ids:
-                    mail.mailing_trace_ids.write({'sent': fields.Datetime.now(), 'exception': False})
+                    mail.mailing_trace_ids.set_sent()
                 elif mail_sent is False and mail.mailing_trace_ids:
-                    mail.mailing_trace_ids.write({'exception': fields.Datetime.now(), 'failure_type': failure_type})
+                    mail.mailing_trace_ids.set_failed(failure_type=failure_type)
         return super(MailMail, self)._postprocess_sent_message(success_pids, failure_reason=failure_reason, failure_type=failure_type)

--- a/addons/mass_mailing/models/mail_thread.py
+++ b/addons/mass_mailing/models/mail_thread.py
@@ -23,8 +23,8 @@ class MailThread(models.AbstractModel):
             thread_references = message_dict['references'] or message_dict['in_reply_to']
             msg_references = tools.mail_header_msgid_re.findall(thread_references)
             if msg_references:
-                self.env['mailing.trace'].set_opened(mail_message_ids=msg_references)
-                self.env['mailing.trace'].set_replied(mail_message_ids=msg_references)
+                self.env['mailing.trace'].set_opened(domain=[('message_id', 'in', msg_references)])
+                self.env['mailing.trace'].set_replied(domain=[('message_id', 'in', msg_references)])
         return super(MailThread, self)._message_route_process(message, message_dict, routes)
 
     def message_post_with_template(self, template_id, **kwargs):
@@ -53,10 +53,10 @@ class MailThread(models.AbstractModel):
         bounced_partner = message_dict['bounced_partner']
 
         if bounced_msg_id:
-            self.env['mailing.trace'].set_bounced(mail_message_ids=bounced_msg_id)
+            self.env['mailing.trace'].set_bounced(domain=[('message_id', 'in', bounced_msg_id)])
         if bounced_email:
             three_months_ago = fields.Datetime.to_string(datetime.datetime.now() - datetime.timedelta(weeks=13))
-            stats = self.env['mailing.trace'].search(['&', ('bounced', '>', three_months_ago), ('email', '=ilike', bounced_email)]).mapped('bounced')
+            stats = self.env['mailing.trace'].search(['&', '&', ('trace_status', '=', 'bounce'), ('write_date', '>', three_months_ago), ('email', '=ilike', bounced_email)]).mapped('write_date')
             if len(stats) >= BLACKLIST_MAX_BOUNCED_LIMIT and (not bounced_partner or any(p.message_bounce >= BLACKLIST_MAX_BOUNCED_LIMIT for p in bounced_partner)):
                 if max(stats) > min(stats) + datetime.timedelta(weeks=1):
                     blacklist_rec = self.env['mail.blacklist'].sudo()._add(bounced_email)

--- a/addons/mass_mailing/models/mailing.py
+++ b/addons/mass_mailing/models/mailing.py
@@ -143,7 +143,7 @@ class MassMailing(models.Model):
     total = fields.Integer(compute="_compute_total")
     scheduled = fields.Integer(compute="_compute_statistics")
     expected = fields.Integer(compute="_compute_statistics")
-    ignored = fields.Integer(compute="_compute_statistics")
+    canceled = fields.Integer(compute="_compute_statistics")
     sent = fields.Integer(compute="_compute_statistics")
     delivered = fields.Integer(compute="_compute_statistics")
     opened = fields.Integer(compute="_compute_statistics")
@@ -203,7 +203,7 @@ class MassMailing(models.Model):
     def _compute_statistics(self):
         """ Compute statistics of the mass mailing """
         for key in (
-            'scheduled', 'expected', 'ignored', 'sent', 'delivered', 'opened',
+            'scheduled', 'expected', 'canceled', 'sent', 'delivered', 'opened',
             'clicked', 'replied', 'bounced', 'failed', 'received_ratio',
             'opened_ratio', 'replied_ratio', 'bounced_ratio',
         ):
@@ -216,15 +216,15 @@ class MassMailing(models.Model):
             SELECT
                 m.id as mailing_id,
                 COUNT(s.id) AS expected,
-                COUNT(CASE WHEN s.sent is not null THEN 1 ELSE null END) AS sent,
-                COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is null AND s.ignored is null AND s.bounced is null THEN 1 ELSE null END) AS scheduled,
-                COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is null AND s.ignored is not null THEN 1 ELSE null END) AS ignored,
-                COUNT(CASE WHEN s.sent is not null AND s.exception is null AND s.bounced is null THEN 1 ELSE null END) AS delivered,
-                COUNT(CASE WHEN s.opened is not null THEN 1 ELSE null END) AS opened,
-                COUNT(CASE WHEN s.clicked is not null THEN 1 ELSE null END) AS clicked,
-                COUNT(CASE WHEN s.replied is not null THEN 1 ELSE null END) AS replied,
-                COUNT(CASE WHEN s.bounced is not null THEN 1 ELSE null END) AS bounced,
-                COUNT(CASE WHEN s.exception is not null THEN 1 ELSE null END) AS failed
+                COUNT(s.sent_datetime) AS sent,
+                COUNT(s.trace_status) FILTER (WHERE s.trace_status = 'outgoing') AS scheduled,
+                COUNT(s.trace_status) FILTER (WHERE s.trace_status = 'cancel') AS canceled,
+                COUNT(s.trace_status) FILTER (WHERE s.trace_status in ('sent', 'open', 'reply')) AS delivered,
+                COUNT(s.trace_status) FILTER (WHERE s.trace_status in ('open', 'reply')) AS opened,
+                COUNT(s.links_click_datetime) AS clicked,
+                COUNT(s.trace_status) FILTER (WHERE s.trace_status = 'reply') AS replied,
+                COUNT(s.trace_status) FILTER (WHERE s.trace_status = 'bounce') AS bounced,
+                COUNT(s.trace_status) FILTER (WHERE s.trace_status = 'error') AS failed
             FROM
                 mailing_trace s
             RIGHT JOIN
@@ -236,7 +236,7 @@ class MassMailing(models.Model):
                 m.id
         """, (tuple(self.ids), ))
         for row in self.env.cr.dictfetchall():
-            total = (row['expected'] - row['ignored']) or 1
+            total = (row['expected'] - row['canceled']) or 1
             row['received_ratio'] = 100.0 * row['delivered'] / total
             row['opened_ratio'] = 100.0 * row['opened'] / total
             row['replied_ratio'] = 100.0 * row['replied'] / total
@@ -431,8 +431,8 @@ class MassMailing(models.Model):
     def action_view_traces_scheduled(self):
         return self._action_view_traces_filtered('scheduled')
 
-    def action_view_traces_ignored(self):
-        return self._action_view_traces_filtered('ignored')
+    def action_view_traces_canceled(self):
+        return self._action_view_traces_filtered('canceled')
 
     def action_view_traces_failed(self):
         return self._action_view_traces_filtered('failed')
@@ -460,25 +460,31 @@ class MassMailing(models.Model):
         }
 
     def action_view_opened(self):
-        return self._action_view_documents_filtered('opened')
+        return self._action_view_documents_filtered('open')
 
     def action_view_replied(self):
-        return self._action_view_documents_filtered('replied')
+        return self._action_view_documents_filtered('reply')
 
     def action_view_bounced(self):
-        return self._action_view_documents_filtered('bounced')
+        return self._action_view_documents_filtered('bounce')
 
     def action_view_delivered(self):
         return self._action_view_documents_filtered('delivered')
 
     def _action_view_documents_filtered(self, view_filter):
-        if view_filter in ('opened', 'replied', 'bounced'):
-            opened_stats = self.mailing_trace_ids.filtered(lambda stat: stat[view_filter])
-        elif view_filter == ('delivered'):
-            opened_stats = self.mailing_trace_ids.filtered(lambda stat: stat.sent and not stat.bounced)
+        if view_filter in ('reply', 'bounce'):
+            found_traces = self.mailing_trace_ids.filtered(lambda trace: trace.trace_status == view_filter)
+        elif view_filter == 'open':
+            found_traces = self.mailing_trace_ids.filtered(lambda trace: trace.trace_status in ('open', 'reply'))
+        elif view_filter == 'click':
+            found_traces = self.mailing_trace_ids.filtered(lambda trace: trace.links_click_datetime)
+        elif view_filter == 'delivered':
+            found_traces = self.mailing_trace_ids.filtered(lambda trace: trace.trace_status in ('sent', 'open', 'reply'))
+        elif view_filter == 'sent':
+            found_traces = self.mailing_trace_ids.filtered(lambda trace: trace.sent_datetime)
         else:
-            opened_stats = self.env['mailing.trace']
-        res_ids = opened_stats.mapped('res_id')
+            found_traces = self.env['mailing.trace']
+        res_ids = found_traces.mapped('res_id')
         model_name = self.env['ir.model']._get(self.mailing_model_real).display_name
         return {
             'name': model_name,

--- a/addons/mass_mailing/models/mailing_trace.py
+++ b/addons/mass_mailing/models/mailing_trace.py
@@ -12,9 +12,9 @@ class MailingTrace(models.Model):
 
     Note:: State management / Error codes / Failure types summary
 
-      * state
+      * trace_status
         'outgoing', 'sent', 'opened', 'replied',
-        'exception', 'bounced', 'ignored'
+        'error', 'bouce', 'cancel'
       * failure_type
         # mass_mailing
         "SMTP", "RECIPIENT", "BOUNCE", "UNKNOWN", "mail_email_missing"
@@ -25,7 +25,7 @@ class MailingTrace(models.Model):
         'sms_server', 'sms_acc'
         # mass_mailing_sms mass mode specific codes
         'sms_blacklist', 'sms_duplicate', 'sms_optout',
-      * ignored:
+      * cancel:
         * mail: set in get_mail_values in composer, if email is blacklisted
           (mail) or in opt_out / seen list (mass_mailing) or email_to is void
           or incorrectly formatted (mass_mailing) - based on mail cancel state
@@ -47,7 +47,7 @@ class MailingTrace(models.Model):
     _name = 'mailing.trace'
     _description = 'Mailing Statistics'
     _rec_name = 'id'
-    _order = 'scheduled DESC'
+    _order = 'create_date DESC'
 
     trace_type = fields.Selection([('mail', 'Mail')], string='Type', default='mail', required=True)
     display_name = fields.Char(compute='_compute_display_name')
@@ -61,39 +61,30 @@ class MailingTrace(models.Model):
         index=True,
     )
     email = fields.Char(string="Email", help="Normalized email address")
-    message_id = fields.Char(string='Message-ID')
+    message_id = fields.Char(string='Message-ID', help="Technical field for the email Message-ID (RFC 2392)")
     medium_id = fields.Many2one(related='mass_mailing_id.medium_id')
     source_id = fields.Many2one(related='mass_mailing_id.source_id')
     # document
     model = fields.Char(string='Document model', required=True)
     res_id = fields.Many2oneReference(string='Document ID', model_field='model', required=True)
-    # campaign / wave data
+    # campaign data
     mass_mailing_id = fields.Many2one('mailing.mailing', string='Mailing', index=True, ondelete='cascade')
     campaign_id = fields.Many2one(
         related='mass_mailing_id.campaign_id',
         string='Campaign',
         store=True, readonly=True, index=True)
-    # Bounce and tracking
-    ignored = fields.Datetime(help='Date when the email has been invalidated. '
-                                   'Invalid emails are blacklisted, opted-out or invalid email format')
-    scheduled = fields.Datetime(help='Date when the email has been created', default=fields.Datetime.now)
-    sent = fields.Datetime(help='Date when the email has been sent')
-    exception = fields.Datetime(help='Date of technical error leading to the email not being sent')
-    opened = fields.Datetime(help='Date when the email has been opened the first time')
-    replied = fields.Datetime(help='Date when this email has been replied for the first time.')
-    bounced = fields.Datetime(help='Date when this email has bounced.')
-    # Link tracking
-    links_click_ids = fields.One2many('link.tracker.click', 'mailing_trace_id', string='Links click')
-    clicked = fields.Datetime(help='Date when customer clicked on at least one tracked link')
     # Status
-    state = fields.Selection(compute="_compute_state",
-                             selection=[('outgoing', 'Outgoing'),
-                                        ('exception', 'Exception'),
-                                        ('sent', 'Sent'),
-                                        ('opened', 'Opened'),
-                                        ('replied', 'Replied'),
-                                        ('bounced', 'Bounced'),
-                                        ('ignored', 'Ignored')], store=True)
+    sent_datetime = fields.Datetime('Sent On')
+    open_datetime = fields.Datetime('Opened On')
+    reply_datetime = fields.Datetime('Replied On')
+    trace_status = fields.Selection(selection=[
+        ('outgoing', 'Outgoing'),
+        ('sent', 'Sent'),
+        ('open', 'Opened'),
+        ('reply', 'Replied'),
+        ('bounce', 'Bounced'),
+        ('error', 'Exception'),
+        ('cancel', 'Canceled')], string='Status', default='outgoing')
     failure_type = fields.Selection(selection=[
         ("SMTP", "Connection failed (outgoing mail server problem)"),
         ("RECIPIENT", "Invalid email address"),
@@ -105,34 +96,15 @@ class MailingTrace(models.Model):
         ("mail_optout", "Opted Out"),
         ("mail_dup", "Duplicated Email"),
     ], string='Failure type')
-    state_update = fields.Datetime(compute="_compute_state", string='State Update',
-                                   help='Last state update of the mail',
-                                   store=True)
+    # Link tracking
+    links_click_ids = fields.One2many('link.tracker.click', 'mailing_trace_id', string='Links click')
+    links_click_datetime = fields.Datetime('Clicked On', help='Stores last click datetime in case of multi clicks.')
 
     @api.depends('trace_type', 'mass_mailing_id')
     def _compute_display_name(self):
         for trace in self:
             trace.display_name = '%s: %s (%s)' % (trace.trace_type, trace.mass_mailing_id.name, trace.id)
 
-    @api.depends('sent', 'opened', 'clicked', 'replied', 'bounced', 'exception', 'ignored')
-    def _compute_state(self):
-        self.update({'state_update': fields.Datetime.now()})
-        for stat in self:
-            if stat.ignored:
-                stat.state = 'ignored'
-            elif stat.exception:
-                stat.state = 'exception'
-            elif stat.replied:
-                stat.state = 'replied'
-            elif stat.opened or stat.clicked:
-                stat.state = 'opened'
-            elif stat.bounced:
-                stat.state = 'bounced'
-            elif stat.sent:
-                stat.state = 'sent'
-            else:
-                stat.state = 'outgoing'
-
     @api.model_create_multi
     def create(self, values_list):
         for values in values_list:
@@ -150,33 +122,37 @@ class MailingTrace(models.Model):
             'res_id': self.res_id
         }
 
-    def _get_records(self, mail_mail_ids=None, mail_message_ids=None, domain=None):
-        if not self.ids and mail_mail_ids:
-            base_domain = [('mail_mail_id_int', 'in', mail_mail_ids)]
-        elif not self.ids and mail_message_ids:
-            base_domain = [('message_id', 'in', mail_message_ids)]
-        else:
-            base_domain = [('id', 'in', self.ids)]
-        if domain:
-            base_domain = ['&'] + domain + base_domain
-        return self.search(base_domain)
-
-    def set_opened(self, mail_mail_ids=None, mail_message_ids=None):
-        traces = self._get_records(mail_mail_ids, mail_message_ids, [('opened', '=', False)])
-        traces.write({'opened': fields.Datetime.now(), 'bounced': False})
+    def set_sent(self, domain=None):
+        traces = self + (self.search(domain) if domain else self.env['mailing.trace'])
+        traces.write({'trace_status': 'sent', 'sent_datetime': fields.Datetime.now(), 'failure_type': False})
+        return traces
+
+    def set_opened(self, domain=None):
+        traces = self + (self.search(domain) if domain else self.env['mailing.trace'])
+        traces.write({'trace_status': 'open', 'open_datetime': fields.Datetime.now()})
+        return traces
+
+    def set_clicked(self, domain=None):
+        traces = self + (self.search(domain) if domain else self.env['mailing.trace'])
+        traces.write({'links_click_datetime': fields.Datetime.now()})
+        return traces
+
+    def set_replied(self, domain=None):
+        traces = self + (self.search(domain) if domain else self.env['mailing.trace'])
+        traces.write({'trace_status': 'reply', 'reply_datetime': fields.Datetime.now()})
         return traces
 
-    def set_clicked(self, mail_mail_ids=None, mail_message_ids=None):
-        traces = self._get_records(mail_mail_ids, mail_message_ids, [('clicked', '=', False)])
-        traces.write({'clicked': fields.Datetime.now()})
+    def set_bounced(self, domain=None):
+        traces = self + (self.search(domain) if domain else self.env['mailing.trace'])
+        traces.write({'trace_status': 'bounce'})
         return traces
 
-    def set_replied(self, mail_mail_ids=None, mail_message_ids=None):
-        traces = self._get_records(mail_mail_ids, mail_message_ids, [('replied', '=', False)])
-        traces.write({'replied': fields.Datetime.now()})
+    def set_failed(self, domain=None, failure_type=False):
+        traces = self + (self.search(domain) if domain else self.env['mailing.trace'])
+        traces.write({'trace_status': 'error', 'failure_type': failure_type})
         return traces
 
-    def set_bounced(self, mail_mail_ids=None, mail_message_ids=None):
-        traces = self._get_records(mail_mail_ids, mail_message_ids, [('bounced', '=', False), ('opened', '=', False)])
-        traces.write({'bounced': fields.Datetime.now()})
+    def set_canceled(self, domain=None):
+        traces = self + (self.search(domain) if domain else self.env['mailing.trace'])
+        traces.write({'trace_status': 'cancel'})
         return traces

--- a/addons/mass_mailing/models/utm.py
+++ b/addons/mass_mailing/models/utm.py
@@ -47,12 +47,12 @@ class UtmCampaign(models.Model):
             SELECT
                 c.id as campaign_id,
                 COUNT(s.id) AS expected,
-                COUNT(CASE WHEN s.sent is not null THEN 1 ELSE null END) AS sent,
-                COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is null AND s.ignored is not null THEN 1 ELSE null END) AS ignored,
-                COUNT(CASE WHEN s.id is not null AND s.bounced is null THEN 1 ELSE null END) AS delivered,
-                COUNT(CASE WHEN s.opened is not null THEN 1 ELSE null END) AS opened,
-                COUNT(CASE WHEN s.replied is not null THEN 1 ELSE null END) AS replied,
-                COUNT(CASE WHEN s.bounced is not null THEN 1 ELSE null END) AS bounced
+                COUNT(s.sent_datetime) AS sent,
+                COUNT(s.trace_status) FILTER (WHERE s.trace_status in ('sent', 'open', 'reply')) AS delivered,
+                COUNT(s.trace_status) FILTER (WHERE s.trace_status in ('open', 'reply')) AS open,
+                COUNT(s.trace_status) FILTER (WHERE s.trace_status = 'reply') AS reply,
+                COUNT(s.trace_status) FILTER (WHERE s.trace_status = 'bounce') AS bounce,
+                COUNT(s.trace_status) FILTER (WHERE s.trace_status = 'cancel') AS cancel
             FROM
                 mailing_trace s
             RIGHT JOIN
@@ -75,13 +75,13 @@ class UtmCampaign(models.Model):
             if not stats:
                 vals = default_vals
             else:
-                total = (stats['expected'] - stats['ignored']) or 1
-                delivered = stats['sent'] - stats['bounced']
+                total = (stats['expected'] - stats['cancel']) or 1
+                delivered = stats['sent'] - stats['bounce']
                 vals = {
                     'received_ratio': 100.0 * delivered / total,
-                    'opened_ratio': 100.0 * stats['opened'] / total,
-                    'replied_ratio': 100.0 * stats['replied'] / total,
-                    'bounced_ratio': 100.0 * stats['bounced'] / total
+                    'opened_ratio': 100.0 * stats['open'] / total,
+                    'replied_ratio': 100.0 * stats['reply'] / total,
+                    'bounced_ratio': 100.0 * stats['bounce'] / total
                 }
 
             campaign.update(vals)
