PR: https://github.com/odoo/odoo/pull/

From: 827958a8902589246dd741341ce1bc5465059909
From: Darshil Trivedi
Date: 2018-07-19 12:43:08

Structural Changes: 6
Total Changes: 58

[REF] stock: rename procurement.rule to stock.rule

This commit is related to task ID 1852969.

================================= pseudo patch: =================================

--- a/addons/stock/models/stock_location.py
+++ b/addons/stock/models/stock_location.py
@@ -148,7 +148,7 @@ class Route(models.Model):
     name = fields.Char('Route Name', required=True, translate=True)
     active = fields.Boolean('Active', default=True, help="If the active field is set to False, it will allow you to hide the route without removing it.")
     sequence = fields.Integer('Sequence', default=0)
-    rule_ids = fields.One2many('procurement.rule', 'route_id', 'Rules', copy=True)
+    rule_ids = fields.One2many('stock.rule', 'route_id', 'Rules', copy=True)
     product_selectable = fields.Boolean('Applicable on Product', default=True, help="When checked, the route will be selectable in the Inventory tab of the Product form.  It will take priority over the Warehouse route. ")
     product_categ_selectable = fields.Boolean('Applicable on Product Category', help="When checked, the route will be selectable on the Product Category.  It will take priority over the Warehouse route. ")
     warehouse_selectable = fields.Boolean('Applicable on Warehouse', help="When a warehouse is selected for this route, this route should be seen as the default route when products pass through this warehouse.  This behaviour can be overridden by the routes on the Product/Product Categories or by the Preferred Routes on the Procurement")

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -123,7 +123,7 @@ class StockMove(models.Model):
     scrapped = fields.Boolean('Scrapped', related='location_dest_id.scrap_location', readonly=True, store=True)
     scrap_ids = fields.One2many('stock.scrap', 'move_id')
     group_id = fields.Many2one('procurement.group', 'Procurement Group', default=_default_group_id)
-    rule_id = fields.Many2one('procurement.rule', 'Stock Rule', ondelete='restrict', help='The stock rule that created this stock move')
+    rule_id = fields.Many2one('stock.rule', 'Stock Rule', ondelete='restrict', help='The stock rule that created this stock move')
     propagate = fields.Boolean(
         'Propagate cancel and split', default=True,
         help='If checked, when this move is cancelled, cancel the linked move too')
@@ -768,7 +768,7 @@ class StockMove(models.Model):
         return self
 
     def _prepare_procurement_values(self):
-        """ Prepare specific key for moves or other componenets that will be created from a procurement rule
+        """ Prepare specific key for moves or other componenets that will be created from a stock rule
         comming from a stock move. This method could be override in order to add other custom key that could
         be used in move/po creation.
         """

--- a/addons/stock/models/stock_rule.py
+++ b/addons/stock/models/stock_rule.py
@@ -17,10 +17,10 @@ import logging
 _logger = logging.getLogger(__name__)
 
 
-class ProcurementRule(models.Model):
+class StockRule(models.Model):
     """ A rule describe what a procurement should do; produce, buy, move, ... """
-    _name = 'procurement.rule'
-    _description = "Procurement Rule"
+    _name = 'stock.rule'
+    _description = "Stock Rule"
     _order = "sequence, name"
 
     name = fields.Char(
@@ -169,7 +169,7 @@ class ProcurementRule(models.Model):
 
     def _run_pull(self, product_id, product_qty, product_uom, location_id, name, origin, values):
         if not self.location_src_id:
-            msg = _('No source location defined on procurement rule: %s!') % (self.name, )
+            msg = _('No source location defined on stock rule: %s!') % (self.name, )
             raise UserError(msg)
 
         # create the move as SUPERUSER because the current user may not have the rights to do it (mto product launched by a sale for example)
@@ -188,7 +188,7 @@ class ProcurementRule(models.Model):
 
     def _get_stock_move_values(self, product_id, product_qty, product_uom, location_id, name, origin, values, group_id):
         ''' Returns a dictionary of values that will be used to create a stock move from a procurement.
-        This function assumes that the given procurement has a rule (action == 'pull' or action == 'pull_push') set on it.
+        This function assumes that the given procurement has a rule (action == 'pull' or 'pull_push') set on it.
 
         :param procurement: browse record
         :rtype: dictionary
@@ -306,8 +306,8 @@ class ProcurementGroup(models.Model):
         """
         if warehouse_id:
             domain = expression.AND([['|', ('warehouse_id', '=', warehouse_id.id), ('warehouse_id', '=', False)], domain])
-        Rule = self.env['procurement.rule']
-        res = self.env['procurement.rule']
+        Rule = self.env['stock.rule']
+        res = self.env['stock.rule']
         if route_ids:
             res = Rule.search(expression.AND([[('route_id', 'in', route_ids.ids)], domain]), order='route_sequence, sequence', limit=1)
         if not res:
@@ -473,7 +473,7 @@ class ProcurementGroup(models.Model):
                                             self.env['procurement.group'].run(orderpoint.product_id, qty_rounded, orderpoint.product_uom, orderpoint.location_id,
                                                                               orderpoint.name, orderpoint.name, values)
                                     except UserError as error:
-                                        self.env['procurement.rule']._log_next_activity(orderpoint.product_id, error.name)
+                                        self.env['stock.rule']._log_next_activity(orderpoint.product_id, error.name)
                                     self._procurement_from_orderpoint_post_process([orderpoint.id])
                                 if use_new_cursor:
                                     cr.commit()

--- a/addons/stock/models/stock_warehouse.py
+++ b/addons/stock/models/stock_warehouse.py
@@ -51,7 +51,7 @@ class Warehouse(models.Model):
     wh_qc_stock_loc_id = fields.Many2one('stock.location', 'Quality Control Location')
     wh_output_stock_loc_id = fields.Many2one('stock.location', 'Output Location')
     wh_pack_stock_loc_id = fields.Many2one('stock.location', 'Packing Location')
-    mto_pull_id = fields.Many2one('procurement.rule', 'MTO rule')
+    mto_pull_id = fields.Many2one('stock.rule', 'MTO rule')
     pick_type_id = fields.Many2one('stock.picking.type', 'Pick Type')
     pack_type_id = fields.Many2one('stock.picking.type', 'Pack Type')
     out_type_id = fields.Many2one('stock.picking.type', 'Out Type')
@@ -116,7 +116,7 @@ class Warehouse(models.Model):
         # create sequences and operation types
         new_vals = warehouse.create_sequences_and_picking_types()
         warehouse.write(new_vals)  # TDE FIXME: use super ?
-        # create routes and push/procurement rules
+        # create routes and push/stock rules
         route_vals = warehouse.create_routes()
         warehouse.write(route_vals)
         # update partner data if partner assigned
@@ -173,7 +173,7 @@ class Warehouse(models.Model):
                     warehouse.create_resupply_routes(to_add, warehouse.default_resupply_wh_id)
                 if to_remove:
                     Route.search([('supplied_wh_id', '=', warehouse.id), ('supplier_wh_id', 'in', to_remove.ids)]).write({'active': False})
-                    # TDE FIXME: shouldn't we remove procurement rules also ? because this could make them global (not sure)
+                    # TDE FIXME: shouldn't we remove stock rules also ? because this could make them global (not sure)
 
         return res
 
@@ -272,7 +272,7 @@ class Warehouse(models.Model):
         # create route selectable on the product to resupply the warehouse from another one
         self.create_resupply_routes(self.resupply_wh_ids, self.default_resupply_wh_id)
 
-        # return routes and mto procurement rule to store on the warehouse
+        # return routes and mto stock rule to store on the warehouse
         return {
             'route_ids': [(4, route.id) for route in reception_route | delivery_route | crossdock_route],
             'mto_pull_id': mto_pull.id,
@@ -284,7 +284,7 @@ class Warehouse(models.Model):
     def _find_existing_rule_or_create(self, rules_list):
         """ This method will find existing rule or create new one"""
         for rule_vals in rules_list:
-            existing_rule = self.env['procurement.rule'].search([
+            existing_rule = self.env['stock.rule'].search([
                 ('picking_type_id', '=', rule_vals['picking_type_id']),
                 ('location_src_id', '=', rule_vals['location_src_id']),
                 ('location_id', '=', rule_vals['location_id']),
@@ -293,7 +293,7 @@ class Warehouse(models.Model):
                 ('active', '=', False),
             ])
             if not existing_rule:
-                self.env['procurement.rule'].create(rule_vals)
+                self.env['stock.rule'].create(rule_vals)
             else:
                 existing_rule.write({'active': True})
 
@@ -306,7 +306,7 @@ class Warehouse(models.Model):
                 reception_route.rule_ids.write({'active': False})
             else:
                 warehouse.reception_route_id = reception_route = self.env['stock.location.route'].create(warehouse._get_reception_delivery_route_values(warehouse.reception_steps))
-            # procurement rules for reception
+            # stock rules for reception
             routings = routes_data[warehouse.id][warehouse.reception_steps]
             rules_list = warehouse._get_rule_values(
                 routings, values={'active': True, 'procure_method': 'make_to_order', 'route_id': reception_route.id})
@@ -323,7 +323,7 @@ class Warehouse(models.Model):
                 delivery_route.rule_ids.write({'active': False})
             else:
                 delivery_route = self.env['stock.location.route'].create(warehouse._get_reception_delivery_route_values(warehouse.delivery_steps))
-            # procurement (pull) rules for delivery
+            # stock (pull) rules for delivery
             routings = routes_data[warehouse.id][warehouse.delivery_steps]
             rules_list = warehouse._get_rule_values(
                 routings, values={'active': True, 'route_id': delivery_route.id})
@@ -331,9 +331,9 @@ class Warehouse(models.Model):
         return delivery_route
 
     def _create_or_update_mto_pull(self, routes_data):
-        """ Create MTO procurement rule and link it to the generic MTO route """
+        """ Create MTO stock rule and link it to the generic MTO route """
         routes_data = routes_data or self.get_routes_dict()
-        Rule = self.env['procurement.rule']
+        Rule = self.env['stock.rule']
         for warehouse in self:
             routings = routes_data[warehouse.id][warehouse.delivery_steps]
             if warehouse.mto_pull_id:
@@ -359,12 +359,12 @@ class Warehouse(models.Model):
                     routings,
                     values={'procure_method': 'make_to_order', 'active': warehouse.delivery_steps != 'ship_only' and warehouse.reception_steps != 'one_step', 'route_id': crossdock_route.id})
                 for rule_vals in pull_list:
-                    self.env['procurement.rule'].create(rule_vals)
+                    self.env['stock.rule'].create(rule_vals)
         return crossdock_route
 
     def create_resupply_routes(self, supplier_warehouses, default_resupply_wh):
         Route = self.env['stock.location.route']
-        Rule = self.env['procurement.rule']
+        Rule = self.env['stock.rule']
 
         input_location, output_location = self._get_input_output_locations(self.reception_steps, self.delivery_steps)
         internal_transit_location, external_transit_location = self._get_transit_locations()
@@ -545,7 +545,7 @@ class Warehouse(models.Model):
     def _check_delivery_resupply(self, new_location, change_to_multiple):
         """ Check if the resupply routes from this warehouse follow the changes of number of delivery steps
         Check routes being delivery bu this warehouse and change the rule going to transit location """
-        Rule = self.env["procurement.rule"]
+        Rule = self.env["stock.rule"]
         routes = self.env['stock.location.route'].search([('supplier_wh_id', '=', self.id)])
         rules = Rule.search(['&', '&', ('route_id', 'in', routes.ids), ('action', '!=', 'push'), ('location_id.usage', '=', 'transit')])
         rules.write({
@@ -558,7 +558,7 @@ class Warehouse(models.Model):
             for mto_rule_val in mto_rule_vals:
                 Rule.create(mto_rule_val)
         else:
-            # We need to delete all the MTO procurement rules, otherwise they risk to be used in the system
+            # We need to delete all the MTO stock rules, otherwise they risk to be used in the system
             Rule.search([
                 '&', ('route_id', '=', self._get_mto_route().id),
                 ('location_id.usage', '=', 'transit'),
@@ -569,7 +569,7 @@ class Warehouse(models.Model):
         """ Check routes being delivered by the warehouses (resupply routes) and
         change their rule coming from the transit location """
         routes = self.env['stock.location.route'].search([('supplied_wh_id', 'in', self.ids)])
-        self.env['procurement.rule'].search([
+        self.env['stock.rule'].search([
             '&',
                 ('route_id', 'in', routes.ids),
                 '&',
@@ -644,7 +644,7 @@ class Warehouse(models.Model):
             self.mapped('wh_output_stock_loc_id').write({'active': True})
 
     def _location_used(self, location):
-        rules = self.env['procurement.rule'].search_count([
+        rules = self.env['stock.rule'].search_count([
             '&',
             ('route_id', 'not in', [x.id for x in self.route_ids]),
             '|', ('location_src_id', '=', location.id),
@@ -759,7 +759,7 @@ class Orderpoint(models.Model):
         help="The procurement quantity will be rounded up to this multiple.  If it is 0, the exact quantity will be used.")
     group_id = fields.Many2one(
         'procurement.group', 'Procurement Group', copy=False,
-        help="Moves created through this orderpoint will be put in this procurement group. If none is given, the moves generated by procurement rules will be grouped into one big picking.")
+        help="Moves created through this orderpoint will be put in this procurement group. If none is given, the moves generated by stock rules will be grouped into one big picking.")
     company_id = fields.Many2one(
         'res.company', 'Company', required=True,
         default=lambda self: self.env['res.company']._company_default_get('stock.warehouse.orderpoint'))
@@ -810,7 +810,7 @@ class Orderpoint(models.Model):
         return date_planned.strftime(DEFAULT_SERVER_DATETIME_FORMAT)
 
     def _prepare_procurement_values(self, product_qty, date=False, group=False):
-        """ Prepare specific key for moves or other components that will be created from a procurement rule
+        """ Prepare specific key for moves or other components that will be created from a stock rule
         comming from an orderpoint. This method could be override in order to add other custom key that could
         be used in move/po creation.
         """
