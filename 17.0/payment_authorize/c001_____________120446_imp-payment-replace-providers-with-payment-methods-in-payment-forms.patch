PR: https://github.com/odoo/odoo/pull/120446

From: 7e012dd5441e87ce3c2688f9280381b041b00b0d
From: Antoine Vandevenne (anv)
Date: 2023-09-22 13:32:53

Breaking data model changes scores: del:2 + add:0, change matches:
-    authorize_payment_method_type = fields.Selection(
-    authorize_payment_method_type = fields.Selection(

Total Changes: 86

[IMP] payment, *: replace providers with payment methods in payment forms

Before this commit, the payment providers (e.g., Stripe, Adyen...)
available for payment were displayed on the payment forms. The customer
had to select one to process their payment. After that, the customer had
to select their preferred payment method (e.g., Credit Card,
Bancontact...) from a list of payment methods supported by the selected
provider over which the website administrator had close to no control.
This was making the payment forms confusing because the payment methods
were displayed sometimes more than once, if at all, in a non-controlled
order, and behind the selection of a payment provider that customers
should not have to deal with.

As the payment method was selected in an iframe or directly on the
provider's website, the information on the selection payment method was
not available in Odoo. This posed many problems, among which were the
impossibility of assessing whether a specific feature (e.g.,
tokenization, refunds, manual capture...) was available, not being able
to easily identify payment tokens through the payment method logo,
listing available payment methods on the website, sorting and
fine-grained configuration of the available payment method, subpar
payment method-specific display on the payment form (e.g., PayPal that
requires displaying a "Pay with PayPal" button), etc.

In this commit, the payment providers are thus replaced by the payment
methods on the payment forms. All contextually available (depending on
the country, currency, requested feature...) payment methods are
displayed one after the other on a single-level list and in the order
configured by the website administrator. Each payment method is
"powered by" (i.e., linked) to a single payment provider: the first one,
by model order, to support it. This allows, for example, offering the
PayPal payment method through Mollie, which charges low processing fees,
while also offering Klarna through Stripe, which supports more payment
methods but charges higher processing fees.

While doing so, the two different payment forms, "Checkout" and
"Manage", are also merged together in a new, configurable case-by-case,
payment form that is entirely redesigned to offer a better user
experience.

After payment, the information on the selected payment method is saved
on the transaction and eventual payment record and updated with the
information received from the provider.

task-2882677

closes odoo/odoo#120446

Related: odoo/upgrade#5103
Related: odoo/documentation#5717
Related: odoo/enterprise#40666
Signed-off-by: Antoine Vandevenne (anv) <anv@odoo.com>
Co-authored-by: Anita (anko) <anko@odoo.com>
Co-authored-by: Brieuc-brd <brd@odoo.com>
Co-authored-by: Valeriya (vchu) <vchu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_authorize/models/authorize_request.py
+++ b/addons/payment_authorize/models/authorize_request.py
@@ -37,7 +37,6 @@ class AuthorizeAPI:
         self.state = provider.state
         self.name = provider.authorize_login
         self.transaction_key = provider.authorize_transaction_key
-        self.payment_method_type = provider.authorize_payment_method_type
 
     def _make_request(self, operation, data=None):
         request = {
@@ -80,10 +79,12 @@ class AuthorizeAPI:
                 'x_response_reason_text': response.get('err_msg')
             }
         else:
+            tx_response = response.get('transactionResponse', {})
             return {
-                'x_response_code': response.get('transactionResponse', {}).get('responseCode'),
-                'x_trans_id': response.get('transactionResponse', {}).get('transId'),
+                'x_response_code': tx_response.get('responseCode'),
+                'x_trans_id': tx_response.get('transId'),
                 'x_type': operation,
+                'payment_method_code': tx_response.get('accountType'),
             }
 
     # Customer profiles
@@ -137,7 +138,7 @@ class AuthorizeAPI:
         })
 
         payment = response.get('paymentProfile', {}).get('payment', {})
-        if self.payment_method_type == 'credit_card':
+        if 'creditCard' in payment:
             # Authorize.net pads the card and account numbers with X's.
             res['payment_details'] = payment.get('creditCard', {}).get('cardNumber')[-4:]
         else:

--- a/addons/payment_authorize/models/payment_provider.py
+++ b/addons/payment_authorize/models/payment_provider.py
@@ -1,13 +1,14 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+import json
 import logging
 import pprint
 
 from odoo import _, api, fields, models
-from odoo.fields import Command
 from odoo.exceptions import UserError, ValidationError
+from odoo.fields import Command
 
-from .authorize_request import AuthorizeAPI
+from odoo.addons.payment_authorize.models.authorize_request import AuthorizeAPI
 
 _logger = logging.getLogger(__name__)
 
@@ -27,26 +28,9 @@ class PaymentProvider(models.Model):
     authorize_client_key = fields.Char(
         string="API Client Key",
         help="The public client key. To generate directly from Odoo or from Authorize.Net backend.")
-    authorize_payment_method_type = fields.Selection(
-        string="Allow Payments From",
-        help="Determines with what payment method the customer can pay.",
-        selection=[('credit_card', "Credit Card"), ('bank_account', "Bank Account (USA Only)")],
-        default='credit_card',
-        required_if_provider='authorize',
-    )
 
     # === CONSTRAINT METHODS ===#
 
-    @api.constrains('authorize_payment_method_type')
-    def _check_payment_method_type(self):
-        for provider in self.filtered(lambda p: p.code == "authorize"):
-            if self.env['payment.token'].search([('provider_id', '=', provider.id)], limit=1):
-                raise ValidationError(_(
-                    "There are active tokens linked to this provider. To change the payment method "
-                    "type, please disable the provider and duplicate it. Then, change the payment "
-                    "method type on the duplicated provider."
-                ))
-
     # Authorize.Net supports only one currency: "One gateway account is required for each currency"
     # See https://community.developer.authorize.net/t5/The-Authorize-Net-Developer-Blog/Authorize-Net-UK-Europe-Update/ba-p/35957
     @api.constrains('available_currency_ids', 'state')
@@ -68,24 +52,6 @@ class PaymentProvider(models.Model):
             'support_tokenization': True,
         })
 
-    # === ONCHANGE METHODS ===#
-
-    @api.onchange('authorize_payment_method_type')
-    def _onchange_authorize_payment_method_type(self):
-        if self.authorize_payment_method_type == 'bank_account':
-            self.display_as = _("Bank (powered by Authorize)")
-            self.payment_method_ids = [Command.clear()]
-        else:
-            self.display_as = _("Credit Card (powered by Authorize)")
-            self.payment_method_ids = [Command.set([self.env.ref(pm_xml_id).id for pm_xml_id in (
-                'payment.payment_method_maestro',
-                'payment.payment_method_mastercard',
-                'payment.payment_method_discover',
-                'payment.payment_method_diners_club_intl',
-                'payment.payment_method_jcb',
-                'payment.payment_method_visa',
-            )])]
-
     # === ACTION METHODS ===#
 
     def action_update_merchant_details(self):
@@ -138,3 +104,20 @@ class PaymentProvider(models.Model):
             return res
 
         return self.available_currency_ids[0]
+
+    def _authorize_get_inline_form_values(self):
+        """ Return a serialized JSON of the required values to render the inline form.
+
+        Note: `self.ensure_one()`
+
+        :return: The JSON serial of the required values to render the inline form.
+        :rtype: str
+        """
+        self.ensure_one()
+
+        inline_form_values = {
+            'state': self.state,
+            'login_id': self.authorize_login,
+            'client_key': self.authorize_client_key,
+        }
+        return json.dumps(inline_form_values)

--- a/addons/payment_authorize/models/payment_token.py
+++ b/addons/payment_authorize/models/payment_token.py
@@ -17,8 +17,3 @@ class PaymentToken(models.Model):
     authorize_profile = fields.Char(
         string="Authorize.Net Profile ID",
         help="The unique reference for the partner/token combination in the Authorize.net backend.")
-    authorize_payment_method_type = fields.Selection(
-        string="Authorize.Net Payment Type",
-        help="The type of payment method this token is linked to.",
-        selection=[("credit_card", "Credit Card"), ("bank_account", "Bank Account (USA Only)")],
-    )

--- a/addons/payment_authorize/models/payment_transaction.py
+++ b/addons/payment_authorize/models/payment_transaction.py
@@ -8,7 +8,7 @@ from odoo.exceptions import UserError, ValidationError
 
 from odoo.addons.payment import utils as payment_utils
 from odoo.addons.payment_authorize.models.authorize_request import AuthorizeAPI
-from odoo.addons.payment_authorize.const import TRANSACTION_STATUS_MAPPING
+from odoo.addons.payment_authorize.const import PAYMENT_METHODS_MAPPING, TRANSACTION_STATUS_MAPPING
 
 
 _logger = logging.getLogger(__name__)
@@ -211,7 +211,17 @@ class PaymentTransaction(models.Model):
 
         response_content = notification_data.get('response')
 
+        # Update the provider reference.
         self.provider_reference = response_content.get('x_trans_id')
+
+        # Update the payment method.
+        payment_method_code = response_content.get('payment_method_code', '').lower()
+        payment_method = self.env['payment.method']._get_from_code(
+            payment_method_code, mapping=PAYMENT_METHODS_MAPPING
+        )
+        self.payment_method_id = payment_method or self.payment_method_id
+
+        # Update the payment state.
         status_code = response_content.get('x_response_code', '3')
         if status_code == '1':  # Approved
             status_type = response_content.get('x_type').lower()
@@ -277,12 +287,11 @@ class PaymentTransaction(models.Model):
         if cust_profile:
             token = self.env['payment.token'].create({
                 'provider_id': self.provider_id.id,
+                'payment_method_id': self.payment_method_id.id,
                 'payment_details': cust_profile.get('payment_details'),
                 'partner_id': self.partner_id.id,
                 'provider_ref': cust_profile.get('payment_profile_id'),
                 'authorize_profile': cust_profile.get('profile_id'),
-                'authorize_payment_method_type': self.provider_id.authorize_payment_method_type,
-                'verified': True,
             })
             self.write({
                 'token_id': token.id,
