PR: https://github.com/odoo/odoo/pull/166497

From: d0c9ceeb684ac19ff38463ed4abef82420076aac
From: kcv-odoo
Date: 2024-05-29 17:32:09

Breaking data model changes scores: del:3 + add:0, change matches:
-    _inherit = 'product.template'
-    detailed_type = fields.Selection(selection_add=[
-    _inherit = 'product.product'

Total Changes: 69

[IMP] {website_,}event{,booth}_sale: remove product types

Purpose of this commit to clean up product types and remove
`detailed_type` field.

In this commit remove `event` and `event_booth` type and use
service type and move those types in to `service_tracking`
field so now service type field with `service_tracking` equals
to event would be event type product. Since remove of
different kind of types from detailed_type field
`detailed_type` field will contains same type as `type` field
so we can remove `detailed_type` field and use type field as
radio button in UX.

task-3938213

closes odoo/odoo#166497

Related: odoo/enterprise#63064
Related: odoo/upgrade#6065
Signed-off-by: Morgane Demesmaeker <edm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/event_sale/models/__init__.py
+++ b/addons/event_sale/models/__init__.py
@@ -1,8 +1,7 @@
-# -*- coding: utf-8 -*-
-
 from . import event_event
 from . import event_registration
 from . import event_ticket
-from . import product
+from . import product_product
+from . import product_template
 from . import sale_order
 from . import sale_order_line

--- a/addons/event_sale/models/event_ticket.py
+++ b/addons/event_sale/models/event_ticket.py
@@ -20,7 +20,7 @@ class EventTemplateTicket(models.Model):
     # product
     product_id = fields.Many2one(
         'product.product', string='Product', required=True,
-        domain=[("detailed_type", "=", "event")], default=_default_product_id)
+        domain=[('service_tracking', '=', 'event')], default=_default_product_id)
     currency_id = fields.Many2one(related="product_id.currency_id", string="Currency")
     price = fields.Float(
         string='Price', compute='_compute_price',

--- a/addons/event_sale/models/product.py
+++ b/None
@@ -1,27 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from odoo import api, fields, models
-
-
-class ProductTemplate(models.Model):
-    _inherit = 'product.template'
-
-    detailed_type = fields.Selection(selection_add=[
-        ('event', 'Event Ticket'),
-    ], ondelete={'event': 'set service'})
-
-    @api.onchange('detailed_type')
-    def _onchange_type_event(self):
-        if self.detailed_type == 'event':
-            self.invoice_policy = 'order'
-
-    def _detailed_type_mapping(self):
-        type_mapping = super()._detailed_type_mapping()
-        type_mapping['event'] = 'service'
-        return type_mapping
-
-
-class Product(models.Model):
-    _inherit = 'product.product'
-
-    event_ticket_ids = fields.One2many('event.event.ticket', 'product_id', string='Event Tickets')

--- a/None
+++ b/addons/event_sale/models/product_product.py
@@ -0,0 +1,7 @@
+from odoo import fields, models
+
+
+class Product(models.Model):
+    _inherit = 'product.product'
+
+    event_ticket_ids = fields.One2many('event.event.ticket', 'product_id', string='Event Tickets')

--- a/None
+++ b/addons/event_sale/models/product_template.py
@@ -0,0 +1,14 @@
+from odoo import api, fields, models
+
+
+class ProductTemplate(models.Model):
+    _inherit = 'product.template'
+
+    service_tracking = fields.Selection(selection_add=[
+        ('event', 'Event Registration'),
+    ], ondelete={'event': 'set default'})
+
+    @api.onchange('service_tracking')
+    def _onchange_type_event(self):
+        if self.service_tracking == 'event':
+            self.invoice_policy = 'order'

--- a/addons/event_sale/models/sale_order.py
+++ b/addons/event_sale/models/sale_order.py
@@ -15,7 +15,7 @@ class SaleOrder(models.Model):
         in website_sale controller shop/address that updates customer, but not
         only. """
         result = super(SaleOrder, self).write(vals)
-        if any(line.product_type == 'event' for line in self.order_line) and vals.get('partner_id'):
+        if any(line.service_tracking == 'event' for line in self.order_line) and vals.get('partner_id'):
             registrations_toupdate = self.env['event.registration'].sudo().search([('sale_order_id', 'in', self.ids)])
             registrations_toupdate.write({'partner_id': vals['partner_id']})
         return result
@@ -28,9 +28,9 @@ class SaleOrder(models.Model):
         unconfirmed_registrations._update_mail_schedulers()
 
         for so in self:
-            if not any(line.product_type == 'event' for line in so.order_line):
+            if not any(line.service_tracking == 'event' for line in so.order_line):
                 continue
-            so_lines_missing_events = so.order_line.filtered(lambda line: line.product_type == 'event' and not line.event_id)
+            so_lines_missing_events = so.order_line.filtered(lambda line: line.service_tracking == 'event' and not line.event_id)
             if so_lines_missing_events:
                 so_lines_descriptions = "".join(f"\n- {so_line_description.name}" for so_line_description in so_lines_missing_events)
                 raise ValidationError(_("Please make sure all your event related lines are configured before confirming this order:%s", so_lines_descriptions))
@@ -66,4 +66,4 @@ class SaleOrder(models.Model):
         :rtype: list
         """
         domain = super()._get_product_catalog_domain()
-        return expression.AND([domain, [('detailed_type', '!=', 'event')]])
+        return expression.AND([domain, [('service_tracking', '!=', 'event')]])

--- a/addons/event_sale/models/sale_order_line.py
+++ b/addons/event_sale/models/sale_order_line.py
@@ -20,7 +20,7 @@ class SaleOrderLine(models.Model):
     @api.constrains('event_id', 'event_ticket_id', 'product_id')
     def _check_event_registration_ticket(self):
         for so_line in self:
-            if so_line.product_id.detailed_type == "event" and (not so_line.event_id or not so_line.event_ticket_id):
+            if so_line.product_id.service_tracking == "event" and (not so_line.event_id or not so_line.event_ticket_id):
                 raise ValidationError(
                     _("The sale order line with the product %(product_name)s needs an event and a ticket.", product_name=so_line.product_id.name))
 
@@ -36,7 +36,7 @@ class SaleOrderLine(models.Model):
         registrations linked to this line. """
         registrations_vals = []
         for so_line in self:
-            if not so_line.product_type == 'event':
+            if so_line.service_tracking != 'event':
                 continue
 
             for _count in range(int(so_line.product_uom_qty) - len(so_line.registration_ids)):
@@ -52,7 +52,7 @@ class SaleOrderLine(models.Model):
 
     @api.depends('product_id')
     def _compute_event_id(self):
-        event_lines = self.filtered(lambda line: line.product_id and line.product_id.detailed_type == 'event')
+        event_lines = self.filtered(lambda line: line.product_id and line.product_id.service_tracking == 'event')
         (self - event_lines).event_id = False
         for line in event_lines:
             if line.product_id not in line.event_id.event_ticket_ids.product_id:
