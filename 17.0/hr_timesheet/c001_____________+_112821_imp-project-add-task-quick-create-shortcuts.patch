PR: https://github.com/odoo/odoo/pull/112821

From: c28063baee6745e4325546614a855d9530101301
From: Abderraouf Ghrissi (abgh)
Date: 2023-03-07 19:31:53

Structural Changes: 2
Total Changes: 31

[IMP] project: add task quick create shortcuts

In this commit,
-We Ease the quick creation of tasks by providing shortcuts allowing the user
to set different fields (planned_hours, tags, priority, and assign to users)
without opening the form view.

task-3145203

closes odoo/odoo#112821

Related: odoo/enterprise#37166
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_timesheet/models/project.py
+++ b/addons/hr_timesheet/models/project.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
-
+import re
 from collections import defaultdict
 
 from odoo import models, fields, api, _
@@ -250,7 +250,13 @@ class Task(models.Model):
     subtask_effective_hours = fields.Float("Hours Spent on Sub-Tasks", compute='_compute_subtask_effective_hours', recursive=True, store=True, help="Time spent on the sub-tasks (and their own sub-tasks) of this task.")
     timesheet_ids = fields.One2many('account.analytic.line', 'task_id', 'Timesheets')
     encode_uom_in_days = fields.Boolean(compute='_compute_encode_uom_in_days', default=lambda self: self._uom_in_days())
-
+    display_name = fields.Char(help="""Use these keywords in the title to set new tasks:\n
+        30h Allocate 30 hours to the task
+        #tags Set tags on the task
+        @user Assign the task to a user
+        ! Set the task a high priority\n
+        Make sure to use the right format and order e.g. Improve the configuration screen 5h #feature #v16 @Mitchell !""",
+    )
     @property
     def SELF_READABLE_FIELDS(self):
         return super().SELF_READABLE_FIELDS | PROJECT_TASK_READABLE_FIELDS
@@ -327,6 +333,27 @@ class Task(models.Model):
         for task in self.with_context(active_test=False):
             task.subtask_effective_hours = sum(child_task.effective_hours + child_task.subtask_effective_hours for child_task in task.child_ids)
 
+    def _get_group_pattern(self):
+        return {
+            **super()._get_group_pattern(),
+            'planned_hours': r'\s(\d+(?:\.\d+)?)[hH]',
+        }
+
+    def _get_groups_patterns(self):
+        return ['(?:%s)*' % self._get_group_pattern()['planned_hours']] + super()._get_groups_patterns()
+
+    def _get_cannot_start_with_patterns(self):
+        return super()._get_cannot_start_with_patterns() + [r'(?!\d+(?:\.\d+)?(?:h|H))']
+
+    def _extract_planned_hours(self):
+        planned_hours_group = self._get_group_pattern()['planned_hours']
+        if self.allow_timesheets:
+            self.planned_hours = sum(float(num) for num in re.findall(planned_hours_group, self.display_name))
+            self.display_name, dummy = re.subn(planned_hours_group, '', self.display_name)
+
+    def _get_groups(self):
+        return [lambda task: task._extract_planned_hours()] + super()._get_groups()
+
     def action_view_subtask_timesheet(self):
         self.ensure_one()
         tasks = self.with_context(active_test=False)._get_all_subtasks()
