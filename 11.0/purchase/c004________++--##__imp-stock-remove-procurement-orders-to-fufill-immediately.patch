PR: https://github.com/odoo/odoo/pull/

From: 0e4f3bb95991261c04c08e72b28430acfabdecd1
From: Fabien Pinckaers
Date: 2017-09-08 15:08:05

Structural Changes: 10.9
Total Changes: 421

[IMP] stock: remove procurement orders to fufill immediately

This removes the procurement.order model. To fufill their needs SO, PO, MO and
stock moves now call the _run method of the relevant procurement.group.

This mecanism is now only used for stockable product, tasks now uses their own
independent mecanism.

The _run method will check all the applicable rules and create directly the
needed model to fufill the need.

The modules stock, purchase, mrp, extends the _run method to implement their
specific strategy relevant for the rule type they define.

If an exception happens the message will be logged as a mail messsage on the
source model, for example, if a sales order cannot be fufilled the salesperson
will now see directly the reason.

OLD commit messages:
[WIP] procurement: removing procurement.order in stock, sale, purchase, sale_stock. WIP
fixup! [WIP] procurement: removing procurement.order in stock, sale, purchase, sale_stock. WIP
[IMP] Basic tests
[FIX] test not necessary anymore
[FIX] remove unnecessary print statement
[FIX] unnecessary test + why passing warehouse worked before?
[IMP] purchase: one move by purchase order line
[FIX] purchase: correct inventory tests and pass move_dest_ids among procurements
[FIX] because of bad cherry-pick merge
[IMP] make mrp pass by adding move_dest_ids there too
[IMP] tests of sale_mrp, no need for cancelpropagation then
[IMP] better to consistently use recordsets also for one2many
[FIX] purchase_requisition
[FIX] Exceptions should trigger errors, which should be caught in the tests
[FIX] sale_mrp: remove usage of procurement.order and use sale order name instead of sol
[FIX] stock_dropshipping: add sale_line_id on purchase_line_id
[FIX] Remove pdb
[IMP] add stock_dropshipping files
[IMP] stock: search carrier through sale line instead of procurement group
[IMP] add procrule test and preision needed when updating sol
[FIX] sale_order_dates + [IMP] procurement exceptions by scheduler
[FIX] No need to return task
[IMP] move file as name changes and add corrections
[FIX] Continue Run Schedulers wizard fix
[FIX] name issues of takss
[FIX] updating sale order line, but there is still a problem with the recompute

================================= pseudo patch: =================================

--- a/addons/purchase/models/purchase.py
+++ b/addons/purchase/models/purchase.py
@@ -104,7 +104,7 @@ class PurchaseOrder(models.Model):
     name = fields.Char('Order Reference', required=True, index=True, copy=False, default='New')
     origin = fields.Char('Source Document', copy=False,\
         help="Reference of the document that generated this purchase order "
-             "request (e.g. a sales order or an internal procurement request)")
+             "request (e.g. a sales order)")
     partner_ref = fields.Char('Vendor Reference', copy=False,\
         help="Reference of the sales order or bid sent by the vendor. "
              "It's used to do the matching when you receive the "
@@ -365,13 +365,6 @@ class PurchaseOrder(models.Model):
 
             for pick in order.picking_ids.filtered(lambda r: r.state != 'cancel'):
                 pick.action_cancel()
-            # TDE FIXME: I don' think context key is necessary, as actions are not related / called from each other
-            if not self.env.context.get('cancel_procurement'):
-                procurements = order.order_line.mapped('procurement_ids')
-                procurements.filtered(lambda r: r.state not in ('cancel', 'exception') and r.rule_id.propagate).write({'state': 'cancel'})
-                procurements.filtered(lambda r: r.state not in ('cancel', 'exception') and not r.rule_id.propagate).write({'state': 'exception'})
-                moves = procurements.filtered(lambda r: r.rule_id.propagate).mapped('move_dest_id')
-                moves.filtered(lambda r: r.state != 'cancel').action_cancel()
 
         self.write({'state': 'cancel'})
 
@@ -579,21 +572,21 @@ class PurchaseOrderLine(models.Model):
     def create(self, values):
         line = super(PurchaseOrderLine, self).create(values)
         if line.order_id.state == 'purchase':
-            line._create_or_update_picking(values)
+            line._create_or_update_picking()
             msg = _("Extra line with %s ") % (line.product_id.display_name,)
             line.order_id.message_post(body=msg)
         return line
 
     @api.multi
     def write(self, values):
-        if 'product_qty' in values:
-            self.filtered(lambda l: l.order_id.state == 'purchase')._create_or_update_picking(values)
         result = super(PurchaseOrderLine, self).write(values)
         # Update expected date of corresponding moves
         if 'date_planned' in values:
             self.env['stock.move'].search([
                 ('purchase_line_id', 'in', self.ids), ('state', '!=', 'done')
             ]).write({'date_expected': values['date_planned']})
+        if 'product_qty' in values:
+            self.filtered(lambda l: l.order_id.state == 'purchase')._create_or_update_picking()
         return result
 
     name = fields.Text(string='Description', required=True)
@@ -628,13 +621,20 @@ class PurchaseOrderLine(models.Model):
     partner_id = fields.Many2one('res.partner', related='order_id.partner_id', string='Partner', readonly=True, store=True)
     currency_id = fields.Many2one(related='order_id.currency_id', store=True, string='Currency', readonly=True)
     date_order = fields.Datetime(related='order_id.date_order', string='Order Date', readonly=True)
-    procurement_ids = fields.One2many('procurement.order', 'purchase_line_id', string='Associated Procurements', copy=False)
+
+    orderpoint_id = fields.Many2one('stock.warehouse.orderpoint', 'Orderpoint')
+    move_dest_ids = fields.One2many('stock.move', 'created_purchase_line_id', 'Downstream Moves')
 
     @api.multi
-    def _create_or_update_picking(self, vals):
+    def _create_or_update_picking(self):
         for line in self:
             if line.product_id.type in ('product', 'consu'):
-                if float_compare(vals['product_qty'], line.qty_invoiced, line.product_uom.rounding) == -1:
+                # Prevent decreasing below received quantity
+                if float_compare(line.product_qty, line.qty_received, line.product_uom.rounding) < 0:
+                    raise UserError('You cannot decrease the ordered quantity below the received quantity.\n'
+                                    'Create a return first.')
+
+                if float_compare(line.product_qty, line.qty_invoiced, line.product_uom.rounding) == -1:
                     # If the quantity is now below the invoiced quantity, create an activity on the vendor bill
                     # inviting the user to create a refund.
                     activity = self.env['mail.activity'].sudo().create({
@@ -644,42 +644,19 @@ class PurchaseOrderLine(models.Model):
                         'res_model_id': self.env.ref('account.model_account_invoice').id,
                     })
                     activity._onchange_activity_type_id()
-                diff_purchase_uom_qty = vals['product_qty'] - line.product_qty
-                diff_qty = line.product_uom._compute_quantity(diff_purchase_uom_qty, line.product_id.uom_id)
-                if diff_purchase_uom_qty > 0 or not line.move_ids:
-                    # If the user increased quantity of existing line or created a new line
-                    pickings = line.order_id.picking_ids.filtered(lambda x: x.state not in ('done', 'cancel') and x.location_dest_id.usage in ('internal', 'transit'))
-                    picking = pickings and pickings[0] or False
-                    if not picking:
-                        res = line.order_id._prepare_picking()
-                        picking = self.env['stock.picking'].create(res)
-                    move_vals = line._get_move_template(picking)
-                    if not line.move_ids:
-                        move_vals['product_uom_qty'] = vals['product_qty']
-                    else:
-                        move_vals['product_uom_qty'] = diff_purchase_uom_qty
+
+                # If the user increased quantity of existing line or created a new line
+                pickings = line.order_id.picking_ids.filtered(lambda x: x.state not in ('done', 'cancel') and x.location_dest_id.usage in ('internal', 'transit'))
+                picking = pickings and pickings[0] or False
+                if not picking:
+                    res = line.order_id._prepare_picking()
+                    picking = self.env['stock.picking'].create(res)
+                move_vals = line._prepare_stock_moves(picking)
+                for move_val in move_vals:
                     self.env['stock.move']\
-                        .create(move_vals)\
+                        .create(move_val)\
                         .action_confirm()\
                         .action_assign()
-                else:
-                    # Prevent decreasing below received quantity
-                    if float_compare(vals['product_qty'], line.qty_received, line.product_uom.rounding) >= 0:
-                        open_moves = line.move_ids.filtered(lambda m: m.state not in ('done', 'cancel')).sorted(lambda m: m.procurement_id.id)
-                        # We sort by procurement id to decrease first the moves without procurement id,
-                        # the idea is to get rid of the extra moves in priority
-                        for move in open_moves:
-                            if float_compare(move.product_qty, -diff_qty, line.product_id.uom_id.rounding) > 0:
-                                qty_for_move = line.product_uom._compute_quantity(diff_purchase_uom_qty, move.product_uom)
-                                move.product_uom_qty += qty_for_move
-                                move.action_assign()
-                                break
-                            else:
-                                diff_qty += move.product_qty
-                                move.action_cancel()
-                    else:
-                        raise UserError('You cannot decrease the ordered quantity below the received quantity.\n'
-                                        'Create a return first.')
 
     @api.multi
     def _get_stock_move_price_unit(self):
@@ -696,8 +673,18 @@ class PurchaseOrderLine(models.Model):
         return price_unit
 
     @api.multi
-    def _get_move_template(self, picking):
+    def _prepare_stock_moves(self, picking):
+        """ Prepare the stock moves data for one order line. This function returns a list of
+        dictionary ready to be used in stock.move's create()
+        """
         self.ensure_one()
+        res = []
+        if self.product_id.type not in ['product', 'consu']:
+            return res
+        qty = 0.0
+        price_unit = self._get_stock_move_price_unit()
+        for move in self.move_ids.filtered(lambda x: x.state != 'cancel' and not x.location_dest_id.usage == "supplier"):
+            qty += move.product_qty
         template = {
             'name': self.name or '',
             'product_id': self.product_id.id,
@@ -708,51 +695,18 @@ class PurchaseOrderLine(models.Model):
             'location_dest_id': self.order_id._get_destination_location(),
             'picking_id': picking.id,
             'partner_id': self.order_id.dest_address_id.id,
-            'move_dest_ids': False,
+            'move_dest_ids': [(4, x) for x in self.move_dest_ids.ids],
             'state': 'draft',
             'purchase_line_id': self.id,
             'company_id': self.order_id.company_id.id,
-            'price_unit': self._get_stock_move_price_unit(),
+            'price_unit': price_unit,
             'picking_type_id': self.order_id.picking_type_id.id,
             'group_id': self.order_id.group_id.id,
-            'procurement_id': False,
             'origin': self.order_id.name,
-            'route_ids': self.order_id.picking_type_id.warehouse_id and [
-                (6, 0, [x.id for x in self.order_id.picking_type_id.warehouse_id.route_ids])] or [],
+            'route_ids': self.order_id.picking_type_id.warehouse_id and [(6, 0, [x.id for x in self.order_id.picking_type_id.warehouse_id.route_ids])] or [],
             'warehouse_id': self.order_id.picking_type_id.warehouse_id.id,
         }
-        return template
-
-    @api.multi
-    def _prepare_stock_moves(self, picking):
-        """ Prepare the stock moves data for one order line. This function returns a list of
-        dictionary ready to be used in stock.move's create()
-        """
-        self.ensure_one()
-        res = []
-        if self.product_id.type not in ['product', 'consu']:
-            return res
-        qty = 0.0
-        for move in self.move_ids.filtered(lambda x: x.state != 'cancel' and not x.location_dest_id.usage == "supplier"):
-            qty += move.product_qty
-        template = self._get_move_template(picking)
-        # Fullfill all related procurements with this po line
         diff_quantity = self.product_qty - qty
-        for procurement in self.procurement_ids.filtered(lambda p: p.state != 'cancel'):
-            # If the procurement has some moves already, we should deduct their quantity
-            sum_existing_moves = sum(x.product_qty for x in procurement.move_ids if x.state != 'cancel')
-            existing_proc_qty = procurement.product_id.uom_id._compute_quantity(sum_existing_moves, procurement.product_uom)
-            procurement_qty = procurement.product_uom._compute_quantity(procurement.product_qty, self.product_uom) - existing_proc_qty
-            if float_compare(procurement_qty, 0.0, precision_rounding=procurement.product_uom.rounding) > 0 and float_compare(diff_quantity, 0.0, precision_rounding=self.product_uom.rounding) > 0:
-                tmp = template.copy()
-                tmp.update({
-                    'product_uom_qty': min(procurement_qty, diff_quantity),
-                    'move_dest_ids': procurement.move_dest_id and [(4, procurement.move_dest_id.id)] or [],  # move destination is same as procurement destination
-                    'procurement_id': procurement.id,
-                    'propagate': procurement.rule_id.propagate,
-                })
-                res.append(tmp)
-                diff_quantity -= min(procurement_qty, diff_quantity)
         if float_compare(diff_quantity, 0.0,  precision_rounding=self.product_uom.rounding) > 0:
             template['product_uom_qty'] = diff_quantity
             res.append(template)
@@ -772,9 +726,6 @@ class PurchaseOrderLine(models.Model):
         for line in self:
             if line.order_id.state in ['purchase', 'done']:
                 raise UserError(_('Cannot delete a purchase order line which is in state \'%s\'.') %(line.state,))
-            for proc in line.procurement_ids:
-                proc.message_post(body=_('Purchase order line deleted.'))
-            line.procurement_ids.filtered(lambda r: r.state != 'cancel').write({'state': 'exception'})
         return super(PurchaseOrderLine, self).unlink()
 
     @api.model
@@ -894,111 +845,114 @@ class PurchaseOrderLine(models.Model):
 class ProcurementRule(models.Model):
     _inherit = 'procurement.rule'
 
-    @api.model
-    def _get_action(self):
-        return [('buy', _('Buy'))] + super(ProcurementRule, self)._get_action()
-
+    action = fields.Selection(selection_add=[('buy', 'Buy')])
 
-class ProcurementOrder(models.Model):
-    _inherit = 'procurement.order'
 
-    purchase_line_id = fields.Many2one('purchase.order.line', string='Purchase Order Line')
-    purchase_id = fields.Many2one(related='purchase_line_id.order_id', string='Purchase Order')
+class ProcurementGroup(models.Model):
+    _inherit = 'procurement.group'
 
     @api.multi
-    def propagate_cancels(self):
-        result = super(ProcurementOrder, self).propagate_cancels()
-        for procurement in self:
-            if procurement.rule_id.action == 'buy' and procurement.purchase_line_id:
-                if procurement.purchase_line_id.order_id.state not in ('draft', 'cancel', 'sent', 'to validate'):
-                    raise UserError(
-                        _('Can not cancel a procurement related to a purchase order. Please cancel the purchase order first.'))
-            if procurement.purchase_line_id:
-                price_unit = 0.0
-                product_qty = 0.0
-                others_procs = procurement.purchase_line_id.procurement_ids.filtered(lambda r: r != procurement)
-                for other_proc in others_procs:
-                    if other_proc.state not in ['cancel', 'draft']:
-                        product_qty += other_proc.product_uom._compute_quantity(other_proc.product_qty, procurement.purchase_line_id.product_uom)
-
-                precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
-                if not float_is_zero(product_qty, precision_digits=precision):
-                    seller = procurement.product_id._select_seller(
-                        partner_id=procurement.purchase_line_id.partner_id,
-                        quantity=product_qty,
-                        date=procurement.purchase_line_id.order_id.date_order and procurement.purchase_line_id.order_id.date_order[:10],
-                        uom_id=procurement.purchase_line_id.product_uom)
-
-                    price_unit = self.env['account.tax']._fix_tax_included_price(seller.price, procurement.purchase_line_id.product_id.supplier_taxes_id, procurement.purchase_line_id.taxes_id) if seller else 0.0
-                    if price_unit and seller and procurement.purchase_line_id.order_id.currency_id and seller.currency_id != procurement.purchase_line_id.order_id.currency_id:
-                        price_unit = seller.currency_id.compute(price_unit, procurement.purchase_line_id.order_id.currency_id)
-
-                    if seller and seller.product_uom != procurement.purchase_line_id.product_uom:
-                        price_unit = seller.product_uom._compute_price(price_unit, procurement.purchase_line_id.product_uom)
-
-                    procurement.purchase_line_id.product_qty = product_qty
-                    procurement.purchase_line_id.price_unit = price_unit
+    def _run(self, values, rule, doraise=True):
+        if rule.action == 'buy':
+            cache = {}
+            suppliers = values['product_id'].seller_ids\
+                .filtered(lambda r: (not r.company_id or r.company_id == values['company_id']) and (not r.product_id or r.product_id == values['product_id']))
+            if not suppliers:
+                msg = _('No vendor associated to product %s. Unable to generate the purchase order.') % (values['product_id'].display_name,)
+                if doraise:
+                    raise UserError(msg)
                 else:
-                    procurement.purchase_line_id.unlink()
+                    self._log_next_activity(values['product_id'], msg)
+                    return False
+            supplier = self._make_po_select_supplier(values, rule, suppliers)
+            partner = supplier.name
 
-        return result
+            domain = self._make_po_get_domain(values, rule, partner)
 
-    @api.multi
-    def _run(self):
-        if self.rule_id and self.rule_id.action == 'buy':
-            return self.make_po()
-        return super(ProcurementOrder, self)._run()
+            if domain in cache:
+                po = cache[domain]
+            else:
+                po = self.env['purchase.order'].search([dom for dom in domain])
+                po = po[0] if po else False
+                cache[domain] = po
+            if not po:
+                vals = self._prepare_purchase_order(values, rule, partner)
+                po = self.env['purchase.order'].create(vals)
+                cache[domain] = po
+            elif not po.origin or values['origin'] not in po.origin.split(', '):
+                if po.origin:
+                    if values['origin']:
+                        po.write({'origin': po.origin + ', ' + values['origin']})
+                    else:
+                        po.write({'origin': po.origin})
+                else:
+                    po.write({'origin': values['origin']})
 
-    @api.multi
-    def _check(self):
-        if self.purchase_line_id:
-            if not self.move_ids:
-                return False
-            return all(move.state in ('done', 'cancel') for move in self.move_ids) and any(move.state == 'done' for move in self.move_ids)
-        return super(ProcurementOrder, self)._check()
-
-    def _get_purchase_schedule_date(self):
+            # Create Line
+            po_line = False
+            for line in po.order_line:
+                if line.product_id == values['product_id'] and line.product_uom == values['product_id'].uom_po_id:
+                    procurement_uom_po_qty = values['product_uom']._compute_quantity(values['product_qty'], values['product_id'].uom_po_id)
+                    seller = values['product_id']._select_seller(
+                        partner_id=partner,
+                        quantity = line.product_qty + procurement_uom_po_qty,
+                        date = po.date_order and po.date_order[:10],
+                        uom_id=values['product_id'].uom_po_id)
+
+                    price_unit = self.env['account.tax']._fix_tax_included_price(seller.price, line.product_id.supplier_taxes_id, line.taxes_id) if seller else 0.0
+                    if price_unit and seller and po.currency_id and seller.currency_id != po.currency_id:
+                        price_unit = seller.currency_id.compute(price_unit, po.currency_id)
+
+                    po_line = line.write({
+                        'product_qty': line.product_qty + procurement_uom_po_qty,
+                        'price_unit': price_unit,
+                        'move_dest_ids': [(4, x.id) for x in values.get('move_dest_ids', [])]
+                    })
+                    break
+            if not po_line:
+                vals = self._prepare_purchase_order_line(values, rule, po, supplier)
+                self.env['purchase.order.line'].create(vals)
+            return True
+        return super(ProcurementGroup, self)._run(values, rule, doraise=True)
+
+    def _get_purchase_schedule_date(self, values, rule):
         """Return the datetime value to use as Schedule Date (``date_planned``) for the
            Purchase Order Lines created to satisfy the given procurement. """
-        procurement_date_planned = datetime.strptime(self.date_planned, DEFAULT_SERVER_DATETIME_FORMAT)
-        schedule_date = (procurement_date_planned - relativedelta(days=self.company_id.po_lead))
+        procurement_date_planned = datetime.strptime(values['date_planned'], DEFAULT_SERVER_DATETIME_FORMAT)
+        schedule_date = (procurement_date_planned - relativedelta(days=values['company_id'].po_lead))
         return schedule_date
 
-    def _get_purchase_order_date(self, partner, schedule_date):
+    def _get_purchase_order_date(self, values, rule, partner, schedule_date):
         """Return the datetime value to use as Order Date (``date_order``) for the
            Purchase Order created to satisfy the given procurement. """
-        self.ensure_one()
-
-        seller = self.product_id._select_seller(
+        seller = values['product_id']._select_seller(
             partner_id=partner,
-            quantity=self.product_qty,
+            quantity=values['product_qty'],
             date=fields.Date.to_string(schedule_date),
-            uom_id=self.product_uom)
+            uom_id=values['product_uom'])
 
         return schedule_date - relativedelta(days=int(seller.delay))
 
-    @api.multi
-    def _prepare_purchase_order_line(self, po, supplier):
-        self.ensure_one()
-
-        procurement_uom_po_qty = self.product_uom._compute_quantity(self.product_qty, self.product_id.uom_po_id)
-        seller = self.product_id._select_seller(
+    @api.model
+    def _prepare_purchase_order_line(self, values, rule, po, supplier):
+        procurement_uom_po_qty = values['product_uom']._compute_quantity(values['product_qty'], values['product_id'].uom_po_id)
+        seller = values['product_id']._select_seller(
             partner_id=supplier.name,
             quantity=procurement_uom_po_qty,
             date=po.date_order and po.date_order[:10],
-            uom_id=self.product_id.uom_po_id)
+            uom_id=values['product_id'].uom_po_id)
 
-        taxes = self.product_id.supplier_taxes_id
+        taxes = values['product_id'].supplier_taxes_id
         fpos = po.fiscal_position_id
         taxes_id = fpos.map_tax(taxes) if fpos else taxes
         if taxes_id:
-            taxes_id = taxes_id.filtered(lambda x: x.company_id.id == self.company_id.id)
+            taxes_id = taxes_id.filtered(lambda x: x.company_id.id == values['company_id'].id)
 
-        price_unit = self.env['account.tax']._fix_tax_included_price(seller.price, self.product_id.supplier_taxes_id, taxes_id) if seller else 0.0
+        price_unit = self.env['account.tax']._fix_tax_included_price(seller.price, values['product_id'].supplier_taxes_id, taxes_id) if seller else 0.0
         if price_unit and seller and po.currency_id and seller.currency_id != po.currency_id:
             price_unit = seller.currency_id.compute(price_unit, po.currency_id)
 
-        product_lang = self.product_id.with_context({
+        product_lang = values['product_id'].with_context({
             'lang': supplier.name.lang,
             'partner_id': supplier.name.id,
         })
@@ -1011,136 +965,65 @@ class ProcurementOrder(models.Model):
         return {
             'name': name,
             'product_qty': procurement_uom_po_qty,
-            'product_id': self.product_id.id,
-            'product_uom': self.product_id.uom_po_id.id,
+            'product_id': values['product_id'].id,
+            'product_uom': values['product_id'].uom_po_id.id,
             'price_unit': price_unit,
             'date_planned': date_planned,
+            'orderpoint_id': values.get('orderpoint_id', False) and values.get('orderpoint_id').id,
             'taxes_id': [(6, 0, taxes_id.ids)],
-            'procurement_ids': [(4, self.id)],
             'order_id': po.id,
+            'move_dest_ids': [(4, x.id) for x in values.get('move_dest_ids', [])],
         }
 
-    @api.multi
-    def _prepare_purchase_order(self, partner):
-        self.ensure_one()
-        schedule_date = self._get_purchase_schedule_date()
-        purchase_date = self._get_purchase_order_date(partner, schedule_date)
-        fpos = self.env['account.fiscal.position'].with_context(company_id=self.company_id.id).get_fiscal_position(partner.id)
+    def _prepare_purchase_order(self, values, rule, partner):
+        schedule_date = self._get_purchase_schedule_date(values, rule)
+        purchase_date = self._get_purchase_order_date(values, rule, partner, schedule_date)
+        fpos = self.env['account.fiscal.position'].with_context(company_id=values['company_id'].id).get_fiscal_position(partner.id)
 
-        gpo = self.rule_id.group_propagation_option
-        group = (gpo == 'fixed' and self.rule_id.group_id.id) or \
-                (gpo == 'propagate' and self.group_id.id) or False
+        gpo = rule.group_propagation_option
+        group = (gpo == 'fixed' and rule.group_id.id) or \
+                (gpo == 'propagate' and values['group_id'].id) or False
 
         return {
             'partner_id': partner.id,
-            'picking_type_id': self.rule_id.picking_type_id.id,
-            'company_id': self.company_id.id,
+            'picking_type_id': rule.picking_type_id.id,
+            'company_id': values['company_id'].id,
             'currency_id': partner.property_purchase_currency_id.id or self.env.user.company_id.currency_id.id,
-            'dest_address_id': self.partner_dest_id.id,
-            'origin': self.origin,
+            'dest_address_id': values.get('partner_dest_id', False) and values['partner_dest_id'].id,
+            'origin': values['origin'],
             'payment_term_id': partner.property_supplier_payment_term_id.id,
             'date_order': purchase_date.strftime(DEFAULT_SERVER_DATETIME_FORMAT),
             'fiscal_position_id': fpos,
             'group_id': group
         }
 
-    def _make_po_select_supplier(self, suppliers):
+    def _make_po_select_supplier(self, values, rule, suppliers):
         """ Method intended to be overridden by customized modules to implement any logic in the
             selection of supplier.
         """
         return suppliers[0]
 
-    def _make_po_get_domain(self, partner):
-        gpo = self.rule_id.group_propagation_option
-        group = (gpo == 'fixed' and self.rule_id.group_id) or \
-                (gpo == 'propagate' and self.group_id) or False
+    def _make_po_get_domain(self, values, rule, partner):
+        domain = super(ProcurementGroup, self)._make_po_get_domain(values, partner)
+        gpo = rule.group_propagation_option
+        group = (gpo == 'fixed' and rule.group_id) or \
+                (gpo == 'propagate' and values['group_id']) or False
 
-        domain = (
+        domain += (
             ('partner_id', '=', partner.id),
             ('state', '=', 'draft'),
-            ('picking_type_id', '=', self.rule_id.picking_type_id.id),
-            ('company_id', '=', self.company_id.id),
-            ('dest_address_id', '=', self.partner_dest_id.id))
+            ('picking_type_id', '=', rule.picking_type_id.id),
+            ('company_id', '=', values['company_id'].id),
+            )
         if group:
             domain += (('group_id', '=', group.id),)
+        if values.get('date_planned', False):
+            domain += (('date_planned', '=', values.get('date_planned')),)
         return domain
 
-    @api.multi
-    def make_po(self):
-        cache = {}
-        res = []
-        for procurement in self:
-            suppliers = procurement.product_id.seller_ids\
-                .filtered(lambda r: (not r.company_id or r.company_id == procurement.company_id) and (not r.product_id or r.product_id == procurement.product_id))
-            if not suppliers:
-                procurement.message_post(body=_('No vendor associated to product %s. Please set one to fix this procurement.') % (procurement.product_id.name))
-                continue
-            supplier = procurement._make_po_select_supplier(suppliers)
-            partner = supplier.name
-
-            domain = procurement._make_po_get_domain(partner)
-
-            if domain in cache:
-                po = cache[domain]
-            else:
-                po = self.env['purchase.order'].search([dom for dom in domain])
-                po = po[0] if po else False
-                cache[domain] = po
-            if not po:
-                vals = procurement._prepare_purchase_order(partner)
-                po = self.env['purchase.order'].create(vals)
-                name = (procurement.group_id and (procurement.group_id.name + ":") or "") + (procurement.name != "/" and procurement.name or procurement.move_dest_id.raw_material_production_id and procurement.move_dest_id.raw_material_production_id.name or "")
-                message = _("This purchase order has been created from: <a href=# data-oe-model=procurement.order data-oe-id=%d>%s</a>") % (procurement.id, name)
-                po.message_post(body=message)
-                cache[domain] = po
-            elif not po.origin or procurement.origin not in po.origin.split(', '):
-                # Keep track of all procurements
-                if po.origin:
-                    if procurement.origin:
-                        po.write({'origin': po.origin + ', ' + procurement.origin})
-                    else:
-                        po.write({'origin': po.origin})
-                else:
-                    po.write({'origin': procurement.origin})
-                name = (self.group_id and (self.group_id.name + ":") or "") + (self.name != "/" and self.name or self.move_dest_id.raw_material_production_id and self.move_dest_id.raw_material_production_id.name or "")
-                message = _("This purchase order has been modified from: <a href=# data-oe-model=procurement.order data-oe-id=%d>%s</a>") % (procurement.id, name)
-                po.message_post(body=message)
-            if po:
-                res += [procurement.id]
-
-            # Create Line
-            po_line = False
-            for line in po.order_line:
-                if line.product_id == procurement.product_id and line.product_uom == procurement.product_id.uom_po_id:
-                    procurement_uom_po_qty = procurement.product_uom._compute_quantity(procurement.product_qty, procurement.product_id.uom_po_id)
-                    seller = procurement.product_id._select_seller(
-                        partner_id=partner,
-                        quantity=line.product_qty + procurement_uom_po_qty,
-                        date=po.date_order and po.date_order[:10],
-                        uom_id=procurement.product_id.uom_po_id)
-
-                    price_unit = self.env['account.tax']._fix_tax_included_price(seller.price, line.product_id.supplier_taxes_id, line.taxes_id) if seller else 0.0
-                    if price_unit and seller and po.currency_id and seller.currency_id != po.currency_id:
-                        price_unit = seller.currency_id.compute(price_unit, po.currency_id)
-
-                    po_line = line.write({
-                        'product_qty': line.product_qty + procurement_uom_po_qty,
-                        'price_unit': price_unit,
-                        'procurement_ids': [(4, procurement.id)]
-                    })
-                    break
-            if not po_line:
-                vals = procurement._prepare_purchase_order_line(po, supplier)
-                self.env['purchase.order.line'].create(vals)
-        return res
-
-    @api.multi
-    def open_purchase_order(self):
-        action = self.env.ref('purchase.purchase_order_action_generic')
-        action_dict = action.read()[0]
-        action_dict['res_id'] = self.purchase_id.id
-        action_dict['target'] = 'current'
-        return action_dict
+    @api.model
+    def _get_exceptions_domain(self):
+        return super(ProcurementGroup, self)._get_exceptions_domain() + [('created_purchase_line_id', '=', False)]
 
 
 class ProductTemplate(models.Model):

--- a/addons/purchase/models/stock.py
+++ b/addons/purchase/models/stock.py
@@ -28,6 +28,8 @@ class StockMove(models.Model):
 
     purchase_line_id = fields.Many2one('purchase.order.line',
         'Purchase Order Line', ondelete='set null', index=True, readonly=True, copy=False)
+    created_purchase_line_id = fields.Many2one('purchase.order.line',
+        'Created Purchase Order Line', ondelete='set null', readonly=True, copy=False)
 
     @api.multi
     def _get_price_unit(self):
@@ -137,3 +139,13 @@ class ReturnPicking(models.TransientModel):
         vals = super(ReturnPicking, self)._prepare_move_default_values(return_line, new_picking)
         vals['purchase_line_id'] = return_line.move_id.purchase_line_id.id
         return vals
+
+
+class Orderpoint(models.Model):
+    _inherit = "stock.warehouse.orderpoint"
+
+    def _quantity_in_progress(self):
+        res = super(Orderpoint, self)._quantity_in_progress()
+        for poline in self.env['purchase.order.line'].search([('state','in',('draft','sent','to approve')),('orderpoint_id','in',self.ids)]):
+            res[poline.orderpoint_id.id] += poline.product_uom._compute_quantity(poline.product_qty, poline.orderpoint_id.product_uom, round=False)
+        return res
\ No newline at end of file
