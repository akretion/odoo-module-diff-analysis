PR: https://github.com/odoo/odoo/pull/

From: 3425752eaca236c1e4b4d616aa49b3faa6cfd957
From: Laurent Smet
Date: 2017-05-08 07:22:56

Structural Changes: 29
Total Changes: 525

[REM] odoo/report: remove deprecated stuff

- RML Reports
- Webkit Reports (most part already removed by 13b9982c6298021289707ed364e3c1d622a09f13)
- LocalService in netsvc.py
- rename attributes like rml_% to report_%
- rename ir.actions.report.xml to ir.actions.report
- allow rendering directly on an ir.actions.report by calling render method
- remove 'controller' report_type
- remove unused res.font stuff
- remove print_report method in models.py (not used)
- restore removed call to pdftotext process in test_reports

================================= pseudo patch: =================================

--- a/odoo/addons/base/base_data.xml
+++ b/odoo/addons/base/base_data.xml
@@ -67,26 +67,6 @@ Administrator</span>]]></field>
             <field eval="10" name="sequence"/>
         </record>
 
-        <!-- Basic fonts family included in PDF standart, will always be in the font list -->
-        <record model="res.font" id="base.font_helvetica">
-            <field name="name">Helvetica</field>
-            <field name="family">Helvetica</field>
-            <field name="path">/dev/null</field>
-            <field name="mode">all</field>
-        </record>
-        <record model="res.font" id="base.font_times">
-            <field name="name">Times</field>
-            <field name="family">Times</field>
-            <field name="path">/dev/null</field>
-            <field name="mode">all</field>
-        </record>
-        <record model="res.font" id="base.font_courier">
-            <field name="name">Courier</field>
-            <field name="family">Courier</field>
-            <field name="path">/dev/null</field>
-            <field name="mode">all</field>
-        </record>
-
         <record id="public_partner" model="res.partner">
             <field name="name">Public user</field>
             <field name="active" eval="False"/>

--- a/odoo/addons/base/ir/ir_actions.py
+++ b/odoo/addons/base/ir/ir_actions.py
@@ -11,7 +11,6 @@ from pytz import timezone
 import odoo
 from odoo import api, fields, models, tools, _
 from odoo.exceptions import MissingError, UserError, ValidationError
-from odoo.report.report_sxw import report_sxw, report_rml
 from odoo.tools.safe_eval import safe_eval, test_python_expr
 
 _logger = logging.getLogger(__name__)
@@ -72,24 +71,18 @@ class IrActions(models.Model):
         }
 
 
-class IrActionsReportXml(models.Model):
-    _name = 'ir.actions.report.xml'
+class IrActionsReport(models.Model):
+    _name = 'ir.actions.report'
     _inherit = 'ir.actions.actions'
     _table = 'ir_act_report_xml'
     _sequence = 'ir_actions_id_seq'
     _order = 'name'
 
     name = fields.Char(translate=True)
-    type = fields.Char(default='ir.actions.report.xml')
+    type = fields.Char(default='ir.actions.report')
 
     model = fields.Char(required=True)
-    report_type = fields.Selection([('qweb-pdf', 'PDF'),
-                                    ('qweb-html', 'HTML'),
-                                    ('controller', 'Controller'),
-                                    ('pdf', 'RML pdf (deprecated)'),
-                                    ('sxw', 'RML sxw (deprecated)'),
-                                    ('webkit', 'Webkit (deprecated)')],
-                                   required=True, default="pdf",
+    report_type = fields.Selection([('qweb-pdf', 'PDF'), ('qweb-html', 'HTML')], required=True, default="pdf",
                                    help="HTML will open the report directly in your browser, PDF will use wkhtmltopdf to render the HTML into a PDF file and let you download it, Controller allows you to define the url of a custom controller outputting any kind of report.")
     report_name = fields.Char(string='Template Name', required=True,
                               help="For QWeb reports, name of the template used in the rendering. The method 'render_html' of the model 'report.template_name' will be called (if any) to give the html. For RML reports, this is the LocalService name.")
@@ -108,88 +101,9 @@ class IrActionsReportXml(models.Model):
     parser = fields.Char(string='Parser Class')
     auto = fields.Boolean(string='Custom Python Parser', default=True)
 
-    report_xsl = fields.Char(string='XSL Path')
-    report_xml = fields.Char(string='XML Path')
-
-    report_rml = fields.Char(string='Main Report File Path/controller', help="The path to the main report file/controller (depending on Report Type) or empty if the content is in another data field")
-    report_file = fields.Char(related='report_rml', string='Report File', required=False, readonly=False, store=True,
+    report_file = fields.Char(string='Report File', required=False, readonly=False, store=True,
                               help="The path to the main report file (depending on Report Type) or empty if the content is in another field")
 
-    report_sxw = fields.Char(compute='_compute_report_sxw', string='SXW Path')
-    report_sxw_content_data = fields.Binary(string='SXW Content')
-    report_rml_content_data = fields.Binary(string='RML Content')
-    report_sxw_content = fields.Binary(compute='_compute_report_sxw_content', inverse='_inverse_report_sxw_content', string='SXW Content')
-    report_rml_content = fields.Binary(compute='_compute_report_rml_content', inverse='_inverse_report_rml_content', string='RML Content')
-
-    @api.depends('report_rml')
-    def _compute_report_sxw(self):
-        for report in self:
-            if report.report_rml:
-                self.report_sxw = report.report_rml.replace('.rml', '.sxw')
-
-    def _report_content(self, name):
-        data = self[name + '_content_data']
-        if not data and self[name]:
-            try:
-                with tools.file_open(self[name], mode='rb') as fp:
-                    data = fp.read()
-            except Exception:
-                data = False
-        return data
-
-    @api.depends('report_sxw', 'report_sxw_content_data')
-    def _compute_report_sxw_content(self):
-        for report in self:
-            report.report_sxw_content = report._report_content('report_sxw')
-
-    @api.depends('report_rml', 'report_rml_content_data')
-    def _compute_report_rml_content(self):
-        for report in self:
-            report.report_rml_content = report._report_content('report_rml')
-
-    def _inverse_report_sxw_content(self):
-        for report in self:
-            report.report_sxw_content_data = report.report_sxw_content
-
-    def _inverse_report_rml_content(self):
-        for report in self:
-            report.report_rml_content_data = report.report_rml_content
-
-    @api.model_cr
-    def _lookup_report(self, name):
-        """
-        Look up a report definition.
-        """
-        join = os.path.join
-
-        # First lookup in the deprecated place, because if the report definition
-        # has not been updated, it is more likely the correct definition is there.
-        # Only reports with custom parser sepcified in Python are still there.
-        if 'report.' + name in odoo.report.interface.report_int._reports:
-            return odoo.report.interface.report_int._reports['report.' + name]
-
-        self._cr.execute("SELECT * FROM ir_act_report_xml WHERE report_name=%s", (name,))
-        row = self._cr.dictfetchone()
-        if not row:
-            raise Exception("Required report does not exist: %s" % name)
-
-        if row['report_type'] in ('qweb-pdf', 'qweb-html'):
-            return row['report_name']
-        elif row['report_rml'] or row['report_rml_content_data']:
-            kwargs = {}
-            if row['parser']:
-                kwargs['parser'] = getattr(odoo.addons, row['parser'])
-            return report_sxw('report.'+row['report_name'], row['model'],
-                              join('addons', row['report_rml'] or '/'),
-                              header=row['header'], register=False, **kwargs)
-        elif row['report_xsl'] and row['report_xml']:
-            return report_rml('report.'+row['report_name'], row['model'],
-                              join('addons', row['report_xml']),
-                              row['report_xsl'] and join('addons', row['report_xsl']),
-                              register=False)
-        else:
-            raise Exception("Unhandled report type: %s" % row)
-
     @api.multi
     def create_action(self):
         """ Create a contextual action for each report. """
@@ -198,7 +112,7 @@ class IrActionsReportXml(models.Model):
                 'name': report.name,
                 'model': report.model,
                 'key2': 'client_print_multi',
-                'value': "ir.actions.report.xml,%s" % report.id,
+                'value': "ir.actions.report,%s" % report.id,
             })
             report.write({'ir_values_id': ir_values.id})
         return True
@@ -216,21 +130,26 @@ class IrActionsReportXml(models.Model):
         return True
 
     @api.model
-    def render_report(self, res_ids, name, data):
-        """
-        Look up a report definition and render the report for the provided IDs.
-        """
-        report = self._lookup_report(name)
-        if isinstance(report, basestring):  # Qweb report
-            # The only case where a QWeb report is rendered with this method occurs when running
-            # yml tests originally written for RML reports.
-            if tools.config['test_enable'] and not tools.config['test_report_directory']:
-                # Only generate the pdf when a destination folder has been provided.
-                return self.env['report'].get_html(res_ids, report, data=data), 'html'
-            else:
-                return self.env['report'].get_pdf(res_ids, report, data=data), 'pdf'
-        else:
-            return report.create(self._cr, self._uid, res_ids, data, context=self._context)
+    def render_html(self, res_ids, data=None):
+        return self.env['report'].get_html(res_ids, self.report_name, data=data), 'html'
+
+    @api.multi
+    def render_pdf(self, res_ids, data=None):
+        # In case of test environment without enough workers to perform calls to wkhtmltopdf,
+        # fallback to render_html.
+        if tools.config['test_enable'] and not tools.config['test_report_directory']:
+            return self.render_html(res_ids, data=data)
+        return self.env['report'].get_pdf(res_ids, self.report_name, data=data), 'pdf'
+
+    @api.multi
+    def render(self, res_ids, data=None):
+        report_type = self.report_type.lower()
+        if report_type.startswith('qweb-'):
+            report_type = report_type[5:]
+        render_func = getattr(self, 'render_' + report_type, None)
+        if not render_func:
+            return None
+        return render_func(res_ids, data=data)
 
 
 class IrActionsActWindow(models.Model):

--- a/odoo/addons/base/ir/ir_actions.xml
+++ b/odoo/addons/base/ir/ir_actions.xml
@@ -45,11 +45,11 @@
         <menuitem id="next_id_6" name="Actions" parent="base.menu_custom" sequence="5"/>
         <menuitem action="ir_sequence_actions" id="menu_ir_sequence_actions" parent="next_id_6"/>
 
-        <!-- ir.actions.report.xml -->
+        <!-- ir.actions.report -->
 
         <record id="act_report_xml_view" model="ir.ui.view">
-            <field name="name">ir.actions.report.xml</field>
-            <field name="model">ir.actions.report.xml</field>
+            <field name="name">ir.actions.report</field>
+            <field name="model">ir.actions.report</field>
             <field name="arch" type="xml">
                 <form string="Report">
                     <field name="ir_values_id" invisible="1"/>
@@ -69,33 +69,18 @@
                             </group>
                             <group>
                                 <field name="model"/>
-                                <field name="report_name" attrs="{'invisible':[('report_type','=', 'controller')]}"/>
-                                <field name="report_rml" attrs="{'invisible':[('report_type','!=', 'controller')]}"/>
+                                <field name="report_name"/>
                             </group>
                         </group>
                         <notebook>
                             <page name="security" string="Security">
                                 <field name="groups_id"/>
                             </page>
-                            <page name='rml' string="RML Configuration" attrs="{'invisible':[('report_type','not in',['pdf','sxw'])]}">
-                                <group>
-                                    <group string="RML Report">
-                                        <field name="header"/>
-                                        <field name="report_file"/>
-                                        <field name="auto"/>
-                                        <field name="parser"/>
-                                    </group>
-                                    <group string="XML Report">
-                                        <field name="report_xsl"/>
-                                        <field name="report_xml"/>
-                                    </group>
-                                </group>
-                            </page>
                             <page name='advanced' string="Advanced Properties">
                                 <group>
                                     <field name="multi"/>
-                                    <field name="attachment_use" attrs="{'invisible':[('report_type','=', 'controller')]}"/>
-                                    <field name="attachment" attrs="{'invisible':[('report_type','=', 'controller')]}"/>
+                                    <field name="attachment_use"/>
+                                    <field name="attachment"/>
                                 </group>
                             </page>
                         </notebook>
@@ -104,8 +89,8 @@
             </field>
         </record>
         <record id="act_report_xml_view_tree" model="ir.ui.view">
-            <field name="name">ir.actions.report.xml.tree</field>
-            <field name="model">ir.actions.report.xml</field>
+            <field name="name">ir.actions.report.tree</field>
+            <field name="model">ir.actions.report</field>
             <field name="arch" type="xml">
                 <tree string="Report xml">
                     <field name="name"/>
@@ -118,8 +103,8 @@
             </field>
         </record>
         <record id="act_report_xml_search_view" model="ir.ui.view">
-            <field name="name">ir.actions.report.xml.search</field>
-            <field name="model">ir.actions.report.xml</field>
+            <field name="name">ir.actions.report.search</field>
+            <field name="model">ir.actions.report</field>
             <field name="arch" type="xml">
                 <search string="Report Xml">
                     <field name="name"
@@ -133,15 +118,15 @@
                 </search>
             </field>
         </record>
-        <record id="ir_action_report_xml" model="ir.actions.act_window">
+        <record id="ir_action_report" model="ir.actions.act_window">
             <field name="name">Reports</field>
             <field name="type">ir.actions.act_window</field>
-            <field name="res_model">ir.actions.report.xml</field>
+            <field name="res_model">ir.actions.report</field>
             <field name="view_type">form</field>
             <field name="view_id" ref="act_report_xml_view_tree"/>
             <field name="search_view_id" ref="act_report_xml_search_view"/>
         </record>
-        <menuitem action="ir_action_report_xml" id="menu_ir_action_report_xml" parent="base.next_id_6"/>
+        <menuitem action="ir_action_report" id="menu_ir_action_report" parent="base.next_id_6"/>
 
         <!-- ir.actions.act_window -->
 

--- a/odoo/addons/base/ir/ir_ui_menu.py
+++ b/odoo/addons/base/ir/ir_ui_menu.py
@@ -37,7 +37,7 @@ class IrUiMenu(models.Model):
                                       "If this field is empty, Odoo will compute visibility based on the related object's read access.")
     complete_name = fields.Char(compute='_compute_complete_name', string='Full Path')
     web_icon = fields.Char(string='Web Icon File')
-    action = fields.Reference(selection=[('ir.actions.report.xml', 'ir.actions.report.xml'),
+    action = fields.Reference(selection=[('ir.actions.report', 'ir.actions.report'),
                                          ('ir.actions.act_window', 'ir.actions.act_window'),
                                          ('ir.actions.act_url', 'ir.actions.act_url'),
                                          ('ir.actions.server', 'ir.actions.server'),
@@ -99,7 +99,7 @@ class IrUiMenu(models.Model):
         access = self.env['ir.model.access']
         MODEL_GETTER = {
             'ir.actions.act_window': lambda action: action.res_model,
-            'ir.actions.report.xml': lambda action: action.model,
+            'ir.actions.report': lambda action: action.model,
             'ir.actions.server': lambda action: action.model_id.model,
         }
         for menu in action_menus:

--- a/odoo/addons/base/ir/ir_values.py
+++ b/odoo/addons/base/ir/ir_values.py
@@ -10,11 +10,6 @@ from odoo.tools import pickle
 import logging
 _logger = logging.getLogger(__name__)
 
-
-EXCLUDED_FIELDS = set(('code',
-    'report_sxw_content', 'report_rml_content', 'report_sxw', 'report_rml',
-    'report_sxw_content_data', 'report_rml_content_data', 'search_view', ))
-
 #: Possible slots to bind an action to with :meth:`~.set_action`
 ACTION_SLOTS = [
     "client_action_multi",      # sidebar wizard action
@@ -419,14 +414,10 @@ class IrValues(models.Model):
         # process values and their action
         results = {}
         for id, name, action in actions:
-            fields = [field for field in action._fields if field not in EXCLUDED_FIELDS]
             # FIXME: needs cleanup
             try:
-                action_def = {
-                    field: action._fields[field].convert_to_read(action[field], action)
-                    for field in fields
-                }
-                if action._name in ('ir.actions.report.xml', 'ir.actions.act_window'):
+                action_def = dict([(k, v.convert_to_read(action[k], action)) for k, v in action._fields.items()])
+                if action._name in ('ir.actions.report', 'ir.actions.act_window'):
                     if action.groups_id and not action.groups_id & self.env.user.groups_id:
                         if name == 'Menuitem':
                             raise AccessError(_('You do not have the permission to perform this operation!!!'))

--- a/odoo/addons/base/module/module.py
+++ b/odoo/addons/base/module/module.py
@@ -184,7 +184,7 @@ class Module(models.Model):
     @api.depends('name', 'state')
     def _get_views(self):
         IrModelData = self.env['ir.model.data'].with_context(active_test=True)
-        dmodels = ['ir.ui.view', 'ir.actions.report.xml', 'ir.ui.menu']
+        dmodels = ['ir.ui.view', 'ir.actions.report', 'ir.ui.menu']
 
         for module in self:
             # Skip uninstalled modules below, no data to find anyway.
@@ -210,7 +210,7 @@ class Module(models.Model):
                 return '%s%s (%s)' % (v.inherit_id and '* INHERIT ' or '', v.name, v.type)
 
             module.views_by_module = "\n".join(sorted(map(format_view, browse('ir.ui.view'))))
-            module.reports_by_module = "\n".join(sorted(map(attrgetter('name'), browse('ir.actions.report.xml'))))
+            module.reports_by_module = "\n".join(sorted(map(attrgetter('name'), browse('ir.actions.report'))))
             module.menus_by_module = "\n".join(sorted(map(attrgetter('complete_name'), browse('ir.ui.menu'))))
 
     @api.depends('icon')

--- a/odoo/addons/base/report/__init__.py
+++ b/None
@@ -1 +0,0 @@
-from . import preview_report

--- a/odoo/addons/base/report/corporate_defaults.xml
+++ b/odoo/addons/base/report/corporate_defaults.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0"?>
 <corporate-header>
     <corporation type="zoom" name="company_id">
-        <rml_header1 type="field" name="rml_header1"/>
-        <rml_footer type="field" name="rml_footer"/>
+        <report_header type="field" name="report_header"/>
+        <report_footer type="field" name="report_footer"/>
         <title type="field" name="partner_id.title"/>
         <name type="field" name="partner_id.name"/>
         <street type="field" name="street"/>

--- a/odoo/addons/base/report/corporate_sxw_header.xml
+++ b/odoo/addons/base/report/corporate_sxw_header.xml
@@ -200,7 +200,7 @@
                             <text:p text:style-name="P1">[[ company.partner_id.name ]]</text:p>
                         </table:table-cell>
                         <table:table-cell table:style-name="Table2.A1" table:value-type="string">
-                            <text:p text:style-name="P2">[[ company.rml_header1 ]]</text:p>
+                            <text:p text:style-name="P2">[[ company.report_header ]]</text:p>
                         </table:table-cell>
                     </table:table-row>
                 </table:table>
@@ -233,7 +233,7 @@
                     <table:table-column table:style-name="Table1.A"/>
                     <table:table-row>
                         <table:table-cell table:style-name="Table1.A1" table:value-type="string">
-                            <text:p text:style-name="P7">[[ company.rml_footer ]]</text:p>
+                            <text:p text:style-name="P7">[[ company.report_footer ]]</text:p>
                             <text:p text:style-name="P7">Contact : [[ user.name ]]</text:p>
                         </table:table-cell>
                     </table:table-row>

--- a/odoo/addons/base/report/preview_report.py
+++ b/None
@@ -1,12 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo.report import report_sxw
-
-class rmlparser(report_sxw.rml_parse):
-    def set_context(self, objects, data, ids, report_type = None):
-        super(rmlparser,self).set_context(objects, data, ids, report_type)
-        self.setCompany(objects[0])
-
-report_sxw.report_sxw('report.preview.report', 'res.company',
-      'addons/base/report/preview_report.rml', parser=rmlparser, header='external')

--- a/odoo/addons/base/report/preview_report.rml
+++ b/None
@@ -1,12 +0,0 @@
-<?xml version="1.0"?>
-<document filename="preview_report.pdf">
-  <template title="Preview Report" author="Odoo (sales@odoo.com)" allowSplitting="20">
-    <pageTemplate id="first">
-      <frame id="first" x1="57.0" y1="57.0" width="481" height="728"/>
-    </pageTemplate>
-  </template>
-  <story>
-    <para>
-    </para>
-  </story>
-</document>

--- a/odoo/addons/base/res/__init__.py
+++ b/odoo/addons/base/res/__init__.py
@@ -7,7 +7,6 @@ from . import res_partner
 from . import res_bank
 from . import res_config
 from . import res_currency
-from . import res_font
 from . import res_company
 from . import res_users
 from . import res_request

--- a/odoo/addons/base/res/res_company.py
+++ b/odoo/addons/base/res/res_company.py
@@ -13,98 +13,6 @@ class Company(models.Model):
     _description = 'Companies'
     _order = 'sequence, name'
 
-    _header = """
-<header>
-<pageTemplate>
-    <frame id="first" x1="28.0" y1="28.0" width="%s" height="%s"/>
-    <stylesheet>
-       <!-- Set here the default font to use for all <para> tags -->
-       <paraStyle name='Normal' fontName="DejaVuSans"/>
-    </stylesheet>
-    <pageGraphics>
-        <fill color="black"/>
-        <stroke color="black"/>
-        <setFont name="DejaVuSans" size="8"/>
-        <drawString x="%s" y="%s"> [[ formatLang(time.strftime("%%Y-%%m-%%d"), date=True) ]]  [[ time.strftime("%%H:%%M") ]]</drawString>
-        <setFont name="DejaVuSans-Bold" size="10"/>
-        <drawCentredString x="%s" y="%s">[[ company.partner_id.name ]]</drawCentredString>
-        <stroke color="#000000"/>
-        <lines>%s</lines>
-        <!-- Set here the default font to use for all <drawString> tags -->
-        <!-- don't forget to change the 2 other occurence of <setFont> above if needed --> 
-        <setFont name="DejaVuSans" size="8"/>
-    </pageGraphics>
-</pageTemplate>
-</header>"""
-
-    _header2 = _header % (539, 772, "1.0cm", "28.3cm", "11.1cm", "28.3cm", "1.0cm 28.1cm 20.1cm 28.1cm")
-    _header3 = _header % (786, 525, 25, 555, 440, 555, "25 550 818 550")
-
-    _header_main = """
-<header>
-    <pageTemplate>
-        <frame id="first" x1="1.3cm" y1="3.0cm" height="%s" width="19.0cm"/>
-         <stylesheet>
-            <!-- Set here the default font to use for all <para> tags -->
-            <paraStyle name='Normal' fontName="DejaVuSans"/>
-            <paraStyle name="main_footer" fontSize="8.0" alignment="CENTER"/>
-            <paraStyle name="main_header" fontSize="8.0" leading="10" alignment="LEFT" spaceBefore="0.0" spaceAfter="0.0"/>
-         </stylesheet>
-        <pageGraphics>
-            <!-- Set here the default font to use for all <drawString> tags -->
-            <setFont name="DejaVuSans" size="8"/>
-            <!-- You Logo - Change X,Y,Width and Height -->
-            <image x="1.3cm" y="%s" height="40.0" >[[ company.logo or removeParentNode('image') ]]</image>
-            <fill color="black"/>
-            <stroke color="black"/>
-
-            <!-- page header -->
-            <lines>1.3cm %s 20cm %s</lines>
-            <drawRightString x="20cm" y="%s">[[ company.rml_header1 ]]</drawRightString>
-            <drawString x="1.3cm" y="%s">[[ company.partner_id.name ]]</drawString>
-            <place x="1.3cm" y="%s" height="1.8cm" width="15.0cm">
-                <para style="main_header">[[ display_address(company.partner_id) or  '' ]]</para>
-            </place>
-            <drawString x="1.3cm" y="%s">Phone:</drawString>
-            <drawRightString x="7cm" y="%s">[[ company.partner_id.phone or '' ]]</drawRightString>
-            <drawString x="1.3cm" y="%s">Mail:</drawString>
-            <drawRightString x="7cm" y="%s">[[ company.partner_id.email or '' ]]</drawRightString>
-            <lines>1.3cm %s 7cm %s</lines>
-
-            <!-- left margin -->
-            <rotate degrees="90"/>
-            <fill color="grey"/>
-            <drawString x="2.65cm" y="-0.4cm">generated by Odoo.com</drawString>
-            <fill color="black"/>
-            <rotate degrees="-90"/>
-
-            <!--page bottom-->
-            <lines>1.2cm 2.65cm 19.9cm 2.65cm</lines>
-            <place x="1.3cm" y="0cm" height="2.55cm" width="19.0cm">
-                <para style="main_footer">[[ company.rml_footer ]]</para>
-                <para style="main_footer">Contact : [[ user.name ]] - Page: <pageNumber/></para>
-            </place>
-        </pageGraphics>
-    </pageTemplate>
-</header>"""
-
-    _header_a4 = _header_main % ('21.7cm', '27.7cm', '27.7cm', '27.7cm', '27.8cm', '27.3cm', '25.3cm', '25.0cm', '25.0cm', '24.6cm', '24.6cm', '24.5cm', '24.5cm')
-    _header_letter = _header_main % ('20cm', '26.0cm', '26.0cm', '26.0cm', '26.1cm', '25.6cm', '23.6cm', '23.3cm', '23.3cm', '22.9cm', '22.9cm', '22.8cm', '22.8cm')
-
-    def _get_header(self):
-        try:
-            header_file = tools.file_open(os.path.join(
-                'base', 'report', 'corporate_rml_header.rml'))
-            try:
-                return header_file.read()
-            finally:
-                header_file.close()
-        except:
-            return self._header_a4
-
-    def _get_font(self):
-        return self.env['res.font'].search([('family', '=', 'Helvetica'), ('mode', '=', 'all')], limit=1)
-
     def _get_logo(self):
         return open(os.path.join(tools.config['root_path'], 'addons', 'base', 'res', 'res_company_logo.png'), 'rb') .read().encode('base64')
 
@@ -121,14 +29,8 @@ class Company(models.Model):
     parent_id = fields.Many2one('res.company', string='Parent Company', index=True)
     child_ids = fields.One2many('res.company', 'parent_id', string='Child Companies')
     partner_id = fields.Many2one('res.partner', string='Partner', required=True)
-    rml_header = fields.Text(required=True, default=_get_header)
-    rml_header1 = fields.Text(string='Company Tagline', help="Appears by default on the top right corner of your printed documents (report header).")
-    rml_header2 = fields.Text(string='RML Internal Header', required=True, default=_header2)
-    rml_header3 = fields.Text(string='RML Internal Header for Landscape Reports', required=True, default=_header3)
-    rml_footer = fields.Text(string='Report Footer', translate=True, help="Footer text displayed at the bottom of all reports.")
-    font = fields.Many2one('res.font', string="Font", default=lambda self: self._get_font(),
-                           domain=[('mode', 'in', ('Normal', 'Regular', 'all', 'Book'))],
-                           help="Set the font into the report header, it will be used as default font in the RML reports of the user company")
+    report_header = fields.Text(string='Company Tagline', help="Appears by default on the top right corner of your printed documents (report header).")
+    report_footer = fields.Text(string='Report Footer', translate=True, help="Footer text displayed at the bottom of all reports.")
     logo = fields.Binary(related='partner_id.image', default=_get_logo, string="Company Logo")
     # logo_web: do not store in attachments, since the image is retrieved in SQL for
     # performance reasons (see addons/web/controllers/main.py, Binary.company_logo)
@@ -149,7 +51,6 @@ class Company(models.Model):
     website = fields.Char(related='partner_id.website')
     vat = fields.Char(related='partner_id.vat', string="TIN")
     company_registry = fields.Char()
-    rml_paper_format = fields.Selection([('a4', 'A4'), ('us_letter', 'US Letter')], string="Paper Format", required=True, default='a4', oldname='paper_format')
     sequence = fields.Integer(help='Used to order Companies in the company switcher', default=10)
 
     _sql_constraints = [
@@ -213,20 +114,6 @@ class Company(models.Model):
     def _onchange_state(self):
         self.country_id = self.state_id.country_id
 
-    @api.onchange('font')
-    def _onchange_font_name(self):
-        """ To change default header style of all <para> and drawstring. """
-        def _change_header(header, font):
-            """ Replace default fontname use in header and setfont tag """
-            default_para = re.sub(r'fontName.?=.?".*"', 'fontName="%s"' % font, header)
-            return re.sub(r'(<setFont.?name.?=.?)(".*?")(.)', '\g<1>"%s"\g<3>' % font, default_para)
-
-        if self.font:
-            fontname = self.font.name
-            self.rml_header = _change_header(self.rml_header, fontname)
-            self.rml_header2 = _change_header(self.rml_header2, fontname)
-            self.rml_header3 = _change_header(self.rml_header3, fontname)
-
     @api.multi
     def on_change_country(self, country_id):
         # This function is called from account/models/chart_template.py, hence decorated with `multi`.
@@ -324,18 +211,6 @@ class Company(models.Model):
         self.clear_caches()
         return super(Company, self).write(values)
 
-    @api.onchange('rml_paper_format')
-    def _onchange_rml_paper_format(self):
-        if self.rml_paper_format == 'us_letter':
-            self.rml_header = self._header_letter
-        else:
-            self.rml_header = self._header_a4
-
-    @api.multi
-    def act_discover_fonts(self):
-        self.ensure_one()
-        return self.env["res.font"].font_scan()
-
     @api.constrains('parent_id')
     def _check_parent_id(self):
         if not self._check_recursion():

--- a/odoo/addons/base/res/res_company_view.xml
+++ b/odoo/addons/base/res/res_company_view.xml
@@ -1,8 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <odoo>
     <data>
-        <report id="preview_rml_report" model="res.config.settings" name="preview.report" menu="False" rml="base/report/preview_report.rml" string="Preview RML Report"/>
-
         <record id="view_company_form" model="ir.ui.view">
             <field name="name">res.company.form</field>
             <field name="model">res.company</field>
@@ -31,8 +29,8 @@
                                         <field name="country_id" placeholder="Country" class="o_address_country" options='{"no_open": True}'/>
                                     </div>
                                     <field name="website" widget="url" placeholder="e.g. www.odoo.com"/>
-                                    <field name="rml_footer" placeholder="e.g. Your Bank Accounts, one per line"/>
-                                    <field name="rml_header1" placeholder="e.g. Global Business Solutions"/>
+                                    <field name="report_footer" placeholder="e.g. Your Bank Accounts, one per line"/>
+                                    <field name="report_header" placeholder="e.g. Global Business Solutions"/>
                                 </group>
                                 <group>
                                     <field name="phone"/>

--- a/odoo/addons/base/res/res_font.py
+++ b/None
@@ -1,131 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-import logging
-from reportlab.pdfbase import ttfonts
-
-from odoo import api, fields, models
-from odoo.report.render.rml2pdf import customfonts
-
-"""This module allows the mapping of some system-available TTF fonts to
-the reportlab engine.
-
-This file could be customized per distro (although most Linux/Unix ones)
-should have the same filenames, only need the code below).
-
-Due to an awful configuration that ships with reportlab at many Linux
-and Ubuntu distros, we have to override the search path, too.
-"""
-_logger = logging.getLogger(__name__)
-
-# Alternatives for the [broken] builtin PDF fonts. Default order chosen to match
-# the pre-v8 mapping from odoo.report.render.rml2pdf.customfonts.CustomTTFonts.
-# Format: [ (BuiltinFontFamily, mode, [AlternativeFontName, ...]), ...]
-BUILTIN_ALTERNATIVES = [
-    ('Helvetica', "normal", ["DejaVuSans", "LiberationSans"]),
-    ('Helvetica', "bold", ["DejaVuSans-Bold", "LiberationSans-Bold"]),
-    ('Helvetica', 'italic', ["DejaVuSans-Oblique", "LiberationSans-Italic"]),
-    ('Helvetica', 'bolditalic', ["DejaVuSans-BoldOblique", "LiberationSans-BoldItalic"]),
-    ('Times', 'normal', ["LiberationSerif", "DejaVuSerif"]),
-    ('Times', 'bold', ["LiberationSerif-Bold", "DejaVuSerif-Bold"]),
-    ('Times', 'italic', ["LiberationSerif-Italic", "DejaVuSerif-Italic"]),
-    ('Times', 'bolditalic', ["LiberationSerif-BoldItalic", "DejaVuSerif-BoldItalic"]),
-    ('Courier', 'normal', ["FreeMono", "DejaVuSansMono"]),
-    ('Courier', 'bold', ["FreeMonoBold", "DejaVuSansMono-Bold"]),
-    ('Courier', 'italic', ["FreeMonoOblique", "DejaVuSansMono-Oblique"]),
-    ('Courier', 'bolditalic', ["FreeMonoBoldOblique", "DejaVuSansMono-BoldOblique"]),
-]
-
-
-class ResFont(models.Model):
-    _name = "res.font"
-    _description = 'Fonts available'
-    _order = 'family,name,id'
-    _rec_name = 'family'
-
-    family = fields.Char(string="Font family", required=True)
-    name = fields.Char(string="Font Name", required=True)
-    path = fields.Char(required=True)
-    mode = fields.Char(required=True)
-
-    _sql_constraints = [
-        ('name_font_uniq', 'unique(family, name)', 'You can not register two fonts with the same name'),
-    ]
-
-    @api.model
-    def font_scan(self, lazy=False):
-        """Action of loading fonts
-        In lazy mode will scan the filesystem only if there is no founts in the database and sync if no font in CustomTTFonts
-        In not lazy mode will force scan filesystem and sync
-        """
-        if lazy:
-            # lazy loading, scan only if no fonts in db
-            fonts = self.search([('path', '!=', '/dev/null')])
-            if not fonts:
-                # no scan yet or no font found on the system, scan the filesystem
-                self._scan_disk()
-            elif len(customfonts.CustomTTFonts) == 0:
-                # CustomTTFonts list is empty
-                self._sync()
-        else:
-            self._scan_disk()
-        return True
-
-    def _scan_disk(self):
-        """Scan the file system and register the result in database"""
-        found_fonts = []
-        for font_path in customfonts.list_all_sysfonts():
-            try:
-                font = ttfonts.TTFontFile(font_path)
-                _logger.debug("Found font %s at %s", font.name, font_path)
-                found_fonts.append((font.familyName, font.name, font_path, font.styleName))
-            except Exception as ex:
-                _logger.warning("Could not register Font %s: %s", font_path, ex)
-
-        for family, name, path, mode in found_fonts:
-            if not self.search([('family', '=', family), ('name', '=', name)]):
-                self.create({'family': family, 'name': name, 'path': path, 'mode': mode})
-
-        # remove fonts not present on the disk anymore
-        existing_font_names = [name for (family, name, path, mode) in found_fonts]
-        # Remove inexistent fonts
-        self.search([('name', 'not in', existing_font_names), ('path', '!=', '/dev/null')]).unlink()
-
-        self.pool.cache_invalidated = True
-        return self._sync()
-
-    def _sync(self):
-        """Set the customfonts.CustomTTFonts list to the content of the database"""
-        customfonts.CustomTTFonts = []
-        local_family_modes = set()
-        local_font_paths = {}
-        for font in self.search([('path', '!=', '/dev/null')]):
-            local_family_modes.add((font.family, font.mode))
-            local_font_paths[font.name] = font.path
-            customfonts.CustomTTFonts.append((font.family, font.name, font.path, font.mode))
-
-        # Attempt to remap the builtin fonts (Helvetica, Times, Courier) to better alternatives
-        # if available, because they only support a very small subset of unicode
-        # (missing 'č' for example)
-        for builtin_font_family, mode, alts in BUILTIN_ALTERNATIVES:
-            if (builtin_font_family, mode) not in local_family_modes:
-                # No local font exists with that name, try alternatives
-                for altern_font in alts:
-                    if local_font_paths.get(altern_font):
-                        altern_def = (builtin_font_family, altern_font,
-                                      local_font_paths[altern_font], mode)
-                        customfonts.CustomTTFonts.append(altern_def)
-                        _logger.debug("Builtin remapping %r", altern_def)
-                        break
-                else:
-                    _logger.warning("No local alternative found for builtin font `%s` (%s mode)." 
-                                    "Consider installing the DejaVu fonts if you have problems "
-                                    "with unicode characters in RML reports",
-                                    builtin_font_family, mode)
-        return True
-
-    @classmethod
-    def clear_caches(cls):
-        """Force worker to resync at next report loading by setting an empty font list"""
-        customfonts.CustomTTFonts = []
-        return super(ResFont, cls).clear_caches()

--- a/odoo/addons/base/security/ir.model.access.csv
+++ b/odoo/addons/base/security/ir.model.access.csv
@@ -70,8 +70,8 @@
 "access_ir_actions_act_window_system","ir_actions_act_window_system","model_ir_actions_act_window","group_system",1,1,1,1
 "access_ir_actions_act_window_close_all","ir_actions_act_window_close_all","model_ir_actions_act_window_close",,1,0,0,0
 "access_ir_actions_act_window_close_group_system","ir_actions_act_window_close_group_system","model_ir_actions_act_window_close","group_system",1,1,1,1
-"access_ir_actions_report_xml_all","ir_actions_report_xml","model_ir_actions_report_xml",,1,0,0,0
-"access_ir_actions_report_xml_group_system","ir_actions_report_xml_group_system","model_ir_actions_report_xml","group_system",1,1,1,1
+"access_ir_actions_report_all","ir_actions_report","model_ir_actions_report",,1,0,0,0
+"access_ir_actions_report_group_system","ir_actions_report_group_system","model_ir_actions_report","group_system",1,1,1,1
 "access_ir_actions_todo_group_system","ir_actions_todo group system","model_ir_actions_todo","group_system",1,1,1,1
 "access_ir_actions_act_window_view_all","ir_actions_act_window_view_all","model_ir_actions_act_window_view",,1,0,0,0
 "access_ir_actions_act_window_view_group_system","ir_actions_act_window_view_group_system","model_ir_actions_act_window_view","group_system",1,1,1,1
@@ -91,6 +91,4 @@
 "access_ir_config_parameter_system","ir_config_parameter_system","model_ir_config_parameter","group_system",1,1,1,1
 "access_ir_mail_server","ir_mail_server","model_ir_mail_server","group_system",1,1,1,1
 "access_ir_actions_client","ir_actions_client all","model_ir_actions_client",,1,0,0,0
-"access_res_font_all","res_res_font all","model_res_font",,1,0,0,0
-"access_res_font_group_user","res_res_font group_user","model_res_font","group_user",1,1,1,1
 "access_ir_logging","ir_logging admin","model_ir_logging","group_erp_manager",1,1,1,1

--- a/odoo/addons/base/tests/test_ir_values.py
+++ b/odoo/addons/base/tests/test_ir_values.py
@@ -63,9 +63,9 @@ class TestIrValues(TransactionCase):
         ir_values.set_action('OnDblClick Action 2', action_slot='tree_but_open', model='res.partner', action='ir.actions.act_window,%d' % act_id_2, res_id=False)
         ir_values.set_action('Side Wizard', action_slot='client_action_multi', model='res.partner', action='ir.actions.act_window,%d' % act_id_3, res_id=False)
 
-        reports = self.env['ir.actions.report.xml'].search([])
+        reports = self.env['ir.actions.report'].search([])
         report_id = next(report.id for report in reports if not report.groups_id)
-        ir_values.set_action('Nice Report', action_slot='client_print_multi', model='res.partner', action='ir.actions.report.xml,%d' % report_id, res_id=False)
+        ir_values.set_action('Nice Report', action_slot='client_print_multi', model='res.partner', action='ir.actions.report,%d' % report_id, res_id=False)
 
         # Replace one action binding to set a new name.
         ir_values.set_action('OnDblClick Action New', action_slot='tree_but_open', model='res.partner', action='ir.actions.act_window,%d' % act_id_1, res_id=False)
