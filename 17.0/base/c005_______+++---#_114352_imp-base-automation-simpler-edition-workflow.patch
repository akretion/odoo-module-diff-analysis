PR: https://github.com/odoo/odoo/pull/114352

From: 0a744accc2aaa965d5353e854317895d822ad954
From: Bruno Boi
Date: 2023-09-05 18:44:13

Structural Changes: 16
Total Changes: 298

[IMP] base_automation,*: simpler edition workflow

*: base, crm, digest, mail, mass_mailing, sms, test_base_automation,
   website_forum, website_sale

This commit makes "Automated Actions" more discoverable and usable by:

- Adding a menu in the kanban header config dropdown to add/edit them.
- Creating a new custom kanban view for a clear understanding of each
  automated action record and its associated actions.
- Introducing new "smart" triggers that appear in the form view based on the
  chosen model:
  - Updated Values category:
    - "Stage is set to" when a `stage_id` field exists in the model,
      allowing users to select a specific stage value.
    - "State is set to" when a `state` field exists in the model,
      allowing users to select a specific state value.
    - "Priority is set to" (`priority`) where users can select a specific priority.
    - "User is set" (`user_id`, `user_ids` fields)
    - "Tag is added" (`tag_ids` field) where users can select a specific tag.
    - "On Archive"
    - "On Unarchive"
  - Timing Conditions:
    - "After creation"
    - "After last update"
- Deprecating previously known triggers "On Creation" (`on_create`) and "On
  Update" (`on_write`) to simplify the user experience. "On Creation & Update"
  (`on_create_or_write`) is retained and renamed to "On save".
- Changing the `ir.actions.server` Many2one relationship to a One2many
  relationship. Automated actions can now directly contain multiple actions,
  eliminating the need for an "Execute several actions" action in automation
  rules.
- Introducing a widget for the new `ir.actions.server` One2many field for a
  clearer understanding of multiple actions.

This commit also enhances the usability of "Server Actions" (`ir.actions`) by:

- Removing the `ir.server.object.lines` model and the associated `fields_lines`
  One2Many field. The attributes of the removed model are now merged into
  `ir.actions`. An action can now write to only one field, and the create action
  is now a name_create action.
- Adapting the form view when creating an "Update the record" action. The value
  field shown adapts itself based on the field to update; this field can be a
  `reference` field for a `one2many` `update_field_id`, a `one2many` field for a
  selection `update_field_id`, or a `text` field otherwise.
- Refactoring the form view to display only relevant details and other
  miscellaneous improvements.

Taskid: 3085360
Part-of: odoo/odoo#114352
Co-authored-by: Florent Dardenne <dafl@odoo.com>
Co-authored-by: Julien Carion <juca@odoo.com>
Co-authored-by: Lucas Perais <lpe@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/ir_actions.py
+++ b/odoo/addons/base/models/ir_actions.py
@@ -439,6 +439,26 @@ class IrActionsServer(models.Model):
 #  - Command: x2many commands namespace
 # To return an action, assign: action = {...}\n\n\n\n"""
 
+    @api.model
+    def _default_update_field_id(self):
+        if self.model_id:
+            model_id = self.model_id.id
+        elif 'default_model_id' in self.env.context:
+            model_id = self.env.context['default_model_id']
+        else:
+            return False
+
+        ir_model = self.env["ir.model"].browse(model_id)
+        if ir_model:
+            fields = self.env[ir_model.model]._fields
+            if 'state' in fields:
+                return ir_model.field_id.filtered(lambda ir_field: ir_field.name == 'state')
+            elif 'stage_id' in fields:
+                return ir_model.field_id.filtered(lambda ir_field: ir_field.name == 'stage_id')
+            elif 'priority' in fields:
+                return ir_model.field_id.filtered(lambda ir_field: ir_field.name == 'priority')
+
+    name = fields.Char(compute='_compute_name', store=True, readonly=False, required=True)
     type = fields.Char(default='ir.actions.server')
     usage = fields.Selection([
         ('ir_actions_server', 'Server Action'),
@@ -448,8 +468,8 @@ class IrActionsServer(models.Model):
         ('code', 'Execute Python Code'),
         ('object_create', 'Create a new Record'),
         ('object_write', 'Update the Record'),
-        ('multi', 'Execute several actions')], string='Action To Do',
-        default='object_write', required=True, copy=True,
+        ('multi', 'Execute several actions')], string='Type',
+        default='code', required=True, copy=True,
         help="Type of server action. The following values are available:\n"
              "- 'Execute Python Code': a block of python code that will be executed\n"
              "- 'Create a new Record': create a new record with new values\n"
@@ -476,17 +496,53 @@ class IrActionsServer(models.Model):
                                  string='Child Actions', help='Child server actions that will be executed. Note that the last return returned action value will be used as global return value.')
     # Create
     crud_model_id = fields.Many2one(
-        'ir.model', string='Target Model',
+        'ir.model', string='Record to Create',
         compute='_compute_crud_model_id', readonly=False, store=True,
-        help="Model for record creation / update. Set this field only to specify a different model than the base model.")
+        help="Specify which kind of record should be created. Set this field only to specify a different model than the base model.")
     crud_model_name = fields.Char(related='crud_model_id.model', string='Target Model Name', readonly=True)
     link_field_id = fields.Many2one(
         'ir.model.fields', string='Link Field',
         compute='_compute_link_field_id', readonly=False, store=True,
-        help="Provide the field used to link the newly created record on the record used by the server action.")
-    fields_lines = fields.One2many('ir.server.object.lines', 'server_id', string='Value Mapping', copy=True)
+        help="Specify a field used to link the newly created record on the record used by the server action.")
     groups_id = fields.Many2many('res.groups', 'ir_act_server_group_rel',
-                                 'act_id', 'gid', string='Groups')
+                                 'act_id', 'gid', string='Allowed Groups', help='Groups that can execute the server action. Leave empty to allow everybody.')
+
+    update_field_id = fields.Many2one('ir.model.fields', string='Field to update', default=_default_update_field_id, ondelete='cascade')
+    update_related_model_id = fields.Many2one('ir.model', compute='_compute_update_related_model_id')
+
+    value = fields.Text(help="For Python expressions, this field may hold a Python expression "
+                             "that can use the same values as for the code field on the server action,"
+                             "e.g. `env.user.name` to set the current user's name as the value "
+                             "or `record.id` to set the ID of the record on which the action is run.\n\n"
+                             "For Static values, the value will be used directly without evaluation, e.g."
+                             "`42` or `My custom name` or the selected record.")
+    evaluation_type = fields.Selection([
+        ('value', 'Static value'),
+        ('equation', 'Python expression')
+    ], 'Value Type', default='value', change_default=True)
+    resource_ref = fields.Reference(
+        string='Record', selection='_selection_target_model', inverse='_set_resource_ref')
+    selection_value = fields.Many2one('ir.model.fields.selection', string="Selection value", ondelete='cascade',
+                                      domain='[("field_id", "=", update_field_id)]', inverse='_set_selection_value')
+
+    value_field_to_show = fields.Selection([
+        ('value', 'value'),
+        ('resource_ref', 'reference'),
+        ('selection_value', 'selection_value'),
+    ], compute='_compute_value_field_to_show')
+
+    @api.depends('state', 'update_field_id', 'crud_model_id', 'value')
+    def _compute_name(self):
+        for action in self:
+            if not action.state or not self.env.context.get('automatic_action_name'):
+                continue
+            if action.state == 'object_write':
+                action.name = _("Update %s", action.update_field_id.field_description)
+            elif action.state == 'object_create':
+                action.name = _("Create %s with name %s", action.crud_model_id.name, action.value)
+            else:
+                state_name = dict(action._fields['state']._description_selection(self.env))[action.state]
+                action.name = state_name
 
     @api.onchange('model_id')
     def _compute_crud_model_id(self):
@@ -566,8 +622,8 @@ class IrActionsServer(models.Model):
 
     def _run_action_object_write(self, eval_context=None):
         """Apply specified write changes to active_id."""
-        vals = self.fields_lines.eval_value(eval_context=eval_context)
-        res = {line.col1.name: vals[line.id] for line in self.fields_lines}
+        vals = self._eval_value(eval_context=eval_context)
+        res = {action.update_field_id.name: vals[action.id] for action in self}
 
         if self._context.get('onchange_self'):
             record_cached = self._context['onchange_self']
@@ -577,12 +633,11 @@ class IrActionsServer(models.Model):
             self.env[self.model_id.model].browse(self._context.get('active_id')).write(res)
 
     def _run_action_object_create(self, eval_context=None):
-        """Create specified model object with specified values.
+        """Create specified model object with specified name contained in value.
 
         If applicable, link active_id.<self.link_field_id> to the new record.
         """
-        vals = self.fields_lines.eval_value(eval_context=eval_context)
-        res = {line.col1.name: vals[line.id] for line in self.fields_lines}
+        res = {'name': self.value}
 
         res = self.env[self.crud_model_id.model].create(res)
 
@@ -661,11 +716,12 @@ class IrActionsServer(models.Model):
                 if not (action_groups & self.env.user.groups_id):
                     raise AccessError(_("You don't have enough access rights to run this action."))
             else:
+                model_name = action.model_id.model
                 try:
-                    self.env[action.model_name].check_access_rights("write")
+                    self.env[model_name].check_access_rights("write")
                 except AccessError:
                     _logger.warning("Forbidden server action %r executed while the user %s does not have access to %s.",
-                        action.name, self.env.user.login, action.model_name,
+                        action.name, self.env.user.login, model_name,
                     )
                     raise
 
@@ -707,73 +763,60 @@ class IrActionsServer(models.Model):
                 )
         return res or False
 
+    @api.depends('update_field_id')
+    def _compute_update_related_model_id(self):
+        for action in self:
+            if action.evaluation_type == 'value' and action.update_field_id and action.update_field_id.relation:
+                relation = action.update_field_id.relation
+                action.update_related_model_id = action.env["ir.model"]._get_id(relation)
+            else:
+                action.update_related_model_id = False
 
-class IrServerObjectLines(models.Model):
-    _name = 'ir.server.object.lines'
-    _description = 'Server Action value mapping'
-
-    server_id = fields.Many2one('ir.actions.server', string='Related Server Action', ondelete='cascade')
-    col1 = fields.Many2one('ir.model.fields', string='Field', required=True, ondelete='cascade')
-    value = fields.Text(required=True, help="Expression containing a value specification. \n"
-                                            "When Formula type is selected, this field may be a Python expression "
-                                            " that can use the same values as for the code field on the server action.\n"
-                                            "If Value type is selected, the value will be used directly without evaluation.")
-    evaluation_type = fields.Selection([
-        ('value', 'Value'),
-        ('reference', 'Reference'),
-        ('equation', 'Python expression')
-    ], 'Evaluation Type', default='value', required=True, change_default=True)
-    resource_ref = fields.Reference(
-        string='Record', selection='_selection_target_model',
-        compute='_compute_resource_ref', inverse='_set_resource_ref')
+    @api.depends('evaluation_type', 'update_field_id')
+    def _compute_value_field_to_show(self):  # check if value_field_to_show can be removed and use ttype in xml view instead
+        for action in self:
+            if action.update_field_id.ttype == 'many2one':
+                action.value_field_to_show = 'resource_ref'
+            elif action.update_field_id.ttype == 'selection':
+                action.value_field_to_show = 'selection_value'
+            else:
+                action.value_field_to_show = 'value'
 
     @api.model
     def _selection_target_model(self):
         return [(model.model, model.name) for model in self.env['ir.model'].sudo().search([])]
 
-    @api.depends('col1.relation', 'value', 'evaluation_type')
-    def _compute_resource_ref(self):
-        for line in self:
-            if line.evaluation_type in ['reference', 'value'] and line.col1 and line.col1.relation:
-                value = line.value or ''
-                try:
-                    value = int(value)
-                    if not self.env[line.col1.relation].browse(value).exists():
-                        record = self.env[line.col1.relation].search([], limit=1)
-                        value = record.id or 0
-                except ValueError:
-                    record = self.env[line.col1.relation].search([], limit=1)
-                    value = record.id or 0
-                line.resource_ref = '%s,%s' % (line.col1.relation, value)
-            else:
-                line.resource_ref = False
-
-    @api.constrains('col1', 'evaluation_type')
+    @api.constrains('update_field_id', 'evaluation_type')
     def _raise_many2many_error(self):
-        if self.filtered(lambda line: line.col1.ttype == 'many2many' and line.evaluation_type == 'reference'):
+        if self.filtered(lambda line: line.update_field_id.ttype == 'many2many' and line.evaluation_type == 'reference'):
             raise ValidationError(_('many2many fields cannot be evaluated by reference'))
 
     @api.onchange('resource_ref')
     def _set_resource_ref(self):
-        for line in self.filtered(lambda line: line.evaluation_type == 'reference'):
-            if line.resource_ref:
-                line.value = str(line.resource_ref.id)
+        for action in self.filtered(lambda action: action.value_field_to_show == 'resource_ref'):
+            if action.resource_ref:
+                action.value = str(action.resource_ref.id)
 
-    def eval_value(self, eval_context=None):
+    @api.onchange('selection_value')
+    def _set_selection_value(self):
+        for action in self.filtered(lambda action: action.value_field_to_show == 'selection_value'):
+            if action.selection_value:
+                action.value = action.selection_value.name
+
+    def _eval_value(self, eval_context=None):
         result = {}
-        for line in self:
-            expr = line.value
-            if line.evaluation_type == 'equation':
-                expr = safe_eval(line.value, eval_context)
-            elif line.col1.ttype in ['many2one', 'integer']:
+        for action in self:
+            expr = action.value
+            if action.evaluation_type == 'equation':
+                expr = safe_eval(action.value, eval_context)
+            elif action.update_field_id.ttype in ['many2one', 'integer']:
                 try:
-                    expr = int(line.value)
+                    expr = int(action.value)
                 except Exception:
                     pass
-            result[line.id] = expr
+            result[action.id] = expr
         return result
 
-
 class IrActionsTodo(models.Model):
     """
     Configuration Wizards

--- a/odoo/addons/base/security/ir.model.access.csv
+++ b/odoo/addons/base/security/ir.model.access.csv
@@ -104,7 +104,6 @@ access_res_users_settings_user,res.users.settings,model_res_users_settings,group
 "access_ir_actions_todo_group_system","ir_actions_todo group system","model_ir_actions_todo","group_system",1,1,1,1
 "access_ir_actions_act_window_view_group_system","ir_actions_act_window_view_group_system","model_ir_actions_act_window_view","group_system",1,1,1,1
 "access_ir_actions_act_url_group_system","ir_actions_act_url_group_system","model_ir_actions_act_url","group_system",1,1,1,1
-"access_ir_server_object_lines_group_system","ir_server_object_lines_group_system","model_ir_server_object_lines","group_system",1,1,1,1
 "access_ir_actions_server_group_system","ir_actions_server_group_system","model_ir_actions_server","group_system",1,1,1,1
 "access_ir_actions_client","ir_actions_client all","model_ir_actions_client","group_system",1,1,1,1
 "access_res_bank_group_system","res_bank_group_system","model_res_bank","group_system",1,1,1,1

--- a/odoo/addons/base/tests/test_ir_actions.py
+++ b/odoo/addons/base/tests/test_ir_actions.py
@@ -123,56 +123,48 @@ ZeroDivisionError: division by zero""" % self.test_server_action.id
         # Do: create a new record in another model
         self.action.write({
             'state': 'object_create',
-            'crud_model_id': self.res_country_model.id,
+            'crud_model_id': self.res_partner_model.id,
             'link_field_id': False,
-            'fields_lines': [Command.clear(),
-                             Command.create({'col1': self.res_country_name_field.id, 'value': 'record.name', 'evaluation_type': 'equation'}),
-                             Command.create({'col1': self.res_country_code_field.id, 'value': 'record.name[0:2]', 'evaluation_type': 'equation'})],
+            'value': 'TestingPartner2'
         })
         run_res = self.action.with_context(self.context).run()
         self.assertFalse(run_res, 'ir_actions_server: create record action correctly finished should return False')
-        # Test: new country created
-        country = self.test_country.search([('name', 'ilike', 'TestingPartner')])
-        self.assertEqual(len(country), 1, 'ir_actions_server: TODO')
-        self.assertEqual(country.code, 'TE', 'ir_actions_server: TODO')
+        # Test: new partner created
+        partner = self.test_partner.search([('name', 'ilike', 'TestingPartner2')])
+        self.assertEqual(len(partner), 1, 'ir_actions_server: TODO')
 
     def test_20_crud_create_link_many2one(self):
-        _city = 'TestCity'
-        _name = 'TestNew'
 
         # Do: create a new record in the same model and link it with a many2one
         self.action.write({
             'state': 'object_create',
-            'crud_model_id': self.action.model_id.id,
+            'crud_model_id': self.res_partner_model.id,
             'link_field_id': self.res_partner_parent_field.id,
-            'fields_lines': [Command.create({'col1': self.res_partner_name_field.id, 'value': _name}),
-                             Command.create({'col1': self.res_partner_city_field.id, 'value': _city})],
+            'value': "TestNew"
         })
         run_res = self.action.with_context(self.context).run()
         self.assertFalse(run_res, 'ir_actions_server: create record action correctly finished should return False')
         # Test: new partner created
-        partner = self.test_partner.search([('name', 'ilike', _name)])
+        partner = self.test_partner.search([('name', 'ilike', 'TestNew')])
         self.assertEqual(len(partner), 1, 'ir_actions_server: TODO')
-        self.assertEqual(partner.city, _city, 'ir_actions_server: TODO')
         # Test: new partner linked
         self.assertEqual(self.test_partner.parent_id, partner, 'ir_actions_server: TODO')
 
     def test_20_crud_create_link_one2many(self):
-        _name = 'TestNew'
 
         # Do: create a new record in the same model and link it with a one2many
         self.action.write({
             'state': 'object_create',
-            'crud_model_id': self.action.model_id.id,
+            'crud_model_id': self.res_partner_model.id,
             'link_field_id': self.res_partner_children_field.id,
-            'fields_lines': [Command.create({'col1': self.res_partner_name_field.id, 'value': _name})],
+            'value': 'TestNew',
         })
         run_res = self.action.with_context(self.context).run()
         self.assertFalse(run_res, 'ir_actions_server: create record action correctly finished should return False')
         # Test: new partner created
-        partner = self.test_partner.search([('name', 'ilike', _name)])
+        partner = self.test_partner.search([('name', 'ilike', 'TestNew')])
         self.assertEqual(len(partner), 1, 'ir_actions_server: TODO')
-        self.assertEqual(partner.name, _name, 'ir_actions_server: TODO')
+        self.assertEqual(partner.name, 'TestNew', 'ir_actions_server: TODO')
         # Test: new partner linked
         self.assertIn(partner, self.test_partner.child_ids, 'ir_actions_server: TODO')
 
@@ -182,7 +174,7 @@ ZeroDivisionError: division by zero""" % self.test_server_action.id
             'state': 'object_create',
             'crud_model_id': self.res_partner_category_model.id,
             'link_field_id': self.res_partner_category_field.id,
-            'fields_lines': [Command.create({'col1': self.res_partner_category_name_field.id, 'value': 'record.name', 'evaluation_type': 'equation'})],
+            'value': 'TestingPartner'
         })
         run_res = self.action.with_context(self.context).run()
         self.assertFalse(run_res, 'ir_actions_server: create record action correctly finished should return False')
@@ -192,17 +184,17 @@ ZeroDivisionError: division by zero""" % self.test_server_action.id
         self.assertIn(category, self.test_partner.category_id)
 
     def test_30_crud_write(self):
-        _name = 'TestNew'
 
         # Do: update partner name
         self.action.write({
             'state': 'object_write',
-            'fields_lines': [Command.create({'col1': self.res_partner_name_field.id, 'value': _name})],
+            'update_field_id': self.res_partner_name_field.id,
+            'value': 'TestNew',
         })
         run_res = self.action.with_context(self.context).run()
         self.assertFalse(run_res, 'ir_actions_server: create record action correctly finished should return False')
         # Test: partner updated
-        partner = self.test_partner.search([('name', 'ilike', _name)])
+        partner = self.test_partner.search([('name', 'ilike', 'TestNew')])
         self.assertEqual(len(partner), 1, 'ir_actions_server: TODO')
         self.assertEqual(partner.city, 'OrigCity', 'ir_actions_server: TODO')
 
@@ -222,19 +214,27 @@ ZeroDivisionError: division by zero""" % self.test_server_action.id
             'model_id': self.res_partner_model.id,
             'crud_model_id': self.res_partner_model.id,
             'state': 'object_create',
-            'fields_lines': [Command.create({'col1': self.res_partner_name_field.id, 'value': 'RaoulettePoiluchette'}),
-                             Command.create({'col1': self.res_partner_city_field.id, 'value': 'TestingCity'})],
+            'value': 'RaoulettePoiluchette',
         })
         action3 = self.action.create({
-            'name': 'Subaction3',
+            'name': 'Subaction2',
             'sequence': 3,
             'model_id': self.res_partner_model.id,
+            'crud_model_id': self.res_partner_model.id,
+            'state': 'object_write',
+            'update_field_id': self.res_partner_city_field.id,
+            'value': 'RaoulettePoiluchette',
+        })
+        action4 = self.action.create({
+            'name': 'Subaction3',
+            'sequence': 4,
+            'model_id': self.res_partner_model.id,
             'state': 'code',
             'code': 'action = {"type": "ir.actions.act_url"}',
         })
         self.action.write({
             'state': 'multi',
-            'child_ids': [Command.set([action1.id, action2.id, action3.id])],
+            'child_ids': [Command.set([action1.id, action2.id, action3.id, action4.id])],
         })
 
         # Do: run the action

--- a/odoo/addons/base/views/ir_actions_views.xml
+++ b/odoo/addons/base/views/ir_actions_views.xml
@@ -325,23 +325,35 @@
                                 help="Run this action manually."/>
                     </header>
                     <sheet>
-                        <div class="oe_title">
-                            <label for="name"/>
-                            <h1><field name="name" placeholder="e.g. Update order quantity"/></h1>
-                        </div>
+                        <h1 class="oe_title">
+                            <field name="name" placeholder="e.g. Mass archive contacts"/>
+                        </h1>
                         <group name="action_wrapper">
                             <group name="action_content">
-                                <field name="model_id" options="{'no_create': True}"/>
                                 <field name="model_name" invisible="1"/>
-                            </group>
-                            <group>
-                                <field name="state"/>
+                                <field name="model_id" invisible="1"/>
+                                <field name="model_id" options="{'no_create': True}" groups="base.group_no_one"/>
+                                <field name="model_id" options="{'no_create': True}" groups="!base.group_no_one" invisible="context.get('default_model_id')"/>
+                                <field name="groups_id" widget="many2many_tags" groups="base.group_no_one" />
+                                <field name="state" string="Action Type"/>
+                                <field name="update_field_id" invisible="state != 'object_write'"
+                                    options="{'no_create': True}"
+                                    domain="['|', ('model_id', '=', crud_model_id), ('model_id', '=', model_id)]"/>
+                                <field name="evaluation_type" invisible="state != 'object_write'"/>
+                                <field name="value_field_to_show" invisible="1"/>
+                                <field name="update_related_model_id" invisible="1"/>
+                                <field name="value" invisible="state != 'object_write' or value_field_to_show != 'value' or evaluation_type != 'value'"/>
+                                <field name="value" widget="code" options="{'mode': 'python'}" invisible="state != 'object_write' or evaluation_type != 'equation'"/>
+                                <field name="resource_ref" string="Value" options="{'model_field': 'update_related_model_id', 'no_create': True}" invisible="state != 'object_write' or value_field_to_show != 'resource_ref' or evaluation_type == 'equation'"/>
+                                <field name="selection_value" options="{'no_create': True}" invisible="state != 'object_write' or value_field_to_show != 'selection_value' or evaluation_type == 'equation'"/>
+
                                 <field name="type" invisible="1"/>
                                 <field name="crud_model_id"
                                     options="{'no_create': True}"
                                     invisible="state != 'object_create'"
                                     required="state == 'object_create'"/>
                                 <field name="crud_model_name" invisible="1"/>
+                                <field name="value" widget="char" string="Name" invisible="state != 'object_create'"/>
                                 <field name="link_field_id"
                                     domain="[('model_id', '=', model_id), ('relation', '=', crud_model_name),
                                     ('ttype', 'in', ['many2one', 'one2many', 'many2many'])]"
@@ -349,6 +361,17 @@
                                     invisible="state != 'object_create'"
                                     context="{'default_model_id': model_id, 'default_relation': crud_model_name}"/>
                             </group>
+                            <group invisible="evaluation_type != 'equation' or state != 'object_write'">
+                                    <span colspan="2" class="text-muted"> Available variables: </span>
+                                    <ul colspan="2" class="text-muted">
+                                        <li><code>env</code>: environment on which the action is triggered</li>
+                                        <li><code>model</code>: model of the record on which the action is triggered; is a void recordset</li>
+                                        <li><code>record</code>: record on which the action is triggered</li>
+                                        <li><code>records</code>: recordset of all records on which the action is triggered in multi mode</li>
+                                        <li><code>time</code>, <code>datetime</code>, <code>dateutil</code>, <code>timezone</code>: useful Python libraries</li>
+                                        <li><code>float_compare()</code>: utility function to compare floats based on a specific precision</li>
+                                    </ul>
+                            </group>
                         </group>
                         <notebook>
                             <page string="Python Code" name='code'
@@ -356,32 +379,6 @@
                                 <field name="code" widget="code" options="{'mode': 'python'}" placeholder="Enter Python code here. Help about Python expression is available in the help tab of this document."/>
                             </page>
 
-                            <page string="Data to Write" name="page_object"
-                                    invisible="state not in ['object_create', 'object_write']">
-                                <p invisible="model_id">
-                                    Please set the Model to Create before choosing values
-                                </p>
-                                <field name="fields_lines">
-                                     <tree string="Field Mappings" editable="bottom">
-                                        <field name="col1"
-                                            options="{'no_create': True}"
-                                            domain="['|', ('model_id', '=', parent.crud_model_id), ('model_id', '=', parent.model_id)]"/>
-                                        <field name="evaluation_type"/>
-                                        <field name="resource_ref"
-                                            options="{'hide_model': True, 'no_create': True}"
-                                            readonly="evaluation_type != 'reference'"/>
-                                        <field name="value"
-                                            readonly="evaluation_type == 'reference'"
-                                            options="{'no_create': True}"
-                                            force_save="1"/>
-                                    </tree>
-                                </field>
-                            </page>
-
-                            <page name="security" string="Access Rights">
-                                <field name="groups_id"/>
-                            </page>
-
                             <page string="Actions" name="actions"
                                     invisible="state != 'multi'">
                                 <p class="oe_grey">
@@ -411,10 +408,10 @@
                                     </ul>
                                     <div invisible="state != 'code'">
                                         <p>Example of Python code</p>
-<code style='white-space: pre-wrap'>
-partner_name = record.name + '_code' \n
+<pre style='white-space: pre-wrap'>
+partner_name = record.name + '_code'
 env['res.partner'].create({'name': partner_name})
-</code>
+</pre>
                                     </div>
                                 </div>
                             </page>
@@ -428,7 +425,6 @@ env['res.partner'].create({'name': partner_name})
             <field name="model">ir.actions.server</field>
             <field name="arch" type="xml">
                 <tree string="Server Actions">
-                    <field name="sequence" widget="handle"/>
                     <field name="name"/>
                     <field name="state"/>
                     <field name="model_id"/>
