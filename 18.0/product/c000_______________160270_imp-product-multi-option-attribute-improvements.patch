PR: https://github.com/odoo/odoo/pull/160270

From: 50613922fbe67a3bc7c8ccec5799ac49bed0c23b
From: dere-odoo
Date: 2024-05-21 14:24:01

Structural Changes: 2
Total Changes: 46

[IMP] product: multi-option attribute improvements

Simplify the updates of product attributes through
multi-edit list views.

Also ease the creation of 'multi' attributes.

task-3752987

closes odoo/odoo#160270

Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/product/models/product_attribute.py
+++ b/addons/product/models/product_attribute.py
@@ -65,18 +65,26 @@ class ProductAttribute(models.Model):
         store=True)
     number_related_products = fields.Integer(compute='_compute_number_related_products')
 
+    # === COMPUTE METHODS === #
+
     @api.depends('product_tmpl_ids')
     def _compute_number_related_products(self):
         for pa in self:
-            pa.number_related_products = len(pa.product_tmpl_ids)
+            pa.number_related_products = len(pa.attribute_line_ids)
 
     @api.depends('attribute_line_ids.active', 'attribute_line_ids.product_tmpl_id')
     def _compute_products(self):
         for pa in self:
             pa.with_context(active_test=False).product_tmpl_ids = pa.attribute_line_ids.product_tmpl_id
 
-    def _without_no_variant_attributes(self):
-        return self.filtered(lambda pa: pa.create_variant != 'no_variant')
+    # === ONCHANGE METHODS === #
+
+    @api.onchange('display_type')
+    def _onchange_display_type(self):
+        if self.display_type == 'multi' and self.number_related_products == 0:
+            self.create_variant = 'no_variant'
+
+    # === CRUD METHODS === #
 
     def write(self, vals):
         """Override to make sure attribute type can't be changed if it's used on
@@ -115,11 +123,19 @@ class ProductAttribute(models.Model):
                     products=", ".join(pa.product_tmpl_ids.mapped('display_name')),
                 ))
 
-    def action_open_related_products(self):
+    # === ACTION METHODS === #
+
+    def action_open_product_template_attribute_lines(self):
+        self.ensure_one()
         return {
             'type': 'ir.actions.act_window',
-            'name': _("Related Products"),
-            'res_model': 'product.template',
+            'name': _("Products"),
+            'res_model': 'product.template.attribute.line',
             'view_mode': 'tree,form',
-            'domain': [('id', 'in', self.product_tmpl_ids.ids)],
+            'domain': [('attribute_id', '=', self.id)],
         }
+
+    # === TOOLING === #
+
+    def _without_no_variant_attributes(self):
+        return self.filtered(lambda pa: pa.create_variant != 'no_variant')

--- a/addons/product/models/product_attribute_value.py
+++ b/addons/product/models/product_attribute_value.py
@@ -36,8 +36,8 @@ class ProductAttributeValue(models.Model):
 
     default_extra_price = fields.Float()
     is_custom = fields.Boolean(
-        string="Is custom value",
-        help="Allow users to input custom values for this attribute value")
+        string="Free text",
+        help="Allow customers to set their own value")
     html_color = fields.Char(
         string="Color",
         help="Here you can set a specific HTML color index (e.g. #ff0000)"
@@ -125,3 +125,12 @@ class ProductAttributeValue(models.Model):
 
     def _without_no_variant_attributes(self):
         return self.filtered(lambda pav: pav.attribute_id.create_variant != 'no_variant')
+
+    def action_open_product_template_attribute_value(self):
+        return {
+            'type': 'ir.actions.act_window',
+            "name": _("Product Variant Values"),
+            'res_model': 'product.template.attribute.value',
+            'view_mode': 'tree',
+            'domain': [('product_attribute_value_id.id', '=', self.id)],
+        }

--- a/addons/product/models/product_template_attribute_line.py
+++ b/addons/product/models/product_template_attribute_line.py
@@ -265,5 +265,6 @@ class ProductTemplateAttributeLine(models.Model):
             ],
             'context': {
                 'search_default_active': 1,
+                'product_invisible': True,
             },
         }

--- a/addons/product/models/product_template_attribute_value.py
+++ b/addons/product/models/product_template_attribute_value.py
@@ -33,7 +33,7 @@ class ProductTemplateAttributeValue(models.Model):
         required=True, ondelete='cascade', index=True)
     # configuration fields: the price_extra and the exclusion rules
     price_extra = fields.Float(
-        string="Value Price Extra",
+        string="Extra Price",
         default=0.0,
         digits='Product Price',
         help="Extra price for the variant with this attribute value on sale price."
