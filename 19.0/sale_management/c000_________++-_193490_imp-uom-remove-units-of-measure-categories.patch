PR: https://github.com/odoo/odoo/pull/193490

From: 28b69daefddbb74ad9ac3fd55df88028e6de972b
From: Mohammad Abdulmoneim (abdu)
Date: 2025-01-14 09:03:42

Breaking data model changes scores: del:3 + add:3, change matches:
+    allowed_uom_ids = fields.Many2many('uom.uom', compute='_compute_allowed_uom_ids')
-    product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
+    allowed_uom_ids = fields.Many2many('uom.uom', compute='_compute_allowed_uom_ids')
-    product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
+    allowed_uom_ids = fields.Many2many('uom.uom', compute='_compute_allowed_uom_ids')
-    product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')

Total Changes: 33

[IMP] uom,*: remove units of measure categories

Previous to this commit, units were classified into categories such as
length, weight, etc. If the user defined a base unit for a product, any
movement on that product (stock move, order line, etc.) can be only done
in a unit in the same category of the base unit of the product. This
commit removes unit categories and the previously mentioned enforcement.
This is useful for some business cases that need more flexibility (for
example: buying from vendors in pieces and selling in kilograms, etc.).
To allow for some structure, a new field is added to uom.uom model to
define a reference unit for any unit. Therefore, users can define a
hierarchy of units. A side effect of this change is that the `uom_uom`
model is restructured completely to be much simpler. The fields
`uom_type`, `color`, `factor_inv`, `ratio` are no longer needed. Each
`uom_uom` record now has only two fields that define its quantity:
`relative_factor` which is the quantity that this unit contains of its
reference unit (if exists), and `factor` which is the absolute quantity
of this unit all the way up to the most ancestor unit. The latter cannot
be controlled by users and not shown in any view but used in all
quantity computations. It's also not allowed to create a unit with a
`relative_factor` != 1 without setting a reference unit.Another side
effect related to point of sale app is that the field `is_pos_groupable`
is now set on the unit level instead of category level. The value of
this field is set in odoo/upgrade#6629 to preserve the current behavior
for users. Products also now have a new field `uom_ids` labelled as
"Packagings" where users can define the units that this product can be
sold/moved in.

Task-4252043

Part-of: odoo/odoo#193490
Related: odoo/enterprise#77092
Signed-off-by: Arnold Moyaux (arm) <arm@odoo.com>
Signed-off-by: Mohammad Abdulmoneim (abdu) <abdu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_management/models/sale_order_option.py
+++ b/addons/sale_management/models/sale_order_option.py
@@ -33,14 +33,14 @@ class SaleOrderOption(models.Model):
         required=True,
         digits='Product Unit of Measure',
         default=1)
+    allowed_uom_ids = fields.Many2many('uom.uom', compute='_compute_allowed_uom_ids')
     uom_id = fields.Many2one(
         comodel_name='uom.uom',
         string="Unit of Measure",
         compute='_compute_uom_id',
+        domain="[('id', 'in', allowed_uom_ids)]",
         store=True, readonly=False,
-        required=True, precompute=True,
-        domain="[('category_id', '=', product_uom_category_id)]")
-    product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
+        required=True, precompute=True)
 
     price_unit = fields.Float(
         string="Unit Price",
@@ -63,6 +63,11 @@ class SaleOrderOption(models.Model):
 
     #=== COMPUTE METHODS ===#
 
+    @api.depends('product_id', 'product_id.uom_id', 'product_id.uom_ids')
+    def _compute_allowed_uom_ids(self):
+        for option in self:
+            option.allowed_uom_ids = option.product_id.uom_id | option.product_id.uom_ids
+
     @api.depends('product_id')
     def _compute_name(self):
         for option in self:

--- a/addons/sale_management/models/sale_order_template_line.py
+++ b/addons/sale_management/models/sale_order_template_line.py
@@ -41,13 +41,13 @@ class SaleOrderTemplateLine(models.Model):
         translate=True,
     )
 
+    allowed_uom_ids = fields.Many2many('uom.uom', compute='_compute_allowed_uom_ids')
     product_uom_id = fields.Many2one(
         comodel_name='uom.uom',
         string="Unit of Measure",
+        domain="[('id', 'in', allowed_uom_ids)]",
         compute='_compute_product_uom_id',
-        store=True, readonly=False, precompute=True,
-        domain="[('category_id', '=', product_uom_category_id)]")
-    product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
+        store=True, readonly=False, precompute=True)
     product_uom_qty = fields.Float(
         string='Quantity',
         required=True,
@@ -60,6 +60,11 @@ class SaleOrderTemplateLine(models.Model):
 
     #=== COMPUTE METHODS ===#
 
+    @api.depends('product_id', 'product_id.uom_id', 'product_id.uom_ids')
+    def _compute_allowed_uom_ids(self):
+        for option in self:
+            option.allowed_uom_ids = option.product_id.uom_id | option.product_id.uom_ids
+
     @api.depends('product_id')
     def _compute_product_uom_id(self):
         for option in self:

--- a/addons/sale_management/models/sale_order_template_option.py
+++ b/addons/sale_management/models/sale_order_template_option.py
@@ -28,14 +28,14 @@ class SaleOrderTemplateOption(models.Model):
         store=True, readonly=False, precompute=True,
         required=True, translate=True)
 
+    allowed_uom_ids = fields.Many2many('uom.uom', compute='_compute_allowed_uom_ids')
     uom_id = fields.Many2one(
         comodel_name='uom.uom',
         string="Unit of Measure",
+        domain="[('id', 'in', allowed_uom_ids)]",
         compute='_compute_uom_id',
         store=True, readonly=False,
-        required=True, precompute=True,
-        domain="[('category_id', '=', product_uom_category_id)]")
-    product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
+        required=True, precompute=True)
     quantity = fields.Float(
         string="Quantity",
         required=True,
@@ -44,6 +44,11 @@ class SaleOrderTemplateOption(models.Model):
 
     #=== COMPUTE METHODS ===#
 
+    @api.depends('product_id', 'product_id.uom_id', 'product_id.uom_ids')
+    def _compute_allowed_uom_ids(self):
+        for option in self:
+            option.allowed_uom_ids = option.product_id.uom_id | option.product_id.uom_ids
+
     @api.depends('product_id')
     def _compute_name(self):
         for option in self:
