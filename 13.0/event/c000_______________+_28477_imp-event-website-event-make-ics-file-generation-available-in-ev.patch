PR: https://github.com/odoo/odoo/pull/28477

From: a03faab03fdf8a164c2f1298cc138b3fa83b0bea
From: RomainLibert
Date: 2018-12-17 11:46:48

Structural Changes: 3
Total Changes: 32

[IMP] event, website_event: Make ics file generation available in event

Ics file generation should be possible even when only event is
installed as it is a basic feature of events.

Moreover we need to be able to generate such files in order to replace
the old outlook api used in the event templates, api which is not
supported anymore.

We decided to use ics files because it is supported by most calendar
schedulers hence working with outlook.

Linked to task #1853063

closes odoo/odoo#28477

================================= pseudo patch: =================================

--- a/addons/event/models/event.py
+++ b/addons/event/models/event.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+import logging
 import pytz
 
 from odoo import _, api, fields, models
@@ -9,6 +10,14 @@ from odoo.tools.translate import html_translate
 
 from dateutil.relativedelta import relativedelta
 
+_logger = logging.getLogger(__name__)
+
+try:
+    import vobject
+except ImportError:
+    _logger.warning("`vobject` Python module not found, iCal file generation disabled. Consider installing this module if you want to generate iCal files")
+    vobject = None
+
 
 class EventType(models.Model):
     _name = 'event.type'
@@ -331,6 +340,29 @@ class EventEvent(models.Model):
     def _is_event_registrable(self):
         return True
 
+    @api.multi
+    def _get_ics_file(self):
+        """ Returns iCalendar file for the event invitation.
+            :returns a dict of .ics file content for each event
+        """
+        result = {}
+        if not vobject:
+            return result
+
+        for event in self:
+            cal = vobject.iCalendar()
+            cal_event = cal.add('vevent')
+
+            cal_event.add('created').value = fields.Datetime.now().replace(tzinfo=pytz.timezone('UTC'))
+            cal_event.add('dtstart').value = fields.Datetime.from_string(event.date_begin).replace(tzinfo=pytz.timezone('UTC'))
+            cal_event.add('dtend').value = fields.Datetime.from_string(event.date_end).replace(tzinfo=pytz.timezone('UTC'))
+            cal_event.add('summary').value = event.name
+            if event.address_id:
+                cal_event.add('location').value = event.sudo().address_id.contact_address
+
+            result[event.id] = cal.serialize().encode('utf-8')
+        return result
+
 
 class EventRegistration(models.Model):
     _name = 'event.registration'
