PR: https://github.com/odoo/odoo/pull/179078

From: ac95d2d6d80a368dfb190d0ac21da2af479a8488
From: Josse Colpaert
Date: 2025-04-25 07:10:47

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = 'account.fiscal.position'
-    vies_vat_to_check = fields.Char(compute='_compute_vies_vat_to_check')

Total Changes: 469

[IMP] base_vat, base, l10n_*: make base_vat more logical and refactor

Improve base_vat with basically 2 things:
* Only allow country code prefix if the country is EU + exceptions
* Always compact
But: only do things when country_id is set

For that:
* the JP case needed to be not auto-detect (just allow T in vat verification)
* We have one big method _run_vat_checks both for formatting and validation
* We do not override create/write but use inverse/onchange so formatting always
happens, but the onchanges get triggered (so we also do not need vies_vat_to_check field anymore)
* We adapt the duplicate partner warning so it compares with and without country prefix

This way, the vat numbers will be consistent + validated and a good tool to check for
wrong VAT numbers or duplicated partners.

In the meantime:
* We change the module dependency so it only depends on base_setup and mail instead of account
* __ fields are changed back to _
* We simplified the logic for putting a VAT number on fiscal positions.  We removed the logic with
country group and vat number.  Because we have already implemented the logic that if it is in Europe
you can use the VAT number of another European country with the prefix in _run_vat_checks
* Some localizations needed adaptations in the tests, because base_vat is now formatting them.
* For the LATAM countries, we override it for the document type, but if the document type is a
VAT type, then the standard base_vat logic holds.
* Some countries like CL, CO and VN have another compacting, because they always want the last -
before the checkdigit.
* For XI and EL we keep the extra check through those mappings
* Mostly country_code should be upper case in methods

opw-4164618

closes odoo/odoo#179078

Related: odoo/enterprise#75974
Related: odoo/upgrade#7095
Signed-off-by: William Andr√© (wan) <wan@odoo.com>

================================= pseudo patch: =================================

--- a/addons/base_vat/models/__init__.py
+++ b/addons/base_vat/models/__init__.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import account_fiscal_position
 from . import res_config_settings
 from . import res_company
+from . import res_country
 from . import res_partner

--- a/addons/base_vat/models/account_fiscal_position.py
+++ b/None
@@ -1,78 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from odoo import api, models, _
-from odoo.exceptions import ValidationError
-
-
-class AccountFiscalPosition(models.Model):
-    _inherit = 'account.fiscal.position'
-
-    @api.model_create_multi
-    def create(self, vals_list):
-        new_vals = []
-        for vals in vals_list:
-            new_vals.append(self.adjust_vals_country_id(vals))
-        return super().create(new_vals)
-
-    def write(self, vals):
-        vals = self.adjust_vals_country_id(vals)
-        return super().write(vals)
-
-    def adjust_vals_country_id(self, vals):
-        foreign_vat = vals.get('foreign_vat')
-        country_group_id = vals.get('country_group_id')
-        if foreign_vat and country_group_id and not (self.country_id or vals.get('country_id')):
-            vals['country_id'] = self.env['res.country.group'].browse(country_group_id).country_ids.filtered(lambda c: c.code == foreign_vat[:2].upper()).id or False
-        return vals
-
-    @api.constrains('country_id', 'foreign_vat')
-    def _validate_foreign_vat(self):
-        for record in self:
-            if not record.foreign_vat:
-                continue
-
-            if record.country_group_id:
-                # Checks the foreign vat is a VAT Number linked to a country of the country group
-                foreign_vat_country = self.country_group_id.country_ids.filtered(lambda c: c.code == record.foreign_vat[:2].upper())
-                if not foreign_vat_country:
-                    raise ValidationError(_("The country detected for this foreign VAT number does not match any of the countries composing the country group set on this fiscal position."))
-                if record.country_id:
-                    checked_country_code = self.env['res.partner']._run_vat_test(record.foreign_vat, record.country_id) or self.env['res.partner']._run_vat_test(record.foreign_vat, foreign_vat_country)
-                    if not checked_country_code:
-                        record.raise_vat_error_message(foreign_vat_country)
-                else:
-                    checked_country_code = self.env['res.partner']._run_vat_test(record.foreign_vat, foreign_vat_country)
-                    if not checked_country_code:
-                        record.raise_vat_error_message(record.country_id)
-            elif record.country_id:
-                foreign_vat_country = self.env['res.country'].search([('code', '=', record.foreign_vat[:2].upper())], limit=1)
-                checked_country_code = self.env['res.partner']._run_vat_test(record.foreign_vat, foreign_vat_country or record.country_id)
-                if not checked_country_code:
-                    record.raise_vat_error_message()
-
-            if record.foreign_vat and not record.country_id and not record.country_group_id:
-                raise ValidationError(_("The country of the foreign VAT number could not be detected. Please assign a country to the fiscal position or set a country group"))
-
-    def raise_vat_error_message(self, country=False):
-        fp_label = _("fiscal position [%s]", self.name)
-        country_code = country.code.lower() if country else self.country_id.code.lower()
-        error_message = self.env['res.partner']._build_vat_error_message(country_code, self.foreign_vat, fp_label)
-        raise ValidationError(error_message)
-
-    def _get_vat_valid(self, delivery, company=None):
-        eu_countries = self.env.ref('base.europe').country_ids
-
-        # If VIES validation does not apply to this partner (e.g. they
-        # are in the same country as the partner), then skip.
-        if not (company and delivery.with_company(company).perform_vies_validation):
-            return super()._get_vat_valid(delivery, company)
-
-        # If the company has a fiscal position with a foreign vat in Europe, in the same country as the partner, then the VIES validity applies
-        if self.search_count([
-                *self._check_company_domain(company),
-                ('foreign_vat', '!=', False),
-                ('country_id', '=', delivery.country_id.id),
-        ]) or company.country_id in eu_countries:
-            return super()._get_vat_valid(delivery, company) and delivery.vies_valid
-
-        return super()._get_vat_valid(delivery, company)

--- a/None
+++ b/addons/base_vat/models/res_country.py
@@ -0,0 +1,18 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models, api
+
+
+class ResCountry(models.Model):
+    _inherit = 'res.country'
+
+    has_foreign_fiscal_position = fields.Boolean(compute='_compute_has_foreign_fiscal_position')  # Caching technical field
+
+    @api.depends_context('company')
+    def _compute_has_foreign_fiscal_position(self):
+        for country in self:
+            country.has_foreign_fiscal_position = self.env['account.fiscal.position'].search([
+                *self._check_company_domain(self.env.company),
+                ('foreign_vat', '!=', False),
+                ('country_id', '=', country.id),
+            ], limit=1)

--- a/addons/base_vat/models/res_partner.py
+++ b/addons/base_vat/models/res_partner.py
@@ -11,33 +11,31 @@ from stdnum.util import clean
 from odoo import api, models, fields
 from odoo.tools import _, zeep, LazyTranslate
 from odoo.exceptions import ValidationError
+from odoo.addons.base.models.res_partner import EU_EXTRA_VAT_CODES
 
 _lt = LazyTranslate(__name__)
 _logger = logging.getLogger(__name__)
 
-_eu_country_vat = {
-    'GR': 'EL'
-}
 
-_eu_country_vat_inverse = {v: k for k, v in _eu_country_vat.items()}
+EU_EXTRA_VAT_CODES_INV = {v: k for k, v in EU_EXTRA_VAT_CODES.items()}
 
 _ref_vat = {
     'al': 'ALJ91402501L',
-    'ar': _lt('AR200-5536168-2 or 20055361682'),
+    'ar': '20055361682',
     'at': 'ATU12345675',
     'au': '83 914 571 673',
     'be': 'BE0477472701',
     'bg': 'BG1234567892',
     'br': _lt('either 11 digits for CPF or 14 digits for CNPJ'),
-    'cr': _lt('3101012009'),
+    'cr': '3101012009',
     'ch': _lt('CHE-123.456.788 TVA or CHE-123.456.788 MWST or CHE-123.456.788 IVA'),  # Swiss by Yannick Vaucher @ Camptocamp
-    'cl': 'CL76086428-5',
-    'co': _lt('CO213123432-1 or CO213.123.432-1'),
+    'cl': '76086428-5',
+    'co': '213123432-1',
     'cy': 'CY10259033P',
     'cz': 'CZ12345679',
     'de': _lt('DE123456788 or 12/345/67890'),
     'dk': 'DK12345674',
-    'do': _lt('DO1-01-85004-3 or 101850043'),
+    'do': _lt('1-01-85004-3 or 101850043'),
     'ec': _lt('1792060346001 or 1792060346'),
     'ee': 'EE123456780',
     'es': 'ESA12345674',
@@ -53,6 +51,7 @@ _ref_vat = {
     'in': "12AAAAA1234AAZA",
     'is': 'IS062199',
     'it': 'IT12345670017',
+    'jp': 'T1010401114875',
     'kr': '123-45-67890 or 1234567890',
     'lt': 'LT123456715',
     'lu': 'LU12345613',
@@ -60,7 +59,7 @@ _ref_vat = {
     'ma': '12345678',
     'mc': 'FR53000004605',
     'mt': 'MT12345634',
-    'mx': _lt('MXGODE561231GR8 or GODE561231GR8'),
+    'mx': _lt('GODE561231GR8'),
     'nl': 'NL123456782B90',
     'no': 'NO123456785',
     'nz': _lt('49-098-576 or 49098576'),
@@ -70,7 +69,7 @@ _ref_vat = {
     'pt': 'PT123456789',
     'ro': 'RO1234567897 or 8001011234567 or 9000123456789',
     'rs': 'RS101134702',
-    'ru': 'RU123456789047',
+    'ru': '123456789047',
     'se': 'SE123456789701',
     'si': 'SI12345679',
     'sk': 'SK2022749619',
@@ -83,11 +82,6 @@ _ref_vat = {
     'jp': 'T7000012050002',
 }
 
-_region_specific_vat_codes = {
-    'xi',
-    't',
-}
-
 
 class ResPartner(models.Model):
     _inherit = 'res.partner'
@@ -100,61 +94,74 @@ class ResPartner(models.Model):
     )
     # Field representing whether vies_valid is relevant for selecting a fiscal position on this partner
     perform_vies_validation = fields.Boolean(compute='_compute_perform_vies_validation')
-    # Technical field used to determine the VAT to check
-    vies_vat_to_check = fields.Char(compute='_compute_vies_vat_to_check')
-
-    def _split_vat(self, vat):
-        '''
-        Splits the VAT Number to get the country code in a first place and the code itself in a second place.
-        This has to be done because some countries' code are one character long instead of two (i.e. "T" for Japan)
-        '''
-        if len(vat) > 1 and vat[1].isalpha():
-            vat_country, vat_number = vat[:2].lower(), vat[2:].replace(' ', '')
-        else:
-            vat_country, vat_number = vat[:1].lower(), vat[1:].replace(' ', '')
-        return vat_country, vat_number
+    # We put on inverse because a compute with a dependency to itself is not well managed in the ORM (it should be triggered first)
+    country_id = fields.Many2one(inverse="_inverse_vat", store=True)
+    vat = fields.Char(inverse="_inverse_vat", store=True)
 
     @api.model
-    def simple_vat_check(self, country_code, vat_number):
-        '''
-        Check the VAT number depending of the country.
-        http://sima-pc.com/nif.php
-        '''
-        if not country_code.encode().isalpha():
-            return False
-        check_func_name = 'check_vat_' + country_code
-        check_func = getattr(self, check_func_name, None) or getattr(stdnum.util.get_cc_module(country_code, 'vat'), 'is_valid', None)
-        if not check_func:
-            # No VAT validation available, default to check that the country code exists
-            country_code = _eu_country_vat_inverse.get(country_code, country_code)
-            return bool(self.env['res.country'].search([('code', '=ilike', country_code)]))
-        return check_func(vat_number)
-
-    @api.depends('vat', 'country_id')
-    def _compute_vies_vat_to_check(self):
-        """ Retrieve the VAT number, if one such exists, to be used when checking against the VIES system """
-        eu_country_codes = self.env.ref('base.europe').country_ids.mapped('code')
-        for partner in self:
-            # Skip checks when only one character is used. Some users like to put '/' or other as VAT to differentiate between
-            # a partner for which they haven't yet input VAT, and one not subject to VAT
-            if not partner.vat or len(partner.vat) == 1:
-                partner.vies_vat_to_check = ''
-                continue
-            country_code, number = partner._split_vat(partner.vat)
-            if not country_code.isalpha() and partner.country_id:
-                country_code = partner.country_id.code
-                number = partner.vat
-            partner.vies_vat_to_check = (
-                country_code.upper() in eu_country_codes or
-                country_code.lower() in _region_specific_vat_codes
-            ) and self._fix_vat_number(country_code + number, partner.country_id.id) or ''
+    def _run_vat_checks(self, country, vat, partner_name='', validation='error'):
+        """ OVERRIDE """
+        if not country or not vat:
+            return vat, False
+        if len(vat) == 1:
+            if vat == '/' or not validation:
+                return vat, False
+            if validation == 'setnull':
+                return '', False
+            if validation == 'error':
+                raise ValidationError(_("To explicitly indicate no (valid) VAT, use '/' instead. "))
+        vat_prefix, vat_number = self._split_vat(vat)
+
+        if vat_prefix == 'EU' and country not in self.env.ref('base.europe').country_ids:
+            # Foreign companies that trade with non-enterprises in the EU
+            # may have a VATIN starting with "EU" instead of a country code.
+            return vat, False
+
+        prefixed_country = ''
+        eu_prefix_country_group = self.env['res.country.group'].search([('code', '=', 'EU_PREFIX')], limit=1)
+        if 'EU_PREFIX' in country.country_group_codes and vat_prefix:
+            country_code = EU_EXTRA_VAT_CODES_INV.get(vat_prefix, vat_prefix)
+            if country_code in eu_prefix_country_group.country_ids.mapped('code'):
+                vat = vat_number
+                prefixed_country = vat_prefix
+
+        code_to_check = prefixed_country or country.code
+        vat = self._format_vat_number(code_to_check, vat)
+
+        if prefixed_country == 'GR':
+            prefixed_country = 'EL'
+
+        vat_to_return = prefixed_country + vat
+
+        # The context key 'no_vat_validation' allows you to store/set a VAT number without doing validations.
+        # This is for API pushes from external platforms where you have no control over VAT numbers.
+        if not validation or self.env.context.get('no_vat_validation'):
+            return vat_to_return, code_to_check
+
+        # Avoid validating double prefix like BEBE0477472701
+        double_prefix = prefixed_country and vat_to_return.startswith(prefixed_country + prefixed_country)
+        if not self._check_vat_number(code_to_check, vat) or double_prefix:
+            partner_label = _("partner [%s]", partner_name)
+            if validation == 'error':
+                msg = self._build_vat_error_message(code_to_check, vat, partner_label)
+                raise ValidationError(msg)
+            else:
+                return '', code_to_check
+        return vat_to_return, code_to_check
+
+    def _inverse_vat(self):
+        self._check_vat()
+
+    @api.onchange('vat', 'country_id')
+    def _onchange_vat(self):
+        self._check_vat(validation=False)
 
     @api.depends_context('company')
-    @api.depends('vies_vat_to_check')
+    @api.depends('vat')
     def _compute_perform_vies_validation(self):
         """ Determine whether to show VIES validity on the current VAT number """
         for partner in self:
-            to_check = partner.vies_vat_to_check
+            to_check = partner.vat
             company_code = self.env.company.account_fiscal_country_id.code
             partner.perform_vies_validation = (
                 to_check
@@ -162,38 +169,7 @@ class ResPartner(models.Model):
                 and self.env.company.vat_check_vies
             )
 
-    @api.model
-    def fix_eu_vat_number(self, country_id, vat):
-        europe = self.env.ref('base.europe')
-        country = self.env["res.country"].browse(country_id)
-        if not europe:
-            europe = self.env["res.country.group"].search([('name', '=', 'Europe')], limit=1)
-        if europe and country and country.id in europe.country_ids.ids:
-            vat = re.sub('[^A-Za-z0-9]', '', vat).upper()
-            country_code = _eu_country_vat.get(country.code, country.code).upper()
-            if vat[:2] != country_code:
-                vat = country_code + vat
-        return vat
-
-    @api.constrains('vat', 'country_id')
-    def check_vat(self):
-        # The context key 'no_vat_validation' allows you to store/set a VAT number without doing validations.
-        # This is for API pushes from external platforms where you have no control over VAT numbers.
-        if self.env.context.get('no_vat_validation'):
-            return
-
-        for partner in self:
-            # Skip checks when only one character is used. Some users like to put '/' or other as VAT to differentiate between
-            # A partner for which they didn't input VAT, and the one not subject to VAT
-            if not partner.vat or len(partner.vat) == 1:
-                continue
-            country = partner.commercial_partner_id.country_id
-            if self._run_vat_test(partner.vat, country, partner.is_company) is False:
-                partner_label = _("partner [%s]", partner.name)
-                msg = partner._build_vat_error_message(country and country.code.lower() or None, partner.vat, partner_label)
-                raise ValidationError(msg)
-
-    @api.depends('vies_vat_to_check')
+    @api.depends('vat')
     def _compute_vies_valid(self):
         """ Check the VAT number with VIES, if enabled."""
         if not self.env['res.company'].sudo().search_count([('vat_check_vies', '=', True)]):
@@ -201,60 +177,40 @@ class ResPartner(models.Model):
             return
 
         for partner in self:
-            if not partner.vies_vat_to_check:
+            if not partner.vat:
                 partner.vies_valid = False
                 continue
-            if partner.parent_id and partner.parent_id.vies_vat_to_check == partner.vies_vat_to_check:
+            if partner.parent_id and partner.parent_id.vat == partner.vat:
                 partner.vies_valid = partner.parent_id.vies_valid
                 continue
             try:
-                vies_valid = check_vies(partner.vies_vat_to_check, timeout=10)
+                vies_valid = check_vies(partner.vat, timeout=10)
                 partner.vies_valid = vies_valid['valid']
             except (OSError, InvalidComponent, zeep.exceptions.Fault) as e:
                 if partner._origin.id:
                     msg = ""
                     if isinstance(e, OSError):
-                        msg = _("Connection with the VIES server failed. The VAT number %s could not be validated.", partner.vies_vat_to_check)
+                        msg = _("Connection with the VIES server failed. The VAT number %s could not be validated.", partner.vat)
                     elif isinstance(e, InvalidComponent):
-                        msg = _("The VAT number %s could not be interpreted by the VIES server.", partner.vies_vat_to_check)
+                        msg = _("The VAT number %s could not be interpreted by the VIES server.", partner.vat)
                     elif isinstance(e, zeep.exceptions.Fault):
                         msg = _('The request for VAT validation was not processed. VIES service has responded with the following error: %s', e.message)
                     partner._origin.message_post(body=msg)
-                _logger.warning("The VAT number %s failed VIES check.", partner.vies_vat_to_check)
+                _logger.warning("The VAT number %s failed VIES check.", partner.vat)
                 partner.vies_valid = False
 
-    @api.model
-    def _run_vat_test(self, vat_number, default_country, partner_is_company=True):
-        # OVERRIDE account
-        check_result = None
-
-        # First check with country code as prefix of the TIN
-        vat_country_code, vat_number_split = self._split_vat(vat_number)
-
-        if vat_country_code == 'eu' and default_country not in self.env.ref('base.europe').country_ids:
-            # Foreign companies that trade with non-enterprises in the EU
-            # may have a VATIN starting with "EU" instead of a country code.
-            return True
+    def _split_vat(self, vat):
+        vat_prefix, vat_number = vat[:2].upper(), vat[2:].replace(' ', '')
+        if not vat_prefix.isalpha():
+            return '', vat
+        return vat_prefix, vat_number
 
-        vat_has_legit_country_code = self.env['res.country'].search([('code', '=', vat_country_code.upper())], limit=1)
-        if not vat_has_legit_country_code:
-            vat_has_legit_country_code = vat_country_code.lower() in _region_specific_vat_codes
-        if vat_has_legit_country_code:
-            check_result = self.simple_vat_check(vat_country_code, vat_number_split)
-            if check_result:
-                return vat_country_code
-
-        # If it fails, check with default_country (if it exists)
-        if default_country:
-            check_result = self.simple_vat_check(default_country.code.lower(), vat_number)
-            if check_result:
-                return default_country.code.lower()
-
-        # We allow any number if it doesn't start with a country code and the partner has no country.
-        # This is necessary to support an ORM limitation: setting vat and country_id together on a company
-        # triggers two distinct write on res.partner, one for each field, both triggering this constraint.
-        # If vat is set before country_id, the constraint must not break.
-        return check_result
+    @api.model
+    def _check_vat_number(self, country_code, vat_number):
+        ''' Low-level method directly calling stdnum or our own specific method. '''
+        check_func_name = 'check_vat_' + country_code.lower()
+        check_func = getattr(self, check_func_name, None) or getattr(stdnum.util.get_cc_module(country_code, 'vat'), 'is_valid', None)
+        return check_func(vat_number) if check_func else True
 
     @api.model
     def _build_vat_error_message(self, country_code, wrong_vat, record_label):
@@ -268,38 +224,46 @@ class ResPartner(models.Model):
         if country_code and company.country_id and country_code == company.country_id.code.lower() and company.country_id.vat_label:
             vat_label = company.country_id.vat_label
 
-        expected_format = _ref_vat.get(country_code, "'CC##' (CC=Country Code, ##=VAT Number)")
+        expected_format = _ref_vat.get(country_code.lower())
+        expected_note = ""
+        if expected_format:
+            expected_note = ' \n' + _(
+                'Note: the expected format is %(expected_format)s',
+                 expected_format=expected_format
+            )
 
         # Catch use case where the record label is about the public user (name: False)
         if 'False' not in record_label:
             return '\n' + _(
-                'The %(vat_label)s number [%(wrong_vat)s] for %(record_label)s does not seem to be valid. \nNote: the expected format is %(expected_format)s',
+                'The %(vat_label)s number [%(wrong_vat)s] for %(record_label)s does not seem to be valid. %(expected_note)s',
                 vat_label=vat_label,
                 wrong_vat=wrong_vat,
                 record_label=record_label,
-                expected_format=expected_format,
+                expected_note=expected_note
             )
         else:
             return '\n' + _(
-                'The %(vat_label)s number [%(wrong_vat)s] does not seem to be valid. \nNote: the expected format is %(expected_format)s',
+                'The %(vat_label)s number [%(wrong_vat)s] does not seem to be valid. %(expected_note)s',
                 vat_label=vat_label,
                 wrong_vat=wrong_vat,
-                expected_format=expected_format,
+                expected_note=expected_note,
             )
 
-
-    __check_vat_al_re = re.compile(r'^[JKLM][0-9]{8}[A-Z]$')
+    _check_vat_al_re = re.compile(r'^[JKLM][0-9]{8}[A-Z]$')
 
     def check_vat_al(self, vat):
         """Check Albania VAT number"""
         number = stdnum.util.get_cc_module('al', 'vat').compact(vat)
+        return len(number) == 10 and self._check_vat_al_re.match(number)
 
-        if len(number) == 10 and self.__check_vat_al_re.match(number):
-            return True
-        return False
+    def check_vat_jp(self, vat):
+        if vat and vat[0] == 'T':
+            vat = vat[1:]
+        return stdnum.util.get_cc_module('jp', 'vat').is_valid(vat)
+
+    _check_tin1_ro_natural_persons = re.compile(r'[1-9]\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])\d{6}')
+    _check_tin2_ro_natural_persons = re.compile(r'9000\d{9}')
 
-    __check_tin1_ro_natural_persons = re.compile(r'[1-9]\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])\d{6}')
-    __check_tin2_ro_natural_persons = re.compile(r'9000\d{9}')
     def check_vat_ro(self, vat):
         """
             Check Romanian VAT number that can be for example 'RO1234567897 or 'xyyzzaabbxxxx' or '9000xxxxxxxx'.
@@ -311,18 +275,18 @@ class ResPartner(models.Model):
 
             Also stdum also checks the CUI or CIF (Romanian company identifier). So a number like '123456897' will pass.
         """
-        tin1 = self.__check_tin1_ro_natural_persons.match(vat)
+        tin1 = self._check_tin1_ro_natural_persons.match(vat)
         if tin1:
             return True
-        tin2 = self.__check_tin1_ro_natural_persons.match(vat)
+        tin2 = self._check_tin1_ro_natural_persons.match(vat)
         if tin2:
             return True
         # Check the vat number
         return stdnum.util.get_cc_module('ro', 'vat').is_valid(vat)
 
-    __check_tin_hu_individual_re = re.compile(r'^8\d{9}$')
-    __check_tin_hu_companies_re = re.compile(r'^\d{8}-?[1-5]-?\d{2}$')
-    __check_tin_hu_european_re = re.compile(r'^\d{8}$')
+    _check_tin_hu_individual_re = re.compile(r'^8\d{9}$')
+    _check_tin_hu_companies_re = re.compile(r'^\d{8}-?[1-5]-?\d{2}$')
+    _check_tin_hu_european_re = re.compile(r'^\d{8}$')
 
     def check_vat_hu(self, vat):
         """
@@ -332,19 +296,19 @@ class ResPartner(models.Model):
             - 8xxxxxxxxy, Tin number for individual, it has to start with an 8 and finish with the check digit
             - In case of EU format it will be the first 8 digits of the full VAT
         """
-        companies = self.__check_tin_hu_companies_re.match(vat)
+        companies = self._check_tin_hu_companies_re.match(vat)
         if companies:
             return True
-        individual = self.__check_tin_hu_individual_re.match(vat)
+        individual = self._check_tin_hu_individual_re.match(vat)
         if individual:
             return True
-        european = self.__check_tin_hu_european_re.match(vat)
+        european = self._check_tin_hu_european_re.match(vat)
         if european:
             return True
         # Check the vat number
         return stdnum.util.get_cc_module('hu', 'vat').is_valid(vat)
 
-    __check_vat_ch_re = re.compile(r'E([0-9]{9}|-[0-9]{3}\.[0-9]{3}\.[0-9]{3})(MWST|TVA|IVA)$')
+    _check_vat_ch_re = re.compile(r'E([0-9]{9}|-[0-9]{3}\.[0-9]{3}\.[0-9]{3})( )?(MWST|TVA|IVA)$')
 
     def check_vat_ch(self, vat):
         '''
@@ -363,8 +327,7 @@ class ResPartner(models.Model):
         #
         # /!\ The english abbreviation VAT is not valid /!\
 
-        match = self.__check_vat_ch_re.match(vat)
-
+        match = self._check_vat_ch_re.match(vat)
         if match:
             # For new TVA numbers, the last digit is a MOD11 checksum digit build with weighting pattern: 5,4,3,2,7,6,5,4
             num = [s for s in match.group(1) if s.isdigit()]        # get the digits only
@@ -402,7 +365,7 @@ class ResPartner(models.Model):
 
     # Mexican VAT verification, contributed by Vauxoo
     # and Panos Christeas <p_christ@hol.gr>
-    __check_vat_mx_re = re.compile(r"(?P<primeras>[A-Za-z\xd1\xf1&]{3,4})"
+    _check_vat_mx_re = re.compile(r"(?P<primeras>[A-Za-z\xd1\xf1&]{3,4})"
                                    r"[ \-_]?"
                                    r"(?P<ano>[0-9]{2})(?P<mes>[01][0-9])(?P<dia>[0-3][0-9])"
                                    r"[ \-_]?"
@@ -413,7 +376,7 @@ class ResPartner(models.Model):
 
         Verificar RFC M√©xico
         '''
-        m = self.__check_vat_mx_re.fullmatch(vat)
+        m = self._check_vat_mx_re.fullmatch(vat)
         if not m:
             #No valid format
             return False
@@ -471,10 +434,10 @@ class ResPartner(models.Model):
         return int(vat[10]) == dig_check
 
     # Philippines TIN (+ branch code) validation
-    __check_vat_ph_re = re.compile(r"\d{3}-\d{3}-\d{3}(-\d{3,5})?$")
+    _check_vat_ph_re = re.compile(r"\d{3}-\d{3}-\d{3}(-\d{3,5})?$")
 
     def check_vat_ph(self, vat):
-        return len(vat) >= 11 and len(vat) <= 17 and self.__check_vat_ph_re.match(vat)
+        return len(vat) >= 11 and len(vat) <= 17 and self._check_vat_ph_re.match(vat)
 
     def check_vat_ru(self, vat):
         '''
@@ -513,11 +476,16 @@ class ResPartner(models.Model):
                 return False
         return True
 
+    # VAT validation in Serbia
+    def check_vat_rs(self, vat):
+        vat = vat.removeprefix('RS')
+        return stdnum.util.get_cc_module('rs', 'vat').is_valid(vat)
+
     # VAT validation in Turkey
     def check_vat_tr(self, vat):
         return stdnum.util.get_cc_module('tr', 'tckimlik').is_valid(vat) or stdnum.util.get_cc_module('tr', 'vkn').is_valid(vat)
 
-    __check_vat_sa_re = re.compile(r"^3[0-9]{13}3$")
+    _check_vat_sa_re = re.compile(r"^3[0-9]{13}3$")
 
     # Saudi Arabia TIN validation
     def check_vat_sa(self, vat):
@@ -525,7 +493,7 @@ class ResPartner(models.Model):
             Check company VAT TIN according to ZATCA specifications: The VAT number should start and begin with a '3'
             and be 15 digits long
         """
-        return self.__check_vat_sa_re.match(vat) or False
+        return self._check_vat_sa_re.match(vat) or False
 
     def check_vat_ua(self, vat):
         res = []
@@ -640,16 +608,12 @@ class ResPartner(models.Model):
             return any(re.compile(rx).match(vat) for rx in all_gstin_re)
         return False
 
-    def check_vat_t(self, vat):
-        if self.country_id.code == 'JP':
-            return self.simple_vat_check('jp', vat)
-
     def check_vat_br(self, vat):
         is_cpf_valid = stdnum.get_cc_module('br', 'cpf').is_valid
         is_cnpj_valid = stdnum.get_cc_module('br', 'cnpj').is_valid
         return is_cpf_valid(vat) or is_cnpj_valid(vat)
 
-    __check_vat_cr_re = re.compile(r'^(?:[1-9]\d{8}|\d{10}|[1-9]\d{10,11})$')
+    _check_vat_cr_re = re.compile(r'^(?:[1-9]\d{8}|\d{10}|[1-9]\d{10,11})$')
 
     def check_vat_cr(self, vat):
         # C√âDULA F√çSICA: 9 digits
@@ -657,7 +621,7 @@ class ResPartner(models.Model):
         # C√âDULA DIMEX: 11 or 12 digits
         # C√âDULA NITE: 10 digits
 
-        return self.__check_vat_cr_re.match(vat) or False
+        return self._check_vat_cr_re.match(vat) or False
 
     def format_vat_eu(self, vat):
         # Foreign companies that trade with non-enterprises in the EU
@@ -665,8 +629,36 @@ class ResPartner(models.Model):
         return vat
 
     def format_vat_ch(self, vat):
-        stdnum_vat_format = getattr(stdnum.util.get_cc_module('ch', 'vat'), 'format', None)
-        return stdnum_vat_format('CH' + vat)[2:] if stdnum_vat_format else vat
+        stdnum_vat_format = stdnum.util.get_cc_module('ch', 'vat').format
+        return stdnum_vat_format('CH' + vat)[2:]
+
+    def format_vat_cl(self, vat):
+        """ It is better to always have the -"""
+        vat = vat.replace('.', '').replace('CL', '').replace(' ', '').replace('-', '').upper()
+        if len(vat) > 2:
+            return vat[:-1] + '-' + vat[-1]
+        return vat
+
+    def format_vat_co(self, vat):
+        """ It is better to always have the -"""
+        stdnum_vat_format = stdnum.util.get_cc_module('co', 'vat').format
+        vat = stdnum_vat_format(vat).replace('.', '').replace('-', '')
+        if len(vat) > 2:
+            return vat[:-1] + '-' + vat[-1]
+        return vat
+
+    def format_vat_vn(self, vat):
+        """ It is better to always have the -"""
+        stdnum_vat_format = stdnum.util.get_cc_module('vn', 'vat').format
+        return stdnum_vat_format(vat)
+
+    def format_vat_hu(self, vat):
+        """ We put the - back as we require it for the EDI and the different parts will make it clear to the user"""
+        stdnum_vat_fix_func = stdnum.util.get_cc_module('hu', 'vat').compact
+        vat = stdnum_vat_fix_func(vat)
+        if self._check_tin_hu_companies_re.match(vat):
+            vat = vat[:8] + '-' + vat[8] + '-' + vat[9] + vat[10]
+        return vat
 
     def check_vat_id(self, vat):
         """ Temporary Indonesian VAT validation to support the new format
@@ -706,40 +698,43 @@ class ResPartner(models.Model):
         stdnum_vat_format = stdnum.util.get_cc_module('sm', 'vat').compact
         return stdnum_vat_format('SM' + vat)[2:]
 
-    def _fix_vat_number(self, vat, country_id):
-        code = self.env['res.country'].browse(country_id).code if country_id else False
-        vat_country, vat_number = self._split_vat(vat)
-        if code and code.lower() != vat_country:
-            return vat
-        stdnum_vat_fix_func = getattr(stdnum.util.get_cc_module(vat_country, 'vat'), 'compact', None)
-        #If any localization module need to define vat fix method for it's country then we give first priority to it.
-        format_func_name = 'format_vat_' + vat_country
+    @api.model
+    def _format_vat_number(self, country_code, vat):
+        """ Low-level method directly calling stdnum or our own specific method returning the formatted VAT. """
+        stdnum_vat_fix_func = getattr(stdnum.util.get_cc_module(country_code, 'vat'), 'compact', None)
+        # If any localization module needs to define vat fix method for its country then we give first priority to it.
+        format_func_name = 'format_vat_' + country_code.lower()
         format_func = getattr(self, format_func_name, None) or stdnum_vat_fix_func
         if format_func:
-            vat_number = format_func(vat_number)
-        return vat_country.upper() + vat_number
+            vat = format_func(vat)
+        return vat
 
     @api.model
     def _convert_hu_local_to_eu_vat(self, local_vat):
-        if self.__check_tin_hu_companies_re.match(local_vat):
+        if self._check_tin_hu_companies_re.match(local_vat):
             return f'HU{local_vat[:8]}'
         return False
 
+    def _get_vat_required_valid(self, company=None):
+        # OVERRIDE
+        # If VIES validation does not apply to this partner (e.g. they
+        # are in the same country as the partner), then skip.
+        vat_required_valid = super()._get_vat_required_valid(company=company)
+        if (
+            company and self.with_company(company).perform_vies_validation
+            and ('EU' in company.country_id.country_codes or self.country_id and self.country_id.has_foreign_fiscal_position)
+        ):
+            vat_required_valid = vat_required_valid and self.vies_valid
+        return vat_required_valid
+
     @api.model_create_multi
     def create(self, vals_list):
-        for values in vals_list:
-            if values.get('vat'):
-                country_id = values.get('country_id')
-                values['vat'] = self._fix_vat_number(values['vat'], country_id)
         res = super().create(vals_list)
         if self.env.context.get('import_file'):
             res.env.remove_to_compute(self._fields['vies_valid'], res)
         return res
 
     def write(self, values):
-        if values.get('vat') and len(self.mapped('country_id')) == 1:
-            country_id = values.get('country_id', self.country_id.id)
-            values['vat'] = self._fix_vat_number(values['vat'], country_id)
         res = super().write(values)
         if self.env.context.get('import_file'):
             self.env.remove_to_compute(self._fields['vies_valid'], self)
