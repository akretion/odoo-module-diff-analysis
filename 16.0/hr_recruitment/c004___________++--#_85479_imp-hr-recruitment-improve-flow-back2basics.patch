PR: https://github.com/odoo/odoo/pull/85479

From: 6c5f38ae37e9c1014bfa93dd82ffc6a3b31f0bd5
From: Kevin Baptiste
Date: 2022-04-01 11:37:09

Structural Changes: 10
Total Changes: 191

[IMP] hr_recruitment: improve flow (back2basics)

* Redesign views
    * New layout for the job kanban card + redesigned menu
* Create new reports
    * Candidate Sources: get a better view on where applicants are
      coming from;
    * Time in Stage: shows how long an applicant is in the current
      stage.
* Archiving a job archives applicants as well

odoo/enterprise#24816
odoo/upgrade#3395

closes odoo/odoo#85479

Taskid: 2738082
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_recruitment/models/hr_job.py
+++ b/addons/hr_recruitment/models/hr_job.py
@@ -1,6 +1,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 import ast
+from collections import defaultdict
 
 from odoo import api, fields, models, _
 
@@ -8,7 +9,7 @@ from odoo import api, fields, models, _
 class Job(models.Model):
     _name = "hr.job"
     _inherit = ["mail.alias.mixin", "hr.job"]
-    _order = "sequence, state desc, name asc"
+    _order = "sequence, name asc"
 
     @api.model
     def _default_address_id(self):
@@ -29,10 +30,11 @@ class Job(models.Model):
         help="Number of applications that are new in the flow (typically at first step of the flow)")
     old_application_count = fields.Integer(
         compute='_compute_old_application_count', string="Old Application")
+    applicant_hired = fields.Integer(compute='_compute_applicant_hired', string="Applicants Hired")
     manager_id = fields.Many2one(
         'hr.employee', related='department_id.manager_id', string="Department Manager",
         readonly=True, store=True)
-    user_id = fields.Many2one('res.users', "Recruiter", tracking=True)
+    user_id = fields.Many2one('res.users', "Recruiter", domain="[('share', '=', False), ('company_ids', 'in', company_id)]", tracking=True)
     hr_responsible_id = fields.Many2one(
         'res.users', "HR Responsible", tracking=True,
         help="Person responsible of validating the employee's contracts.")
@@ -47,6 +49,39 @@ class Job(models.Model):
     interviewer_ids = fields.Many2many('res.users', string='Interviewers', domain="[('share', '=', False), ('company_ids', 'in', company_id)]")
     extended_interviewer_ids = fields.Many2many('res.users', 'hr_job_extended_interviewer_res_users', compute='_compute_extended_interviewer_ids', store=True)
 
+    activities_overdue = fields.Integer(compute='_compute_activities')
+    activities_today = fields.Integer(compute='_compute_activities')
+
+    @api.depends_context('uid')
+    def _compute_activities(self):
+        self.env.cr.execute("""
+            SELECT
+                app.job_id,
+                COUNT(*) AS act_count,
+                CASE
+                    WHEN %(today)s::date - act.date_deadline::date = 0 THEN 'today'
+                    WHEN %(today)s::date - act.date_deadline::date > 0 THEN 'overdue'
+                END AS act_state
+             FROM mail_activity act
+             JOIN hr_applicant app ON app.id = act.res_id
+             JOIN hr_recruitment_stage sta ON app.stage_id = sta.id
+            WHERE act.user_id = %(user_id)s AND act.res_model = 'hr.applicant'
+              AND act.date_deadline <= %(today)s::date AND app.active
+              AND app.job_id IN %(job_ids)s
+              AND sta.hired_stage IS NOT TRUE
+            GROUP BY app.job_id, act_state
+        """, {
+            'today': fields.Date.context_today(self),
+            'user_id': self.env.uid,
+            'job_ids': tuple(self.ids),
+        })
+        job_activities = defaultdict(dict)
+        for activity in self.env.cr.dictfetchall():
+            job_activities[activity['job_id']][activity['act_state']] = activity['act_count']
+        for job in self:
+            job.activities_overdue = job_activities[job.id].get('overdue', 0)
+            job.activities_today = job_activities[job.id].get('today', 0)
+
     @api.depends('application_ids.interviewer_id')
     def _compute_extended_interviewer_ids(self):
         for job in self:
@@ -85,7 +120,13 @@ class Job(models.Model):
             job.documents_count = len(job.document_ids)
 
     def _compute_all_application_count(self):
-        read_group_result = self.env['hr.applicant'].with_context(active_test=False)._read_group([('job_id', 'in', self.ids)], ['job_id'], ['job_id'])
+        read_group_result = self.env['hr.applicant'].with_context(active_test=False)._read_group([
+            ('job_id', 'in', self.ids),
+            '|',
+                ('active', '=', True),
+                '&',
+                ('active', '=', False), ('refuse_reason_id', '!=', False),
+        ], ['job_id'], ['job_id'])
         result = dict((data['job_id'][0], data['job_id_count']) for data in read_group_result)
         for job in self:
             job.all_application_count = result.get(job.id, 0)
@@ -109,6 +150,16 @@ class Job(models.Model):
                 [("job_id", "=", job.id), ("stage_id", "=", job._get_first_stage().id)]
             )
 
+    def _compute_applicant_hired(self):
+        hired_stages = self.env['hr.recruitment.stage'].search([('hired_stage', '=', True)])
+        hired_data = self.env['hr.applicant']._read_group([
+            ('job_id', 'in', self.ids),
+            ('stage_id', 'in', hired_stages.ids),
+        ], ['job_id'], ['job_id'])
+        job_hires = {data['job_id'][0]: data['job_id_count'] for data in hired_data}
+        for job in self:
+            job.applicant_hired = job_hires.get(job.id, 0)
+
     @api.depends('application_count', 'new_application_count')
     def _compute_old_application_count(self):
         for job in self:
@@ -144,6 +195,8 @@ class Job(models.Model):
 
     def write(self, vals):
         old_interviewers = self.interviewer_ids
+        if 'active' in vals and not vals['active']:
+            self.application_ids.active = False
         res = super().write(vals)
         if 'interviewer_ids' in vals:
             interviewers_to_clean = old_interviewers - self.interviewer_ids
@@ -163,14 +216,51 @@ class Job(models.Model):
     def _creation_subtype(self):
         return self.env.ref('hr_recruitment.mt_job_new')
 
-    def action_get_attachment_tree_view(self):
-        action = self.env["ir.actions.actions"]._for_xml_id("base.action_attachment")
+    def action_open_attachments(self):
+        return {
+            'type': 'ir.actions.act_window',
+            'res_model': 'ir.attachment',
+            'name': _('Documents'),
+            'context': {
+                'default_res_model': self._name,
+                'default_res_id': self.ids[0],
+                'show_partner_name': 1,
+            },
+            'view_mode': 'tree,form',
+            'views': [
+                (self.env.ref('hr_recruitment.ir_attachment_hr_recruitment_list_view').id, 'tree'),
+                (False, 'form'),
+            ],
+            'search_view_id': self.env.ref('hr_recruitment.ir_attachment_view_search_inherit_hr_recruitment').ids,
+            'domain': ['|',
+                '&', ('res_model', '=', 'hr.job'), ('res_id', 'in', self.ids),
+                '&', ('res_model', '=', 'hr.applicant'), ('res_id', 'in', self.application_ids.ids),
+            ],
+        }
+
+    def action_open_activities(self):
+        action = self.env["ir.actions.actions"]._for_xml_id("hr_recruitment.action_hr_job_applications")
+        views = ['activity'] + [view for view in action['view_mode'].split(',') if view != 'activity']
+        action['view_mode'] = ','.join(views)
+        action['views'] = [(False, view) for view in views]
+        return action
+
+    def action_open_late_activities(self):
+        action = self.action_open_activities()
+        action['context'] = {
+            'default_job_id': self.id,
+            'search_default_job_id': self.id,
+            'search_default_activities_overdue': True,
+        }
+        return action
+
+    def action_open_today_activities(self):
+        action = self.action_open_activities()
         action['context'] = {
-            'default_res_model': self._name,
-            'default_res_id': self.ids[0]
+            'default_job_id': self.id,
+            'search_default_job_id': self.id,
+            'search_default_activities_today': True,
         }
-        action['search_view_id'] = (self.env.ref('hr_recruitment.ir_attachment_view_search_inherit_hr_recruitment').id, )
-        action['domain'] = ['|', '&', ('res_model', '=', 'hr.job'), ('res_id', 'in', self.ids), '&', ('res_model', '=', 'hr.applicant'), ('res_id', 'in', self.mapped('application_ids').ids)]
         return action
 
     def close_dialog(self):

--- a/addons/hr_recruitment/models/hr_recruitment.py
+++ b/addons/hr_recruitment/models/hr_recruitment.py
@@ -10,6 +10,8 @@ from odoo.exceptions import AccessError, UserError
 
 from dateutil.relativedelta import relativedelta
 
+from lxml import etree
+
 AVAILABLE_PRIORITIES = [
     ('0', 'Normal'),
     ('1', 'Good'),
@@ -24,9 +26,13 @@ class RecruitmentSource(models.Model):
     _inherit = ['utm.source.mixin']
 
     email = fields.Char(related='alias_id.display_name', string="Email", readonly=True)
+    has_domain = fields.Char(compute='_compute_has_domain')
     job_id = fields.Many2one('hr.job', "Job", ondelete='cascade')
     alias_id = fields.Many2one('mail.alias', "Alias ID")
 
+    def _compute_has_domain(self):
+        self.has_domain = bool(self.env["ir.config_parameter"].sudo().get_param("mail.catchall.domain"))
+
     def create_alias(self):
         campaign = self.env.ref('hr_recruitment.utm_campaign_job')
         medium = self.env.ref('utm.utm_medium_email')
@@ -44,7 +50,16 @@ class RecruitmentSource(models.Model):
                 },
             }
             source.alias_id = self.env['mail.alias'].create(vals)
-            source.name = source.source_id.name
+
+    @api.model
+    def fields_view_get(self, view_id=None, view_type='form', toolbar=False, submenu=False):
+        res = super().fields_view_get(view_id, view_type, toolbar, submenu)
+        if view_type == 'tree' and not bool(self.env["ir.config_parameter"].sudo().get_param("mail.catchall.domain")):
+            arch = etree.fromstring(res['arch'])
+            email = arch.xpath("//field[@name='email']")[0]
+            email.getparent().remove(email)
+            res['arch'] = etree.tostring(arch, encoding='unicode')
+        return res
 
 class RecruitmentStage(models.Model):
     _name = "hr.recruitment.stage"
@@ -111,7 +126,7 @@ class Applicant(models.Model):
     _inherit = ['mail.thread.cc', 'mail.activity.mixin', 'utm.mixin']
     _mailing_enabled = True
 
-    name = fields.Char("Subject / Application Name", required=True, help="Email subject for applications sent via email", index='trigram')
+    name = fields.Char("Subject / Application", required=True, help="Email subject for applications sent via email", index='trigram')
     active = fields.Boolean("Active", default=True, help="If the active field is set to false, it will allow you to hide the case without removing it.")
     description = fields.Html("Description")
     email_from = fields.Char("Email", size=128, help="Applicant email", compute='_compute_partner_phone_email',
@@ -129,7 +144,7 @@ class Applicant(models.Model):
     categ_ids = fields.Many2many('hr.applicant.category', string="Tags")
     company_id = fields.Many2one('res.company', "Company", compute='_compute_company', store=True, readonly=False, tracking=True)
     user_id = fields.Many2one(
-        'res.users', "Recruiter", compute='_compute_user',
+        'res.users', "Recruiter", compute='_compute_user', domain="[('share', '=', False), ('company_ids', 'in', company_id)]",
         tracking=True, store=True, readonly=False)
     date_closed = fields.Datetime("Hire Date", compute='_compute_date_closed', store=True, readonly=False, tracking=True)
     date_open = fields.Datetime("Assigned", readonly=True)
@@ -178,6 +193,12 @@ class Applicant(models.Model):
     source_id = fields.Many2one(ondelete='set null')
     interviewer_id = fields.Many2one('res.users', string='Interviewer', domain="[('share', '=', False), ('company_ids', 'in', company_id)]")
 
+    @api.onchange('job_id')
+    def _onchange_job_id(self):
+        for applicant in self:
+            if applicant.job_id.name:
+                applicant.name = applicant.job_id.name
+
     @api.depends('date_open', 'date_closed')
     def _compute_day(self):
         for applicant in self:
@@ -312,7 +333,7 @@ class Applicant(models.Model):
         for applicant in self:
             applicant.user_id = applicant.job_id.user_id.id or self.env.uid
 
-    @api.depends('partner_id')
+    @api.depends('partner_id', 'partner_id.email', 'partner_id.mobile', 'partner_id.phone')
     def _compute_partner_phone_email(self):
         for applicant in self:
             applicant.partner_phone = applicant.partner_id.phone
@@ -448,12 +469,24 @@ class Applicant(models.Model):
         }
         return res
 
-    def action_get_attachment_tree_view(self):
-        action = self.env['ir.actions.act_window']._for_xml_id('base.action_attachment')
-        action['context'] = {'default_res_model': self._name, 'default_res_id': self.ids[0]}
-        action['domain'] = str(['&', ('res_model', '=', self._name), ('res_id', 'in', self.ids)])
-        action['search_view_id'] = (self.env.ref('hr_recruitment.ir_attachment_view_search_inherit_hr_recruitment').id, )
-        return action
+    def action_open_attachments(self):
+        return {
+            'type': 'ir.actions.act_window',
+            'res_model': 'ir.attachment',
+            'name': _('Documents'),
+            'context': {
+                'default_res_model': 'hr.job',
+                'default_res_id': self.ids[0],
+                'show_partner_name': 1,
+            },
+            'view_mode': 'tree,form',
+            'views': [
+                (self.env.ref('hr_recruitment.ir_attachment_hr_recruitment_list_view').id, 'tree'),
+                (False, 'form'),
+            ],
+            'search_view_id': self.env.ref('hr_recruitment.ir_attachment_view_search_inherit_hr_recruitment').ids,
+            'domain': [('res_model', '=', 'hr.applicant'), ('res_id', 'in', self.ids), ],
+        }
 
     def action_applications_email(self):
         # Security rules will apply when loading the view, here we just fetch the ids
@@ -479,6 +512,16 @@ class Applicant(models.Model):
             },
         }
 
+    def action_open_employee(self):
+        self.ensure_one()
+        return {
+            'name': _('Employee'),
+            'type': 'ir.actions.act_window',
+            'res_model': 'hr.employee',
+            'view_mode': 'form',
+            'res_id': self.emp_id.id,
+        }
+
     def _track_template(self, changes):
         res = super(Applicant, self)._track_template(changes)
         applicant = self[0]
@@ -520,6 +563,14 @@ class Applicant(models.Model):
                 applicant._message_add_suggested_recipient(recipients, email=email_from, reason=_('Contact Email'))
         return recipients
 
+    def name_get(self):
+        if self.env.context.get('show_partner_name'):
+            return [
+                (applicant.id, applicant.partner_name or applicant.name)
+                for applicant in self
+            ]
+        return super().name_get()
+
     @api.model
     def message_new(self, msg, custom_values=None):
         """ Overrides mail_thread message_new that is called by the mailgateway
@@ -646,6 +697,18 @@ class Applicant(models.Model):
             return applicant_inactive.archive_applicant()
         return res
 
+    def action_send_email(self):
+        return {
+            'name': _('Send Email'),
+            'type': 'ir.actions.act_window',
+            'target': 'new',
+            'view_mode': 'form',
+            'res_model': 'applicant.send.mail',
+            'context': {
+                'default_applicant_ids': self.ids,
+            }
+        }
+
 
 class ApplicantCategory(models.Model):
     _name = "hr.applicant.category"
