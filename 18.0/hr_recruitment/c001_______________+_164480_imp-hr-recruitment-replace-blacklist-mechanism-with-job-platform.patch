PR: https://github.com/odoo/odoo/pull/164480

From: 0f68d1506358c81a1d369a62e240086a177d5076
From: jugj-odoo
Date: 2024-05-28 14:27:55

Structural Changes: 4
Total Changes: 50

[IMP] hr_recruitment: Replace Blacklist mechanism with Job platforms

The old blacklist mechanism using a config parameter is now replaced
with a proper model applying regular expressions to emails to parse
the relevant applicant name.

task-3167538

closes odoo/odoo#164480

Related: odoo/upgrade#6067
Signed-off-by: Sofie Gvaladze (sgv) <sgv@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_recruitment/models/__init__.py
+++ b/addons/hr_recruitment/models/__init__.py
@@ -15,3 +15,4 @@ from . import utm_source
 from . import res_users
 from . import ir_ui_menu
 from . import mail_activity_plan
+from . import hr_job_platform

--- a/addons/hr_recruitment/models/hr_applicant.py
+++ b/addons/hr_recruitment/models/hr_applicant.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
+import re
 
 from markupsafe import Markup
 
@@ -420,10 +421,6 @@ class Applicant(models.Model):
         # user_id change: update date_open
         if vals.get('user_id'):
             vals['date_open'] = fields.Datetime.now()
-        if vals.get('email_from'):
-            vals['email_from'] = vals['email_from'].strip()
-            if self._email_is_blacklisted(vals['email_from']):
-                del vals['email_from']
         old_interviewers = self.interviewer_ids
         # stage_id: track last stage before update
         if 'stage_id' in vals:
@@ -448,10 +445,6 @@ class Applicant(models.Model):
         if self.emp_id:
             raise UserError(_("The applicant is linked to an employee, to avoid losing information, archive it instead."))
 
-    def _email_is_blacklisted(self, mail):
-        normalized_mail = tools.email_normalize(mail)
-        return normalized_mail in [m.strip() for m in self.env['ir.config_parameter'].sudo().get_param('hr_recruitment.blacklisted_emails', '').split(',')]
-
     def get_empty_list_help(self, help_message):
         if 'active_id' in self.env.context and self.env.context.get('active_model') == 'hr.job':
             hr_job = self.env['hr.job'].browse(self.env.context['active_id'])
@@ -634,10 +627,14 @@ class Applicant(models.Model):
             'name': msg.get('subject') or _("No Subject"),
             'partner_name': partner_name or email_from_normalized,
         }
-        if msg.get('from') and not self._email_is_blacklisted(msg.get('from')):
+        job_platform = self.env['hr.job.platform'].search([('email', '=', email_from_normalized)], limit=1)
+        if msg.get('from') and not job_platform:
             defaults['email_from'] = msg.get('from')
             defaults['partner_id'] = msg.get('author_id', False)
-        if msg.get('email_from') and self._email_is_blacklisted(msg.get('email_from')):
+        if msg.get('email_from') and job_platform:
+            subject_pattern = re.compile(job_platform.regex or '')
+            regex_results = re.findall(subject_pattern, msg.get('subject')) + re.findall(subject_pattern, msg.get('body'))
+            defaults['partner_name'] = regex_results[0] if regex_results else partner_name
             del msg['email_from']
         if msg.get('priority'):
             defaults['priority'] = msg.get('priority')

--- a/None
+++ b/addons/hr_recruitment/models/hr_job_platform.py
@@ -0,0 +1,32 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+from odoo.tools import email_normalize
+
+
+class JobPlatform(models.Model):
+    _name = "hr.job.platform"
+    _description = 'Job Platforms'
+
+    name = fields.Char(required=True)
+    email = fields.Char(required=True, help="Applications received from this Email won't be linked to a contact."
+                                            "There will be no email address set on the Applicant either.")
+    regex = fields.Char(help="The regex facilitates to extract information from the subject or body "
+                             "of the received email to autopopulate the Applicant's name field")
+
+    _sql_constraints = [
+        ('email_uniq', 'unique (email)', "The Email must be unique, this one already corresponds to another Job Platform."),
+    ]
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        for vals in vals_list:
+            if vals['email']:
+                vals['email'] = email_normalize(vals['email']) or vals['email']
+        platforms = super().create(vals_list)
+        return platforms
+
+    def write(self, vals):
+        if vals.get('email'):
+            vals['email'] = email_normalize(vals['email']) or vals['email']
+        return super().write(vals)
