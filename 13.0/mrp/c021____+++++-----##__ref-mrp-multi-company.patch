PR: https://github.com/odoo/odoo/pull/

From: 96406dc2a9e06595961f6d4bec6b66f27b94e2ff
From: Simon Lejeune
Date: 2019-09-03 15:05:03

Structural Changes: 74
Total Changes: 378

[REF] mrp: multi company

Ensure proper domains are applied and enforced on relation fields thanks
to the `check_company` attributes.

Make sure unbuild have proper sequence for each companies.

The produce wizard and workorders company is the one of the production.
The BoM line company_id is the one of its bom_id.
Added some tests.

task-1985992

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_abstract_workorder.py
+++ b/addons/mrp/models/mrp_abstract_workorder.py
@@ -11,12 +11,15 @@ from odoo.tools import float_compare, float_round, float_is_zero
 class MrpAbstractWorkorder(models.AbstractModel):
     _name = "mrp.abstract.workorder"
     _description = "Common code between produce wizards and workorders."
+    _check_company_auto = True
 
-    production_id = fields.Many2one('mrp.production', 'Manufacturing Order', required=True)
-    product_id = fields.Many2one(related='production_id.product_id', readonly=True, store=True)
+    production_id = fields.Many2one('mrp.production', 'Manufacturing Order', required=True, check_company=True)
+    product_id = fields.Many2one(related='production_id.product_id', readonly=True, store=True, check_company=True)
     qty_producing = fields.Float(string='Currently Produced Quantity', digits='Product Unit of Measure')
     product_uom_id = fields.Many2one('uom.uom', 'Unit of Measure', required=True, readonly=True)
-    finished_lot_id = fields.Many2one('stock.production.lot', string='Lot/Serial Number', domain="[('product_id', '=', product_id)]")
+    finished_lot_id = fields.Many2one(
+        'stock.production.lot', string='Lot/Serial Number',
+        domain="[('product_id', '=', product_id), ('company_id', '=', company_id)]", check_company=True)
     product_tracking = fields.Selection(related="product_id.tracking")
     consumption = fields.Selection([
         ('strict', 'Strict'),
@@ -24,6 +27,7 @@ class MrpAbstractWorkorder(models.AbstractModel):
         required=True,
     )
     use_create_components_lots = fields.Boolean(related="production_id.picking_type_id.use_create_components_lots")
+    company_id = fields.Many2one(related='production_id.company_id')
 
     @api.model
     def _prepare_component_quantity(self, move, qty_producing):
@@ -300,15 +304,20 @@ class MrpAbstractWorkorderLine(models.AbstractModel):
     _name = "mrp.abstract.workorder.line"
     _description = "Abstract model to implement product_produce_line as well as\
     workorder_line"
+    _check_company_auto = True
 
-    move_id = fields.Many2one('stock.move')
-    product_id = fields.Many2one('product.product', 'Product', required=True)
+    move_id = fields.Many2one('stock.move', check_company=True)
+    product_id = fields.Many2one('product.product', 'Product', required=True, check_company=True)
     product_tracking = fields.Selection(related="product_id.tracking")
-    lot_id = fields.Many2one('stock.production.lot', 'Lot/Serial Number')
+    lot_id = fields.Many2one(
+        'stock.production.lot', 'Lot/Serial Number',
+        check_company=True,
+        domain="[('product_id', '=', product_id), '|', ('company_id', '=', False), ('company_id', '=', company_id)]")
     qty_to_consume = fields.Float('To Consume', digits='Product Unit of Measure')
     product_uom_id = fields.Many2one('uom.uom', string='Unit of Measure')
     qty_done = fields.Float('Consumed', digits='Product Unit of Measure')
     qty_reserved = fields.Float('Reserved', digits='Product Unit of Measure')
+    company_id = fields.Many2one('res.company', compute='_compute_company_id')
 
     @api.onchange('lot_id')
     def _onchange_lot_id(self):
@@ -335,6 +344,10 @@ class MrpAbstractWorkorderLine(models.AbstractModel):
                 res['warning'] = {'title': _('Warning'), 'message': message}
         return res
 
+    def _compute_company_id(self):
+        for line in self:
+            line.company_id = line._get_production().company_id
+
     def _update_move_lines(self):
         """ update a move line to save the workorder line data"""
         self.ensure_one()

--- a/addons/mrp/models/mrp_bom.py
+++ b/addons/mrp/models/mrp_bom.py
@@ -15,6 +15,7 @@ class MrpBom(models.Model):
     _inherit = ['mail.thread']
     _rec_name = 'product_tmpl_id'
     _order = "sequence"
+    _check_company_auto = True
 
     def _get_default_product_uom_id(self):
         return self.env['uom.uom'].search([], limit=1, order='id').id
@@ -29,10 +30,12 @@ class MrpBom(models.Model):
         default='normal', required=True)
     product_tmpl_id = fields.Many2one(
         'product.template', 'Product',
-        domain="[('type', 'in', ['product', 'consu'])]", required=True)
+        check_company=True,
+        domain="[('type', 'in', ['product', 'consu']), '|', ('company_id', '=', False), ('company_id', '=', company_id)]", required=True)
     product_id = fields.Many2one(
         'product.product', 'Product Variant',
-        domain="['&', ('product_tmpl_id', '=', product_tmpl_id), ('type', 'in', ['product', 'consu'])]",
+        check_company=True,
+        domain="['&', ('product_tmpl_id', '=', product_tmpl_id), ('type', 'in', ['product', 'consu']),  '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
         help="If a product variant is defined the BOM is available only for this product.")
     bom_line_ids = fields.One2many('mrp.bom.line', 'bom_id', 'BoM Lines', copy=True)
     byproduct_ids = fields.One2many('mrp.bom.byproduct', 'bom_id', 'By-products', copy=True)
@@ -46,7 +49,7 @@ class MrpBom(models.Model):
     product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
     sequence = fields.Integer('Sequence', help="Gives the sequence order when displaying a list of bills of material.")
     routing_id = fields.Many2one(
-        'mrp.routing', 'Routing',
+        'mrp.routing', 'Routing', check_company=True,
         help="The operations for producing this BoM.  When a routing is specified, the production orders will "
              " be executed through work orders, otherwise everything is processed in the production order itself. ")
     ready_to_produce = fields.Selection([
@@ -54,14 +57,14 @@ class MrpBom(models.Model):
         ('asap', 'When components for 1st operation are available')], string='Manufacturing Readiness',
         default='asap', help="Defines when a Manufacturing Order is considered as ready to be started", required=True)
     picking_type_id = fields.Many2one(
-        'stock.picking.type', 'Operation Type', domain=[('code', '=', 'mrp_operation')],
+        'stock.picking.type', 'Operation Type', domain="[('code', '=', 'mrp_operation'), ('company_id', '=', company_id)]",
+        check_company=True,
         help=u"When a procurement has a ‘produce’ route with a operation type set, it will try to create "
              "a Manufacturing Order for that product using a BoM of the same operation type. That allows "
              "to define stock rules which trigger different manufacturing orders with different BoMs.")
     company_id = fields.Many2one(
-        'res.company', 'Company',
-        default=lambda self: self.env.company,
-        required=True)
+        'res.company', 'Company', index=True,
+        default=lambda self: self.env.company)
     consumption = fields.Selection([
         ('strict', 'Strict'),
         ('flexible', 'Flexible')],
@@ -140,7 +143,7 @@ class MrpBom(models.Model):
         if picking_type:
             domain += ['|', ('picking_type_id', '=', picking_type.id), ('picking_type_id', '=', False)]
         if company_id or self.env.context.get('company_id'):
-            domain = domain + [('company_id', '=', company_id or self.env.context.get('company_id'))]
+            domain = domain + ['|', ('company_id', '=', False), ('company_id', '=', company_id or self.env.context.get('company_id'))]
         if bom_type:
             domain += [('type', '=', bom_type)]
         # order to prioritize bom with product_id over the one without
@@ -227,13 +230,15 @@ class MrpBomLine(models.Model):
     _order = "sequence, id"
     _rec_name = "product_id"
     _description = 'Bill of Material Line'
+    _check_company_auto = True
 
     def _get_default_product_uom_id(self):
         return self.env['uom.uom'].search([], limit=1, order='id').id
 
-    product_id = fields.Many2one(
-        'product.product', 'Component', required=True)
+    product_id = fields.Many2one( 'product.product', 'Component', required=True, check_company=True)
     product_tmpl_id = fields.Many2one('product.template', 'Product Template', related='product_id.product_tmpl_id', readonly=False)
+    company_id = fields.Many2one(
+        related='bom_id.company_id', store=True, index=True, readonly=True)
     product_qty = fields.Float(
         'Quantity', default=1.0,
         digits='Product Unit of Measure', required=True)
@@ -262,7 +267,8 @@ class MrpBomLine(models.Model):
         domain="[('id', 'in', possible_bom_product_template_attribute_value_ids)]",
         help="BOM Product Variants needed to apply this line.")
     operation_id = fields.Many2one(
-        'mrp.routing.workcenter', 'Consumed in Operation',
+        'mrp.routing.workcenter', 'Consumed in Operation', check_company=True,
+        domain="[('routing_id', '=', routing_id), '|', ('company_id', '=', company_id), ('company_id', '=', False)]",
         help="The operation where the components are consumed, or the finished products created.")
     child_bom_id = fields.Many2one(
         'mrp.bom', 'Sub BoM', compute='_compute_child_bom_id')
@@ -369,21 +375,27 @@ class MrpBomLine(models.Model):
                         Use this feature to store any files, like drawings or specifications.
                     </p>'''),
             'limit': 80,
-            'context': "{'default_res_model': '%s','default_res_id': %d}" % ('product.product', self.product_id.id)
+            'context': "{'default_res_model': '%s','default_res_id': %d, 'default_company_id': %s}" % ('product.product', self.product_id.id, self.company_id.id)
         }
 
 
 class MrpByProduct(models.Model):
     _name = 'mrp.bom.byproduct'
     _description = 'Byproduct'
+    _check_company_auto = True
 
-    product_id = fields.Many2one('product.product', 'By-product', required=True)
+    product_id = fields.Many2one('product.product', 'By-product', required=True, check_company=True)
+    company_id = fields.Many2one(related='bom_id.company_id', store=True, index=True, readonly=True)
     product_qty = fields.Float(
         'Quantity',
         default=1.0, digits='Product Unit of Measure', required=True)
     product_uom_id = fields.Many2one('uom.uom', 'Unit of Measure', required=True)
     bom_id = fields.Many2one('mrp.bom', 'BoM', ondelete='cascade')
-    operation_id = fields.Many2one('mrp.routing.workcenter', 'Produced in Operation')
+    routing_id = fields.Many2one(
+        'mrp.routing', 'Routing', store=True, related='bom_id.routing_id')
+    operation_id = fields.Many2one(
+        'mrp.routing.workcenter', 'Produced in Operation', check_company=True,
+        domain="[('routing_id', '=', routing_id), '|', ('company_id', '=', company_id), ('company_id', '=', False)]")
 
     @api.onchange('product_id')
     def onchange_product_id(self):
@@ -401,3 +413,4 @@ class MrpByProduct(models.Model):
             }
             self.product_uom_id = self.product_id.uom_id.id
         return res
+

--- a/addons/mrp/models/mrp_production.py
+++ b/addons/mrp/models/mrp_production.py
@@ -20,35 +20,30 @@ class MrpProduction(models.Model):
 
     @api.model
     def _get_default_picking_type(self):
+        company_id = self.env.context.get('default_company_id', self.env.company.id)
         return self.env['stock.picking.type'].search([
             ('code', '=', 'mrp_operation'),
-            ('warehouse_id.company_id', 'in', [self.env.context.get('company_id', self.env.company.id), False])],
-            limit=1).id
+            ('warehouse_id.company_id', '=', company_id),
+        ], limit=1).id
 
     @api.model
     def _get_default_location_src_id(self):
         location = False
-        if self._context.get('default_picking_type_id'):
+        company_id = self.env.context.get('default_company_id', self.env.company.id)
+        if self.env.context.get('default_picking_type_id'):
             location = self.env['stock.picking.type'].browse(self.env.context['default_picking_type_id']).default_location_src_id
         if not location:
-            location = self.env.ref('stock.stock_location_stock', raise_if_not_found=False)
-            try:
-                location.check_access_rule('read')
-            except (AttributeError, AccessError):
-                location = self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1).lot_stock_id
+            location = self.env['stock.warehouse'].search([('company_id', '=', company_id)], limit=1).lot_stock_id
         return location and location.id or False
 
     @api.model
     def _get_default_location_dest_id(self):
         location = False
+        company_id = self.env.context.get('default_company_id', self.env.company.id)
         if self._context.get('default_picking_type_id'):
             location = self.env['stock.picking.type'].browse(self.env.context['default_picking_type_id']).default_location_dest_id
         if not location:
-            location = self.env.ref('stock.stock_location_stock', raise_if_not_found=False)
-            try:
-                location.check_access_rule('read')
-            except (AttributeError, AccessError):
-                location = self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1).lot_stock_id
+            location = self.env['stock.warehouse'].search([('company_id', '=', company_id)], limit=1).lot_stock_id
         return location and location.id or False
 
     @api.model
@@ -65,8 +60,8 @@ class MrpProduction(models.Model):
 
     product_id = fields.Many2one(
         'product.product', 'Product',
-        domain=[('type', 'in', ['product', 'consu'])],
-        readonly=True, required=True,
+        domain="[('bom_ids', '!=', False), ('bom_ids.active', '=', True), ('bom_ids.type', '=', 'normal'), ('type', 'in', ['product', 'consu']), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
+        readonly=True, required=True, check_company=True,
         states={'draft': [('readonly', False)]})
     product_tmpl_id = fields.Many2one('product.template', 'Product Template', related='product_id.product_tmpl_id')
     product_qty = fields.Float(
@@ -81,18 +76,21 @@ class MrpProduction(models.Model):
     product_uom_qty = fields.Float(string='Total Quantity', compute='_compute_product_uom_qty', store=True)
     picking_type_id = fields.Many2one(
         'stock.picking.type', 'Operation Type',
-        default=_get_default_picking_type, required=True)
+        domain="[('code', '=', 'mrp_operation'), ('company_id', '=', company_id)]",
+        default=_get_default_picking_type, required=True, check_company=True)
     location_src_id = fields.Many2one(
         'stock.location', 'Components Location',
         default=_get_default_location_src_id,
-        readonly=True,  required=True,
-        states={'draft': [('readonly', False)]},
+        readonly=True, required=True,
+        domain="[('usage','=','internal'), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
+        states={'draft': [('readonly', False)]}, check_company=True,
         help="Location where the system will look for components.")
     location_dest_id = fields.Many2one(
         'stock.location', 'Finished Products Location',
         default=_get_default_location_dest_id,
-        readonly=True,  required=True,
-        states={'draft': [('readonly', False)]},
+        readonly=True, required=True,
+        domain="[('usage','=','internal'), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
+        states={'draft': [('readonly', False)]}, check_company=True,
         help="Location where the system will stock the finished products.")
     date_planned_start = fields.Datetime(
         'Planned Date', copy=False, default=fields.Datetime.now,
@@ -116,6 +114,19 @@ class MrpProduction(models.Model):
     bom_id = fields.Many2one(
         'mrp.bom', 'Bill of Material',
         readonly=True, states={'draft': [('readonly', False)]},
+        domain="""[
+        '&',
+            '|',
+                ('company_id', '=', False),
+                ('company_id', '=', company_id),
+            '&',
+                '|',
+                    ('product_id','=',product_id),
+                    '&',
+                        ('product_tmpl_id.product_variant_ids','=',product_id),
+                        ('product_id','=',False),
+        ('type', '=', 'normal')]""",
+        check_company=True,
         help="Bill of Materials allow you to define the list of required components to make a finished product.")
     routing_id = fields.Many2one(
         'mrp.routing', 'Routing',
@@ -178,11 +189,12 @@ class MrpProduction(models.Model):
     post_visible = fields.Boolean(
         'Allowed to Post Inventory', compute='_compute_post_visible',
         help='Technical field to check when we can post')
-    user_id = fields.Many2one('res.users', 'Responsible', default=lambda self: self._uid)
+    user_id = fields.Many2one(
+        'res.users', 'Responsible', default=lambda self: self.env.user,
+        domain=lambda self: [('groups_id', 'in', self.env.ref('mrp.group_mrp_user').id)])
     company_id = fields.Many2one(
-        'res.company', 'Company',
-        default=lambda self: self.env.company,
-        required=True)
+        'res.company', 'Company', default=lambda self: self.env.company,
+        index=True, required=True)
 
     qty_produced = fields.Float(compute="_get_produced_qty", string="Quantity Produced")
     procurement_group_id = fields.Many2one(
@@ -202,7 +214,7 @@ class MrpProduction(models.Model):
                                 readonly=True, states={'draft': [('readonly', False)]}, default='1')
     is_locked = fields.Boolean('Is Locked', default=True, copy=False)
     show_final_lots = fields.Boolean('Show Final Lots', compute='_compute_show_lots')
-    production_location_id = fields.Many2one('stock.location', "Production Location", related='product_id.property_stock_production', readonly=False)
+    production_location_id = fields.Many2one('stock.location', "Production Location", related='product_id.property_stock_production', readonly=False)  # FIXME sle: probably wrong if document in another company
     picking_ids = fields.Many2many('stock.picking', compute='_compute_picking_ids', string='Picking associated to this manufacturing order')
     delivery_count = fields.Integer(string='Delivery Orders', compute='_compute_picking_ids')
     confirm_cancel = fields.Boolean(compute='_compute_confirm_cancel')
@@ -377,6 +389,17 @@ class MrpProduction(models.Model):
         ('qty_positive', 'check (product_qty > 0)', 'The quantity to produce must be positive!'),
     ]
 
+    @api.onchange('company_id')
+    def onchange_company_id(self):
+        if self.company_id:
+            if self.move_raw_ids:
+                self.move_raw_ids.update({'company_id': self.company_id})
+            if self.picking_type_id and self.picking_type_id.company_id != self.company_id:
+                self.picking_type_id = self.env['stock.picking.type'].search([
+                    ('code', '=', 'mrp_operation'),
+                    ('warehouse_id.company_id', '=', self.company_id.id),
+                ], limit=1).id
+
     @api.onchange('product_id', 'picking_type_id', 'company_id')
     def onchange_product_id(self):
         """ Finds UoM of changed product. """
@@ -507,7 +530,7 @@ class MrpProduction(models.Model):
             'date': self.date_planned_start,
             'date_expected': self.date_planned_finished,
             'picking_type_id': self.picking_type_id.id,
-            'location_id': self.product_id.property_stock_production.id,
+            'location_id': self.product_id.with_context(force_company=self.company_id.id).property_stock_production.id,
             'location_dest_id': self.location_dest_id.id,
             'company_id': self.company_id.id,
             'production_id': self.id,
@@ -563,7 +586,7 @@ class MrpProduction(models.Model):
             'product_uom_qty': quantity,
             'product_uom': bom_line.product_uom_id.id,
             'location_id': source_location.id,
-            'location_dest_id': self.product_id.property_stock_production.id,
+            'location_dest_id': self.product_id.with_context(force_company=self.company_id.id).property_stock_production.id,
             'raw_material_production_id': self.id,
             'company_id': self.company_id.id,
             'operation_id': bom_line.operation_id.id or alt_op,
@@ -623,6 +646,7 @@ class MrpProduction(models.Model):
         return 'confirmed'
 
     def action_confirm(self):
+        self._check_company()
         for production in self:
             if not production.move_raw_ids:
                 raise UserError(_("Add some materials to consume before marking this MO as to do."))
@@ -884,6 +908,7 @@ class MrpProduction(models.Model):
 
     def button_mark_done(self):
         self.ensure_one()
+        self._check_company()
         for wo in self.workorder_ids:
             if wo.time_ids.filtered(lambda x: (not x.date_end) and (x.loss_type in ('productive', 'performance'))):
                 raise UserError(_('Work order %s is still running') % wo.name)
@@ -996,3 +1021,4 @@ class MrpProduction(models.Model):
             return self.env.ref('mrp.exception_on_mo').render(values=values)
 
         self.env['stock.picking']._log_activity(_render_note_exception_quantity_mo, documents)
+

--- a/addons/mrp/models/mrp_routing.py
+++ b/addons/mrp/models/mrp_routing.py
@@ -21,8 +21,7 @@ class MrpRouting(models.Model):
         'mrp.routing.workcenter', 'routing_id', 'Operations',
         copy=True)
     company_id = fields.Many2one(
-        'res.company', 'Company',
-        default=lambda self: self.env.company)
+        'res.company', 'Company', default=lambda self: self.env.company)
 
     @api.model
     def create(self, vals):
@@ -35,9 +34,10 @@ class MrpRoutingWorkcenter(models.Model):
     _name = 'mrp.routing.workcenter'
     _description = 'Work Center Usage'
     _order = 'sequence, id'
+    _check_company_auto = True
 
     name = fields.Char('Operation', required=True)
-    workcenter_id = fields.Many2one('mrp.workcenter', 'Work Center', required=True)
+    workcenter_id = fields.Many2one('mrp.workcenter', 'Work Center', required=True, check_company=True)
     sequence = fields.Integer(
         'Sequence', default=100,
         help="Gives the sequence order when displaying a list of routing Work Centers.")
@@ -97,3 +97,4 @@ class MrpRoutingWorkcenter(models.Model):
         count_data = dict((item['operation_id'][0], item['operation_id_count']) for item in data)
         for operation in self:
             operation.workorder_count = count_data.get(operation.id, 0)
+

--- a/addons/mrp/models/mrp_unbuild.py
+++ b/addons/mrp/models/mrp_unbuild.py
@@ -12,26 +12,15 @@ class MrpUnbuild(models.Model):
     _inherit = ['mail.thread', 'mail.activity.mixin']
     _order = 'id desc'
 
-    def _get_default_location_id(self):
-        stock_location = self.env.ref('stock.stock_location_stock', raise_if_not_found=False)
-        try:
-            stock_location.check_access_rule('read')
-            return stock_location.id
-        except (AttributeError, AccessError):
-            return self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1).lot_stock_id.id
-
-    def _get_default_location_dest_id(self):
-        stock_location = self.env.ref('stock.stock_location_stock', raise_if_not_found=False)
-        try:
-            stock_location.check_access_rule('read')
-            return stock_location.id
-        except (AttributeError, AccessError):
-            return self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1).lot_stock_id.id
-
     name = fields.Char('Reference', copy=False, readonly=True, default=lambda x: _('New'))
     product_id = fields.Many2one(
-        'product.product', 'Product',
+        'product.product', 'Product', check_company=True,
+        domain="[('bom_ids', '!=', False), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
         required=True, states={'done': [('readonly', True)]})
+    company_id = fields.Many2one(
+        'res.company', 'Company',
+        default=lambda s: s.env.company,
+        required=True, index=True, states={'done': [('readonly', True)]})
     product_qty = fields.Float(
         'Quantity', default=1.0,
         required=True, states={'done': [('readonly', True)]})
@@ -40,24 +29,37 @@ class MrpUnbuild(models.Model):
         required=True, states={'done': [('readonly', True)]})
     bom_id = fields.Many2one(
         'mrp.bom', 'Bill of Material',
-        domain=[('product_tmpl_id', '=', 'product_id.product_tmpl_id')], #should be more specific
-        required=True, states={'done': [('readonly', True)]})  # Add domain
+        domain="""[
+        '|',
+            ('product_id', '=', product_id),
+            '&',
+                ('product_tmpl_id.product_variant_ids', '=', product_id),
+                ('product_id','=',False),
+        ('type', '=', 'normal'),
+        '|',
+            ('company_id', '=', company_id),
+            ('company_id', '=', False)
+        ]
+""",
+        required=True, states={'done': [('readonly', True)]}, check_company=True)
     mo_id = fields.Many2one(
         'mrp.production', 'Manufacturing Order',
-        domain="[('product_id', '=', product_id), ('state', 'in', ['done', 'cancel'])]",
-        states={'done': [('readonly', True)]})
+        domain="[('state', 'in', ['done', 'cancel']), ('company_id', '=', company_id)]",
+        states={'done': [('readonly', True)]}, check_company=True)
     lot_id = fields.Many2one(
         'stock.production.lot', 'Lot/Serial Number',
-        domain="[('product_id', '=', product_id)]",
+        domain="[('product_id', '=', product_id), ('company_id', '=', company_id)]", check_company=True,
         states={'done': [('readonly', True)]}, help="Lot/Serial Number of the product to unbuild.")
     has_tracking=fields.Selection(related='product_id.tracking', readonly=True)
     location_id = fields.Many2one(
         'stock.location', 'Source Location',
-        default=_get_default_location_id,
+        domain="[('usage','=','internal'), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
+        check_company=True,
         required=True, states={'done': [('readonly', True)]}, help="Location where the product you want to unbuild is.")
     location_dest_id = fields.Many2one(
         'stock.location', 'Destination Location',
-        default=_get_default_location_dest_id,
+        domain="[('usage','=','internal'), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
+        check_company=True,
         required=True, states={'done': [('readonly', True)]}, help="Location where you want to send the components resulting from the unbuild order.")
     consume_line_ids = fields.One2many(
         'stock.move', 'consume_unbuild_id', readonly=True,
@@ -69,19 +71,29 @@ class MrpUnbuild(models.Model):
         ('draft', 'Draft'),
         ('done', 'Done')], string='Status', default='draft', index=True)
 
+    @api.onchange('company_id')
+    def _onchange_company_id(self):
+        if self.company_id:
+            warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.company_id.id)], limit=1)
+            self.location_id = warehouse.lot_stock_id
+            self.location_dest_id = warehouse.lot_stock_id
+        else:
+            self.location_id = False
+            self.location_dest_id = False
+
     @api.onchange('mo_id')
-    def onchange_mo_id(self):
+    def _onchange_mo_id(self):
         if self.mo_id:
             self.product_id = self.mo_id.product_id.id
             self.product_qty = self.mo_id.product_qty
 
     @api.onchange('product_id')
-    def onchange_product_id(self):
+    def _onchange_product_id(self):
         if self.product_id:
-            self.bom_id = self.env['mrp.bom']._bom_find(product=self.product_id)
+            self.bom_id = self.env['mrp.bom']._bom_find(product=self.product_id, company_id=self.company_id.id)
             self.product_uom_id = self.product_id.uom_id.id
-            return {'domain': {'mo_id': [('state', '=', 'done'), ('product_id', '=', self.product_id.id)]}}
-        return {'domain': {'mo_id': [('state', '=', 'done')]}}
+            if self.company_id:
+                return {'domain': {'mo_id': [('state', '=', 'done'), ('product_id', '=', self.product_id.id), ('company_id', '=', self.company_id.id)]}}
 
     @api.constrains('product_qty')
     def _check_qty(self):
@@ -101,6 +113,7 @@ class MrpUnbuild(models.Model):
 
     def action_unbuild(self):
         self.ensure_one()
+        self._check_company()
         if self.product_id.tracking != 'none' and not self.lot_id.id:
             raise UserError(_('You should provide a lot number for the final product.'))
 
@@ -211,11 +224,12 @@ class MrpUnbuild(models.Model):
             'location_id': location_id.id,
             'warehouse_id': location_dest_id.get_warehouse().id,
             'unbuild_id': self.id,
+            'company_id': move.company_id.id,
         })
 
     def _generate_move_from_bom_line(self, product, product_uom, quantity, bom_line_id=False, byproduct_id=False):
         location_id = bom_line_id and product.property_stock_production or self.location_id
-        location_dest_id = bom_line_id and self.location_dest_id or product.property_stock_production
+        location_dest_id = bom_line_id and self.location_dest_id or product.with_context(force_company=self.company_id.id).property_stock_production
         warehouse = location_dest_id.get_warehouse()
         return self.env['stock.move'].create({
             'name': self.name,
@@ -230,6 +244,7 @@ class MrpUnbuild(models.Model):
             'location_id': location_id.id,
             'warehouse_id': warehouse.id,
             'unbuild_id': self.id,
+            'company_id': self.company_id.id,
         })
 
     def action_validate(self):
@@ -252,3 +267,4 @@ class MrpUnbuild(models.Model):
                 },
                 'target': 'new'
             }
+

--- a/addons/mrp/models/mrp_workcenter.py
+++ b/addons/mrp/models/mrp_workcenter.py
@@ -13,6 +13,7 @@ class MrpWorkcenter(models.Model):
     _description = 'Work Center'
     _order = "sequence, id"
     _inherit = ['resource.mixin']
+    _check_company_auto = True
 
     # resource
     name = fields.Char('Work Center', related='resource_id.name', store=True, readonly=False)
@@ -61,7 +62,8 @@ class MrpWorkcenter(models.Model):
         'mrp_workcenter_alternative_rel',
         'workcenter_id',
         'alternative_workcenter_id',
-        string="Alternative Workcenters",
+        domain="[('id', '!=', id), '|', ('company_id', '=', company_id), ('company_id', '=', False)]",
+        string="Alternative Workcenters", check_company=True,
         help="Alternative workcenters that can be substituted to this one in order to dispatch production"
     )
 
@@ -173,12 +175,17 @@ class MrpWorkcenter(models.Model):
         times.write({'date_end': fields.Datetime.now()})
         return {'type': 'ir.actions.client', 'tag': 'reload'}
 
-    @api.model
-    def create(self, vals):
+    @api.model_create_multi
+    def create(self, vals_list):
         # resource_type is 'human' by default. As we are not living in
         # /r/latestagecapitalism, workcenters are 'material'
-        return super(MrpWorkcenter, self.with_context({
-            'default_resource_type': 'material'})).create(vals)
+        records = super(MrpWorkcenter, self.with_context(default_resource_type='material')).create(vals_list)
+        return records
+
+    def write(self, vals):
+        if 'company_id' in vals:
+            self.resource_id.company_id = vals['company_id']
+        return super(MrpWorkcenter, self).write(vals)
 
     def action_work_order(self):
         action = self.env.ref('mrp.action_work_orders').read()[0]
@@ -225,10 +232,28 @@ class MrpWorkcenterProductivity(models.Model):
     _description = "Workcenter Productivity Log"
     _order = "id desc"
     _rec_name = "loss_id"
+    _check_company_auto = True
+
+    def _get_default_company_id(self):
+        company_id = False
+        if self.env.context.get('default_company_id'):
+            company_id = self.env.context['default_company_id']
+        if not company_id and self.env.context.get('default_workorder_id'):
+            workorder = self.env['mrp.workorder'].browse(self.env.context['default_workorder_id'])
+            company_id = workorder.company_id
+        if not company_id and self.env.context.get('default_workcenter_id'):
+            workcenter = self.env['mrp.workcenter'].browse(self.env.context['default_workcenter_id'])
+            company_id = workcenter.company_id
+        if not company_id:
+            company_id = self.env.company
+        return company_id
 
     production_id = fields.Many2one('mrp.production', string='Manufacturing Order', related='workorder_id.production_id', readonly='True')
-    workcenter_id = fields.Many2one('mrp.workcenter', "Work Center", required=True)
-    workorder_id = fields.Many2one('mrp.workorder', 'Work Order')
+    workcenter_id = fields.Many2one('mrp.workcenter', "Work Center", required=True, check_company=True)
+    company_id = fields.Many2one(
+        'res.company', required=True, index=True,
+        default=lambda self: self._get_default_company_id())
+    workorder_id = fields.Many2one('mrp.workorder', 'Work Order', check_company=True)
     user_id = fields.Many2one(
         'res.users', "User",
         default=lambda self: self.env.uid)
@@ -260,3 +285,4 @@ class MrpWorkcenterProductivity(models.Model):
     def button_block(self):
         self.ensure_one()
         self.workcenter_id.order_ids.end_all()
+

--- a/addons/mrp/models/mrp_workorder.py
+++ b/addons/mrp/models/mrp_workorder.py
@@ -19,9 +19,14 @@ class MrpWorkorder(models.Model):
     name = fields.Char(
         'Work Order', required=True,
         states={'done': [('readonly', True)], 'cancel': [('readonly', True)]})
+    company_id = fields.Many2one(
+        'res.company', 'Company',
+        default=lambda self: self.env.company,
+        required=True, index=True, readonly=True)
     workcenter_id = fields.Many2one(
         'mrp.workcenter', 'Work Center', required=True,
-        states={'done': [('readonly', True)], 'cancel': [('readonly', True)]})
+        states={'done': [('readonly', True)], 'cancel': [('readonly', True)]},
+        check_company=True)
     working_state = fields.Selection(
         'Workcenter Status', related='workcenter_id.working_state', readonly=False,
         help='Technical: used in views only')
@@ -51,7 +56,8 @@ class MrpWorkorder(models.Model):
         default='pending')
     leave_id = fields.Many2one(
         'resource.calendar.leaves',
-        help='Slot into workcenter calendar once planned')
+        help='Slot into workcenter calendar once planned',
+        check_company=True)
     date_planned_start = fields.Datetime(
         'Scheduled Date Start',
         compute='_compute_dates_planned',
@@ -87,7 +93,9 @@ class MrpWorkorder(models.Model):
     progress = fields.Float('Progress Done (%)', digits=(16, 2), compute='_compute_progress')
 
     operation_id = fields.Many2one(
-        'mrp.routing.workcenter', 'Operation')  # Should be used differently as BoM can change in the meantime
+        'mrp.routing.workcenter', 'Operation',
+        check_company=True)
+        # Should be used differently as BoM can change in the meantime
     worksheet = fields.Binary(
         'Worksheet', related='operation_id.worksheet', readonly=True)
     worksheet_type = fields.Selection(
@@ -104,8 +112,8 @@ class MrpWorkorder(models.Model):
         'stock.move.line', 'workorder_id', 'Moves to Track',
         help="Inventory moves for which you must scan a lot number at this work order")
     finished_lot_id = fields.Many2one(
-        'stock.production.lot', 'Lot/Serial Number', domain="[('product_id', '=', product_id)]",
-        states={'done': [('readonly', True)], 'cancel': [('readonly', True)]})
+        'stock.production.lot', 'Lot/Serial Number', domain="[('id', 'in', allowed_lots_domain)]",
+        states={'done': [('readonly', True)], 'cancel': [('readonly', True)]}, check_company=True)
     time_ids = fields.One2many(
         'mrp.workcenter.productivity', 'workorder_id')
     is_user_working = fields.Boolean(
@@ -114,7 +122,7 @@ class MrpWorkorder(models.Model):
     working_user_ids = fields.One2many('res.users', string='Working user on this work order.', compute='_compute_working_users')
     last_working_user_id = fields.One2many('res.users', string='Last user that worked on this work order.', compute='_compute_working_users')
 
-    next_work_order_id = fields.Many2one('mrp.workorder', "Next Work Order")
+    next_work_order_id = fields.Many2one('mrp.workorder', "Next Work Order", check_company=True)
     scrap_ids = fields.One2many('stock.scrap', 'workorder_id')
     scrap_count = fields.Integer(compute='_compute_scrap_move_count', string='Scrap Move')
     production_date = fields.Datetime('Production Date', related='production_id.date_planned_start', store=True, readonly=False)
@@ -194,7 +202,10 @@ class MrpWorkorder(models.Model):
             qty_produced = sum([max(qty_dones) for qty_dones in qties_done_per_lot.values()])
             if float_compare(qty_produced, qty_to_produce, precision_rounding=rounding) < 0:
                 # If we haven't produced enough, all lots are available
-                allowed_lot_ids = self.env['stock.production.lot'].search([('product_id', '=', production.product_id.id)])
+                allowed_lot_ids = self.env['stock.production.lot'].search([
+                    ('product_id', '=', production.product_id.id),
+                    ('company_id', '=', production.company_id.id),
+                ])
             else:
                 # If we produced enough, only the already produced lots are available
                 allowed_lot_ids = self.env['stock.production.lot'].browse(qties_done_per_lot.keys())
@@ -373,6 +384,7 @@ class MrpWorkorder(models.Model):
             return True
 
         self.ensure_one()
+        self._check_company()
         if float_compare(self.qty_producing, 0, precision_rounding=self.product_uom_id.rounding) <= 0:
             raise UserError(_('Please set the quantity you are currently producing. It should be different from zero.'))
 
@@ -507,7 +519,8 @@ class MrpWorkorder(models.Model):
             'description': _('Time Tracking: ')+self.env.user.name,
             'loss_id': loss_id[0].id,
             'date_start': datetime.now(),
-            'user_id': self.env.user.id
+            'user_id': self.env.user.id,  # FIXME sle: can be inconsistent with company_id
+            'company_id': self.company_id.id,
         })
         return self.write({'state': 'progress',
                     'date_start': datetime.now(),

--- a/addons/mrp/models/res_company.py
+++ b/addons/mrp/models/res_company.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import fields, models
+from odoo import api, fields, models
 
 
 class Company(models.Model):
@@ -10,3 +10,30 @@ class Company(models.Model):
     manufacturing_lead = fields.Float(
         'Manufacturing Lead Time', default=0.0, required=True,
         help="Security days for each manufacturing operation.")
+
+    def _create_unbuild_sequence(self):
+        unbuild_vals = []
+        for company in self:
+            unbuild_vals.append({
+                'name': 'Unbuild',
+                'code': 'mrp.unbuild',
+                'company_id': company.id,
+                'prefix': 'UB/',
+                'padding': 5,
+                'number_next': 1,
+                'number_increment': 1
+            })
+        if unbuild_vals:
+            self.env['ir.sequence'].create(unbuild_vals)
+
+    @api.model
+    def create_missing_unbuild_sequences(self):
+        company_ids  = self.env['res.company'].search([])
+        company_has_unbuild_seq = self.env['ir.sequence'].search([('code', '=', 'mrp.unbuild')]).mapped('company_id')
+        company_todo_sequence = company_ids - company_has_unbuild_seq
+        company_todo_sequence._create_unbuild_sequence()
+
+    def _create_per_company_sequences(self):
+        super(Company, self)._create_per_company_sequences()
+        self._create_unbuild_sequence()
+

--- a/addons/mrp/models/stock_move.py
+++ b/addons/mrp/models/stock_move.py
@@ -9,11 +9,11 @@ from odoo.tools import float_compare, float_round
 class StockMoveLine(models.Model):
     _inherit = 'stock.move.line'
 
-    workorder_id = fields.Many2one('mrp.workorder', 'Work Order')
-    production_id = fields.Many2one('mrp.production', 'Production Order')
-    lot_produced_ids = fields.Many2many('stock.production.lot', string='Finished Lot/Serial Number')
+    workorder_id = fields.Many2one('mrp.workorder', 'Work Order', check_company=True)
+    production_id = fields.Many2one('mrp.production', 'Production Order', check_company=True)
+    lot_produced_ids = fields.Many2many('stock.production.lot', string='Finished Lot/Serial Number', check_company=True)
     lot_produced_qty = fields.Float(
-        'Quantity Finished Product', digits='Product Unit of Measure',
+        'Quantity Finished Product', digits='Product Unit of Measure', check_company=True,
         help="Informative, not used in matching")
     done_move = fields.Boolean('Move Done', related='move_id.is_done', readonly=False, store=True)  # TDE FIXME: naming
 
@@ -53,23 +53,23 @@ class StockMoveLine(models.Model):
 class StockMove(models.Model):
     _inherit = 'stock.move'
 
-    created_production_id = fields.Many2one('mrp.production', 'Created Production Order')
+    created_production_id = fields.Many2one('mrp.production', 'Created Production Order', check_company=True)
     production_id = fields.Many2one(
-        'mrp.production', 'Production Order for finished products')
+        'mrp.production', 'Production Order for finished products', check_company=True)
     raw_material_production_id = fields.Many2one(
-        'mrp.production', 'Production Order for components')
+        'mrp.production', 'Production Order for components', check_company=True)
     unbuild_id = fields.Many2one(
-        'mrp.unbuild', 'Disassembly Order')
+        'mrp.unbuild', 'Disassembly Order', check_company=True)
     consume_unbuild_id = fields.Many2one(
-        'mrp.unbuild', 'Consumed Disassembly Order')
+        'mrp.unbuild', 'Consumed Disassembly Order', check_company=True)
     operation_id = fields.Many2one(
-        'mrp.routing.workcenter', 'Operation To Consume')  # TDE FIXME: naming
+        'mrp.routing.workcenter', 'Operation To Consume', check_company=True)  # TDE FIXME: naming
     workorder_id = fields.Many2one(
-        'mrp.workorder', 'Work Order To Consume')
+        'mrp.workorder', 'Work Order To Consume', check_company=True)
     # Quantities to process, in normalized UoMs
-    bom_line_id = fields.Many2one('mrp.bom.line', 'BoM Line')
+    bom_line_id = fields.Many2one('mrp.bom.line', 'BoM Line', check_company=True)
     byproduct_id = fields.Many2one(
-        'mrp.bom.byproduct', 'By-products',
+        'mrp.bom.byproduct', 'By-products', check_company=True,
         help="By-product line that generated the move in a manufacturing order")
     unit_factor = fields.Float('Unit Factor', default=1)
     is_done = fields.Boolean(

--- a/addons/mrp/models/stock_scrap.py
+++ b/addons/mrp/models/stock_scrap.py
@@ -9,11 +9,11 @@ class StockScrap(models.Model):
 
     production_id = fields.Many2one(
         'mrp.production', 'Manufacturing Order',
-        states={'done': [('readonly', True)]})
+        states={'done': [('readonly', True)]}, check_company=True)
     workorder_id = fields.Many2one(
         'mrp.workorder', 'Work Order',
         states={'done': [('readonly', True)]},
-        help='Not to restrict or prefer quants, but informative.')
+        help='Not to restrict or prefer quants, but informative.', check_company=True)
 
     @api.onchange('workorder_id')
     def _onchange_workorder_id(self):
@@ -36,4 +36,4 @@ class StockScrap(models.Model):
         return vals
 
     def _get_origin_moves(self):
-        return super(StockScrap, self)._get_origin_moves() or self.production_id and self.production_id.move_raw_ids.filtered(lambda x: x.product_id == self.product_id)
\ No newline at end of file
+        return super(StockScrap, self)._get_origin_moves() or self.production_id and self.production_id.move_raw_ids.filtered(lambda x: x.product_id == self.product_id)

--- a/addons/mrp/models/stock_warehouse.py
+++ b/addons/mrp/models/stock_warehouse.py
@@ -21,10 +21,10 @@ class StockWarehouse(models.Model):
         'stock.rule', 'Stock After Manufacturing Rule')
     manu_type_id = fields.Many2one(
         'stock.picking.type', 'Manufacturing Operation Type',
-        domain=[('code', '=', 'mrp_operation')])
+        domain="[('code', '=', 'mrp_operation'), ('company_id', '=', company_id)]", check_company=True)
 
-    pbm_type_id = fields.Many2one('stock.picking.type', 'Picking Before Manufacturing Operation Type')
-    sam_type_id = fields.Many2one('stock.picking.type', 'Stock After Manufacturing Operation Type')
+    pbm_type_id = fields.Many2one('stock.picking.type', 'Picking Before Manufacturing Operation Type', check_company=True)
+    sam_type_id = fields.Many2one('stock.picking.type', 'Stock After Manufacturing Operation Type', check_company=True)
 
     manufacture_steps = fields.Selection([
         ('mrp_one_step', 'Manufacture (1 step)'),
@@ -38,8 +38,8 @@ class StockWarehouse(models.Model):
 
     pbm_route_id = fields.Many2one('stock.location.route', 'Picking Before Manufacturing Route', ondelete='restrict')
 
-    pbm_loc_id = fields.Many2one('stock.location', 'Picking before Manufacturing Location')
-    sam_loc_id = fields.Many2one('stock.location', 'Stock after Manufacturing Location')
+    pbm_loc_id = fields.Many2one('stock.location', 'Picking before Manufacturing Location', check_company=True)
+    sam_loc_id = fields.Many2one('stock.location', 'Stock after Manufacturing Location', check_company=True)
 
     def get_rules_dict(self):
         result = super(StockWarehouse, self).get_rules_dict()
@@ -210,9 +210,9 @@ class StockWarehouse(models.Model):
     def _get_sequence_values(self):
         values = super(StockWarehouse, self)._get_sequence_values()
         values.update({
-            'pbm_type_id': {'name': self.name + ' ' + _('Sequence picking before manufacturing'), 'prefix': self.code + '/PC/', 'padding': 5},
-            'sam_type_id': {'name': self.name + ' ' + _('Sequence stock after manufacturing'), 'prefix': self.code + '/SFP/', 'padding': 5},
-            'manu_type_id': {'name': self.name + ' ' + _('Sequence production'), 'prefix': self.code + '/MO/', 'padding': 5},
+            'pbm_type_id': {'name': self.name + ' ' + _('Sequence picking before manufacturing'), 'prefix': self.code + '/PC/', 'padding': 5, 'company_id': self.company_id.id},
+            'sam_type_id': {'name': self.name + ' ' + _('Sequence stock after manufacturing'), 'prefix': self.code + '/SFP/', 'padding': 5, 'company_id': self.company_id.id},
+            'manu_type_id': {'name': self.name + ' ' + _('Sequence production'), 'prefix': self.code + '/MO/', 'padding': 5, 'company_id': self.company_id.id},
         })
         return values
 
@@ -228,6 +228,7 @@ class StockWarehouse(models.Model):
                 'default_location_dest_id': self.pbm_loc_id.id,
                 'sequence': next_sequence + 1,
                 'sequence_code': 'PC',
+                'company_id': self.company_id.id,
             },
             'sam_type_id': {
                 'name': _('Store Finished Product'),
@@ -238,6 +239,7 @@ class StockWarehouse(models.Model):
                 'default_location_dest_id': self.lot_stock_id.id,
                 'sequence': next_sequence + 3,
                 'sequence_code': 'SFP',
+                'company_id': self.company_id.id,
             },
             'manu_type_id': {
                 'name': _('Manufacturing'),
@@ -246,6 +248,7 @@ class StockWarehouse(models.Model):
                 'use_existing_lots': True,
                 'sequence': next_sequence + 2,
                 'sequence_code': 'MO',
+                'company_id': self.company_id.id,
             },
         })
         return data, max_sequence + 4
