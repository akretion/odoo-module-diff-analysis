PR: https://github.com/odoo/odoo/pull/97279

From: 3363e55cac2a121c29842a0b2463f940bdd866a4
From: Fabien Pinckaers
Date: 2022-08-01 22:26:53

Structural Changes: 51
Total Changes: 187

[IMP] cleanup of help messages in all modules

This commit aims at removing unuseful help message to:
1/ reduce translators work, to focus on more useful translations
2/ not sending unuseful information in load_views
3/ reduce help message to useful messages, so that we can mark
   fields having a tooltip in the future UI.
4/ some cleanup of existing messages too

The main use cases:
- REMOVED: help redundant with the field name, providing no extra info
- MOVED TO COMMENT: technical help messages, that should not be in UX

closes odoo/odoo#97279

Signed-off-by: Fabien Pinckaers <fp@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_account.py
+++ b/addons/account/models/account_account.py
@@ -33,8 +33,8 @@ class AccountAccount(models.Model):
                 raise ValidationError(_('You cannot have more than one account with "Current Year Earnings" as type. (accounts: %s)', [a.code for a in account_unaffected_earnings]))
 
     name = fields.Char(string="Account Name", required=True, index='trigram', tracking=True)
-    currency_id = fields.Many2one('res.currency', string='Account Currency',
-        help="Forces all moves for this account to have this account currency.", tracking=True)
+    currency_id = fields.Many2one('res.currency', string='Account Currency', tracking=True,
+        help="Forces all journal items in this account to have a specific currency (i.e. bank journals). If no currency is set, entries can use any currency.")
     code = fields.Char(size=64, required=True, tracking=True)
     deprecated = fields.Boolean(default=False, tracking=True)
     used = fields.Boolean(compute='_compute_used', search='_search_used')
@@ -96,9 +96,9 @@ class AccountAccount(models.Model):
     root_id = fields.Many2one('account.root', compute='_compute_account_root', store=True)
     allowed_journal_ids = fields.Many2many('account.journal', string="Allowed Journals", help="Define in which journals this account can be used. If empty, can be used in all journals.")
 
-    opening_debit = fields.Monetary(string="Opening Debit", compute='_compute_opening_debit_credit', inverse='_set_opening_debit', help="Opening debit value for this account.")
-    opening_credit = fields.Monetary(string="Opening Credit", compute='_compute_opening_debit_credit', inverse='_set_opening_credit', help="Opening credit value for this account.")
-    opening_balance = fields.Monetary(string="Opening Balance", compute='_compute_opening_debit_credit', help="Opening balance value for this account.")
+    opening_debit = fields.Monetary(string="Opening Debit", compute='_compute_opening_debit_credit', inverse='_set_opening_debit')
+    opening_credit = fields.Monetary(string="Opening Credit", compute='_compute_opening_debit_credit', inverse='_set_opening_credit')
+    opening_balance = fields.Monetary(string="Opening Balance", compute='_compute_opening_debit_credit')
 
     is_off_balance = fields.Boolean(compute='_compute_is_off_balance', default=False, store=True, readonly=True)
 

--- a/addons/account/models/account_bank_statement.py
+++ b/addons/account/models/account_bank_statement.py
@@ -22,7 +22,7 @@ class AccountCashboxLine(models.Model):
             cashbox_line.subtotal = cashbox_line.coin_value * cashbox_line.number
 
     coin_value = fields.Float(string='Coin/Bill Value', required=True, digits=0)
-    number = fields.Integer(string='#Coins/Bills', help='Opening Unit Numbers')
+    number = fields.Integer(string='Number of Coins/Bills')
     subtotal = fields.Float(compute='_sub_total', string='Subtotal', digits=0, readonly=True)
     cashbox_id = fields.Many2one('account.bank.statement.cashbox', string="Cashbox")
     currency_id = fields.Many2one('res.currency', related='cashbox_id.currency_id')
@@ -223,7 +223,7 @@ class AccountBankStatement(models.Model):
              "- Validated: All lines are reconciled. There is nothing left to process.")
     currency_id = fields.Many2one('res.currency', compute='_compute_currency', string="Currency")
     journal_id = fields.Many2one('account.journal', string='Journal', required=True, states={'confirm': [('readonly', True)]}, default=_default_journal, check_company=True)
-    journal_type = fields.Selection(related='journal_id.type', help="Technical field used for usability purposes")
+    journal_type = fields.Selection(related='journal_id.type') # used for usability purposes
     company_id = fields.Many2one('res.company', related='journal_id.company_id', string='Company', store=True, readonly=True)
 
     total_entry_encoding = fields.Monetary('Transactions Subtotal', compute='_end_balance', store=True, help="Total of transaction lines.")
@@ -234,16 +234,14 @@ class AccountBankStatement(models.Model):
     move_line_ids = fields.One2many('account.move.line', 'statement_id', string='Entry lines', states={'confirm': [('readonly', True)]})
     move_line_count = fields.Integer(compute="_get_move_line_count")
 
-    all_lines_reconciled = fields.Boolean(compute='_compute_all_lines_reconciled',
-        help="Technical field indicating if all statement lines are fully reconciled.")
+    all_lines_reconciled = fields.Boolean(compute='_compute_all_lines_reconciled') # are all statement lines are fully reconciled?
     user_id = fields.Many2one('res.users', string='Responsible', required=False, default=lambda self: self.env.user)
     cashbox_start_id = fields.Many2one('account.bank.statement.cashbox', string="Starting Cashbox")
     cashbox_end_id = fields.Many2one('account.bank.statement.cashbox', string="Ending Cashbox")
     is_difference_zero = fields.Boolean(compute='_is_difference_zero', string='Is zero', help="Check if difference is zero.")
-    previous_statement_id = fields.Many2one('account.bank.statement', help='technical field to compute starting balance correctly', compute='_get_previous_statement', store=True)
+    previous_statement_id = fields.Many2one('account.bank.statement', compute='_get_previous_statement', store=True)
     is_valid_balance_start = fields.Boolean(string="Is Valid Balance Start", store=True,
-        compute="_compute_is_valid_balance_start",
-        help="Technical field to display a warning message in case starting balance is different than previous ending balance")
+        compute="_compute_is_valid_balance_start") # used to display a warning message if starting balance is different than previous ending balance
     country_code = fields.Char(related='company_id.account_fiscal_country_id.code')
 
     def write(self, values):

--- a/addons/account/models/account_journal.py
+++ b/addons/account/models/account_journal.py
@@ -196,9 +196,9 @@ class AccountJournal(models.Model):
         compute='_compute_available_payment_method_ids'
     )
 
+    # used to hide or show payment method options if needed
     selected_payment_method_codes = fields.Char(
         compute='_compute_selected_payment_method_codes',
-        help='Technical field used to hide or show payment method options if needed.'
     )
 
     _sql_constraints = [

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -159,7 +159,7 @@ class AccountMove(models.Model):
             ('cancel', 'Cancelled'),
         ], string='Status', required=True, readonly=True, copy=False, tracking=True,
         default='draft')
-    posted_before = fields.Boolean(help="Technical field for knowing if the move has been posted before", copy=False)
+    posted_before = fields.Boolean(copy=False)
     move_type = fields.Selection(selection=[
             ('entry', 'Journal Entry'),
             ('out_invoice', 'Customer Invoice'),
@@ -171,8 +171,7 @@ class AccountMove(models.Model):
         ], string='Type', required=True, store=True, index=True, readonly=True, tracking=True,
         default="entry", change_default=True)
     type_name = fields.Char('Type Name', compute='_compute_type_name')
-    is_storno = fields.Boolean(compute='_compute_is_storno', store=True, copy=False, readonly=False,
-                               help='Utility field to express whether the journal entry is subject to storno accounting. That is when the company uses storno and the journal entry is a refund or a reversal.')
+    is_storno = fields.Boolean(compute='_compute_is_storno', store=True, copy=False, readonly=False)
     to_check = fields.Boolean(string='To Check', default=False, tracking=True,
         help='If this checkbox is ticked, it means that the user was not sure of all the related information at the time of the creation of the move and that the move needs to be checked again.')
     journal_id = fields.Many2one('account.journal', string='Journal', required=True, readonly=True,
@@ -198,15 +197,15 @@ class AccountMove(models.Model):
     commercial_partner_id = fields.Many2one('res.partner', string='Commercial Entity', store=True, readonly=True,
         compute='_compute_commercial_partner_id', ondelete='restrict')
     country_code = fields.Char(related='company_id.account_fiscal_country_id.code', readonly=True)
-    user_id = fields.Many2one(string='User', related='invoice_user_id',
-        help='Technical field used to fit the generic behavior in mail templates.')
+
+    # Technical field used to fit the generic behavior in mail templates.
+    user_id = fields.Many2one(string='User', related='invoice_user_id')
     partner_shipping_id = fields.Many2one(
         comodel_name='res.partner',
         string='Delivery Address',
         readonly=False,
         store=True,
         domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]",
-        help="Delivery address for current invoice.",
         compute='_compute_partner_shipping_id',
     )
     is_move_sent = fields.Boolean(
@@ -228,12 +227,13 @@ class AccountMove(models.Model):
     statement_line_id = fields.Many2one(
         comodel_name='account.bank.statement.line',
         string="Statement Line", copy=False, check_company=True)
+
+    # used to open the linked bank statement from the edit button in a group by
+    # view, or via the smart button on journal entries.
     statement_id = fields.Many2one(
         related='statement_line_id.statement_id',
         copy=False,
-        readonly=True,
-        help="Technical field used to open the linked bank statement from the edit button in a group by view,"
-             " or via the smart button on journal entries.")
+        readonly=True)
 
     # === Amount fields ===
     amount_untaxed = fields.Monetary(string='Untaxed Amount', store=True, readonly=True, tracking=True,
@@ -264,29 +264,30 @@ class AccountMove(models.Model):
         readonly=True, copy=False, tracking=True, compute='_compute_amount')
 
     # ==== Cash basis feature fields ====
+
+    # used to keep track of the tax cash basis reconciliation. This is needed
+    # when cancelling the source: it will post the inverse journal entry to
+    # cancel that part too.
     tax_cash_basis_rec_id = fields.Many2one(
         'account.partial.reconcile',
-        string='Tax Cash Basis Entry of',
-        help="Technical field used to keep track of the tax cash basis reconciliation. "
-             "This is needed when cancelling the source: it will post the inverse journal entry to cancel that part too.")
+        string='Tax Cash Basis Entry of')
+
     tax_cash_basis_origin_move_id = fields.Many2one(
         comodel_name='account.move',
         index='btree_not_null',
         string="Cash Basis Origin",
-        readonly=1,
-        help="The journal entry from which this tax cash basis journal entry has been created.")
+        readonly=1)
     tax_cash_basis_created_move_ids = fields.One2many(
         string="Cash Basis Entries",
         comodel_name='account.move',
         inverse_name='tax_cash_basis_origin_move_id',
-        help="The cash basis entries created from the taxes on this entry, when reconciling its lines."
     )
+
+    # used by cash basis taxes, telling the lines of the move are always
+    # exigible. This happens if the move contains no payable or receivable line.
     always_tax_exigible = fields.Boolean(
         compute='_compute_always_tax_exigible',
-        store=True,
-        help="Technical field used by cash basis taxes, telling the lines of the move are always exigible. "
-             "This happens if the move contains no payable or receivable line.")
-
+        store=True)
     # ==== Auto-post feature fields ====
     auto_post = fields.Selection(
         string='Auto-post',
@@ -386,16 +387,17 @@ class AccountMove(models.Model):
              'Odoo will automatically create one invoice line with default values to match it.')
 
     # ==== Display purpose fields ====
-    invoice_filter_type_domain = fields.Char(compute='_compute_invoice_filter_type_domain',
-        help="Technical field used to have a dynamic domain on journal / taxes in the form view.")
+
+    # used to have a dynamic domain on journal / taxes in the form view.
+    invoice_filter_type_domain = fields.Char(compute='_compute_invoice_filter_type_domain')
     bank_partner_id = fields.Many2one('res.partner', help='Technical field to get the domain on the bank', compute='_compute_bank_partner_id')
-    tax_lock_date_message = fields.Char(
-        compute='_compute_tax_lock_date_message',
-        help="Technical field used to display a message when the invoice's accounting date is prior of the tax lock date.")
+    # used to display a message when the invoice's accounting date is prior of the tax lock date
+    tax_lock_date_message = fields.Char(compute='_compute_tax_lock_date_message')
+    # used for tracking the status of the currency
     display_inactive_currency_warning = fields.Boolean(
-        compute="_compute_display_inactive_currency_warning",
-        help="Technical field used for tracking the status of the currency")
-    tax_country_id = fields.Many2one(comodel_name='res.country', compute='_compute_tax_country_id', help="Technical field to filter the available taxes depending on the fiscal country and fiscal position.")
+        compute="_compute_display_inactive_currency_warning")
+    # used to filter the available taxes depending on the fiscal country and fiscal position.
+    tax_country_id = fields.Many2one(comodel_name='res.country', compute='_compute_tax_country_id')
     tax_country_code = fields.Char(compute="_compute_tax_country_code")
     # Technical field to hide Reconciled Entries stat button
     has_reconciled_entries = fields.Boolean(compute="_compute_has_reconciled_entries")
@@ -3686,8 +3688,7 @@ class AccountMoveLine(models.Model):
     # ==== Business fields ====
     move_id = fields.Many2one('account.move', string='Journal Entry',
         index=True, required=True, readonly=True, auto_join=True, ondelete="cascade",
-        check_company=True,
-        help="The move of this entry line.")
+        check_company=True)
     move_name = fields.Char(string='Number', related='move_id.name', store=True, index='btree')
     date = fields.Date(related='move_id.date', store=True, readonly=True, index=True, copy=False, group_operator='min')
     ref = fields.Char(related='move_id.ref', store=True, copy=False, index='trigram', readonly=True)
@@ -3695,13 +3696,11 @@ class AccountMoveLine(models.Model):
     journal_id = fields.Many2one(related='move_id.journal_id', store=True, index=True, copy=False)
     company_id = fields.Many2one(related='move_id.company_id', store=True, readonly=True)
     company_currency_id = fields.Many2one(related='company_id.currency_id', string='Company Currency',
-        readonly=True, store=True,
-        help='Utility field to express amount currency')
+        readonly=True, store=True)
     is_same_currency = fields.Boolean(compute='_compute_same_currency')
     is_storno = fields.Boolean(
         related='move_id.is_storno',
-        string='Company Storno Accounting',
-        help='Utility field to express whether the journal item is subject to storno accounting')
+        string='Company Storno Accounting')
     account_id = fields.Many2one('account.account', string='Account',
         index=True, ondelete="cascade",
         domain="[('deprecated', '=', False), ('company_id', '=', 'company_id'),('is_off_balance', '=', False)]",
@@ -3722,8 +3721,7 @@ class AccountMoveLine(models.Model):
     credit = fields.Monetary(string='Credit', default=0.0, currency_field='company_currency_id')
     balance = fields.Monetary(string='Balance', store=True,
         currency_field='company_currency_id',
-        compute='_compute_balance',
-        help="Technical field holding the debit - credit in order to open meaningful graph views from reports")
+        compute='_compute_balance')
     cumulated_balance = fields.Monetary(string='Cumulated Balance', store=False,
         currency_field='company_currency_id',
         compute='_compute_cumulated_balance',
@@ -3763,19 +3761,16 @@ class AccountMoveLine(models.Model):
         comodel_name='account.tax',
         string="Taxes",
         context={'active_test': False},
-        check_company=True,
-        help="Taxes that apply on the base amount")
+        check_company=True)
     group_tax_id = fields.Many2one(
         comodel_name='account.tax',
         string="Originator Group of Taxes",
-        index='btree_not_null',
-        help="The group of taxes that generated this tax line",
+        index='btree_not_null'
     )
     tax_line_id = fields.Many2one('account.tax', string='Originator Tax', ondelete='restrict', store=True,
         compute='_compute_tax_line_id', help="Indicates that this journal item is a tax line")
     tax_group_id = fields.Many2one(related='tax_line_id.tax_group_id', string='Originator tax group',
-        readonly=True, store=True,
-        help='technical field for widget tax-group-custom-field')
+        readonly=True, store=True) # used in the widget tax-group-custom-field
     tax_base_amount = fields.Monetary(string="Base Amount", store=True, readonly=True,
         currency_field='company_currency_id')
     tax_repartition_line_id = fields.Many2one(comodel_name='account.tax.repartition.line',
@@ -3786,9 +3781,10 @@ class AccountMoveLine(models.Model):
         help="Tags assigned to this line by the tax creating it, if any. It determines its impact on financial reports.", tracking=True)
     tax_audit = fields.Char(string="Tax Audit String", compute="_compute_tax_audit", store=True,
         help="Computed field, listing the tax grids impacted by this line, and the amount it applies to each of them.")
-    tax_tag_invert = fields.Boolean(string="Invert Tags", compute='_compute_tax_tag_invert', store=True, readonly=False,
-        help="Technical field. True if the balance of this move line needs to be "
-             "inverted when computing its total for each tag (for sales invoices, for example).")
+
+    # Technical field. True if the balance of this move line needs to be
+    # inverted when computing its total for each tag (for sales invoices, for # example)
+    tax_tag_invert = fields.Boolean(string="Invert Tags", compute='_compute_tax_tag_invert', store=True, readonly=False)
 
     # ==== Reconciliation fields ====
     amount_residual = fields.Monetary(string='Residual Amount', store=True,
@@ -3814,14 +3810,18 @@ class AccountMoveLine(models.Model):
         compute="_compute_analytic_tag_ids", store=True, readonly=False, check_company=True, copy=True)
 
     # ==== Onchange / display purpose fields ====
-    recompute_tax_line = fields.Boolean(store=False, readonly=True,
-        help="Technical field used to know on which lines the taxes must be recomputed.")
+
+    # Technical field used to know on which lines the taxes must be recomputed.
+    recompute_tax_line = fields.Boolean(store=False, readonly=True)
     display_type = fields.Selection([
         ('line_section', 'Section'),
         ('line_note', 'Note'),
-    ], default=False, help="Technical field for UX purpose.")
-    is_rounding_line = fields.Boolean(help="Technical field used to retrieve the cash rounding line.")
-    exclude_from_invoice_tab = fields.Boolean(help="Technical field used to exclude some lines from the invoice_line_ids tab in the form view.")
+    ], default=False)
+
+    # used to retrieve the cash rounding line.
+    is_rounding_line = fields.Boolean()
+    # used to exclude some lines from the invoice_line_ids tab in the form view.
+    exclude_from_invoice_tab = fields.Boolean()
 
     _sql_constraints = [
         (

--- a/addons/account/models/account_partial_reconcile.py
+++ b/addons/account/models/account_partial_reconcile.py
@@ -57,9 +57,8 @@ class AccountPartialReconcile(models.Model):
         related='debit_move_id.company_id')
     max_date = fields.Date(
         string="Max Date of Matched Lines", store=True,
-        compute='_compute_max_date',
-        help="Technical field used to determine at which date this reconciliation needs to be shown on the "
-             "aged receivable/payable reports.")
+        compute='_compute_max_date')
+        # used to determine at which date this reconciliation needs to be shown on the aged receivable/payable reports
 
     # -------------------------------------------------------------------------
     # CONSTRAINT METHODS

--- a/addons/account/models/account_payment.py
+++ b/addons/account/models/account_payment.py
@@ -28,11 +28,9 @@ class AccountPayment(models.Model):
         check_company=True)
 
     is_reconciled = fields.Boolean(string="Is Reconciled", store=True,
-        compute='_compute_reconciliation_status',
-        help="Technical field indicating if the payment is already reconciled.")
+        compute='_compute_reconciliation_status')
     is_matched = fields.Boolean(string="Is Matched With a Bank Statement", store=True,
-        compute='_compute_reconciliation_status',
-        help="Technical field indicating if the payment has been matched with a statement line.")
+        compute='_compute_reconciliation_status')
     available_partner_bank_ids = fields.Many2many(
         comodel_name='res.partner.bank',
         compute='_compute_available_partner_bank_ids',
@@ -46,9 +44,8 @@ class AccountPayment(models.Model):
         readonly=False, store=True,
         tracking=True,
         compute="_compute_is_internal_transfer")
-    qr_code = fields.Char(string="QR Code",
-        compute="_compute_qr_code",
-        help="QR-code report URL to use to generate the QR-code to scan with a banking app to perform this payment.")
+    qr_code = fields.Char(string="QR Code URL",
+        compute="_compute_qr_code")
     paired_internal_transfer_payment_id = fields.Many2one('account.payment',
         help="When an internal transfer is posted, a paired payment is created. "
         "They are cross referenced through this field", copy=False)
@@ -126,10 +123,11 @@ class AccountPayment(models.Model):
         help="Invoices whose journal items have been reconciled with these payments.")
     reconciled_invoices_count = fields.Integer(string="# Reconciled Invoices",
         compute="_compute_stat_buttons_from_reconciliation")
+
+    # used to determine label 'invoice' or 'credit note' in view
     reconciled_invoices_type = fields.Selection(
         [('credit_note', 'Credit Note'), ('invoice', 'Invoice')],
-        compute='_compute_stat_buttons_from_reconciliation',
-        help="Technical field used to determine label 'invoice' or 'credit note' in view")
+        compute='_compute_stat_buttons_from_reconciliation')
     reconciled_bill_ids = fields.Many2many('account.move', string="Reconciled Bills",
         compute='_compute_stat_buttons_from_reconciliation',
         help="Invoices whose journal items have been reconciled with these payments.")
@@ -143,14 +141,14 @@ class AccountPayment(models.Model):
 
     # == Display purpose fields ==
     payment_method_code = fields.Char(
-        related='payment_method_line_id.code',
-        help="Technical field used to adapt the interface to the payment type selected.")
+        related='payment_method_line_id.code')
+
+    # used to know whether the field `partner_bank_id` needs to be displayed or not in the payments form views
     show_partner_bank_account = fields.Boolean(
-        compute='_compute_show_require_partner_bank',
-        help="Technical field used to know whether the field `partner_bank_id` needs to be displayed or not in the payments form views")
+        compute='_compute_show_require_partner_bank')
+    # used to know whether the field `partner_bank_id` needs to be required or not in the payments form views
     require_partner_bank_account = fields.Boolean(
-        compute='_compute_show_require_partner_bank',
-        help="Technical field used to know whether the field `partner_bank_id` needs to be required or not in the payments form views")
+        compute='_compute_show_require_partner_bank')
     country_code = fields.Char(related='company_id.account_fiscal_country_id.code')
     amount_signed = fields.Monetary(
         currency_field='currency_id', compute='_compute_amount_signed', tracking=True,

--- a/addons/account/models/account_reconcile_model.py
+++ b/addons/account/models/account_reconcile_model.py
@@ -50,9 +50,10 @@ class AccountReconcileModelLine(models.Model):
     account_id = fields.Many2one('account.account', string='Account', ondelete='cascade',
         domain="[('deprecated', '=', False), ('company_id', '=', company_id), ('is_off_balance', '=', False)]",
         required=True, check_company=True)
+
+    # This field is ignored in a bank statement reconciliation.
     journal_id = fields.Many2one('account.journal', string='Journal', ondelete='cascade',
-        domain="[('type', '=', 'general'), ('company_id', '=', company_id)]",
-        help="This field is ignored in a bank statement reconciliation.", check_company=True)
+        domain="[('type', '=', 'general'), ('company_id', '=', company_id)]", check_company=True)
     label = fields.Char(string='Journal Item Label')
     amount_type = fields.Selection([
         ('fixed', 'Fixed'),
@@ -60,9 +61,12 @@ class AccountReconcileModelLine(models.Model):
         ('percentage_st_line', 'Percentage of statement line'),
         ('regex', 'From label'),
     ], required=True, default='percentage')
-    show_force_tax_included = fields.Boolean(compute='_compute_show_force_tax_included', help='Technical field used to show the force tax included button')
+
+    # used to show the force tax included button'
+    show_force_tax_included = fields.Boolean(compute='_compute_show_force_tax_included')
     force_tax_included = fields.Boolean(string='Tax Included in Price', help='Force the tax to be managed as a price included tax.')
-    amount = fields.Float(string="Float Amount", compute='_compute_float_amount', store=True, help="Technical shortcut to parse the amount to a float")
+    # technical shortcut to parse the amount to a float
+    amount = fields.Float(string="Float Amount", compute='_compute_float_amount', store=True)
     amount_string = fields.Char(string="Amount", default='100', required=True, help="""Value for the amount of the writeoff line
     * Percentage: Percentage of the balance, between 0 and 100.
     * Fixed: The fixed value of the writeoff. The amount will count as a debit if it is negative, as a credit if it is positive.
@@ -361,7 +365,8 @@ class AccountReconcileModel(models.Model):
         tracking=True,
         help="Every character that is nor a digit nor this separator will be removed from the matching string",
     )
-    show_decimal_separator = fields.Boolean(compute='_compute_show_decimal_separator', help="Technical field to decide if we should show the decimal separator for the regex matching field.")
+    # used to decide if we should show the decimal separator for the regex matching field
+    show_decimal_separator = fields.Boolean(compute='_compute_show_decimal_separator')
     number_entries = fields.Integer(string='Number of entries related to this model', compute='_compute_number_entries')
 
     def action_reconcile_stat(self):

--- a/addons/account/models/partner.py
+++ b/addons/account/models/partner.py
@@ -43,12 +43,12 @@ class AccountFiscalPosition(models.Model):
     # To be used in hiding the 'Federal States' field('attrs' in view side) when selected 'Country' has 0 states.
     states_count = fields.Integer(compute='_compute_states_count')
     foreign_vat = fields.Char(string="Foreign Tax ID", help="The tax ID of your company in the region mapped by this fiscal position.")
+
+    # Technical field used to display a banner on top of foreign vat fiscal positions,
+    # in order to ease the instantiation of foreign taxes when possible.
     foreign_vat_header_mode = fields.Selection(
         selection=[('templates_found', "Templates Found"), ('no_template', "No Template")],
-        compute='_compute_foreign_vat_header_mode',
-        help="Technical field used to display a banner on top of foreign vat fiscal positions, "
-             "in order to ease the instantiation of foreign taxes when possible."
-    )
+        compute='_compute_foreign_vat_header_mode')
 
     def _compute_states_count(self):
         for position in self:
@@ -461,7 +461,7 @@ class ResPartner(models.Model):
     total_invoiced = fields.Monetary(compute='_invoice_total', string="Total Invoiced",
         groups='account.group_account_invoice,account.group_account_readonly')
     currency_id = fields.Many2one('res.currency', compute='_get_company_currency', readonly=True,
-        string="Currency", help='Utility field to express amount currency')
+        string="Currency") # currency of amount currency
     journal_item_count = fields.Integer(compute='_compute_journal_item_count', string="Journal Items")
     property_account_payable_id = fields.Many2one('account.account', company_dependent=True,
         string="Account Payable",
@@ -505,9 +505,9 @@ class ResPartner(models.Model):
     supplier_rank = fields.Integer(default=0, copy=False)
     customer_rank = fields.Integer(default=0, copy=False)
 
+    # Technical field holding the amount partners that share the same account number as any set on this partner.
     duplicated_bank_account_partners_count = fields.Integer(
         compute='_compute_duplicated_bank_account_partners_count',
-        help='Technical field holding the amount partners that share the same account number as any set on this partner.',
     )
 
     def _compute_bank_count(self):

--- a/addons/account/models/res_currency.py
+++ b/addons/account/models/res_currency.py
@@ -9,7 +9,7 @@ class ResCurrency(models.Model):
     _inherit = 'res.currency'
 
     display_rounding_warning = fields.Boolean(string="Display Rounding Warning", compute='_compute_display_rounding_warning',
-        help="Technical field. Used to tell whether or not to display the rounding warning. The warning informs a rounding factor change might be dangerous on res.currency's form view.")
+        help="The warning informs a rounding factor change might be dangerous on res.currency's form view.")
 
 
     @api.depends('rounding')

--- a/addons/account/models/res_partner_bank.py
+++ b/addons/account/models/res_partner_bank.py
@@ -6,8 +6,7 @@ from odoo import api, fields, models, _
 class ResPartnerBank(models.Model):
     _inherit = "res.partner.bank"
 
-    journal_id = fields.One2many('account.journal', 'bank_account_id', domain=[('type', '=', 'bank')], string='Account Journal', readonly=True,
-        help="The accounting journal corresponding to this bank account.")
+    journal_id = fields.One2many('account.journal', 'bank_account_id', domain=[('type', '=', 'bank')], string='Account Journal', readonly=True)
 
     @api.constrains('journal_id')
     def _check_journal_id(self):
