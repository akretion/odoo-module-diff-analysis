PR: https://github.com/odoo/odoo/pull/91961

From: 86ff8c6e8fb4c5481c9b4443b7a5b51aafdfd8d3
From: Demesmaeker
Date: 2022-05-24 17:10:55

Structural Changes: 6
Total Changes: 27

[REF] payment(_*): compute feature fields

Computing the fields instead of storing them allows to implement the
feature for each provider more easily, without needing a migration
script.

task-2841744

closes odoo/odoo#91961

Related: odoo/enterprise#27618
Related: odoo/upgrade#3535
Signed-off-by: Antoine Vandevenne (anv) <anv@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment/models/payment_acquirer.py
+++ b/addons/payment/models/payment_acquirer.py
@@ -99,12 +99,19 @@ class PaymentAcquirer(models.Model):
         default=lambda self: _("Your payment has been cancelled."), translate=True)
 
     # Feature support fields
-    support_authorization = fields.Boolean(string="Authorize Mechanism Supported")
-    support_fees_computation = fields.Boolean(string="Fees Computation Supported")
-    support_tokenization = fields.Boolean(string="Tokenization Supported")
+    support_fees = fields.Boolean(
+        string="Fees Supported", compute='_compute_feature_support_fields'
+    )
+    support_manual_capture = fields.Boolean(
+        string="Manual Capture Supported", compute='_compute_feature_support_fields'
+    )
     support_refund = fields.Selection(
         string="Type of Refund Supported",
         selection=[('full_only', "Full Only"), ('partial', "Partial")],
+        compute='_compute_feature_support_fields',
+    )
+    support_tokenization = fields.Boolean(
+        string="Tokenization Supported", compute='_compute_feature_support_fields'
     )
 
     # Kanban view fields
@@ -204,6 +211,18 @@ class PaymentAcquirer(models.Model):
             elif payment_method_line:
                 payment_method_line.unlink()
 
+    def _compute_feature_support_fields(self):
+        """ Compute the feature support fields.
+
+        For an acquirer to support one or more additional feature, it must override this method.
+
+        :return: None
+        """
+        self.update(dict.fromkeys(
+            ('support_fees', 'support_manual_capture', 'support_refund', 'support_tokenization'),
+            None,
+        ))
+
     def _get_default_payment_method_id(self):
         self.ensure_one()
         return self.env.ref('account.account_payment_method_manual_in').id

--- a/addons/payment/models/payment_transaction.py
+++ b/addons/payment/models/payment_transaction.py
@@ -159,7 +159,7 @@ class PaymentTransaction(models.Model):
     def _check_state_authorized_supported(self):
         """ Check that authorization is supported for a transaction in the 'authorized' state. """
         illegal_authorize_state_txs = self.filtered(
-            lambda tx: tx.state == 'authorized' and not tx.acquirer_id.support_authorization
+            lambda tx: tx.state == 'authorized' and not tx.acquirer_id.support_manual_capture
         )
         if illegal_authorize_state_txs:
             raise ValidationError(_(
