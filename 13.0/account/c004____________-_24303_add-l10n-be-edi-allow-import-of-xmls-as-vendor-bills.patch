PR: https://github.com/odoo/odoo/pull/24303

From: 1a871d72438c731d08ef10e668b81b4ade900b85
From: Laurent Smet
Date: 2019-04-05 09:08:09

Breaking data model changes score: 3, change matches:
-    attachment_ids = fields.Many2many('ir.attachment', string='Files')
-    journal_id = fields.Many2one(string="Journal", comodel_name="account.journal", required=True, domain="[('type', 'in', ('sale', 'purchase'))]", default=_get_default_journal_id, help="Journal where to generate the bills")

Total Changes: 53

[ADD] l10n_be_edi: allow import of XMLs as Vendor Bills
Task 1823110
New module to import bills in the belgian e-invoice format.

Author: las@odoo.com
Co-Author: wan@odoo.com

closes odoo/odoo#24303

Signed-off-by: Quentin De Paoli (qdp) <qdp@openerp.com>

================================= pseudo patch: =================================

--- a/addons/account/models/__init__.py
+++ b/addons/account/models/__init__.py
@@ -19,4 +19,3 @@ from . import account_cash_rounding
 from . import reconciliation_widget
 from . import account_incoterms
 from . import digest
-from . import account_invoice_import_wizard

--- a/addons/account/models/account_invoice_import_wizard.py
+++ b/None
@@ -1,52 +0,0 @@
-# -*- coding: utf-8 -*-
-from odoo import api, fields, models, _
-from odoo.tests.common import Form
-from odoo.exceptions import UserError
-
-
-class ImportInvoiceImportWizard(models.TransientModel):
-    _name = 'account.invoice.import.wizard'
-    _description = 'Import Your Vendor Bills from Files.'
-
-    def _get_default_journal_id(self):
-        return self.env['account.journal'].search([('type', '=', self.env.context.get('journal_type'))], limit=1)
-
-    attachment_ids = fields.Many2many('ir.attachment', string='Files')
-    journal_id = fields.Many2one(string="Journal", comodel_name="account.journal", required=True, domain="[('type', 'in', ('sale', 'purchase'))]", default=_get_default_journal_id, help="Journal where to generate the bills")
-
-    @api.multi
-    def _create_invoice_from_file(self, attachment):
-        self = self.with_context(default_journal_id= self.journal_id.id)
-        invoice_form = Form(self.env['account.invoice'], view='account.invoice_supplier_form')
-        invoice = invoice_form.save()
-        attachment.write({'res_model': 'account.invoice', 'res_id': invoice.id})
-        invoice.message_post(attachment_ids=[attachment.id])
-        return invoice
-
-    @api.multi
-    def create_invoices(self):
-        ''' Create the invoices from files.
-         :return: A action redirecting to account.invoice tree/form view.
-        '''
-        if not self.attachment_ids:
-            raise UserError(_("No attachment was provided"))
-
-        invoices = self.env['account.invoice']
-        for attachment in self.attachment_ids:
-            invoices += self._create_invoice_from_file(attachment)
-
-        form_view = self.env.context.get('journal_type') == 'purchase' and self.env.ref('account.invoice_supplier_form').id or self.env.ref('account.invoice_form').id
-        tree_view = self.env.context.get('journal_type') == 'purchase' and self.env.ref('account.invoice_supplier_tree').id or self.env.ref('account.invoice_tree').id
-        action_vals = {
-            'name': _('Invoices'),
-            'domain': [('id', 'in', invoices.ids)],
-            'view_type': 'form',
-            'res_model': 'account.invoice',
-            'views': [[tree_view, "tree"], [form_view, "form"]],
-            'type': 'ir.actions.act_window',
-        }
-        if len(invoices) == 1:
-            action_vals.update({'res_id': invoices[0].id, 'view_mode': 'form'})
-        else:
-            action_vals['view_mode'] = 'tree,form'
-        return action_vals
