PR: https://github.com/odoo/odoo/pull/186906

From: 9144eb051538d5a92d403e1ad9c635ce39e090ec
From: Gorash
Date: 2024-11-14 10:39:02

Breaking data model changes scores: del:12 + add:0, change matches:
-    _inherit = ['mail.compose.message']
-    _inherit = ["product.product"]
-    _inherit = ["product.template"]
-    _inherit = ['sale.order']
-    _inherit = ['sale.order.line']
-    _inherit = ['stock.lot']
-    _inherit = ['stock.move']
-    _inherit = ['stock.move.line']
-    _inherit = ['stock.picking.type']
-    _inherit = ['stock.picking']
-    _inherit = ['stock.traceability.report']
-    _inherit = ['stock.warehouse']

Total Changes: 24

[REV] *: Restore the model `_name`

Following internal discussions, the python typing and inheritance task is
canceled. The use of the class name instead of '_name' was done to allow
notations such as `partner_id = fields.Many2one[base.ResParter](string='Partner')`.
Since this notation is canceled, we put `_name` back (although the class
name is sufficient).

Partial revert:
https://github.com/odoo/enterprise/pull/69762
https://github.com/odoo/odoo/pull/178200

closes odoo/odoo#186906

Related: odoo/enterprise#73643
Signed-off-by: Raphael Collet <rco@odoo.com>

================================= pseudo patch: =================================

--- a/addons/repair/models/mail_compose_message.py
+++ b/addons/repair/models/mail_compose_message.py
@@ -5,7 +5,7 @@ from odoo import models
 
 
 class MailComposeMessage(models.TransientModel):
-    _inherit = ['mail.compose.message']
+    _inherit = 'mail.compose.message'
 
     def _action_send_mail(self, auto_commit=False):
         if self.model == 'repair.order':

--- a/addons/repair/models/product.py
+++ b/addons/repair/models/product.py
@@ -6,7 +6,7 @@ from odoo.exceptions import UserError
 
 
 class ProductProduct(models.Model):
-    _inherit = ["product.product"]
+    _inherit = "product.product"
 
     product_catalog_product_is_in_repair = fields.Boolean(
         compute='_compute_product_is_in_repair',
@@ -38,6 +38,6 @@ class ProductProduct(models.Model):
 
 
 class ProductTemplate(models.Model):
-    _inherit = ["product.template"]
+    _inherit = "product.template"
 
     create_repair = fields.Boolean('Create Repair', help="Create a linked Repair Order on Sale Order confirmation of this product.", groups='stock.group_stock_user')

--- a/addons/repair/models/sale_order.py
+++ b/addons/repair/models/sale_order.py
@@ -6,7 +6,7 @@ from odoo.tools import float_compare
 
 
 class SaleOrder(models.Model):
-    _inherit = ['sale.order']
+    _inherit = 'sale.order'
 
     repair_order_ids = fields.One2many(
         comodel_name='repair.order', inverse_name='sale_order_id',
@@ -49,7 +49,7 @@ class SaleOrder(models.Model):
 
 
 class SaleOrderLine(models.Model):
-    _inherit = ['sale.order.line']
+    _inherit = 'sale.order.line'
 
     def _compute_qty_delivered(self):
         remaining_so_lines = self

--- a/addons/repair/models/stock_lot.py
+++ b/addons/repair/models/stock_lot.py
@@ -5,7 +5,7 @@ from odoo import api, fields, models, _
 
 
 class StockLot(models.Model):
-    _inherit = ['stock.lot']
+    _inherit = 'stock.lot'
 
     repair_line_ids = fields.Many2many('repair.order', string="Repair Orders", compute="_compute_repair_line_ids")
     repair_part_count = fields.Integer('Repair part count', compute="_compute_repair_line_ids")

--- a/addons/repair/models/stock_move.py
+++ b/addons/repair/models/stock_move.py
@@ -11,7 +11,7 @@ MAP_REPAIR_LINE_TYPE_TO_MOVE_LOCATIONS_FROM_REPAIR = {
 
 
 class StockMove(models.Model):
-    _inherit = ['stock.move']
+    _inherit = 'stock.move'
 
     repair_id = fields.Many2one('repair.order', check_company=True)
     repair_line_type = fields.Selection([

--- a/addons/repair/models/stock_move_line.py
+++ b/addons/repair/models/stock_move_line.py
@@ -4,7 +4,7 @@ from odoo import models
 
 
 class StockMoveLine(models.Model):
-    _inherit = ['stock.move.line']
+    _inherit = 'stock.move.line'
 
     def _should_show_lot_in_invoice(self):
         return super()._should_show_lot_in_invoice() or self.move_id.repair_line_type

--- a/addons/repair/models/stock_picking.py
+++ b/addons/repair/models/stock_picking.py
@@ -9,7 +9,7 @@ from odoo.tools.misc import clean_context
 
 
 class StockPickingType(models.Model):
-    _inherit = ['stock.picking.type']
+    _inherit = 'stock.picking.type'
 
     code = fields.Selection(selection_add=[
         ('repair_operation', 'Repair')
@@ -191,7 +191,7 @@ class StockPickingType(models.Model):
 
 
 class StockPicking(models.Model):
-    _inherit = ['stock.picking']
+    _inherit = 'stock.picking'
 
     is_repairable = fields.Boolean(compute='_compute_is_repairable')
     repair_ids = fields.One2many('repair.order', 'picking_id')

--- a/addons/repair/models/stock_traceability.py
+++ b/addons/repair/models/stock_traceability.py
@@ -4,7 +4,7 @@ from odoo import models, api
 
 
 class StockTraceabilityReport(models.TransientModel):
-    _inherit = ['stock.traceability.report']
+    _inherit = 'stock.traceability.report'
 
     @api.model
     def _get_reference(self, move_line):

--- a/addons/repair/models/stock_warehouse.py
+++ b/addons/repair/models/stock_warehouse.py
@@ -6,7 +6,7 @@ from odoo.exceptions import UserError
 
 
 class StockWarehouse(models.Model):
-    _inherit = ['stock.warehouse']
+    _inherit = 'stock.warehouse'
 
     repair_type_id = fields.Many2one('stock.picking.type', 'Repair Operation Type', check_company=True)
     repair_mto_pull_id = fields.Many2one(
