PR: https://github.com/odoo/odoo/pull/192031

From: 334a8161cd2feb092cafedc35d94645900b40518
From: Hesham Saleh
Date: 2025-02-12 10:06:55

Breaking data model changes scores: del:8 + add:0, change matches:
-    account_control_ids = fields.Many2many('account.account', 'journal_account_control_rel', 'journal_id', 'account_id', string='Allowed accounts',
-    alias_id = fields.Many2one(help="Send one separate email for each invoice.\n\n"
-    show_force_tax_included = fields.Boolean(compute='_compute_show_force_tax_included')
-    force_tax_included = fields.Boolean(string='Tax Included in Price', help='Force the tax to be managed as a price included tax.')
-    match_nature = fields.Selection(selection=[
-    match_transaction_type = fields.Selection(selection=[
-    match_transaction_type_param = fields.Char(string='Transaction Type Parameter', tracking=True)

Total Changes: 186

[IMP] account: Cleaning of menus and forms

This commit cleans menu items and forms to clean the interface as much as possible.
We want onboarding of small entrepreneurs and self-employed persons to be less daunting,
while preserving the usability of features for advances users.
Excalidraw: https://link.excalidraw.com/l/65VNwvy7c4X/1BQX1dh6I8x

task-4430969

closes odoo/odoo#192031

Related: odoo/enterprise#76299
Related: odoo/upgrade#7038
Signed-off-by: Habib Ayob (ayh) <ayh@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_journal.py
+++ b/addons/account/models/account_journal.py
@@ -83,8 +83,9 @@ class AccountJournal(models.Model):
         ]"""
 
     name = fields.Char(string='Journal Name', required=True, translate=True)
+    name_placeholder = fields.Char(compute='_compute_name_placeholder')
     code = fields.Char(
-        string='Short Code',
+        string='Sequence Prefix',
         size=5,
         compute='_compute_code', readonly=False, store=True,
         required=True, precompute=True,
@@ -107,9 +108,6 @@ class AccountJournal(models.Model):
         Select 'General' for miscellaneous operations journals.
         """)
     autocheck_on_post = fields.Boolean(string="Auto-Check on Post", default=True)
-    account_control_ids = fields.Many2many('account.account', 'journal_account_control_rel', 'journal_id', 'account_id', string='Allowed accounts',
-        check_company=True,
-        domain="[('deprecated', '=', False), ('account_type', '!=', 'off_balance')]")
     default_account_type = fields.Char(string='Default Account Type', compute="_compute_default_account_type")
     default_account_id = fields.Many2one(
         comodel_name='account.account', check_company=True, copy=False, ondelete='restrict',
@@ -225,9 +223,9 @@ class AccountJournal(models.Model):
     bank_id = fields.Many2one('res.bank', related='bank_account_id.bank_id', readonly=False)
 
     # alias configuration for journals
-    alias_id = fields.Many2one(help="Send one separate email for each invoice.\n\n"
-                                    "Any file extension will be accepted.\n\n"
-                                    "Only PDF and XML files will be interpreted by Odoo")
+    alias_name = fields.Char(help="Send one separate email for each invoice.\n"
+                                  "Any file extension will be accepted.\n"
+                                  "Only PDF and XML files will be interpreted by Odoo")
 
     journal_group_ids = fields.Many2many('account.journal.group',
         check_company=True,
@@ -257,8 +255,8 @@ class AccountJournal(models.Model):
     def _compute_code(self):
         cache = defaultdict(list)
         for record in self:
-            if not record.code and record.type in ('bank', 'cash', 'credit'):
-                record.code = self.get_next_bank_cash_default_code(
+            if not record.code and record.type:
+                record.code = self._get_next_journal_default_code(
                     record.type,
                     record.company_id,
                     cache.get(record.company_id)
@@ -459,9 +457,8 @@ class AccountJournal(models.Model):
             temp_move = self.env['account.move'].new({'journal_id': journal.id})
             journal.accounting_date = temp_move._get_accounting_date(move_date, has_tax)
 
-
     @api.onchange('type')
-    def _onchange_type_for_alias(self):
+    def _onchange_type(self):
         self.filtered(lambda journal: journal.type not in {'sale', 'purchase'}).alias_name = False
         for journal in self.filtered(lambda journal: (
             not journal.alias_name and journal.type in {'sale', 'purchase'})
@@ -469,20 +466,40 @@ class AccountJournal(models.Model):
             journal.alias_name = self._alias_prepare_alias_name(
                 False, journal.name, journal.code, journal.type, journal.company_id)
 
-    @api.constrains('account_control_ids')
-    def _constrains_account_control_ids(self):
-        self.env['account.move.line'].flush_model(['account_id', 'journal_id', 'display_type'])
-        self.flush_recordset(['account_control_ids'])
-        self._cr.execute("""
-            SELECT aml.id
-            FROM account_move_line aml
-            WHERE aml.journal_id in %s
-            AND EXISTS (SELECT 1 FROM journal_account_control_rel rel WHERE rel.journal_id = aml.journal_id)
-            AND NOT EXISTS (SELECT 1 FROM journal_account_control_rel rel WHERE rel.account_id = aml.account_id AND rel.journal_id = aml.journal_id)
-            AND aml.display_type NOT IN ('line_section', 'line_note')
-        """, [tuple(self.ids)])
-        if self._cr.fetchone():
-            raise ValidationError(_('Some journal items already exist in this journal but with other accounts than the allowed ones.'))
+        for journal in self:
+            journal.code = False
+            journal.default_account_id = False
+            journal.profit_account_id = False
+            journal.loss_account_id = False
+            if journal.type == 'sale':
+                journal.default_account_id = journal.company_id.income_account_id
+            elif journal.type == 'purchase':
+                journal.default_account_id = journal.company_id.expense_account_id
+            elif journal.type in ('cash', 'bank'):
+                journal.profit_account_id = journal.company_id.default_cash_difference_income_account_id
+                journal.loss_account_id = journal.company_id.default_cash_difference_expense_account_id
+
+        # codes are reset and recomputed whenever the
+        # journal type changes through the form view
+        self._compute_code()
+
+    @api.depends('type')
+    def _compute_name_placeholder(self):
+        type_to_default_name = {
+            'sale': _('Customer Invoices'),
+            'purchase': _('Vendor Bills'),
+            'cash': _('Cash'),
+            'bank': _('Bank'),
+            'credit': _('Credit Card'),
+            'general': _('Miscellaneous Operations'),
+        }
+        for journal in self:
+            if not journal.type:
+                journal.name_placeholder = _("Select a type")
+            else:
+                match = re.search(r'[0-9]+$', journal.code or '')
+                code_suffix = match.group() if match else '1'
+                journal.name_placeholder = f"{type_to_default_name[journal.type]} ({code_suffix})"
 
     @api.constrains('type', 'bank_account_id')
     def _check_bank_account(self):
@@ -757,8 +774,15 @@ class AccountJournal(models.Model):
         return self.env['mail.alias']._sanitize_alias_name(alias_name)
 
     @api.model
-    def get_next_bank_cash_default_code(self, journal_type, company, cache=None, protected_codes=False):
-        prefix_map = {'cash': 'CSH', 'general': 'GEN', 'bank': 'BNK', 'credit': 'CCD'}
+    def _get_next_journal_default_code(self, journal_type, company, cache=None, protected_codes=False):
+        prefix_map = {
+            'sale': 'INV',
+            'purchase': 'BILL',
+            'cash': 'CSH',
+            'bank': 'BNK',
+            'credit': 'CCD',
+            'general': 'MISC',
+        }
         journal_code_base = prefix_map.get(journal_type)
         existing_codes = set(self.env['account.journal'].with_context(active_test=False).search([
             *self.env['account.journal']._check_company_domain(company),
@@ -849,7 +873,7 @@ class AccountJournal(models.Model):
             has_loss_account = vals.get('loss_account_id')
 
             # === Fill missing name ===
-            vals['name'] = vals.get('name') or vals.get('bank_acc_number')
+            vals['name'] = vals.get('name') or vals.get('bank_acc_number') or vals.get('name_placeholder')
 
             # === Fill missing accounts ===
             if not has_liquidity_accounts:
@@ -873,7 +897,7 @@ class AccountJournal(models.Model):
 
         if is_import and not vals.get('code'):
             code = vals['name'][:5]
-            vals['code'] = code if not protected_codes or code not in protected_codes else self.get_next_bank_cash_default_code(journal_type, company, protected_codes)
+            vals['code'] = code if not protected_codes or code not in protected_codes else self._get_next_journal_default_code(journal_type, company, protected_codes)
             if not vals['code']:
                 raise UserError(_("Cannot generate an unused journal code. Please change the name for journal %s.", vals['name']))
 
@@ -885,6 +909,9 @@ class AccountJournal(models.Model):
             )
             vals['alias_name'] = self._ensure_unique_alias(vals, company)
 
+        if not vals.get('name') and vals.get('name_placeholder'):
+            vals['name'] = vals['name_placeholder']
+
     @api.model_create_multi
     def create(self, vals_list):
         for vals in vals_list:

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -4880,11 +4880,8 @@ class AccountMove(models.Model):
 
             # Handle case when the invoice_date is not set. In that case, the invoice_date is set at today and then,
             # lines are recomputed accordingly.
-            if not invoice.invoice_date:
-                if invoice.is_sale_document(include_receipts=True):
-                    invoice.invoice_date = fields.Date.context_today(self)
-                elif invoice.is_purchase_document(include_receipts=True):
-                    validation_msgs.add(_("The Bill/Refund date is required to validate this document."))
+            if not invoice.invoice_date and invoice.is_invoice(include_receipts=True):
+                invoice.invoice_date = fields.Date.context_today(self)
 
         for move in self:
             if move.state in ['posted', 'cancel']:

--- a/addons/account/models/account_move_line.py
+++ b/addons/account/models/account_move_line.py
@@ -1183,12 +1183,6 @@ class AccountMoveLine(models.Model):
             if account in (journal.default_account_id, journal.suspense_account_id):
                 continue
 
-            is_account_control_ok = not journal.account_control_ids or account in journal.account_control_ids
-
-            if not is_account_control_ok:
-                raise UserError(_("You cannot use this account (%s) in this journal, check the section 'Control-Access' under "
-                                  "tab 'Advanced Settings' on the related journal.", account.display_name))
-
     @api.constrains('account_id', 'tax_ids', 'tax_line_id', 'reconciled')
     def _check_off_balance(self):
         for line in self:

--- a/addons/account/models/account_reconcile_model.py
+++ b/addons/account/models/account_reconcile_model.py
@@ -1,11 +1,8 @@
 # -*- coding: utf-8 -*-
+import re
 
-from odoo import api, fields, models, Command, tools, _
+from odoo import api, fields, models, _
 from odoo.exceptions import UserError, ValidationError
-import re
-from math import copysign
-from collections import defaultdict
-from dateutil.relativedelta import relativedelta
 
 
 class AccountReconcileModelPartnerMapping(models.Model):
@@ -54,13 +51,7 @@ class AccountReconcileModelLine(models.Model):
 
     # This field is ignored in a bank statement reconciliation.
     journal_id = fields.Many2one(
-        comodel_name='account.journal',
-        string="Journal",
-        ondelete='cascade',
-        check_company=True,
-        store=True,
-        readonly=False,
-        compute='_compute_journal_id',
+        related='model_id.journal_id',
     )
     label = fields.Char(string='Journal Item Label', translate=True)
     amount_type = fields.Selection(
@@ -77,9 +68,6 @@ class AccountReconcileModelLine(models.Model):
         readonly=False,
     )
 
-    # used to show the force tax included button'
-    show_force_tax_included = fields.Boolean(compute='_compute_show_force_tax_included')
-    force_tax_included = fields.Boolean(string='Tax Included in Price', help='Force the tax to be managed as a price included tax.')
     # technical shortcut to parse the amount to a float
     amount = fields.Float(string="Float Amount", compute='_compute_float_amount', store=True)
     amount_string = fields.Char(string="Amount", default='100', required=True, help="""Value for the amount of the writeoff line
@@ -96,18 +84,6 @@ class AccountReconcileModelLine(models.Model):
         store=True,
     )
 
-    @api.onchange('tax_ids')
-    def _onchange_tax_ids(self):
-        # Multiple taxes with force_tax_included results in wrong computation, so we
-        # only allow to set the force_tax_included field if we have one tax selected
-        if len(self.tax_ids) != 1:
-            self.force_tax_included = False
-
-    @api.depends('tax_ids')
-    def _compute_show_force_tax_included(self):
-        for record in self:
-            record.show_force_tax_included = False if len(record.tax_ids) != 1 else True
-
     @api.onchange('amount_type')
     def _onchange_amount_type(self):
         self.amount_string = ''
@@ -132,14 +108,6 @@ class AccountReconcileModelLine(models.Model):
             else:
                 line.amount_type = line.amount_type or 'percentage'
 
-    @api.depends('model_id.counterpart_type')
-    def _compute_journal_id(self):
-        for line in self:
-            if line.journal_id.type != line.model_id.counterpart_type:
-                line.journal_id = None
-            else:
-                line.journal_id = line.journal_id
-
     @api.depends('model_id.counterpart_type', 'rule_type', 'account_id', 'company_id', 'company_id.account_purchase_tax_id')
     def _compute_tax_ids(self):
         for line in self:
@@ -194,7 +162,7 @@ class AccountReconcileModel(models.Model):
     rule_type = fields.Selection(selection=[
         ('writeoff_button', 'Button to generate counterpart entry'),
         ('writeoff_suggestion', 'Rule to suggest counterpart entry'),
-        ('invoice_matching', 'Rule to match invoices/bills'),
+        ('invoice_matching', 'Match invoices & payments'),
     ], string='Type', default='writeoff_button', required=True, tracking=True)
     auto_reconcile = fields.Boolean(string='Auto-validate', tracking=True,
         help='Validate the statement line automatically (reconciliation based on your rule).')
@@ -217,6 +185,15 @@ class AccountReconcileModel(models.Model):
         string="Counterpart Type",
         default='general',
     )
+    journal_id = fields.Many2one(
+        comodel_name='account.journal',
+        string="Journal",
+        help="The journal in which the counterpart entry will be created.",
+        check_company=True,
+        store=True,
+        readonly=False,
+        compute='_compute_journal_id',
+    )
 
     # ===== Conditions =====
     match_text_location_label = fields.Boolean(
@@ -238,20 +215,11 @@ class AccountReconcileModel(models.Model):
         domain="[('type', 'in', ('bank', 'cash', 'credit'))]",
         check_company=True,
         help='The reconciliation model will only be available from the selected journals.')
-    match_nature = fields.Selection(selection=[
-        ('amount_received', 'Received'),
-        ('amount_paid', 'Paid'),
-        ('both', 'Paid/Received')
-    ], string='Amount Type', required=True, default='both', tracking=True,
-        help='''The reconciliation model will only be applied to the selected transaction type:
-        * Amount Received: Only applied when receiving an amount.
-        * Amount Paid: Only applied when paying an amount.
-        * Amount Paid/Received: Applied in both cases.''')
     match_amount = fields.Selection(selection=[
         ('lower', 'Is Lower Than'),
         ('greater', 'Is Greater Than'),
         ('between', 'Is Between'),
-    ], string='Amount Condition', tracking=True,
+    ], string='Amount', tracking=True,
         help='The reconciliation model will only be applied when the amount being lower than, greater than or between specified amount(s).')
     match_amount_min = fields.Float(string='Amount Min Parameter', tracking=True)
     match_amount_max = fields.Float(string='Amount Max Parameter', tracking=True)
@@ -273,15 +241,6 @@ class AccountReconcileModel(models.Model):
         * Not Contains: Negation of "Contains".
         * Match Regex: Define your own regular expression.''')
     match_note_param = fields.Char(string='Note Parameter', tracking=True)
-    match_transaction_type = fields.Selection(selection=[
-        ('contains', 'Contains'),
-        ('not_contains', 'Not Contains'),
-        ('match_regex', 'Match Regex'),
-    ], string='Transaction Type', tracking=True, help='''The reconciliation model will only be applied when the transaction type:
-        * Contains: The proposition transaction type must contains this string (case insensitive).
-        * Not Contains: Negation of "Contains".
-        * Match Regex: Define your own regular expression.''')
-    match_transaction_type_param = fields.Char(string='Transaction Type Parameter', tracking=True)
     match_same_currency = fields.Boolean(string='Same Currency', default=True, tracking=True,
         help='Restrict to propositions having the same currency as the statement line.')
     allow_payment_tolerance = fields.Boolean(
@@ -307,9 +266,9 @@ class AccountReconcileModel(models.Model):
     )
     match_partner = fields.Boolean(string='Partner is Set', tracking=True,
         help='The reconciliation model will only be applied when a customer/vendor is set.')
-    match_partner_ids = fields.Many2many('res.partner', string='Matching partners',
+    match_partner_ids = fields.Many2many('res.partner', string='Partners',
         help='The reconciliation model will only be applied to the selected customers/vendors.')
-    match_partner_category_ids = fields.Many2many('res.partner.category', string='Matching categories',
+    match_partner_category_ids = fields.Many2many('res.partner.category', string='Categories',
         help='The reconciliation model will only be applied to the selected customer/vendor categories.')
 
     line_ids = fields.One2many('account.reconcile.model.line', 'model_id', copy=True)
@@ -369,6 +328,14 @@ class AccountReconcileModel(models.Model):
             else:
                 record.payment_tolerance_param = max(0.0, record.payment_tolerance_param)
 
+    @api.depends('counterpart_type')
+    def _compute_journal_id(self):
+        for record in self:
+            if record.journal_id.type != record.counterpart_type:
+                record.journal_id = None
+            else:
+                record.journal_id = record.journal_id
+
     @api.constrains('allow_payment_tolerance', 'payment_tolerance_param', 'payment_tolerance_type')
     def _check_payment_tolerance_param(self):
         for record in self:

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -1073,11 +1073,6 @@ class AccountChartTemplate(models.AbstractModel):
                 'show_on_dashboard': True,
                 'sequence': 7,
             },
-            "cash": {
-                'name': _('Cash'),
-                'type': 'cash',
-                'show_on_dashboard': True,
-            },
         }
 
     @template(model='account.reconcile.model')
@@ -1088,7 +1083,6 @@ class AccountChartTemplate(models.AbstractModel):
                 "sequence": 1,
                 "rule_type": 'invoice_matching',
                 "auto_reconcile": True,
-                "match_nature": 'both',
                 "match_same_currency": True,
                 "allow_payment_tolerance": True,
                 "payment_tolerance_type": 'percentage',
@@ -1100,7 +1094,6 @@ class AccountChartTemplate(models.AbstractModel):
                 "sequence": 2,
                 "rule_type": 'invoice_matching',
                 "auto_reconcile": False,
-                "match_nature": 'both',
                 "match_same_currency": True,
                 "allow_payment_tolerance": False,
                 "match_partner": True,
