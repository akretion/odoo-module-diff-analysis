PR: https://github.com/odoo/odoo/pull/116005

From: 2a37a3d06fca721350e67b3709d17ed3fee65bdc
From: Julien Carion (juca)
Date: 2023-06-22 13:40:43

Breaking data model changes scores: del:4 + add:0, change matches:
-    res_users_settings_ids = fields.One2many('res.users.settings', 'user_id')
-    res_users_settings_id = fields.Many2one('res.users.settings', string="Settings", compute='_compute_res_users_settings_id', search='_search_res_users_settings_id')
-    user_id = fields.Many2one('res.users', string="User", required=True, readonly=True, ondelete='cascade')

Total Changes: 46

[REF] web, base, mail: move res.users.settings from mail to base

This commit moves and adapt the res.users.settings model from mail to base and
and allows to access and modify its content with web's user service.
This allows to access user settings without needing the mail module.

closes odoo/odoo#116005

Related: odoo/enterprise#38360
Signed-off-by: MichaÃ«l Mattiello (mcm) <mcm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/res_users.py
+++ b/addons/mail/models/res_users.py
@@ -24,9 +24,6 @@ class Users(models.Model):
         help="Policy on how to handle Chatter notifications:\n"
              "- Handle by Emails: notifications are sent to your email address\n"
              "- Handle in Odoo: notifications appear in your Odoo Inbox")
-    res_users_settings_ids = fields.One2many('res.users.settings', 'user_id')
-    # Provide a target for relateds that is not a x2Many field.
-    res_users_settings_id = fields.Many2one('res.users.settings', string="Settings", compute='_compute_res_users_settings_id', search='_search_res_users_settings_id')
 
     _sql_constraints = [(
         "notification_type",
@@ -62,15 +59,6 @@ class Users(models.Model):
             else:
                 user.groups_id -= inbox_group
 
-    @api.depends('res_users_settings_ids')
-    def _compute_res_users_settings_id(self):
-        for user in self:
-            user.res_users_settings_id = user.res_users_settings_ids and user.res_users_settings_ids[0]
-
-    @api.model
-    def _search_res_users_settings_id(self, operator, operand):
-        return [('res_users_settings_ids', operator, operand)]
-
     # ------------------------------------------------------------
     # CRUD
     # ------------------------------------------------------------

--- a/addons/mail/models/res_users_settings.py
+++ b/addons/mail/models/res_users_settings.py
@@ -5,11 +5,8 @@ from odoo import api, fields, models
 
 
 class ResUsersSettings(models.Model):
-    _name = 'res.users.settings'
-    _description = 'User Settings'
-    _rec_name = 'user_id'
+    _inherit = 'res.users.settings'
 
-    user_id = fields.Many2one('res.users', string="User", required=True, readonly=True, ondelete='cascade')
     is_discuss_sidebar_category_channel_open = fields.Boolean(string="Is discuss sidebar category channel open?", default=True)
     is_discuss_sidebar_category_chat_open = fields.Boolean(string="Is discuss sidebar category chat open?", default=True)
 
@@ -19,37 +16,18 @@ class ResUsersSettings(models.Model):
     voice_active_duration = fields.Integer(string="Duration of voice activity in ms", help="How long the audio broadcast will remain active after passing the volume threshold")
     volume_settings_ids = fields.One2many('res.users.settings.volumes', 'user_setting_id', string="Volumes of other partners")
 
-    _sql_constraints = [
-        ('unique_user_id', 'UNIQUE(user_id)', 'One user should only have one mail user settings.')
-    ]
-
     @api.model
-    def _find_or_create_for_user(self, user):
-        settings = user.sudo().res_users_settings_ids
-        if not settings:
-            settings = self.sudo().create({'user_id': user.id})
-        return settings
-
-    def _res_users_settings_format(self, fields_to_format=None):
-        self.ensure_one()
-        if not fields_to_format:
-            fields_to_format = [name for name, field in self._fields.items() if name == 'id' or not field.automatic]
-        res = self._read_format(fnames=fields_to_format)[0]
-        if 'user_id' in fields_to_format:
-            res['user_id'] = {'id': self.user_id.id}
+    def _format_settings(self, fields_to_format):
+        res = super()._format_settings(fields_to_format)
         if 'volume_settings_ids' in fields_to_format:
             volume_settings = self.volume_settings_ids._discuss_users_settings_volume_format()
             res['volume_settings_ids'] = [('insert', volume_settings)]
         return res
 
     def set_res_users_settings(self, new_settings):
-        self.ensure_one()
-        changed_settings = {}
-        for setting in new_settings.keys():
-            if setting in self._fields and new_settings[setting] != self[setting]:
-                changed_settings[setting] = new_settings[setting]
-        self.write(changed_settings)
-        self.env['bus.bus']._sendone(self.user_id.partner_id, 'mail.record/insert', {'res.users.settings': self._res_users_settings_format([*changed_settings.keys(), 'id'])})
+        formated = super().set_res_users_settings(new_settings)
+        self.env['bus.bus']._sendone(self.user_id.partner_id, 'mail.record/insert', {'res.users.settings': formated})
+        return formated
 
     def set_volume_setting(self, partner_id, volume, guest_id=None):
         """
