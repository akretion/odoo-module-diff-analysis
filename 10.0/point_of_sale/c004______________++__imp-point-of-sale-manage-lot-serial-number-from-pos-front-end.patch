PR: https://github.com/odoo/odoo/pull/

From: 8f39c652c65c81d87503d64eeef0da3e0048ffc9
From: Mitali Patel
Date: 2016-06-13 08:19:01

Structural Changes: 6
Total Changes: 59

[IMP] point_of_sale: manage lot/serial number from POS front-end

Frontend:
- When product has lot/serial tracking open popup for accept lot/serial
  number when it selected.
- Add icon in order line to show related lot/serial number and it
  indicate status of product lot
- User can add or remove product by lot from current lot dialog box
- Order line quantity don't match with lot line quantity show warning
  message

Back End:
- Added model `pos.pack.operation.lot` to manage product lot related
  with pos order
- Added state button in pos session form view to show pickings which are
  not in 'Done' stage

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/pos_order.py
+++ b/addons/point_of_sale/models/pos_order.py
@@ -589,9 +589,7 @@ class PosOrder(models.Model):
             if picking_id:
                 picking_id.action_confirm()
                 picking_id.force_assign()
-                # Mark pack operations as done
-                for pack in picking_id.pack_operation_ids:
-                    pack.write({'qty_done': pack.product_qty})
+                order.set_pack_operation_lot()
                 picking_id.action_done()
             elif Move:
                 Move.action_confirm()
@@ -599,6 +597,34 @@ class PosOrder(models.Model):
                 Move.action_done()
         return True
 
+    def set_pack_operation_lot(self):
+        """Set Serial/Lot number in pack operations to mark the pack operation done."""
+
+        StockProductionLot = self.env['stock.production.lot']
+        PosPackOperationLot = self.env['pos.pack.operation.lot']
+
+        for order in self:
+            for pack_operation in order.picking_id.pack_operation_ids:
+                qty = 0
+                qty_done = 0
+                pack_lots = []
+                pos_pack_lots = PosPackOperationLot.search([('order_id', '=',  order.id), ('product_id', '=', pack_operation.product_id.id)])
+                pack_lot_names = [pos_pack.lot_name for pos_pack in pos_pack_lots]
+
+                if pack_lot_names:
+                    for lot_name in list(set(pack_lot_names)):
+                        stock_production_lot = StockProductionLot.search([('name', '=', lot_name), ('product_id', '=', pack_operation.product_id.id)])
+                        if stock_production_lot:
+                            if stock_production_lot.product_id.tracking == 'lot':
+                                qty = pack_lot_names.count(lot_name)
+                            else:
+                                qty = 1.0
+                            qty_done += qty
+                            pack_lots.append({'lot_id': stock_production_lot.id, 'qty': qty})
+                else:
+                    qty_done = pack_operation.product_qty
+                pack_operation.write({'pack_lot_ids': map(lambda x: (0, 0, x), pack_lots), 'qty_done': qty_done})
+
     def add_payment(self, data):
         """Create a new payment for the order"""
         args = {
@@ -704,6 +730,7 @@ class PosOrderLine(models.Model):
     create_date = fields.Datetime(string='Creation Date', readonly=True)
     tax_ids = fields.Many2many('account.tax', string='Taxes', readonly=True)
     tax_ids_after_fiscal_position = fields.Many2many('account.tax', compute='_get_tax_ids_after_fiscal_position', string='Taxes')
+    pack_lot_ids = fields.One2many('pos.pack.operation.lot', 'pos_order_line_id', string='Lot/serial Number')
 
     @api.depends('price_unit', 'tax_ids', 'qty', 'discount', 'product_id')
     def _compute_amount_line_all(self):
@@ -752,3 +779,13 @@ class PosOrderLine(models.Model):
     def _get_tax_ids_after_fiscal_position(self):
         for line in self:
             line.tax_ids_after_fiscal_position = line.order_id.fiscal_position_id.map_tax(line.tax_ids)
+
+
+class PosOrderLineLot(models.Model):
+    _name = "pos.pack.operation.lot"
+    _description = "Specify product lot/serial number in pos order line"
+
+    pos_order_line_id = fields.Many2one('pos.order.line')
+    order_id = fields.Many2one('pos.order', related="pos_order_line_id.order_id")
+    lot_name = fields.Char('Lot Name')
+    product_id = fields.Many2one('product.product', related='pos_order_line_id.product_id')

--- a/addons/point_of_sale/models/pos_session.py
+++ b/addons/point_of_sale/models/pos_session.py
@@ -88,9 +88,25 @@ class PosSession(models.Model):
         string='Available Payment Methods')
     order_ids = fields.One2many('pos.order', 'session_id',  string='Orders')
     statement_ids = fields.One2many('account.bank.statement', 'pos_session_id', string='Bank Statement', readonly=True)
+    picking_count = fields.Integer(compute='_compute_picking_count')
 
     _sql_constraints = [('uniq_name', 'unique(name)', _("The name of this POS Session must be unique !"))]
 
+    @api.multi
+    def _compute_picking_count(self):
+        for pos in self:
+            pickings = pos.order_ids.mapped('picking_id').filtered(lambda x: x.state != 'done')
+            pos.picking_count = len(pickings.ids)
+
+    @api.multi
+    def action_stock_picking(self):
+        pickings = self.order_ids.mapped('picking_id').filtered(lambda x: x.state != 'done')
+        action_picking = self.env.ref('stock.action_picking_tree_ready')
+        action = action_picking.read()[0]
+        action['context'] = {}
+        action['domain'] = [('id', 'in', pickings.ids)]
+        return action
+
     @api.depends('cash_control', 'cash_journal_id', 'config_id.cash_control')
     def _compute_cash_all(self):
         for session in self:
