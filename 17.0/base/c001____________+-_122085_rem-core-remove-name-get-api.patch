PR: https://github.com/odoo/odoo/pull/122085

From: 3c62ca1eb96d571b2b686b5caee370324c589ab4
From: RÃ©my Voet (ryv)
Date: 2023-06-28 15:41:19

Structural Changes: 2.9
Total Changes: 171

[REM] core: remove `name_get` API

Rationale
=========

Since v8, the `display_name` field is present on all models. By default,
`display_name` uses `name_get` which has pretty much the same purpose
(return record name used by the web client). Gradually, many (backend)
developers (and the ORM: https://github.com/odoo/odoo/commit/6da1c3ac4c036eac289597602976538e243cb939)
started using `display_name` (more convenient than
`record.name_get()[0][1]`) but it still had the `name_get` override.
It becomes more complex than necessary and poeple start to misunderstand
the two (and sometimes override both, leading to inconstiencies between
`display_name`/`name_get`).

To simplify the ORM and the API, we decided to keep only one of them,
the `display_name` field:
- It is much more convenient from a backend point of view
(`record.name_get()[0][1]` vs `record.display_name`)
- It is cached during the same transaction (and invalidated if
its dependencies change)
- It can be overridden like any other compute field (override
`_compute_display_name` with any extra dependencies)
- `name_get` is replaced by `read(['display_name'])`
(API perceptive), which can actually be more efficient
(if `display_name`'s depends are correct, the ORM will only fetch the
fields it needs instead of every prefetchable field)

Changes
=======

- Deprecates `name_get` for the v17 and based the method on
`display_name` (the opposite of before)
- Converts all usage of `name_get`
- Overrides of `name_get` are now overrides of `_compute_display_name`
- For `res.partner`, rename the field store `display_name` into
`complete_name` because `display_name` context-dependent and it makes
no sense to have a compute store that is context-dependent.
- Previously, it was possible to return multiple names for the same
record with `name_get`, but it was tricky and most of the usage of
this `name_get` didn't take this into account. The only example of
this is the `name_get` of `product.product`
(now use `", ".join(<names>)`).

Part-of: odoo/odoo#122085

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/ir_fields.py
+++ b/odoo/addons/base/models/ir_fields.py
@@ -398,7 +398,7 @@ class IrFieldsConverter(models.AbstractModel):
         :param model: model to which the field belongs
         :param field: relational field for which references are provided
         :param subfield: a relational subfield allowing building of refs to
-                         existing records: ``None`` for a name_get/name_search,
+                         existing records: ``None`` for a name_search,
                          ``id`` for an external id and ``.id`` for a database
                          id
         :param value: value of the reference to match to an actual record
@@ -542,7 +542,7 @@ class IrFieldsConverter(models.AbstractModel):
         :return: the record subfield to use for referencing and a list of warnings
         :rtype: str, list
         """
-        # Can import by name_get, external id or database id
+        # Can import by display_name, external id or database id
         fieldset = set(record)
         if fieldset - REFERENCING_FIELDS:
             raise ValueError(

--- a/odoo/addons/base/models/ir_model.py
+++ b/odoo/addons/base/models/ir_model.py
@@ -371,11 +371,11 @@ class IrModel(models.Model):
     @api.model
     def name_create(self, name):
         """ Infer the model from the name. E.g.: 'My New Model' should become 'x_my_new_model'. """
-        vals = {
+        ir_model = self.create({
             'name': name,
             'model': 'x_' + '_'.join(name.lower().split(' ')),
-        }
-        return self.create(vals).name_get()[0]
+        })
+        return ir_model.id, ir_model.display_name
 
     def _reflect_model_params(self, model):
         """ Return the values to write to the database for the given model. """
@@ -1042,11 +1042,9 @@ class IrModelFields(models.Model):
             self.clear_caches()
         return res
 
-    def name_get(self):
-        res = []
+    def _compute_display_name(self):
         for field in self:
-            res.append((field.id, '%s (%s)' % (field.field_description, field.model)))
-        return res
+            field.display_name = f'{field.field_description} ({field.model})'
 
     def _reflect_field_params(self, field, model_id):
         """ Return the values to write to the database for the given field. """
@@ -1998,22 +1996,14 @@ class IrModelData(models.Model):
                            self._table, ['model', 'res_id'])
         return res
 
-    def name_get(self):
-        model_id_name = defaultdict(dict)       # {res_model: {res_id: name}}
-        for xid in self:
-            model_id_name[xid.model][xid.res_id] = None
-
-        # fill in model_id_name with name_get() of corresponding records
-        for model, id_name in model_id_name.items():
-            try:
-                ng = self.env[model].browse(id_name).name_get()
-                id_name.update(ng)
-            except Exception:
-                pass
-
-        # return results, falling back on complete_name
-        return [(xid.id, model_id_name[xid.model][xid.res_id] or xid.complete_name)
-                for xid in self]
+    def _compute_display_name(self):
+        for model, model_data_records in self.grouped('model').items():
+            records = self.env[model].browse(model_data_records.mapped('res_id'))
+            for xid, target_record in zip(model_data_records, records):
+                try:
+                    xid.display_name = target_record.display_name or xid.complete_name
+                except Exception:  # pylint: disable=broad-except
+                    xid.display_name = xid.complete_name
 
     # NEW V8 API
     @api.model

--- a/odoo/addons/base/models/ir_qweb_fields.py
+++ b/odoo/addons/base/models/ir_qweb_fields.py
@@ -777,16 +777,15 @@ class Contact(models.AbstractModel):
             opsep = Markup('<br/>')
 
         value = value.sudo().with_context(show_address=True)
-        name_get = value.name_get()[0][1]
         # Avoid having something like:
-        # name_get = 'Foo\n  \n' -> This is a res.partner with a name and no address
+        # display_name = 'Foo\n  \n' -> This is a res.partner with a name and no address
         # That would return markup('<br/>') as address. But there is no address set.
-        if any(elem.strip() for elem in name_get.split("\n")[1:]):
-            address = opsep.join(name_get.split("\n")[1:]).strip()
+        if any(elem.strip() for elem in value.display_name.split("\n")[1:]):
+            address = opsep.join(value.display_name.split("\n")[1:]).strip()
         else:
             address = ''
         val = {
-            'name': name_get.split("\n")[0],
+            'name': value.display_name.split("\n")[0],
             'address': address,
             'phone': value.phone,
             'mobile': value.mobile,

--- a/odoo/addons/base/models/ir_ui_menu.py
+++ b/odoo/addons/base/models/ir_ui_menu.py
@@ -155,8 +155,9 @@ class IrUiMenu(models.Model):
         # to be consistent with search() above
         return len(self.search(domain, limit=limit))
 
-    def name_get(self):
-        return [(menu.id, menu._get_full_name()) for menu in self]
+    def _compute_display_name(self):
+        for menu in self:
+            menu.display_name = menu._get_full_name()
 
     @api.model_create_multi
     def create(self, vals_list):

--- a/odoo/addons/base/models/res_bank.py
+++ b/odoo/addons/base/models/res_bank.py
@@ -30,12 +30,10 @@ class Bank(models.Model):
     active = fields.Boolean(default=True)
     bic = fields.Char('Bank Identifier Code', index=True, help="Sometimes called BIC or Swift.")
 
-    def name_get(self):
-        result = []
+    def _compute_display_name(self):
         for bank in self:
             name = (bank.name or '') + (bank.bic and (' - ' + bank.bic) or '')
-            result.append((bank.id, name))
-        return result
+            bank.display_name = name
 
     @api.model
     def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None):
@@ -113,9 +111,9 @@ class ResPartnerBank(models.Model):
         """
         return 'bank'
 
-    def name_get(self):
-        return [(acc.id, '{} - {}'.format(acc.acc_number, acc.bank_id.name) if acc.bank_id else acc.acc_number)
-                for acc in self]
+    def _compute_display_name(self):
+        for acc in self:
+            acc.display_name = f'{acc.acc_number} - {acc.bank_id.name}' if acc.bank_id else acc.acc_number
 
     @api.model
     def _search(self, domain, offset=0, limit=None, order=None, access_rights_uid=None):

--- a/odoo/addons/base/models/res_config.py
+++ b/odoo/addons/base/models/res_config.py
@@ -639,12 +639,11 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
             return actions.read()[0]
         return {}
 
-    def name_get(self):
-        """ Override name_get method to return an appropriate configuration wizard
+    def _compute_display_name(self):
+        """ Override display_name method to return an appropriate configuration wizard
         name, and not the generated name."""
         action = self.env['ir.actions.act_window'].search([('res_model', '=', self._name)], limit=1)
-        name = action.name or self._name
-        return [(record.id, name) for record in self]
+        self.display_name = action.name or self._name
 
     @api.model
     def get_option_path(self, menu_xml_id):

--- a/odoo/addons/base/models/res_country.py
+++ b/odoo/addons/base/models/res_country.py
@@ -193,8 +193,6 @@ class CountryState(models.Model):
             if state_id not in first_state_ids
         ]
 
-    def name_get(self):
-        result = []
+    def _compute_display_name(self):
         for record in self:
-            result.append((record.id, "{} ({})".format(record.name, record.country_id.code)))
-        return result
+            record.display_name = f"{record.name} ({record.country_id.code})"

--- a/odoo/addons/base/models/res_currency.py
+++ b/odoo/addons/base/models/res_currency.py
@@ -156,9 +156,6 @@ class Currency(models.Model):
         for currency in self:
             currency.date = currency.rate_ids[:1].name
 
-    def name_get(self):
-        return [(currency.id, tools.ustr(currency.name)) for currency in self]
-
     def amount_to_text(self, amount):
         self.ensure_one()
         def _num2words(number, lang):

--- a/odoo/addons/base/models/res_partner.py
+++ b/odoo/addons/base/models/res_partner.py
@@ -128,25 +128,23 @@ class PartnerCategory(models.Model):
         if not self._check_recursion():
             raise ValidationError(_('You can not create recursive tags.'))
 
-    def name_get(self):
+    def _compute_display_name(self):
         """ Return the categories' display name, including their direct
             parent by default.
         """
-        res = []
         for category in self:
             names = []
             current = category
             while current:
                 names.append(current.name)
                 current = current.parent_id
-            res.append((category.id, ' / '.join(reversed(names))))
-        return res
+            category.display_name = ' / '.join(reversed(names))
 
     @api.model
     def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None):
         domain = domain or []
         if name:
-            # Be sure name_search is symetric to name_get
+            # Be sure name_search is symetric to display_name
             name = name.split(' / ')[-1]
             domain = [('name', operator, name)] + domain
         return self._search(domain, limit=limit, order=order)
@@ -165,8 +163,11 @@ class Partner(models.Model):
     _description = 'Contact'
     _inherit = ['format.address.mixin', 'avatar.mixin']
     _name = "res.partner"
-    _order = "display_name, id"
-    _rec_names_search = ['display_name', 'email', 'ref', 'vat', 'company_registry']  # TODO vat must be sanitized the same way for storing/searching
+    _order = "complete_name, id"
+    _rec_names_search = ['complete_name', 'email', 'ref', 'vat', 'company_registry']  # TODO vat must be sanitized the same way for storing/searching
+
+    # the partner types that must be added to a partner's complete name, like "Delivery"
+    _complete_name_displayed_types = ('invoice', 'delivery', 'other')
 
     def _default_category(self):
         return self.env['res.partner.category'].browse(self._context.get('category_id'))
@@ -189,7 +190,7 @@ class Partner(models.Model):
         return values
 
     name = fields.Char(index=True, default_export_compatible=True)
-    display_name = fields.Char(compute='_compute_display_name', recursive=True, store=True, index=True)
+    complete_name = fields.Char(compute='_compute_complete_name', store=True, index=True)
     date = fields.Date(index=True)
     title = fields.Many2one('res.partner.title')
     parent_id = fields.Many2one('res.partner', string='Related Company', index=True)
@@ -332,12 +333,22 @@ class Partner(models.Model):
             return "base/static/img/money.png"
         return super()._avatar_get_placeholder_path()
 
-    @api.depends('is_company', 'name', 'parent_id.display_name', 'type', 'company_name', 'commercial_company_name')
-    def _compute_display_name(self):
-        # retrieve name_get() without any fancy feature
-        names = dict(self.with_context({}).name_get())
+    @api.depends('is_company', 'name', 'parent_id.name', 'type', 'company_name', 'commercial_company_name')
+    def _compute_complete_name(self):
+        displayed_types = self._complete_name_displayed_types
+        # determine the labels of partner types to be included
+        # as 'displayed_types' (without user lang to avoid context dependency)
+        type_description = dict(self._fields['type']._description_selection(self.with_context({}).env))
+
         for partner in self:
-            partner.display_name = names.get(partner.id)
+            name = partner.name or ''
+            if partner.company_name or partner.parent_id:
+                if not name and partner.type in displayed_types:
+                    name = type_description[partner.type]
+                if not partner.is_company:
+                    name = f"{partner.commercial_company_name or partner.sudo().parent_id.name}, {name}"
+
+            partner.complete_name = name.strip()
 
     @api.depends('lang')
     def _compute_active_lang_count(self):
@@ -803,39 +814,25 @@ class Partner(models.Model):
                 'target': 'new',
                 }
 
-    def _get_contact_name(self, partner, name):
-        return "%s, %s" % (partner.commercial_company_name or partner.sudo().parent_id.name, name)
-
-    def _get_name(self):
-        """ Utility method to allow name_get to be overrided without re-browse the partner """
-        partner = self
-        name = partner.name or ''
-
-        if partner.company_name or partner.parent_id:
-            if not name and partner.type in ['invoice', 'delivery', 'other']:
-                name = dict(self.fields_get(['type'])['type']['selection'])[partner.type]
-            if not partner.is_company:
-                name = self._get_contact_name(partner, name)
-        if self._context.get('show_address'):
-            name = name + "\n" + partner._display_address(without_company=True)
-        name = re.sub(r'\s+\n', '\n', name)
-        if self._context.get('partner_show_db_id'):
-            name = "%s (%s)" % (name, partner.id)
-        if self._context.get('address_inline'):
-            splitted_names = name.split("\n")
-            name = ", ".join([n for n in splitted_names if n.strip()])
-        if self._context.get('show_email') and partner.email:
-            name = "%s <%s>" % (name, partner.email)
-        if self._context.get('show_vat') and partner.vat:
-            name = "%s â %s" % (name, partner.vat)
-        return name.strip()
-
-    def name_get(self):
-        res = []
+    @api.depends('complete_name')
+    @api.depends_context('show_address', 'partner_show_db_id', 'address_inline', 'show_email', 'show_vat')
+    def _compute_display_name(self):
         for partner in self:
-            name = partner._get_name()
-            res.append((partner.id, name))
-        return res
+            name = partner.complete_name
+            if partner._context.get('show_address'):
+                name = name + "\n" + partner._display_address(without_company=True)
+            name = re.sub(r'\s+\n', '\n', name)
+            if partner._context.get('partner_show_db_id'):
+                name = f"{name} ({partner.id})"
+            if partner._context.get('address_inline'):
+                splitted_names = name.split("\n")
+                name = ", ".join([n for n in splitted_names if n.strip()])
+            if partner._context.get('show_email') and partner.email:
+                name = f"{name} <{partner.email}>"
+            if partner._context.get('show_vat') and partner.vat:
+                name = f"{name} â {partner.vat}"
+
+            partner.display_name = name.strip()
 
     def _parse_partner_name(self, text):
         """ Parse partner name (given by text) in order to find a name and an
@@ -891,7 +888,7 @@ class Partner(models.Model):
         if email:  # keep default_email in context
             create_values['email'] = email
         partner = self.create(create_values)
-        return partner.name_get()[0]
+        return partner.id, partner.display_name
 
     @api.model
     def _search(self, domain, offset=0, limit=None, order=None, access_rights_uid=None):
