PR: https://github.com/odoo/odoo/pull/137502

From: e9331147ffb1b780e7280c9fc84196e371761a6c
From: Leonardo Pavan Rocha
Date: 2023-10-12 16:12:04

Breaking data model changes scores: del:11 + add:0, change matches:
-    weekday = fields.Integer(compute="_compute_weekday", store=True)
-    weekly = fields.Boolean(default=False)
-    start_date = fields.Date(string="Start Date")
-    today_next_date = fields.Date(compute="_compute_today_next_date")
-    end_date_create = fields.Date(help="used in computations on employee location pop-up in calendar view.")
-    removed = fields.Boolean(default=False, help="User removed worklocation on one day that has a weekly location")
-    parent_default_homeworking_id = fields.Many2one("hr.employee.location", help="original weekly worklocation on a removed worklocation", ondelete="cascade")
-    child_removed_ids = fields.One2many("hr.employee.location", 'parent_default_homeworking_id')
-    current_location = fields.Boolean(default=True, help="Whether the record is the most recent weekly worklocation")
-    end_date = fields.Date(help="end date of a previous weekly worklocation (as opposed to current worklocation)")

Total Changes: 466

[IMP] hr_homeworking: simplify module to reduce amount of records stored

This commit changes how hr_homeworking deals with hr.employee.homework records.
Before this, an hr.employee.homework record was created for each day of the
week, even if it was the default location of the employee. This commit reworks
how homeworking deals with them to reduce the amount of records generated.

Now default employee locations don't generate records. They are rendered in the
calendar view as ghost events. For exceptions, we allow only creating a single
exception per day. If an employee sets an exception as 'weekly', it sets that
location as the default one for the employee on that day of the week. Not
having to deal with recurrencies makes the homeworking code simpler to manage
as well. Also exceptions are, by definition, not common. So we shouldn't expect
a lot of exception records to be created.

task-3527196

Part-of: odoo/odoo#137502

================================= pseudo patch: =================================

--- a/addons/hr_homeworking/models/hr_employee.py
+++ b/addons/hr_homeworking/models/hr_employee.py
@@ -1,10 +1,9 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from collections import defaultdict
-from datetime import timedelta
-from dateutil.rrule import rrule, WEEKLY
 
 from odoo import _, api, fields, models
+from odoo.tools import DEFAULT_SERVER_DATE_FORMAT
 
 from .hr_homeworking import DAYS
 
@@ -12,13 +11,17 @@ from .hr_homeworking import DAYS
 class HrEmployeeBase(models.AbstractModel):
     _inherit = "hr.employee.base"
 
-    monday_location_id = fields.Many2one('hr.work.location', string='Monday')
-    tuesday_location_id = fields.Many2one('hr.work.location', string='Tuesday')
-    wednesday_location_id = fields.Many2one('hr.work.location', string='Wednesday')
-    thursday_location_id = fields.Many2one('hr.work.location', string='Thursday')
-    friday_location_id = fields.Many2one('hr.work.location', string='Friday')
-    saturday_location_id = fields.Many2one('hr.work.location', string='Saturday')
-    sunday_location_id = fields.Many2one('hr.work.location', string='Sunday')
+    @api.model
+    def _default_location_id(self):
+        return self.env.ref('hr.home_work_office')
+
+    monday_location_id = fields.Many2one('hr.work.location', string='Monday', default=lambda self: self._default_location_id())
+    tuesday_location_id = fields.Many2one('hr.work.location', string='Tuesday', default=lambda self: self._default_location_id())
+    wednesday_location_id = fields.Many2one('hr.work.location', string='Wednesday', default=lambda self: self._default_location_id())
+    thursday_location_id = fields.Many2one('hr.work.location', string='Thursday', default=lambda self: self._default_location_id())
+    friday_location_id = fields.Many2one('hr.work.location', string='Friday', default=lambda self: self._default_location_id())
+    saturday_location_id = fields.Many2one('hr.work.location', string='Saturday', default=lambda self: self._default_location_id())
+    sunday_location_id = fields.Many2one('hr.work.location', string='Sunday', default=lambda self: self._default_location_id())
     exceptional_location_id = fields.Many2one(
         'hr.work.location', string='Current',
         compute='_compute_exceptional_location_id',
@@ -57,8 +60,7 @@ class HrEmployeeBase(models.AbstractModel):
         today = fields.Date.today()
         current_employee_locations = self.env['hr.employee.location'].search([
             ('employee_id', 'in', self.ids),
-            ('start_date', '=', today),
-            ('weekly', '=', False)
+            ('date', '=', today),
         ])
         employee_work_locations = {l.employee_id.id: l.work_location_id for l in current_employee_locations}
 
@@ -77,127 +79,37 @@ class HrEmployeeBase(models.AbstractModel):
             employee.show_hr_icon_display = True
 
     def _get_worklocation(self, start_date, end_date):
-        worklocations = self.env['hr.employee.location'].search([
+        work_locations_by_employee = defaultdict(dict)
+        for employee in self:
+            work_locations_by_employee[employee.id]["user_id"] = employee["user_id"].id
+            work_locations_by_employee[employee.id]["employee_id"] = employee.id
+            work_locations_by_employee[employee.id]["partner_id"] = employee["user_partner_id"].id
+            work_locations_by_employee[employee.id]["employee_name"] = employee.name
+
+            for day in DAYS:
+                work_locations_by_employee[employee.id][day] = {
+                    'location_type': employee[day]["location_type"],
+                    'location_name': employee[day]["name"],
+                    'work_location_id': employee[day].id,
+                }
+
+        exceptions_for_period = self.env['hr.employee.location'].search_read([
             ('employee_id', 'in', self.ids),
-            '|',
-                '&', '&',
-                    ('start_date', '<=', end_date),
-                    ('start_date', '>=', start_date),
-                    ('weekly', '=', False),
-                '&', '&',
-                    ('start_date', '<=', end_date),
-                    '|',
-                        ('end_date', '>=', start_date),
-                        ('end_date', '=', False),
-                    ('weekly', '=', True),
-        ], order='start_date ASC')
-        worklocation_default = worklocations.filtered('weekly')
-        worklocations_exception = worklocations - worklocation_default
-        week_start = int(self.env['res.lang']._lang_get(self.env.user.lang).week_start) - 1  # week_start is 1 indexed
-
-        # 1. Get all exceptional dates in the range
-        worklocation_data = defaultdict(list)
-        date_exception = defaultdict(set)
-        for index, worklocation in enumerate(worklocations_exception):
-            if not worklocation.removed:
-                worklocation_data[worklocation.employee_id.id].append({
-                    'resModel': "hr.employee.location",
-                    'idInDB': worklocation.id,
-                    'id': index,
-                    'title': worklocation.work_location_name,
-                    'date': worklocation.start_date,
-                    'location_id': worklocation.work_location_id.id,
-                    'weekly': False,
-                    'icon': worklocation.work_location_type,
-                    'userId': worklocation.employee_id.user_id.id,
-                    'partner_id': [worklocation.employee_id.work_contact_id.id]  # frontend expects a list (google_calendar)
-                })
-            date_exception[worklocation.employee_id.id].add(worklocation.start_date)
-
-        # 2. Get all weekly (default) dates in the range
-        index = len(worklocations_exception.ids)
-        start_date = fields.Datetime.to_datetime(start_date).date()
-        end_date = fields.Datetime.to_datetime(end_date).date()
-        for worklocation in worklocation_default:
-            start = max(worklocation.start_date, start_date)  # the recurring location might have been set before our date_range, discard locations before that
-            end = worklocation.end_date or end_date
-            days_list = list(rrule(WEEKLY, start, byweekday=worklocation.start_date.weekday(), wkst=week_start, until=end))
-            if not days_list:
-                continue
-            days_list = [x.date() for x in days_list]
-            final_days_list = []
-            for day in days_list:
-                if day not in date_exception[worklocation.employee_id.id]:
-                    final_days_list.append(day)
-            for index_intern, final_day in enumerate(final_days_list):
-                worklocation_data[worklocation.employee_id.id].append({
-                    'resModel': "hr.employee.location",
-                    'idInDB': worklocation.id,
-                    'id': index_intern + index,
-                    'title': worklocation.work_location_name,
-                    'date': final_day,
-                    'location_id': worklocation.work_location_id.id,
-                    'weekly': True,
-                    'icon': worklocation.work_location_type,
-                    'userId': worklocation.employee_id.user_id.id,
-                    'partner_id': [worklocation.employee_id.work_contact_id.id]
-                })
-            index += len(final_days_list)
-
-        for employee in worklocation_data:
-            worklocation_data[employee].sort(key=lambda wl: (wl['title'], wl['date']))
-        return worklocation_data
-
-    @api.model_create_multi
-    def create(self, vals_list):
-        res = super().create(vals_list)
-        today = fields.Date.today()
-        homeworking_vals = []
-        for employee in res:
-            for day_index, field_name in enumerate(DAYS):
-                if not employee[field_name]:
-                    continue
-                day_offset = (day_index - today.weekday() + 7) % 7
-                date = today + timedelta(days=day_offset)
-                homeworking_vals.append({
-                    'employee_id': employee.id,
-                    'work_location_id': employee[field_name].id,
-                    'weekly': True,
-                    'start_date': date
-                })
-        self.env['hr.employee.location'].create(homeworking_vals)
-        return res
-
-    def write(self, values):
-        if self.env.context.get('no_loop'):
-            return super().write(values)
-        homeworking_vals = []
-        employee_locations_to_remove = defaultdict(set)
-        today = fields.Date.today()
-        for day_index, field_name in enumerate(DAYS):
-            if field_name not in values:
-                continue
-            if not values[field_name]:
-                for employee in self:
-                    employee_locations_to_remove[employee.id].add(day_index)
-            else:
-                day_offset = (day_index - today.weekday() + 7) % 7
-                date = today + timedelta(days=day_offset)
-                for employee in self:
-                    homeworking_vals.append({
-                        'employee_id': employee.id,
-                        'work_location_id': values[field_name],
-                        'weekly': True,
-                        'start_date': date
-                    })
-        if homeworking_vals:
-            self.env['hr.employee.location'].create(homeworking_vals)
-        if employee_locations_to_remove:
-            read_group = self.env['hr.employee.location']._read_group([
-                ('current_location', '=', True), ('employee_id', 'in', list(employee_locations_to_remove.keys()))],
-                groupby=['employee_id'], aggregates=['id:recordset']
-            )
-            for employee, locations in read_group:
-                if employee.id in employee_locations_to_remove:
-                    locations.filtered(lambda l: l.weekday in employee_locations_to_remove[employee.id]).delete_default_worklocation()
-        return super().write(values)
+            ('date', '>=', start_date),
+            ('date', '<=', end_date)
+        ], ['employee_id', 'date', 'work_location_name', 'work_location_id', 'work_location_type'])
+
+        for exception in exceptions_for_period:
+            date = exception["date"].strftime(DEFAULT_SERVER_DATE_FORMAT)
+            exception_value = {
+                'hr_employee_location_id': exception["id"],
+                'location_type': exception['work_location_type'],
+                'location_name': exception['work_location_name'],
+                'work_location_id': exception['work_location_id'][0],
+            }
+            employee_id = exception["employee_id"][0]
+            if "exception" not in work_locations_by_employee[employee_id]:
+                work_locations_by_employee[employee_id]["exceptions"] = {}
+            work_locations_by_employee[employee_id]["exceptions"][date] = exception_value
+
+        return work_locations_by_employee

--- a/addons/hr_homeworking/models/hr_homeworking.py
+++ b/addons/hr_homeworking/models/hr_homeworking.py
@@ -1,13 +1,8 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import _, api, fields, models
-from datetime import timedelta
-from odoo.addons.resource.models.utils import string_to_datetime, datetime_to_string
-from odoo.exceptions import ValidationError
-from dateutil.rrule import rrule, DAILY
 
 DAYS = ['monday_location_id', 'tuesday_location_id', 'wednesday_location_id', 'thursday_location_id', 'friday_location_id', 'saturday_location_id', 'sunday_location_id']
-DAYS_STRING = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
 
 
 class HrEmployeeLocation(models.Model):
@@ -19,287 +14,14 @@ class HrEmployeeLocation(models.Model):
     work_location_type = fields.Selection(related="work_location_id.location_type")
     employee_id = fields.Many2one('hr.employee', default=lambda self: self.env.user.employee_id, required=True, ondelete="cascade")
     employee_name = fields.Char(related="employee_id.name")
-    weekday = fields.Integer(compute="_compute_weekday", store=True)
-    weekly = fields.Boolean(default=False)
-    start_date = fields.Date(string="Start Date")
-    today_next_date = fields.Date(compute="_compute_today_next_date")
+    date = fields.Date(string="Date")
     day_week_string = fields.Char(compute="_compute_day_week_string")
-    end_date_create = fields.Date(help="used in computations on employee location pop-up in calendar view.")
-    removed = fields.Boolean(default=False, help="User removed worklocation on one day that has a weekly location")
-    parent_default_homeworking_id = fields.Many2one("hr.employee.location", help="original weekly worklocation on a removed worklocation", ondelete="cascade")
-    child_removed_ids = fields.One2many("hr.employee.location", 'parent_default_homeworking_id')
-    current_location = fields.Boolean(default=True, help="Whether the record is the most recent weekly worklocation")
-    end_date = fields.Date(help="end date of a previous weekly worklocation (as opposed to current worklocation)")
 
     _sql_constraints = [
-        ('uniq_exceptional_per_day', 'unique(employee_id, weekly, start_date, current_location)', 'Only one default work location and one exceptional work location per day per employee.'),
+        ('uniq_exceptional_per_day', 'unique(employee_id, date)', _('Only one default work location and one exceptional work location per day per employee.')),
     ]
 
-    @api.constrains("employee_id", "weekday", "current_location")
-    def _check_current(self):
-        for record in self:
-            if record.current_location:
-                if self.search_count([('employee_id', '=', record.employee_id.id), ('weekday', '=', record.weekday), ('current_location', '=', True)]) > 1:
-                    raise ValidationError(_('Only one current default work location per day per employee. can have some previous default work location'))
-
-    @api.depends('start_date', 'weekly')
-    def _compute_weekday(self):
-        for record in self:
-            if not record.weekly:
-                continue
-            if record.start_date:
-                record.weekday = record.start_date.weekday()
-
-    @api.depends('start_date', 'end_date_create')
-    def _compute_today_next_date(self):
-        today = fields.Date().today()
-        for record in self:
-            if record.start_date < today:
-                if record.end_date_create >= today:
-                    record.today_next_date = today
-                else:
-                    if record.start_date.weekday() <= today.weekday() and today.weekday() <= record.end_date_create.weekday():
-                        record.today_next_date = today
-                    else:
-                        offset = (record.start_date.weekday() - fields.Date.today().weekday() + 7) % 7
-                        record.today_next_date = today + timedelta(days=offset)
-            else:
-                record.today_next_date = record.start_date
-
-    @api.depends('start_date', 'end_date_create', 'weekly')
+    @api.depends('date')
     def _compute_day_week_string(self):
         for record in self:
-            if record.weekly and record.end_date_create - record.start_date > timedelta(days=7):
-                raise ValidationError(_('A weekly location cannot have a duration of more than 7 days'))
-            if (record.start_date > record.end_date_create):
-                record.end_date_create = record.start_date
-            weekdays_name = ""
-            if record.start_date.weekday() > record.end_date_create.weekday():
-                for i in range(0, record.end_date_create.weekday()):
-                    weekdays_name = weekdays_name + ", " + DAYS_STRING[i]
-                for i in range(record.start_date.weekday(), 7):
-                    weekdays_name = weekdays_name + ", " + DAYS_STRING[i]
-            else:
-                for i in range(record.start_date.weekday(), record.end_date_create.weekday() + 1):
-                    weekdays_name = weekdays_name + ", " + DAYS_STRING[i]
-            record.day_week_string = weekdays_name
-
-    def _save_previous_default_worklocation(self):
-        self.ensure_one()
-        if self.start_date >= fields.Date().today():
-            self.unlink()
-        else:
-            self.current_location = False
-            self.end_date = fields.Date().today() - timedelta(days=1)
-            self.child_removed_ids.filtered(lambda child: child.start_date >= fields.Date.today()).unlink()
-            return False
-
-    def _next_weekday_date_after_today(self, date):
-        today = fields.Date().today()
-        offset = (date.weekday() - fields.Date.today().weekday() + 7) % 7
-        return today + timedelta(days=offset)
-
-    def _removed_worklocation_to_active_worklocation(self, work_location_id):
-        self.update({
-            "removed": False,
-            "parent_default_homeworking_id": False,
-            "work_location_id": work_location_id,
-        })
-
-    def _check_exceptional_work_location(self, vals):
-        date = vals.get("start_date", self.start_date)
-        work = vals.get("work_location_id", self.work_location_id.id)
-        employee_id = vals.get("employee_id", self.employee_id.id)
-        exception_work_location = self.env['hr.employee.location'].search([
-            ('start_date', '=', date),
-            ('employee_id.id', '=', employee_id),
-            ('weekly', '=', False),
-            ('id', '!=', self.id),
-        ])
-        return exception_work_location, date, work, employee_id
-
-    def add_exceptional_worklocation(self, vals):
-        exceptional, date, work, employee_id = self._check_exceptional_work_location(vals)
-        if exceptional:
-            exceptional.unlink()
-        self.env['hr.employee.location'].create({
-            'work_location_id': work,
-            'employee_id': employee_id,
-            'start_date': date,
-        })
-        return True
-
-    def exceptional_worklocation_to_default_worklocation(self, vals, unlink=True):
-        default_date = vals.get("start_date")
-        if default_date:
-            default_date = string_to_datetime(default_date).date()
-        else:
-            default_date = self.start_date
-        date = default_date
-        default_work = self.env['hr.employee.location'].search([
-            ("employee_id.id", "=", self.employee_id.id),
-            ("weekday", "=", default_date.weekday()),
-            ("weekly", "=", True),
-            ("current_location", "=", True)
-        ])
-        self.env['hr.employee.location'].search([
-            ("employee_id.id", "=", self.employee_id.id),
-            ("start_date", "=", date),
-            ("removed", "=", True),
-        ]).unlink()
-        if default_date < fields.Date().today():
-            default_date = self._next_weekday_date_after_today(date)
-        if default_work:
-            default_work._save_previous_default_worklocation()
-        if date != default_date:
-            self.env['hr.employee.location'].create({
-                'employee_id': self.employee_id.id,
-                'start_date': default_date,
-                'work_location_id': vals.get("work_location_id", self.work_location_id.id),
-                'weekly': True
-            })
-            vals["weekly"] = False
-        if unlink:
-            self.unlink()
-        else:
-            if vals.get("work_location_id"):
-                self.work_location_id = vals["work_location_id"]
-        return vals
-
-    def add_removed_work_location(self, date):
-        self.ensure_one()
-        self.env['hr.employee.location'].create({
-            'work_location_id': self.work_location_id.id,
-            'employee_id': self.employee_id.id,
-            'start_date': date,
-            'removed': True,
-            'parent_default_homeworking_id': self.id,
-        })
-
-    def delete_default_worklocation(self):
-        self.ensure_one()
-        self.employee_id.with_context(no_loop=True).write({DAYS[self.weekday]: False})
-        self._save_previous_default_worklocation()
-
-    def _get_new_worklocation_vals(self, vals):
-        date = vals.get("start_date")
-        except_vals = {
-            "start_date": date,
-            "work_location_id": vals.get("work_location_id", self.work_location_id.id),
-            "weekly": vals.get("weekly", self.weekly),
-            "employee_id": vals.get("employee_id", self.employee_id.id),
-        }
-        # to not rewrite the past
-        self._save_previous_default_worklocation()
-        values = vals
-        employeeLocation = self.env['hr.employee.location']
-        if date < fields.Date().today():
-            employeeLocation.add_exceptional_worklocation(except_vals)
-            values["start_date"] = employeeLocation._next_weekday_date_after_today(date)
-        return values
-
-    # create a default worklocation with values in vals and manages the link between the different records
-    def create_default_worklocation(self, vals, from_create=False, unlink=True):
-        date = vals.get("start_date", self.start_date)
-        employee_id = vals.get("employee_id", self.employee_id.id)
-        work_location_id = vals.get("work_location_id", self.work_location_id.id)
-        default_work_location = self.env['hr.employee.location'].search([
-            ("employee_id.id", "=", employee_id),
-            ("weekly", "=", True),
-            ("weekday", "=", date.weekday()),
-            ("current_location", "=", True),
-            ("id", "!=", self.id)
-        ])
-        if default_work_location:
-            val = default_work_location._get_new_worklocation_vals({
-                "start_date": date,
-                "employee_id": employee_id,
-                "work_location_id": work_location_id
-            })
-            vals["start_date"] = val.get("start_date", date)
-            if from_create:
-                return vals
-            else:
-                values = {
-                    "start_date": val.get("start_date", date),
-                    "employee_id": employee_id,
-                    "work_location_id": work_location_id,
-                    "weekly": True,
-                }
-                return super().create(values)
-        else:
-            exceptions, dummy, dummy, dummy = self._check_exceptional_work_location(vals)
-            if exceptions.filtered(lambda excep: excep.id != self.id):
-                exceptions.unlink()
-            if date < fields.Date().today():
-                new_values = {
-                    'start_date': date,
-                    'employee_id': employee_id,
-                    'work_location_id': work_location_id,
-                }
-                if from_create or (exceptions and exceptions.filtered(lambda excep: excep.id != self.id)):
-                    super().create(new_values)
-                else:
-                    super().write(new_values)
-                vals["start_date"] = self._next_weekday_date_after_today(date)
-            if from_create:
-                return vals
-            else:
-                vals.update({
-                    "work_location_id": work_location_id,
-                    "weekly": True,
-                    "start_date": date,
-                    "employee_id": employee_id,
-                })
-                return super().create(vals)
-
-    # clean values in vals_list to manage the link between record
-    def _clean_values_to_create(self, vals_list):
-        clean_vals_list = []
-        for vals in vals_list:
-            date = string_to_datetime(vals.get("start_date")).date()
-            employee_id = vals.get("employee_id") or self.env.context.get('default_employee_id') or self.env.user.employee_id.id
-            if vals.get("weekly"):
-                clean_vals_list.append(self.create_default_worklocation({
-                    'start_date': date,
-                    'employee_id': employee_id,
-                    'work_location_id': vals["work_location_id"],
-                    'weekly': True
-                }, from_create=True))
-            else:
-                exceptions_worklocation = self.env['hr.employee.location'].search([
-                    ("employee_id.id", "=", employee_id),
-                    ("weekly", "=", False),
-                    ("start_date", "=", date),
-                ])
-                worklocation_exception = exceptions_worklocation.filtered(lambda a: not a.removed)
-                if worklocation_exception:
-                    worklocation_exception.work_location_id = vals.get("work_location_id")
-                else:
-                    removed_worklocation_exception = exceptions_worklocation.filtered(lambda a: a.removed)
-                    if removed_worklocation_exception:
-                        removed_worklocation_exception._removed_worklocation_to_active_worklocation(vals.get("work_location_id"))
-                    else:
-                        clean_vals_list.append(vals)
-        return clean_vals_list
-
-    @api.model_create_multi
-    def create(self, vals_list):
-        extended_vals_list = []
-        for vals in vals_list:
-            if vals.get("end_date_create"):
-                start_date = string_to_datetime(vals.get("start_date")).date()
-                end_date = string_to_datetime(vals.get("end_date_create")).date()
-                days_list = list(rrule(DAILY, start_date, until=end_date))
-                vals.pop("end_date_create")
-                for day in days_list:
-                    extended_vals_list.append({**vals, **{"start_date": datetime_to_string(day)}})
-            else:
-                extended_vals_list.append(vals)
-        res = super().create(self._clean_values_to_create(extended_vals_list))
-        for wl in res:
-            if wl.weekly:
-                wl.employee_id.sudo().with_context(no_loop=True).write({DAYS[wl.weekday]: wl.work_location_id})
-        if len(vals_list) == 1 and len(extended_vals_list) != 1:
-            return res[0]
-        return res
+            record.day_week_string = record.date.strftime("%A")
