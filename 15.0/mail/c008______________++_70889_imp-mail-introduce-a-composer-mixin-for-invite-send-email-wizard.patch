PR: https://github.com/odoo/odoo/pull/70889

From: b19fe6dea552fa8300af2d3a4a51560ec588447d
From: Stéphane Debauche
Date: 2021-06-01 09:06:07

Structural Changes: 5
Total Changes: 53

[IMP] mail: introduce a composer mixin for invite / send email wizards

This commits introduces a new mixin ``mail.composer.mixin`` used when sending
emails or notifications based on a mail template.

Main current purpose is to hide details related to subject and body computation
and rendering based on a mail.template. It also give the base tools to control
who is allowed to edit body, notably when dealing with templating language
like jinja or qweb.

It is meant to evolve in a near future with upcoming support of qweb and fine
grain control of rendering access.

Task ID-2534550 (Template usage improvement)
Task ID-2477164 (Composer mixin)
COM PR odoo/odoo#70889
ENT PR odoo/enterprise#18352

Co-Authored-By: Stéphane Debauche <std@odoo.com>
Co-Authored-By: Thibault Delavallée <tde@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/__init__.py
+++ b/addons/mail/models/__init__.py
@@ -1,13 +1,15 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from . import mail_render_mixin
+from . import mail_composer_mixin
+
 from . import mail_message_subtype
 from . import mail_tracking_value
 from . import mail_alias
 from . import mail_alias_mixin
 from . import mail_followers
 from . import mail_notification
-from . import mail_render_mixin
 from . import mail_message
 from . import mail_activity
 from . import mail_mail

--- a/None
+++ b/addons/mail/models/mail_composer_mixin.py
@@ -0,0 +1,49 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class MailComposerMixin(models.AbstractModel):
+    """ Mixin used to edit and render some fields used when sending emails or
+    notifications based on a mail template.
+
+    Main current purpose is to hide details related to subject and body computation
+    and rendering based on a mail.template. It also give the base tools to control
+    who is allowed to edit body, notably when dealing with templating language
+    like jinja or qweb.
+
+    It is meant to evolve in a near future with upcoming support of qweb and fine
+    grain control of rendering access.
+    """
+    _name = 'mail.composer.mixin'
+    _inherit = 'mail.render.mixin'
+    _description = 'Mail Composer Mixin'
+
+    # Content
+    subject = fields.Char('Subject', compute='_compute_subject', readonly=False, store=True)
+    body = fields.Html('Contents', sanitize_style=True, compute='_compute_body', store=True, readonly=False)
+    template_id = fields.Many2one('mail.template', 'Mail Template', domain="[('model', '=', render_model)]")
+    # Access
+    can_edit_body = fields.Boolean('Can Edit Body', compute='_compute_can_edit_body')
+
+    @api.depends('template_id')
+    def _compute_subject(self):
+        for composer_mixin in self:
+            if composer_mixin.template_id:
+                composer_mixin.subject = composer_mixin.template_id.subject
+            elif not composer_mixin.subject:
+                composer_mixin.subject = False
+
+    @api.depends('template_id')
+    def _compute_body(self):
+        for composer_mixin in self:
+            if composer_mixin.template_id:
+                composer_mixin.body = composer_mixin.template_id.body_html
+            elif not composer_mixin.body:
+                composer_mixin.body = False
+
+    @api.depends('template_id')
+    @api.depends_context('uid')
+    def _compute_can_edit_body(self):
+        self.can_edit_body = True
