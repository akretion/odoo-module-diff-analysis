PR: https://github.com/odoo/odoo/pull/

From: b9c37e794ba33f02321d90c87075a0de0ee80256
From: Thibault DelavallÃ©e
Date: 2017-01-03 18:11:08

Breaking data model changes score: 2, change matches:
-    _inherit = 'base.automation'
-    trg_date_resource_field_id = fields.Many2one('ir.model.fields', string='Use employee work schedule', help='Use the user\'s working schedule.')

Total Changes: 60

[IMP] hr_contract: remove dependency to base_automation

Purpose of this commit is to remove the link between Hr Contracts and
base automation. This has two consequences

 * automated actions used to compute contracts state are transformed
   into scheduled actions. Crons will do the job just as fine;
 * option to use employee contract in automated actions is removed
   and put in its own bridge module;

This allows to remove the dependency between the two addons.

================================= pseudo patch: =================================

--- a/addons/hr_contract/models/__init__.py
+++ b/addons/hr_contract/models/__init__.py
@@ -1,5 +1,4 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-import base_automation
 import hr_contract

--- a/addons/hr_contract/models/base_automation.py
+++ b/None
@@ -1,27 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, fields, models
-from odoo.fields import Datetime
-
-
-class BaseAutomation(models.Model):
-    """ Add resource and calendar for time-based conditions """
-
-    _inherit = 'base.automation'
-
-    trg_date_resource_field_id = fields.Many2one('ir.model.fields', string='Use employee work schedule', help='Use the user\'s working schedule.')
-
-    @api.model
-    def _check_delay(self, action, record, record_dt):
-        """ Override the check of delay to try to use a user-related calendar.
-            If no calendar is found, fallback on the default behavior.
-        """
-        if action.trg_date_calendar_id and action.trg_date_range_type == 'day' and action.trg_date_resource_field_id:
-            user = record[action.trg_date_resource_field_id.name]
-            if user.employee_ids and user.employee_ids[0].contract_id and user.employee_ids[0].contract_id.working_hours:
-                calendar = user.employee_ids[0].contract_id.working_hours
-                start_dt = Datetime.from_string(record_dt)
-                resource_id = user.employee_ids[0].resource_id.id
-                return calendar.schedule_days_get_date(action.trg_date_range, day_date=start_dt, compute_leaves=True, resource_id=resource_id)
-        return super(BaseAutomation, self)._check_delay(action, record, record_dt)

--- a/addons/hr_contract/models/hr_contract.py
+++ b/addons/hr_contract/models/hr_contract.py
@@ -1,6 +1,9 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from datetime import date
+from dateutil.relativedelta import relativedelta
+
 from odoo import api, fields, models, _
 from odoo.exceptions import ValidationError
 
@@ -83,13 +86,28 @@ class Contract(models.Model):
         if self.filtered(lambda c: c.date_end and c.date_start > c.date_end):
             raise ValidationError(_('Contract start date must be less than contract end date.'))
 
-    @api.multi
-    def set_as_pending(self):
-        return self.write({'state': 'pending'})
-
-    @api.multi
-    def set_as_close(self):
-        return self.write({'state': 'close'})
+    @api.model
+    def update_to_pending(self):
+        soon_expired_contracts = self.search([
+            ('state', '=', 'open'),
+            '|',
+            ('date_end', '>=', fields.Date.to_string(date.today() + relativedelta(days=-7))),
+            ('visa_expire', '>=', fields.Date.to_string(date.today() + relativedelta(days=-60)))
+        ])
+        return soon_expired_contracts.write({
+            'state': 'pending'
+        })
+
+    @api.model
+    def update_to_close(self):
+        expired_contracts = self.search([
+            '|',
+            ('date_end', '>=', fields.Date.to_string(date.today() + relativedelta(days=1))),
+            ('visa_expire', '>=', fields.Date.to_string(date.today() + relativedelta(days=1)))
+        ])
+        return expired_contracts.write({
+            'state': 'close'
+        })
 
     @api.multi
     def _track_subtype(self, init_values):
