PR: https://github.com/odoo/odoo/pull/

From: 3cfd64f63f6153c170c9c876fa65976a95da22cb
From: JÃ©rome Maes
Date: 2017-08-16 12:56:40

Structural Changes: 3
Total Changes: 40

[MOV] portal,website_mail: move chatter frontend to portal

This split responsiblilies :
- portal provides basic chatter for portal document, and
website documents (slides, blog, ...).
- website_mail provides comments moderation (unpublished mail
message)
- website_rating integrate rating when posting comments

================================= pseudo patch: =================================

--- a/addons/portal/models/__init__.py
+++ b/addons/portal/models/__init__.py
@@ -1,4 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import portal_mixin
+from . import mail_thread
+from . import mail_message
+from . import portal_mixin
\ No newline at end of file

--- a/None
+++ b/addons/portal/models/mail_message.py
@@ -0,0 +1,24 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, models
+
+
+class MailMessage(models.Model):
+    _inherit = 'mail.message'
+
+    @api.multi
+    def portal_message_format(self):
+        return self._portal_message_format([
+            'id', 'body', 'date', 'author_id', 'email_from',  # base message fields
+            'message_type', 'subtype_id', 'subject',  # message specific
+            'model', 'res_id', 'record_name',  # document related
+            'website_published',
+        ])
+
+    @api.multi
+    def _portal_message_format(self, fields_list):
+        message_values = self.read(fields_list)
+        message_tree = dict((m.id, m) for m in self.sudo())
+        self._message_read_dict_postprocess(message_values, message_tree)
+        return message_values

--- a/None
+++ b/addons/portal/models/mail_thread.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class MailThread(models.AbstractModel):
+    _inherit = 'mail.thread'
+
+    website_message_ids = fields.One2many('mail.message', 'res_id', string='Website Messages',
+        domain=lambda self: [('model', '=', self._name), ('message_type', '=', 'comment')], auto_join=True,
+        help="Website communication history")
