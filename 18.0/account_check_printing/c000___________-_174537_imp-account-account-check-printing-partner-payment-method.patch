PR: https://github.com/odoo/odoo/pull/174537

From: cdd15963a512e260b5b69d9ec274799747484095
From: Maximilien (malb)
Date: 2024-08-13 17:23:40

Breaking data model changes scores: del:5 + add:0, change matches:
-    _inherit = 'account.move'
-    preferred_payment_method_id = fields.Many2one(
-    _inherit = "account.payment.register"
-    _inherit = 'res.partner'
-    property_payment_method_id = fields.Many2one(

Total Changes: 79

[IMP] account, account_check_printing: Partner Payment Method

This commit will add new fields of payment method on partner so that depending
on the partner put on a move or the payment we will be able to prefill the
payment method.

For the purchase part, the field was already existing in account_check_printing.
We moved it in account and we added a field for the sale document part.

Also changing the name of the group by for the payment method and allowing it on
all move type thanks to the new field.

closes odoo/odoo#174537

Task: 4016652
Related: odoo/enterprise#67350
Related: odoo/upgrade#6320
Signed-off-by: Laurent Smet (las) <las@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account_check_printing/models/__init__.py
+++ b/addons/account_check_printing/models/__init__.py
@@ -2,9 +2,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from . import account_journal
-from . import account_move
 from . import account_payment
 from . import account_payment_method
 from . import res_company
 from . import res_config_settings
-from . import res_partner

--- a/addons/account_check_printing/models/account_move.py
+++ b/None
@@ -1,33 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-
-from odoo import models, fields, api
-from odoo.tools.sql import column_exists, create_column
-
-
-class AccountMove(models.Model):
-    _inherit = 'account.move'
-
-    preferred_payment_method_id = fields.Many2one(
-        string="Preferred Payment Method",
-        comodel_name='account.payment.method',
-        compute='_compute_preferred_payment_method_idd',
-        store=True,
-    )
-
-    def _auto_init(self):
-        """ Create column for `preferred_payment_method_id` to avoid having it
-        computed by the ORM on installation. Since `property_payment_method_id` is
-        introduced in this module, there is no need for UPDATE
-        """
-        if not column_exists(self.env.cr, "account_move", "preferred_payment_method_id"):
-            create_column(self.env.cr, "account_move", "preferred_payment_method_id", "int4")
-        return super()._auto_init()
-
-    @api.depends('partner_id')
-    def _compute_preferred_payment_method_idd(self):
-        for move in self:
-            partner = move.partner_id
-            # take the payment method corresponding to the move's company
-            move.preferred_payment_method_id = partner.with_company(move.company_id).property_payment_method_id

--- a/addons/account_check_printing/models/account_payment.py
+++ b/addons/account_check_printing/models/account_payment.py
@@ -9,21 +9,6 @@ from odoo.tools.sql import column_exists, create_column
 INV_LINES_PER_STUB = 9
 
 
-class AccountPaymentRegister(models.TransientModel):
-    _inherit = "account.payment.register"
-
-    @api.depends('payment_type', 'journal_id', 'partner_id')
-    def _compute_payment_method_line_id(self):
-        super()._compute_payment_method_line_id()
-        for record in self:
-            preferred = record.partner_id.with_company(record.company_id).property_payment_method_id
-            method_line = record.journal_id.outbound_payment_method_line_ids.filtered(
-                lambda l: l.payment_method_id == preferred
-            )
-            if record.payment_type == 'outbound' and method_line:
-                record.payment_method_line_id = method_line[0]
-
-
 class AccountPayment(models.Model):
     _inherit = "account.payment"
 
@@ -128,16 +113,6 @@ class AccountPayment(models.Model):
                 sequence = payment.journal_id.check_sequence_id.sudo()
                 sequence.padding = len(payment.check_number)
 
-    @api.depends('payment_type', 'journal_id', 'partner_id')
-    def _compute_payment_method_line_id(self):
-        super()._compute_payment_method_line_id()
-        for record in self:
-            preferred = record.partner_id.with_company(record.company_id).property_payment_method_id
-            method_line = record.journal_id.outbound_payment_method_line_ids\
-                .filtered(lambda l: l.payment_method_id == preferred)
-            if record.payment_type == 'outbound' and method_line:
-                record.payment_method_line_id = method_line[0]
-
     def _get_aml_default_display_name_list(self):
         # Extends 'account'
         values = super()._get_aml_default_display_name_list()

--- a/addons/account_check_printing/models/res_partner.py
+++ b/None
@@ -1,19 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-
-from odoo import models, fields
-
-
-class ResPartner(models.Model):
-    _inherit = 'res.partner'
-
-    property_payment_method_id = fields.Many2one(
-        comodel_name='account.payment.method',
-        string='Payment Method',
-        company_dependent=True,
-        domain="[('payment_type', '=', 'outbound')]",
-        help="Preferred payment method when paying this vendor. This is used to filter vendor bills"
-             " by preferred payment method to register payments in mass. Use cases: create bank"
-             " files for batch wires, check runs.",
-    )
