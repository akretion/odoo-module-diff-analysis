PR: https://github.com/odoo/odoo/pull/63291

From: dd53f5323f5f582152a858d61990c99677ed1351
From: William Henrotin
Date: 2021-09-02 14:14:09

Structural Changes: 3
Total Changes: 108

[IMP] stock: wave pickings

This commit introduce Wave Pickings. This new object is a group of stock
move lines related to different pickings. The goal is to group stock
movements having similar characteristics like same source location, same
product category, ...

Wave pickings are created from stock move lines. Those are removed from
their picking to a copy of it. All the new picking are grouped together
in a new batch picking. This batch is the wave.
To differentiate the batch pickings and the wave pickings. This commit
introduces a new menu and a new sequence.

Task : 2411102

Part-of: odoo/odoo#63291

================================= pseudo patch: =================================

--- a/addons/stock_picking_batch/models/__init__.py
+++ b/addons/stock_picking_batch/models/__init__.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from . import stock_move_line
 from . import stock_picking
 from . import stock_picking_batch

--- a/None
+++ b/addons/stock_picking_batch/models/stock_move_line.py
@@ -0,0 +1,78 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from collections import defaultdict
+
+from odoo import _, fields, models
+from odoo import Command
+
+
+class StockMoveLine(models.Model):
+    _inherit = "stock.move.line"
+
+    batch_id = fields.Many2one(related='picking_id.batch_id')
+
+    def action_open_add_to_wave(self):
+        # This action can be called from the move line list view or from the 'Add to wave' wizard
+        if 'active_wave_id' in self.env.context:
+            wave = self.env['stock.picking.batch'].browse(self.env.context.get('active_wave_id'))
+            return self._add_to_wave(wave)
+        view = self.env.ref('stock_picking_batch.stock_add_to_wave_form')
+        return {
+            'name': _('Add to Wave'),
+            'type': 'ir.actions.act_window',
+            'view_mode': 'form',
+            'res_model': 'stock.add.to.wave',
+            'views': [(view.id, 'form')],
+            'view_id': view.id,
+            'target': 'new',
+        }
+
+    def _add_to_wave(self, wave=False):
+        """ Detach lines (and corresponding stock move from a picking to another). If wave is
+        passed, attach new picking into it. If not attach line to their original picking.
+
+        :param int wave: id of the wave picking on which to put the move lines. """
+
+        if not wave:
+            wave = self.env['stock.picking.batch'].create({
+                'is_wave': True
+            })
+        line_by_picking = defaultdict(lambda: self.env['stock.move.line'])
+        for line in self:
+            # if not wave and line.orig_picking_id.is_wave:
+                # continue
+            line_by_picking[line.picking_id] |= line
+        picking_to_wave_vals_list = []
+        for picking, lines in line_by_picking.items():
+            # Move the entire picking if all the line are taken
+            if lines == picking.move_line_ids:
+                wave.picking_ids = [Command.link(picking.id)]
+                continue
+
+            # Split the picking in two part to extract only line that are taken on the wave
+            picking_to_wave_vals = picking.copy_data({
+                'move_lines': [],
+                'move_line_ids': [],
+                'batch_id': wave.id,
+            })[0]
+            line_by_move = defaultdict(lambda: self.env['stock.move.line'])
+            for line in lines:
+                line_by_move[line.move_id] |= line
+            for move, move_lines in line_by_move.items():
+                picking_to_wave_vals['move_line_ids'] += [Command.link(line.id) for line in lines]
+                # if all the line of a stock move are taken we change the picking on the stock move
+                if move_lines == move.move_line_ids:
+                    picking_to_wave_vals['move_lines'] += [Command.link(move.id)]
+                    continue
+                # Split the move
+                qty = sum(lines.mapped('product_qty'))
+                new_move = move._split(qty)
+                new_move[0]['move_line_ids'] = [Command.set(move_lines.ids)]
+                picking_to_wave_vals['move_lines'] += [Command.create(new_move)]
+
+            picking_to_wave_vals_list.append(picking_to_wave_vals)
+
+        if picking_to_wave_vals_list:
+            self.env['stock.picking'].create(picking_to_wave_vals_list)
+        wave.action_confirm()

--- a/addons/stock_picking_batch/models/stock_picking.py
+++ b/addons/stock_picking_batch/models/stock_picking.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models
+from odoo import _, api, fields, models
 
 
 class StockPicking(models.Model):
@@ -30,6 +30,27 @@ class StockPicking(models.Model):
             self.batch_id._sanity_check()
         return res
 
+    def action_add_operations(self):
+        view = self.env.ref('stock_picking_batch.view_move_line_tree_detailed_wave')
+        return {
+            'name': _('Add Operations'),
+            'type': 'ir.actions.act_window',
+            'view_mode': 'list',
+            'view': view,
+            'views': [(view.id, 'tree')],
+            'res_model': 'stock.move.line',
+            'target': 'new',
+            'domain': [
+                ('picking_id', 'in', self.ids),
+                ('state', '!=', 'done')
+            ],
+            'context': dict(
+                self.env.context,
+                picking_to_wave=self.ids,
+                active_wave_id=self.env.context.get('active_wave_id').id,
+                search_default_by_location=True,
+            )}
+
     def _should_show_transfers(self):
         if len(self.batch_id) == 1 and self == self.batch_id.picking_ids:
             return False

--- a/addons/stock_picking_batch/models/stock_picking_batch.py
+++ b/addons/stock_picking_batch/models/stock_picking_batch.py
@@ -59,6 +59,7 @@ class StockPickingBatch(models.Model):
               - If manually set then scheduled date for all transfers in batch will automatically update to this date.
               - If not manually changed and transfers are added/removed/updated then this will be their earliest scheduled date
                 but this scheduled date will not be set for all transfers in batch.""")
+    is_wave = fields.Boolean('This batch is a wave')
 
     @api.depends('company_id', 'picking_type_id', 'state')
     def _compute_allowed_picking_ids(self):
@@ -127,7 +128,10 @@ class StockPickingBatch(models.Model):
     @api.model
     def create(self, vals):
         if vals.get('name', '/') == '/':
-            vals['name'] = self.env['ir.sequence'].next_by_code('picking.batch') or '/'
+            if vals.get('is_wave'):
+                vals['name'] = self.env['ir.sequence'].next_by_code('picking.wave') or '/'
+            else:
+                vals['name'] = self.env['ir.sequence'].next_by_code('picking.batch') or '/'
         return super().create(vals)
 
     def write(self, vals):
