PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:9 + add:0, change matches:
-    _inherit = 'ir.model'
-    _inherit = "link.tracker"
-    _inherit = "link.tracker.click"
-    _inherit = "res.company"
-    _inherit = 'res.config.settings'
-    _inherit = 'res.partner'
-    _inherit = 'utm.campaign'
-    _inherit = 'utm.medium'
-    _inherit = 'utm.source'

Total Changes: 60

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/mass_mailing/models/ir_http.py
+++ b/addons/mass_mailing/models/ir_http.py
@@ -4,7 +4,7 @@ from odoo import models
 
 
 class IrHttp(models.AbstractModel):
-    _inherit = "ir.http"
+    _inherit = ["ir.http"]
 
     @classmethod
     def _get_translation_frontend_modules_name(cls):

--- a/addons/mass_mailing/models/ir_mail_server.py
+++ b/addons/mass_mailing/models/ir_mail_server.py
@@ -5,8 +5,7 @@ from odoo import _, fields, models
 from odoo.tools.misc import format_date
 
 
-class IrMailServer(models.Model):
-    _name = 'ir.mail_server'
+class IrMail_Server(models.Model):
     _inherit = ['ir.mail_server']
 
     active_mailing_ids = fields.One2many(
@@ -24,7 +23,7 @@ class IrMailServer(models.Model):
             details = _('(scheduled for %s)', format_date(self.env, mailing_id.schedule_date))
             return f'{base} {details}'
 
-        usages_super = super(IrMailServer, self)._active_usages_compute()
+        usages_super = super()._active_usages_compute()
         default_mail_server_id = self.env['mailing.mailing']._get_default_mail_server_id()
         for record in self:
             usages = []

--- a/addons/mass_mailing/models/ir_model.py
+++ b/addons/mass_mailing/models/ir_model.py
@@ -5,7 +5,7 @@ from odoo import fields, models, _
 
 
 class IrModel(models.Model):
-    _inherit = 'ir.model'
+    _inherit = ['ir.model']
 
     is_mailing_enabled = fields.Boolean(
         string="Mailing Enabled",

--- a/addons/mass_mailing/models/link_tracker.py
+++ b/addons/mass_mailing/models/link_tracker.py
@@ -5,13 +5,13 @@ from odoo import api, fields, models
 
 
 class LinkTracker(models.Model):
-    _inherit = "link.tracker"
+    _inherit = ["link.tracker"]
 
     mass_mailing_id = fields.Many2one('mailing.mailing', string='Mass Mailing')
 
 
 class LinkTrackerClick(models.Model):
-    _inherit = "link.tracker.click"
+    _inherit = ["link.tracker.click"]
 
     mailing_trace_id = fields.Many2one('mailing.trace', string='Mail Statistics', index='btree_not_null')
     mass_mailing_id = fields.Many2one('mailing.mailing', string='Mass Mailing', index='btree_not_null')

--- a/addons/mass_mailing/models/mail_render_mixin.py
+++ b/addons/mass_mailing/models/mail_render_mixin.py
@@ -5,7 +5,7 @@ from odoo import api, models
 
 
 class MailRenderMixin(models.AbstractModel):
-    _inherit = "mail.render.mixin"
+    _inherit = ["mail.render.mixin"]
 
     @api.model
     def _render_template_postprocess(self, model, rendered):

--- a/addons/mass_mailing/models/mail_thread.py
+++ b/addons/mass_mailing/models/mail_thread.py
@@ -11,7 +11,7 @@ BLACKLIST_MAX_BOUNCED_LIMIT = 5
 
 class MailThread(models.AbstractModel):
     """ Update MailThread to add the support of bounce management in mass mailing traces. """
-    _inherit = 'mail.thread'
+    _inherit = ['mail.thread']
 
     @api.model
     def _message_route_process(self, message, message_dict, routes):

--- a/addons/mass_mailing/models/mailing.py
+++ b/addons/mass_mailing/models/mailing.py
@@ -37,9 +37,9 @@ DEFAULT_IMAGE_CHUNK_SIZE = 32768
 
 mso_re = re.compile(r"\[if mso\]>[\s\S]*<!\[endif\]")
 
-class MassMailing(models.Model):
+
+class MailingMailing(models.Model):
     """ Mass Mailing models the sending of emails to a list of recipients for a mass mailing campaign."""
-    _name = 'mailing.mailing'
     _description = 'Mass Mailing'
     _inherit = ['mail.thread',
                 'mail.activity.mixin',
@@ -52,7 +52,7 @@ class MassMailing(models.Model):
 
     @api.model
     def default_get(self, fields_list):
-        vals = super(MassMailing, self).default_get(fields_list)
+        vals = super().default_get(fields_list)
 
         # field sent by the calendar view when clicking on a date block
         # we use it to setup the scheduled date of the created mailing.mailing
@@ -537,7 +537,7 @@ class MassMailing(models.Model):
         if values.get('campaign_id') is False and any(mailing.ab_testing_enabled for mailing in self) and 'ab_testing_enabled' not in values:
             raise ValidationError(_("A campaign should be set when A/B test is enabled"))
 
-        result = super(MassMailing, self).write(values)
+        result = super().write(values)
         if values.get('ab_testing_enabled'):
             self._create_ab_testing_utm_campaigns()
         self._fix_attachment_ownership()

--- a/addons/mass_mailing/models/mailing_contact.py
+++ b/addons/mass_mailing/models/mailing_contact.py
@@ -6,12 +6,11 @@ from odoo.exceptions import UserError
 from odoo.osv import expression
 
 
-class MassMailingContact(models.Model):
+class MailingContact(models.Model):
     """Model of a contact. This model is different from the partner model
     because it holds only some basic information: name, email. The purpose is to
     be able to deal with large contact list to email without bloating the partner
     base."""
-    _name = 'mailing.contact'
     _inherit = ['mail.thread.blacklist']
     _description = 'Mailing Contact'
     _order = 'name ASC, id DESC'
@@ -21,7 +20,7 @@ class MassMailingContact(models.Model):
         """ When coming from a mailing list we may have a default_list_ids context
         key. We should use it to create subscription_ids default value that
         are displayed to the user as list_ids is not displayed on form view. """
-        res = super(MassMailingContact, self).default_get(fields_list)
+        res = super().default_get(fields_list)
         if 'subscription_ids' in fields_list and not res.get('subscription_ids'):
             list_ids = self.env.context.get('default_list_ids')
             if 'default_list_ids' not in res and list_ids and isinstance(list_ids, (list, tuple)):
@@ -125,7 +124,7 @@ class MassMailingContact(models.Model):
                     subscription_ids.append((0, 0, {'list_id': list_id}))
                 vals['subscription_ids'] = subscription_ids
 
-        return super(MassMailingContact, self.with_context(default_list_ids=False)).create(vals_list)
+        return super(MailingContact, self.with_context(default_list_ids=False)).create(vals_list)
 
     def copy(self, default=None):
         """ Cleans the default_list_ids while duplicating mailing contact in context of

--- a/addons/mass_mailing/models/mailing_filter.py
+++ b/addons/mass_mailing/models/mailing_filter.py
@@ -11,7 +11,6 @@ class MailingFilter(models.Model):
     """ This model stores mass mailing or marketing campaign domain as filters
     (quite similar to 'ir.filters' but dedicated to mailing apps). Frequently
     used domains can be reused easily. """
-    _name = 'mailing.filter'
     _description = 'Mailing Favorite Filters'
     _order = 'create_date DESC'
 

--- a/addons/mass_mailing/models/mailing_list.py
+++ b/addons/mass_mailing/models/mailing_list.py
@@ -7,9 +7,8 @@ from odoo import _, api, Command, fields, models, tools
 from odoo.exceptions import UserError
 
 
-class MassMailingList(models.Model):
+class MailingList(models.Model):
     """Model of a contact list. """
-    _name = 'mailing.list'
     _order = 'name'
     _description = 'Mailing List'
     _mailing_enabled = True
@@ -120,7 +119,7 @@ class MassMailingList(models.Model):
             if mass_mailings > 0:
                 raise UserError(_("At least one of the mailing list you are trying to archive is used in an ongoing mailing campaign."))
 
-        return super(MassMailingList, self).write(vals)
+        return super().write(vals)
 
     @api.depends('contact_count')
     def _compute_display_name(self):

--- a/addons/mass_mailing/models/mailing_subscription.py
+++ b/addons/mass_mailing/models/mailing_subscription.py
@@ -8,7 +8,6 @@ class MailingSubscription(models.Model):
     """ Intermediate model between mass mailing list and mass mailing contact
         Indicates if a contact is opted out for a particular list
     """
-    _name = 'mailing.subscription'
     _description = 'Mailing List Subscription'
     _table = 'mailing_subscription'
     _rec_name = 'contact_id'

--- a/addons/mass_mailing/models/mailing_subscription_optout.py
+++ b/addons/mass_mailing/models/mailing_subscription_optout.py
@@ -4,9 +4,8 @@
 from odoo import fields, models
 
 
-class MailingSubscriptionReason(models.Model):
+class MailingSubscriptionOptout(models.Model):
     """ Reason for opting out of mailing lists or for blacklisting. """
-    _name = 'mailing.subscription.optout'
     _description = 'Mailing Subscription Reason'
     _order = 'sequence ASC, create_date DESC, id DESC'
 

--- a/addons/mass_mailing/models/mailing_trace.py
+++ b/addons/mass_mailing/models/mailing_trace.py
@@ -51,7 +51,6 @@ class MailingTrace(models.Model):
       * bounced: triggered by gateway bounce (mail) or in _prepare_mass_sms_trace_values
         if sms_number_format error when sending sms (sms)
     """
-    _name = 'mailing.trace'
     _description = 'Mailing Statistics'
     _rec_name = 'id'
     _order = 'create_date DESC'

--- a/addons/mass_mailing/models/res_company.py
+++ b/addons/mass_mailing/models/res_company.py
@@ -5,7 +5,7 @@ from odoo import models
 
 
 class ResCompany(models.Model):
-    _inherit = "res.company"
+    _inherit = ["res.company"]
 
     def _get_social_media_links(self):
         self.ensure_one()

--- a/addons/mass_mailing/models/res_config_settings.py
+++ b/addons/mass_mailing/models/res_config_settings.py
@@ -5,7 +5,7 @@ from odoo import api, fields, models
 
 
 class ResConfigSettings(models.TransientModel):
-    _inherit = 'res.config.settings'
+    _inherit = ['res.config.settings']
 
     group_mass_mailing_campaign = fields.Boolean(
         string="Mailing Campaigns",

--- a/addons/mass_mailing/models/res_partner.py
+++ b/addons/mass_mailing/models/res_partner.py
@@ -4,6 +4,6 @@
 from odoo import models
 
 
-class Partner(models.Model):
-    _inherit = 'res.partner'
+class ResPartner(models.Model):
+    _inherit = ['res.partner']
     _mailing_enabled = True

--- a/addons/mass_mailing/models/res_users.py
+++ b/addons/mass_mailing/models/res_users.py
@@ -4,8 +4,7 @@
 from odoo import api, models, _
 
 
-class Users(models.Model):
-    _name = 'res.users'
+class ResUsers(models.Model):
     _inherit = ['res.users']
 
     @api.model

--- a/addons/mass_mailing/models/utm_campaign.py
+++ b/addons/mass_mailing/models/utm_campaign.py
@@ -10,7 +10,7 @@ from odoo.tools.float_utils import float_round
 
 
 class UtmCampaign(models.Model):
-    _inherit = 'utm.campaign'
+    _inherit = ['utm.campaign']
 
     mailing_mail_ids = fields.One2many(
         'mailing.mailing', 'campaign_id',

--- a/addons/mass_mailing/models/utm_medium.py
+++ b/addons/mass_mailing/models/utm_medium.py
@@ -7,7 +7,7 @@ from odoo.exceptions import UserError
 
 
 class UtmMedium(models.Model):
-    _inherit = 'utm.medium'
+    _inherit = ['utm.medium']
 
     @api.ondelete(at_uninstall=False)
     def _unlink_except_linked_mailings(self):

--- a/addons/mass_mailing/models/utm_source.py
+++ b/addons/mass_mailing/models/utm_source.py
@@ -7,7 +7,7 @@ from odoo.exceptions import UserError
 
 
 class UtmSource(models.Model):
-    _inherit = 'utm.source'
+    _inherit = ['utm.source']
 
     @api.ondelete(at_uninstall=False)
     def _unlink_except_linked_mailings(self):
