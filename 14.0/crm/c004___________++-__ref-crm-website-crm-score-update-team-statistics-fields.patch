PR: https://github.com/odoo/odoo/pull/

From: 8304bc01ba9f150e884f56265a750a345507bb18
From: Thibault DelavallÃ©e
Date: 2020-03-23 11:42:12

Structural Changes: 11
Total Changes: 65

[REF] crm, website_crm_score: update team statistics fields

PURPOSE

Purpose of this commit is to clean statistics fields definition on crm.team.
Future tasks will improve the use of sales team in crm and first steps is to
clean a bit models linked to sales team.

SPECIFICATIONS

New statistic fields

  * ``lead_all_assigned_month_count``: all assigned lead and opportunities
    in the last 30 days; used notably for scoring mechanism;

Renaming performed on some statistic fields

  * ``unassigned_leads_count`` -> ``lead_unassigned_count``;
  * ``overdue_opportunities_count`` -> ``opportunities_overdue_count``;
  * ``overdue_opportunities_amount`` -> ``opportunities_overdue_amount``;

All those fields are used for display and management purpose, and are
computed not stored fields. No migration is therefore required.

LINKS

Task ID 2088565 (crm: from onchange to compute)
Enterprise PR odoo/enterprise#7322
Upgrade PR odoo/upgrade#781

================================= pseudo patch: =================================

--- a/addons/crm/models/crm_team.py
+++ b/addons/crm/models/crm_team.py
@@ -1,10 +1,12 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+import ast
+import datetime
+
 from odoo import api, fields, models, _
 from odoo.tools.safe_eval import safe_eval
 
-import ast
 
 class Team(models.Model):
     _name = 'crm.team'
@@ -14,30 +16,26 @@ class Team(models.Model):
     use_leads = fields.Boolean('Leads', help="Check this box to filter and qualify incoming requests as leads before converting them into opportunities and assigning them to a salesperson.")
     use_opportunities = fields.Boolean('Pipeline', default=True, help="Check this box to manage a presales process with opportunities.")
     alias_id = fields.Many2one('mail.alias', string='Alias', ondelete="restrict", required=True, help="The email address associated with this channel. New emails received will automatically create new leads assigned to the channel.")
-
-    unassigned_leads_count = fields.Integer(
-        compute='_compute_unassigned_leads_count',
-        string='Unassigned Leads')
+    # statistics about leads / opportunities / both
+    lead_unassigned_count = fields.Integer(
+        string='# Unassigned Leads', compute='_compute_lead_unassigned_count')
+    lead_all_assigned_month_count = fields.Integer(
+        string='# Leads/Opps assigned this month', compute='_compute_lead_all_assigned_month_count',
+        help="Number of leads and opportunities assigned this last month.")
     opportunities_count = fields.Integer(
-        compute='_compute_opportunities',
-        string='Number of open opportunities')
-    overdue_opportunities_count = fields.Integer(
-        compute='_compute_overdue_opportunities',
-        string='Number of overdue opportunities')
+        string='# Opportunities', compute='_compute_opportunities_data')
     opportunities_amount = fields.Integer(
-        compute='_compute_opportunities',
-        string='Opportunities Revenues')
-    overdue_opportunities_amount = fields.Integer(
-        compute='_compute_overdue_opportunities',
-        string='Overdue Opportunities Revenues')
-
-    # Since we are in a _inherits case, this is not an override
-    # but a plain definition of a field
-    # So we need to reset the property related of that field
-    alias_user_id = fields.Many2one('res.users', related='alias_id.alias_user_id', inherited=True, domain=lambda self: [
-        ('groups_id', 'in', self.env.ref('sales_team.group_sale_salesman_all_leads').id)])
-
-    def _compute_unassigned_leads_count(self):
+        string='Opportunities Revenues', compute='_compute_opportunities_data')
+    opportunities_overdue_count = fields.Integer(
+        string='# Overdue Opportunities', compute='_compute_opportunities_overdue_data')
+    opportunities_overdue_amount = fields.Integer(
+        string='Overdue Opportunities Revenues', compute='_compute_opportunities_overdue_data',)
+    # alias: improve fields coming from _inherits, use inherited to avoid replacing them
+    alias_user_id = fields.Many2one(
+        'res.users', related='alias_id.alias_user_id', inherited=True,
+        domain=lambda self: [('groups_id', 'in', self.env.ref('sales_team.group_sale_salesman_all_leads').id)])
+
+    def _compute_lead_unassigned_count(self):
         leads_data = self.env['crm.lead'].read_group([
             ('team_id', 'in', self.ids),
             ('type', '=', 'lead'),
@@ -45,9 +43,20 @@ class Team(models.Model):
         ], ['team_id'], ['team_id'])
         counts = {datum['team_id'][0]: datum['team_id_count'] for datum in leads_data}
         for team in self:
-            team.unassigned_leads_count = counts.get(team.id, 0)
+            team.lead_unassigned_count = counts.get(team.id, 0)
+
+    def _compute_lead_all_assigned_month_count(self):
+        limit_date = datetime.datetime.now() - datetime.timedelta(days=30)
+        leads_data = self.env['crm.lead'].read_group([
+            ('team_id', 'in', self.ids),
+            ('date_open', '>=', fields.Datetime.to_string(limit_date)),
+            ('user_id', '!=', False),
+        ], ['team_id'], ['team_id'])
+        counts = {datum['team_id'][0]: datum['team_id_count'] for datum in leads_data}
+        for team in self:
+            team.lead_all_assigned_month_count = counts.get(team.id, 0)
 
-    def _compute_opportunities(self):
+    def _compute_opportunities_data(self):
         opportunity_data = self.env['crm.lead'].search([
             ('team_id', 'in', self.ids),
             ('probability', '<', 100),
@@ -64,7 +73,7 @@ class Team(models.Model):
             team.opportunities_count = counts.get(team.id, 0)
             team.opportunities_amount = amounts.get(team.id, 0)
 
-    def _compute_overdue_opportunities(self):
+    def _compute_opportunities_overdue_data(self):
         opportunity_data = self.env['crm.lead'].read_group([
             ('team_id', 'in', self.ids),
             ('probability', '<', 100),
@@ -74,8 +83,8 @@ class Team(models.Model):
         counts = {datum['team_id'][0]: datum['team_id_count'] for datum in opportunity_data}
         amounts = {datum['team_id'][0]: (datum['planned_revenue']) for datum in opportunity_data}
         for team in self:
-            team.overdue_opportunities_count = counts.get(team.id, 0)
-            team.overdue_opportunities_amount = amounts.get(team.id, 0)
+            team.opportunities_overdue_count = counts.get(team.id, 0)
+            team.opportunities_overdue_amount = amounts.get(team.id, 0)
 
     @api.onchange('use_leads', 'use_opportunities')
     def _onchange_use_leads_opportunities(self):
