PR: https://github.com/odoo/odoo/pull/

From: 27a739385249cff8c8779cb0d7be140e0b89226a
From: Aur√©lien Warnon
Date: 2018-10-01 11:28:41

Breaking data model changes scores: del:2 + add:1, change matches:
-    product_no_variant_attribute_values = fields.Many2many('product.template.attribute.value', string='Product attribute values that do not create variants')
+    product_no_variant_attribute_value_ids = fields.Many2many('product.template.attribute.value', string='Product attribute values that do not create variants')

Total Changes: 29

[IMP] product,(website_)sale: Product configurator default_get cleanup

Targets commit d3530eb07e24278117ab396ecb86a59deecc312d

Purpose
=======

[Follow up AL review]
Removed the default_get override in the sale_order_line model.
* The default values to create records are now specified by pefixing them with "default_" in the JS.
  That will use the built-in framework method, which is more simple/clean.

* The "list_editable_renderer.js" file for the product configurator was removed and its content is now merged within
  the SectionAndNoteListRenderer.

Updated fields:

* [sale_order_line in sale/sale.py] "product_no_variant_attribute_values" to "product_no_variant_attribute_value_ids"

================================= pseudo patch: =================================

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -929,21 +929,6 @@ class SaleOrderLine(models.Model):
             else:
                 line.invoice_status = 'no'
 
-    @api.model
-    def default_get(self, fields):
-        res = super(SaleOrderLine, self).default_get(fields)
-        if self._context.get('product_id'):
-            res['product_id'] = int(self._context.get('product_id'))
-        if self._context.get('quantity'):
-            res['product_uom_qty'] = float(self._context.get('quantity'))
-        if self._context.get('no_variant_attribute_values'):
-            attributes = self._context.get('no_variant_attribute_values')
-            res['product_no_variant_attribute_values'] = [(6, 0, [int(attribute['value']) for attribute in attributes])]
-        if self._context.get('product_custom_attribute_values'):
-            values = self._context.get('product_custom_attribute_values')
-            res['product_custom_attribute_value_ids'] = [(0, 0, value) for value in values]
-        return res
-
     @api.depends('product_uom_qty', 'discount', 'price_unit', 'tax_id')
     def _compute_amount(self):
         """
@@ -1134,7 +1119,7 @@ class SaleOrderLine(models.Model):
     product_custom_attribute_value_ids = fields.One2many('product.attribute.custom.value', 'sale_order_line_id', string='User entered custom product attribute values')
     # M2M holding the values of product.attribute with create_variant field set to 'no_variant'
     # It allows keeping track of the extra_price associated to those attribute values and add them to the SO line description
-    product_no_variant_attribute_values = fields.Many2many('product.template.attribute.value', string='Product attribute values that do not create variants')
+    product_no_variant_attribute_value_ids = fields.Many2many('product.template.attribute.value', string='Product attribute values that do not create variants')
     # Non-stored related field to allow portal user to see the image of the product he has ordered
     product_image = fields.Binary('Product Image', related="product_id.image", store=False, readonly=False)
 
@@ -1382,12 +1367,12 @@ class SaleOrderLine(models.Model):
     @api.multi
     def _get_display_price(self, product):
         # TO DO: move me in master/saas-16 on sale.order
-        # awa: don't know it it's still the case since we need the "product_no_variant_attribute_values" field now
+        # awa: don't know if it's still the case since we need the "product_no_variant_attribute_value_ids" field now
         # to be able to compute the full price
-        if self.product_no_variant_attribute_values:
+        if self.product_no_variant_attribute_value_ids:
             product = product.with_context(no_variant_attributes_price_extra=[
                 no_variant_attribute_value.price_extra or 0
-                for no_variant_attribute_value in self.product_no_variant_attribute_values
+                for no_variant_attribute_value in self.product_no_variant_attribute_value_ids
             ])
 
         if self.order_id.pricelist_id.discount_policy == 'with_discount':
@@ -1441,7 +1426,7 @@ class SaleOrderLine(models.Model):
 
         name = self.get_sale_order_line_multiline_description_sale(product)
 
-        if self.product_custom_attribute_value_ids or self.product_no_variant_attribute_values:
+        if self.product_custom_attribute_value_ids or self.product_no_variant_attribute_value_ids:
             name += '\n'
 
         if self.product_custom_attribute_value_ids:
@@ -1449,8 +1434,8 @@ class SaleOrderLine(models.Model):
                 if product_custom_attribute_value.custom_value and product_custom_attribute_value.custom_value.strip():
                     name += '\n' + product_custom_attribute_value.attribute_value_id.name + ': ' + product_custom_attribute_value.custom_value.strip()
 
-        if self.product_no_variant_attribute_values:
-            for no_variant_attribute_value in self.product_no_variant_attribute_values.filtered(
+        if self.product_no_variant_attribute_value_ids:
+            for no_variant_attribute_value in self.product_no_variant_attribute_value_ids.filtered(
                 lambda product_attribute_value: not product_attribute_value.is_custom
             ):
                 name += '\n' + no_variant_attribute_value.attribute_id.name + ': ' + no_variant_attribute_value.name
