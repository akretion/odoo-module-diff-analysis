PR: https://github.com/odoo/odoo/pull/51846

From: ad828f40424192337017a899566d71992381b574
From: fja-odoo
Date: 2020-05-29 08:22:34

Structural Changes: 1
Total Changes: 34

[IMP] website: use groups_id for visibility

visibility_group was used for visibility, we now use the groups_id field.
groups_id is a M2M field while visibility_group was a M2O field resulting
in an issue to display the M2M field in the frontend. We decided to
allow editing the groups as a M2O in the frontend. If there is more
than one group the user will have to go through the backend to edit.

task-2264580

closes odoo/odoo#51846

Related: odoo/upgrade#1260
Signed-off-by: Jérémy Kersten (jke) <jke@openerp.com>

================================= pseudo patch: =================================

--- a/addons/website/models/ir_ui_view.py
+++ b/addons/website/models/ir_ui_view.py
@@ -28,7 +28,6 @@ class View(models.Model):
     first_page_id = fields.Many2one('website.page', string='Website Page', help='First page linked to this view', compute='_compute_first_page_id')
     track = fields.Boolean(string='Track', default=False, help="Allow to specify for one page of the website to be trackable or not")
     visibility = fields.Selection([('', 'All'), ('connected', 'Signed In'), ('restricted_group', 'Restricted Group'), ('password', 'With Password')], default='')
-    visibility_group = fields.Many2one('res.groups', copy=False)
     visibility_password = fields.Char(groups='base.group_system', copy=False)
     visibility_password_display = fields.Char(compute='_get_pwd', inverse='_set_pwd', groups='website.group_website_designer')
 
@@ -186,11 +185,11 @@ class View(models.Model):
 
         if current_website_id and not self._context.get('no_cow'):
             for view in self.filtered(lambda view: not view.website_id):
-                for website in self.env['website'].search([('id', '!=', current_website_id)]):
+                for w in self.env['website'].search([('id', '!=', current_website_id)]):
                     # reuse the COW mechanism to create
                     # website-specific copies, it will take
                     # care of creating pages and menus.
-                    view.with_context(website_id=website.id).write({'name': view.name})
+                    view.with_context(website_id=w.id).write({'name': view.name})
 
         specific_views = self.env['ir.ui.view']
         if self and self.pool._init:
@@ -364,11 +363,6 @@ class View(models.Model):
         if self.visibility and not request.env.user.has_group('website.group_website_designer'):
             if (self.visibility == 'connected' and request.website.is_public_user()):
                 error = werkzeug.exceptions.Forbidden()
-            elif self.visibility == 'restricted_group' and self.visibility_group:
-                # special case, to avoid employee.user_ids
-                if (self.visibility_group.get_external_id() == 'base.group_user' and not request.env.user.share) or \
-                        request.env.user.id not in self.visibility_group.sudo().users.ids:
-                    error = werkzeug.exceptions.Forbidden()
             elif self.visibility == 'password' and \
                     (request.website.is_public_user() or self.id not in request.session.get('views_unlock', [])):
                 pwd = request.params.get('visibility_password')
@@ -377,6 +371,13 @@ class View(models.Model):
                     request.session.setdefault('views_unlock', list()).append(self.id)
                 else:
                     error = werkzeug.exceptions.Forbidden('website_visibility_password_required')
+
+            # elif self.visibility == 'restricted_group' and self.groups_id: or if groups_id set from backend
+            try:
+                self._check_view_access()
+            except AccessError:
+                error = werkzeug.exceptions.Forbidden()
+
         if error:
             if do_raise:
                 raise error

--- a/addons/website/models/website_page.py
+++ b/addons/website/models/website_page.py
@@ -61,11 +61,15 @@ class Page(models.Model):
     def get_page_properties(self):
         self.ensure_one()
         res = self.read([
-            'id', 'name', 'url', 'website_published', 'website_indexed', 'date_publish',
-            'menu_ids', 'is_homepage', 'website_id', 'visibility', 'visibility_group'
+            'id', 'view_id', 'name', 'url', 'website_published', 'website_indexed', 'date_publish',
+            'menu_ids', 'is_homepage', 'website_id', 'visibility', 'groups_id'
         ])[0]
-        if not res['visibility_group']:
-            res['visibility_group'] = self.env.ref('base.group_user').name_get()[0]
+        if not res['groups_id']:
+            res['group_id'] = self.env.ref('base.group_user').name_get()[0]
+        elif len(res['groups_id']) == 1:
+            res['group_id'] = self.env['res.groups'].browse(res['groups_id']).name_get()[0]
+        del res['groups_id']
+
         res['visibility_password'] = res['visibility'] == 'password' and self.visibility_password_display or ''
         return res
 
@@ -119,8 +123,11 @@ class Page(models.Model):
             'date_publish': data['date_publish'] or None,
             'is_homepage': data['is_homepage'],
             'visibility': data['visibility'],
-            'visibility_group': data['visibility'] == "restricted_group" and data['visibility_group'],
         }
+        if page.visibility == 'restricted_group' and data['visibility'] != "restricted_group":
+            w_vals['groups_id'] = False
+        elif 'group_id' in data:
+            w_vals['groups_id'] = [data['group_id']]
         if 'visibility_pwd' in data:
             w_vals['visibility_password_display'] = data['visibility_pwd'] or ''
 
