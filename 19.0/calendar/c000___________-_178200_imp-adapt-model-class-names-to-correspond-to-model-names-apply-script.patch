PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:5 + add:0, change matches:
-    _inherit = "mail.activity"
-    _inherit = "mail.activity.type"
-    _inherit = 'res.partner'
-    _inherit = 'res.users'
-    _inherit = "res.users.settings"

Total Changes: 51

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/calendar/models/calendar_alarm.py
+++ b/addons/calendar/models/calendar_alarm.py
@@ -4,8 +4,7 @@
 from odoo import api, fields, models
 
 
-class Alarm(models.Model):
-    _name = 'calendar.alarm'
+class CalendarAlarm(models.Model):
     _description = 'Event Alarm'
 
     _interval_selection = {'minutes': 'Minutes', 'hours': 'Hours', 'days': 'Days'}

--- a/addons/calendar/models/calendar_alarm_manager.py
+++ b/addons/calendar/models/calendar_alarm_manager.py
@@ -8,8 +8,7 @@ from odoo import api, fields, models
 from odoo.tools import plaintext2html
 
 
-class AlarmManager(models.AbstractModel):
-    _name = 'calendar.alarm_manager'
+class CalendarAlarm_Manager(models.AbstractModel):
     _description = 'Event Alarm Manager'
 
     def _get_next_potential_limit_alarm(self, alarm_type, seconds=None, partners=None):

--- a/addons/calendar/models/calendar_attendee.py
+++ b/addons/calendar/models/calendar_attendee.py
@@ -14,9 +14,8 @@ from odoo.tools import split_every
 _logger = logging.getLogger(__name__)
 
 
-class Attendee(models.Model):
+class CalendarAttendee(models.Model):
     """ Calendar Attendee Information """
-    _name = 'calendar.attendee'
     _rec_name = 'common_name'
     _description = 'Calendar Attendee Information'
     _order = 'create_date ASC'

--- a/addons/calendar/models/calendar_event.py
+++ b/addons/calendar/models/calendar_event.py
@@ -64,8 +64,7 @@ def get_weekday_occurence(date):
     return occurence_in_month
 
 
-class Meeting(models.Model):
-    _name = 'calendar.event'
+class CalendarEvent(models.Model):
     _description = "Calendar Event"
     _order = "start desc"
     _inherit = ["mail.thread"]
@@ -85,7 +84,7 @@ class Meeting(models.Model):
                 default_res_model_id=self.env['ir.model']._get_id(self.env.context['default_res_model'])
             )
 
-        defaults = super(Meeting, self).default_get(fields)
+        defaults = super().default_get(fields)
 
         # support active_model / active_id as replacement of default_* if not already given
         if 'res_model_id' not in defaults and 'res_model_id' in fields and \
@@ -596,7 +595,7 @@ class Meeting(models.Model):
 
     def _compute_field_value(self, field):
         if field.compute_sudo:
-            return super(Meeting, self.with_context(prefetch_fields=False))._compute_field_value(field)
+            return super(CalendarEvent, self.with_context(prefetch_fields=False))._compute_field_value(field)
         return super()._compute_field_value(field)
 
     def _fetch_query(self, query, fields):
@@ -758,7 +757,7 @@ class Meeting(models.Model):
         """ Hide private events' name for events which don't belong to the current user. """
         hidden = self.filtered(lambda event: event._check_private_event_conditions())
         hidden.display_name = _('Busy')
-        super(Meeting, self - hidden)._compute_display_name()
+        super(CalendarEvent, self - hidden)._compute_display_name()
 
     @api.model
     def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):
@@ -771,8 +770,8 @@ class Meeting(models.Model):
         private_fields = grouped_fields - self._get_public_fields()
         if not self.env.su and private_fields:
             domain = AND([domain, self._get_default_privacy_domain()])
-            return super(Meeting, self).read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby, lazy=lazy)
-        return super(Meeting, self).read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby, lazy=lazy)
+            return super().read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby, lazy=lazy)
+        return super().read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby, lazy=lazy)
 
     def unlink(self):
         if not self:

--- a/addons/calendar/models/calendar_event_type.py
+++ b/addons/calendar/models/calendar_event_type.py
@@ -6,9 +6,8 @@ from random import randint
 from odoo import fields, models
 
 
-class MeetingType(models.Model):
+class CalendarEventType(models.Model):
 
-    _name = 'calendar.event.type'
     _description = 'Event Meeting Type'
 
     def _default_color(self):

--- a/addons/calendar/models/calendar_filter.py
+++ b/addons/calendar/models/calendar_filter.py
@@ -4,8 +4,7 @@
 from odoo import api, fields, models
 
 
-class Contacts(models.Model):
-    _name = 'calendar.filters'
+class CalendarFilters(models.Model):
     _description = 'Calendar Filters'
 
     user_id = fields.Many2one('res.users', 'Me', required=True, default=lambda self: self.env.user, index=True, ondelete='cascade')

--- a/addons/calendar/models/calendar_recurrence.py
+++ b/addons/calendar/models/calendar_recurrence.py
@@ -91,8 +91,7 @@ def weekday_to_field(weekday_index):
     return RRULE_WEEKDAY_TO_FIELD.get(weekday_index)
 
 
-class RecurrenceRule(models.Model):
-    _name = 'calendar.recurrence'
+class CalendarRecurrence(models.Model):
     _description = 'Event Recurrence Rule'
 
     name = fields.Char(compute='_compute_name', store=True)

--- a/addons/calendar/models/ir_http.py
+++ b/addons/calendar/models/ir_http.py
@@ -8,7 +8,7 @@ from odoo.http import request
 
 
 class IrHttp(models.AbstractModel):
-    _inherit = 'ir.http'
+    _inherit = ['ir.http']
 
     @classmethod
     def _auth_method_calendar(cls):

--- a/addons/calendar/models/mail_activity.py
+++ b/addons/calendar/models/mail_activity.py
@@ -6,7 +6,7 @@ from odoo.tools import is_html_empty
 
 
 class MailActivity(models.Model):
-    _inherit = "mail.activity"
+    _inherit = ["mail.activity"]
 
     calendar_event_id = fields.Many2one('calendar.event', string="Calendar Meeting", ondelete='cascade')
 

--- a/addons/calendar/models/mail_activity_mixin.py
+++ b/addons/calendar/models/mail_activity_mixin.py
@@ -3,8 +3,9 @@
 
 from odoo import api, fields, models
 
+
 class MailActivityMixin(models.AbstractModel):
-    _inherit = 'mail.activity.mixin'
+    _inherit = ['mail.activity.mixin']
 
     activity_calendar_event_id = fields.Many2one(
         'calendar.event', string="Next Activity Calendar Event",

--- a/addons/calendar/models/mail_activity_type.py
+++ b/addons/calendar/models/mail_activity_type.py
@@ -5,6 +5,6 @@ from odoo import models, fields
 
 
 class MailActivityType(models.Model):
-    _inherit = "mail.activity.type"
+    _inherit = ["mail.activity.type"]
 
     category = fields.Selection(selection_add=[('meeting', 'Meeting')])

--- a/addons/calendar/models/res_partner.py
+++ b/addons/calendar/models/res_partner.py
@@ -7,8 +7,8 @@ from odoo import api, fields, models
 from odoo.tools import SQL
 
 
-class Partner(models.Model):
-    _inherit = 'res.partner'
+class ResPartner(models.Model):
+    _inherit = ['res.partner']
 
     meeting_count = fields.Integer("# Meetings", compute='_compute_meeting_count')
     meeting_ids = fields.Many2many('calendar.event', 'calendar_event_res_partner_rel', 'res_partner_id',

--- a/addons/calendar/models/res_users.py
+++ b/addons/calendar/models/res_users.py
@@ -9,8 +9,8 @@ from odoo.exceptions import AccessError
 from pytz import timezone, UTC
 
 
-class Users(models.Model):
-    _inherit = 'res.users'
+class ResUsers(models.Model):
+    _inherit = ['res.users']
 
     calendar_default_privacy = fields.Selection(
         [('public', 'Public'),

--- a/addons/calendar/models/res_users_settings.py
+++ b/addons/calendar/models/res_users_settings.py
@@ -2,8 +2,9 @@
 
 from odoo import api, fields, models
 
+
 class ResUsersSettings(models.Model):
-    _inherit = "res.users.settings"
+    _inherit = ["res.users.settings"]
 
     # Calendar module settings.
     calendar_default_privacy = fields.Selection(
