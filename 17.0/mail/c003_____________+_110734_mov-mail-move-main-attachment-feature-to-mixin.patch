PR: https://github.com/odoo/odoo/pull/110734

From: f8c7f2e5bb2495a0a7d68a15033a94a90f51dd9b
From: Pierre-Yves Dufays
Date: 2023-03-02 11:32:10

Structural Changes: 3
Total Changes: 54

[MOV] mail: move main attachment feature to mixin

Main attachment is quite costly and as it is implemented in mail.thread, is
present in most model. In order to improve performance, we remove it here from
mail.thread and add it, through a new mixin, only on models that actually use
that feature.

Technical note: with the current implementation, even if the font-end view
expect the model to implement the main attachment feature and the model
doesn't, it doesn't crash. Indeed, the main attachment on the front-end is only
used to know the first image to display in the image 'carousel' on the right
(widget rendered through the presence of the class o_attachment_preview). And
as 'register_as_main_attachment' of ir.attachment doesn't crash even if the
model doesn't support main attachment feature, the only consequence is that the
first image to display is not persisted (if you refresh after changing the main
attachment, it will get back to the previous one).

Task-2648976

Part-of: odoo/odoo#110734

================================= pseudo patch: =================================

--- a/addons/mail/models/__init__.py
+++ b/addons/mail/models/__init__.py
@@ -13,6 +13,7 @@ from . import mail_composer_mixin
 from . import mail_thread
 from . import mail_thread_blacklist
 from . import mail_thread_cc
+from . import mail_thread_main_attachment
 from . import template_reset_mixin
 
 # mail models

--- a/addons/mail/models/mail_thread.py
+++ b/addons/mail/models/mail_thread.py
@@ -107,7 +107,6 @@ class MailThread(models.AbstractModel):
         'Number of errors', compute='_compute_message_has_error',
         help="Number of messages with delivery error")
     message_attachment_count = fields.Integer('Attachment Count', compute='_compute_message_attachment_count', groups="base.group_user")
-    message_main_attachment_id = fields.Many2one(string="Main Attachment", comodel_name='ir.attachment', copy=False)
 
     @api.depends('message_follower_ids')
     def _compute_message_partner_ids(self):
@@ -1971,11 +1970,6 @@ class MailThread(models.AbstractModel):
         """ Hook to add custom behavior after having posted the message. Both
         message and computed value are given, to try to lessen query count by
         using already-computed values instead of having to rebrowse things. """
-        # Set main attachment field if necessary
-        self._message_set_main_attachment_id([
-            attachment_command[1]
-            for attachment_command in (msg_values['attachment_ids'] or [])
-        ])
 
     def _message_mail_after_hook(self, mails):
         """ Hook to add custom behavior after having sent an mass mailing.
@@ -1983,16 +1977,6 @@ class MailThread(models.AbstractModel):
         :param mail.mail mails: mail.mail records about to be sent"""
         return
 
-    def _message_set_main_attachment_id(self, attachment_ids):
-        if self._name == 'mail.thread':
-            return
-        if attachment_ids and not self.message_main_attachment_id:
-            all_attachments = self.env['ir.attachment'].browse(attachment_ids)
-            prioritary_attachments = all_attachments.filtered(lambda x: x.mimetype.endswith('pdf')) \
-                                     or all_attachments.filtered(lambda x: x.mimetype.startswith('image')) \
-                                     or all_attachments
-            self.sudo().with_context(tracking_disable=True).message_main_attachment_id = prioritary_attachments[0].id
-
     def _process_attachments_for_post(self, attachments, attachment_ids, message_values):
         """ Preprocess attachments for MailTread.message_post() or MailMail.create().
         Purpose is to
@@ -3797,7 +3781,6 @@ class MailThread(models.AbstractModel):
             res['activities'] = self.activity_ids.activity_format()
         if 'attachments' in request_list:
             res['attachments'] = self._get_mail_thread_data_attachments()._attachment_format()
-            res['mainAttachment'] = {'id': self.message_main_attachment_id.id} if self.message_main_attachment_id else [('clear',)]
         if 'followers' in request_list:
             res['followers'] = [{
                 'id': follower.id,

--- a/None
+++ b/addons/mail/models/mail_thread_main_attachment.py
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class MailMainAttachmentMixin(models.AbstractModel):
+    """ Mixin that adds main attachment support to the MailThread class. """
+
+    _name = 'mail.thread.main.attachment'
+    _inherit = 'mail.thread'
+    _description = 'Mail Main Attachment management'
+
+    message_main_attachment_id = fields.Many2one(string="Main Attachment", comodel_name='ir.attachment', copy=False)
+
+    def _message_post_after_hook(self, message, msg_values):
+        """ Set main attachment field if necessary """
+        super()._message_post_after_hook(message, msg_values)
+        self._message_set_main_attachment_id([
+            attachment_command[1]
+            for attachment_command in (msg_values['attachment_ids'] or [])
+        ])
+
+    def _message_set_main_attachment_id(self, attachment_ids):
+        if attachment_ids and not self.message_main_attachment_id:
+            all_attachments = self.env['ir.attachment'].browse(attachment_ids)
+            prioritary_attachments = all_attachments.filtered(lambda x: x.mimetype.endswith('pdf')) \
+                                     or all_attachments.filtered(lambda x: x.mimetype.startswith('image')) \
+                                     or all_attachments
+            self.sudo().with_context(tracking_disable=True).message_main_attachment_id = prioritary_attachments[0].id
+
+    def _get_mail_thread_data(self, request_list):
+        res = super()._get_mail_thread_data(request_list)
+        if 'attachments' in request_list:
+            res['mainAttachment'] = {'id': self.message_main_attachment_id.id} if self.message_main_attachment_id else [('clear',)]
+        return res
