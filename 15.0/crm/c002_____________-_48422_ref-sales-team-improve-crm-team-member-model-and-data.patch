PR: https://github.com/odoo/odoo/pull/48422

From: e1355dae7a775237a735847b5f5f426e08642c0b
From: Thibault DelavallÃ©e
Date: 2021-01-21 10:56:37

Structural Changes: 3
Total Changes: 25

[REF] sales_team: improve crm.team.member model and data

GLOBAL PURPOSE

Ability to have salesmen belonging to several sales team is a core requirement
of CRM. It is therefore moved from website_crm_score to crm along with cleaning
and behavior improvement. Automatic lead assignment is also moved and cleaned.

SPECIFICATIONS: MODEL CLEANING

In this commit we improve team member model to make it more usable and
aligned with current Odoo views and usability.

This commit contains notably
  * add some related fields on the user: phone, mobile, company, email;
  * rename "team_user_domain" to "assignment_domain";
  * rename "maximum_user_leads" to "assignment_max";
  * improve member views globally;

We also introduce dynamic domain computation for users and teams when seeing
team members. This allows to limit selection of users or teams depending
on already existing configuration. Purpose is to avoid having people trying
to create wrong configuration (duplicates, ...) and receiving error messages.

Also
  * clean some data and demo about teams and members;
  * fix some views glitches;
  * improve views: add some fields in search views, improve wording of
    fields or actions, ... globally improve usability and US as well as
    feedback given to users;
  * group sales team members by team by default as it help getting an
    overview of team members distribution;
  * update tests to create team members instead of writing directly on m2m
    towards users;

SPECIFICATIONS: SALE_TEAM_ID FIELD ON RES.USERS

In this commit we also rewrite sale_team_id field of res.users. Previously in
crm it was simply a many2one field linking to a crm.team. It was used to compute
team membership as a standard many2one / one2many relationship. In enterprise
module ``website_crm_score`` this field was set as a related on first user
teams. Indeed scoring changed relationship between users and teams to a
many2many.

This field is now directly a computed many2one field that links to the
"main" team of the user even in multi memberships mode. As memberships can
now be de-activated we changed this field to a computed stored field. It is
based on oldest active membership of user. That way default team of documents
will be the user's oldest team considered as its "main team".

SPECIFICATIONS: LEAD_ALL_ASSIGNED_MONTH_COUNT

Improve crm_team ``lead_all_assigned_month_count`` field computation. It is
now simply the sum of assigned leads of team members. Differences may
happen if a lead in teamA is assigned to an user working in teamB. This should
not happen if team / user is correctly set at lead level which is generally
the case. However if that happens, old field counted it. New field will not
count it as it is not directly linked to a team's member.

SPECIFICATIONS: DEMO DATA

Make crm.lead demo data coherent with user_id / team_id . As demo data should
be using a mono-membership behavior for users and teams, we have to ensure
user_id and team_id effectively matches. It allows to have coherent reporting
and assignment demo flows.

Also avoid having Odoobot responsible of leads. Instead of undefined user_id
and team_id leading to Odoobot being responsible of some leads, force it
to be False. Those demo data allow to test automatic assignment of lead

LINKS

Task ID-2086889 (main task)
Task ID-2357969 (scoring migration task)
Community PR odoo/odoo#48422
Enterprise PR odoo/enterprise#499
Upgrade PR odoo/upgrade#996

================================= pseudo patch: =================================

--- a/addons/crm/models/crm_team.py
+++ b/addons/crm/models/crm_team.py
@@ -47,16 +47,10 @@ class Team(models.Model):
         for team in self:
             team.lead_unassigned_count = counts.get(team.id, 0)
 
+    @api.depends('crm_team_member_ids.lead_month_count')
     def _compute_lead_all_assigned_month_count(self):
-        limit_date = datetime.datetime.now() - datetime.timedelta(days=30)
-        leads_data = self.env['crm.lead'].read_group([
-            ('team_id', 'in', self.ids),
-            ('date_open', '>=', fields.Datetime.to_string(limit_date)),
-            ('user_id', '!=', False),
-        ], ['team_id'], ['team_id'])
-        counts = {datum['team_id'][0]: datum['team_id_count'] for datum in leads_data}
         for team in self:
-            team.lead_all_assigned_month_count = counts.get(team.id, 0)
+            team.lead_all_assigned_month_count = sum(s.lead_month_count for s in team.crm_team_member_ids)
 
     def _compute_opportunities_data(self):
         opportunity_data = self.env['crm.lead'].read_group([

--- a/addons/crm/models/crm_team_member.py
+++ b/addons/crm/models/crm_team_member.py
@@ -12,15 +12,16 @@ class Team(models.Model):
     _inherit = 'crm.team.member'
 
     # assignment
-    team_user_domain = fields.Char('Domain', tracking=True)
-    maximum_user_leads = fields.Integer('Leads Per Month')
+    assignment_domain = fields.Char('Assignment Domain', tracking=True)
+    assignment_max = fields.Integer('Max Leads (last 30 days)')
     lead_month_count = fields.Integer(
-        'Assigned Leads', compute='_compute_lead_month_count',
+        'Leads (30 days)', compute='_compute_lead_month_count',
         help='Lead assigned to this member those last 30 days')
 
+    @api.depends('user_id', 'crm_team_id')
     def _compute_lead_month_count(self):
         for member in self:
-            if member.id:
+            if member.user_id.id and member.crm_team_id.id:
                 limit_date = fields.Datetime.now() - datetime.timedelta(days=30)
                 domain = [('user_id', '=', member.user_id.id),
                           ('team_id', '=', member.crm_team_id.id),
@@ -29,11 +30,11 @@ class Team(models.Model):
             else:
                 member.lead_month_count = 0
 
-    @api.constrains('team_user_domain')
-    def _constrains_team_user_domain(self):
+    @api.constrains('assignment_domain')
+    def _constrains_assignment_domain(self):
         for member in self:
             try:
-                domain = safe_eval.safe_eval(member.team_user_domain or '[]', LEAD_ASSIGN_EVAL_CONTEXT)
+                domain = safe_eval.safe_eval(member.assignment_domain or '[]', LEAD_ASSIGN_EVAL_CONTEXT)
                 self.env['crm.lead'].search(domain, limit=1)
             except Exception:
                 raise exceptions.UserError(_('Team membership assign domain is incorrectly formatted'))
