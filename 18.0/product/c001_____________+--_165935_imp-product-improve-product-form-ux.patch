PR: https://github.com/odoo/odoo/pull/165935

From: 65652c73ba5331f77911186543062dfddf50f077
From: Manushi Shah
Date: 2024-05-23 11:01:05

Structural Changes: 7
Total Changes: 13

[IMP] product, *: improve product form UX

This commit do following UI changes:
- Update string of sales and purchase tax also set
purchase tax from sales tax.
- Hide purchase tax for no purchase_ok field.
- Change strings of some fields for better UX.
- Add POS page in product.
- Re~sequence state button in product.
- Hide tax and other field for combo products.
- Change string goods to consumable.

task-3526304

Part-of: odoo/odoo#165935
Co-authored-by: Kartik Chavda <kcv@odoo.com>

================================= pseudo patch: =================================

--- a/addons/product/models/product_product.py
+++ b/addons/product/models/product_product.py
@@ -354,7 +354,7 @@ class ProductProduct(models.Model):
         if self.env['product.product'].search_count(domain, limit=1):
             return {'warning': {
                 'title': _("Note:"),
-                'message': _("The Internal Reference '%s' already exists.", self.default_code),
+                'message': _("The Reference '%s' already exists.", self.default_code),
             }}
 
     @api.model_create_multi

--- a/addons/product/models/product_template.py
+++ b/addons/product/models/product_template.py
@@ -50,13 +50,13 @@ class ProductTemplate(models.Model):
         help="A description of the Product that you want to communicate to your customers. "
              "This description will be copied to every Sales Order, Delivery Order and Customer Invoice/Credit Note")
     detailed_type = fields.Selection([
-        ('consu', 'Consumable'),
+        ('consu', 'Goods'),
         ('service', 'Service')], string='Product Type', default='consu', required=True,
         help='A storable product is a product for which you manage stock. The Inventory app has to be installed.\n'
              'A consumable product is a product for which stock is not managed.\n'
              'A service is a non-material product you provide.')
     type = fields.Selection(
-        [('consu', 'Consumable'),
+        [('consu', 'Goods'),
          ('service', 'Service')],
         compute='_compute_type', store=True, readonly=False, precompute=True)
     categ_id = fields.Many2one(
@@ -73,6 +73,7 @@ class ProductTemplate(models.Model):
     list_price = fields.Float(
         'Sales Price', default=1.0,
         digits='Product Price',
+        tracking=True,
         help="Price at which the product is sold to customers.",
     )
     standard_price = fields.Float(
@@ -91,15 +92,15 @@ class ProductTemplate(models.Model):
         inverse='_set_weight', store=True)
     weight_uom_name = fields.Char(string='Weight unit of measure label', compute='_compute_weight_uom_name')
 
-    sale_ok = fields.Boolean('Can be Sold', default=True)
-    purchase_ok = fields.Boolean('Can be Purchased', default=True)
+    sale_ok = fields.Boolean('Sales', default=True)
+    purchase_ok = fields.Boolean('Purchase', default=True)
     uom_id = fields.Many2one(
         'uom.uom', 'Unit of Measure',
         default=_get_default_uom_id, required=True,
         help="Default unit of measure used for all stock operations.")
     uom_name = fields.Char(string='Unit of Measure Name', related='uom_id.name', readonly=True)
     uom_po_id = fields.Many2one(
-        'uom.uom', 'Purchase UoM',
+        'uom.uom', 'Purchase Unit',
         default=_get_default_uom_po_id, required=True,
         help="Default unit of measure used for purchase orders. It must be in the same category as the default unit of measure.")
     company_id = fields.Many2one(
