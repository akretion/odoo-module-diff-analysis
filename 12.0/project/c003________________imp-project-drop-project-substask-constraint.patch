PR: https://github.com/odoo/odoo/pull/

From: 66a0e5a541f7311bf7bb05278654b329ae485ea0
From: Akash Bhavsar
Date: 2018-01-17 08:34:11

Structural Changes: 2
Total Changes: 89

[IMP] project: drop project substask constraint

This commit improves subtask mecanism, on several points:
1) Drop the project constraint: before this commit, creating
subtask in non parent project was not possible. Now you can move
subtask to any project.
The default project of a subtask is the one from the parent.
2) When setting a parent task, we want to force some field to have
the same value as its parent, like `partner_id` or the `sale_line_id`.
The idea is here, we work for the same client; a subtask count for the
same goal (SO line or customer). Those fields should be readonly on the
view.
3) Refactor some methods

Task: 38498

================================= pseudo patch: =================================

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -222,8 +222,6 @@ class Project(models.Model):
     doc_count = fields.Integer(compute='_compute_attached_docs_count', string="Number of documents attached")
     date_start = fields.Date(string='Start Date')
     date = fields.Date(string='Expiration Date', index=True, track_visibility='onchange')
-    subtask_project_id = fields.Many2one('project.project', string='Sub-task Project', ondelete="restrict",
-        help="Choosing a sub-tasks project will both enable sub-tasks and set their default project (possibly the project itself)")
     # rating fields
     percentage_satisfaction_task = fields.Integer(
         compute='_compute_percentage_satisfaction_task', string="Happy % on Task", store=True, default=-1)
@@ -300,8 +298,6 @@ class Project(models.Model):
         # Prevent double project creation
         self = self.with_context(mail_create_nosubscribe=True)
         project = super(Project, self).create(vals)
-        if not vals.get('subtask_project_id'):
-            project.subtask_project_id = project.id
         if project.privacy_visibility == 'portal' and project.partner_id:
             project.message_subscribe(project.partner_id.ids)
         return project
@@ -443,6 +439,14 @@ class Task(models.Model):
     _mail_post_access = 'read'
     _order = "priority desc, sequence, date_start, name, id"
 
+    @api.model
+    def default_get(self, fields_list):
+        result = super(Task, self).default_get(fields_list)
+        # force some parent values, if needed
+        if 'parent_id' in result and result['parent_id']:
+            result.update(self._subtask_values_from_parent(result['parent_id']))
+        return result
+
     def _get_default_partner(self):
         if 'default_project_id' in self.env.context:
             default_project_id = self.env['project.project'].browse(self.env.context['default_project_id'])
@@ -503,7 +507,7 @@ class Task(models.Model):
         track_visibility='onchange',
         change_default=True)
     notes = fields.Text(string='Notes')
-    planned_hours = fields.Float(string='Initially Planned Hours', help='Estimated time to do the task, usually set by the project manager when the task is in draft state.')
+    planned_hours = fields.Float("Planned Hours", help='It is the time planned to achieve the task. If this document has sub-tasks, it means the time needed to achieve this tasks and its childs.')
     remaining_hours = fields.Float(string='Remaining Hours', digits=(16,2), help="Total remaining time, can be re-estimated periodically by the assignee of the task.")
     user_id = fields.Many2one('res.users',
         string='Assigned to',
@@ -527,8 +531,7 @@ class Task(models.Model):
     legend_normal = fields.Char(related='stage_id.legend_normal', string='Kanban Ongoing Explanation', readonly=True)
     parent_id = fields.Many2one('project.task', string='Parent Task')
     child_ids = fields.One2many('project.task', 'parent_id', string="Sub-tasks")
-    subtask_project_id = fields.Many2one('project.project', related="project_id.subtask_project_id", string='Sub-task Project', readonly=True)
-    subtask_count = fields.Integer(compute='_compute_subtask_count', type='integer', string="Sub-task count")
+    subtask_count = fields.Integer("Sub-task count", compute='_compute_subtask_count')
     email_from = fields.Char(string='Email', help="These people will receive email.", index=True)
     email_cc = fields.Char(string='Watchers Emails', help="""These email addresses will be added to the CC field of all inbound
         and outbound emails for this record before being sent. Separate multiple email addresses with a comma""")
@@ -583,20 +586,36 @@ class Task(models.Model):
         for task in self:
             task.portal_url = '/my/task/%s' % task.id
 
+    @api.depends('child_ids')
+    def _compute_subtask_count(self):
+        """ Note: since we accept only one level subtask, we can use a read_group here """
+        task_data = self.env['project.task'].read_group([('parent_id', 'in', self.ids)], ['parent_id'], ['parent_id'])
+        mapping = dict((data['parent_id'][0], data['parent_id_count']) for data in task_data)
+        for task in self:
+            task.subtask_count = mapping.get(task.id, 0)
+
     @api.onchange('partner_id')
     def _onchange_partner_id(self):
         self.email_from = self.partner_id.email
 
+    @api.onchange('parent_id')
+    def _onchange_parent_id(self):
+        if self.parent_id:
+            for field_name in self._subtask_implied_fields():
+                self[field_name] = self.parent_id[field_name]
+
     @api.onchange('project_id')
     def _onchange_project(self):
         default_partner_id = self.env.context.get('default_partner_id')
         default_partner = self.env['res.partner'].browse(default_partner_id) if default_partner_id else self.env['res.partner']
         if self.project_id:
-            self.partner_id = self.project_id.partner_id or default_partner
+            if not self.parent_id and not self.partner_id:
+                self.partner_id = self.project_id.partner_id or default_partner
             if self.project_id not in self.stage_id.project_ids:
                 self.stage_id = self.stage_find(self.project_id.id, [('fold', '=', False)])
         else:
-            self.partner_id = default_partner
+            if not self.parent_id:
+                self.partner_id = default_partner
             self.stage_id = False
 
     @api.onchange('user_id')
@@ -614,17 +633,6 @@ class Task(models.Model):
             default['remaining_hours'] = self.planned_hours
         return super(Task, self).copy(default)
 
-    @api.multi
-    def _compute_subtask_count(self):
-        for task in self:
-            task.subtask_count = self.search_count([('id', 'child_of', task.id), ('id', '!=', task.id)])
-
-    @api.constrains('parent_id')
-    def _check_subtask_project(self):
-        for task in self:
-            if task.parent_id.project_id and task.project_id != task.parent_id.project_id.subtask_project_id:
-                raise UserError(_("You can't define a parent task if its project is not correctly configured. The sub-task's project of the parent task's project should be this task's project"))
-
     # Override view according to the company definition
     @api.model
     def fields_view_get(self, view_id=None, view_type='form', toolbar=False, submenu=False):
@@ -708,7 +716,9 @@ class Task(models.Model):
     def create(self, vals):
         # context: no_log, because subtype already handle this
         context = dict(self.env.context, mail_create_nolog=True)
-
+        # force some parent values, if needed
+        if 'parent_id' in vals and vals['parent_id']:
+            vals.update(self._subtask_values_from_parent(vals['parent_id']))
         # for default stage
         if vals.get('project_id') and not context.get('default_project_id'):
             context['default_project_id'] = vals.get('project_id')
@@ -724,6 +734,9 @@ class Task(models.Model):
     @api.multi
     def write(self, vals):
         now = fields.Datetime.now()
+        # subtask: force some parent values, if needed
+        if 'parent_id' in vals and vals['parent_id']:
+            vals.update(self._subtask_values_from_parent(vals['parent_id']))
         # stage change: update date_last_stage_update
         if 'stage_id' in vals:
             vals.update(self.update_date_end(vals['stage_id']))
@@ -739,6 +752,12 @@ class Task(models.Model):
         # rating on stage
         if 'stage_id' in vals and vals.get('stage_id'):
             self.filtered(lambda x: x.project_id.rating_status == 'stage')._send_task_rating_mail(force_send=True)
+        # subtask: update subtask according to parent values
+        subtask_values_to_write = self._subtask_write_values(vals)
+        if subtask_values_to_write:
+            subtasks = self.filtered(lambda task: not task.parent_id).mapped('child_ids')
+            if subtasks:
+                subtasks.write(subtask_values_to_write)
         return result
 
     def update_date_end(self, stage_id):
@@ -771,6 +790,34 @@ class Task(models.Model):
                 }
         return super(Task, self).get_access_action(access_uid)
 
+    # ---------------------------------------------------
+    # Subtasks
+    # ---------------------------------------------------
+
+    @api.model
+    def _subtask_implied_fields(self):
+        """ Return the list of field name to apply on subtask when changing parent_id or when updating parent task. """
+        return ['partner_id', 'email_from']
+
+    @api.multi
+    def _subtask_write_values(self, values):
+        """ Return the values to write on subtask when `values` is written on parent tasks
+            :param values: dict of values to write on parent
+        """
+        result = {}
+        for field_name in self._subtask_implied_fields():
+            if field_name in values:
+                result[field_name] = values[field_name]
+        return result
+
+    def _subtask_values_from_parent(self, parent_id):
+        """ Get values for substask implied field of the given"""
+        result = {}
+        parent_task = self.env['project.task'].browse(parent_id)
+        for field_name in self._subtask_implied_fields():
+            result[field_name] = parent_task[field_name]
+        return self._convert_to_write(result)
+
     # ---------------------------------------------------
     # Mail gateway
     # ---------------------------------------------------
