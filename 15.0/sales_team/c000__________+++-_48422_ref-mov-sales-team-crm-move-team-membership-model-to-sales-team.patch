PR: https://github.com/odoo/odoo/pull/48422

From: 9790d7dcfbf1e22377f5555b275bf328216ae2ec
From: Thibault Delavall√©e
Date: 2021-01-21 10:56:19

Structural Changes: 12
Total Changes: 48

[REF][MOV] sales_team, crm: move team membership model to sales_team

GLOBAL PURPOSE

Ability to have salesmen belonging to several sales team is a core requirement
of CRM. It is therefore moved from website_crm_score to crm along with cleaning
and behavior improvement. Automatic lead assignment is also moved and cleaned.

SPECIFICIATIONS

Move sales team membership model from website_crm_score (enterprise) directly
into sales_team. It allows to have the base requirements to correctly handle
mono and multi sales team for salesperson.

Membership is modeled using a decorated many2many relationship. Members of
a sales team are res.users. Subscriptions are crm.team.member linking a team
and an user. It is a rename of team.user model coming from website_crm_score
as well as some other relational fields renaming.

Part of old team.user model is moved directly to sales team, part of it to
crm module (notably assignment limits). Its support will be improved in the
upcoming commits. Assignment related fields will be cleaned and used when
moving assignment directly into CRM.

LINKS

Task ID-2086889 (main task)
Task ID-2357969 (scoring migration task)
Community PR odoo/odoo#48422
Enterprise PR odoo/enterprise#499
Upgrade PR odoo/upgrade#996996

================================= pseudo patch: =================================

--- a/addons/sales_team/models/__init__.py
+++ b/addons/sales_team/models/__init__.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from . import crm_team_member
 from . import crm_team
 from . import crm_tag
 from . import res_partner

--- a/addons/sales_team/models/crm_team.py
+++ b/addons/sales_team/models/crm_team.py
@@ -20,16 +20,18 @@ class CrmTeam(models.Model):
     _check_company_auto = True
 
     def _get_default_team_id(self, user_id=None, domain=None):
-        user_id = user_id or self.env.uid
-        user_salesteam_id = self.env['res.users'].browse(user_id).sale_team_id.id
-        # Avoid searching on member_ids (+1 query) when we may have the user salesteam already in cache.
+        if user_id is None:
+            user_id = self.env.user.id
+
         team = self.env['crm.team'].search([
             ('company_id', 'in', [False, self.env.company.id]),
-            '|', ('user_id', '=', user_id), ('id', '=', user_salesteam_id),
+            '|', ('user_id', '=', user_id), ('member_ids', 'in', user_id),
         ], limit=1)
         if not team and 'default_team_id' in self.env.context:
             team = self.env['crm.team'].browse(self.env.context.get('default_team_id'))
-        return team or self.env['crm.team'].search(domain or [], limit=1)
+        if not team:
+            team = self.env['crm.team'].search(domain or [], limit=1)
+        return team
 
     def _get_default_favorite_user_ids(self):
         return [(6, 0, [self.env.uid])]
@@ -45,10 +47,11 @@ class CrmTeam(models.Model):
         related='company_id.currency_id', readonly=True)
     user_id = fields.Many2one('res.users', string='Team Leader', check_company=True)
     # memberships
-    member_ids = fields.One2many(
-        'res.users', 'sale_team_id', string='Channel Members',
+    member_ids = fields.Many2many(
+        'res.users', 'crm_team_member', 'crm_team_id', 'user_id', string='Channel Members',
         check_company=True, domain=[('share', '=', False)],
-        help="Add members to automatically assign their documents to this sales team. You can only be member of one team.")
+        help="Add members to automatically assign their documents to this sales team.")
+    crm_team_member_ids = fields.One2many('crm.team.member', 'crm_team_id', string='Sales Team Memberships')
     # UX options
     color = fields.Integer(string='Color Index', help="The color of the channel")
     favorite_user_ids = fields.Many2many(

--- a/None
+++ b/addons/sales_team/models/crm_team_member.py
@@ -0,0 +1,16 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class CrmTeamMember(models.Model):
+    _name = 'crm.team.member'
+    _inherit = ['mail.thread']
+    _description = 'Sales Team Member'
+    _rec_name = 'user_id'
+
+    crm_team_id = fields.Many2one('crm.team', string='Sales Team', required=True)
+    user_id = fields.Many2one('res.users', string='Saleman', required=True)  # check responsible field
+    name = fields.Char(string="Name", related='user_id.partner_id.display_name', readonly=False)
+    active = fields.Boolean(string='Running', default=True)

--- a/addons/sales_team/models/res_users.py
+++ b/addons/sales_team/models/res_users.py
@@ -7,6 +7,14 @@ from odoo import fields, models
 class ResUsers(models.Model):
     _inherit = 'res.users'
 
+    crm_team_ids = fields.Many2many('crm.team', 'crm_team_member', 'user_id', 'crm_team_id', string='Sales Teams')
+    crm_team_member_ids = fields.One2many('crm.team.member', 'user_id', string='Sales Team Memberships')
+    # mov of the field defined in website_crm_score. The field is now computed
+    # based on the new modeling introduced in this module. It is stored to avoid
+    # breaking the member_ids inverse field. As the relationship between users
+    # and sales team is a one2many / many2one relationship we take the first of
+    # the crm.team.member record to find the user's sales team.
     sale_team_id = fields.Many2one(
-        'crm.team', "User's Sales Team",
-        help='Sales Team the user is member of. Used to compute the members of a Sales Team through the inverse one2many')
\ No newline at end of file
+        'crm.team', string='User Sales Team',
+        related='crm_team_member_ids.crm_team_id',
+        readonly=False, store=True)
