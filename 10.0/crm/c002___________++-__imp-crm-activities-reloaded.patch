PR: https://github.com/odoo/odoo/pull/

From: 60c010d30649fccd61e9ca4b2356d63e815c8c55
From: Fabien Pinckaers
Date: 2015-11-26 09:48:25

Structural Changes: 7
Total Changes: 17

[IMP] crm: activities reloaded

Activities in opportunities are now handled through a wizard and not through
the form view anymore. The wizard is called via a Log an activity button. The
wizard allows to log an activity and to schedule the next activity. It
replaces the various <next activities> / Done / Cancel link buttons on the
form view that nobody seemed to inderstand.

================================= pseudo patch: =================================

--- a/addons/crm/models/crm_activity.py
+++ b/addons/crm/models/crm_activity.py
@@ -6,12 +6,12 @@ from openerp import api, fields, models
 
 class CrmActivity(models.Model):
     ''' CrmActivity is a model introduced in Odoo v9 that models activities
-    performed in CRM, like phonecalls, sending emails, making demonstrations,
+    performed in CRM, like phone calls, sending emails, making demonstrations,
     ... Users are able to configure their custom activities.
 
-    Each activity has up to three next activities. This allows to model light
-    custom workflows. This way sales manager can configure their crm workflow
-    that salepersons will use in their daily job.
+    Each activity can configure recommended next activities. This allows to model
+    light custom workflows. This way sales manager can configure their crm
+    workflow that salepersons will use in their daily job.
 
     CrmActivity inherits from mail.message.subtype. This allows users to follow
     some activities through subtypes. Each activity will generate messages with
@@ -29,9 +29,12 @@ class CrmActivity(models.Model):
     sequence = fields.Integer('Sequence', default=0)
     team_id = fields.Many2one('crm.team', string='Sales Team')
     subtype_id = fields.Many2one('mail.message.subtype', string='Message Subtype', required=True, ondelete='cascade')
-    activity_1_id = fields.Many2one('crm.activity', string="Next Activity 1")
-    activity_2_id = fields.Many2one('crm.activity', string="Next Activity 2")
-    activity_3_id = fields.Many2one('crm.activity', string="Next Activity 3")
+    recommended_activity_ids = fields.Many2many(
+        'crm.activity', 'crm_activity_rel', 'activity_id', 'recommended_id',
+        string='Recommended Next Activities')
+    preceding_activity_ids = fields.Many2many(
+        'crm.activity', 'crm_activity_rel', 'recommended_id', 'activity_id',
+        string='Preceding Activities')
 
     @api.model
     def create(self, values):
