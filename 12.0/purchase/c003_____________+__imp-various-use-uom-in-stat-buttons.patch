PR: https://github.com/odoo/odoo/pull/

From: 5118d248ccf16fe4d2703c2a64e0267f783a56d1
From: Kirti Choudhary
Date: 2018-08-08 12:51:12

Structural Changes: 4
Total Changes: 62

[IMP] various: use uom in stat buttons

In purchase we add a stat button that counts the number of purchase
orders linked to the product.
In this commit we change this count to count the quantity of products
linked to a purchase order.

We basically do the same thing with the stat button of sale (sale
orders) and mrp (manufacturing orders).

================================= pseudo patch: =================================

--- a/addons/purchase/models/product.py
+++ b/addons/purchase/models/product.py
@@ -1,24 +1,23 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from datetime import timedelta
+
 from odoo import api, fields, models, _
 from odoo.addons.base.models.res_partner import WARNING_MESSAGE, WARNING_HELP
+from odoo.tools.float_utils import float_round
 
 
 class ProductTemplate(models.Model):
     _name = 'product.template'
     _inherit = 'product.template'
 
-    @api.multi
-    def _purchase_count(self):
-        for template in self:
-            template.purchase_count = sum([p.purchase_count for p in template.product_variant_ids])
-        return True
-
     property_account_creditor_price_difference = fields.Many2one(
         'account.account', string="Price Difference Account", company_dependent=True,
-        help="This account will be used to value price difference between purchase price and cost price.")
-    purchase_count = fields.Integer(compute='_purchase_count', string='# Purchases')
+        help="This account is used in automated inventory valuation to "\
+            "record the price difference between a purchase order and its related vendor bill "\
+            "when validating this vendor bill.")
+    purchased_product_qty = fields.Float(compute='_compute_purchased_product_qty', string='Purchased')
     purchase_method = fields.Selection([
         ('purchase', 'On ordered quantities'),
         ('receive', 'On received quantities'),
@@ -27,6 +26,11 @@ class ProductTemplate(models.Model):
     purchase_line_warn = fields.Selection(WARNING_MESSAGE, 'Purchase Order Line', help=WARNING_HELP, required=True, default="no-message")
     purchase_line_warn_msg = fields.Text('Message for Purchase Order Line')
 
+    @api.multi
+    def _compute_purchased_product_qty(self):
+        for template in self:
+            template.purchased_product_qty = float_round(sum([p.purchased_product_qty for p in template.product_variant_ids]), precision_rounding=template.uom_id.rounding)
+
     @api.model
     def get_import_templates(self):
         res = super(ProductTemplate, self).get_import_templates()
@@ -37,22 +41,48 @@ class ProductTemplate(models.Model):
             }]
         return res
 
+    @api.multi
+    def action_view_po(self):
+        action = self.env.ref('purchase.action_purchase_order_report_all').read()[0]
+        action['domain'] = [('state', 'in', ['purchase', 'done']), '&', ('product_tmpl_id', 'in', self.ids)]
+        action['context'] = {
+            'search_default_last_year_purchase': 1,
+            'search_default_status': 1, 'search_default_order_month': 1,
+            'graph_measure': 'unit_quantity'
+        }
+        return action
+
 
 class ProductProduct(models.Model):
     _name = 'product.product'
     _inherit = 'product.product'
 
+    purchased_product_qty = fields.Float(compute='_compute_purchased_product_qty', string='Purchased')
+
     @api.multi
-    def _purchase_count(self):
+    def _compute_purchased_product_qty(self):
+        date_from = fields.Datetime.to_string(fields.datetime.now() - timedelta(days=365))
         domain = [
             ('state', 'in', ['purchase', 'done']),
             ('product_id', 'in', self.mapped('id')),
+            ('date_order', '>', date_from)
         ]
         PurchaseOrderLines = self.env['purchase.order.line'].search(domain)
+        order_lines = self.env['purchase.order.line'].read_group(domain, ['product_id', 'product_uom_qty'], ['product_id'])
+        purchased_data = dict([(data['product_id'][0], data['product_uom_qty']) for data in order_lines])
         for product in self:
-            product.purchase_count = len(PurchaseOrderLines.filtered(lambda r: r.product_id == product).mapped('order_id'))
+            product.purchased_product_qty = float_round(purchased_data.get(product.id, 0), precision_rounding=product.uom_id.rounding)
 
-    purchase_count = fields.Integer(compute='_purchase_count', string='# Purchases')
+    @api.multi
+    def action_view_po(self):
+        action = self.env.ref('purchase.action_purchase_order_report_all').read()[0]
+        action['domain'] = [('state', 'in', ['purchase', 'done']), '&', ('product_id', 'in', self.ids)]
+        action['context'] = {
+            'search_default_last_year_purchase': 1,
+            'search_default_status': 1, 'search_default_order_month': 1,
+            'graph_measure': 'unit_quantity'
+        }
+        return action
 
 
 class ProductCategory(models.Model):

--- a/addons/purchase/models/purchase.py
+++ b/addons/purchase/models/purchase.py
@@ -405,6 +405,7 @@ class PurchaseOrderLine(models.Model):
     name = fields.Text(string='Description', required=True)
     sequence = fields.Integer(string='Sequence', default=10)
     product_qty = fields.Float(string='Quantity', digits=dp.get_precision('Product Unit of Measure'), required=True)
+    product_uom_qty = fields.Float(string='Total Quantity', compute='_compute_product_uom_qty', store=True)
     date_planned = fields.Datetime(string='Scheduled Date', required=True, index=True)
     taxes_id = fields.Many2many('account.tax', string='Taxes', domain=['|', ('active', '=', False), ('active', '=', True)])
     product_uom = fields.Many2one('uom.uom', string='Product Unit of Measure', required=True)
@@ -610,6 +611,15 @@ class PurchaseOrderLine(models.Model):
 
         self.price_unit = price_unit
 
+    @api.multi
+    @api.depends('product_uom', 'product_qty', 'product_id.uom_id')
+    def _compute_product_uom_qty(self):
+        for line in self:
+            if line.product_id.uom_id != line.product_uom:
+                line.product_uom_qty = line.product_uom._compute_quantity(line.product_qty, line.product_id.uom_id)
+            else:
+                line.product_uom_qty = line.product_qty
+
     def _suggest_quantity(self):
         '''
         Suggest a minimal quantity based on the seller
