PR: https://github.com/odoo/odoo/pull/

From: 886eca0131716e137e60a1e398a9fc3996dfa425
From: Christophe Simonis
Date: 2019-08-05 09:36:41

Structural Changes: 8
Total Changes: 12

[IMP] *: remove usage of `oldname` attribute

This attribute is misleading as it is insufficient to correctly upgrade
the database. It only renames the column in the database, but other
operations are needed, like updating the corresponding `ir.model.fields`
record (and its xmlid). The default values and the translations are also
lost during the upgrade.

Moreover, this feature was misused. It was:
 - left on fields during multiple versions.
 - used on reports (SQL views). This would be ok if the feature was
   complete, but, as is, it was useless.
 - kept unchanged after a second renaming of the field (which can happen
   versions later the first rename).
 - used, even when the meaning of the field changed. i.e. the field
   `archived` has been renamed to the classic `active`, but the value
   in the database should be switched.

================================= pseudo patch: =================================

--- a/addons/mail/models/ir_model.py
+++ b/addons/mail/models/ir_model.py
@@ -10,7 +10,7 @@ class IrModel(models.Model):
     _order = 'is_mail_thread DESC, name ASC'
 
     is_mail_thread = fields.Boolean(
-        string="Mail Thread", oldname='mail_thread', default=False,
+        string="Mail Thread", default=False,
         help="Whether this model supports messages and notifications.",
     )
     is_mail_activity = fields.Boolean(

--- a/addons/mail/models/mail_activity.py
+++ b/addons/mail/models/mail_activity.py
@@ -38,7 +38,7 @@ class MailActivityType(models.Model):
     active = fields.Boolean(default=True)
     create_uid = fields.Many2one('res.users', index=True)
     delay_count = fields.Integer(
-        'Scheduled Date', default=0, oldname='days',
+        'Scheduled Date', default=0,
         help='Number of days/week/month before executing the action. It allows to plan the action deadline.')
     delay_unit = fields.Selection([
         ('days', 'days'),

--- a/addons/mail/models/mail_message.py
+++ b/addons/mail/models/mail_message.py
@@ -66,7 +66,7 @@ class Message(models.Model):
         'Type', required=True, default='email',
         help="Message type: email for email message, notification for system "
              "message, comment for other messages such as user replies",
-        oldname='type')
+        )
     subtype_id = fields.Many2one('mail.message.subtype', 'Subtype', ondelete='set null', index=True)
     mail_activity_type_id = fields.Many2one(
         'mail.activity.type', 'Mail Activity Type',
@@ -128,7 +128,7 @@ class Message(models.Model):
     moderator_id = fields.Many2one('res.users', string="Moderated By", index=True)
     need_moderation = fields.Boolean('Need moderation', compute='_compute_need_moderation', search='_search_need_moderation')
     #keep notification layout informations to be able to generate mail again
-    email_layout_xmlid = fields.Char('Layout', copy=False, oldname='layout')  # xml id of layout
+    email_layout_xmlid = fields.Char('Layout', copy=False)  # xml id of layout
     add_sign = fields.Boolean(default=True)
 
     def _get_needaction(self):

--- a/addons/mail/models/mail_template.py
+++ b/addons/mail/models/mail_template.py
@@ -113,7 +113,7 @@ class MailTemplate(models.Model):
              "- partner (using id on a partner or the partner_id field) OR\n"
              "- email (using email_from or email field)")
     email_to = fields.Char('To (Emails)', help="Comma-separated recipient addresses (placeholders may be used here)")
-    partner_to = fields.Char('To (Partners)', oldname='email_recipients',
+    partner_to = fields.Char('To (Partners)',
                              help="Comma-separated ids of recipient partners (placeholders may be used here)")
     email_cc = fields.Char('Cc', help="Carbon copy recipients (placeholders may be used here)")
     reply_to = fields.Char('Reply-To', help="Preferred response address (placeholders may be used here)")

--- a/addons/mail/models/mail_tracking_value.py
+++ b/addons/mail/models/mail_tracking_value.py
@@ -34,7 +34,7 @@ class MailTracking(models.Model):
 
     mail_message_id = fields.Many2one('mail.message', 'Message ID', required=True, index=True, ondelete='cascade')
 
-    tracking_sequence = fields.Integer('Tracking field sequence', readonly=1, default=100, oldname='track_sequence')
+    tracking_sequence = fields.Integer('Tracking field sequence', readonly=1, default=100)
 
     def _compute_field_groups(self):
         for tracking in self:
