PR: https://github.com/odoo/odoo/pull/

From: f983703dfa3c5102fa818523ae419a70cc4b5230
From: luve-odoo
Date: 2024-05-27 18:02:58
+    embedded_action_ids = fields.One2many('ir.embedded.actions', compute="_compute_embedded_actions")
+    filter_ids = fields.One2many("ir.filters", "embedded_action_id", help="Default filter of the embedded action (if none, no filters)")
+    groups_ids = fields.Many2many('res.groups', help='Groups that can execute the embedded action. Leave empty to allow everybody.')

Total Changes: 170

[IMP] web, base: Add embedded actions

This update introduces the implementation of embedded actions, enabling
the addition of embedded actions in the control panel for seamless
toggling among various actions.

Functional specifications:

This task aims to centralize and access models related to the current
parent model.

We introduce the concept of embedded action. If an action has embedded
actions, then a button with an 'sliders' icon is displayed in the control
panel.

When the user clicks the button, the embedded actions appears.

The implementation consists as various actions chosen as visible
by the user. By default, the embedded actions only displays the parent
action (and will always display it).

There is a dropdown button to the right of the topbar that displays
all the actions available to the user. These actions depend on the model
, but it's also possible that there is a domain on these actions making
them invisible. For example, a project without the 'allow timesheets'
option will not display the 'Timesheets' action.

The default actions cannot be deleted by the user; they can only
decide whether to display them or not. The visibility of actions is
different for each model but also for each model ID, meaning, for
example, that the actions visible in one project will not be the same
for another.

Each user can also save the current view and thus create a new embedded
action. They can decide to share this embedded action so that it is
visible to everyone, or not. The view type and filters are saved when
creating a new embedded action. Those saved filters are saved as favorites
filters that cannot be deleted while the embedded action exists.

If the user has the rights, he can also drag and drop the actions to
reorder them. This order will be specific to the user and to the model
ID in which the reordering was made.

On Mobile, only a dropdown is displayed with the current action. When
the dropdown is unfolded, all available actions are displayed. It is
not possible to drag and drop. Deleting is always available, as well as
the creation of new actions.

The breadcrumbs should never push new items. When navigating between
embedded actions, the breadcrumbs should be replaced.

In order to create a new default embedded action for a model, the
developer has to create an xml record of that structure:

<record id="<id>" model="ir.embedded.actions">
    <field name="parent_res_model"><parent_res_model></field>
    <field name="parent_action_id" ref="<xml_id_parent_action>"/>
    <!--
        for the triggered action, the developer can either choose
        between a xml action id or a python action
    -->
    <field name="action_id" ref=<triggered_action_id>/>
    <field name="python_method"><python_method></field>
    <!-- name is optional if an action_id is declared -->
    <field name="name"><name_of_the_embedded_action></field>
    <!-- optional -->
    <field name="sequence"><sequence_order_integer></field>
    <field name="domain"><domain_to_filter_embedded_actions></field>
    <field name="context"><additional_context_keys></field>
    <field name="default_view_mode"><default_view></field>
    <field name="filter_ids"><Filters></field>
    <field name="groups_ids"><Groups></field>
</record>

taskid:3750721

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/__init__.py
+++ b/odoo/addons/base/models/__init__.py
@@ -8,6 +8,7 @@ from . import ir_ui_menu
 from . import ir_ui_view
 from . import ir_asset
 from . import ir_actions
+from . import ir_embedded_actions
 from . import ir_actions_report
 from . import ir_attachment
 from . import ir_binary

--- a/odoo/addons/base/models/ir_actions.py
+++ b/odoo/addons/base/models/ir_actions.py
@@ -228,6 +228,11 @@ class IrActions(models.Model):
         """
         self.ensure_one()
         readable_fields = self._get_readable_fields()
+        if (self.sudo().type == "ir.actions.act_window"):
+            result = self.sudo().read()[0]
+            embedded_actions = self.env["ir.embedded.actions"].browse(result["embedded_action_ids"]).read()
+            result.update({"embedded_action_ids": embedded_actions})
+            return result
         return {
             field: value
             for field, value in self.sudo().read()[0].items()
@@ -320,8 +325,14 @@ class IrActionsActWindow(models.Model):
     groups_id = fields.Many2many('res.groups', 'ir_act_window_group_rel',
                                  'act_id', 'gid', string='Groups')
     search_view_id = fields.Many2one('ir.ui.view', string='Search View Ref.')
+    embedded_action_ids = fields.One2many('ir.embedded.actions', compute="_compute_embedded_actions")
     filter = fields.Boolean()
 
+    def _compute_embedded_actions(self):
+        embedded_actions = self.env["ir.embedded.actions"].search([('parent_action_id', 'in', self.ids)]).filtered(lambda x: x.is_visible)
+        for action in self:
+            action.embedded_action_ids = embedded_actions.filtered(lambda rec: rec.parent_action_id == action)
+
     def read(self, fields=None, load='_classic_read'):
         """ call the method get_empty_list_help of the model and set the window action help message
         """
@@ -365,7 +376,7 @@ class IrActionsActWindow(models.Model):
     def _get_readable_fields(self):
         return super()._get_readable_fields() | {
             "context", "mobile_view_mode", "domain", "filter", "groups_id", "limit",
-            "res_id", "res_model", "search_view_id", "target", "view_id", "view_mode", "views",
+            "res_id", "res_model", "search_view_id", "target", "view_id", "view_mode", "views", "embedded_action_ids",
             # `flags` is not a real field of ir.actions.act_window but is used
             # to give the parameters to generate the action
             "flags"

--- a/None
+++ b/odoo/addons/base/models/ir_embedded_actions.py
@@ -0,0 +1,102 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import UserError
+from ast import literal_eval
+
+
+class IrEmbeddedActions(models.Model):
+    _name = 'ir.embedded.actions'
+    _description = 'Embedded Actions'
+    _order = 'id, sequence'
+
+    name = fields.Char(string='Embedded Name', translate=True)
+    sequence = fields.Integer()
+    parent_action_id = fields.Many2one('ir.actions.act_window', required=True, string='Parent Action', ondelete="cascade")
+    parent_res_id = fields.Integer(string="Active Parent Id")
+    parent_res_model = fields.Char(string='Active Parent Model', required=True)
+    # It is required to have either action_id or python_method
+    action_id = fields.Many2one('ir.actions.act_window', string="Action Id", ondelete="cascade")
+    python_method = fields.Char(help="Python method returning an action")
+
+    user_id = fields.Many2one('res.users', string="Embedded user", help="User specific embedded action. If empty, shared embedded action", ondelete="cascade")
+    is_deletable = fields.Boolean(compute="_compute_is_deletable")
+    default_view_mode = fields.Char(string="Default view", help="Default view (if none, default view of the action is taken)")
+    filter_ids = fields.One2many("ir.filters", "embedded_action_id", help="Default filter of the embedded action (if none, no filters)")
+    is_visible = fields.Boolean(string="Embedded visibility", help="Computed field to check if the record should be visible according to the domain", compute="_compute_is_visible")
+    domain = fields.Char(string='Domain Value', default="[]",
+                         help="Domain applied to the active id of the parent model")
+    context = fields.Char(string='Context Value', default="{}",
+                          help="Context dictionary as Python expression, empty by default (Default: {})")
+    groups_ids = fields.Many2many('res.groups', help='Groups that can execute the embedded action. Leave empty to allow everybody.')
+
+    _sql_constraints = [
+        (
+            'check_only_one_action_defined',
+            """CHECK(
+                (action_id IS NOT NULL AND python_method IS NULL) OR
+                (action_id IS NULL AND python_method IS NOT NULL)
+            )""",
+            'Constraint to ensure that either an XML action or a python_method is defined, but not both.'
+        ), (
+            'check_python_method_requires_name',
+            """CHECK(
+                NOT (python_method IS NOT NULL AND name IS NULL)
+            )""",
+            'Constraint to ensure that if a python_method is defined, then the name must also be defined.'
+        )
+    ]
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        # The name by default is computed based on the triggered action if a action_id is defined.
+        for vals in vals_list:
+            if "name" not in vals:
+                vals["name"] = self.env["ir.actions.act_window"].browse(vals["action_id"]).name
+        return super().create(vals_list)
+
+    # The record is deletable if it hasn't been created from a xml record (i.e. is not a default embedded action)
+    def _compute_is_deletable(self):
+        external_ids = self._get_external_ids()
+        for record in self:
+            record_external_ids = external_ids[record.id]
+            record.is_deletable = all(
+                ex_id.startswith(("__export__", "__custom__")) for ex_id in record_external_ids
+            )
+
+    # Compute if the record should be visible to the user based on the domain applied to the active id of the parent
+    # model and based on the groups allowed to access the record.
+    def _compute_is_visible(self):
+        active_id = self.env.context.get("active_id", False)
+        if not active_id:
+            self.is_visible = False
+            return
+        domain_id = [("id", "=", active_id)]
+        for parent_res_model, records in self.grouped('parent_res_model').items():
+            active_model_record = self.env[parent_res_model].search(domain_id, order='id')
+            for record in records:
+                action_groups = record.groups_ids
+                if not action_groups or (action_groups & self.env.user.groups_id):
+                    domain_model = literal_eval(record.domain)
+                    record.is_visible = (
+                        record.parent_res_id in (False, self.env.context.get('active_id', False))
+                        and record.user_id.id in (False, self.env.uid)
+                        and active_model_record.filtered_domain(domain_model)
+                    )
+                else:
+                    record.is_visible = False
+
+    # Delete the filters linked to a embedded action.
+    @api.ondelete(at_uninstall=True)
+    def _unlink_if_action_deletable(self):
+        for record in self:
+            if not record.is_deletable:
+                raise UserError(_('You cannot delete a default embedded action'))
+
+    def _get_readable_fields(self):
+        """ return the list of fields that are safe to read
+        """
+        return {
+            "name", "parent_action_id", "parent_res_id", "parent_res_model", "action_id", "python_method", "user_id",
+            "is_deletable", "default_view_mode", "filter_ids", "domain", "context", "groups_ids"
+        }

--- a/odoo/addons/base/models/ir_filters.py
+++ b/odoo/addons/base/models/ir_filters.py
@@ -24,8 +24,23 @@ class IrFilters(models.Model):
                                 help="The menu action this filter applies to. "
                                      "When left empty the filter applies to all menus "
                                      "for this model.")
+    embedded_action_id = fields.Many2one('ir.embedded.actions', help="The embedded action this filter is applied to", ondelete="cascade")
+    embedded_parent_res_id = fields.Integer(help="id of the record the filter should be applied to. Only used in combination with embedded actions")
     active = fields.Boolean(default=True)
 
+    # The embedded_parent_res_id can only be defined when the embedded_action_id field is set.
+    # As the embedded model is linked to only one res_model, It ensure the unicity of the filter regarding the
+    # embedded_parent_res_model and the embedded_parent_res_id
+    _sql_constraints = [
+        (
+            'check_res_id_only_when_embedded_action',
+            """CHECK(
+                NOT (embedded_parent_res_id IS NOT NULL AND embedded_action_id IS NULL)
+            )""",
+            'Constraint to ensure that the embedded_parent_res_id is only defined when a top_action_id is defined.'
+        ),
+    ]
+
     @api.model
     def _list_all_models(self):
         lang = self.env.lang or 'en_US'
@@ -47,17 +62,17 @@ class IrFilters(models.Model):
         })
 
     @api.model
-    def _get_action_domain(self, action_id=None):
+    def _get_action_domain(self, action_id=None, embedded_action_id=None, embedded_parent_res_id=None):
         """Return a domain component for matching filters that are visible in the
            same context (menu/view) as the given action."""
-        if action_id:
-            # filters specific to this menu + global ones
-            return [('action_id', 'in', [action_id, False])]
-        # only global ones
-        return [('action_id', '=', False)]
+        action_condition = ('action_id', 'in', [action_id, False]) if action_id else ('action_id', '=', False)
+        embedded_condition = ('embedded_action_id', '=', embedded_action_id) if embedded_action_id else ('embedded_action_id', '=', False)
+        embedded_parent_res_id_condition = ('embedded_parent_res_id', '=', embedded_parent_res_id) if embedded_action_id and embedded_parent_res_id else ('embedded_parent_res_id', '=', False)
+
+        return [action_condition, embedded_condition, embedded_parent_res_id_condition]
 
     @api.model
-    def get_filters(self, model, action_id=None):
+    def get_filters(self, model, action_id=None, embedded_action_id=None, embedded_parent_res_id=None):
         """Obtain the list of filters available for the user on the given model.
 
         :param int model: id of model to find filters for
@@ -67,15 +82,16 @@ class IrFilters(models.Model):
             a contextual action.
         :return: list of :meth:`~osv.read`-like dicts containing the
             ``name``, ``is_default``, ``domain``, ``user_id`` (m2o tuple),
-            ``action_id`` (m2o tuple) and ``context`` of the matching ``ir.filters``.
+            ``action_id`` (m2o tuple), ``embedded_action_id`` (m2o tuple), ``embedded_parent_res_id``
+            and ``context`` of the matching ``ir.filters``.
         """
         # available filters: private filters (user_id=uid) and public filters (uid=NULL),
         # and filters for the action (action_id=action_id) or global (action_id=NULL)
         user_context = self.env['res.users'].context_get()
-        action_domain = self._get_action_domain(action_id)
+        action_domain = self._get_action_domain(action_id, embedded_action_id, embedded_parent_res_id)
         return self.with_context(user_context).search_read(
             action_domain + [('model_id', '=', model), ('user_id', 'in', [self._uid, False])],
-            ['name', 'is_default', 'domain', 'context', 'user_id', 'sort'],
+            ['name', 'is_default', 'domain', 'context', 'user_id', 'sort', 'embedded_action_id', 'embedded_parent_res_id'],
         )
 
     @api.model
@@ -95,7 +111,7 @@ class IrFilters(models.Model):
         :raises odoo.exceptions.UserError: if there is an existing default and
                                             we're not updating it
         """
-        domain = self._get_action_domain(vals.get('action_id'))
+        domain = self._get_action_domain(vals.get('action_id'), vals.get('embedded_action_id'), vals.get('embedded_parent_res_id'))
         defaults = self.search(domain + [
             ('model_id', '=', vals['model_id']),
             ('user_id', '=', False),
@@ -113,7 +129,11 @@ class IrFilters(models.Model):
     @api.returns('self', lambda value: value.id)
     def create_or_replace(self, vals):
         action_id = vals.get('action_id')
-        current_filters = self.get_filters(vals['model_id'], action_id)
+        embedded_action_id = vals.get('embedded_action_id')
+        if not embedded_action_id and vals.get('embedded_parent_res_id'):
+            del vals['embedded_parent_res_id']
+        embedded_parent_res_id = vals.get('embedded_parent_res_id')
+        current_filters = self.get_filters(vals['model_id'], action_id, embedded_action_id, embedded_parent_res_id)
         matching_filters = [f for f in current_filters
                             if f['name'].lower() == vals['name'].lower()
                             # next line looks for matching user_ids (specific or global), i.e.
@@ -125,7 +145,7 @@ class IrFilters(models.Model):
             if vals.get('user_id'):
                 # Setting new default: any other default that belongs to the user
                 # should be turned off
-                domain = self._get_action_domain(action_id)
+                domain = self._get_action_domain(action_id, embedded_action_id, embedded_parent_res_id)
                 defaults = self.search(domain + [
                     ('model_id', '=', vals['model_id']),
                     ('user_id', '=', vals['user_id']),
@@ -149,12 +169,14 @@ class IrFilters(models.Model):
         # Partial constraint, complemented by unique index (see below). Still
         # useful to keep because it provides a proper error message when a
         # violation occurs, as it shares the same prefix as the unique index.
-        ('name_model_uid_unique', 'unique (model_id, user_id, action_id, name)', 'Filter names must be unique'),
+        ('name_model_uid_unique', 'unique (model_id, user_id, action_id, embedded_action_id, embedded_parent_res_id, name)',
+            'Filter names must be unique'),
     ]
 
     def _auto_init(self):
         result = super(IrFilters, self)._auto_init()
         # Use unique index to implement unique constraint on the lowercase name (not possible using a constraint)
         tools.create_unique_index(self._cr, 'ir_filters_name_model_uid_unique_action_index',
-            self._table, ['model_id', 'COALESCE(user_id,-1)', 'COALESCE(action_id,-1)', 'lower(name)'])
+                                  self._table, ['model_id', 'COALESCE(user_id,-1)', 'COALESCE(action_id,-1)',
+                                                'lower(name)', 'embedded_parent_res_id', 'COALESCE(embedded_action_id,-1)'])
         return result

--- a/odoo/addons/base/models/ir_ui_view.py
+++ b/odoo/addons/base/models/ir_ui_view.py
@@ -2601,7 +2601,7 @@ class Model(models.AbstractModel):
 
         if options.get('load_filters') and 'search' in result['views']:
             result['views']['search']['filters'] = self.env['ir.filters'].get_filters(
-                self._name, options.get('action_id')
+                self._name, options.get('action_id'), options.get('embedded_action_id'), options.get('embedded_parent_res_id')
             )
 
         return result
