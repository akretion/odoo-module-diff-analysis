PR: https://github.com/odoo/odoo/pull/80434

From: c146c7d16f20a05cc219f6319090720cc1876bc1
From: William Henrotin
Date: 2021-12-07 16:20:06

Structural Changes: 21
Total Changes: 56

[REF] *stock*: rename model `stock.location.route` into `stock.route`

Task: 2648449
Part-of: odoo/odoo#80434

================================= pseudo patch: =================================

--- a/addons/stock/models/product.py
+++ b/addons/stock/models/product.py
@@ -646,9 +646,9 @@ class ProductTemplate(models.Model):
     warehouse_id = fields.Many2one('stock.warehouse', 'Warehouse', store=False)
     has_available_route_ids = fields.Boolean(
         'Routes can be selected on this product', compute='_compute_has_available_route_ids',
-        default=lambda self: self.env['stock.location.route'].search_count([('product_selectable', '=', True)]))
+        default=lambda self: self.env['stock.route'].search_count([('product_selectable', '=', True)]))
     route_ids = fields.Many2many(
-        'stock.location.route', 'stock_route_product', 'product_id', 'route_id', 'Routes',
+        'stock.route', 'stock_route_product', 'product_id', 'route_id', 'Routes',
         domain=[('product_selectable', '=', True)],
         help="Depending on the modules installed, this will allow you to define the route of the product: whether it will be bought, manufactured, replenished on order, etc.")
     nbr_moves_in = fields.Integer(compute='_compute_nbr_moves', compute_sudo=False, help="Number of incoming stock moves in the past 12 months")
@@ -661,7 +661,7 @@ class ProductTemplate(models.Model):
         compute='_compute_nbr_reordering_rules', compute_sudo=False)
     # TDE FIXME: seems only visible in a view - remove me ?
     route_from_categ_ids = fields.Many2many(
-        relation="stock.location.route", string="Category Routes",
+        relation="stock.route", string="Category Routes",
         related='categ_id.total_route_ids', related_sudo=False)
     show_on_hand_qty_status_button = fields.Boolean(compute='_compute_show_qty_status_button')
     show_forecasted_qty_status_button = fields.Boolean(compute='_compute_show_qty_status_button')
@@ -673,7 +673,7 @@ class ProductTemplate(models.Model):
 
     @api.depends('type')
     def _compute_has_available_route_ids(self):
-        self.has_available_route_ids = self.env['stock.location.route'].search_count([('product_selectable', '=', True)])
+        self.has_available_route_ids = self.env['stock.route'].search_count([('product_selectable', '=', True)])
 
     @api.depends(
         'product_variant_ids.qty_available',
@@ -942,13 +942,13 @@ class ProductCategory(models.Model):
     _inherit = 'product.category'
 
     route_ids = fields.Many2many(
-        'stock.location.route', 'stock_location_route_categ', 'categ_id', 'route_id', 'Routes',
+        'stock.route', 'stock_route_categ', 'categ_id', 'route_id', 'Routes',
         domain=[('product_categ_selectable', '=', True)])
     removal_strategy_id = fields.Many2one(
         'product.removal', 'Force Removal Strategy',
         help="Set a specific removal strategy that will be used regardless of the source location for this product category")
     total_route_ids = fields.Many2many(
-        'stock.location.route', string='Total routes', compute='_compute_total_route_ids',
+        'stock.route', string='Total routes', compute='_compute_total_route_ids',
         readonly=True)
     putaway_rule_ids = fields.One2many('stock.putaway.rule', 'category_id', 'Putaway Rules')
     packaging_reserve_method = fields.Selection([
@@ -972,7 +972,7 @@ class ProductPackaging(models.Model):
 
     package_type_id = fields.Many2one('stock.package.type', 'Package Type')
     route_ids = fields.Many2many(
-        'stock.location.route', 'stock_location_route_packaging', 'packaging_id', 'route_id', 'Routes',
+        'stock.route', 'stock_route_packaging', 'packaging_id', 'route_id', 'Routes',
         domain=[('packaging_selectable', '=', True)],
         help="Depending on the modules installed, this will allow you to define the route of the product in this packaging: whether it will be bought, manufactured, replenished on order, etc.")
 

--- a/addons/stock/models/stock_location.py
+++ b/addons/stock/models/stock_location.py
@@ -351,8 +351,8 @@ class Location(models.Model):
         return True
 
 
-class Route(models.Model):
-    _name = 'stock.location.route'
+class StockRoute(models.Model):
+    _name = 'stock.route'
     _description = "Inventory Routes"
     _order = 'sequence'
     _check_company_auto = True
@@ -374,8 +374,8 @@ class Route(models.Model):
     product_ids = fields.Many2many(
         'product.template', 'stock_route_product', 'route_id', 'product_id',
         'Products', copy=False, check_company=True)
-    categ_ids = fields.Many2many('product.category', 'stock_location_route_categ', 'route_id', 'categ_id', 'Product Categories', copy=False)
-    packaging_ids = fields.Many2many('product.packaging', 'stock_location_route_packaging', 'route_id', 'packaging_id', 'Packagings', copy=False, check_company=True)
+    categ_ids = fields.Many2many('product.category', 'stock_route_categ', 'route_id', 'categ_id', 'Product Categories', copy=False)
+    packaging_ids = fields.Many2many('product.packaging', 'stock_route_packaging', 'route_id', 'packaging_id', 'Packagings', copy=False, check_company=True)
     warehouse_domain_ids = fields.One2many('stock.warehouse', compute='_compute_warehouses')
     warehouse_ids = fields.Many2many(
         'stock.warehouse', 'stock_route_warehouse', 'route_id', 'warehouse_id',
@@ -400,4 +400,4 @@ class Route(models.Model):
     def toggle_active(self):
         for route in self:
             route.with_context(active_test=False).rule_ids.filtered(lambda ru: ru.active == route.active).toggle_active()
-        super(Route, self).toggle_active()
+        super().toggle_active()

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -146,7 +146,7 @@ class StockMove(models.Model):
         'res.partner', 'Owner ', help="Technical field used to depict a restriction on the ownership of quants to consider when marking this move as 'done'",
         check_company=True)
     route_ids = fields.Many2many(
-        'stock.location.route', 'stock_location_route_move', 'move_id', 'route_id', 'Destination route', help="Preferred route",
+        'stock.route', 'stock_route_move', 'move_id', 'route_id', 'Destination route', help="Preferred route",
         check_company=True)
     warehouse_id = fields.Many2one('stock.warehouse', 'Warehouse', help="Technical field depicting the warehouse to consider for the route selection on the next procurement (if any).")
     has_tracking = fields.Selection(related='product_id.tracking', string='Product with Tracking')

--- a/addons/stock/models/stock_orderpoint.py
+++ b/addons/stock/models/stock_orderpoint.py
@@ -92,7 +92,7 @@ class StockWarehouseOrderpoint(models.Model):
     rule_ids = fields.Many2many('stock.rule', string='Rules used', compute='_compute_rules')
     lead_days_date = fields.Date(compute='_compute_lead_days')
     route_id = fields.Many2one(
-        'stock.location.route', string='Preferred Route', domain="[('product_selectable', '=', True)]")
+        'stock.route', string='Preferred Route', domain="[('product_selectable', '=', True)]")
     qty_on_hand = fields.Float('On Hand', readonly=True, compute='_compute_qty')
     qty_forecast = fields.Float('Forecast', readonly=True, compute='_compute_qty')
     qty_to_order = fields.Float('To Order', compute='_compute_qty_to_order', store=True, readonly=False)

--- a/addons/stock/models/stock_rule.py
+++ b/addons/stock/models/stock_rule.py
@@ -61,7 +61,7 @@ class StockRule(models.Model):
         domain="[('id', '=?', route_company_id)]")
     location_id = fields.Many2one('stock.location', 'Destination Location', required=True, check_company=True)
     location_src_id = fields.Many2one('stock.location', 'Source Location', check_company=True)
-    route_id = fields.Many2one('stock.location.route', 'Route', required=True, ondelete='cascade')
+    route_id = fields.Many2one('stock.route', 'Route', required=True, ondelete='cascade')
     route_company_id = fields.Many2one(related='route_id.company_id', string='Route Company')
     procure_method = fields.Selection([
         ('make_to_stock', 'Take From Stock'),

--- a/addons/stock/models/stock_warehouse.py
+++ b/addons/stock/models/stock_warehouse.py
@@ -50,7 +50,7 @@ class Warehouse(models.Model):
         required=True, check_company=True)
     code = fields.Char('Short Name', required=True, size=5, help="Short name used to identify your warehouse")
     route_ids = fields.Many2many(
-        'stock.location.route', 'stock_route_warehouse', 'warehouse_id', 'route_id',
+        'stock.route', 'stock_route_warehouse', 'warehouse_id', 'route_id',
         'Routes',
         domain="[('warehouse_selectable', '=', True), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
         help='Defaults routes through the warehouse', check_company=True)
@@ -77,14 +77,14 @@ class Warehouse(models.Model):
     in_type_id = fields.Many2one('stock.picking.type', 'In Type', check_company=True)
     int_type_id = fields.Many2one('stock.picking.type', 'Internal Type', check_company=True)
     return_type_id = fields.Many2one('stock.picking.type', 'Return Type', check_company=True)
-    crossdock_route_id = fields.Many2one('stock.location.route', 'Crossdock Route', ondelete='restrict')
-    reception_route_id = fields.Many2one('stock.location.route', 'Receipt Route', ondelete='restrict')
-    delivery_route_id = fields.Many2one('stock.location.route', 'Delivery Route', ondelete='restrict')
+    crossdock_route_id = fields.Many2one('stock.route', 'Crossdock Route', ondelete='restrict')
+    reception_route_id = fields.Many2one('stock.route', 'Receipt Route', ondelete='restrict')
+    delivery_route_id = fields.Many2one('stock.route', 'Delivery Route', ondelete='restrict')
     resupply_wh_ids = fields.Many2many(
         'stock.warehouse', 'stock_wh_resupply_table', 'supplied_wh_id', 'supplier_wh_id',
         'Resupply From', help="Routes will be created automatically to resupply this warehouse from the warehouses ticked")
     resupply_route_ids = fields.One2many(
-        'stock.location.route', 'supplied_wh_id', 'Resupply Routes',
+        'stock.route', 'supplied_wh_id', 'Resupply Routes',
         help="Routes will be created for these resupply warehouses and you can select them on products and product categories")
     sequence = fields.Integer(default=10,
         help="Gives the sequence of this line when displaying the warehouses.")
@@ -151,7 +151,7 @@ class Warehouse(models.Model):
                 if warehouse.company_id.id != vals['company_id']:
                     raise UserError(_("Changing the company of this record is forbidden at this point, you should rather archive it and create a new one."))
 
-        Route = self.env['stock.location.route']
+        Route = self.env['stock.route']
         warehouses = self.with_context(active_test=False)
         warehouses._create_missing_locations(vals)
 
@@ -358,7 +358,7 @@ class Warehouse(models.Model):
         """ return a route record set from an xml_id or its name. """
         route = self.env.ref(xml_id, raise_if_not_found=False)
         if not route:
-            route = self.env['stock.location.route'].search([('name', 'like', route_name)], limit=1)
+            route = self.env['stock.route'].search([('name', 'like', route_name)], limit=1)
         if not route:
             raise UserError(_('Can\'t find any generic route %s.') % (route_name))
         return route
@@ -435,7 +435,7 @@ class Warehouse(models.Model):
             else:
                 if 'route_update_values' in route_data:
                     route_data['route_create_values'].update(route_data['route_update_values'])
-                route = self.env['stock.location.route'].create(route_data['route_create_values'])
+                route = self.env['stock.route'].create(route_data['route_create_values'])
                 self[route_field] = route
             # Get rules needed for the route
             routing_key = route_data.get('routing_key')
@@ -649,7 +649,7 @@ class Warehouse(models.Model):
                 warehouse.write(missing_location)
 
     def create_resupply_routes(self, supplier_warehouses):
-        Route = self.env['stock.location.route']
+        Route = self.env['stock.route']
         Rule = self.env['stock.rule']
 
         input_location, output_location = self._get_input_output_locations(self.reception_steps, self.delivery_steps)
@@ -821,7 +821,7 @@ class Warehouse(models.Model):
         """ Check if the resupply routes from this warehouse follow the changes of number of delivery steps
         Check routes being delivery bu this warehouse and change the rule going to transit location """
         Rule = self.env["stock.rule"]
-        routes = self.env['stock.location.route'].search([('supplier_wh_id', '=', self.id)])
+        routes = self.env['stock.route'].search([('supplier_wh_id', '=', self.id)])
         rules = Rule.search(['&', '&', ('route_id', 'in', routes.ids), ('action', '!=', 'push'), ('location_id.usage', '=', 'transit')])
         rules.write({
             'location_src_id': new_location.id,
@@ -846,7 +846,7 @@ class Warehouse(models.Model):
     def _check_reception_resupply(self, new_location):
         """ Check routes being delivered by the warehouses (resupply routes) and
         change their rule coming from the transit location """
-        routes = self.env['stock.location.route'].search([('supplied_wh_id', 'in', self.ids)])
+        routes = self.env['stock.route'].search([('supplied_wh_id', 'in', self.ids)])
         self.env['stock.rule'].search([
             '&',
                 ('route_id', 'in', routes.ids),
@@ -1047,7 +1047,7 @@ class Warehouse(models.Model):
     @api.returns('self')
     def _get_all_routes(self):
         routes = self.mapped('route_ids') | self.mapped('mto_pull_id').mapped('route_id')
-        routes |= self.env["stock.location.route"].search([('supplied_wh_id', 'in', self.ids)])
+        routes |= self.env["stock.route"].search([('supplied_wh_id', 'in', self.ids)])
         return routes
 
     def action_view_all_routes(self):
@@ -1055,7 +1055,7 @@ class Warehouse(models.Model):
         return {
             'name': _('Warehouse\'s Routes'),
             'domain': [('id', 'in', routes.ids)],
-            'res_model': 'stock.location.route',
+            'res_model': 'stock.route',
             'type': 'ir.actions.act_window',
             'view_id': False,
             'view_mode': 'tree,form',
