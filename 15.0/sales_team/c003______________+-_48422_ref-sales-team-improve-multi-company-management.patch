PR: https://github.com/odoo/odoo/pull/48422

From: 6bacc1cf9bd5d4b70f31dd5520c1837b036b90ae
From: Thibault Delavall√©e
Date: 2021-01-21 11:00:09

Structural Changes: 4
Total Changes: 36

[REF] sales_team: improve multi company management

GLOBAL PURPOSE

Ability to have salesmen belonging to several sales team is a core requirement
of CRM. It is therefore moved from website_crm_score to crm along with cleaning
and behavior improvement. Automatic lead assignment is also moved and cleaned.

SPECIFICATIONS: COMPANY-BASED DOMAINS

Improve support of multi company. Sales team can either be linked to a given
company, either be cross companies (company_id = False). Currently it is easy
to have issues while trying to add users from a companyA to a team belonging
to companyB.

When using mono membership mode
  * members are res.users records;
  * a domain is added on users to belong either to the team company, either
    to all available teams if team has no company;

When using multi membership mode
  * members are crm.team.member records;
  * a domain is added on user_id field of membership records so that they
    belong either to the team company, either to all available teams if team
    has no company;

Those domains are implemented using a computed field it is not directly
translatable to a domain. Domain is added directly on field at model level
and include the "avoid shared users" domain leaf.

SPECIFCIATIONS: CHECK_COMPANY

``check_company`` attribute is set on team member allowing to automatically
detect badly configured memberships. Check company is activated on user_id
and team_id fields of crm.team.member model to ensure they match.

LINKS

Task ID-2086889 (main task)
Task ID-2357969 (scoring migration task)
Community PR odoo/odoo#48422
Enterprise PR odoo/enterprise#499
Upgrade PR odoo/upgrade#9966

================================= pseudo patch: =================================

--- a/addons/sales_team/models/crm_team.py
+++ b/addons/sales_team/models/crm_team.py
@@ -52,9 +52,13 @@ class CrmTeam(models.Model):
         'Multiple Memberships Allowed', compute='_compute_is_membership_multi',
         help='If True, users may belong to several sales teams. Otherwise membership is limited to a single sales team.')
     member_ids = fields.Many2many(
-        'res.users', string='Salespersons', check_company=True, domain=[('share', '=', False)],
+        'res.users', string='Salespersons',
+        domain="['&', ('share', '=', False), ('company_ids', 'in', member_company_ids)]",
         compute='_compute_member_ids', inverse='_inverse_member_ids', search='_search_member_ids',
         help="Users assigned to this team.")
+    member_company_ids = fields.Many2many(
+        'res.company', compute='_compute_member_company_ids',
+        help='UX: Limit to team company or all if no company')
     member_warning = fields.Text('Membership Issue Warning', compute='_compute_member_warning')
     crm_team_member_ids = fields.One2many(
         'crm.team.member', 'crm_team_id', string='Sales Team Members',
@@ -130,6 +134,14 @@ class CrmTeam(models.Model):
     def _search_member_ids(self, operator, value):
         return [('crm_team_member_ids.user_id', operator, value)]
 
+    @api.depends('company_id')
+    def _compute_member_company_ids(self):
+        """ Available companies for members. Either team company if set, either
+        any company if not set on team. """
+        all_companies = self.env['res.company'].search([])
+        for team in self:
+            team.member_company_ids = team.company_id or all_companies
+
     def _compute_is_favorite(self):
         for team in self:
             team.is_favorite = self.env.user in team.favorite_user_ids
@@ -163,6 +175,10 @@ class CrmTeam(models.Model):
 
     def write(self, values):
         res = super(CrmTeam, self).write(values)
+        # manually launch company sanity check
+        if values.get('company_id'):
+            self.crm_team_member_ids._check_company(fnames=['crm_team_id'])
+
         if values.get('member_ids'):
             self._add_members_to_favorites()
         return res

--- a/addons/sales_team/models/crm_team_member.py
+++ b/addons/sales_team/models/crm_team_member.py
@@ -10,18 +10,22 @@ class CrmTeamMember(models.Model):
     _description = 'Sales Team Member'
     _rec_name = 'user_id'
     _order = 'create_date ASC'
+    _check_company_auto = True
 
     crm_team_id = fields.Many2one(
         'crm.team', string='Sales Team',
         default=False,  # TDE: temporary fix to activate depending computed fields
-        index=True, required=True)
+        check_company=True, index=True, required=True)
     user_id = fields.Many2one(
-        'res.users', string='Salesman',   # check responsible field
-        index=True, ondelete='cascade', required=True,
-        domain="['&', ('share', '=', False), ('id', 'not in', user_in_teams_ids)]")
+        'res.users', string='Salesperson',  # TDE FIXME check responsible field
+        check_company=True, index=True, ondelete='cascade', required=True,
+        domain="[('share', '=', False), ('id', 'not in', user_in_teams_ids), ('company_ids', 'in', user_company_ids)]")
     user_in_teams_ids = fields.Many2many(
         'res.users', compute='_compute_user_in_teams_ids',
         help='UX: Give users not to add in the currently chosen team to avoid duplicates')
+    user_company_ids = fields.Many2many(
+        'res.company', compute='_compute_user_company_ids',
+        help='UX: Limit to team company or all if no company')
     active = fields.Boolean(string='Active', default=True)
     is_membership_multi = fields.Boolean(
         'Multiple Memberships Allowed', compute='_compute_is_membership_multi',
@@ -93,6 +97,12 @@ class CrmTeamMember(models.Model):
             else:
                 member.user_in_teams_ids = self.env['res.users']
 
+    @api.depends('crm_team_id')
+    def _compute_user_company_ids(self):
+        all_companies = self.env['res.company'].search([])
+        for member in self:
+            member.user_company_ids = member.crm_team_id.company_id or all_companies
+
     @api.depends('crm_team_id')
     def _compute_is_membership_multi(self):
         multi_enabled = self.env['ir.config_parameter'].sudo().get_param('sales_team.membership_multi', False)
