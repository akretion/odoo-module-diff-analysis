PR: https://github.com/odoo/odoo/pull/

From: 76d124299b99dd2bfe0594b3ce9600bda7a56689
From: Thibault Delavall√©e
Date: 2016-07-06 13:10:46

Structural Changes: 5
Total Changes: 21

[CLN] payment_authorize: cleaning and guidelines

As this module is already in new API only small linting is performed.

================================= pseudo patch: =================================

--- a/addons/payment_authorize/models/payment.py
+++ b/addons/payment_authorize/models/payment.py
@@ -6,10 +6,10 @@ import logging
 import time
 import urlparse
 
-from openerp import api, fields, models
-from openerp.addons.payment.models.payment_acquirer import ValidationError
-from openerp.addons.payment_authorize.controllers.main import AuthorizeController
-from openerp.tools.float_utils import float_compare
+from odoo import api, fields, models
+from odoo.addons.payment.models.payment_acquirer import ValidationError
+from odoo.addons.payment_authorize.controllers.main import AuthorizeController
+from odoo.tools.float_utils import float_compare
 
 _logger = logging.getLogger(__name__)
 
@@ -17,6 +17,10 @@ _logger = logging.getLogger(__name__)
 class PaymentAcquirerAuthorize(models.Model):
     _inherit = 'payment.acquirer'
 
+    provider = fields.Selection(selection_add=[('authorize', 'Authorize.Net')])
+    authorize_login = fields.Char(string='API Login Id', required_if_provider='authorize')
+    authorize_transaction_key = fields.Char(string='API Transaction Key', required_if_provider='authorize')
+
     def _get_authorize_urls(self, environment):
         """ Authorize URLs """
         if environment == 'prod':
@@ -24,15 +28,6 @@ class PaymentAcquirerAuthorize(models.Model):
         else:
             return {'authorize_form_url': 'https://test.authorize.net/gateway/transact.dll'}
 
-    @api.model
-    def _get_providers(self):
-        providers = super(PaymentAcquirerAuthorize, self)._get_providers()
-        providers.append(['authorize', 'Authorize.Net'])
-        return providers
-
-    authorize_login = fields.Char(string='API Login Id', required_if_provider='authorize')
-    authorize_transaction_key = fields.Char(string='API Transaction Key', required_if_provider='authorize')
-
     def _authorize_generate_hashing(self, values):
         data = '^'.join([
             values['x_login'],
