PR: https://github.com/odoo/odoo/pull/117036

From: 8d039cafe3efd7934a35228c73114eb5dbda3efa
From: Maryam Kia
Date: 2023-08-09 11:20:46

Structural Changes: 3
Total Changes: 58

[IMP] mail: Send voice messages in discuss chats and channels

With this commit, users can send voice messages in channels and chat.
There's a new button in composer to record audio from the microphone,
up to 1 minute clip duration. This adds a voice attachment with its
dedicated voice player that shows waveforms and allows playback.

To ensure compatibility in all supported browsers, we choose to
encode voice recording with `audio/mp3` thanks to lib `lamejs`.

Task-3240168

closes odoo/odoo#117036

Related: odoo/enterprise#45482
Signed-off-by: SÃ©bastien Theys (seb) <seb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/discuss/__init__.py
+++ b/addons/mail/models/discuss/__init__.py
@@ -8,6 +8,7 @@ from . import discuss_channel_member
 from . import discuss_channel_rtc_session
 from . import discuss_channel
 from . import discuss_gif_favorite
+from . import discuss_voice_metadata
 from . import mail_guest
 
 # odoo models

--- a/None
+++ b/addons/mail/models/discuss/discuss_voice_metadata.py
@@ -0,0 +1,12 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class DiscussVoiceMetadata(models.Model):
+    _name = "discuss.voice.metadata"
+    _description = "Metadata for voice attachments"
+
+    attachment_id = fields.Many2one(
+        "ir.attachment", ondelete="cascade", auto_join=True, copy=False, index=True
+    )

--- a/addons/mail/models/discuss/ir_attachment.py
+++ b/addons/mail/models/discuss/ir_attachment.py
@@ -1,11 +1,13 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, models
+from odoo import api, models, fields
 
 
 class IrAttachment(models.Model):
     _inherit = "ir.attachment"
 
+    voice_ids = fields.One2many("discuss.voice.metadata", "attachment_id")
+
     def _bus_notification_target(self):
         self.ensure_one()
         if self.res_model == "discuss.channel" and self.res_id:
@@ -27,3 +29,14 @@ class IrAttachment(models.Model):
                 .env
             )
         return super()._get_upload_env(thread_model, thread_id)
+
+    def _attachment_format(self):
+        attachment_format = super()._attachment_format()
+        for a in attachment_format:
+            a["voice"] = bool(self.browse(a["id"]).with_prefetch(self._prefetch_ids).sudo().voice_ids)
+        return attachment_format
+
+    def _post_add_create(self, **kwargs):
+        super()._post_add_create()
+        if kwargs.get('voice'):
+            self.env["discuss.voice.metadata"].create([{"attachment_id": attachment.id} for attachment in self])

--- a/addons/mail/models/ir_attachment.py
+++ b/addons/mail/models/ir_attachment.py
@@ -33,10 +33,10 @@ class IrAttachment(models.Model):
             except (AccessError, MissingError):
                 raise UserError(_("The attachment %s does not exist or you do not have the rights to access it.", attachment.id))
 
-    def _post_add_create(self):
+    def _post_add_create(self, **kwargs):
         """ Overrides behaviour when the attachment is created through the controller
         """
-        super(IrAttachment, self)._post_add_create()
+        super(IrAttachment, self)._post_add_create(**kwargs)
         for record in self:
             record.register_as_main_attachment(force=False)
 
@@ -74,20 +74,18 @@ class IrAttachment(models.Model):
 
     def _attachment_format(self):
         safari = request and request.httprequest.user_agent and request.httprequest.user_agent.browser == 'safari'
-        return [
-            {
-                'checksum': attachment.checksum,
-                'id': attachment.id,
-                'filename': attachment.name,
-                'name': attachment.name,
-                'mimetype': 'application/octet-stream' if safari and attachment.mimetype and 'video' in attachment.mimetype else attachment.mimetype,
-                'originThread': [('insert', {
-                    'id': attachment.res_id,
-                    'model': attachment.res_model,
-                })],
-            }
-            for attachment in self
-        ]
+        return [{
+            'checksum': attachment.checksum,
+            'id': attachment.id,
+            'filename': attachment.name,
+            'name': attachment.name,
+            "size": attachment.file_size,
+            'mimetype': 'application/octet-stream' if safari and attachment.mimetype and 'video' in attachment.mimetype else attachment.mimetype,
+            'originThread': [('insert', {
+                'id': attachment.res_id,
+                'model': attachment.res_model,
+            })],
+        } for attachment in self]
 
     @api.model
     def _get_upload_env(self, thread_model, thread_id):
