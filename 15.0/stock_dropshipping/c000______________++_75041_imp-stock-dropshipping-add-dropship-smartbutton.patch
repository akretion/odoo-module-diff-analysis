PR: https://github.com/odoo/odoo/pull/75041

From: 7f068ef8caf0956d96a85f2c7a633d88a8307378
From: RÃ©my Voet (ryv)
Date: 2021-09-03 10:37:47

Structural Changes: 6
Total Changes: 56

[IMP] stock_dropshipping: add dropship smartbutton

Divide "Delivery"/"Incoming Shipment" smart button of "Sale"/"Purchase"
order form between normal "Delivery"/"Incoming Shipment" and a
"dropship" picking.
Also clean a little bit technically

task-2486811

Part-of: odoo/odoo#75041

================================= pseudo patch: =================================

--- a/addons/stock_dropshipping/models/purchase.py
+++ b/addons/stock_dropshipping/models/purchase.py
@@ -1,7 +1,27 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, models
+from odoo import api, models, fields
+
+
+class PurchaseOrder(models.Model):
+    _inherit = 'purchase.order'
+
+    dropship_picking_count = fields.Integer("Dropship Count", compute='_compute_incoming_picking_count')
+
+    @api.depends('picking_ids.is_dropship')
+    def _compute_incoming_picking_count(self):
+        super()._compute_incoming_picking_count()
+        for order in self:
+            dropship_count = len(order.picking_ids.filtered(lambda p: p.is_dropship))
+            order.incoming_picking_count -= dropship_count
+            order.dropship_picking_count = dropship_count
+
+    def action_view_picking(self):
+        return self._get_action_view_picking(self.picking_ids.filtered(lambda p: not p.is_dropship))
+
+    def action_view_dropship(self):
+        return self._get_action_view_picking(self.picking_ids.filtered(lambda p: p.is_dropship))
 
 
 class PurchaseOrderLine(models.Model):

--- a/addons/stock_dropshipping/models/sale.py
+++ b/addons/stock_dropshipping/models/sale.py
@@ -1,7 +1,27 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import models
+from odoo import models, fields, api
+
+
+class SaleOrder(models.Model):
+    _inherit = 'sale.order'
+
+    dropship_picking_count = fields.Integer("Dropship Count", compute='_compute_picking_ids')
+
+    @api.depends('picking_ids.is_dropship')
+    def _compute_picking_ids(self):
+        super()._compute_picking_ids()
+        for order in self:
+            dropship_count = len(order.picking_ids.filtered(lambda p: p.is_dropship))
+            order.delivery_count -= dropship_count
+            order.dropship_picking_count = dropship_count
+
+    def action_view_delivery(self):
+        return self._get_action_view_picking(self.picking_ids.filtered(lambda p: not p.is_dropship))
+
+    def action_view_dropship(self):
+        return self._get_action_view_picking(self.picking_ids.filtered(lambda p: p.is_dropship))
 
 
 class SaleOrderLine(models.Model):

--- a/addons/stock_dropshipping/models/stock.py
+++ b/addons/stock_dropshipping/models/stock.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, models
+from odoo import api, models, fields
 
 
 class StockRule(models.Model):
@@ -28,3 +28,13 @@ class ProcurementGroup(models.Model):
             return [('location_id', '=', location.id), ('action', '!=', 'push'), ('company_id', '=', values['company_id'].id)]
         else:
             return super(ProcurementGroup, self)._get_rule_domain(location, values)
+
+class StockPicking(models.Model):
+    _inherit = 'stock.picking'
+
+    is_dropship = fields.Boolean("Is a Dropship", compute='_compute_is_dropship')
+
+    @api.depends('location_dest_id.usage', 'location_id.usage')
+    def _compute_is_dropship(self):
+        for picking in self:
+            picking.is_dropship = picking.location_dest_id.usage == 'customer' and picking.location_id.usage == 'supplier'
