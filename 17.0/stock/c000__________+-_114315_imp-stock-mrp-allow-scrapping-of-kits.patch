PR: https://github.com/odoo/odoo/pull/114315

From: a080337d7e8bf515018d9cfb7996461adf717224
From: Pieter Claeys (clpi)
Date: 2023-05-25 14:28:55

Breaking data model changes scores: del:3 + add:1, change matches:
-    scrap_ids = fields.One2many('stock.scrap', 'move_id')
-    move_id = fields.Many2one('stock.move', 'Scrap Move', readonly=True, check_company=True, copy=False)
+    move_ids = fields.One2many('stock.move', 'scrap_id')

Total Changes: 52

[IMP] stock,mrp: allow scrapping of kits

When creating a scrap order on a product which has at least one kit BoM, an option is added to create a scrap order for this kit.
The user can select from the kit BoMs of this product and the scrap order will add stock moves for all the components of the selected kit instead of for the product itself.

Task: 2479234 (nr 9)
Community PR: https://github.com/odoo/odoo/pull/114315
Enterprise PR: https://github.com/odoo/enterprise/pull/37764

Part-of: odoo/odoo#114315

================================= pseudo patch: =================================

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -127,7 +127,7 @@ class StockMove(models.Model):
              "this second option should be chosen.")
     scrapped = fields.Boolean(
         'Scrapped', related='location_dest_id.scrap_location', readonly=True, store=True)
-    scrap_ids = fields.One2many('stock.scrap', 'move_id')
+    scrap_id = fields.Many2one('stock.scrap', 'Scrap operation', readonly=True, check_company=True)
     group_id = fields.Many2one('procurement.group', 'Procurement Group', default=_default_group_id, index=True)
     rule_id = fields.Many2one(
         'stock.rule', 'Stock Rule', ondelete='restrict', help='The stock rule that created this stock move',
@@ -1881,7 +1881,7 @@ Please change the quantity done or the rounding precision of your unit of measur
         # We don't want to create back order for scrap moves
         # Replace by a kwarg in master
         if self.env.context.get('is_scrap'):
-            return moves_todo
+            return moves
 
         if picking and not cancel_backorder:
             backorder = picking._create_backorder()

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -947,7 +947,7 @@ class Picking(models.Model):
                             move_ids_without_package |= move
                     else:
                         move_ids_without_package |= move
-        return move_ids_without_package.filtered(lambda move: not move.scrap_ids)
+        return move_ids_without_package.filtered(lambda move: not move.scrap_id)
 
     def _check_move_lines_map_quant_package(self, package):
         return package._check_move_lines_map_quant(self.move_line_ids.filtered(lambda ml: ml.package_id == package), 'reserved_qty')

--- a/addons/stock/models/stock_scrap.py
+++ b/addons/stock/models/stock_scrap.py
@@ -34,7 +34,7 @@ class StockScrap(models.Model):
         'stock.quant.package', 'Package',
         states={'done': [('readonly', True)]}, check_company=True)
     owner_id = fields.Many2one('res.partner', 'Owner', states={'done': [('readonly', True)]}, check_company=True)
-    move_id = fields.Many2one('stock.move', 'Scrap Move', readonly=True, check_company=True, copy=False)
+    move_ids = fields.One2many('stock.move', 'scrap_id')
     picking_id = fields.Many2one('stock.picking', 'Picking', states={'done': [('readonly', True)]}, check_company=True)
     location_id = fields.Many2one(
         'stock.location', 'Source Location',
@@ -46,7 +46,7 @@ class StockScrap(models.Model):
         domain="[('scrap_location', '=', True), ('company_id', 'in', [company_id, False])]", check_company=True, readonly=False)
     scrap_qty = fields.Float(
         'Quantity', required=True, states={'done': [('readonly', True)]}, digits='Product Unit of Measure',
-        compute='_compute_scrap_qty', precompute=True, readonly=False, store=True)
+        compute='_compute_scrap_qty', default=0.0, readonly=False, store=True)
     state = fields.Selection([
         ('draft', 'Draft'),
         ('done', 'Done')],
@@ -83,12 +83,12 @@ class StockScrap(models.Model):
         for scrap in self:
             scrap.scrap_location_id = locations_per_company[scrap.company_id.id]
 
-    @api.depends('move_id', 'move_id.move_line_ids.qty_done', 'product_id')
+    @api.depends('move_ids', 'move_ids.move_line_ids.qty_done', 'product_id')
     def _compute_scrap_qty(self):
         self.scrap_qty = 1
         for scrap in self:
-            if scrap.move_id:
-                scrap.scrap_qty = scrap.move_id.quantity_done
+            if scrap.move_ids:
+                scrap.scrap_qty = scrap.move_ids[0].quantity_done
 
     @api.onchange('lot_id')
     def _onchange_serial_number(self):
@@ -120,6 +120,7 @@ class StockScrap(models.Model):
             'product_uom_qty': self.scrap_qty,
             'location_id': self.location_id.id,
             'scrapped': True,
+            'scrap_id': self.id,
             'location_dest_id': self.scrap_location_id.id,
             'move_line_ids': [(0, 0, {'product_id': self.product_id.id,
                                            'product_uom_id': self.product_uom_id.id, 
@@ -140,7 +141,7 @@ class StockScrap(models.Model):
             move = self.env['stock.move'].create(scrap._prepare_move_values())
             # master: replace context by cancel_backorder
             move.with_context(is_scrap=True)._action_done()
-            scrap.write({'move_id': move.id, 'state': 'done'})
+            scrap.write({'state': 'done'})
             scrap.date_done = fields.Datetime.now()
         return True
 
@@ -151,25 +152,32 @@ class StockScrap(models.Model):
 
     def action_get_stock_move_lines(self):
         action = self.env['ir.actions.act_window']._for_xml_id('stock.stock_move_line_action')
-        action['domain'] = [('move_id', '=', self.move_id.id)]
+        action['domain'] = [('move_id', 'in', self.move_ids.ids)]
         return action
 
+    def _should_check_available_qty(self):
+        return self.product_id.type == 'product'
+
+    def check_available_qty(self):
+        if not self._should_check_available_qty():
+            return True
+
+        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
+        available_qty = self.with_context(
+            location=self.location_id.id,
+            lot_id=self.lot_id.id,
+            package_id=self.package_id.id,
+            owner_id=self.owner_id.id
+        ).product_id.qty_available
+        scrap_qty = self.product_uom_id._compute_quantity(self.scrap_qty, self.product_id.uom_id)
+        return float_compare(available_qty, scrap_qty, precision_digits=precision) >= 0
+
     def action_validate(self):
         self.ensure_one()
         if float_is_zero(self.scrap_qty,
                          precision_rounding=self.product_uom_id.rounding):
             raise UserError(_('You can only enter positive quantities.'))
-        if self.product_id.type != 'product':
-            return self.do_scrap()
-        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
-        available_qty = sum(self.env['stock.quant']._gather(self.product_id,
-                                                            self.location_id,
-                                                            self.lot_id,
-                                                            self.package_id,
-                                                            self.owner_id,
-                                                            strict=True).mapped('quantity'))
-        scrap_qty = self.product_uom_id._compute_quantity(self.scrap_qty, self.product_id.uom_id)
-        if float_compare(available_qty, scrap_qty, precision_digits=precision) >= 0:
+        if self.check_available_qty():
             return self.do_scrap()
         else:
             ctx = dict(self.env.context)
@@ -177,7 +185,7 @@ class StockScrap(models.Model):
                 'default_product_id': self.product_id.id,
                 'default_location_id': self.location_id.id,
                 'default_scrap_id': self.id,
-                'default_quantity': scrap_qty,
+                'default_quantity': self.product_uom_id._compute_quantity(self.scrap_qty, self.product_id.uom_id),
                 'default_product_uom_name': self.product_id.uom_name
             })
             return {
