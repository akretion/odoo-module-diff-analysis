PR: https://github.com/odoo/odoo/pull/143908

From: a50f9419b10e24bbe9f2071ef8e63cff3152fddd
From: Walid
Date: 2023-11-28 17:59:11

Structural Changes: 9
Total Changes: 20

[FIX] project: check company

Steps to reproduce:
- Install Stock and Project
- Create a new proect with current company as customer
(3 dots menu on project overview to the customer)
- Create a new warehouse for the current company
- Error pops

Bug:
since commit[1] check company is enforced on the project_id field of
partners in bothways
when creating a new warehouse CheckCompany fields are editted on the
partner if set (property_stock_customer/supplier) the issue is if
the partner's company_id is False while project belongs to company
"_check_company" fails

Fix:
Remove check company on project_ids from the partner's side and
implement it as python constraint

opw-3507952
[1]:https://github.com/odoo/odoo/pull/109464

closes odoo/odoo#143908

X-original-commit: 390807c494bb9f442206cd1a6c4a2b3eed324090
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>
Signed-off-by: Walid Hanniche (waha) <waha@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/res_partner.py
+++ b/addons/project/models/res_partner.py
@@ -1,19 +1,31 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import fields, models
+from odoo import api, fields, models, _
+from odoo.exceptions import UserError
 from odoo.tools import email_normalize
 
 
 class ResPartner(models.Model):
     """ Inherits partner and adds Tasks information in the partner form """
     _inherit = 'res.partner'
-    _check_company_auto = True
 
-    project_ids = fields.One2many('project.project', 'partner_id', string='Projects', check_company=True)
-    task_ids = fields.One2many('project.task', 'partner_id', string='Tasks', check_company=True)
+    project_ids = fields.One2many('project.project', 'partner_id', string='Projects')
+    task_ids = fields.One2many('project.task', 'partner_id', string='Tasks')
     task_count = fields.Integer(compute='_compute_task_count', string='# Tasks')
 
+    @api.constrains('company_id', 'project_ids')
+    def _ensure_same_company_than_projects(self):
+        for partner in self:
+            if partner.company_id and partner.project_ids.company_id and partner.project_ids.company_id != partner.company_id:
+                raise UserError(_("Partner company cannot be different from its assigned projects' company"))
+
+    @api.constrains('company_id', 'task_ids')
+    def _ensure_same_company_than_tasks(self):
+        for partner in self:
+            if partner.company_id and partner.task_ids.company_id and partner.task_ids.company_id != partner.company_id:
+                raise UserError(_("Partner company cannot be different from its assigned tasks' company"))
+
     def _compute_task_count(self):
         # retrieve all children partners and prefetch 'parent_id' on them
         all_partners = self.with_context(active_test=False).search_fetch(
