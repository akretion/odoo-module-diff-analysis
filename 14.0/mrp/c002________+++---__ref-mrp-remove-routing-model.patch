PR: https://github.com/odoo/odoo/pull/

From: c660770ebd84c2c0d9e56ca5897effc6c138b827
From: Simon Lejeune
Date: 2020-06-15 14:59:40

Structural Changes: 23
Total Changes: 168

[REF] mrp: remove routing model

Set the operations directly on the Bill of Material.
Duplicate the demo data where a routing was shared.
Adapt the tests.

Remove the following feature:
    - set the same routing on parent and kit child bom
    - when planning, if the component of the kit have the same operation
      than a component of the parent bom, merge these operations

task-2241471

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_bom.py
+++ b/addons/mrp/models/mrp_bom.py
@@ -48,10 +48,7 @@ class MrpBom(models.Model):
         help="Unit of Measure (Unit of Measure) is the unit of measurement for the inventory control", domain="[('category_id', '=', product_uom_category_id)]")
     product_uom_category_id = fields.Many2one(related='product_tmpl_id.uom_id.category_id')
     sequence = fields.Integer('Sequence', help="Gives the sequence order when displaying a list of bills of material.")
-    routing_id = fields.Many2one(
-        'mrp.routing', 'Routing', check_company=True,
-        help="The operations for producing this BoM.  When a routing is specified, the production orders will "
-             " be executed through work orders, otherwise everything is processed in the production order itself. ")
+    operation_ids = fields.One2many('mrp.routing.workcenter', 'bom_id', 'Operations', copy=True)
     ready_to_produce = fields.Selection([
         ('all_available', ' When all components are available'),
         ('asap', 'When components for 1st operation are available')], string='Manufacturing Readiness',
@@ -119,11 +116,6 @@ class MrpBom(models.Model):
             for line in self.bom_line_ids:
                 line.bom_product_template_attribute_value_ids = False
 
-    @api.onchange('routing_id')
-    def onchange_routing_id(self):
-        for line in self.bom_line_ids:
-            line.operation_id = False
-
     @api.model
     def name_create(self, name):
         # prevent to use string as product_tmpl_id
@@ -261,12 +253,6 @@ class MrpBomLine(models.Model):
     sequence = fields.Integer(
         'Sequence', default=1,
         help="Gives the sequence order when displaying.")
-    routing_id = fields.Many2one(
-        'mrp.routing', 'Routing',
-        related='bom_id.routing_id', store=True, readonly=False,
-        help="The list of operations to produce the finished product. The routing is mainly used to "
-             "compute work center costs during operations and to plan future loads on work centers "
-             "based on production planning.")
     bom_id = fields.Many2one(
         'mrp.bom', 'Parent BoM',
         index=True, ondelete='cascade', required=True)
@@ -276,9 +262,10 @@ class MrpBomLine(models.Model):
         'product.template.attribute.value', string="Apply on Variants", ondelete='restrict',
         domain="[('id', 'in', possible_bom_product_template_attribute_value_ids)]",
         help="BOM Product Variants needed to apply this line.")
+    allowed_operation_ids = fields.Many2many('mrp.routing.workcenter', compute='_compute_allowed_operation_ids')
     operation_id = fields.Many2one(
         'mrp.routing.workcenter', 'Consumed in Operation', check_company=True,
-        domain="[('routing_id', '=', routing_id), '|', ('company_id', '=', company_id), ('company_id', '=', False)]",
+        domain="[('id', 'in', allowed_operation_ids)]",
         help="The operation where the components are consumed, or the finished products created.")
     child_bom_id = fields.Many2one(
         'mrp.bom', 'Sub BoM', compute='_compute_child_bom_id')
@@ -327,6 +314,20 @@ class MrpBomLine(models.Model):
         for line in self:
             line.child_line_ids = line.child_bom_id.bom_line_ids.ids or False
 
+    @api.depends('bom_id')
+    def _compute_allowed_operation_ids(self):
+        for bom_line in self:
+            if not bom_line.bom_id.operation_ids:
+                bom_line.allowed_operation_ids = self.env['mrp.routing.workcenter']
+            else:
+                operation_domain = [
+                    ('id', 'in', bom_line.bom_id.operation_ids.ids),
+                    '|',
+                        ('company_id', '=', bom_line.company_id.id),
+                        ('company_id', '=', False)
+                ]
+                bom_line.allowed_operation_ids = self.env['mrp.routing.workcenter'].search(operation_domain)
+
     @api.onchange('product_uom_id')
     def onchange_product_uom_id(self):
         res = {}
@@ -403,11 +404,24 @@ class MrpByProduct(models.Model):
         default=1.0, digits='Product Unit of Measure', required=True)
     product_uom_id = fields.Many2one('uom.uom', 'Unit of Measure', required=True)
     bom_id = fields.Many2one('mrp.bom', 'BoM', ondelete='cascade')
-    routing_id = fields.Many2one(
-        'mrp.routing', 'Routing', store=True, related='bom_id.routing_id')
+    allowed_operation_ids = fields.Many2many('mrp.routing.workcenter', compute='_compute_allowed_operation_ids')
     operation_id = fields.Many2one(
         'mrp.routing.workcenter', 'Produced in Operation', check_company=True,
-        domain="[('routing_id', '=', routing_id), '|', ('company_id', '=', company_id), ('company_id', '=', False)]")
+        domain="[('id', 'in', allowed_operation_ids)]")
+
+    @api.depends('bom_id')
+    def _compute_allowed_operation_ids(self):
+        for byproduct in self:
+            if not byproduct.bom_id.operation_ids:
+                byproduct.allowed_operation_ids = self.env['mrp.routing.workcenter']
+            else:
+                operation_domain = [
+                    ('id', 'in', byproduct.bom_id.operation_ids.ids),
+                    '|',
+                        ('company_id', '=', byproduct.company_id.id),
+                        ('company_id', '=', False)
+                ]
+                byproduct.allowed_operation_ids = self.env['mrp.routing.workcenter'].search(operation_domain)
 
     @api.onchange('product_id')
     def onchange_product_id(self):

--- a/addons/mrp/models/mrp_production.py
+++ b/addons/mrp/models/mrp_production.py
@@ -130,12 +130,7 @@ class MrpProduction(models.Model):
         ('type', '=', 'normal')]""",
         check_company=True,
         help="Bill of Materials allow you to define the list of required components to make a finished product.")
-    routing_id = fields.Many2one(
-        'mrp.routing', 'Routing',
-        readonly=True, compute='_compute_routing', store=True,
-        help="The list of operations (list of work centers) to produce the finished product. The routing "
-             "is mainly used to compute work center costs during operations and to plan future loads on "
-             "work centers based on production planning.")
+    bom_has_operations = fields.Boolean(compute='_compute_bom_has_operations')
 
     state = fields.Selection([
         ('draft', 'Draft'),
@@ -277,6 +272,14 @@ class MrpProduction(models.Model):
     def _set_date_planned_finished(self):
         self.move_finished_ids.write({'date_expected': self.date_planned_finished})
 
+    @api.depends('bom_id')
+    def _compute_bom_has_operations(self):
+        for production in self:
+            if not production.bom_id:
+                production.bom_has_operations = False
+            else:
+                production.bom_has_operations = len(production.bom_id.operation_ids) > 0
+
     @api.depends('move_raw_ids.delay_alert_date')
     def _compute_delay_alert_date(self):
         delay_alert_date_data = self.env['stock.move'].read_group([('id', 'in', self.move_raw_ids.ids), ('delay_alert_date', '!=', False)], ['delay_alert_date:max'], 'raw_material_production_id')
@@ -367,14 +370,6 @@ class MrpProduction(models.Model):
         for production in self:
             production.finished_move_line_ids = production.move_finished_ids.mapped('move_line_ids')
 
-    @api.depends('bom_id.routing_id', 'bom_id.routing_id.operation_ids')
-    def _compute_routing(self):
-        for production in self:
-            if production.bom_id.routing_id.operation_ids:
-                production.routing_id = production.bom_id.routing_id.id
-            else:
-                production.routing_id = False
-
     @api.depends('workorder_ids')
     def _compute_workorder_count(self):
         data = self.env['mrp.workorder'].read_group([('production_id', 'in', self.ids)], ['production_id'], ['production_id'])
@@ -418,7 +413,7 @@ class MrpProduction(models.Model):
                     production.state = 'done'
             elif production.move_finished_ids.filtered(lambda m: m.state not in ('cancel', 'done') and m.product_id.id == production.product_id.id)\
                  and (production.qty_produced >= production.product_qty)\
-                 and (not production.routing_id or all(wo_state in ('cancel', 'done') for wo_state in production.workorder_ids.mapped('state'))):
+                 and (not production.bom_id.operation_ids or all(wo_state in ('cancel', 'done') for wo_state in production.workorder_ids.mapped('state'))):
                 production.state = 'to_close'
             elif production.workorder_ids and any(wo_state in ('progress') for wo_state in production.workorder_ids.mapped('state'))\
                  or production.qty_produced > 0 and production.qty_produced < production.product_qty:
@@ -435,7 +430,7 @@ class MrpProduction(models.Model):
             if production.state not in ('draft', 'done', 'cancel'):
                 relevant_move_state = production.move_raw_ids._get_relevant_state_among_moves()
                 if relevant_move_state == 'partially_available':
-                    if production.routing_id and production.routing_id.operation_ids and production.bom_id.ready_to_produce == 'asap':
+                    if production.bom_id.operation_ids and production.bom_id.ready_to_produce == 'asap':
                         production.reservation_state = production._get_ready_to_produce_state()
                     else:
                         production.reservation_state = 'confirmed'
@@ -516,7 +511,7 @@ class MrpProduction(models.Model):
 
     @api.onchange('date_planned_start')
     def _onchange_date_planned_start(self):
-        if not self.routing_id:
+        if not self.bom_id.operation_ids:
             self.date_planned_finished = self.date_planned_start + datetime.timedelta(hours=1)
 
     @api.onchange('bom_id', 'product_id', 'product_qty', 'product_uom_id')
@@ -537,7 +532,7 @@ class MrpProduction(models.Model):
         else:
             self.move_raw_ids = [(2, move.id) for move in self.move_raw_ids.filtered(lambda m: m.bom_line_id)]
 
-    @api.onchange('location_src_id', 'move_raw_ids', 'routing_id')
+    @api.onchange('location_src_id', 'move_raw_ids', 'bom_id')
     def _onchange_location(self):
         source_location = self.location_src_id
         self.move_raw_ids.update({
@@ -567,7 +562,7 @@ class MrpProduction(models.Model):
                     raise UserError(_('You cannot move a planned manufacturing order.'))
             if 'move_raw_ids' in vals and production.state != 'draft':
                 production._autoconfirm_production()
-            if not production.routing_id and vals.get('date_planned_start') and not vals.get('date_planned_finished'):
+            if not production.bom_id.operation_ids and vals.get('date_planned_start') and not vals.get('date_planned_finished'):
                 new_date_planned_start = fields.Datetime.to_datetime(vals.get('date_planned_start'))
                 if not production.date_planned_finished or new_date_planned_start >= production.date_planned_finished:
                     production.date_planned_finished = new_date_planned_start + datetime.timedelta(hours=1)
@@ -738,14 +733,12 @@ class MrpProduction(models.Model):
 
     def _get_ready_to_produce_state(self):
         """ returns 'assigned' if enough components are reserved in order to complete
-        the first operation in the routing. If not returns 'waiting'
+        the first operation of the bom. If not returns 'waiting'
         """
         self.ensure_one()
-        first_operation = self.routing_id.operation_ids[0]
-        # Get BoM line related to first opeation in rounting. If there is only
-        # one opeation in the routing then it will need all BoM lines.
+        first_operation = self.bom_id.operation_ids[0]
         bom_line_ids = self.env['mrp.bom.line']
-        if len(self.routing_id.operation_ids) == 1:
+        if len(self.bom_id.operation_ids) == 1:
             moves_in_first_operation = self.move_raw_ids
         else:
             moves_in_first_operation = self.move_raw_ids.filtered(lambda move: move.operation_id == first_operation)
@@ -852,7 +845,7 @@ class MrpProduction(models.Model):
 
     def button_plan(self):
         """ Create work orders. And probably do stuff, like things. """
-        orders_to_plan = self.filtered(lambda order: order.routing_id and order.state == 'confirmed')
+        orders_to_plan = self.filtered(lambda order: order.bom_id.operation_ids and order.state == 'confirmed')
         for order in orders_to_plan:
             order.move_raw_ids.filtered(lambda m: m.state == 'draft')._action_confirm()
             # `propagate_date` enables the automatic rescheduling which could lead to hard to
@@ -952,8 +945,8 @@ class MrpProduction(models.Model):
         workorders = self.env['mrp.workorder']
         original_one = False
         for bom, bom_data in exploded_boms:
-            # If the routing of the parent BoM and phantom BoM are the same, don't recreate work orders, but use one master routing
-            if bom.routing_id.id and (not bom_data['parent_line'] or bom_data['parent_line'].bom_id.routing_id.id != bom.routing_id.id):
+            # If the operations of the parent BoM and phantom BoM are the same, don't recreate work orders.
+            if bom.operation_ids and (not bom_data['parent_line'] or bom_data['parent_line'].bom_id.operation_ids != bom.operation_ids):
                 temp_workorders = self._workorders_create(bom, bom_data)
                 workorders += temp_workorders
                 if temp_workorders: # In order to avoid two "ending work orders"
@@ -975,7 +968,7 @@ class MrpProduction(models.Model):
         if self.product_id.tracking == 'serial':
             quantity = 1.0
 
-        for operation in bom.routing_id.operation_ids:
+        for operation in bom.operation_ids:
             workorder = workorders.create({
                 'name': operation.name,
                 'production_id': self.id,
@@ -994,9 +987,7 @@ class MrpProduction(models.Model):
             # get the raw moves to attach to this operation
             moves_raw = self.env['stock.move']
             for move in self.move_raw_ids:
-                if move.operation_id == operation and move.bom_line_id.bom_id.routing_id == bom.routing_id:
-                    moves_raw |= move
-                if move.operation_id == operation and not move.bom_line_id:
+                if move.operation_id == operation:
                     moves_raw |= move
             moves_finished = self.move_finished_ids.filtered(lambda move: move.operation_id == operation)
 
@@ -1004,9 +995,9 @@ class MrpProduction(models.Model):
             #   be consumed at the last workorder of the linked routing.
             # - Raw moves from a BoM where no rounting was set should be consumed at the last
             #   workorder of the main routing.
-            if len(workorders) == len(bom.routing_id.operation_ids):
-                moves_raw |= self.move_raw_ids.filtered(lambda move: not move.operation_id and move.bom_line_id.bom_id.routing_id == bom.routing_id)
-                moves_raw |= self.move_raw_ids.filtered(lambda move: not move.workorder_id and not move.bom_line_id.bom_id.routing_id)
+            if len(workorders) == len(bom.operation_ids):
+                moves_raw |= self.move_raw_ids.filtered(lambda move: not move.operation_id and move.bom_line_id.bom_id.operation_ids and move.bom_line_id.bom_id == bom)
+                moves_raw |= self.move_raw_ids.filtered(lambda move: not move.workorder_id and not move.bom_line_id.bom_id.operation_ids)
 
                 moves_finished |= self.move_finished_ids.filtered(lambda move: move.product_id != self.product_id and not move.operation_id)
 

--- a/addons/mrp/models/mrp_routing.py
+++ b/addons/mrp/models/mrp_routing.py
@@ -4,32 +4,6 @@
 from odoo import api, fields, models, _
 
 
-class MrpRouting(models.Model):
-    """ Specifies routings of work centers """
-    _name = 'mrp.routing'
-    _description = 'Routings'
-
-    name = fields.Char('Routing', required=True)
-    active = fields.Boolean(
-        'Active', default=True,
-        help="If the active field is set to False, it will allow you to hide the routing without removing it.")
-    code = fields.Char(
-        'Reference',
-        copy=False, default=lambda self: _('New'), readonly=True)
-    note = fields.Text('Description')
-    operation_ids = fields.One2many(
-        'mrp.routing.workcenter', 'routing_id', 'Operations',
-        copy=True)
-    company_id = fields.Many2one(
-        'res.company', 'Company', default=lambda self: self.env.company)
-
-    @api.model
-    def create(self, vals):
-        if 'code' not in vals or vals['code'] == _('New'):
-            vals['code'] = self.env['ir.sequence'].next_by_code('mrp.routing') or _('New')
-        return super(MrpRouting, self).create(vals)
-
-
 class MrpRoutingWorkcenter(models.Model):
     _name = 'mrp.routing.workcenter'
     _description = 'Work Center Usage'
@@ -41,14 +15,13 @@ class MrpRoutingWorkcenter(models.Model):
     sequence = fields.Integer(
         'Sequence', default=100,
         help="Gives the sequence order when displaying a list of routing Work Centers.")
-    routing_id = fields.Many2one(
-        'mrp.routing', 'Parent Routing',
+    bom_id = fields.Many2one(
+        'mrp.bom', 'Bill of Material',
         index=True, ondelete='cascade', required=True,
-        help="The routing contains all the Work Centers used and for how long. This will create work orders afterwards "
-        "which alters the execution of the manufacturing order.")
+        help="The Bill of Material this operation is linked to")
     company_id = fields.Many2one(
         'res.company', 'Company',
-        readonly=True, related='routing_id.company_id', store=True)
+        readonly=True, related='bom_id.company_id', store=True)
     worksheet_type = fields.Selection([
         ('pdf', 'PDF'), ('google_slide', 'Google Slide'), ('text', 'Text')],
         string="Work Sheet", default="pdf",

--- a/addons/mrp/models/stock_move.py
+++ b/addons/mrp/models/stock_move.py
@@ -76,10 +76,10 @@ class StockMove(models.Model):
         'mrp.unbuild', 'Disassembly Order', check_company=True)
     consume_unbuild_id = fields.Many2one(
         'mrp.unbuild', 'Consumed Disassembly Order', check_company=True)
+    allowed_operation_ids = fields.Many2many('mrp.routing.workcenter', compute='_compute_allowed_operation_ids')
     operation_id = fields.Many2one(
         'mrp.routing.workcenter', 'Operation To Consume', check_company=True,
-        domain="[('routing_id', '=', routing_id), '|', ('company_id', '=', company_id), ('company_id', '=', False)]")
-    routing_id = fields.Many2one(related='raw_material_production_id.routing_id')
+        domain="[('id', 'in', allowed_operation_ids)]")
     workorder_id = fields.Many2one(
         'mrp.workorder', 'Work Order To Consume', check_company=True)
     # Quantities to process, in normalized UoMs
@@ -118,6 +118,24 @@ class StockMove(models.Model):
                 move.order_finished_lot_ids = False
                 move.finished_lots_exist = False
 
+    @api.depends('raw_material_production_id.bom_id')
+    def _compute_allowed_operation_ids(self):
+        for move in self:
+            if (
+                not move.raw_material_production_id or
+                not move.raw_material_production_id.bom_id or not
+                move.raw_material_production_id.bom_id.operation_ids
+            ):
+                move.allowed_operation_ids = self.env['mrp.routing.workcenter']
+            else:
+                operation_domain = [
+                    ('id', 'in', move.raw_material_production_id.bom_id.operation_ids.ids),
+                    '|',
+                        ('company_id', '=', self.company_id.id),
+                        ('company_id', '=', False)
+                ]
+                move.allowed_operation_ids = self.env['mrp.routing.workcenter'].search(operation_domain)
+
     @api.depends('product_id.tracking')
     def _compute_needs_lots(self):
         for move in self:
