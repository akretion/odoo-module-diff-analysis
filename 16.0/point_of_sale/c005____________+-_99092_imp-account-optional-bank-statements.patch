PR: https://github.com/odoo/odoo/pull/99092

From: 4fb0933986534e31337aa1dce3478a67deea72de
From: PoMa
Date: 2022-09-20 13:24:23

Structural Changes: 4
Total Changes: 57

[IMP] account: Optional bank statements

Bank statements are now optional in accounting. The users add statements directly and can assign statements for control reasons.
The users can enter end date and end balance real for the statements and attach the bank statement scan.

The system checks if there is a gap (lines without statement) before current statement and warns the user
with decoration, also we check if the ending balance match the accumulated balance of the last line.

Bank statement lines now show an accumulated balance and can be sorted by drag and drop in the same date, if the user drags a line
to a position with lines of another date, it simply doesn't have any effect.
Rename accumulated balance to cumulative balance, a better name

closes odoo/odoo#99092

Task: 2879904
Related: odoo/upgrade#3906
Related: odoo/enterprise#30824
Signed-off-by: Laurent Smet <las@odoo.com>

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/account_bank_statement.py
+++ b/addons/point_of_sale/models/account_bank_statement.py
@@ -9,15 +9,6 @@ class AccountBankStatementLine(models.Model):
     _inherit = 'account.bank.statement.line'
 
     pos_session_id = fields.Many2one('pos.session', string="Session", copy=False)
-    # TODO:PoMa check if they need to be converted
-    # account_id = fields.Many2one('account.account', related='journal_id.default_account_id', readonly=True)
-
-    # def button_validate_or_action(self):
-    #     # OVERRIDE to check the consistency of the statement's state regarding the session's state.
-    #     for statement in self:
-    #         if statement.pos_session_id.state  in ('opened', 'closing_control') and statement.state == 'open':
-    #             raise UserError(_("You can't validate a bank statement that is used in an opened Session of a Point of Sale."))
-    #     return super(AccountBankStatement, self).button_validate_or_action()
 
     @api.ondelete(at_uninstall=False)
     def _unlink_except_linked_to_pos_session(self):

--- a/addons/point_of_sale/models/pos_config.py
+++ b/addons/point_of_sale/models/pos_config.py
@@ -219,7 +219,7 @@ class PosConfig(models.Model):
         for pos_config in self:
             session = PosSession.search_read(
                 [('config_id', '=', pos_config.id), ('state', '=', 'closed')],
-                ['cash_register_balance_end_real', 'stop_at', 'cash_journal_id'],
+                ['cash_register_balance_end_real', 'stop_at'],
                 order="stop_at desc", limit=1)
             if session:
                 timezone = pytz.timezone(self._context.get('tz') or self.env.user.tz or 'UTC')

--- a/addons/point_of_sale/models/pos_order.py
+++ b/addons/point_of_sale/models/pos_order.py
@@ -170,7 +170,7 @@ class PosOrder(models.Model):
 
         order_bank_statement_lines= self.env['pos.payment'].search([('pos_order_id', '=', order.id)])
         order_bank_statement_lines.unlink()
-        for payments in pos_order['statement_ids']:  # this is not related to session.statement_ids it is just a variable with a weird name holding payments
+        for payments in pos_order['statement_ids']:
             order.add_payment(self._payment_fields(order, payments[2]))
 
         order.amount_paid = sum(order.payment_ids.mapped('amount'))
@@ -1011,7 +1011,7 @@ class PosOrder(models.Model):
         timezone = pytz.timezone(self._context.get('tz') or self.env.user.tz or 'UTC')
         return {
             'lines': [[0, 0, line] for line in order.lines.export_for_ui()],
-            'statement_ids': [[0, 0, payment] for payment in order.payment_ids.export_for_ui()],  # this is not related to session.statement_ids it is just a variable with a weird name holding payments
+            'statement_ids': [[0, 0, payment] for payment in order.payment_ids.export_for_ui()],
             'name': order.pos_reference,
             'uid': re.search('([0-9-]){14}', order.pos_reference).group(0),
             'amount_paid': order.amount_paid,

--- a/addons/point_of_sale/models/pos_session.py
+++ b/addons/point_of_sale/models/pos_session.py
@@ -53,7 +53,7 @@ class PosSession(models.Model):
     login_number = fields.Integer(string='Login Sequence Number', help='A sequence number that is incremented each time a user resumes the pos session', default=0)
 
     opening_notes = fields.Text(string="Opening Notes")
-    cash_control = fields.Boolean(compute='_compute_cash_all', string='Has Cash Control', compute_sudo=True, store=True)
+    cash_control = fields.Boolean(compute='_compute_cash_all', string='Has Cash Control', compute_sudo=True)
     cash_journal_id = fields.Many2one('account.journal', compute='_compute_cash_all', string='Cash Journal', store=True)
 
     cash_register_balance_end_real = fields.Monetary(
@@ -175,14 +175,6 @@ class PosSession(models.Model):
             if (company.period_lock_date and start_date <= company.period_lock_date) or (company.fiscalyear_lock_date and start_date <= company.fiscalyear_lock_date):
                 raise ValidationError(_("You cannot create a session before the accounting lock date."))
 
-    def _check_bank_statement_state(self):
-        for session in self:
-            posted_stmt_lines = session.statement_line_ids.filtered(lambda x: x.state == "posted")
-            if posted_stmt_lines:
-                raise UserError(_("Some Cash Transactions are already posted. "
-                                  "Please reset them to new in order to close the session.\n"
-                                  "Cash Registers: %r", list(stmt_line.name for stmt_line in posted_stmt_lines)))
-
     def _check_invoices_are_posted(self):
         unposted_invoices = self.order_ids.sudo().with_company(self.company_id).account_move.filtered(lambda x: x.state != 'posted')
         if unposted_invoices:
@@ -247,8 +239,7 @@ class PosSession(models.Model):
                 session.cash_register_balance_start = last_session.cash_register_balance_end_real  # defaults to 0 if lastsession is empty
             else:
                 values['state'] = 'opened'
-            if values:
-                session.write(values)
+            session.write(values)
         return True
 
     def action_pos_session_closing_control(self, balancing_account=False, amount_to_balance=0, bank_payment_method_diffs=None):
@@ -266,7 +257,6 @@ class PosSession(models.Model):
             if session.rescue and session.config_id.cash_control:
                 default_cash_payment_method_id = self.payment_method_ids.filtered(lambda pm: pm.type == 'cash')[0]
                 orders = self.order_ids.filtered(lambda o: o.state == 'paid' or o.state == 'invoiced')
-
                 total_cash = sum(
                     orders.payment_ids.filtered(lambda p: p.payment_method_id == default_cash_payment_method_id).mapped('amount')
                 ) + self.cash_register_balance_start
@@ -285,7 +275,6 @@ class PosSession(models.Model):
         # Session without cash payment method will not have a cash register.
         # However, there could be other payment methods, thus, session still
         # needs to be validated.
-        self._check_bank_statement_state()
         return self._validate_session(balancing_account, amount_to_balance, bank_payment_method_diffs)
 
     def _validate_session(self, balancing_account=False, amount_to_balance=0, bank_payment_method_diffs=None):
@@ -333,7 +322,6 @@ class PosSession(models.Model):
             self.sudo().with_company(self.company_id)._reconcile_account_move_lines(data)
         else:
             if self.config_id.cash_control:
-
                 st_line_vals = {
                     'journal_id': self.cash_journal_id.id,
                     'amount': self.cash_register_difference,
@@ -402,12 +390,6 @@ class PosSession(models.Model):
         if check_closing_session:
             return check_closing_session
 
-        # For now we won't simply do
-        # self._check_pos_session_balance()
-        # self._check_bank_statement_state()
-        # validate_result = self._validate_session()
-        # because some functions are being used and overridden in other modules...
-        # so we'll try to use the original flow as of now for the moment
         validate_result = self.action_pos_session_closing_control(bank_payment_method_diffs=bank_payment_method_diffs)
 
         # If an error is raised, the user will still be redirected to the back end to manually close the session.
@@ -555,7 +537,7 @@ class PosSession(models.Model):
                 'name': default_cash_payment_method_id.name,
                 'amount': self.cash_register_balance_start
                           + total_default_cash_payment_amount
-                          + self.cash_real_transaction,
+                          + sum(self.statement_line_ids.mapped('amount')),
                 'opening': self.cash_register_balance_start,
                 'payment_amount': total_default_cash_payment_amount,
                 'moves': cash_in_out_list,
@@ -1399,16 +1381,6 @@ class PosSession(models.Model):
         # self should be single record as this method is only called in the subfunctions of self._validate_session
         return self.currency_id._convert(amount, self.company_id.currency_id, self.company_id, date, round=round)
 
-    def show_cash_register(self):
-        self.ensure_one()
-        return {
-            'name': _('Cash register for %s') % (self.name, ),
-            'type': 'ir.actions.act_window',
-            'res_model': 'account.bank.statement.line',
-            'view_mode': 'tree',
-            'domain': [('pos_session_id', '=', self.id)],
-        }
-
     def show_journal_items(self):
         self.ensure_one()
         all_related_moves = self._get_related_account_moves()
@@ -1542,14 +1514,16 @@ class PosSession(models.Model):
         if not sessions:
             raise UserError(_("There is no cash payment method for this PoS Session"))
 
-        for session in sessions:
-            self.env['account.bank.statement.line'].create({
+        self.env['account.bank.statement.line'].create([
+            {
                 'pos_session_id': session.id,
                 'journal_id': session.cash_journal_id.id,
                 'amount': sign * amount,
                 'date': fields.Date.context_today(self),
                 'payment_ref': '-'.join([session.name, extras['translatedType'], reason]),
-            })
+            }
+            for session in sessions
+        ])
 
         message_content = [f"Cash {extras['translatedType']}", f'- Amount: {extras["formattedAmount"]}']
         if reason:
