PR: https://github.com/odoo/odoo/pull/179354

From: 4f13b617547a27c714af69529cf69d799bdb601c
From: Gorash
Date: 2025-02-15 17:39:11

Breaking data model changes scores: del:12 + add:7, change matches:
-    groups_id = fields.Many2many('res.groups', 'ir_act_window_group_rel',
+    group_ids = fields.Many2many('res.groups', 'ir_act_window_group_rel',
-    groups_id = fields.Many2many('res.groups', 'ir_act_server_group_rel',
+    group_ids = fields.Many2many('res.groups', 'ir_act_server_group_rel',
-    groups_id = fields.Many2many('res.groups', 'res_groups_report_rel', 'uid', 'gid', string='Groups')
+    group_ids = fields.Many2many('res.groups', 'res_groups_report_rel', 'uid', 'gid', string='Groups')
-    groups_id = fields.Many2many('res.groups', 'ir_ui_menu_group_rel',
+    group_ids = fields.Many2many('res.groups', 'ir_ui_menu_group_rel',
-    groups_id = fields.Many2many('res.groups', 'ir_ui_view_group_rel', 'view_id', 'group_id',
+    group_ids = fields.Many2many('res.groups', 'ir_ui_view_group_rel', 'view_id', 'group_id',
-    groups_id = fields.Many2many('res.groups', 'res_groups_users_rel', 'uid', 'gid', string='Groups', default=lambda s: s._default_groups())
+    group_ids = fields.Many2many('res.groups', 'res_groups_users_rel', 'uid', 'gid', string='Groups', default=lambda s: s._default_groups(), help="Groups explicitly assigned to the user")
+    all_group_ids = fields.Many2many('res.groups', related='group_ids', string="Groups and implied groups")

Total Changes: 188

[IMP] base: rename field res.users.groups_id into group_ids & all_group_ids

(all_group_ids is temporary equal to group_ids)

Part-of: odoo/odoo#179354
Related: odoo/enterprise#74122
Related: odoo/upgrade#6841
Related: odoo/upgrade-util#169
Signed-off-by: Raphael Collet <rco@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/ir_actions.py
+++ b/odoo/addons/base/models/ir_actions.py
@@ -168,7 +168,7 @@ class IrActionsActions(models.Model):
             actions = []
             for action in all_actions:
                 action = dict(action)
-                groups = action.pop('groups_id', None)
+                groups = action.pop('group_ids', None)
                 if groups and not any(self.env.user.has_group(ext_id) for ext_id in groups):
                     # the user may not perform this action
                     continue
@@ -204,14 +204,14 @@ class IrActionsActions(models.Model):
             try:
                 action = self.env[action_model].sudo().browse(action_id)
                 fields = ['name', 'binding_view_types', 'binding_invisible']
-                for field in ('groups_id', 'res_model', 'sequence', 'domain'):
+                for field in ('group_ids', 'res_model', 'sequence', 'domain'):
                     if field in action._fields:
                         fields.append(field)
                 action = action.read(fields)[0]
-                if action.get('groups_id'):
+                if action.get('group_ids'):
                     # transform the list of ids into a list of xml ids
-                    groups = self.env['res.groups'].browse(action['groups_id'])
-                    action['groups_id'] = list(groups._ensure_xml_id().values())
+                    groups = self.env['res.groups'].browse(action['group_ids'])
+                    action['group_ids'] = list(groups._ensure_xml_id().values())
                 if 'domain' in action and not action.get('domain'):
                     action.pop('domain')
                 result[binding_type].append(frozendict(action))
@@ -329,7 +329,7 @@ class IrActionsAct_Window(models.Model):
                                "when displaying the result of an action, federating view mode, views and " \
                                "reference view. The result is returned as an ordered list of pairs (view_id,view_mode).")
     limit = fields.Integer(default=80, help='Default limit for the list view')
-    groups_id = fields.Many2many('res.groups', 'ir_act_window_group_rel',
+    group_ids = fields.Many2many('res.groups', 'ir_act_window_group_rel',
                                  'act_id', 'gid', string='Groups')
     search_view_id = fields.Many2one('ir.ui.view', string='Search View Ref.')
     embedded_action_ids = fields.One2many('ir.embedded.actions', compute="_compute_embedded_actions")
@@ -382,7 +382,7 @@ class IrActionsAct_Window(models.Model):
 
     def _get_readable_fields(self):
         return super()._get_readable_fields() | {
-            "context", "mobile_view_mode", "domain", "filter", "groups_id", "limit",
+            "context", "mobile_view_mode", "domain", "filter", "group_ids", "limit",
             "res_id", "res_model", "search_view_id", "target", "view_id", "view_mode", "views", "embedded_action_ids",
             # this is used by frontend, with the document layout wizard before send and print
             "close_on_report_download",
@@ -592,7 +592,7 @@ class IrActionsServer(models.Model):
         'ir.model.fields', string='Link Field',
         compute='_compute_link_field_id', readonly=False, store=True,
         help="Specify a field used to link the newly created record on the record used by the server action.")
-    groups_id = fields.Many2many('res.groups', 'ir_act_server_group_rel',
+    group_ids = fields.Many2many('res.groups', 'ir_act_server_group_rel',
                                  'act_id', 'gid', string='Allowed Groups', help='Groups that can execute the server action. Leave empty to allow everybody.')
 
     update_field_id = fields.Many2one('ir.model.fields', string='Field to Update', ondelete='cascade', compute='_compute_crud_relations', store=True, readonly=False)
@@ -643,7 +643,7 @@ class IrActionsServer(models.Model):
             if parent_id := vals.get('parent_id'):
                 parent = self.browse(parent_id)
                 vals['model_id'] = parent.model_id.id
-                vals['groups_id'] = parent.groups_id.ids
+                vals['group_ids'] = parent.group_ids.ids
         return super().create(vals_list)
 
     @api.model
@@ -651,11 +651,11 @@ class IrActionsServer(models.Model):
         return [
             'state',
             'model_id',
-            'groups_id',
+            'group_ids',
             'parent_id',
             'child_ids.warning',
             'child_ids.model_id',
-            'child_ids.groups_id',
+            'child_ids.group_ids',
             'update_path',
             'webhook_field_ids'
         ]
@@ -669,9 +669,9 @@ class IrActionsServer(models.Model):
                               model=self.model_id.name,
                               children=', '.join(children_with_different_model.mapped('name'))))
 
-        if self.groups_id and (children_with_different_groups := self.child_ids.filtered(lambda a: a.groups_id != self.groups_id)):
+        if self.group_ids and (children_with_different_groups := self.child_ids.filtered(lambda a: a.group_ids != self.group_ids)):
             warnings.append(_("Following child actions should have the same groups (%(groups)s): %(children)s",
-                              groups=', '.join(self.groups_id.mapped('name')),
+                              groups=', '.join(self.group_ids.mapped('name')),
                               children=', '.join(children_with_different_groups.mapped('name'))))
 
         if (children_with_warnings := self.child_ids.filtered('warning')):
@@ -877,7 +877,7 @@ class IrActionsServer(models.Model):
 
     def _get_readable_fields(self):
         return super()._get_readable_fields() | {
-            "groups_id", "model_name",
+            "group_ids", "model_name",
         }
 
     def _get_runner(self):
@@ -1055,9 +1055,9 @@ class IrActionsServer(models.Model):
         """
         res = False
         for action in self.sudo():
-            action_groups = action.groups_id
+            action_groups = action.group_ids
             if action_groups:
-                if not (action_groups & self.env.user.groups_id):
+                if not (action_groups & self.env.user.all_group_ids):
                     raise AccessError(_("You don't have enough access rights to run this action."))
             else:
                 model_name = action.model_id.model

--- a/odoo/addons/base/models/ir_actions_report.py
+++ b/odoo/addons/base/models/ir_actions_report.py
@@ -159,7 +159,7 @@ class IrActionsReport(models.Model):
     report_name = fields.Char(string='Template Name', required=True)
     report_file = fields.Char(string='Report File', required=False, readonly=False, store=True,
                               help="The path to the main report file (depending on Report Type) or empty if the content is in another field")
-    groups_id = fields.Many2many('res.groups', 'res_groups_report_rel', 'uid', 'gid', string='Groups')
+    group_ids = fields.Many2many('res.groups', 'res_groups_report_rel', 'uid', 'gid', string='Groups')
     multi = fields.Boolean(string='On Multiple Doc.', help="If set to true, the action will not be displayed on the right toolbar of a form view.")
 
     paperformat_id = fields.Many2one('report.paperformat', 'Paper Format')

--- a/odoo/addons/base/models/ir_embedded_actions.py
+++ b/odoo/addons/base/models/ir_embedded_actions.py
@@ -75,7 +75,7 @@ class IrEmbeddedActions(models.Model):
             active_model_record = self.env[parent_res_model].search(domain_id, order='id')
             for record in records:
                 action_groups = record.groups_ids
-                if not action_groups or (action_groups & self.env.user.groups_id):
+                if not action_groups or (action_groups & self.env.user.group_ids):
                     domain_model = literal_eval(record.domain)
                     record.is_visible = (
                         record.parent_res_id in (False, self.env.context.get('active_id', False))

--- a/odoo/addons/base/models/ir_rule.py
+++ b/odoo/addons/base/models/ir_rule.py
@@ -93,7 +93,7 @@ class IrRule(models.Model):
 
         # first check if the group rules fail for any record (aka if
         # searching on (records, group_rules) filters out some of the records)
-        group_rules = all_rules.filtered(lambda r: r.groups and r.groups & self.env.user.groups_id)
+        group_rules = all_rules.filtered(lambda r: r.groups and r.groups & self.env.user.all_group_ids)
         group_domains = Domain.OR(
             safe_eval(r.domain_force, eval_context) if r.domain_force else []
             for r in group_rules
@@ -152,7 +152,7 @@ class IrRule(models.Model):
 
         # browse user and rules with sudo to avoid access errors!
         eval_context = self._eval_context()
-        user_groups = self.env.user.groups_id
+        user_groups = self.env.user.all_group_ids
         group_domains: list[Domain] = []
         for rule in rules.sudo():
             if rule.groups and not (rule.groups & user_groups):

--- a/odoo/addons/base/models/ir_ui_menu.py
+++ b/odoo/addons/base/models/ir_ui_menu.py
@@ -29,7 +29,7 @@ class IrUiMenu(models.Model):
     child_id = fields.One2many('ir.ui.menu', 'parent_id', string='Child IDs')
     parent_id = fields.Many2one('ir.ui.menu', string='Parent Menu', index=True, ondelete="restrict")
     parent_path = fields.Char(index=True)
-    groups_id = fields.Many2many('res.groups', 'ir_ui_menu_group_rel',
+    group_ids = fields.Many2many('res.groups', 'ir_ui_menu_group_rel',
                                  'menu_id', 'gid', string='Groups',
                                  help="If you have groups, the visibility of this menu will be based on these groups. "\
                                       "If this field is empty, Odoo will compute visibility based on the related object's read access.")
@@ -86,7 +86,7 @@ class IrUiMenu(models.Model):
         # It will be used to determine which ones are visible
         menus = self.with_context({}).search_fetch(
             # Don't use 'any' operator in the domain to avoid ir.rule
-            ['|', ('groups_id', '=', False), ('groups_id', 'in', tuple(group_ids))],
+            ['|', ('group_ids', '=', False), ('group_ids', 'in', tuple(group_ids))],
             ['parent_id', 'action'], order='id',
         ).sudo()
 

--- a/odoo/addons/base/models/ir_ui_view.py
+++ b/odoo/addons/base/models/ir_ui_view.py
@@ -171,7 +171,7 @@ class IrUiView(models.Model):
                                     compute='_compute_model_data_id', search='_search_model_data_id')
     xml_id = fields.Char(string="External ID", compute='_compute_xml_id',
                          help="ID of the view defined in xml file")
-    groups_id = fields.Many2many('res.groups', 'ir_ui_view_group_rel', 'view_id', 'group_id',
+    group_ids = fields.Many2many('res.groups', 'ir_ui_view_group_rel', 'view_id', 'group_id',
                                  string='Groups', help="If this field is empty, the view applies to all users. Otherwise, the view applies to the users of those groups only.")
     mode = fields.Selection([('primary', "Base view"), ('extension', "Extension View")],
                             string="View inheritance mode", default='primary', required=True,
@@ -419,10 +419,10 @@ actual arch.
 
         return True
 
-    @api.constrains('type', 'groups_id', 'inherit_id')
+    @api.constrains('type', 'group_ids', 'inherit_id')
     def _check_groups(self):
         for view in self:
-            if (view.groups_id and
+            if (view.group_ids and
                 view.inherit_id and
                 view.mode != 'primary'):
                 raise ValidationError(_("Inherited view cannot have 'Groups' define on the record. Use 'groups' attributes inside the view definition"))
@@ -662,13 +662,13 @@ actual arch.
         """
         if self.inherit_id and self.mode != 'primary':
             return self.inherit_id._check_view_access()
-        if self.groups_id & self.env.user.groups_id:
+        if set(self.group_ids.ids) & set(self.env.user._get_group_ids()):
             return True
-        if self.groups_id:
+        if self.group_ids:
             error = _(
                 "View '%(name)s' accessible only to groups %(groups)s ",
                 name=self.key,
-                groups=", ".join([g.name for g in self.groups_id]
+                groups=", ".join([g.name for g in self.group_ids]
             ))
         else:
             error = _("View '%(name)s' is private", name=self.key)

--- a/odoo/addons/base/models/res_groups.py
+++ b/odoo/addons/base/models/res_groups.py
@@ -208,11 +208,11 @@ class ResGroups(models.Model):  # noqa: F811
             updated_groups.invalidate_recordset(['user_ids'])
             updated_groups.modified(['user_ids'])
             updated_users = self.env['res.users'].browse(updated_user_ids)
-            updated_users.invalidate_recordset(['groups_id'])
-            updated_users.modified(['groups_id'])
+            updated_users.invalidate_recordset(['group_ids'])
+            updated_users.modified(['group_ids'])
             # explicitly check constraints
             updated_groups._validate_fields(['user_ids'])
-            updated_users._validate_fields(['groups_id'])
+            updated_users._validate_fields(['group_ids'])
             self._check_one_user_type()
         if 'implied_ids' in values:
             self.env.registry.clear_cache('groups')
@@ -242,7 +242,7 @@ class ResGroups(models.Model):  # noqa: F811
             users_to_unlink = [
                 user
                 for user in groups.with_context(active_test=False).user_ids
-                if implied_group not in (user.groups_id - implied_group).trans_implied_ids
+                if implied_group not in (user.group_ids - implied_group).trans_implied_ids
             ]
             if users_to_unlink:
                 # do not remove inactive users (e.g. default)

--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -177,7 +177,7 @@ class ResUsers(models.Model):
         return [
             'signature', 'company_id', 'login', 'email', 'name', 'image_1920',
             'image_1024', 'image_512', 'image_256', 'image_128', 'lang', 'tz',
-            'tz_offset', 'groups_id', 'partner_id', 'write_date', 'action_id',
+            'tz_offset', 'group_ids', 'partner_id', 'write_date', 'action_id',
             'avatar_1920', 'avatar_1024', 'avatar_512', 'avatar_256', 'avatar_128',
             'share', 'device_ids', 'api_key_ids', 'phone',
         ]
@@ -195,7 +195,7 @@ class ResUsers(models.Model):
         All the groups of the Template User
         """
         default_user = self.env.ref('base.default_user', raise_if_not_found=False)
-        return default_user.sudo().groups_id if default_user else []
+        return default_user.sudo().group_ids if default_user else []
 
     partner_id = fields.Many2one('res.partner', required=True, ondelete='restrict', auto_join=True, index=True,
         string='Related Partner', help='Partner-related data of the user')
@@ -214,7 +214,6 @@ class ResUsers(models.Model):
     active_partner = fields.Boolean(related='partner_id.active', readonly=True, string="Partner is Active")
     action_id = fields.Many2one('ir.actions.actions', string='Home Action',
         help="If specified, this action will be opened at log on for this user, in addition to the standard menu.")
-    groups_id = fields.Many2many('res.groups', 'res_groups_users_rel', 'uid', 'gid', string='Groups', default=lambda s: s._default_groups())
     log_ids = fields.One2many('res.users.log', 'create_uid', string='User log entries')
     device_ids = fields.One2many('res.device', 'user_id', string='User devices')
     login_date = fields.Datetime(related='log_ids.create_date', string='Latest authentication', readonly=False)
@@ -240,6 +239,9 @@ class ResUsers(models.Model):
     email = fields.Char(related='partner_id.email', inherited=True, readonly=False)
     phone = fields.Char(related='partner_id.phone', inherited=True, readonly=False)
 
+    group_ids = fields.Many2many('res.groups', 'res_groups_users_rel', 'uid', 'gid', string='Groups', default=lambda s: s._default_groups(), help="Groups explicitly assigned to the user")
+    all_group_ids = fields.Many2many('res.groups', related='group_ids', string="Groups and implied groups")
+
     accesses_count = fields.Integer('# Access Rights', help='Number of access rights that apply to the current user',
                                     compute='_compute_accesses_count', compute_sudo=True)
     rules_count = fields.Integer('# Record Rules', help='Number of record rules that apply to the current user',
@@ -388,10 +390,10 @@ class ResUsers(models.Model):
         for user in self.filtered(lambda user: user.name and is_html_empty(user.signature)):
             user.signature = Markup('<p>%s</p>') % user['name']
 
-    @api.depends('groups_id')
+    @api.depends('all_group_ids')
     def _compute_share(self):
         user_group_id = self.env['ir.model.data']._xmlid_to_res_id('base.group_user')
-        internal_users = self.filtered_domain([('groups_id', 'in', [user_group_id])])
+        internal_users = self.filtered_domain([('all_group_ids', 'in', [user_group_id])])
         internal_users.share = False
         (self - internal_users).share = True
 
@@ -404,10 +406,10 @@ class ResUsers(models.Model):
         for user in self:
             user.tz_offset = datetime.datetime.now(pytz.timezone(user.tz or 'GMT')).strftime('%z')
 
-    @api.depends('groups_id')
+    @api.depends('all_group_ids')
     def _compute_accesses_count(self):
         for user in self:
-            groups = user.groups_id
+            groups = user.all_group_ids
             user.accesses_count = len(groups.model_access)
             user.rules_count = len(groups.rule_groups)
             user.groups_count = len(groups)
@@ -464,8 +466,8 @@ class ResUsers(models.Model):
                         _('The action "%s" cannot be set as the home action because it requires a record to be selected beforehand.', action.name)
                     )
 
+    @api.constrains('group_ids')
 
-    @api.constrains('groups_id')
     def _check_one_user_type(self):
         """We check that no users are both portal and users (same with public).
            This could typically happen because of implied groups.
@@ -523,12 +525,12 @@ class ResUsers(models.Model):
     @api.model_create_multi
     def create(self, vals_list):
         for values in vals_list:
-            if 'groups_id' in values:
-                # complete 'groups_id' with implied groups
+            if 'group_ids' in values:
+                # complete 'group_ids' with implied groups
                 user = self.new(values)
-                gs = user.groups_id._origin
+                gs = user.group_ids._origin
                 gs = gs | gs.trans_implied_ids
-                values['groups_id'] = self._fields['groups_id'].convert_to_write(gs, user)
+                values['group_ids'] = self._fields['group_ids'].convert_to_write(gs, user)
 
         users = super().create(vals_list)
         setting_vals = []
@@ -577,10 +579,10 @@ class ResUsers(models.Model):
                 self = self.sudo()
 
         old_groups = []
-        if 'groups_id' in values:
+        if 'group_ids' in values:
             users_before = self.filtered(lambda u: u._is_internal())
             if self._apply_groups_to_existing_employees():
-                # if modify groups_id content, compute the delta of groups to apply
+                # if modify group_ids content, compute the delta of groups to apply
                 # the new ones to other existing users
                 old_groups = self._default_groups()
 
@@ -592,7 +594,7 @@ class ResUsers(models.Model):
             added_groups = self._default_groups() - old_groups
             if added_groups:
                 internal_users = self.env.ref('base.group_user').all_user_ids - self
-                internal_users.write({'groups_id': [Command.link(gid) for gid in added_groups.ids]})
+                internal_users.write({'group_ids': [Command.link(gid) for gid in added_groups.ids]})
 
         if 'company_id' in values:
             for user in self:
@@ -609,21 +611,21 @@ class ResUsers(models.Model):
                 if env.user in self:
                     lazy_property.reset_all(env)
 
-        if 'groups_id' in values:
+        if 'group_ids' in values:
             # Do not use `_is_internal` as it relies on the ormcache which is not yet invalidated
             internal_group_id = self.env['ir.model.data']._xmlid_to_res_id("base.group_user")
-            demoted_users = users_before.filtered(lambda u: internal_group_id not in u.groups_id.ids)
+            demoted_users = users_before.filtered(lambda u: internal_group_id not in u.group_ids.ids)
             if demoted_users:
                 # demoted users are restricted to the assigned groups only
-                vals = {'groups_id': [Command.clear()] + values['groups_id']}
+                vals = {'group_ids': [Command.clear()] + values['group_ids']}
                 super(ResUsers, demoted_users).write(vals)
             # add implied groups for all users (in batches)
             users_batch = defaultdict(self.browse)
             for user in self:
-                users_batch[user.groups_id] += user
+                users_batch[user.group_ids] += user
             for groups, users in users_batch.items():
                 gs = set(concat(g.trans_implied_ids for g in groups))
-                vals = {'groups_id': [Command.link(g.id) for g in gs]}
+                vals = {'group_ids': [Command.link(g.id) for g in gs]}
                 super(ResUsers, users).write(vals)
             # clear caches linked to the users
             if self.ids:
@@ -725,7 +727,7 @@ class ResUsers(models.Model):
     @api.model
     def _get_invalidation_fields(self):
         return {
-            'groups_id', 'active', 'lang', 'tz', 'company_id', 'company_ids',
+            'group_ids', 'active', 'lang', 'tz', 'company_id', 'company_ids',
             *self._get_session_token_fields()
         }
 
@@ -1050,13 +1052,13 @@ class ResUsers(models.Model):
         """
         group_id = self.env['res.groups']._get_group_definitions().get_id(group_ext_id)
         # for new record don't fill the ormcache
-        return group_id in (self._get_group_ids() if self.id else self.groups_id._origin._ids)
+        return group_id in (self._get_group_ids() if self.id else self.all_group_ids._origin._ids)
 
     @tools.ormcache('self.id')
     def _get_group_ids(self):
         """ Return ``self``'s group ids (as a tuple)."""
         self.ensure_one()
-        return self.groups_id._ids
+        return self.all_group_ids._ids
 
     def _action_show(self):
         """If self is a singleton, directly access the form view. If it is a recordset, open a list view"""
@@ -1089,7 +1091,7 @@ class ResUsers(models.Model):
             'res_model': 'res.groups',
             'type': 'ir.actions.act_window',
             'context': {'create': False, 'delete': False},
-            'domain': [('id','in', self.groups_id.ids)],
+            'domain': [('id', 'in', self.all_group_ids.ids)],
             'target': 'current',
         }
 
@@ -1101,7 +1103,7 @@ class ResUsers(models.Model):
             'res_model': 'ir.model.access',
             'type': 'ir.actions.act_window',
             'context': {'create': False, 'delete': False},
-            'domain': [('id', 'in', self.groups_id.model_access.ids)],
+            'domain': [('id', 'in', self.all_group_ids.model_access.ids)],
             'target': 'current',
         }
 
@@ -1113,7 +1115,7 @@ class ResUsers(models.Model):
             'res_model': 'ir.rule',
             'type': 'ir.actions.act_window',
             'context': {'create': False, 'delete': False},
-            'domain': [('id', 'in', self.groups_id.rule_groups.ids)],
+            'domain': [('id', 'in', self.all_group_ids.rule_groups.ids)],
             'target': 'current',
         }
 
@@ -1303,10 +1305,10 @@ class UsersMultiCompany(models.Model):
             'base.group_multi_company', raise_if_not_found=False)
         if group_multi_company_id:
             for user in users:
-                if len(user.company_ids) <= 1 and group_multi_company_id in user.groups_id.ids:
-                    user.write({'groups_id': [Command.unlink(group_multi_company_id)]})
-                elif len(user.company_ids) > 1 and group_multi_company_id not in user.groups_id.ids:
-                    user.write({'groups_id': [Command.link(group_multi_company_id)]})
+                if len(user.company_ids) <= 1 and group_multi_company_id in user.group_ids.ids:
+                    user.write({'group_ids': [Command.unlink(group_multi_company_id)]})
+                elif len(user.company_ids) > 1 and group_multi_company_id not in user.group_ids.ids:
+                    user.write({'group_ids': [Command.link(group_multi_company_id)]})
         return users
 
     def write(self, values):
@@ -1317,10 +1319,10 @@ class UsersMultiCompany(models.Model):
             'base.group_multi_company', raise_if_not_found=False)
         if group_multi_company_id:
             for user in self:
-                if len(user.company_ids) <= 1 and group_multi_company_id in user.groups_id.ids:
-                    user.write({'groups_id': [Command.unlink(group_multi_company_id)]})
-                elif len(user.company_ids) > 1 and group_multi_company_id not in user.groups_id.ids:
-                    user.write({'groups_id': [Command.link(group_multi_company_id)]})
+                if len(user.company_ids) <= 1 and group_multi_company_id in user.group_ids.ids:
+                    user.write({'group_ids': [Command.unlink(group_multi_company_id)]})
+                elif len(user.company_ids) > 1 and group_multi_company_id not in user.group_ids.ids:
+                    user.write({'group_ids': [Command.link(group_multi_company_id)]})
         return res
 
     @api.model
@@ -1331,10 +1333,10 @@ class UsersMultiCompany(models.Model):
         group_multi_company_id = self.env['ir.model.data']._xmlid_to_res_id(
             'base.group_multi_company', raise_if_not_found=False)
         if group_multi_company_id:
-            if len(user.company_ids) <= 1 and group_multi_company_id in user.groups_id.ids:
-                user.update({'groups_id': [Command.unlink(group_multi_company_id)]})
-            elif len(user.company_ids) > 1 and group_multi_company_id not in user.groups_id.ids:
-                user.update({'groups_id': [Command.link(group_multi_company_id)]})
+            if len(user.company_ids) <= 1 and group_multi_company_id in user.group_ids.ids:
+                user.update({'group_ids': [Command.unlink(group_multi_company_id)]})
+            elif len(user.company_ids) > 1 and group_multi_company_id not in user.group_ids.ids:
+                user.update({'group_ids': [Command.link(group_multi_company_id)]})
         return user
 
 
@@ -1537,7 +1539,7 @@ class ResUsersApikeys(models.Model):
             return
         if not date:
             raise ValidationError(_("The API key must have an expiration date"))
-        max_duration = max(group.api_key_duration for group in self.env.user.groups_id) or 1.0
+        max_duration = max(group.api_key_duration for group in self.env.user.all_group_ids) or 1.0
         if date > datetime.datetime.now() + datetime.timedelta(days=max_duration):
             raise ValidationError(_("You cannot exceed %(duration)s days.", duration=max_duration))
 
@@ -1598,7 +1600,7 @@ class ResUsersApikeysDescription(models.TransientModel):
         custom_duration = ('-1', 'Custom Date')  # Will force the user to enter a date manually
         if self.env.is_system():
             return durations + [persistent_duration, custom_duration]
-        max_duration = max(group.api_key_duration for group in self.env.user.groups_id) or 1.0
+        max_duration = max(group.api_key_duration for group in self.env.user.all_group_ids) or 1.0
         return list(filter(
             lambda duration: int(duration[0]) <= max_duration, durations
         )) + [custom_duration]

--- a/odoo/addons/base/models/res_users_view.py
+++ b/odoo/addons/base/models/res_users_view.py
@@ -62,15 +62,15 @@ def parse_m2m(commands):
 #   section "Others".
 #
 # The user form view is modified by an inherited view (base.user_groups_view);
-# the inherited view replaces the field 'groups_id' by a set of reified group
+# the inherited view replaces the field 'group_ids' by a set of reified group
 # fields (boolean or selection fields).  The arch of that view is regenerated
 # each time groups are changed.
 #
 # Naming conventions for reified groups fields:
 # - boolean field 'in_group_ID' is True iff
-#       ID is in 'groups_id'
+#       ID is in 'group_ids'
 # - selection field 'sel_groups_ID1_..._IDk' is ID iff
-#       ID is in 'groups_id' and ID is maximal in the set {ID1, ..., IDk}
+#       ID is in 'group_ids' and ID is maximal in the set {ID1, ..., IDk}
 #
 
 
@@ -126,7 +126,7 @@ class ResGroups(models.Model):
 
         if self._context.get('install_filename') or self._context.get(MODULE_UNINSTALL_FLAG):
             # use a dummy view during install/upgrade/uninstall
-            xml = E.field(name="groups_id", position="after")
+            xml = E.field(name="group_ids", position="after")
 
         else:
             group_no_one = view.env.ref('base.group_no_one')
@@ -233,7 +233,7 @@ class ResGroups(models.Model):
                 E.group(*(xml1), groups="base.group_no_one"),
                 E.group(*(xml2), invisible=user_type_invisible),
                 E.group(*(xml3), invisible=user_type_invisible),
-                E.group(*(xml4), invisible=user_type_invisible, groups="base.group_no_one"), name="groups_id", position="replace")
+                E.group(*(xml4), invisible=user_type_invisible, groups="base.group_no_one"), name="group_ids", position="replace")
             xml.addprevious(etree.Comment("GENERATED AUTOMATICALLY BY GROUPS"))
 
         # serialize and update the view
@@ -301,7 +301,7 @@ class UsersView(models.Model):
 
     user_group_warning = fields.Text(string="User Group Warning", compute="_compute_user_group_warning")
 
-    @api.depends('groups_id', 'share')
+    @api.depends('group_ids', 'share')
     @api.depends_context('show_user_group_warning')
     def _compute_user_group_warning(self):
         self.user_group_warning = False
@@ -339,7 +339,7 @@ class UsersView(models.Model):
         :return: string to display in a warning
         """
         # Current groups of the user
-        current_groups = user.groups_id.filtered('trans_implied_ids')
+        current_groups = user.group_ids.filtered('trans_implied_ids')
         current_groups_by_category = defaultdict(lambda: self.env['res.groups'])
         for group in current_groups:
             current_groups_by_category[group.category_id] |= group.trans_implied_ids.filtered(lambda grp: grp.category_id == group.category_id)
@@ -349,7 +349,7 @@ class UsersView(models.Model):
         categories_to_ignore = self.env.ref('base.module_category_hidden') + self.env.ref('base.module_category_usability')
         for group in current_groups:
             # Get the updated group from current groups
-            missing_implied_groups = group.implied_ids - user.groups_id
+            missing_implied_groups = group.implied_ids - user.group_ids
             # Get the missing group needed in updated group's category (For example, someone changes
             # Sales: Admin to Sales: User, but Field Service is already set to Admin, so here in the
             # 'Sales' category, we will at the minimum need Admin group)
@@ -390,13 +390,13 @@ class UsersView(models.Model):
             else:
                 values1[key] = val
 
-        if 'groups_id' not in values and (add or rem):
+        if 'group_ids' not in values and (add or rem):
             added = self.env['res.groups'].sudo().browse(add)
             added |= added.mapped('trans_implied_ids')
             added_ids = added._ids
             # remove group ids in `rem` and add group ids in `add`
             # do not remove groups that are added by implied
-            values1['groups_id'] = list(itertools.chain(
+            values1['group_ids'] = list(itertools.chain(
                 zip(repeat(3), [gid for gid in rem if gid not in added_ids]),
                 zip(repeat(4), add)
             ))
@@ -406,7 +406,7 @@ class UsersView(models.Model):
     @api.model
     def default_get(self, fields):
         group_fields, fields = partition(is_reified_group, fields)
-        fields1 = (fields + ['groups_id']) if group_fields else fields
+        fields1 = (fields + ['group_ids']) if group_fields else fields
         values = super().default_get(fields1)
         self._add_reified_groups(group_fields, values)
         return values
@@ -422,25 +422,25 @@ class UsersView(models.Model):
     def onchange(self, values, field_names, fields_spec):
         reified_fnames = [fname for fname in fields_spec if is_reified_group(fname)]
         if reified_fnames:
-            values = {key: val for key, val in values.items() if key != 'groups_id'}
+            values = {key: val for key, val in values.items() if key != 'group_ids'}
             values = self._remove_reified_groups(values)
 
             if any(is_reified_group(fname) for fname in field_names):
                 field_names = [fname for fname in field_names if not is_reified_group(fname)]
-                field_names.append('groups_id')
+                field_names.append('group_ids')
 
             fields_spec = {
                 field_name: field_spec
                 for field_name, field_spec in fields_spec.items()
                 if not is_reified_group(field_name)
             }
-            fields_spec['groups_id'] = {}
+            fields_spec['group_ids'] = {}
 
         result = super().onchange(values, field_names, fields_spec)
 
-        if reified_fnames and 'groups_id' in result.get('value', {}):
+        if reified_fnames and 'group_ids' in result.get('value', {}):
             self._add_reified_groups(reified_fnames, result['value'])
-            result['value'].pop('groups_id', None)
+            result['value'].pop('group_ids', None)
 
         return result
 
@@ -449,11 +449,11 @@ class UsersView(models.Model):
         fields1 = fields or list(self.fields_get())
         group_fields, other_fields = partition(is_reified_group, fields1)
 
-        # read regular fields (other_fields); add 'groups_id' if necessary
+        # read regular fields (other_fields); add 'group_ids' if necessary
         drop_groups_id = False
         if group_fields and fields:
-            if 'groups_id' not in other_fields:
-                other_fields.append('groups_id')
+            if 'group_ids' not in other_fields:
+                other_fields.append('group_ids')
                 drop_groups_id = True
         else:
             other_fields = fields
@@ -465,12 +465,12 @@ class UsersView(models.Model):
             for values in res:
                 self._add_reified_groups(group_fields, values)
                 if drop_groups_id:
-                    values.pop('groups_id', None)
+                    values.pop('group_ids', None)
         return res
 
     def _add_reified_groups(self, fields, values):
         """ add the given reified group fields into `values` """
-        gids = set(parse_m2m(values.get('groups_id') or []))
+        gids = set(parse_m2m(values.get('group_ids') or []))
         for f in fields:
             if is_boolean_group(f):
                 values[f] = get_boolean_group(f) in gids
