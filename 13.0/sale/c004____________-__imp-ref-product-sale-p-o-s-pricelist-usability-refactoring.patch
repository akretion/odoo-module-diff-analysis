PR: https://github.com/odoo/odoo/pull/

From: 7d8df4bec192e5a2ff3341dcf43d59e06a57f9a9
From: Victor Feyens
Date: 2019-08-14 14:03:23

Breaking data model changes score: 3, change matches:
-    multi_sales_price = fields.Boolean("Multiple Sales Prices per Product")
-    multi_sales_price_method = fields.Selection([
-    sale_pricelist_setting = fields.Selection([

Total Changes: 54

[IMP][REF] product,sale,p_o_s: pricelist usability refactoring

Manage pricelists through a common configuration between sale and point_of_sale
Remove lots of technical fields

Improved Pricelist Flow
-----------------------

if pricelists enabled (product.group_product_pricelist), two modes are proposed:
* basic(default): pricelists enabled, but only with basic rules
* advanced: pricelists enabled, but with advanced rules (product.group_sale_pricelist)

When pricelists are enabled, we can always access them through the menu OR access their product-targeted rules from the products/templates views.

================================= pseudo patch: =================================

--- a/addons/sale/models/product_template.py
+++ b/addons/sale/models/product_template.py
@@ -109,8 +109,7 @@ class ProductTemplate(models.Model):
     def get_import_templates(self):
         res = super(ProductTemplate, self).get_import_templates()
         if self.env.context.get('sale_multi_pricelist_product_template'):
-            sale_pricelist_setting = self.env['ir.config_parameter'].sudo().get_param('sale.sale_pricelist_setting')
-            if sale_pricelist_setting == 'percentage':
+            if self.user_has_groups('product.group_sale_pricelist'):
                 return [{
                     'label': _('Import Template for Products'),
                     'template': '/product/static/xls/product_template.xls'

--- a/addons/sale/models/res_config_settings.py
+++ b/addons/sale/models/res_config_settings.py
@@ -15,16 +15,6 @@ class ResConfigSettings(models.TransientModel):
     portal_confirmation_sign = fields.Boolean(related='company_id.portal_confirmation_sign', string='Online Signature', readonly=False)
     portal_confirmation_pay = fields.Boolean(related='company_id.portal_confirmation_pay', string='Online Payment', readonly=False)
     group_sale_delivery_address = fields.Boolean("Customer Addresses", implied_group='sale.group_delivery_invoice_address')
-    multi_sales_price = fields.Boolean("Multiple Sales Prices per Product")
-    multi_sales_price_method = fields.Selection([
-        ('percentage', 'Multiple prices per product (e.g. customer segments, currencies)'),
-        ('formula', 'Prices computed from formulas (discounts, margins, roundings)')
-        ], default='percentage', string="Pricelists Method")
-    sale_pricelist_setting = fields.Selection([
-        ('fixed', 'A single sales price per product'),
-        ('percentage', 'Multiple prices per product (e.g. customer segments, currencies)'),
-        ('formula', 'Price computed from formulas (discounts, margins, roundings)')
-        ], string="Pricelists", config_parameter='sale.sale_pricelist_setting')
     group_proforma_sales = fields.Boolean(string="Pro-Forma Invoice", implied_group='sale.group_proforma_sales',
         help="Allows you to send pro-forma invoice.")
     group_sale_order_dates = fields.Boolean("Delivery Date", implied_group='sale.group_sale_order_dates')
@@ -80,35 +70,6 @@ class ResConfigSettings(models.TransientModel):
         if self.default_invoice_policy != 'order':
             self.env['ir.config_parameter'].set_param('sale.automatic_invoice', False)
 
-    @api.onchange('multi_sales_price', 'multi_sales_price_method')
-    def _onchange_sale_price(self):
-        if self.multi_sales_price and not self.multi_sales_price_method:
-            self.update({
-                'multi_sales_price_method': 'percentage',
-            })
-        self.sale_pricelist_setting = self.multi_sales_price and self.multi_sales_price_method or 'fixed'
-
-    @api.onchange('sale_pricelist_setting')
-    def _onchange_sale_pricelist_setting(self):
-        if self.sale_pricelist_setting == 'percentage':
-            self.update({
-                'group_product_pricelist': True,
-                'group_sale_pricelist': True,
-                'group_pricelist_item': False,
-            })
-        elif self.sale_pricelist_setting == 'formula':
-            self.update({
-                'group_product_pricelist': False,
-                'group_sale_pricelist': True,
-                'group_pricelist_item': True,
-            })
-        else:
-            self.update({
-                'group_product_pricelist': False,
-                'group_sale_pricelist': False,
-                'group_pricelist_item': False,
-            })
-
     @api.onchange('use_quotation_validity_days')
     def _onchange_use_quotation_validity_days(self):
         if self.quotation_validity_days <= 0:
@@ -121,15 +82,3 @@ class ResConfigSettings(models.TransientModel):
             return {
                 'warning': {'title': "Warning", 'message': "Quotation Validity is required and must be greater than 0."},
             }
-
-    @api.model
-    def get_values(self):
-        res = super(ResConfigSettings, self).get_values()
-        ICPSudo = self.env['ir.config_parameter'].sudo()
-        sale_pricelist_setting = ICPSudo.get_param('sale.sale_pricelist_setting')
-        res.update(
-            multi_sales_price=sale_pricelist_setting in ['percentage', 'formula'],
-            multi_sales_price_method=sale_pricelist_setting in ['percentage', 'formula'] and sale_pricelist_setting or False,
-            sale_pricelist_setting=sale_pricelist_setting,
-        )
-        return res
