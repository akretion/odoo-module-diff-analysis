PR: https://github.com/odoo/odoo/pull/31910

From: 967040e62e9191c2c011e442f99279a6da23c65f
From: Rishabh Jadia
Date: 2019-07-03 19:12:05

Structural Changes: 4
Total Changes: 39

[IMP] account: zip fields are now char

In fiscal position, fields from 'ZIP range' were not supporting the ZIP range with 'char' field and only support 'integer'. It was a problem in some countries like Canada.

task 1948120

closes odoo/odoo#31910

Signed-off-by: Quentin De Paoli (qdp) <qdp@openerp.com>

================================= pseudo patch: =================================

--- a/addons/account/models/partner.py
+++ b/addons/account/models/partner.py
@@ -29,8 +29,8 @@ class AccountFiscalPosition(models.Model):
     country_group_id = fields.Many2one('res.country.group', string='Country Group',
         help="Apply only if delivery or invoicing country match the group.")
     state_ids = fields.Many2many('res.country.state', string='Federal States')
-    zip_from = fields.Integer(string='Zip Range From', default=0)
-    zip_to = fields.Integer(string='Zip Range To', default=0)
+    zip_from = fields.Char(string='Zip Range From')
+    zip_to = fields.Char(string='Zip Range To')
     # To be used in hiding the 'Federal States' field('attrs' in view side) when selected 'Country' has 0 states.
     states_count = fields.Integer(compute='_compute_states_count')
 
@@ -41,7 +41,7 @@ class AccountFiscalPosition(models.Model):
     @api.one
     @api.constrains('zip_from', 'zip_to')
     def _check_zip(self):
-        if self.zip_from > self.zip_to:
+        if self.zip_from and self.zip_to and self.zip_from > self.zip_to:
             raise ValidationError(_('Invalid "Zip Range", please configure it properly.'))
         return True
 
@@ -91,6 +91,32 @@ class AccountFiscalPosition(models.Model):
             self.zip_from = self.zip_to = self.country_id = False
             self.state_ids = [(5,)]
 
+    @api.model
+    def _convert_zip_values(self, zip_from='', zip_to=''):
+        max_length = max(len(zip_from), len(zip_to))
+        if zip_from.isdigit():
+            zip_from = zip_from.rjust(max_length, '0')
+        if zip_to.isdigit():
+            zip_to = zip_to.rjust(max_length, '0')
+        return zip_from, zip_to
+
+    @api.model
+    def create(self, vals):
+        zip_from = vals.get('zip_from')
+        zip_to = vals.get('zip_to')
+        if zip_from and zip_to:
+            vals['zip_from'], vals['zip_to'] = self._convert_zip_values(zip_from, zip_to)
+        return super(AccountFiscalPosition, self).create(vals)
+
+    @api.multi
+    def write(self, vals):
+        zip_from = vals.get('zip_from')
+        zip_to = vals.get('zip_to')
+        if zip_from or zip_to:
+            for rec in self:
+                vals['zip_from'], vals['zip_to'] = self._convert_zip_values(zip_from or rec.zip_from, zip_to or rec.zip_to)
+        return super(AccountFiscalPosition, self).write(vals)
+
     @api.model
     def _get_fpos_by_region(self, country_id=False, state_id=False, zipcode=False, vat_required=False):
         if not country_id:
@@ -99,14 +125,11 @@ class AccountFiscalPosition(models.Model):
         if self.env.context.get('force_company'):
             base_domain.append(('company_id', '=', self.env.context.get('force_company')))
         null_state_dom = state_domain = [('state_ids', '=', False)]
-        null_zip_dom = zip_domain = [('zip_from', '=', 0), ('zip_to', '=', 0)]
+        null_zip_dom = zip_domain = [('zip_from', '=', False), ('zip_to', '=', False)]
         null_country_dom = [('country_id', '=', False), ('country_group_id', '=', False)]
 
-        if zipcode and zipcode.isdigit():
-            zipcode = int(zipcode)
+        if zipcode:
             zip_domain = [('zip_from', '<=', zipcode), ('zip_to', '>=', zipcode)]
-        else:
-            zipcode = 0
 
         if state_id:
             state_domain = [('state_ids', '=', state_id)]
