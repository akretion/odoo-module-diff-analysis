PR: https://github.com/odoo/odoo/pull/75862

From: fa034b2a646d9bc761246db62f9e96d565671ce8
From: wan
Date: 2021-09-07 15:50:00

Breaking data model changes score: 2, change matches:
-    is_used_on_products = fields.Boolean('Used on Products', compute='_compute_is_used_on_products')
-    lst_price = fields.Float(

Total Changes: 102

[IMP] *: product back2basics 15.0

Rework the whole view, generally.

task-2605931

Part-of: odoo/odoo#75862

================================= pseudo patch: =================================

--- a/addons/product/models/product.py
+++ b/addons/product/models/product.py
@@ -90,7 +90,7 @@ class ProductProduct(models.Model):
         help="This is the sum of the extra price of all attributes")
     # lst_price: catalog value + extra, context dependent (uom)
     lst_price = fields.Float(
-        'Public Price', compute='_compute_product_lst_price',
+        'SalesÂ Price', compute='_compute_product_lst_price',
         digits='Product Price', inverse='_set_product_lst_price',
         help="The sale price is managed from the product template. Click on the 'Configure Variants' button to set the extra attribute prices.")
 
@@ -274,6 +274,7 @@ class ProductProduct(models.Model):
             value -= product.price_extra
             product.write({'list_price': value})
 
+    @api.onchange('lst_price')
     def _set_product_lst_price(self):
         for product in self:
             if self._context.get('uom'):
@@ -356,12 +357,15 @@ class ProductProduct(models.Model):
 
     @api.model_create_multi
     def create(self, vals_list):
+        for vals in vals_list:
+            self.product_tmpl_id._sanitize_vals(vals)
         products = super(ProductProduct, self.with_context(create_product_product=True)).create(vals_list)
         # `_get_variant_id_for_combination` depends on existing variants
         self.clear_caches()
         return products
 
     def write(self, values):
+        self.product_tmpl_id._sanitize_vals(values)
         res = super(ProductProduct, self).write(values)
         if 'product_template_attribute_value_ids' in values:
             # `_get_variant_id_for_combination` depends on `product_template_attribute_value_ids`

--- a/addons/product/models/product_attribute.py
+++ b/addons/product/models/product_attribute.py
@@ -30,7 +30,7 @@ class ProductAttribute(models.Model):
         - Never: Variants are never created for the attribute.
         Note: the variants creation mode cannot be changed once the attribute is used on at least one product.""",
         required=True)
-    is_used_on_products = fields.Boolean('Used on Products', compute='_compute_is_used_on_products')
+    number_related_products = fields.Integer(compute='_compute_number_related_products')
     product_tmpl_ids = fields.Many2many('product.template', string="Related Products", compute='_compute_products', store=True)
     display_type = fields.Selection([
         ('radio', 'Radio'),
@@ -39,9 +39,9 @@ class ProductAttribute(models.Model):
         ('color', 'Color')], default='radio', required=True, help="The display type used in the Product Configurator.")
 
     @api.depends('product_tmpl_ids')
-    def _compute_is_used_on_products(self):
+    def _compute_number_related_products(self):
         for pa in self:
-            pa.is_used_on_products = bool(pa.product_tmpl_ids)
+            pa.number_related_products = len(pa.product_tmpl_ids)
 
     @api.depends('attribute_line_ids.active', 'attribute_line_ids.product_tmpl_id')
     def _compute_products(self):
@@ -61,7 +61,7 @@ class ProductAttribute(models.Model):
         the user knowing about it."""
         if 'create_variant' in vals:
             for pa in self:
-                if vals['create_variant'] != pa.create_variant and pa.is_used_on_products:
+                if vals['create_variant'] != pa.create_variant and pa.number_related_products:
                     raise UserError(
                         _("You cannot change the Variants Creation Mode of the attribute %s because it is used on the following products:\n%s") %
                         (pa.display_name, ", ".join(pa.product_tmpl_ids.mapped('display_name')))
@@ -78,12 +78,21 @@ class ProductAttribute(models.Model):
     @api.ondelete(at_uninstall=False)
     def _unlink_except_used_on_product(self):
         for pa in self:
-            if pa.is_used_on_products:
+            if pa.number_related_products:
                 raise UserError(
                     _("You cannot delete the attribute %s because it is used on the following products:\n%s") %
                     (pa.display_name, ", ".join(pa.product_tmpl_ids.mapped('display_name')))
                 )
 
+    def action_open_related_products(self):
+        return {
+            'type': 'ir.actions.act_window',
+            'name': _("Related Products"),
+            'res_model': 'product.template',
+            'view_mode': 'tree,form',
+            'domain': [('id', 'in', self.product_tmpl_ids.ids)],
+        }
+
 
 class ProductAttributeValue(models.Model):
     _name = "product.attribute.value"
@@ -390,6 +399,22 @@ class ProductTemplateAttributeLine(models.Model):
     def _without_no_variant_attributes(self):
         return self.filtered(lambda ptal: ptal.attribute_id.create_variant != 'no_variant')
 
+    def action_open_attribute_values(self):
+        return {
+            'type': 'ir.actions.act_window',
+            'name': _("Product Variant Values"),
+            'res_model': 'product.template.attribute.value',
+            'view_mode': 'tree,form',
+            'domain': [('id', 'in', self.product_template_value_ids.ids)],
+            'views': [
+                (self.env.ref('product.product_template_attribute_value_view_tree').id, 'list'),
+                (self.env.ref('product.product_template_attribute_value_view_form').id, 'form'),
+            ],
+            'context': {
+                'search_default_active': 1,
+            },
+        }
+
 
 class ProductTemplateAttributeValue(models.Model):
     """Materialized relationship between attribute values

--- a/addons/product/models/product_template.py
+++ b/addons/product/models/product_template.py
@@ -44,12 +44,22 @@ class ProductTemplate(models.Model):
         'Sales Description', translate=True,
         help="A description of the Product that you want to communicate to your customers. "
              "This description will be copied to every Sales Order, Delivery Order and Customer Invoice/Credit Note")
-    type = fields.Selection([
+    detailed_type = fields.Selection([
         ('consu', 'Consumable'),
         ('service', 'Service')], string='Product Type', default='consu', required=True,
         help='A storable product is a product for which you manage stock. The Inventory app has to be installed.\n'
              'A consumable product is a product for which stock is not managed.\n'
              'A service is a non-material product you provide.')
+    type = fields.Selection(
+        selection=[
+            ('consu', 'Consumable'),
+            ('service', 'Service')
+        ],
+        default='consu',
+        compute='_compute_type',
+        store=True,
+        readonly=False,
+    )
     categ_id = fields.Many2one(
         'product.category', 'Product Category',
         change_default=True, default=_get_default_category_id, group_expand='_read_group_categ_id',
@@ -69,11 +79,8 @@ class ProductTemplate(models.Model):
     list_price = fields.Float(
         'Sales Price', default=1.0,
         digits='Product Price',
-        help="Price at which the product is sold to customers.")
-    # lst_price: catalog price for template, but including extra for variants
-    lst_price = fields.Float(
-        'Public Price', related='list_price', readonly=False,
-        digits='Product Price')
+        help="Price at which the product is sold to customers.",
+    )
     standard_price = fields.Float(
         'Cost', compute='_compute_standard_price',
         inverse='_set_standard_price', search='_search_standard_price',
@@ -102,7 +109,7 @@ class ProductTemplate(models.Model):
         help="Default unit of measure used for all stock operations.")
     uom_name = fields.Char(string='Unit of Measure Name', related='uom_id.name', readonly=True)
     uom_po_id = fields.Many2one(
-        'uom.uom', 'Purchase Unit of Measure',
+        'uom.uom', 'Purchase UoM',
         default=_get_default_uom_id, required=True,
         help="Default unit of measure used for purchase orders. It must be in the same category as the default unit of measure.")
     company_id = fields.Many2one(
@@ -140,6 +147,8 @@ class ProductTemplate(models.Model):
     can_image_1024_be_zoomed = fields.Boolean("Can Image 1024 be zoomed", compute='_compute_can_image_1024_be_zoomed', store=True)
     has_configurable_attributes = fields.Boolean("Is a configurable product", compute='_compute_has_configurable_attributes', store=True)
 
+    product_tooltip = fields.Char(compute='_compute_product_tooltip')
+
     priority = fields.Selection([
         ('0', 'Normal'),
         ('1', 'Favorite'),
@@ -388,6 +397,33 @@ class ProductTemplate(models.Model):
             if len(p.product_variant_ids) == 1:
                 p.product_variant_ids.packaging_ids = p.packaging_ids
 
+    @api.depends('type')
+    def _compute_product_tooltip(self):
+        for record in self:
+            if record.type == 'consu':
+                record.product_tooltip = _(
+                    "Consumables are physical products for which you don't manage the inventory "
+                    "level: they are always available."
+                )
+            else:
+                record.product_tooltip = ""
+
+    def _detailed_type_mapping(self):
+        return {}
+
+    @api.depends('detailed_type')
+    def _compute_type(self):
+        type_mapping = self._detailed_type_mapping()
+        for record in self:
+            record.type = type_mapping.get(record.detailed_type, record.detailed_type)
+
+    # @api.constrains('type', 'detailed_type')
+    # def _constrains_detailed_type(self):
+    #     type_mapping = self._detailed_type_mapping()
+    #     for record in self:
+    #         if record.type != type_mapping.get(record.detailed_type, record.detailed_type):
+    #             raise ValidationError(_("The Type of this product doesn't match the Detailed Type"))
+
     @api.constrains('uom_id', 'uom_po_id')
     def _check_uom(self):
         if any(template.uom_id and template.uom_po_id and template.uom_id.category_id != template.uom_po_id.category_id for template in self):
@@ -408,9 +444,19 @@ class ProductTemplate(models.Model):
         # Do nothing but needed for inheritance
         return {}
 
+    def _sanitize_vals(self, vals):
+        if 'type' in vals and 'detailed_type' not in vals:
+            if vals['type'] not in self.mapped('type'):
+                vals['detailed_type'] = vals['type']
+        if 'detailed_type' in vals and 'type' not in vals:
+            type_mapping = self._detailed_type_mapping()
+            vals['type'] = type_mapping.get(vals['detailed_type'], vals['detailed_type'])
+
     @api.model_create_multi
     def create(self, vals_list):
         ''' Store the initial standard price in order to be able to retrieve the cost of a product template for a given date'''
+        for vals in vals_list:
+            self._sanitize_vals(vals)
         templates = super(ProductTemplate, self).create(vals_list)
         if "create_product_product" not in self._context:
             templates._create_variant_ids()
@@ -437,6 +483,7 @@ class ProductTemplate(models.Model):
         return templates
 
     def write(self, vals):
+        self._sanitize_vals(vals)
         if 'uom_id' in vals or 'uom_po_id' in vals:
             uom_id = self.env['uom.uom'].browse(vals.get('uom_id')) or self.uom_id
             uom_po_id = self.env['uom.uom'].browse(vals.get('uom_po_id')) or self.uom_po_id
