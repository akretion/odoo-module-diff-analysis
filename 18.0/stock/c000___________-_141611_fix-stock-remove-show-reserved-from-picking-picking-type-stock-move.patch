PR: https://github.com/odoo/odoo/pull/141611

From: 54a795bf11d1ef5d791e587b0c9e4d260b97a79d
From: snd
Date: 2023-11-14 08:51:42

Breaking data model changes scores: del:3 + add:0, change matches:
-    show_reserved = fields.Boolean(compute='_compute_show_reserved')
-    show_reserved = fields.Boolean(
-    show_reserved = fields.Boolean(related='picking_type_id.show_reserved')

Total Changes: 29

[FIX] stock: remove show_reserved from picking, picking.type, stock.move

The field has no purpose anymore, so we're removing it.

closes odoo/odoo#141611

Related: odoo/enterprise#50463
Related: odoo/upgrade#5360
Signed-off-by: William Henrotin (whe) <whe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/product_strategy.py
+++ b/addons/stock/models/product_strategy.py
@@ -79,7 +79,6 @@ class StockPutawayRule(models.Model):
     @api.model_create_multi
     def create(self, vals_list):
         rules = super().create(vals_list)
-        rules._enable_show_reserved()
         return rules
 
     def write(self, vals):
@@ -87,16 +86,8 @@ class StockPutawayRule(models.Model):
             for rule in self:
                 if rule.company_id.id != vals['company_id']:
                     raise UserError(_("Changing the company of this record is forbidden at this point, you should rather archive it and create a new one."))
-        self._enable_show_reserved()
         return super(StockPutawayRule, self).write(vals)
 
-    def _enable_show_reserved(self):
-        out_locations = self.location_out_id
-        if out_locations:
-            self.env['stock.picking.type'].with_context(active_test=False)\
-                .search([('default_location_dest_id', 'in', out_locations.ids)])\
-                .write({'show_reserved': True})
-
     def _get_putaway_location(self, product, quantity=0, package=None, packaging=None, qty_by_location=None):
         # find package type on package or packaging
         package_type = self.env['stock.package.type']

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -180,7 +180,6 @@ class StockMove(models.Model):
     product_packaging_qty = fields.Float(string="Reserved Packaging Quantity", compute='_compute_product_packaging_qty')
     product_packaging_quantity = fields.Float(
         string="Done Packaging Quantity", compute='_compute_product_packaging_quantity')
-    show_reserved = fields.Boolean(compute='_compute_show_reserved')
     show_quant = fields.Boolean("Show Quant", compute="_compute_show_info")
     show_lots_m2o = fields.Boolean("Show lot_id", compute="_compute_show_info")
     show_lots_text = fields.Boolean("Show lot_name", compute="_compute_show_info")
@@ -309,11 +308,6 @@ class StockMove(models.Model):
             else:
                 move.delay_alert_date = False
 
-    @api.depends('picking_type_id', 'origin_returned_move_id')
-    def _compute_show_reserved(self):
-        for move in self:
-            move.show_reserved = move.picking_type_id.show_reserved or move.origin_returned_move_id
-
     def _quantity_sml(self):
         self.ensure_one()
         quantity = 0

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -70,12 +70,6 @@ class PickingType(models.Model):
     show_operations = fields.Boolean(
         'Show Detailed Operations', default=_default_show_operations,
         help="If this checkbox is ticked, the pickings lines will represent detailed stock operations. If not, the picking lines will represent an aggregate of detailed stock operations.")
-    show_reserved = fields.Boolean(
-        'Pre-fill Detailed Operations', default=True,
-        compute='_compute_show_reserved', store=True,
-        help="If this checkbox is ticked, Odoo will automatically pre-fill the detailed "
-        "operations with the corresponding products, locations and lot/serial numbers. "
-        "For moves that are returns, the detailed operations will always be prefilled, regardless of this option.")
     reservation_method = fields.Selection(
         [('at_confirm', 'At Confirmation'), ('manual', 'Manually'), ('by_date', 'Before scheduled date')],
         'Reservation Method', required=True, default='at_confirm',
@@ -305,12 +299,6 @@ class PickingType(models.Model):
             else:
                 picking_type.warehouse_id = False
 
-    @api.depends('show_operations', 'code')
-    def _compute_show_reserved(self):
-        for picking_type in self:
-            if picking_type.show_operations and picking_type.code != 'incoming':
-                picking_type.show_reserved = True
-
     @api.constrains('default_location_dest_id')
     def _check_default_location(self):
         for record in self:
@@ -505,7 +493,6 @@ class Picking(models.Model):
     lot_id = fields.Many2one('stock.lot', 'Lot/Serial Number', related='move_line_ids.lot_id', readonly=True)
 
     show_operations = fields.Boolean(compute='_compute_show_operations')
-    show_reserved = fields.Boolean(related='picking_type_id.show_reserved')
     show_lots_text = fields.Boolean(compute='_compute_show_lots_text')
     has_tracking = fields.Boolean(compute='_compute_has_tracking')
     package_level_ids = fields.One2many('stock.package_level', 'picking_id')

--- a/addons/stock/models/stock_warehouse.py
+++ b/addons/stock/models/stock_warehouse.py
@@ -967,7 +967,6 @@ class Warehouse(models.Model):
                 'use_existing_lots': False,
                 'default_location_src_id': False,
                 'sequence': max_sequence + 1,
-                'show_reserved': False,
                 'show_operations': False,
                 'sequence_code': 'IN',
                 'company_id': self.company_id.id,
