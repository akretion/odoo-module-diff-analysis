PR: https://github.com/odoo/odoo/pull/41218

From: 2ac06038dd08be863c27cc7d1d7aec9a70ec2105
From: Kevin Baptiste
Date: 2020-01-31 15:35:54

Structural Changes: 3
Total Changes: 38

[IMP] project, industry_fsm: Improve subtasks and configuration UX

Purpose
=======

In Project, the configuration has to be done twice: in the settings of the
app and on each project.

During the onboarding, the user won't understand that a feature has to be
enabled at both places and will think that the system just doesn't work.

If the user enabled a feature, he most likely intends on using it for most
of his projects. Therefore, having to do a double configuration for each
new project is annoying.

By the way, sub-tasks is the only global feature (it can't be enabled or
disabled by project), so we are breaking it down by project to remain
consistent with the rest.

Specification
=============

1/ Enable subtasks per project
Before this commit, sub-tasks were a global feature (i.e. once enabled
they were enabled for all projects). This commit gives the ability to
enable/disable sub-tasks per project.

2/ Make project_id on planning required

3/ Change default rating status on new projects

4/ Default value for allow_subtasks

5/ Enable timesheets on existing projects

6/ Hide Total Hours if subtasks are disabled

7/ Create project in the company context.
Otherwise some records generation could use a default company which is not
the company for which we want to create a project.

8/ Default value for allow_forecast, is_fsm

9/ Change reference to timesheet product

10/ Fix tracback on industry_fsm_report.
Before this commit, there was a traceback when enabling "Worksheets"
(industry_fsm_report) after "Time and Material" (industry_fsm_sale).

11/ Convert some onchange method into computed editable stored fields

closes odoo/odoo#41218

Taskid: 2146474
Related: odoo/enterprise#6998
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>
Co-authored-by: Yannick Tivisse <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -155,6 +155,11 @@ class Project(models.Model):
     def _get_default_favorite_user_ids(self):
         return [(6, 0, [self.env.uid])]
 
+    def _get_default_rating_status(self):
+        if self.user_has_groups('project.group_project_rating'):
+            return 'stage'
+        return 'no'
+
     name = fields.Char("Name", index=True, required=True, tracking=True)
     active = fields.Boolean(default=True,
         help="If the active field is set to False, it will allow you to hide the project without removing it.")
@@ -212,13 +217,18 @@ class Project(models.Model):
     date = fields.Date(string='Expiration Date', index=True, tracking=True)
     subtask_project_id = fields.Many2one('project.project', string='Sub-task Project', ondelete="restrict",
         help="Project in which sub-tasks of the current project will be created. It can be the current project itself.")
+    allow_subtasks = fields.Boolean('Sub-tasks', compute='_compute_allow_subtasks')
 
     # rating fields
     rating_request_deadline = fields.Datetime(compute='_compute_rating_request_deadline', store=True)
-    rating_status = fields.Selection([('stage', 'Rating when changing stage'), ('periodic', 'Periodical Rating'), ('no','No rating')], 'Customer Ratings', help="How to get customer feedback?\n"
-                    "- Rating when changing stage: an email will be sent when a task is pulled in another stage.\n"
-                    "- Periodical Rating: email will be sent periodically.\n\n"
-                    "Don't forget to set up the mail templates on the stages for which you want to get the customer's feedbacks.", default="no", required=True)
+    rating_status = fields.Selection([
+        ('stage', 'Rating when changing stage'),
+        ('periodic', 'Periodical Rating'),
+        ('no', 'No rating')], string='Customer Ratings', default=_get_default_rating_status, required=True,
+        help="How to get customer feedback?\n"
+                 "- Rating when changing stage: an email will be sent when a task is pulled in another stage.\n"
+                 "- Periodical Rating: email will be sent periodically.\n\n"
+                 "Don't forget to set up the mail templates on the stages for which you want to get the customer's feedbacks.")
     rating_status_period = fields.Selection([
         ('daily', 'Daily'), ('weekly', 'Weekly'), ('bimonthly', 'Twice a Month'),
         ('monthly', 'Once a Month'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')
@@ -230,6 +240,11 @@ class Project(models.Model):
         ('project_date_greater', 'check(date >= date_start)', 'Error! project start-date must be lower than project end-date.')
     ]
 
+    def _compute_allow_subtasks(self):
+        subtask_enabled = self.user_has_groups('project.group_subtask_project')
+        for project in self:
+            project.allow_subtasks = subtask_enabled
+
     @api.depends('allowed_internal_user_ids', 'allowed_portal_user_ids')
     def _compute_allowed_users(self):
         for project in self:
@@ -540,6 +555,7 @@ class Task(models.Model):
     parent_id = fields.Many2one('project.task', string='Parent Task', index=True)
     child_ids = fields.One2many('project.task', 'parent_id', string="Sub-tasks", context={'active_test': False})
     subtask_project_id = fields.Many2one('project.project', related="project_id.subtask_project_id", string='Sub-task Project', readonly=True)
+    allow_subtasks = fields.Boolean('project.project', related="project_id.allow_subtasks", readonly=True)
     subtask_count = fields.Integer("Sub-task count", compute='_compute_subtask_count')
     email_from = fields.Char(string='Email', help="These people will receive email.", index=True,
         compute='_compute_email_from', store="True", readonly=False)

--- a/addons/project/models/res_config_settings.py
+++ b/addons/project/models/res_config_settings.py
@@ -11,3 +11,17 @@ class ResConfigSettings(models.TransientModel):
     module_hr_timesheet = fields.Boolean(string="Task Logs")
     group_subtask_project = fields.Boolean("Sub-tasks", implied_group="project.group_subtask_project")
     group_project_rating = fields.Boolean("Use Rating on Project", implied_group='project.group_project_rating')
+
+    def _get_subtasks_projects_domain(self):
+        return []
+
+    def execute(self):
+        res = super(ResConfigSettings, self).execute()
+        if self.group_project_rating:
+            # Change the rating status on existing projects from 'no' to 'stage'
+            self.env['project.project'].search([('rating_status', '=', 'no')]).write({
+                'rating_status': 'stage'})
+        if self.group_subtask_project:
+            domain = self._get_subtasks_projects_domain()
+            self.env['project.project'].search(domain).write({'allow_subtasks': True})
+        return res
