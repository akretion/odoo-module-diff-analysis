PR: https://github.com/odoo/odoo/pull/35702

From: 70a65b01323117c044e2edf1cce939417c4bb7df
From: Odoo's Mergebot
Date: 2019-08-28 08:57:36

Structural Changes: 5
Total Changes: 24

[ADD] pos_adyen: generic payment interface and Adyen integration

This does two things:

- Makes it easy to implement new electronic payment methods in the POS by extracting a generic payment interface from the `pos_iot` enterprise module, and
- Uses this new interface to implement Adyen's Point of Sale Terminal API

For more info see individual commits.

Internal task: https://www.odoo.com/web#id=1981799&model=project.task&view_type=form&menu_id=

closes odoo/odoo#35702

Signed-off-by: pimodoo <pimodoo@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/pos_config.py
+++ b/addons/point_of_sale/models/pos_config.py
@@ -331,6 +331,13 @@ class PosConfig(models.Model):
         if any(self.available_pricelist_ids.mapped(lambda pl: pl.company_id.id not in (False, self.company_id.id))):
             raise ValidationError(_("The selected pricelists must belong to no company or the company of the point of sale."))
 
+    @api.onchange('iface_tipproduct')
+    def _onchange_tipproduct(self):
+        if self.iface_tipproduct:
+            self.tip_product_id = self.env.ref('point_of_sale.product_product_tip', False)
+        else:
+            self.tip_product_id = False
+
     @api.onchange('iface_print_via_proxy')
     def _onchange_iface_print_via_proxy(self):
         self.iface_print_auto = self.iface_print_via_proxy

--- a/addons/point_of_sale/models/pos_order.py
+++ b/addons/point_of_sale/models/pos_order.py
@@ -60,6 +60,8 @@ class PosOrder(models.Model):
             'amount': ui_paymentline['amount'] or 0.0,
             'payment_date': payment_date,
             'payment_method_id': ui_paymentline['payment_method_id'],
+            'card_type': ui_paymentline.get('card_type'),
+            'transaction_id': ui_paymentline.get('transaction_id'),
             'pos_order_id': order.id,
         }
 

--- a/addons/point_of_sale/models/pos_payment.py
+++ b/addons/point_of_sale/models/pos_payment.py
@@ -23,3 +23,5 @@ class PosPayment(models.Model):
     partner_id = fields.Many2one('res.partner', string='Customer', related='pos_order_id.partner_id')
     session_id = fields.Many2one('pos.session', string='Session', related='pos_order_id.session_id')
     company_id = fields.Many2one('res.company', string='Company', related='pos_order_id.company_id')
+    card_type = fields.Char('Type of card used')
+    transaction_id = fields.Char('Payment Transaction ID')

--- a/addons/point_of_sale/models/pos_payment_method.py
+++ b/addons/point_of_sale/models/pos_payment_method.py
@@ -40,6 +40,14 @@ class PosPaymentMethod(models.Model):
     open_session_ids = fields.Many2many('pos.session', string='Pos Sessions', compute='_compute_open_session_ids', help='Open PoS sessions that are using this payment method.')
     config_ids = fields.Many2many('pos.config', string='Point of Sale Configurations')
     company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company)
+    use_payment_terminal = fields.Selection([], 'Use a Payment Terminal', help='Record payments with a terminal on this journal.')
+    hide_use_payment_terminal = fields.Boolean(compute='_compute_hide_use_payment_terminal', help='Technical field which is used to '
+                                               'hide use_payment_terminal when no payment interfaces are installed.')
+
+    def _compute_hide_use_payment_terminal(self):
+        no_terminals = not bool(self._fields['use_payment_terminal'].selection)
+        for payment_method in self:
+            payment_method.hide_use_payment_terminal = no_terminals
 
     @api.depends('config_ids')
     def _compute_open_session_ids(self):
@@ -51,8 +59,11 @@ class PosPaymentMethod(models.Model):
         if not self.is_cash_count:
             self.cash_journal_id = False
 
+    def _is_write_forbidden(self, fields):
+        return bool(fields and self.open_session_ids)
+
     def write(self, vals):
-        if self.open_session_ids:
+        if self._is_write_forbidden(set(vals.keys())):
             raise UserError('Kindly close and validate the following open PoS Sessions before modifying this payment method.\n'
                             'Open sessions: %s' % (' '.join(self.open_session_ids.mapped('name')),))
         return super(PosPaymentMethod, self).write(vals)

--- a/addons/point_of_sale/models/pos_config.py
+++ b/addons/point_of_sale/models/pos_config.py
@@ -12,11 +12,14 @@ class AccountBankStmtCashWizard(models.Model):
     _inherit = 'account.bank.statement.cashbox'
 
     @api.depends('pos_config_ids')
+    @api.depends_context('current_currency_id')
     def _compute_currency(self):
         super(AccountBankStmtCashWizard, self)._compute_currency()
         for cashbox in self:
             if cashbox.pos_config_ids:
                 cashbox.currency_id = cashbox.pos_config_ids[0].currency_id.id
+            elif self.env.context.get('current_currency_id'):
+                cashbox.currency_id = self.env.context.get('current_currency_id')
 
     pos_config_ids = fields.One2many('pos.config', 'default_cashbox_id')
     is_a_template = fields.Boolean(default=False)
@@ -137,6 +140,7 @@ class PosConfig(models.Model):
         help='The point of sale will display this product category by default. If no category is specified, all available products will be shown.')
     iface_available_categ_ids = fields.Many2many('pos.category', string='Available PoS Product Categories',
         help='The point of sale will only display products which are within one of the selected category trees. If no category is specified, all available products will be shown')
+    selectable_categ_ids = fields.Many2many('pos.category', compute='_compute_selectable_categories')
     iface_display_categ_images = fields.Boolean(string='Display Category Pictures',
         help="The product categories will be displayed with pictures.")
     restrict_price_control = fields.Boolean(string='Restrict Price Modifications to Managers',
@@ -276,6 +280,14 @@ class PosConfig(models.Model):
                 pos_config.pos_session_duration = 0
                 pos_config.current_user_id = False
 
+    @api.depends('iface_available_categ_ids')
+    def _compute_selectable_categories(self):
+        for config in self:
+            if config.iface_available_categ_ids:
+                config.selectable_categ_ids = config.iface_available_categ_ids
+            else:
+                config.selectable_categ_ids = self.env['pos.category'].search([])
+
     @api.constrains('cash_control')
     def _check_session_state(self):
         open_session = self.env['pos.session'].search([('config_id', '=', self.id), ('state', '!=', 'closed')])
@@ -379,12 +391,8 @@ class PosConfig(models.Model):
         res = {}
         if not self.limit_categories:
             self.iface_available_categ_ids = False
-        elif not len(self.iface_available_categ_ids):
-             res = {'domain': {'iface_start_categ_id': [('id', 'in', self.env['pos.category'].search([]).ids)]}}
-        elif self.iface_start_categ_id not in self.iface_available_categ_ids:
+        if self.iface_available_categ_ids and self.iface_start_categ_id.id not in self.iface_available_categ_ids.ids:
             self.iface_start_categ_id = False
-        if self.iface_available_categ_ids:
-            res = {'domain': {'iface_start_categ_id': [('id', 'in', self.iface_available_categ_ids.ids)]}}
         return res
 
     @api.onchange('is_header_or_footer')

--- a/addons/point_of_sale/models/pos_order.py
+++ b/addons/point_of_sale/models/pos_order.py
@@ -39,6 +39,7 @@ class PosOrder(models.Model):
             'session_id':   ui_order['pos_session_id'],
             'lines':        [process_line(l) for l in ui_order['lines']] if ui_order['lines'] else False,
             'pos_reference': ui_order['name'],
+            'sequence_number': ui_order['sequence_number'],
             'partner_id':   ui_order['partner_id'] or False,
             'date_order':   ui_order['creation_date'].replace('T', ' ')[:19],
             'fiscal_position_id': ui_order['fiscal_position_id'],

--- a/addons/point_of_sale/models/pos_session.py
+++ b/addons/point_of_sale/models/pos_session.py
@@ -745,10 +745,10 @@ class PosSession(models.Model):
 
     def open_frontend_cb(self):
         """Open the pos interface with config_id as an extra argument.
-            
+
         In vanilla PoS each user can only have one active session, therefore it was not needed to pass the config_id
         on opening a session. It is also possible to login to sessions created by other users.
-            
+
         :returns: dict
         """
         if not self.ids:
@@ -802,7 +802,7 @@ class PosSession(models.Model):
             'view_type': 'form',
             'view_mode': 'form',
             'res_model': 'closing.balance.confirm.wizard',
-            'view_id': self.env.ref('point_of_sale.closing_balance_confirm').id,
+            'views': [(False, 'form')],
             'type': 'ir.actions.act_window',
             'context': context,
             'target': 'new'
