PR: https://github.com/odoo/odoo/pull/

From: 623567eba0884aba1213edacab767cc4c2732053
From: Thibault Delavall√©e
Date: 2020-04-21 12:28:52

Structural Changes: 2
Total Changes: 31

[LNT] crm: lint calendar file

Just passing by.

Task ID 2196182
PR #44662

================================= pseudo patch: =================================

--- a/addons/crm/models/calendar.py
+++ b/addons/crm/models/calendar.py
@@ -7,17 +7,6 @@ from odoo import api, fields, models
 class CalendarEvent(models.Model):
     _inherit = 'calendar.event'
 
-    def _is_crm_lead(self, defaults, ctx=None):
-        """
-            This method checks if the concerned model is a CRM lead.
-            The information is not always in the defaults values,
-            this is why it is necessary to check the context too.
-        """
-        res_model = defaults.get('res_model', False) or ctx and ctx.get('default_res_model')
-        res_model_id = defaults.get('res_model_id', False) or ctx and ctx.get('default_res_model_id')
-
-        return res_model and res_model == 'crm.lead' or res_model_id and self.env['ir.model'].sudo().browse(res_model_id).model == 'crm.lead'
-
     @api.model
     def default_get(self, fields):
         if self.env.context.get('default_opportunity_id'):
@@ -28,13 +17,14 @@ class CalendarEvent(models.Model):
         defaults = super(CalendarEvent, self).default_get(fields)
 
         # sync res_model / res_id to opportunity id (aka creating meeting from lead chatter)
-        ctx = self.env.context
         if 'opportunity_id' not in defaults:
-            if self._is_crm_lead(defaults, ctx):
-                defaults['opportunity_id'] = defaults.get('res_id', False) or ctx.get('default_res_id', False)
+            if self._is_crm_lead(defaults, self.env.context):
+                defaults['opportunity_id'] = defaults.get('res_id', False) or self.env.context.get('default_res_id', False)
 
         return defaults
 
+    opportunity_id = fields.Many2one('crm.lead', 'Opportunity', domain="[('type', '=', 'opportunity')]")
+
     def _compute_is_highlighted(self):
         super(CalendarEvent, self)._compute_is_highlighted()
         if self.env.context.get('active_model') == 'crm.lead':
@@ -43,8 +33,6 @@ class CalendarEvent(models.Model):
                 if event.opportunity_id.id == opportunity_id:
                     event.is_highlighted = True
 
-    opportunity_id = fields.Many2one('crm.lead', 'Opportunity', domain="[('type', '=', 'opportunity')]")
-
     @api.model_create_multi
     def create(self, vals):
         events = super(CalendarEvent, self).create(vals)
@@ -52,3 +40,14 @@ class CalendarEvent(models.Model):
             if event.opportunity_id and not event.activity_ids:
                 event.opportunity_id.log_meeting(event.name, event.start, event.duration)
         return events
+
+    def _is_crm_lead(self, defaults, ctx=None):
+        """
+            This method checks if the concerned model is a CRM lead.
+            The information is not always in the defaults values,
+            this is why it is necessary to check the context too.
+        """
+        res_model = defaults.get('res_model', False) or ctx and ctx.get('default_res_model')
+        res_model_id = defaults.get('res_model_id', False) or ctx and ctx.get('default_res_model_id')
+
+        return res_model and res_model == 'crm.lead' or res_model_id and self.env['ir.model'].sudo().browse(res_model_id).model == 'crm.lead'
