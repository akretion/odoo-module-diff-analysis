PR: https://github.com/odoo/odoo/pull/

From: c9da1571498ad1ded6b16d1483b8cb084d71f9de
From: Xavier Bol (xbo)
Date: 2019-12-19 09:20:27

Breaking data model changes score: 1, change matches:
-    _inherit = 'account.analytic.line'

Total Changes: 142

[IMP] hr_timesheet: add timer into list and kanban views for timesheets

TaskID: 2088586

Timer in the list and kanban views :
*---------------------------------
In kanban and list views, It's possible to update the 'unit_amount'
field with a timer. The user can easily launch the timer in these views
for one of his timesheets.
One timesheet can be launched at the same time, when the user start a
timer for a timesheet and start another timer for another timesheet, the
first timer stop and the new timer start.

The timer is usable only if the encoding unit is 'Hours' and the
timesheet is not validated. To do this : a new computed field 'display_timer'
is created in account.analytic.line, this field is set to True is the
encoding unit is 'Hours'. With this field, we can easily hide and display
the timer in different views.

The user can only use the timer for his timesheets. Because the user
with the access rights to see all timesheets might launch and/or stop a timer of a
timesheet of other user. That is the timer must be accessed only in 'My Timesheets' menu.

Add pivot view for 'All timesheets' menu.

Creation a timer_mixin :
*---------------------
With this timer mixin, we can have a generic timer to use in other
models that they need to use a timer like account.analytic.line and
project.task models
The timer in account.analytic.line model has changed to use the timer
mixin.

Specific behaviour of the timer :
*------------------------------
When the user use the timer and the minutes spent with the timer is less
than 1 minute, we don't add in unit_amount of timesheet. If the
unit_amount is equals to 0 and minutes spent of timer is less than 0.
Then the timesheet created by the timer is deleted because it is useless to
have a timesheet with unit_amount set on 0.

Misc :
*---
Add some styles for the timer button and for the 'unit_amount' field when the
timer is running.

remove duplicated fields in tree view (record
id='timesheet_view_tree_user')

================================= pseudo patch: =================================

--- a/addons/hr_timesheet/models/__init__.py
+++ b/addons/hr_timesheet/models/__init__.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from . import timer_mixin
 from . import hr_employee
 from . import hr_timesheet
 from . import ir_http

--- a/addons/hr_timesheet/models/hr_timesheet.py
+++ b/addons/hr_timesheet/models/hr_timesheet.py
@@ -9,7 +9,8 @@ from odoo.exceptions import UserError, AccessError
 from odoo.osv import expression
 
 class AccountAnalyticLine(models.Model):
-    _inherit = 'account.analytic.line'
+    _name = 'account.analytic.line'
+    _inherit = ['account.analytic.line', 'timer.mixin']
 
     @api.model
     def default_get(self, field_list):
@@ -48,6 +49,12 @@ class AccountAnalyticLine(models.Model):
     department_id = fields.Many2one('hr.department', "Department", compute='_compute_department_id', store=True, compute_sudo=True)
     encoding_uom_id = fields.Many2one('uom.uom', compute='_compute_encoding_uom_id')
 
+    # Timer Fields
+    display_timer = fields.Boolean(
+        compute='_compute_display_timer',
+        help="used to display the timer if the encoding unit is 'Hours'"
+    )
+
     def _compute_encoding_uom_id(self):
         for analytic_line in self:
             analytic_line.encoding_uom_id = self.env.company.timesheet_encode_uom_id
@@ -100,10 +107,8 @@ class AccountAnalyticLine(models.Model):
 
     def write(self, values):
         # If it's a basic user then check if the timesheet is his own.
-        for record in self:
-            if not self.user_has_groups('hr_timesheet.group_hr_timesheet_approver'):
-                if self.env.user.id != record.user_id.id:
-                    raise AccessError(_("You aren't allowed to access to the timesheet that it's not yours"))
+        if not self.user_has_groups('hr_timesheet.group_hr_timesheet_approver') and any(self.env.user.id != analytic_line.user_id.id for analytic_line in self):
+            raise AccessError(_("You cannot access timesheets that are not yours."))
 
         values = self._timesheet_preprocess(values)
         result = super(AccountAnalyticLine, self).write(values)
@@ -201,3 +206,62 @@ class AccountAnalyticLine(models.Model):
                     'amount': amount_converted,
                 })
         return result
+
+    # ----------------------------------------------------
+    # Timer Methods
+    # ----------------------------------------------------
+    def _compute_display_timer(self):
+        """ Check if the encoding unit is 'Hours',
+
+            if yes then the timer button is displayed
+        """
+        for analytic_line in self:
+            analytic_line.display_timer = analytic_line.encoding_uom_id.id == self.env.ref('uom.product_uom_hour').id
+
+    def action_timer_start(self):
+        """ Action start the timer of the current timesheet.
+
+            Start timer and search if another timer hasn't been launched.
+            If yes, then stop the timer before launch this timer.
+        """
+        self.ensure_one()
+        if not self.timer_start and self.display_timer:
+            self._stop_running_timers()
+            super().action_timer_start()
+
+    def _stop_running_timers(self):
+        """ Search if a timesheet has a timer activated and stop the timer.
+
+            Check if a timer is activated for another timesheet
+            if yes, then update unit_amount field and stop timer,
+            otherwise, do nothing.
+        """
+        analytic_line = self.search([('timer_start', '!=', False), ('user_id', '=', self.env.uid)])
+
+        if analytic_line:
+            analytic_line.action_timer_stop()
+
+    def action_timer_stop(self):
+        """ Action stop the timer of the current timesheet.
+
+            When the timer must be stopped, we must calculate the new
+            unit_amount based on the timer and the previous value of
+            unit_amount for the current timesheet.
+        """
+        self.ensure_one()
+        if self.timer_start and self.display_timer:
+            minutes_spent = self._get_minutes_spent()
+
+            if self.unit_amount == 0 and minutes_spent < 1:
+                # Check if unit_amount equals 0 and minutes_spent is less than 1 minute,
+                # if yes, then remove the timesheet
+                self.unlink()
+            else:
+                if minutes_spent < 1:
+                    amount = self.unit_amount
+                else:
+                    amount = self.unit_amount + minutes_spent * 60 / 3600
+
+                self.write({'unit_amount': amount})
+
+                super().action_timer_stop()

--- a/None
+++ b/addons/hr_timesheet/models/timer_mixin.py
@@ -0,0 +1,67 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models, fields, api
+
+
+class TimerMixin(models.AbstractModel):
+    _name = 'timer.mixin'
+    _description = 'Timer Mixin'
+
+    timer_start = fields.Datetime("Timer Start")
+    timer_pause = fields.Datetime("Timer Last Pause")
+
+    # is_timer_running field is used with timer_toggle_button widget
+    # to create a timer button in the view.
+    # If the timer field is set on False,
+    # then it displays a button with fa-icon-play icon.
+    # Otherwise, it displays a button with fa-icon-stop icon
+    is_timer_running = fields.Boolean(compute="_compute_timer")
+
+    @api.depends('timer_start')
+    def _compute_timer(self) -> None:
+        for record in self:
+            record.is_timer_running = bool(record.timer_start)
+
+    def action_timer_start(self) -> None:
+        """ Action start the timer.
+
+            Start timer and search if another timer hasn't been launched.
+            If yes, then stop the timer before launch this timer.
+        """
+        self.ensure_one()
+        if not self.timer_start:
+            self.write({'timer_start': fields.Datetime.now()})
+
+    def action_timer_stop(self):
+        """ Stop the timer and return the spent minutes since it started
+            :return minutes_spent if the timer is started,
+                    otherwise return False
+        """
+        self.ensure_one()
+        if not self.timer_start:
+            return False
+        minutes_spent = self._get_minutes_spent()
+        self.write({'timer_start': False, 'timer_pause': False})
+        return minutes_spent
+
+    def _get_minutes_spent(self) -> float:
+        """ Compute the minutes spent with the timer
+
+            :return minutes spent
+        """
+        start_time = self.timer_start
+        stop_time = fields.Datetime.now()
+
+        # timer was either running or paused
+        if self.timer_pause:
+            start_time += (stop_time - self.timer_pause)
+
+        return (stop_time - start_time).total_seconds() / 60
+
+    def action_timer_pause(self) -> None:
+        self.write({'timer_pause': fields.Datetime.now()})
+
+    def action_timer_resume(self) -> None:
+        new_start = self.timer_start + (fields.Datetime.now() - self.timer_pause)
+        self.write({'timer_start': new_start, 'timer_pause': False})
