PR: https://github.com/odoo/odoo/pull/117968

From: 1a44b849970d3e39111a99ea35db5b586b184dd3
From: Bastien (bvdn)
Date: 2023-06-13 16:20:44

Structural Changes: 2
Total Changes: 31

[IMP] project: improve various mark as done features

New features developed in this PR:

- Write Javascript tests for the project.task.state widget
  - Tests are in the project_task_state_selection.js
- rewrite Research & Development demo data
- Created a digest tip for task state selection (in Settings > technical > digest tips)
  - Tip: Use task state to keep track of the task progression
- Fix Sharingview (Readonly) icons for the project.task.state widget, previously only the color bubble were displayed in readonly sharing views, now all of the icons are displayed
- Display state in the Calendar view
  - Display the same widget as in the kanban/list views
- Remove is_closed References
- Adapt Kanban stages Exemples
  - Kanban exemples are available when creating a new stage in kanban view
- improve Progressbar colors (different color for approved/done, in_progress/waiting)

Task-3213526

closes odoo/odoo#117968

Related: odoo/enterprise#39714
Related: odoo/upgrade#4548
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/__init__.py
+++ b/addons/project/models/__init__.py
@@ -3,11 +3,11 @@
 
 from . import account_analytic_account
 from . import mail_message
-from . import project_milestone
 from . import project_project_stage
 from . import project_task_recurrence
-# `project_task_stage_personal` has to be loaded before `project`
+# `project_task_stage_personal` has to be loaded before `project_project` and `project_milestone`
 from . import project_task_stage_personal
+from . import project_milestone
 from . import project_project
 from . import project_task
 from . import project_task_type

--- a/addons/project/models/project_milestone.py
+++ b/addons/project/models/project_milestone.py
@@ -5,6 +5,8 @@ from collections import defaultdict
 
 from odoo import api, fields, models
 
+from .project_task import CLOSED_STATES
+
 class ProjectMilestone(models.Model):
     _name = 'project.milestone'
     _description = "Project Milestone"
@@ -47,10 +49,10 @@ class ProjectMilestone(models.Model):
     @api.depends('task_ids.milestone_id')
     def _compute_task_count(self):
         all_and_done_task_count_per_milestone = {
-            milestone.id: (count, is_closed_list.count(True))
-            for milestone, count, is_closed_list in self.env['project.task']._read_group(
+            milestone.id: (count, sum(state in CLOSED_STATES for state in state_list))
+            for milestone, count, state_list in self.env['project.task']._read_group(
                 [('milestone_id', 'in', self.ids), ('allow_milestones', '=', True)],
-                ['milestone_id'], ['__count', 'is_closed:array_agg'],
+                ['milestone_id'], ['__count', 'state:array_agg'],
             )
         }
         for milestone in self:
@@ -59,19 +61,20 @@ class ProjectMilestone(models.Model):
     def _compute_can_be_marked_as_done(self):
         if not any(self._ids):
             for milestone in self:
-                milestone.can_be_marked_as_done = not milestone.is_reached and all(milestone.task_ids.is_closed)
+                milestone.can_be_marked_as_done = not milestone.is_reached and all(milestone.task_ids.mapped(lambda t: t.state in CLOSED_STATES))
             return
+
         unreached_milestones = self.filtered(lambda milestone: not milestone.is_reached)
         (self - unreached_milestones).can_be_marked_as_done = False
         task_read_group = self.env['project.task']._read_group(
             [('milestone_id', 'in', unreached_milestones.ids)],
-            ['milestone_id', 'is_closed'],
+            ['milestone_id', 'state'],
             ['__count'],
         )
         task_count_per_milestones = defaultdict(lambda: (0, 0))
-        for milestone, is_closed, count in task_read_group:
+        for milestone, state, count in task_read_group:
             opened_task_count, closed_task_count = task_count_per_milestones[milestone.id]
-            if is_closed:
+            if state in CLOSED_STATES:
                 closed_task_count += count
             else:
                 opened_task_count += count

--- a/addons/project/models/project_project.py
+++ b/addons/project/models/project_project.py
@@ -11,7 +11,7 @@ from odoo.addons.rating.models import rating_data
 from odoo.tools.misc import get_lang
 
 from .project_update import STATUS_COLOR
-
+from .project_task import CLOSED_STATES
 
 class Project(models.Model):
     _name = "project.project"
@@ -55,7 +55,7 @@ class Project(models.Model):
             for project, count in self.env['project.task'].with_context(
                 active_test=any(project.active for project in self)
             )._read_group(
-                [('is_closed', '=', False), ('project_id', 'in', self.ids)],
+                [('state', 'not in', list(CLOSED_STATES)), ('project_id', 'in', self.ids)],
                 ['project_id'],
                 ['__count'],
             )
@@ -128,7 +128,7 @@ class Project(models.Model):
     type_ids = fields.Many2many('project.task.type', 'project_task_type_rel', 'project_id', 'type_id', string='Tasks Stages')
     task_count = fields.Integer(compute='_compute_task_count', string="Task Count")
     task_ids = fields.One2many('project.task', 'project_id', string='Tasks',
-                               domain=[('is_closed', '=', False)])
+                               domain=[('state', 'not in', list(CLOSED_STATES))])
     color = fields.Integer(string='Color Index')
     user_id = fields.Many2one('res.users', string='Project Manager', default=lambda self: self.env.user, tracking=True)
     alias_enabled = fields.Boolean(string='Use Email Alias', compute='_compute_alias_enabled', readonly=False)

--- a/addons/project/models/project_task.py
+++ b/addons/project/models/project_task.py
@@ -50,7 +50,6 @@ PROJECT_TASK_WRITABLE_FIELDS = {
     'date_last_stage_update',
     'tag_ids',
     'sequence',
-    'is_closed',
     'stage_id',
     'child_ids',
     'parent_id',
@@ -133,7 +132,7 @@ class Task(models.Model):
         ('03_approved', 'Approved'),
         *CLOSED_STATES.items(),
         ('04_waiting_normal', 'Waiting'),
-    ], string='Status', copy=False, default='01_in_progress', required=True, compute='_compute_state', inverse='_inverse_state', readonly=False, store=True, recursive=True, tracking=True)
+    ], string='State', copy=False, default='01_in_progress', required=True, compute='_compute_state', inverse='_inverse_state', readonly=False, store=True, recursive=True, tracking=True)
 
     create_date = fields.Datetime("Created On", readonly=True)
     write_date = fields.Datetime("Last Updated On", readonly=True)
@@ -190,7 +189,6 @@ class Task(models.Model):
     # In the domain of displayed_image_id, we couln't use attachment_ids because a one2many is represented as a list of commands so we used res_model & res_id
     displayed_image_id = fields.Many2one('ir.attachment', domain="[('res_model', '=', 'project.task'), ('res_id', '=', id), ('mimetype', 'ilike', 'image')]", string='Cover Image')
 
-    is_closed = fields.Boolean(compute='_compute_is_closed', string="Closed State", store=True, index=True)
     parent_id = fields.Many2one('project.task', string='Parent Task', index=True)
     child_ids = fields.One2many('project.task', 'parent_id', string="Sub-tasks", domain="[('recurring_task', '=', False)]")
     subtask_count = fields.Integer("Sub-task Count", compute='_compute_subtask_count')
