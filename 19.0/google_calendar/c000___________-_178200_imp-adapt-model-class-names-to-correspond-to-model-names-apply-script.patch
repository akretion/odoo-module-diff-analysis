PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:4 + add:0, change matches:
-    _inherit = 'calendar.attendee'
-    _inherit = 'res.config.settings'
-    _inherit = 'res.users'
-    _inherit = "res.users.settings"

Total Changes: 39

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/google_calendar/models/calendar.py
+++ b/addons/google_calendar/models/calendar.py
@@ -11,8 +11,8 @@ from odoo.exceptions import ValidationError
 
 from odoo.addons.google_calendar.utils.google_calendar import GoogleCalendarService
 
-class Meeting(models.Model):
-    _name = 'calendar.event'
+
+class CalendarEvent(models.Model):
     _inherit = ['calendar.event', 'google.calendar.sync']
 
     MEET_ROUTE = 'meet.google.com'
@@ -40,7 +40,7 @@ class Meeting(models.Model):
     def _compute_videocall_source(self):
         events_with_google_url = self.filtered(lambda event: self.MEET_ROUTE in (event.videocall_location or ''))
         events_with_google_url.videocall_source = 'google_meet'
-        super(Meeting, self - events_with_google_url)._compute_videocall_source()
+        super(CalendarEvent, self - events_with_google_url)._compute_videocall_source()
 
     @api.model
     def _get_google_synced_fields(self):
@@ -56,7 +56,7 @@ class Meeting(models.Model):
     @api.model_create_multi
     def create(self, vals_list):
         notify_context = self.env.context.get('dont_notify', False)
-        return super(Meeting, self.with_context(dont_notify=notify_context)).create([
+        return super(CalendarEvent, self.with_context(dont_notify=notify_context)).create([
             dict(vals, need_sync=False) if vals.get('recurrence_id') or vals.get('recurrency') else vals
             for vals in vals_list
         ])
@@ -93,7 +93,7 @@ class Meeting(models.Model):
         notify_context = self.env.context.get('dont_notify', False)
         if not notify_context and ([self.env.user.id != record.user_id.id for record in self]):
             self._check_modify_event_permission(values)
-        res = super(Meeting, self.with_context(dont_notify=notify_context)).write(values)
+        res = super(CalendarEvent, self.with_context(dont_notify=notify_context)).write(values)
         if recurrence_update_setting in ('all_events',) and len(self) == 1 and values.keys() & self._get_google_synced_fields():
             self.recurrence_id.need_sync = True
         return res
@@ -282,7 +282,7 @@ class Meeting(models.Model):
             # Increase performance handling 'future_events' edge case as it was an 'all_events' update.
             if archive_future_events:
                 recurrence_update_setting = 'all_events'
-        super(Meeting, self).action_mass_archive(recurrence_update_setting)
+        super().action_mass_archive(recurrence_update_setting)
 
     def _google_values(self):
         if self.allday:
@@ -361,7 +361,7 @@ class Meeting(models.Model):
         for event in self:
             # remove the tracking data to avoid calling _track_template in the pre-commit phase
             self.env.cr.precommit.data.pop(f'mail.tracking.create.{event._name}.{event.id}', None)
-        super(Meeting, my_cancelled_records)._cancel()
+        super(CalendarEvent, my_cancelled_records)._cancel()
         attendees = (self - my_cancelled_records).attendee_ids.filtered(lambda a: a.partner_id == user.partner_id)
         attendees.state = 'declined'
 

--- a/addons/google_calendar/models/calendar_attendee.py
+++ b/addons/google_calendar/models/calendar_attendee.py
@@ -5,9 +5,9 @@ from odoo import models
 
 from odoo.addons.google_calendar.utils.google_calendar import GoogleCalendarService
 
-class Attendee(models.Model):
-    _name = 'calendar.attendee'
-    _inherit = 'calendar.attendee'
+
+class CalendarAttendee(models.Model):
+    _inherit = ['calendar.attendee']
 
     def do_tentative(self):
         # Synchronize event after state change

--- a/addons/google_calendar/models/calendar_recurrence_rule.py
+++ b/addons/google_calendar/models/calendar_recurrence_rule.py
@@ -11,8 +11,8 @@ from odoo.addons.google_calendar.utils.google_calendar import GoogleCalendarServ
 
 _logger = logging.getLogger(__name__)
 
-class RecurrenceRule(models.Model):
-    _name = 'calendar.recurrence'
+
+class CalendarRecurrence(models.Model):
     _inherit = ['calendar.recurrence', 'google.calendar.sync']
 
 
@@ -184,7 +184,7 @@ class RecurrenceRule(models.Model):
             vals['event_tz'] = gevent.start.get('timeZone')
             attendee_values[base_event.id] = {'attendee_ids': base_values.get('attendee_ids')}
 
-        recurrence = super(RecurrenceRule, self.with_context(dont_notify=True))._create_from_google(gevents, vals_list)
+        recurrence = super(CalendarRecurrence, self.with_context(dont_notify=True))._create_from_google(gevents, vals_list)
         generic_values_creation = {
             rec.id: attendee_values[rec.base_event_id.id]
             for rec in recurrence if attendee_values.get(rec.base_event_id.id)

--- a/addons/google_calendar/models/google_sync.py
+++ b/addons/google_calendar/models/google_sync.py
@@ -53,8 +53,7 @@ def google_calendar_token(user):
     yield user._get_google_calendar_token()
 
 
-class GoogleSync(models.AbstractModel):
-    _name = 'google.calendar.sync'
+class GoogleCalendarSync(models.AbstractModel):
     _description = "Synchronize a record with Google Calendar"
 
     google_id = fields.Char('Google Calendar Id', copy=False)

--- a/addons/google_calendar/models/res_config_settings.py
+++ b/addons/google_calendar/models/res_config_settings.py
@@ -5,7 +5,7 @@ from odoo import api, fields, models
 
 
 class ResConfigSettings(models.TransientModel):
-    _inherit = 'res.config.settings'
+    _inherit = ['res.config.settings']
 
     cal_client_id = fields.Char("Client_id", config_parameter='google_calendar_client_id', default='')
     cal_client_secret = fields.Char("Client_key", config_parameter='google_calendar_client_secret', default='')

--- a/addons/google_calendar/models/res_users.py
+++ b/addons/google_calendar/models/res_users.py
@@ -13,8 +13,9 @@ from odoo.tools import str2bool
 
 _logger = logging.getLogger(__name__)
 
-class User(models.Model):
-    _inherit = 'res.users'
+
+class ResUsers(models.Model):
+    _inherit = ['res.users']
 
     google_calendar_rtoken = fields.Char(related='res_users_settings_id.google_calendar_rtoken', groups="base.group_system")
     google_calendar_token = fields.Char(related='res_users_settings_id.google_calendar_token', groups="base.group_system")

--- a/addons/google_calendar/models/res_users_settings.py
+++ b/addons/google_calendar/models/res_users_settings.py
@@ -8,8 +8,9 @@ from odoo import api, fields, models, _
 from odoo.exceptions import UserError
 from odoo.addons.google_account.models.google_service import GOOGLE_TOKEN_ENDPOINT
 
+
 class ResUsersSettings(models.Model):
-    _inherit = "res.users.settings"
+    _inherit = ["res.users.settings"]
 
     # Google Calendar tokens and synchronization information.
     google_calendar_rtoken = fields.Char('Refresh Token', copy=False, groups='base.group_system')
