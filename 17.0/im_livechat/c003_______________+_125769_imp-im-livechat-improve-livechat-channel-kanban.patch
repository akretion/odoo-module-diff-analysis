PR: https://github.com/odoo/odoo/pull/125769

From: 7ec8d66ce4479d6fa2b1f8d180bf23fc39864059
From: tsm-odoo
Date: 2023-07-03 19:55:56

Structural Changes: 3
Total Changes: 39

[IMP] im_livechat: improve livechat channel kanban

This PR improves livechat channel kanban:
- Remove image field (always the same and does not bring value)
- Replace the count of operators by the many2many_avatars widget with connected users
- Join button as secondary button, Leave button color should be primary
- Add options from channel card: Ratings + configure
- Compute ratings based on last 2 weeks on channel's card
- Highlight active channels (at least one operator)

part of task-3332872

closes odoo/odoo#125769

Related: odoo/enterprise#42852
Signed-off-by: Alexandre KÃ¼hn (aku) <aku@odoo.com>

================================= pseudo patch: =================================

--- a/addons/im_livechat/models/im_livechat_channel.py
+++ b/addons/im_livechat/models/im_livechat_channel.py
@@ -17,11 +17,7 @@ class ImLivechatChannel(models.Model):
     _name = 'im_livechat.channel'
     _inherit = ['rating.parent.mixin']
     _description = 'Livechat Channel'
-    _rating_satisfaction_days = 7  # include only last 7 days to compute satisfaction
-
-    def _default_image(self):
-        image_path = modules.get_module_resource('im_livechat', 'static/src/img', 'default.png')
-        return base64.b64encode(open(image_path, 'rb').read())
+    _rating_satisfaction_days = 14  # include only last 14 days to compute satisfaction
 
     def _default_user_ids(self):
         return [(6, 0, [self._uid])]
@@ -49,10 +45,11 @@ class ImLivechatChannel(models.Model):
         help="URL to a static page where you client can discuss with the operator of the channel.")
     are_you_inside = fields.Boolean(string='Are you inside the matrix?',
         compute='_are_you_inside', store=False, readonly=True)
+    available_operator_ids = fields.Many2many('res.users', compute='_compute_available_operator_ids')
     script_external = fields.Html('Script (external)', compute='_compute_script_external', store=False, readonly=True, sanitize=False)
     nbr_channel = fields.Integer('Number of conversation', compute='_compute_nbr_channel', store=False, readonly=True)
 
-    image_128 = fields.Image("Image", max_width=128, max_height=128, default=_default_image)
+    image_128 = fields.Image("Image", max_width=128, max_height=128)
 
     # relationnal fields
     user_ids = fields.Many2many('res.users', 'im_livechat_channel_im_user', 'channel_id', 'user_id', string='Operators', default=_default_user_ids)
@@ -64,6 +61,11 @@ class ImLivechatChannel(models.Model):
         for channel in self:
             channel.are_you_inside = bool(self.env.uid in [u.id for u in channel.user_ids])
 
+    @api.depends('user_ids.im_status')
+    def _compute_available_operator_ids(self):
+        for record in self:
+            record.available_operator_ids = record.user_ids.filtered(lambda user: user.im_status == 'online')
+
     @api.depends('rule_ids.chatbot_script_id')
     def _compute_chatbot_script_count(self):
         data = self.env['im_livechat.channel.rule']._read_group(
@@ -130,13 +132,6 @@ class ImLivechatChannel(models.Model):
     # --------------------------
     # Channel Methods
     # --------------------------
-    def _get_available_users(self):
-        """ get available user of a given channel
-            :retuns : return the res.users having their im_status online
-        """
-        self.ensure_one()
-        return self.user_ids.filtered(lambda user: user.im_status == 'online')
-
     def _get_livechat_discuss_channel_vals(self, anonymous_name, operator=None, chatbot_script=None, user_id=None, country_id=None):
         # partner to add to the discuss.channel
         operator_partner_id = operator.partner_id.id if operator else chatbot_script.operator_partner_id.id
@@ -190,10 +185,9 @@ class ImLivechatChannel(models.Model):
                     [('channel_id', 'in', self.ids)]).mapped('chatbot_script_id').ids:
                 return False
         elif previous_operator_id:
-            available_users = self._get_available_users()
             # previous_operator_id is the partner_id of the previous operator, need to convert to user
-            if previous_operator_id in available_users.mapped('partner_id').ids:
-                user_operator = next(available_user for available_user in available_users if available_user.partner_id.id == previous_operator_id)
+            if previous_operator_id in self.available_operator_ids.mapped('partner_id').ids:
+                user_operator = next(available_user for available_user in self.available_operator_ids if available_user.partner_id.id == previous_operator_id)
         if not user_operator and not chatbot_script:
             user_operator = self._get_random_operator()
         if not user_operator and not chatbot_script:
@@ -227,8 +221,7 @@ class ImLivechatChannel(models.Model):
         :return : user
         :rtype : res.users
         """
-        operators = self._get_available_users()
-        if len(operators) == 0:
+        if not self.available_operator_ids:
             return False
 
         self.env.cr.execute("""SELECT COUNT(DISTINCT c.id), c.livechat_operator_id
@@ -238,12 +231,14 @@ class ImLivechatChannel(models.Model):
             AND c.livechat_operator_id in %s
             AND m.create_date > ((now() at time zone 'UTC') - interval '30 minutes')
             GROUP BY c.livechat_operator_id
-            ORDER BY COUNT(DISTINCT c.id) asc""", (tuple(operators.mapped('partner_id').ids),))
+            ORDER BY COUNT(DISTINCT c.id) asc""", (tuple(self.available_operator_ids.mapped('partner_id').ids),))
         active_channels = self.env.cr.dictfetchall()
 
         # If inactive operator(s), return one of them
         active_channel_operator_ids = [active_channel['livechat_operator_id'] for active_channel in active_channels]
-        inactive_operators = [operator for operator in operators if operator.partner_id.id not in active_channel_operator_ids]
+        inactive_operators = [
+            operator for operator in self.available_operator_ids if operator.partner_id.id not in active_channel_operator_ids
+        ]
         if inactive_operators:
             return random.choice(inactive_operators)
 
@@ -255,7 +250,7 @@ class ImLivechatChannel(models.Model):
             if active_channel['count'] == lowest_number_of_conversations])
 
         # convert the selected 'partner_id' to its corresponding res.users
-        return next(operator for operator in operators if operator.partner_id.id == less_active_operator)
+        return next(operator for operator in self.available_operator_ids if operator.partner_id.id == less_active_operator)
 
     def _get_channel_infos(self):
         self.ensure_one()
@@ -278,7 +273,7 @@ class ImLivechatChannel(models.Model):
         if username is None:
             username = _('Visitor')
         info = {}
-        info['available'] = self.chatbot_script_count or len(self._get_available_users()) > 0
+        info['available'] = self.chatbot_script_count or len(self.available_operator_ids) > 0
         info['server_url'] = self.get_base_url()
         if info['available']:
             info['options'] = self._get_channel_infos()
