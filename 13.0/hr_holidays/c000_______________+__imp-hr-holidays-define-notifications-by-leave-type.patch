PR: https://github.com/odoo/odoo/pull/

From: 398f0eb8e9f26a922dcf75ae91ce18c70999f721
From: TWA
Date: 2018-10-19 07:52:41

Structural Changes: 3
Total Changes: 63

[IMP] hr_holidays: Define notifications by leave type

Purpose
=======

- A manager could want to follow only home working of its own department
- A HR officer could want to follow only sick leaves of all dpts.

We have to improve what people follow and how they follow it in the leaves module

Specifications
==============

Subtype on department
---------------------

In department form view, right now, people can follow approvals

Instead we should have some generic and specific subtypes depending on the leave type

For instance, a HR Officer wants to follow only sick leaves and a manager only home working

Following mechanism
-------------------

Remove first / second approval subtype differences
if a leave type is not linked to a specific subtype, consider only classic
people follow it (employee and assigned HR people / manager)

Link leave type to subtypes, with some by default (i.e. home working, ...), not mandatory

When creating a leave type, link it to the department to be able to
activate the subtype for only one department.

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/__init__.py
+++ b/addons/hr_holidays/models/__init__.py
@@ -6,3 +6,4 @@ from . import hr
 from . import hr_leave
 from . import hr_leave_allocation
 from . import hr_leave_type
+from . import mail_message_subtype
\ No newline at end of file

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -760,9 +760,8 @@ class HolidaysRequest(models.Model):
     @api.multi
     def _track_subtype(self, init_values):
         if 'state' in init_values and self.state == 'validate':
-            return self.env.ref('hr_holidays.mt_leave_approved')
-        elif 'state' in init_values and self.state == 'refuse':
-            return self.env.ref('hr_holidays.mt_leave_refused')
+            leave_notif_subtype = self.holiday_status_id.leave_notif_subtype_id
+            return leave_notif_subtype or self.env.ref('hr_holidays.mt_leave')
         return super(HolidaysRequest, self)._track_subtype(init_values)
 
     @api.multi

--- a/addons/hr_holidays/models/hr_leave_allocation.py
+++ b/addons/hr_holidays/models/hr_leave_allocation.py
@@ -544,9 +544,8 @@ class HolidaysAllocation(models.Model):
     @api.multi
     def _track_subtype(self, init_values):
         if 'state' in init_values and self.state == 'validate':
-            return self.env.ref('hr_holidays.mt_leave_allocation_approved')
-        elif 'state' in init_values and self.state == 'refuse':
-            return self.env.ref('hr_holidays.mt_leave_allocation_refused')
+            allocation_notif_subtype_id = self.holiday_status_id.allocation_notif_subtype_id
+            return allocation_notif_subtype_id or self.env.ref('hr_holidays.mt_leave_allocation')
         return super(HolidaysAllocation, self)._track_subtype(init_values)
 
     @api.multi

--- a/addons/hr_holidays/models/hr_leave_type.py
+++ b/addons/hr_holidays/models/hr_leave_type.py
@@ -83,6 +83,8 @@ class HolidaysType(models.Model):
         ('day', 'Day'), ('hour', 'Hours')],
         default='day', string='Take Leaves in', required=True)
     unpaid = fields.Boolean('Is Unpaid', default=False)
+    leave_notif_subtype_id = fields.Many2one('mail.message.subtype', string='Leave Notification Subtype')
+    allocation_notif_subtype_id = fields.Many2one('mail.message.subtype', string='Allocation Notification Subtype')
 
     @api.multi
     @api.constrains('validity_start', 'validity_stop')

--- a/None
+++ b/addons/hr_holidays/models/mail_message_subtype.py
@@ -0,0 +1,50 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import logging
+
+from odoo import api, models
+
+_logger = logging.getLogger(__name__)
+
+
+class MailMessageSubtype(models.Model):
+    _inherit = 'mail.message.subtype'
+
+    def _get_department_subtype(self):
+        return self.search([
+            ('res_model', '=', 'hr.department'),
+            ('parent_id', '=', self.id)])
+
+    def _update_department_subtype(self):
+        for subtype in self:
+            department_subtype = subtype._get_department_subtype()
+            if department_subtype:
+                department_subtype.write({
+                    'name': subtype.name,
+                    'default': subtype.default,
+                })
+            else:
+                department_subtype = self.create({
+                    'name': subtype.name,
+                    'res_model': 'hr.department',
+                    'default': subtype.default or False,
+                    'parent_id': subtype.id,
+                    'relation_field': 'department_id',
+                })
+            return department_subtype
+
+    @api.model
+    def create(self, vals):
+        result = super(MailMessageSubtype, self).create(vals)
+        if result.res_model in ['hr.leave', 'hr.leave.allocation']:
+            result._update_department_subtype()
+        return result
+
+    @api.multi
+    def write(self, vals):
+        result = super(MailMessageSubtype, self).write(vals)
+        self.filtered(
+            lambda subtype: subtype.res_model in ['hr.leave', 'hr.leave.allocation']
+        )._update_department_subtype()
+        return result
