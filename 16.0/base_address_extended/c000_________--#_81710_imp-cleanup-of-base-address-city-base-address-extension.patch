PR: https://github.com/odoo/odoo/pull/81710

From: 5b72f017662525362ff1e1bc8173a7ab395dbcf9
From: Fabien Pinckaers
Date: 2022-01-25 17:21:04

Breaking data model changes score: 5, change matches:
-    _inherit = 'res.company'
-    street_name = fields.Char('Street Name', compute='_compute_address',
-    street_number = fields.Char('House Number', compute='_compute_address',
-    street_number2 = fields.Char('Door Number', compute='_compute_address',
-    street_format = fields.Text(

Total Changes: 227

[IMP] cleanup of base_address_city & base_address_extension

Rely on country.address_view_id instead of hacking the view on the fly. The
address layout (street VS street_name street_number street_number2) depends now
on the country of the user, not on the installed localisation. (it's now
configurable per country)

Unified street format to "Chaussee de Namur 40 - Appt 12"; the
configurable ones where actually wrong by country.

Allow street split without base_address_extended; all EDIs can now be
used with or without base_address_extended.

Merged base_address_city into base_address_extension, to avoid creating bridge
modules for no reason. Uses city_id instead of city if the country of the user
defines it AND if enforce_cities is set on this country.

Improved post_init script for large databases.

Split of street removed on res.company. (not required by any l10n)

[IMP] l10n_cn_city,l10n_nl,l10n_cl,l10n_co,l10n_pe: base_address_extended improvements

l10n_cn_city defined cities but did not provide a means to edit the city_id, so enforce_cities
l10n_nl only requires street names and numbers and thus does not need to depend on base_address_extended
l10n_cl should not depend on base_address_extended as none of the features are used
l10n_pe improve the view
l10n_co remove base_address_city dependency - move to l10n_co_edi

closes odoo/odoo#81710

Related: odoo/enterprise#23108
Related: odoo/upgrade#3129
Signed-off-by: Laurent Smet <las@odoo.com>

================================= pseudo patch: =================================

--- a/addons/base_address_extended/models/__init__.py
+++ b/addons/base_address_extended/models/__init__.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import res_company
+from . import res_city
 from . import res_country
 from . import res_partner

--- a/None
+++ b/addons/base_address_extended/models/res_city.py
@@ -0,0 +1,33 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+from odoo.osv import expression
+
+class City(models.Model):
+    _name = 'res.city'
+    _description = 'City'
+    _order = 'name'
+
+    name = fields.Char("Name", required=True, translate=True)
+    zipcode = fields.Char("Zip")
+    country_id = fields.Many2one(comodel_name='res.country', string='Country', required=True)
+    state_id = fields.Many2one(comodel_name='res.country.state', string='State', domain="[('country_id', '=', country_id)]")
+
+    def name_get(self):
+        res = []
+        for city in self:
+            name = city.name if not city.zipcode else '%s (%s)' % (city.name, city.zipcode)
+            res.append((city.id, name))
+        return res
+
+    @api.model
+    def _name_search(self, name='', args=None, operator='ilike', limit=100, name_get_uid=None):
+        ''' Enable searching by zipcode of a city
+        '''
+        args = list(args or [])
+        domain = []
+        if name:
+            connector = '!' if operator in expression.NEGATIVE_TERM_OPERATORS else '|'
+            domain = [connector, ('zipcode', 'ilike', name), (self._rec_name, operator, name)]
+        return self._search(expression.AND([domain, args]), limit=limit, access_rights_uid=name_get_uid)

--- a/addons/base_address_extended/models/res_company.py
+++ b/None
@@ -1,31 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-
-class Company(models.Model):
-    _inherit = 'res.company'
-
-    street_name = fields.Char('Street Name', compute='_compute_address',
-                              inverse='_inverse_street_name')
-    street_number = fields.Char('House Number', compute='_compute_address',
-                                inverse='_inverse_street_number')
-    street_number2 = fields.Char('Door Number', compute='_compute_address',
-                                 inverse='_inverse_street_number2')
-
-    def _get_company_address_field_names(self):
-        fields_matching = super(Company, self)._get_company_address_field_names()
-        return list(set(fields_matching + ['street_name', 'street_number', 'street_number2']))
-
-    def _inverse_street_name(self):
-        for company in self:
-            company.partner_id.street_name = company.street_name
-
-    def _inverse_street_number(self):
-        for company in self:
-            company.partner_id.street_number = company.street_number
-
-    def _inverse_street_number2(self):
-        for company in self:
-            company.partner_id.street_number2 = company.street_number2

--- a/addons/base_address_extended/models/res_country.py
+++ b/addons/base_address_extended/models/res_country.py
@@ -4,15 +4,10 @@
 from odoo import fields, models
 
 
-class ResCountry(models.Model):
+class Country(models.Model):
     _inherit = 'res.country'
 
-    street_format = fields.Text(
-        help="Format to use for streets belonging to this country.\n\n"
-             "You can use the python-style string pattern with all the fields of the street "
-             "(for example, use '%(street_name)s, %(street_number)s' if you want to display "
-             "the street name, followed by a comma and the house number)"
-             "\n%(street_name)s: the name of the street"
-             "\n%(street_number)s: the house number"
-             "\n%(street_number2)s: the door number",
-        default='%(street_number)s/%(street_number2)s %(street_name)s', required=True)
+    enforce_cities = fields.Boolean(
+        string='Enforce Cities',
+        help="Check this box to ensure every address created in that country has a 'City' chosen "
+             "in the list of the country's cities.")

--- a/addons/base_address_extended/models/res_partner.py
+++ b/addons/base_address_extended/models/res_partner.py
@@ -1,11 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-import re
-
-from odoo import api, fields, models, _
-from odoo.exceptions import UserError
-
+from odoo import api, fields, models, tools
 
 class Partner(models.Model):
     _inherit = ['res.partner']
@@ -17,123 +13,39 @@ class Partner(models.Model):
     street_number2 = fields.Char(
         'Door', compute='_compute_street_data', inverse='_inverse_street_data', store=True)
 
+    city_id = fields.Many2one(comodel_name='res.city', string='City ID')
+    country_enforce_cities = fields.Boolean(related='country_id.enforce_cities')
+
     def _inverse_street_data(self):
-        """Updates the street field.
-        Writes the `street` field on the partners when one of the sub-fields in STREET_FIELDS
-        has been touched"""
-        street_fields = self._get_street_fields()
+        """ update self.street based on street_name, street_number and street_number2 """
         for partner in self:
-            street_format = (partner.country_id.street_format or
-                '%(street_number)s/%(street_number2)s %(street_name)s')
-            previous_field = None
-            previous_pos = 0
-            street_value = ""
-            separator = ""
-            # iter on fields in street_format, detected as '%(<field_name>)s'
-            for re_match in re.finditer(r'%\(\w+\)s', street_format):
-                # [2:-2] is used to remove the extra chars '%(' and ')s'
-                field_name = re_match.group()[2:-2]
-                field_pos = re_match.start()
-                if field_name not in street_fields:
-                    raise UserError(_("Unrecognized field %s in street format.", field_name))
-                if not previous_field:
-                    # first iteration: add heading chars in street_format
-                    if partner[field_name]:
-                        street_value += street_format[0:field_pos] + partner[field_name]
-                else:
-                    # get the substring between 2 fields, to be used as separator
-                    separator = street_format[previous_pos:field_pos]
-                    if street_value and partner[field_name]:
-                        street_value += separator
-                    if partner[field_name]:
-                        street_value += partner[field_name]
-                previous_field = field_name
-                previous_pos = re_match.end()
-
-            # add trailing chars in street_format
-            street_value += street_format[previous_pos:]
-            partner.street = street_value
+            street = ((partner.street_name or '') + " " + (partner.street_number or '')).strip()
+            if partner.street_number2:
+                street = street + " - " + partner.street_number2
+            partner.street = street
 
     @api.depends('street')
     def _compute_street_data(self):
         """Splits street value into sub-fields.
         Recomputes the fields of STREET_FIELDS when `street` of a partner is updated"""
-        street_fields = self._get_street_fields()
         for partner in self:
-            if not partner.street:
-                for field in street_fields:
-                    partner[field] = None
-                continue
-
-            street_format = (partner.country_id.street_format or
-                '%(street_number)s/%(street_number2)s %(street_name)s')
-            street_raw = partner.street
-            vals = self._split_street_with_params(street_raw, street_format)
-            # assign the values to the fields
-            for k, v in vals.items():
-                partner[k] = v
-            for k in set(street_fields) - set(vals):
-                partner[k] = None
-
-    def _split_street_with_params(self, street_raw, street_format):
-        street_fields = self._get_street_fields()
-        vals = {}
-        previous_pos = 0
-        field_name = None
-        # iter on fields in street_format, detected as '%(<field_name>)s'
-        for re_match in re.finditer(r'%\(\w+\)s', street_format):
-            field_pos = re_match.start()
-            if not field_name:
-                #first iteration: remove the heading chars
-                street_raw = street_raw[field_pos:]
-
-            # get the substring between 2 fields, to be used as separator
-            separator = street_format[previous_pos:field_pos]
-            field_value = None
-            if separator and field_name:
-                #maxsplit set to 1 to unpack only the first element and let the rest untouched
-                tmp = street_raw.split(separator, 1)
-                if previous_greedy in vals:
-                    # attach part before space to preceding greedy field
-                    append_previous, sep, tmp[0] = tmp[0].rpartition(' ')
-                    street_raw = separator.join(tmp)
-                    vals[previous_greedy] += sep + append_previous
-                if len(tmp) == 2:
-                    field_value, street_raw = tmp
-                    vals[field_name] = field_value
-            if field_value or not field_name:
-                previous_greedy = None
-                if field_name == 'street_name' and separator == ' ':
-                    previous_greedy = field_name
-                # select next field to find (first pass OR field found)
-                # [2:-2] is used to remove the extra chars '%(' and ')s'
-                field_name = re_match.group()[2:-2]
-            else:
-                # value not found: keep looking for the same field
-                pass
-            if field_name not in street_fields:
-                raise UserError(_("Unrecognized field %s in street format.", field_name))
-            previous_pos = re_match.end()
-
-        # last field value is what remains in street_raw minus trailing chars in street_format
-        trailing_chars = street_format[previous_pos:]
-        if trailing_chars and street_raw.endswith(trailing_chars):
-            vals[field_name] = street_raw[:-len(trailing_chars)]
-        else:
-            vals[field_name] = street_raw
-        return vals
-
-    def write(self, vals):
-        res = super(Partner, self).write(vals)
-        if 'country_id' in vals and 'street' not in vals:
-            self._inverse_street_data()
-        return res
-
-    def _formatting_address_fields(self):
-        """Returns the list of address fields usable to format addresses."""
-        return super(Partner, self)._formatting_address_fields() + self._get_street_fields()
-
-    def _get_street_fields(self):
-        """Returns the fields that can be used in a street format.
-        Overwrite this function if you want to add your own fields."""
-        return ['street_name', 'street_number', 'street_number2']
+            partner.update(tools.street_split(partner.street))
+
+    def _get_street_split(self):
+        self.ensure_one()
+        return {
+            'street_name': self.street_name,
+            'street_number': self.street_number,
+            'street_number2': self.street_number2
+        }
+
+    @api.onchange('city_id')
+    def _onchange_city_id(self):
+        if self.city_id:
+            self.city = self.city_id.name
+            self.zip = self.city_id.zipcode
+            self.state_id = self.city_id.state_id
+        elif self._origin:
+            self.city = False
+            self.zip = False
+            self.state_id = False
