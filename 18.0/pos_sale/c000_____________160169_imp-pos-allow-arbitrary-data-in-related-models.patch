PR: https://github.com/odoo/odoo/pull/160169

From: 02f756d061f1e52a2265e051ac57b13b311fb115
From: David Monnom (moda)
Date: 2024-04-29 23:21:31

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = 'sale.order'
-    _inherit = 'sale.order.line'

Total Changes: 59

[IMP] pos_*: allow arbitrary data in related models

*: All pos related modules

This commit allows to access arbitrary data in related models. This is
useful for data that are computed on the server side and that are not
recomputed on the client side.

Before this commit, it was only possible to access data that are linked
to a field in the model.

Now custom data coming from the server can be added to any record with
the prefix `_` in the key. For example, if the server sends the
following data for `pos.order`:

Classic fields:
```
{
  id: 1,
  name: 'Order 1',
  partner_id: 1,
  partner_name: 'Partner 1',
}
```

Custom fields:
```
{
  id: 1,
  name: 'Order 1',
  partner_id: 1,
  partner_name: 'Partner 1',
  _custom_field: 'Custom value',
}
```

closes odoo/odoo#160169

Related: odoo/enterprise#60017
Signed-off-by: Adrien Guilliams (adgu) <adgu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_sale/models/pos_order.py
+++ b/addons/pos_sale/models/pos_order.py
@@ -182,3 +182,8 @@ class PosOrderLine(models.Model):
                 else:
                     order_line.qty_delivered = 0
 
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        params = super()._load_pos_data_fields(config_id)
+        params += ['sale_order_origin_id', 'sale_order_line_id', 'down_payment_details']
+        return params

--- a/addons/pos_sale/models/pos_session.py
+++ b/addons/pos_sale/models/pos_session.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import fields, models
+from odoo import fields, models, api
 
 
 class PosSession(models.Model):
@@ -9,18 +9,8 @@ class PosSession(models.Model):
 
     crm_team_id = fields.Many2one('crm.team', related='config_id.crm_team_id', string="Sales Team", readonly=True)
 
-    def _load_data_params(self, config_id):
-        params = super()._load_data_params(config_id)
-        params['product.product']['fields'].extend(['invoice_policy', 'optional_product_ids', 'type'])
-        params['pos.order.line']['fields'].extend(['sale_order_origin_id', 'sale_order_line_id', 'down_payment_details'])
-        params['sale.order'] = {
-            'domain': [['pos_order_line_ids.order_id.state', '=', 'draft']],
-            'fields': ['name', 'state', 'user_id', 'order_line', 'partner_id', 'pricelist_id', 'fiscal_position_id', 'amount_total', 'amount_untaxed', 'amount_unpaid',
-                'picking_ids', 'partner_shipping_id', 'partner_invoice_id', 'date_order']
-        }
-        params['sale.order.line'] = {
-            'domain': lambda data: [('order_id', 'in', [order['id'] for order in data['sale.order']])],
-            'fields': ['discount', 'display_name', 'price_total', 'price_unit', 'product_id', 'product_uom_qty', 'qty_delivered',
-                'qty_invoiced', 'qty_to_invoice', 'display_type', 'name', 'tax_id']
-        }
-        return params
+    @api.model
+    def _load_pos_data_models(self, config_id):
+        data = super()._load_pos_data_models(config_id)
+        data += ['sale.order', 'sale.order.line']
+        return data

--- a/addons/pos_sale/models/product_product.py
+++ b/addons/pos_sale/models/product_product.py
@@ -1,9 +1,15 @@
-from odoo import models
+from odoo import models, api
 
 
 class ProductProduct(models.Model):
     _inherit = 'product.product'
 
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        params = super()._load_pos_data_fields(config_id)
+        params += ['invoice_policy', 'optional_product_ids', 'type']
+        return params
+
     def get_product_info_pos(self, price, quantity, pos_config_id):
         res = super().get_product_info_pos(price, quantity, pos_config_id)
 

--- a/addons/pos_sale/models/sale_order.py
+++ b/addons/pos_sale/models/sale_order.py
@@ -5,12 +5,22 @@ from odoo import api, fields, models, _
 
 
 class SaleOrder(models.Model):
-    _inherit = 'sale.order'
+    _name = 'sale.order'
+    _inherit = ['sale.order', 'pos.load.mixin']
 
     pos_order_line_ids = fields.One2many('pos.order.line', 'sale_order_origin_id', string="Order lines Transfered to Point of Sale", readonly=True, groups="point_of_sale.group_pos_user")
     pos_order_count = fields.Integer(string='Pos Order Count', compute='_count_pos_order', readonly=True, groups="point_of_sale.group_pos_user")
     amount_unpaid = fields.Monetary(string='Unpaid Amount', compute='_compute_amount_unpaid', store=True, help="The amount due from the sale order.")
 
+    @api.model
+    def _load_pos_data_domain(self, data):
+        return [['pos_order_line_ids.order_id.state', '=', 'draft']]
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return ['name', 'state', 'user_id', 'order_line', 'partner_id', 'pricelist_id', 'fiscal_position_id', 'amount_total', 'amount_untaxed', 'amount_unpaid',
+            'picking_ids', 'partner_shipping_id', 'partner_invoice_id', 'date_order']
+
     def _count_pos_order(self):
         for order in self:
             linked_orders = order.pos_order_line_ids.mapped('order_id')
@@ -35,10 +45,20 @@ class SaleOrder(models.Model):
             sale_order.amount_unpaid = sale_order.amount_total - (total_invoice_paid + total_pos_paid)
 
 class SaleOrderLine(models.Model):
-    _inherit = 'sale.order.line'
+    _name = 'sale.order.line'
+    _inherit = ['sale.order.line', 'pos.load.mixin']
 
     pos_order_line_ids = fields.One2many('pos.order.line', 'sale_order_line_id', string="Order lines Transfered to Point of Sale", readonly=True, groups="point_of_sale.group_pos_user")
 
+    @api.model
+    def _load_pos_data_domain(self, data):
+        return [('order_id', 'in', [order['id'] for order in data['sale.order']['data']])]
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return ['discount', 'display_name', 'price_total', 'price_unit', 'product_id', 'product_uom_qty', 'qty_delivered',
+            'qty_invoiced', 'qty_to_invoice', 'display_type', 'name', 'tax_id']
+
     @api.depends('pos_order_line_ids.qty')
     def _compute_qty_delivered(self):
         super()._compute_qty_delivered()
