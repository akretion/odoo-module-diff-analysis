PR: https://github.com/odoo/odoo/pull/193490

From: 8fd73ea390ba0de0a7ed418398ffdd6b8e8f55fd
From: Mohammad Abdulmoneim (abdu)
Date: 2025-01-14 09:03:42

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = 'decimal.precision'
-    _inherit = 'uom.uom'

Total Changes: 59

[IMP] uom: unify rounding precision on all units of measure

Previous to this commit, users could define a different rounding
precision on each unit of measure. This led to some incosistencies with
the decimal accuracy record "Product Unit of Measure" which is also used
in some scenarios to set the rounding precision of unit-related
computations. This commit removes the ability to set the rounding
precision on the unit level and makes it a computed field always based
on the above mentioned `decimal.precision` record, so that both values
are always the same. The field is now considered dummy and can be
removed in a later changed and all of its occurrences can be replaced
with the corresponding decimal accuracy record.

Task-4252043

Part-of: odoo/odoo#193490
Related: odoo/enterprise#77092
Signed-off-by: Arnold Moyaux (arm) <arm@odoo.com>
Signed-off-by: Mohammad Abdulmoneim (abdu) <abdu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/product/models/__init__.py
+++ b/addons/product/models/__init__.py
@@ -7,7 +7,6 @@
 from . import product_template
 from . import product_product
 
-from . import decimal_precision
 from . import ir_attachment
 from . import product_attribute
 from . import product_attribute_custom_value
@@ -30,4 +29,3 @@ from . import res_config_settings
 from . import res_country_group
 from . import res_currency
 from . import res_partner
-from . import uom_uom

--- a/addons/product/models/decimal_precision.py
+++ b/None
@@ -1,30 +0,0 @@
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, models, _
-
-
-class DecimalPrecision(models.Model):
-    _inherit = 'decimal.precision'
-
-    @api.onchange('digits')
-    def _onchange_digits(self):
-        if self.name != "Product Unit of Measure":  # precision_get() relies on this name
-            return
-        # We are changing the precision of UOM fields; check whether the
-        # precision is equal or higher than existing units of measure.
-        rounding = 1.0 / 10.0**self.digits
-        dangerous_uom = self.env['uom.uom'].search([('rounding', '<', rounding)])
-        if dangerous_uom:
-            uom_descriptions = [
-                " - %s (id=%s, precision=%s)" % (uom.name, uom.id, uom.rounding)
-                for uom in dangerous_uom
-            ]
-            return {'warning': {
-                'title': _('Warning!'),
-                'message': _(
-                    "You are setting a Decimal Accuracy less precise than the UOMs:\n"
-                    "%s\n"
-                    "This may cause inconsistencies in computations.\n"
-                    "Please increase the rounding of those units of measure, or the digits of this Decimal Accuracy.",
-                    '\n'.join(uom_descriptions)),
-            }}

--- a/addons/product/models/product_pricelist_item.py
+++ b/addons/product/models/product_pricelist_item.py
@@ -38,7 +38,7 @@ class ProductPricelistItem(models.Model):
     min_quantity = fields.Float(
         string="Min. Quantity",
         default=0,
-        digits='Product Unit of Measure',
+        digits='Product Unit',
         help="For the rule to apply, bought/sold quantity must be greater "
              "than or equal to the minimum quantity specified in this field.\n"
              "Expressed in the default unit of measure of the product.")

--- a/addons/product/models/product_product.py
+++ b/addons/product/models/product_product.py
@@ -694,7 +694,7 @@ class ProductProduct(models.Model):
         self.ensure_one()
         if not date:
             date = fields.Date.context_today(self)
-        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
+        precision = self.env['decimal.precision'].precision_get('Product Unit')
 
         sellers_filtered = self._prepare_sellers(params)
         sellers_filtered = sellers_filtered.filtered(lambda s: not s.company_id or s.company_id.id == self.env.company.id)

--- a/addons/product/models/product_supplierinfo.py
+++ b/addons/product/models/product_supplierinfo.py
@@ -34,7 +34,7 @@ class ProductSupplierinfo(models.Model):
         'uom.uom', 'Unit of Measure',
         related='product_tmpl_id.uom_po_id')
     min_qty = fields.Float(
-        'Quantity', default=0.0, required=True, digits="Product Unit of Measure",
+        'Quantity', default=0.0, required=True, digits="Product Unit",
         help="The quantity to purchase from this vendor to benefit from the price, expressed in the vendor Product Unit of Measure if not any, in the default unit of measure of the product otherwise.")
     price = fields.Float(
         'Price', default=0.0, digits='Product Price',

--- a/addons/product/models/uom_uom.py
+++ b/None
@@ -1,21 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, models, _
-
-
-class UomUom(models.Model):
-    _inherit = 'uom.uom'
-
-    @api.onchange('rounding')
-    def _onchange_rounding(self):
-        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
-        if self.rounding < 1.0 / 10.0**precision:
-            return {'warning': {
-                'title': _('Warning!'),
-                'message': _(
-                    "This rounding precision is higher than the Decimal Accuracy"
-                    " (%(digits)s digits).\nThis may cause inconsistencies in computations.\n"
-                    "Please set a precision between %(min_precision)s and 1.",
-                    digits=precision, min_precision=1.0 / 10.0**precision),
-            }}
