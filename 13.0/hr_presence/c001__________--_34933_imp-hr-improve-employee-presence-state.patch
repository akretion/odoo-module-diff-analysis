PR: https://github.com/odoo/odoo/pull/34933

From: f6fdde96bddfedf8764cd8a73089e44340d476ae
From: Lucas LefÃ¨vre
Date: 2019-07-17 09:11:18

Breaking data model changes score: 11, change matches:
-    _inherit = 'hr.employee'
-    hr_presence_state = fields.Selection([
-    last_activity = fields.Date(compute="_compute_last_activity")
-    hr_presence_control_email_amount = fields.Integer(string="# emails to send")
-    hr_presence_control_ip_list = fields.Char(string="Valid IP addresses")
-    _inherit = 'res.config.settings'
-    hr_presence_control_login = fields.Boolean(string="According to the system login (User status on chat)", config_parameter='hr_presence.hr_presence_control_login')
-    hr_presence_control_email = fields.Boolean(string="According to the amount of sent emails", config_parameter='hr_presence.hr_presence_control_email')
-    hr_presence_control_ip = fields.Boolean(string="According to the IP address", config_parameter='hr_presence.hr_presence_control_ip')
-    hr_presence_control_email_amount = fields.Integer(related="company_id.hr_presence_control_email_amount", readonly=False)
-    hr_presence_control_ip_list = fields.Char(related="company_id.hr_presence_control_ip_list", readonly=False)

Total Changes: 94

[IMP] hr_*: Improve employee presence state

Purpose
=======
There are currently multiple ways to determine if an employee is presence
or absent:
* login state (user status on chat)
* checkin/checkout from the Attendance app
* leave
* hr_presence (email, ip)
Those states are displayed in several different places and can be inconsitent.
e.g. Logged in -> green in the chat
Not checked in -> red on the employee kanban view.

The multiple ways to determine employee presence described above
should be aggregated together to have a better consistency.

Specification
=============
There are 3 presence states (previously defined in module `hr_presence`),
namely `present`, `absent`, `to_define`. They are now defined as soon as
`hr` module is installed.

The state computation can have several behaviors according to which apps
are installed:

1. `hr` is installed
Check employee presence based on login by default (only for employees with
a user).
Kanban state (private and public): should be green when logged in, red when logged out and
orange when the user is away.
Private employee form: Display a stat button "Connected" on the form view
when the user is logged in or "Last Activity xx/xx/xxx" otherwise.

2. `hr_attendance` is installed:
when the user is logged out, the state
is determined from the checked in/out state. But when the user is logged in,
consider the user as present (even if he checked out).
Kanban state: green for checked in, red for checked out
Private form view: attendance stat button.

3. `hr_holidays` is installed:
Has the highest priority if the employee is on leave.
Kanban state: red if employee is on leave.
Private form view: stat button "Absent Until xx/xx/xxxx" if employee
is on leave.

4. `hr_presence` is installed:
Two additionnal presence checking option: emails sent and IP address connected.
Once a user sent an email or the IP address was connected, he is considered
present for the entire day.

There should be at most one stat button on the employee form view, with the
relevent information.

Task id: 2024482

closes odoo/odoo#34933

Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_presence/models/__init__.py
+++ b/addons/hr_presence/models/__init__.py
@@ -3,5 +3,4 @@
 
 from . import hr_employee
 from . import res_company
-from . import res_config_settings
 from . import res_users_log

--- a/addons/hr_presence/models/hr_employee.py
+++ b/addons/hr_presence/models/hr_employee.py
@@ -10,21 +10,28 @@ from odoo.fields import Datetime
 _logger = logging.getLogger(__name__)
 
 
-class ResCompany(models.Model):
-    _inherit = 'hr.employee'
+class Employee(models.AbstractModel):
+    _inherit = 'hr.employee.base'
 
-    hr_presence_state = fields.Selection([
+    email_sent = fields.Boolean(default=False)
+    ip_connected = fields.Boolean(default=False)
+    manually_set_present = fields.Boolean(default=False)
+
+    # Stored field used in the presence kanban reporting view
+    # to allow group by state.
+    hr_presence_state_display = fields.Selection([
         ('present', 'Present'),
         ('absent', 'Absent'),
-        ('to_define', 'To Define')], groups="hr.group_hr_user", default='to_define')
-    last_activity = fields.Date(compute="_compute_last_activity")
-
-    def _compute_last_activity(self):
-        employees = self.filtered(lambda e: e.user_id)
-        presences = self.env['bus.presence'].search([('user_id', 'in', employees.mapped('user_id.id'))])
+        ('to_define', 'To Define')])
 
-        for presence in presences:
-            presence.user_id.employee_ids.last_activity = presence.last_presence.date()
+    def _compute_presence_state(self):
+        super()._compute_presence_state()
+        employees = self.filtered(lambda employee: employee.hr_presence_state != 'present' and not employee.is_absent)
+        company = self.env.company
+        for employee in employees:
+            if not employee.is_absent and company.hr_presence_last_compute_date and company.hr_presence_last_compute_date.day == Datetime.now().day and \
+                    (employee.email_sent or employee.ip_connected or employee.manually_set_present):
+                employee.hr_presence_state = 'present'
 
     @api.model
     def _check_presence(self):
@@ -32,28 +39,16 @@ class ResCompany(models.Model):
         if not company.hr_presence_last_compute_date or \
                 company.hr_presence_last_compute_date.day != Datetime.now().day:
             self.env['hr.employee'].search([
-                ('department_id.company_id', '=', company.id)
-            ]).write({'hr_presence_state': 'to_define'})
-
-        employees = self.env['hr.employee'].search([
-            ('department_id.company_id', '=', company.id),
-            ('user_id', '!=', False),
-            ('hr_presence_state', '=', 'to_define')])
-
-        # Remove employees on holidays
-        leaves = self.env['hr.leave'].search([
-            ('state', '=', 'validate'),
-            ('date_from', '<=', Datetime.to_string(Datetime.now())),
-            ('date_to', '>=', Datetime.to_string(Datetime.now()))])
-        employees_on_holiday = leaves.mapped('employee_id')
-        employees_on_holiday.write({'hr_presence_state': 'absent'})
-        employees = employees - employees_on_holiday
-
-        # Check on system login
-        if self.env['ir.config_parameter'].sudo().get_param('hr_presence.hr_presence_control_login'):
-            online_employees = employees.filtered(lambda employee: employee.user_id.im_status in ['away', 'online'])
-            online_employees.write({'hr_presence_state': 'present'})
-            employees = employees - online_employees
+                ('company_id', '=', company.id)
+            ]).write({
+                'email_sent': False,
+                'ip_connected': False,
+                'manually_set_present': False
+            })
+
+        employees = self.env['hr.employee'].search([('company_id', '=', company.id)])
+        all_employees = employees
+
 
         # Check on IP
         if self.env['ir.config_parameter'].sudo().get_param('hr_presence.hr_presence_control_ip'):
@@ -68,7 +63,7 @@ class ResCompany(models.Model):
                 ).mapped('ip')
                 if any([ip in ip_list for ip in employee_ips]):
                     ip_employees |= employee
-            ip_employees.write({'hr_presence_state': 'present'})
+            ip_employees.write({'ip_connected': True})
             employees = employees - ip_employees
 
         # Check on sent emails
@@ -82,10 +77,13 @@ class ResCompany(models.Model):
                     ('date', '<=', Datetime.to_string(Datetime.now()))])
                 if sent_emails >= threshold:
                     email_employees |= employee
-            email_employees.write({'hr_presence_state': 'present'})
+            email_employees.write({'email_sent': True})
             employees = employees - email_employees
 
-        company.hr_presence_last_compute_date = Datetime.now()
+        company.sudo().hr_presence_last_compute_date = Datetime.now()
+
+        for employee in all_employees:
+            employee.hr_presence_state_display = employee.hr_presence_state
 
     @api.model
     def _action_open_presence_view(self):
@@ -110,7 +108,12 @@ class ResCompany(models.Model):
     def action_set_present(self):
         if not self.env.user.has_group('hr.group_hr_manager'):
             raise UserError(_("You don't have the right to do this. Please contact an Administrator."))
-        self.write({'hr_presence_state': 'present'})
+        self.write({'manually_set_present': True})
+
+    def write(self, vals):
+        if vals.get('hr_presence_state_display') == 'present':
+            vals['manually_set_present'] = True
+        return super().write(vals)
 
     def action_open_leave_request(self):
         self.ensure_one()

--- a/addons/hr_presence/models/res_company.py
+++ b/addons/hr_presence/models/res_company.py
@@ -7,7 +7,4 @@ from odoo import fields, models
 class ResCompany(models.Model):
     _inherit = 'res.company'
 
-
-    hr_presence_control_email_amount = fields.Integer(string="# emails to send")
-    hr_presence_control_ip_list = fields.Char(string="Valid IP addresses")
     hr_presence_last_compute_date = fields.Datetime()

--- a/addons/hr_presence/models/res_config_settings.py
+++ b/None
@@ -1,13 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from odoo import fields, models
-
-
-class ResConfigSettings(models.TransientModel):
-    _inherit = 'res.config.settings'
-
-    hr_presence_control_login = fields.Boolean(string="According to the system login (User status on chat)", config_parameter='hr_presence.hr_presence_control_login')
-    hr_presence_control_email = fields.Boolean(string="According to the amount of sent emails", config_parameter='hr_presence.hr_presence_control_email')
-    hr_presence_control_ip = fields.Boolean(string="According to the IP address", config_parameter='hr_presence.hr_presence_control_ip')
-    hr_presence_control_email_amount = fields.Integer(related="company_id.hr_presence_control_email_amount", readonly=False)
-    hr_presence_control_ip_list = fields.Char(related="company_id.hr_presence_control_ip_list", readonly=False)
