PR: https://github.com/odoo/odoo/pull/85110

From: 880954ebfc1106411b7f7a7d60aee05dfae60893
From: Gorash
Date: 2022-03-29 08:56:15

Structural Changes: 2
Total Changes: 49

[IMP] *: remove `_render` from `ir.ui.view` and simplify report

There were inconsistencies in the calls to `_render`.
* the view context could contain information that misled developers.
Indeed, the context and value of the view are not supposed to be found
in the rendering. Thus by calling `ir.qweb` with the name of the
template, we ensure that there is no unwanted information and in
addition the cache key is that of the name of the template which saves
a query.
* the context used for rendering was modified by a method on
`ir.ui.view`, except this is not information used by this model. There
is now a `_prepare_environment` method residing on `ir.qweb`. This
method allows to modify the value dictionary as well as the context in
which the rendering will be done. This preparation of the data as well
as my security check is done only once per rendering. This also saves
some queries
* Freeze options for rendering were inconsistent. It could be that
options on which rendering depends were not part of the cache key. Thus,
depending on the user who generated the generation of the rendering
function, there was or was not information in the template. For example
for automatic branding. This is no longer possible, because it is the
context that is used. The options serving as a cache key are only
recorded for information (for the profiling system for example). A
simplification of the `ir.qweb.field` models could be made.

The report rendering and call `ir.qweb` instead of `ir.ui.view`.

Part-of: odoo/odoo#85110

================================= pseudo patch: =================================

--- a/addons/portal/models/__init__.py
+++ b/addons/portal/models/__init__.py
@@ -3,6 +3,7 @@
 
 from . import ir_http
 from . import ir_ui_view
+from . import ir_qweb
 from . import mail_thread
 from . import mail_message
 from . import portal_mixin

--- a/None
+++ b/addons/portal/models/ir_qweb.py
@@ -0,0 +1,26 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models
+from odoo.tools import is_html_empty
+
+
+class IrQWeb(models.AbstractModel):
+    _inherit = "ir.qweb"
+
+    def _prepare_frontend_environment(self, values):
+        """ Returns ir.qweb with context and update values with portal specific
+            value (required to render portal layout template)
+        """
+        irQweb = super()._prepare_frontend_environment(values)
+        values.update(
+            is_html_empty=is_html_empty,
+            languages=[lang for
+                    lang in irQweb.env['res.lang'].get_available()
+                    if lang[0] in irQweb.env['ir.http']._get_frontend_langs()]
+        )
+        for key in irQweb.env.context:
+            if key not in values:
+                values[key] = irQweb.env.context[key]
+
+        return irQweb

--- a/addons/portal/models/ir_ui_view.py
+++ b/addons/portal/models/ir_ui_view.py
@@ -1,30 +1,10 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, models, fields
-from odoo.http import request
-from odoo.addons.http_routing.models.ir_http import url_for
-from odoo.tools import is_html_empty
+from odoo import models, fields
 
 
 class View(models.Model):
     _inherit = "ir.ui.view"
 
     customize_show = fields.Boolean("Show As Optional Inherit", default=False)
-
-    @api.model
-    def _prepare_qcontext(self):
-        """ Returns the qcontext : rendering context with portal specific value (required
-            to render portal layout template)
-        """
-        qcontext = super(View, self)._prepare_qcontext()
-        if request and getattr(request, 'is_frontend', False):
-            Lang = request.env['res.lang']
-            portal_lang_code = request.env['ir.http']._get_frontend_langs()
-            qcontext.update(dict(
-                self._context.copy(),
-                languages=[lang for lang in Lang.get_available() if lang[0] in portal_lang_code],
-                url_for=url_for,
-                is_html_empty=is_html_empty,
-            ))
-        return qcontext
