PR: https://github.com/odoo/odoo/pull/65729

From: ad602bba0c43604be385c16362545734db2f34bf
From: nounoubensebia
Date: 2021-03-30 13:17:07

Structural Changes: 2
Total Changes: 40

[FIX] calendar_event, tools: appointment time mismatch

add mail_tz to calendar_attendee model in order to make it easier to change the
timezone displayed in the mail template so that we can use it to make the
appointment time shown on the email reminder sent to the attendees consistent
with the time shown on the website page.

Change the invitation mail template and use the mail_tz field to display time
field instead of using the partner's timezone in order to make the time shown
in the invitation consistent with the time shown on the website page.

Remove the get_interval method in the calendar_event model and use standard
formatting tools instead, as this is more conveniant than having a custom
method for formatting dates, For this reason the format_time function located
in tools/misc.py has been modified to be capable of handling timezones in
order to be able to display time in the correct timezone, furthermore, this
function has been added to the rendering context provided in the
mail_render_mixin file to be used in email templates.

see: https://github.com/odoo/enterprise/pull/16204

Task-2451154

closes odoo/odoo#65729

Related: odoo/enterprise#16204
Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/calendar/models/calendar_attendee.py
+++ b/addons/calendar/models/calendar_attendee.py
@@ -5,6 +5,7 @@ import base64
 import logging
 
 from odoo import api, fields, models, _
+from odoo.addons.base.models.res_partner import _tz_get
 from odoo.exceptions import UserError
 
 _logger = logging.getLogger(__name__)
@@ -36,6 +37,7 @@ class Attendee(models.Model):
     phone = fields.Char('Phone', related='partner_id.phone', help="Phone number of Invited Person")
     common_name = fields.Char('Common name', compute='_compute_common_name', store=True)
     access_token = fields.Char('Invitation Token', default=_default_access_token)
+    mail_tz = fields.Selection(_tz_get, compute='_compute_mail_tz', help='Timezone used for displaying time in the mail template')
     # state
     state = fields.Selection(STATE_SELECTION, string='Status', readonly=True, default='needsAction',
                              help="Status of the attendee's participation")
@@ -47,6 +49,10 @@ class Attendee(models.Model):
         for attendee in self:
             attendee.common_name = attendee.partner_id.name or attendee.email
 
+    def _compute_mail_tz(self):
+        for attendee in self:
+            attendee.mail_tz = attendee.partner_id.tz
+
     @api.model_create_multi
     def create(self, vals_list):
         for values in vals_list:

--- a/addons/calendar/models/calendar_event.py
+++ b/addons/calendar/models/calendar_event.py
@@ -4,7 +4,6 @@
 from datetime import timedelta
 import math
 from uuid import uuid4
-import babel.dates
 import logging
 import pytz
 from werkzeug.urls import url_join
@@ -749,39 +748,6 @@ class Meeting(models.Model):
         self.ensure_one()
         return (self.start, self.stop)
 
-    def get_interval(self, interval, tz=None):
-        """ Format and localize some dates to be used in email templates
-            :param string interval: Among 'day', 'month', 'dayname' and 'time' indicating the desired formatting
-            :param string tz: Timezone indicator (optional)
-            :return unicode: Formatted date or time (as unicode string, to prevent jinja2 crash)
-        """
-        self.ensure_one()
-        date = fields.Datetime.from_string(self.start)
-
-        if tz:
-            timezone = pytz.timezone(tz or 'UTC')
-            date = date.replace(tzinfo=pytz.timezone('UTC')).astimezone(timezone)
-
-        if interval == 'day':
-            # Day number (1-31)
-            result = str(date.day)
-
-        elif interval == 'month':
-            # Localized month name and year
-            result = babel.dates.format_date(date=date, format='MMMM y', locale=get_lang(self.env).code)
-
-        elif interval == 'dayname':
-            # Localized day name
-            result = babel.dates.format_date(date=date, format='EEEE', locale=get_lang(self.env).code)
-
-        elif interval == 'time':
-            # Localized time
-            # FIXME: formats are specifically encoded to bytes, maybe use babel?
-            dummy, format_time = self._get_date_formats()
-            result = tools.ustr(date.strftime(format_time + " %Z"))
-
-        return result
-
     def get_display_time_tz(self, tz=False):
         """ get the display_time of the meeting, forcing the timezone. This method is called from email template, to not use sudo(). """
         self.ensure_one()
