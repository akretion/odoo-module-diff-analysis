PR: https://github.com/odoo/odoo/pull/33863

From: ed18095127b20da516fa5ada943b2dd6d5c84652
From: Julien Mougenot
Date: 2019-07-29 08:29:26

Total Changes: 56

[IMP] base: Configure document layout

The onboarding modal for setting up the few base fields of a company
has now been moved to a wizard
It is accessible from the general settings, but also in the onboarding
section of sale and account modules.

The following company settings are editable with that wizard:

* Set report **layout**:
The user can chose the overall look of the report. The current choices
are : *Standard* (default), *Background*, *Boxed* and *Clean*.

* Set company **logo**:
Changes the company logo.

* Set report **colors**:
The user can set the primary and secondary colors of the report through
a newly added widget allowing to pick a custom color.
When changing the **logo**, colors are automatically set to its most dominant
colors.
> A "Reset colors" button also triggers the color calculation.

* Set report **font**:
Changes the overall font of the report. Only Google Fonts are used
for enhanced compatibility.

* Company **tagline**, also called "header"
* **Footer**
* **Paper format**
* Report **preview**:
A mockup of a final report
Automatically updates when changing **layout**, **logo**, **colors** or **font**

Co-authored by: Julien Mougenot <jum@odoo.com>

closes odoo/odoo#33863

Signed-off-by: VincentSchippefilt <VincentSchippefilt@users.noreply.github.com>


Co-authored-by: Lucas Perais <lpe@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/__init__.py
+++ b/odoo/addons/base/models/__init__.py
@@ -29,7 +29,7 @@ from . import ir_property
 from . import ir_module
 from . import ir_demo
 from . import ir_demo_failure
-
+from . import report_layout
 from . import report_paperformat
 
 from . import image_mixin

--- a/odoo/addons/base/models/ir_actions_report.py
+++ b/odoo/addons/base/models/ir_actions_report.py
@@ -791,18 +791,7 @@ class IrActionsReport(models.Model):
         """
         discard_logo_check = self.env.context.get('discard_logo_check')
         if self.env.is_admin() and ((not self.env.company.external_report_layout_id) or (not discard_logo_check and not self.env.company.logo)) and config:
-            template = self.env.ref('base.view_company_report_form_with_print') if self.env.context.get('from_transient_model', False) else self.env.ref('base.view_company_report_form')
-            return {
-                'name': _('Choose Your Document Layout'),
-                'type': 'ir.actions.act_window',
-                'context': {'default_report_name': self.report_name, 'discard_logo_check': True},
-                'view_mode': 'form',
-                'res_id': self.env.company.id,
-                'res_model': 'res.company',
-                'views': [(template.id, 'form')],
-                'view_id': template.id,
-                'target': 'new',
-            }
+            return self.env.ref('base.action_base_document_layout_configurator').read()[0]
 
         context = self.env.context
         if docids:

--- a/None
+++ b/odoo/addons/base/models/report_layout.py
@@ -0,0 +1,15 @@
+# -*- coding: ascii -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class ReportLayout(models.Model):
+    _name = "report.layout"
+    _description = 'Report Layout'
+
+    view_id = fields.Many2one('ir.ui.view', 'Document Template', required=True)
+    image = fields.Char(string="Preview image src")
+    pdf = fields.Char(string="Preview pdf src")
+
+    name = fields.Char()

--- a/odoo/addons/base/models/res_company.py
+++ b/odoo/addons/base/models/res_company.py
@@ -94,8 +94,9 @@ class Company(models.Model):
     base_onboarding_company_state = fields.Selection([
         ('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done")], string="State of the onboarding company step", default='not_done')
     favicon = fields.Binary(string="Company Favicon", help="This field holds the image used to display a favicon for a given company.", default=_get_default_favicon)
-
-
+    font = fields.Selection([("Lato", "Lato"), ("Roboto", "Roboto"), ("Open Sans", "Open Sans"), ("Montserrat", "Montserrat"), ("Oswald", "Oswald"), ("Raleway", "Raleway")], default="Lato")
+    primary_color = fields.Char()
+    secondary_color = fields.Char()
     _sql_constraints = [
         ('name_uniq', 'unique (name)', 'The company name must be unique !')
     ]
@@ -309,3 +310,24 @@ class Company(models.Model):
             main_company = self.env['res.company'].sudo().search([], limit=1, order="id")
 
         return main_company
+
+    def update_scss(self):
+        """ update the company scss stylesheet """
+        scss_properties = []
+        if self.primary_color:
+            scss_properties.append('$o-company-primary-color:%s;' % self.primary_color)
+        if self.secondary_color:
+            scss_properties.append('$o-company-secondary-color:%s;' % self.secondary_color)
+        if self.font:
+            scss_properties.append('$o-company-font:%s;' % self.font)
+        scss_string = '\n'.join(scss_properties)
+
+        if not len(scss_string):
+            scss_string = ""
+
+        scss_data = base64.b64encode((scss_string).encode('utf-8'))
+
+        attachment = self.env['ir.attachment'].search([('name', '=', 'res.company.scss')])
+        attachment.write({'datas': scss_data})
+
+        return ''
