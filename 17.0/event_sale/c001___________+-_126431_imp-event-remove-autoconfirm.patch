PR: https://github.com/odoo/odoo/pull/126431

From: 4a20cb320b8e251c3670c4fb25ee1b6ba9d2d19b
From: Jérémy Hennecart (jeh)
Date: 2023-10-13 07:33:49

Breaking data model changes score: 3, change matches:
-    _inherit = 'account.move'
-    payment_status = fields.Selection(string="Payment Status", selection=[
+    registration_ids = fields.One2many('event.registration', 'sale_order_line_id', string="Registrations")

Total Changes: 104

[IMP] *event*: remove autoconfirm

Remove autoconfirm logic and simplify the flow of event
registrations. Now a registration is by default considered
as confirmed.

The draft state is kept for registrations with
a payment pending.

These registrations are no longer counted
as expected attendees for the seats computation.
To match the behavior of events, we also add a seats_expected
computed field on event tickets.

The registration status is now based on the sale order state.
So the payment_status field is renamed sale_status.
We consider now that a registration linked to a SO in a sale
state should be confirmed and reserved.
A sale order is in the `sale` state when manually confirmed
or when the transactions done match the amount_total of the
sale order.

We also rename the seats_expected field into seats_taken to
better match the process. It was a bit weird to have expected
in the name when the registration attended were counted into it.

UPG PR: odoo/upgrade#4836

task-3061849

Part-of: odoo/odoo#126431

================================= pseudo patch: =================================

--- a/addons/event_sale/models/__init__.py
+++ b/addons/event_sale/models/__init__.py
@@ -1,6 +1,5 @@
 # -*- coding: utf-8 -*-
 
-from . import account_move
 from . import event_event
 from . import event_registration
 from . import event_ticket

--- a/addons/event_sale/models/account_move.py
+++ b/None
@@ -1,16 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import models
-
-
-class AccountMove(models.Model):
-    _inherit = 'account.move'
-
-    def _invoice_paid_hook(self):
-        """ When an invoice linked to a sales order selling registrations is
-        paid confirm attendees. Attendees should indeed not be confirmed before
-        full payment. """
-        res = super(AccountMove, self)._invoice_paid_hook()
-        self.mapped('line_ids.sale_line_ids')._update_registrations(confirm=True, mark_as_paid=True)
-        return res

--- a/addons/event_sale/models/event_registration.py
+++ b/addons/event_sale/models/event_registration.py
@@ -11,11 +11,12 @@ class EventRegistration(models.Model):
     # TDE FIXME: maybe add an onchange on sale_order_id
     sale_order_id = fields.Many2one('sale.order', string='Sales Order', ondelete='cascade', copy=False)
     sale_order_line_id = fields.Many2one('sale.order.line', string='Sales Order Line', ondelete='cascade', copy=False)
-    payment_status = fields.Selection(string="Payment Status", selection=[
-            ('to_pay', 'Not Paid'),
-            ('paid', 'Paid'),
+    sale_status = fields.Selection(string="Sale Status", selection=[
+            ('to_pay', 'Not Sold'),
+            ('sold', 'Sold'),
             ('free', 'Free'),
-        ], compute="_compute_payment_status", compute_sudo=True, store=True)
+        ], compute="_compute_registration_status", compute_sudo=True, store=True)
+    state = fields.Selection(default=None, compute="_compute_registration_status", store=True, readonly=False)
     utm_campaign_id = fields.Many2one(compute='_compute_utm_campaign_id', readonly=False,
         store=True, ondelete="set null")
     utm_source_id = fields.Many2one(compute='_compute_utm_source_id', readonly=False,
@@ -24,12 +25,20 @@ class EventRegistration(models.Model):
         store=True, ondelete="set null")
 
     @api.depends('sale_order_id.state', 'sale_order_id.currency_id', 'sale_order_line_id.price_total')
-    def _compute_payment_status(self):
+    def _compute_registration_status(self):
+        self.filtered(lambda reg: not reg.state).state = 'draft'
         for so_line, registrations in self.grouped('sale_order_line_id').items():
+            cancelled_registrations = registrations.filtered(lambda reg: reg.sale_order_id.state == 'cancel')
+            cancelled_registrations.state = 'cancel'
             if not so_line or float_is_zero(so_line.price_total, precision_digits=so_line.currency_id.rounding):
-                registrations.payment_status = 'free'
+                registrations.sale_status = 'free'
+                registrations.filtered(lambda reg: reg.state == 'draft').write({"state": "open"})
             else:
-                registrations.payment_status = 'to_pay'
+                sold_registrations = registrations.filtered(lambda reg: reg.sale_order_id.state == 'sale')
+                sold_registrations.sale_status = 'sold'
+                (registrations - sold_registrations).sale_status = 'to_pay'
+                sold_registrations.filtered(lambda reg: reg.state in {'draft', 'cancel'}).write({"state": "open"})
+                (registrations - sold_registrations - cancelled_registrations).state = 'draft'
 
     @api.depends('sale_order_id')
     def _compute_utm_campaign_id(self):
@@ -119,14 +128,11 @@ class EventRegistration(models.Model):
                 views_or_xmlid='event_sale.event_ticket_id_change_exception',
                 render_context=render_context)
 
-    def _action_set_paid(self):
-        self.write({'payment_status': 'paid'})
-
     def _get_registration_summary(self):
         res = super(EventRegistration, self)._get_registration_summary()
         res.update({
-            'payment_status': self.payment_status,
-            'payment_status_value': dict(self._fields['payment_status']._description_selection(self.env))[self.payment_status],
-            'has_to_pay': self.payment_status == 'to_pay',
+            'sale_status': self.sale_status,
+            'sale_status_value': dict(self._fields['sale_status']._description_selection(self.env))[self.sale_status],
+            'has_to_pay': self.sale_status == 'to_pay',
         })
         return res

--- a/addons/event_sale/models/sale_order.py
+++ b/addons/event_sale/models/sale_order.py
@@ -1,9 +1,10 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models, _
+from odoo import fields, models, _
 from odoo.exceptions import ValidationError
 from odoo.osv import expression
 
+
 class SaleOrder(models.Model):
     _inherit = "sale.order"
 
@@ -14,7 +15,7 @@ class SaleOrder(models.Model):
         in website_sale controller shop/address that updates customer, but not
         only. """
         result = super(SaleOrder, self).write(vals)
-        if vals.get('partner_id'):
+        if any(line.product_type == 'event' for line in self.order_line) and vals.get('partner_id'):
             registrations_toupdate = self.env['event.registration'].search([('sale_order_id', 'in', self.ids)])
             registrations_toupdate.write({'partner_id': vals['partner_id']})
         return result
@@ -28,18 +29,14 @@ class SaleOrder(models.Model):
             if so_lines_missing_events:
                 so_lines_descriptions = "".join([f"- {so_line_description.name} \n" for so_line_description in so_lines_missing_events])
                 raise ValidationError(_("Please make sure all your event related lines are configured before confirming this order: \n%s" % so_lines_descriptions))
-            # confirm registration if it was free (otherwise it will be confirmed once invoice fully paid)
-            so.order_line._update_registrations(confirm=so.amount_total == 0, cancel_to_draft=False)
+            # Initialize registrations
+            so.order_line._init_registrations()
             if len(self) == 1:
                 return self.env['ir.actions.act_window'].with_context(
                     default_sale_order_id=so.id
                 )._for_xml_id('event_sale.action_sale_order_event_registration')
         return res
 
-    def _action_cancel(self):
-        self.order_line._cancel_associated_registrations()
-        return super()._action_cancel()
-
     def action_view_attendee_list(self):
         action = self.env["ir.actions.actions"]._for_xml_id("event.event_registration_action_tree")
         action['domain'] = [('sale_order_id', 'in', self.ids)]
@@ -57,10 +54,6 @@ class SaleOrder(models.Model):
         for sale_order in self:
             sale_order.attendee_count = attendee_count_data.get(sale_order.id, 0)
 
-    def unlink(self):
-        self.order_line._unlink_associated_registrations()
-        return super(SaleOrder, self).unlink()
-
     def _get_product_catalog_domain(self):
         """Override of `_get_product_catalog_domain` to extend the domain.
 

--- a/addons/event_sale/models/sale_order_line.py
+++ b/addons/event_sale/models/sale_order_line.py
@@ -14,6 +14,7 @@ class SaleOrderLine(models.Model):
         'event.event.ticket', string='Event Ticket',
         compute="_compute_event_ticket_id", store=True, readonly=False, precompute=True,
         help="Choose an event ticket and it will automatically create a registration for this event ticket.")
+    registration_ids = fields.One2many('event.registration', 'sale_order_line_id', string="Registrations")
 
     @api.depends('state', 'event_id')
     def _compute_product_uom_readonly(self):
@@ -21,37 +22,24 @@ class SaleOrderLine(models.Model):
         event_lines.update({'product_uom_readonly': True})
         super(SaleOrderLine, self - event_lines)._compute_product_uom_readonly()
 
-    def _update_registrations(self, confirm=True, cancel_to_draft=False, registration_data=None, mark_as_paid=False):
-        """ Create or update registrations linked to a sales order line. A sale
+    def _init_registrations(self):
+        """ Create registrations linked to a sales order line. A sale
         order line has a product_uom_qty attribute that will be the number of
-        registrations linked to this line. This method update existing registrations
-        and create new one for missing one. """
-        RegistrationSudo = self.env['event.registration'].sudo()
-        registrations = RegistrationSudo.search([('sale_order_line_id', 'in', self.ids)])
+        registrations linked to this line. """
         registrations_vals = []
         for so_line in self:
             if not so_line.product_type == 'event':
                 continue
-            existing_registrations = registrations.filtered(lambda self: self.sale_order_line_id.id == so_line.id)
-            if confirm:
-                existing_registrations.filtered(lambda self: self.state not in ['open', 'cancel']).action_confirm()
-            if mark_as_paid:
-                existing_registrations.filtered(lambda self: self.payment_status == 'to_pay')._action_set_paid()
-            if cancel_to_draft:
-                existing_registrations.filtered(lambda self: self.state == 'cancel').action_set_draft()
-
-            for _count in range(int(so_line.product_uom_qty) - len(existing_registrations)):
+
+            for _count in range(int(so_line.product_uom_qty) - len(so_line.registration_ids)):
                 values = {
                     'sale_order_line_id': so_line.id,
-                    'sale_order_id': so_line.order_id.id
+                    'sale_order_id': so_line.order_id.id,
                 }
-                # TDE CHECK: auto confirmation
-                if registration_data:
-                    values.update(registration_data.pop())
                 registrations_vals.append(values)
 
         if registrations_vals:
-            RegistrationSudo.create(registrations_vals)
+            self.env['event.registration'].sudo().create(registrations_vals)
         return True
 
     @api.depends('product_id')
@@ -82,16 +70,6 @@ class SaleOrderLine(models.Model):
         """
         super()._compute_name()
 
-    def unlink(self):
-        self._unlink_associated_registrations()
-        return super(SaleOrderLine, self).unlink()
-
-    def _cancel_associated_registrations(self):
-        self.env['event.registration'].search([('sale_order_line_id', 'in', self.ids)]).action_cancel()
-
-    def _unlink_associated_registrations(self):
-        self.env['event.registration'].search([('sale_order_line_id', 'in', self.ids)]).unlink()
-
     def _get_sale_order_line_multiline_description_sale(self):
         """ We override this method because we decided that:
                 The default description of a sales order line containing a ticket must be different than the default description when no ticket is present.
