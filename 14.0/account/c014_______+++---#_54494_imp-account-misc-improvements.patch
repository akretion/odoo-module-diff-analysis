PR: https://github.com/odoo/odoo/pull/54494

From: 41f119d5325dfbbf916d1d34e63946646ed4d44c
From: Nicolas (vin)
Date: 2020-08-11 12:41:13

Structural Changes: 25
Total Changes: 244

[IMP] account: Misc. improvements

Miscellaneous changes aiming to improve the user experience in the accounting module,
mainly in the journal model and its form view.

Also aim to improve the bank account creation wizard.

Task ID: #2250349

closes odoo/odoo#54494

Related: odoo/upgrade#1546
Related: odoo/enterprise#11862
Signed-off-by: oco-odoo <oco-odoo@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_account.py
+++ b/addons/account/models/account_account.py
@@ -123,8 +123,7 @@ class AccountAccount(models.Model):
         self.env['account.account'].flush(['currency_id'])
         self.env['account.journal'].flush([
             'currency_id',
-            'default_debit_account_id',
-            'default_credit_account_id',
+            'default_account_id',
             'payment_debit_account_id',
             'payment_credit_account_id',
             'suspense_account_id',
@@ -134,9 +133,7 @@ class AccountAccount(models.Model):
             FROM account_account account
             JOIN res_company company ON company.id = account.company_id
             JOIN account_journal journal ON
-                journal.default_debit_account_id = account.id
-                OR
-                journal.default_credit_account_id = account.id
+                journal.default_account_id = account.id
             WHERE account.id IN %s
             AND journal.type IN ('bank', 'cash')
             AND journal.currency_id IS NOT NULL
@@ -179,7 +176,7 @@ class AccountAccount(models.Model):
             SELECT account.id
             FROM account_account account
             JOIN account_account_type acc_type ON account.user_type_id = acc_type.id
-            JOIN account_journal journal ON journal.default_credit_account_id = account.id OR journal.default_debit_account_id = account.id
+            JOIN account_journal journal ON journal.default_account_id = account.id
             WHERE account.id IN %s
             AND acc_type.type IN ('receivable', 'payable')
             AND journal.type IN ('sale', 'purchase')

--- a/addons/account/models/account_bank_statement.py
+++ b/addons/account/models/account_bank_statement.py
@@ -538,7 +538,7 @@ class AccountBankStatementLine(models.Model):
         other_lines = self.env['account.move.line']
 
         for line in self.move_id.line_ids:
-            if line.account_id in (self.journal_id.default_debit_account_id, self.journal_id.default_credit_account_id):
+            if line.account_id == self.journal_id.default_account_id:
                 liquidity_lines += line
             elif line.account_id == self.journal_id.suspense_account_id:
                 suspense_lines += line
@@ -590,7 +590,7 @@ class AccountBankStatementLine(models.Model):
             'move_id': self.move_id.id,
             'partner_id': self.partner_id.id,
             'currency_id': currency_id,
-            'account_id': journal.default_debit_account_id.id if balance >= 0 else journal.default_credit_account_id.id,
+            'account_id': journal.default_account_id.id,
             'debit': balance > 0 and balance or 0.0,
             'credit': balance < 0 and -balance or 0.0,
             'amount_currency': amount_currency,

--- a/addons/account/models/account_journal.py
+++ b/addons/account/models/account_journal.py
@@ -57,33 +57,39 @@ class AccountJournal(models.Model):
     account_control_ids = fields.Many2many('account.account', 'journal_account_control_rel', 'journal_id', 'account_id', string='Accounts Allowed',
         check_company=True,
         domain="[('deprecated', '=', False), ('company_id', '=', company_id)]")
-    default_credit_account_id = fields.Many2one('account.account', string='Default Credit Account', copy=False,
-        domain=[('deprecated', '=', False)], help="It acts as a default account for credit amount",
-        check_company=True,
-        ondelete='restrict')
-    default_debit_account_id = fields.Many2one('account.account', string='Default Debit Account', copy=False,
-        check_company=True,
-        domain="[('deprecated', '=', False), ('company_id', '=', company_id)]", help="It acts as a default account for debit amount", ondelete='restrict')
-    payment_debit_account_id = fields.Many2one('account.account', string='Outstanding Receipts Account', copy=False,
-        ondelete='restrict',
-        domain=[('deprecated', '=', False)],
+    default_account_type = fields.Many2one('account.account.type', compute="_compute_default_account_type")
+    default_account_id = fields.Many2one(
+        comodel_name='account.account', check_company=True, copy=False, ondelete='restrict',
+        string='Default Account',  help="It acts as a default account",
+        domain="[('deprecated', '=', False), ('company_id', '=', company_id),"
+               "('user_type_id', '=', default_account_type),"
+               "('user_type_id.type', 'not in', ('receivable', 'payable'))]")
+    payment_debit_account_id = fields.Many2one(
+        comodel_name='account.account', check_company=True, copy=False, ondelete='restrict',
         help="Incoming payments entries triggered by invoices/refunds will be posted on the Outstanding Receipts Account "
              "and displayed as blue lines in the bank reconciliation widget. During the reconciliation process, concerned "
              "transactions will be reconciled with entries on the Outstanding Receipts Account instead of the "
-             "receivable account.")
-    payment_credit_account_id = fields.Many2one('account.account', string='Outstanding Payments Account', copy=False,
-        ondelete='restrict',
-        domain=[('deprecated', '=', False)],
+             "receivable account.", string='Outstanding Receipts Account',
+        domain=lambda self: "[('deprecated', '=', False), ('company_id', '=', company_id), \
+                             ('user_type_id.type', 'not in', ('receivable', 'payable')), \
+                             ('user_type_id', '=', %s)]" % self.env.ref('account.data_account_type_current_assets').id)
+    payment_credit_account_id = fields.Many2one(
+        comodel_name='account.account', check_company=True, copy=False, ondelete='restrict',
         help="Outgoing payments entries triggered by bills/credit notes will be posted on the Outstanding Payments Account "
              "and displayed as blue lines in the bank reconciliation widget. During the reconciliation process, concerned "
              "transactions will be reconciled with entries on the Outstanding Payments Account instead of the "
-             "payable account.")
-    suspense_account_id = fields.Many2one('account.account', string='Bank Suspense Account',
-        ondelete='restrict', readonly=False, store=True,
+             "payable account.", string='Outstanding Payments Account',
+        domain=lambda self: "[('deprecated', '=', False), ('company_id', '=', company_id), \
+                             ('user_type_id.type', 'not in', ('receivable', 'payable')), \
+                             ('user_type_id', '=', %s)]" % self.env.ref('account.data_account_type_current_assets').id)
+    suspense_account_id = fields.Many2one(
+        comodel_name='account.account', check_company=True, ondelete='restrict', readonly=False, store=True,
         compute='_compute_suspense_account_id',
-        domain=[('deprecated', '=', False), ('reconcile', '=', True)],
         help="Bank statements transactions will be posted on the suspense account until the final reconciliation "
-             "allowing finding the right account.")
+             "allowing finding the right account.", string='Suspense Account',
+        domain=lambda self: "[('deprecated', '=', False), ('company_id', '=', company_id), \
+                             ('user_type_id.type', 'not in', ('receivable', 'payable')), \
+                             ('user_type_id', '=', %s)]" % self.env.ref('account.data_account_type_current_liabilities').id)
     restrict_mode_hash_table = fields.Boolean(string="Lock Posted Entries with Hash",
         help="If ticked, the accounting entry or invoice receives a hash as soon as it is posted and cannot be modified anymore.")
     sequence = fields.Integer(help='Used to order Journals in the dashboard view', default=10)
@@ -104,27 +110,32 @@ class AccountJournal(models.Model):
                                           "e.g: ^(?P<prefix1>.*?)(?P<year>\d{4})(?P<prefix2>\D*?)(?P<month>\d{2})(?P<prefix3>\D+?)(?P<seq>\d+)(?P<suffix>\D*?)$")
 
     inbound_payment_method_ids = fields.Many2many('account.payment.method', 'account_journal_inbound_payment_method_rel', 'journal_id', 'inbound_payment_method',
-        domain=[('payment_type', '=', 'inbound')], string='For Incoming Payments', default=lambda self: self._default_inbound_payment_methods(),
+        domain=[('payment_type', '=', 'inbound')], string='Inbound Payment Methods', default=lambda self: self._default_inbound_payment_methods(),
         help="Manual: Get paid by cash, check or any other method outside of Odoo.\n"\
              "Electronic: Get paid automatically through a payment acquirer by requesting a transaction on a card saved by the customer when buying or subscribing online (payment token).\n"\
              "Batch Deposit: Encase several customer checks at once by generating a batch deposit to submit to your bank. When encoding the bank statement in Odoo,you are suggested to reconcile the transaction with the batch deposit. Enable this option from the settings.")
     outbound_payment_method_ids = fields.Many2many('account.payment.method', 'account_journal_outbound_payment_method_rel', 'journal_id', 'outbound_payment_method',
-        domain=[('payment_type', '=', 'outbound')], string='For Outgoing Payments', default=lambda self: self._default_outbound_payment_methods(),
+        domain=[('payment_type', '=', 'outbound')], string='Outbound Payment Methods', default=lambda self: self._default_outbound_payment_methods(),
         help="Manual:Pay bill by cash or any other method outside of Odoo.\n"\
              "Check:Pay bill by check and print it from Odoo.\n"\
              "SEPA Credit Transfer: Pay bill from a SEPA Credit Transfer file you submit to your bank. Enable this option from the settings.")
     at_least_one_inbound = fields.Boolean(compute='_methods_compute', store=True)
     at_least_one_outbound = fields.Boolean(compute='_methods_compute', store=True)
-    profit_account_id = fields.Many2one('account.account',
+    profit_account_id = fields.Many2one(
+        comodel_name='account.account', check_company=True,
+        help="Used to register a profit when the ending balance of a cash register differs from what the system computes",
         string='Profit Account',
-        domain="[('company_id', '=', company_id)]",
-        check_company=True,
-        help="Used to register a profit when the ending balance of a cash register differs from what the system computes")
-    loss_account_id = fields.Many2one('account.account',
+        domain=lambda self: "[('deprecated', '=', False), ('company_id', '=', company_id), \
+                             ('user_type_id.type', 'not in', ('receivable', 'payable')), \
+                             ('user_type_id', 'in', %s)]" % [self.env.ref('account.data_account_type_revenue').id,
+                                                             self.env.ref('account.data_account_type_other_income').id])
+    loss_account_id = fields.Many2one(
+        comodel_name='account.account', check_company=True,
+        help="Used to register a loss when the ending balance of a cash register differs from what the system computes",
         string='Loss Account',
-        domain="[('company_id', '=', company_id)]",
-        check_company=True,
-        help="Used to register a loss when the ending balance of a cash register differs from what the system computes")
+        domain=lambda self: "[('deprecated', '=', False), ('company_id', '=', company_id), \
+                             ('user_type_id.type', 'not in', ('receivable', 'payable')), \
+                             ('user_type_id', '=', %s)]" % self.env.ref('account.data_account_type_expenses').id)
 
     # Bank journals fields
     company_partner_id = fields.Many2one('res.partner', related='company_id.partner_id', string='Account Holder', readonly=True, store=False)
@@ -143,9 +154,11 @@ class AccountJournal(models.Model):
     sale_activity_note = fields.Text('Activity Summary')
 
     # alias configuration for journals
-    alias_id = fields.Many2one('mail.alias', string='Alias', copy=False)
+    alias_id = fields.Many2one('mail.alias', string='Email Alias', help="Send one separate email for each invoice.\n\n"
+                                                                  "Any file extension will be accepted.\n\n"
+                                                                  "Only PDF and XML files will be interpreted by Odoo", copy=False)
     alias_domain = fields.Char('Alias domain', compute='_compute_alias_domain', default=_default_alias_domain, compute_sudo=True)
-    alias_name = fields.Char('Alias Name', related='alias_id.alias_name', help="It creates draft invoices and bills by sending an email.", readonly=False)
+    alias_name = fields.Char('Alias Name', copy=False, related='alias_id.alias_name', help="It creates draft invoices and bills by sending an email.", readonly=False)
 
     journal_group_ids = fields.Many2many('account.journal.group',
         domain="[('company_id', '=', company_id)]",
@@ -161,6 +174,21 @@ class AccountJournal(models.Model):
         ('code_company_uniq', 'unique (code, name, company_id)', 'The code and name of the journal must be unique per company !'),
     ]
 
+    @api.depends('type')
+    def _compute_default_account_type(self):
+        default_account_id_types = {
+            'bank': 'account.data_account_type_liquidity',
+            'cash': 'account.data_account_type_liquidity',
+            'sale': 'account.data_account_type_revenue',
+            'purchase': 'account.data_account_type_expenses'
+        }
+
+        for journal in self:
+            if journal.type in default_account_id_types:
+                journal.default_account_type = self.env.ref(default_account_id_types[journal.type]).id
+            else:
+                journal.default_account_type = False
+
     @api.depends('company_id', 'type')
     def _compute_suspense_account_id(self):
         for journal in self:
@@ -235,10 +263,9 @@ class AccountJournal(models.Model):
         if self._cr.fetchone():
             raise UserError(_("You can't change the company of your journal since there are some journal entries linked to it."))
 
-    @api.constrains('default_debit_account_id', 'default_credit_account_id', 'payment_debit_account_id', 'payment_credit_account_id')
+    @api.constrains('default_account_id', 'payment_debit_account_id', 'payment_credit_account_id')
     def _check_journal_not_shared_accounts(self):
-        accounts = self.default_debit_account_id \
-                   + self.default_credit_account_id \
+        accounts = self.default_account_id \
                    + self.payment_debit_account_id \
                    + self.payment_credit_account_id
 
@@ -246,8 +273,7 @@ class AccountJournal(models.Model):
             return
 
         self.env['account.journal'].flush([
-            'default_debit_account_id',
-            'default_credit_account_id',
+            'default_account_id',
             'payment_debit_account_id',
             'payment_credit_account_id',
         ])
@@ -257,9 +283,7 @@ class AccountJournal(models.Model):
                 ARRAY_AGG(DISTINCT journal.name) AS journal_names
             FROM account_account account
             LEFT JOIN account_journal journal ON
-                journal.default_debit_account_id = account.id
-                OR
-                journal.default_credit_account_id = account.id
+                journal.default_account_id = account.id
                 OR
                 journal.payment_debit_account_id = account.id
                 OR
@@ -276,22 +300,11 @@ class AccountJournal(models.Model):
                 journals=', '.join(res[1])
             ))
 
-    @api.constrains('type', 'default_credit_account_id', 'default_debit_account_id')
-    def _check_type_default_credit_account_id_type(self):
-        journals_to_check = self.filtered(lambda journal: journal.type in ('sale', 'purchase'))
-        accounts_to_check = journals_to_check.mapped('default_debit_account_id') + journals_to_check.mapped('default_credit_account_id')
-        if any(account.user_type_id.type in ('receivable', 'payable') for account in accounts_to_check):
-            raise ValidationError(_("The type of the journal's default credit/debit account shouldn't be 'receivable' or 'payable'."))
-
-    @api.onchange('default_debit_account_id')
-    def onchange_debit_account_id(self):
-        if not self.default_credit_account_id:
-            self.default_credit_account_id = self.default_debit_account_id
-
-    @api.onchange('default_credit_account_id')
-    def onchange_credit_account_id(self):
-        if not self.default_debit_account_id:
-            self.default_debit_account_id = self.default_credit_account_id
+    @api.constrains('type', 'default_account_id')
+    def _check_type_default_account_id_type(self):
+        for journal in self:
+            if journal.type in ('sale', 'purchase') and journal.default_account_id.user_type_id.type in ('receivable', 'payable'):
+                raise ValidationError(_("The type of the journal's default credit/debit account shouldn't be 'receivable' or 'payable'."))
 
     @api.onchange('type')
     def _onchange_type(self):
@@ -374,8 +387,7 @@ class AccountJournal(models.Model):
 
         for journal in self:
             # Ensure the liquidity accounts are sharing the same foreign currency.
-            accounts = journal.default_debit_account_id + journal.default_credit_account_id
-            accounts.write({'currency_id': journal.currency_id.id})
+            journal.default_account_id.currency_id = journal.currency_id
 
         # Create the bank_account_id if necessary
         if 'bank_acc_number' in vals:
@@ -417,7 +429,7 @@ class AccountJournal(models.Model):
         current_assets_type = self.env.ref('account.data_account_type_current_assets')
 
         if journal_type in ('bank', 'cash'):
-            has_liquidity_accounts = vals.get('default_debit_account_id') or vals.get('default_credit_account_id')
+            has_liquidity_accounts = vals.get('default_account_id')
             has_payment_accounts = vals.get('payment_debit_account_id') or vals.get('payment_credit_account_id')
             has_profit_account = vals.get('profit_account_id')
             has_loss_account = vals.get('loss_account_id')
@@ -447,8 +459,7 @@ class AccountJournal(models.Model):
                 })
 
                 vals.update({
-                    'default_debit_account_id': liquidity_account.id,
-                    'default_credit_account_id': liquidity_account.id,
+                    'default_account_id': liquidity_account.id,
                 })
             if not has_payment_accounts:
                 vals['payment_debit_account_id'] = self.env['account.account'].create({
@@ -474,6 +485,10 @@ class AccountJournal(models.Model):
         if 'refund_sequence' not in vals:
             vals['refund_sequence'] = vals['type'] in ('sale', 'purchase')
 
+        # === Fill missing alias name ===
+        if journal_type in ('sale', 'purchase') and 'alias_name' not in vals:
+            vals['alias_name'] = '%s.%s' % (company.name, vals.get('code'))
+
     @api.model
     def create(self, vals):
         # OVERRIDE
@@ -615,12 +630,11 @@ class AccountJournal(models.Model):
         self.ensure_one()
         self.env['account.move.line'].check_access_rights('read')
 
-        accounts = self.default_debit_account_id + self.default_credit_account_id
-        if not accounts:
+        if not self.default_account_id:
             return 0.0
 
         domain = (domain or []) + [
-            ('account_id', 'in', tuple(accounts.ids)),
+            ('account_id', 'in', tuple(self.default_account_id.ids)),
             ('display_type', 'not in', ('line_section', 'line_note')),
             ('move_id.state', '!=', 'cancel'),
         ]

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -1620,12 +1620,7 @@ class AccountMove(models.Model):
             # Doing line.account_id triggers a default_get(['account_id']) that could returns a result.
             # A section / note must not have an account_id set.
             if not line._cache.get('account_id') and not line.display_type and not line._origin:
-                line.account_id = line._get_computed_account()
-                if not line.account_id:
-                    if self.is_sale_document(include_receipts=True):
-                        line.account_id = self.journal_id.default_credit_account_id
-                    elif self.is_purchase_document(include_receipts=True):
-                        line.account_id = self.journal_id.default_debit_account_id
+                line.account_id = line._get_computed_account() or self.journal_id.default_account_id
             if line.product_id and not line._cache.get('name'):
                 line.name = line._get_computed_name()
 
@@ -3834,20 +3829,12 @@ class AccountMoveLine(models.Model):
         # OVERRIDE
         values = super(AccountMoveLine, self).default_get(default_fields)
 
-        if 'account_id' in default_fields \
+        if 'account_id' in default_fields and not values.get('account_id') \
             and (self._context.get('journal_id') or self._context.get('default_journal_id')) \
-            and not values.get('account_id') \
-            and self._context.get('default_move_type') in self.move_id.get_inbound_types():
+            and self._context.get('default_move_type') in ('out_invoice', 'out_refund', 'in_invoice', 'in_refund', 'out_receipt', 'in_receipt'):
             # Fill missing 'account_id'.
             journal = self.env['account.journal'].browse(self._context.get('default_journal_id') or self._context['journal_id'])
-            values['account_id'] = journal.default_credit_account_id.id
-        elif 'account_id' in default_fields \
-            and (self._context.get('journal_id') or self._context.get('default_journal_id')) \
-            and not values.get('account_id') \
-            and self._context.get('default_move_type') in self.move_id.get_outbound_types():
-            # Fill missing 'account_id'.
-            journal = self.env['account.journal'].browse(self._context.get('default_journal_id') or self._context['journal_id'])
-            values['account_id'] = journal.default_debit_account_id.id
+            values['account_id'] = journal.default_account_id.id
         elif self._context.get('line_ids') and any(field_name in default_fields for field_name in ('debit', 'credit', 'account_id', 'partner_id')):
             move = self.env['account.move'].new({'line_ids': self._context['line_ids']})
 
@@ -4076,18 +4063,17 @@ class AccountMoveLine(models.Model):
                     # amount_residual_currency == 0 and amount_residual has to be fixed.
 
                     if line.amount_residual > 0.0:
-                        exchange_line_account = journal.default_debit_account_id
+                        exchange_line_account = journal.company_id.expense_currency_exchange_account_id
                     else:
-                        exchange_line_account = journal.default_credit_account_id
+                        exchange_line_account = journal.company_id.income_currency_exchange_account_id
 
                 elif line.currency_id and not line.currency_id.is_zero(line.amount_residual_currency):
                     # amount_residual == 0 and amount_residual_currency has to be fixed.
 
                     if line.amount_residual_currency > 0.0:
-                        exchange_line_account = journal.default_debit_account_id
+                        exchange_line_account = journal.company_id.expense_currency_exchange_account_id
                     else:
-                        exchange_line_account = journal.default_credit_account_id
-
+                        exchange_line_account = journal.company_id.income_currency_exchange_account_id
                 else:
                     continue
 
@@ -4222,9 +4208,9 @@ class AccountMoveLine(models.Model):
                     journal = account.company_id.currency_exchange_journal_id
 
                     if balance > 0.0:
-                        exchange_line_account = journal.default_debit_account_id
+                        exchange_line_account = journal.company_id.expense_currency_exchange_account_id
                     else:
-                        exchange_line_account = journal.default_credit_account_id
+                        exchange_line_account = journal.company_id.income_currency_exchange_account_id
 
                     sequence = len(exchange_diff_move_vals['line_ids'])
                     exchange_diff_move_vals['line_ids'] += [
@@ -4253,11 +4239,11 @@ class AccountMoveLine(models.Model):
 
         # Check the configuration of the exchange difference journal.
         if not journal:
-            raise UserError(_("You should configure the 'Exchange Rate Journal' in the accounting settings, to manage automatically the booking of accounting entries related to differences between exchange rates."))
-        if not journal.default_debit_account_id.id:
-            raise UserError(_("You should configure the 'Loss Exchange Rate Account' in the accounting settings, to manage automatically the booking of accounting entries related to differences between exchange rates."))
-        if not journal.default_credit_account_id.id:
-            raise UserError(_("You should configure the 'Gain Exchange Rate Account' in the accounting settings, to manage automatically the booking of accounting entries related to differences between exchange rates."))
+            raise UserError(_("You should configure the 'Exchange Gain or Loss Journal' in your company settings, to manage automatically the booking of accounting entries related to differences between exchange rates."))
+        if not journal.company_id.expense_currency_exchange_account_id:
+            raise UserError(_("You should configure the 'Loss Exchange Rate Account' in your company settings, to manage automatically the booking of accounting entries related to differences between exchange rates."))
+        if not journal.company_id.income_currency_exchange_account_id.id:
+            raise UserError(_("You should configure the 'Gain Exchange Rate Account' in your company settings, to manage automatically the booking of accounting entries related to differences between exchange rates."))
 
         exchange_diff_move_vals = {
             'move_type': 'entry',

--- a/addons/account/models/account_payment.py
+++ b/addons/account/models/account_payment.py
@@ -7,10 +7,12 @@ from odoo.exceptions import UserError, ValidationError
 class AccountPaymentMethod(models.Model):
     _name = "account.payment.method"
     _description = "Payment Methods"
+    _order = 'sequence'
 
     name = fields.Char(required=True, translate=True)
     code = fields.Char(required=True)  # For internal identification
     payment_type = fields.Selection([('inbound', 'Inbound'), ('outbound', 'Outbound')], required=True)
+    sequence = fields.Integer(help='Used to order Methods in the form view', default=10)
 
 
 class AccountPayment(models.Model):

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -256,6 +256,8 @@ class AccountChartTemplate(models.Model):
             'default_cash_difference_expense_account_id': acc_template_ref.get(self.default_cash_difference_expense_account_id.id, False),
             'account_journal_suspense_account_id': acc_template_ref.get(self.account_journal_suspense_account_id.id),
             'account_cash_basis_base_account_id': acc_template_ref.get(self.property_cash_basis_base_account_id.id),
+            'income_currency_exchange_account_id': acc_template_ref.get(self.income_currency_exchange_account_id.id),
+            'expense_currency_exchange_account_id': acc_template_ref.get(self.expense_currency_exchange_account_id.id),
         })
 
         if not company.account_journal_suspense_account_id:
@@ -427,11 +429,7 @@ class AccountChartTemplate(models.Model):
                 default_account = acc_template_ref.get(self.property_account_income_categ_id.id)
             elif journal['type'] == 'purchase':
                 default_account = acc_template_ref.get(self.property_account_expense_categ_id.id)
-            elif journal['type'] == 'general' and journal['code'] == _('EXCH'):
-                if type=='credit':
-                    default_account = acc_template_ref.get(self.income_currency_exchange_account_id.id)
-                else:
-                    default_account = acc_template_ref.get(self.expense_currency_exchange_account_id.id)
+
             return default_account
 
         journals = [{'name': _('Customer Invoices'), 'type': 'sale', 'code': _('INV'), 'favorite': True, 'color': 11, 'sequence': 5},
@@ -450,8 +448,7 @@ class AccountChartTemplate(models.Model):
                 'name': journal['name'],
                 'code': journal['code'],
                 'company_id': company.id,
-                'default_credit_account_id': _get_default_account(journal, 'credit'),
-                'default_debit_account_id': _get_default_account(journal, 'debit'),
+                'default_account_id': _get_default_account(journal),
                 'show_on_dashboard': journal['favorite'],
                 'color': journal.get('color', False),
                 'sequence': journal['sequence']

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -60,10 +60,17 @@ class ResCompany(models.Model):
         ('round_globally', 'Round Globally'),
         ], default='round_per_line', string='Tax Calculation Rounding Method')
     currency_exchange_journal_id = fields.Many2one('account.journal', string="Exchange Gain or Loss Journal", domain=[('type', '=', 'general')])
-    income_currency_exchange_account_id = fields.Many2one('account.account', related='currency_exchange_journal_id.default_credit_account_id', readonly=False,
-        string="Gain Exchange Rate Account", domain="[('internal_type', '=', 'other'), ('deprecated', '=', False), ('company_id', '=', id)]")
-    expense_currency_exchange_account_id = fields.Many2one('account.account', related='currency_exchange_journal_id.default_debit_account_id', readonly=False,
-        string="Loss Exchange Rate Account", domain="[('internal_type', '=', 'other'), ('deprecated', '=', False), ('company_id', '=', id)]")
+    income_currency_exchange_account_id = fields.Many2one(
+        comodel_name='account.account',
+        string="Gain Exchange Rate Account",
+        domain=lambda self: "[('internal_type', '=', 'other'), ('deprecated', '=', False), ('company_id', '=', id), \
+                             ('user_type_id', 'in', %s)]" % [self.env.ref('account.data_account_type_revenue').id,
+                                                             self.env.ref('account.data_account_type_other_income').id])
+    expense_currency_exchange_account_id = fields.Many2one(
+        comodel_name='account.account',
+        string="Loss Exchange Rate Account",
+        domain=lambda self: "[('internal_type', '=', 'other'), ('deprecated', '=', False), ('company_id', '=', id), \
+                             ('user_type_id', '=', %s)]" % self.env.ref('account.data_account_type_expenses').id)
     anglo_saxon_accounting = fields.Boolean(string="Use anglo-saxon accounting")
     property_stock_account_input_categ_id = fields.Many2one('account.account', string="Input Account for Stock Valuation")
     property_stock_account_output_categ_id = fields.Many2one('account.account', string="Output Account for Stock Valuation")

--- a/addons/account/models/res_config_settings.py
+++ b/addons/account/models/res_config_settings.py
@@ -11,11 +11,26 @@ class ResConfigSettings(models.TransientModel):
     currency_id = fields.Many2one('res.currency', related="company_id.currency_id", required=True, readonly=False,
         string='Currency', help="Main currency of the company.")
     currency_exchange_journal_id = fields.Many2one(
-        'account.journal',
+        comodel_name='account.journal',
         related='company_id.currency_exchange_journal_id', readonly=False,
-        string="Exchange Gain or Loss Journal",
+        string="Currency Exchange Journal",
         domain="[('company_id', '=', company_id), ('type', '=', 'general')]",
         help='The accounting journal where automatic exchange differences will be registered')
+    income_currency_exchange_account_id = fields.Many2one(
+        comodel_name="account.account",
+        related="company_id.income_currency_exchange_account_id",
+        string="Gain Account",
+        readonly=False,
+        domain=lambda self: "[('internal_type', '=', 'other'), ('deprecated', '=', False), ('company_id', '=', company_id),\
+                             ('user_type_id', 'in', %s)]" % [self.env.ref('account.data_account_type_revenue').id,
+                                                             self.env.ref('account.data_account_type_other_income').id])
+    expense_currency_exchange_account_id = fields.Many2one(
+        comodel_name="account.account",
+        related="company_id.expense_currency_exchange_account_id",
+        string="Loss Account",
+        readonly=False,
+        domain=lambda self: "[('internal_type', '=', 'other'), ('deprecated', '=', False), ('company_id', '=', company_id),\
+                             ('user_type_id', '=', %s)]" % self.env.ref('account.data_account_type_expenses').id)
     has_chart_of_accounts = fields.Boolean(compute='_compute_has_chart_of_accounts', string='Company has a chart of accounts')
     chart_template_id = fields.Many2one('account.chart.template', string='Template', default=lambda self: self.env.company.chart_template_id,
         domain="[('visible','=', True)]")
