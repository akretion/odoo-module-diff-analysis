PR: https://github.com/odoo/odoo/pull/105639

From: 37348521ced0ae094962661d84994a147c9b884c
From: Renaud Thiry
Date: 2023-02-21 18:08:09

Structural Changes: 7
Total Changes: 45

[IMP] mass_mailing: remove A/B percentage limit

A/B testing was used in the past to create mutually-exclusive mailings.
Since then a 100% limit for the recipients of an A/B campaign.

As there is no technical reason for this limit and not having it allows
for a special usecase, it is replaced here with a text warning.
The usecase in question being that as the domain of the different
mailings composing a campaign may be different, users may want to
take advantage of the fact that only 1 email will be sent to each
address to avoid sending 2 mailings when only one or the other should
be sent. Consequently users may want to use 100% of the domain on
every mailing in their campaign.

As the ab_testing_total_pc is only used for that purpose the field
is removed. 'total' field  is not always accurate and is unused so
it is also cleaned up.

task-3008627

closes odoo/odoo#105639

Related: odoo/upgrade#4257
Signed-off-by: Warnon Aur√©lien (awa) <awa@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mass_mailing/models/mailing.py
+++ b/addons/mass_mailing/models/mailing.py
@@ -175,13 +175,14 @@ class MassMailing(models.Model):
     mailing_filter_domain = fields.Char('Favorite filter domain', related='mailing_filter_id.mailing_domain')
     mailing_filter_count = fields.Integer('# Favorite Filters', compute='_compute_mailing_filter_count')
     # A/B Testing
-    ab_testing_completed = fields.Boolean(related='campaign_id.ab_testing_completed', store=True)
+    ab_testing_completed = fields.Boolean(related='campaign_id.ab_testing_completed')
     ab_testing_description = fields.Html('A/B Testing Description', compute="_compute_ab_testing_description")
     ab_testing_enabled = fields.Boolean(
         string='Allow A/B Testing', default=False,
         help='If checked, recipients will be mailed only once for the whole campaign. '
              'This lets you send different mailings to randomly selected recipients and test '
              'the effectiveness of the mailings, without causing duplicate messages.')
+    ab_testing_is_winner_mailing = fields.Boolean('Is the Winner of its Campaign', compute='_compute_ab_testing_is_winner_mailing')
     ab_testing_mailings_count = fields.Integer(related="campaign_id.ab_testing_mailings_count")
     ab_testing_pc = fields.Integer(
         string='A/B Testing percentage',
@@ -234,6 +235,11 @@ class MassMailing(models.Model):
                     _("The saved filter targets different recipients and is incompatible with this mailing.")
                 )
 
+    @api.depends('campaign_id.ab_testing_winner_mailing_id')
+    def _compute_ab_testing_is_winner_mailing(self):
+        for mailing in self:
+            mailing.ab_testing_is_winner_mailing = mailing.campaign_id.ab_testing_winner_mailing_id == mailing
+
     @api.depends('mail_server_id')
     def _compute_email_from(self):
         user_email = self.env.user.email_formatted
@@ -834,12 +840,10 @@ class MassMailing(models.Model):
         self.ensure_one()
         if not self.ab_testing_enabled:
             raise ValueError(_("A/B test option has not been enabled"))
-        self.campaign_id.write({
-            'ab_testing_completed': True,
-        })
         final_mailing = self.copy({
             'ab_testing_pc': 100,
         })
+        self.campaign_id.ab_testing_winner_mailing_id = final_mailing
         final_mailing.action_launch()
         action = self.env['ir.actions.act_window']._for_xml_id('mass_mailing.action_ab_testing_open_winner_mailing')
         action['res_id'] = final_mailing.id
@@ -851,14 +855,12 @@ class MassMailing(models.Model):
 
     def _get_ab_testing_description_values(self):
         self.ensure_one()
-
-        other_ab_testing_mailings = self._get_ab_testing_siblings_mailings().filtered(lambda m: m.id != self.id)
-        other_ab_testing_pc = sum([mailing.ab_testing_pc for mailing in other_ab_testing_mailings])
         return {
             'mailing': self,
             'ab_testing_winner_selection_description': self._get_ab_testing_winner_selection()['description'],
-            'other_ab_testing_pc': other_ab_testing_pc,
-            'remaining_ab_testing_pc': 100 - (other_ab_testing_pc + self.ab_testing_pc),
+            'total_ab_testing_pc': sum([
+                mailing.ab_testing_pc for mailing in self._get_ab_testing_siblings_mailings()
+            ]),
         }
 
     def _get_ab_testing_siblings_mailings(self):
@@ -988,7 +990,7 @@ class MassMailing(models.Model):
         res_ids = self.env[self.mailing_model_real].search(mailing_domain).ids
 
         # randomly choose a fragment
-        if self.ab_testing_enabled and self.ab_testing_pc < 100:
+        if self.ab_testing_enabled and not self.ab_testing_is_winner_mailing:
             contact_nbr = self.env[self.mailing_model_real].search_count(mailing_domain)
             topick = 0
             if contact_nbr:
@@ -1006,8 +1008,8 @@ class MassMailing(models.Model):
     def _get_remaining_recipients(self):
         res_ids = self._get_recipients()
         trace_domain = [('model', '=', self.mailing_model_real)]
-        if self.ab_testing_enabled and self.ab_testing_pc == 100:
-            trace_domain = expression.AND([trace_domain, [('mass_mailing_id', '=', self._get_ab_testing_siblings_mailings().ids)]])
+        if self.ab_testing_enabled and self.ab_testing_is_winner_mailing:
+            trace_domain = expression.AND([trace_domain, [('mass_mailing_id', 'in', self._get_ab_testing_siblings_mailings().ids)]])
         else:
             trace_domain = expression.AND([trace_domain, [
                 ('res_id', 'in', res_ids),

--- a/addons/mass_mailing/models/utm_campaign.py
+++ b/addons/mass_mailing/models/utm_campaign.py
@@ -22,11 +22,12 @@ class UtmCampaign(models.Model):
 
     # A/B Testing
     ab_testing_mailings_count = fields.Integer("A/B Test Mailings #", compute="_compute_mailing_mail_count")
-    ab_testing_completed = fields.Boolean("A/B Testing Campaign Finished", copy=False)
+    ab_testing_completed = fields.Boolean("A/B Testing Campaign Finished", compute="_compute_ab_testing_completed",
+                                          copy=False, readonly=True, store=True)
+    ab_testing_winner_mailing_id = fields.Many2one("mailing.mailing", "A/B Campaign Winner Mailing", copy=False)
     ab_testing_schedule_datetime = fields.Datetime('Send Final On',
         default=lambda self: fields.Datetime.now() + relativedelta(days=1),
         help="Date that will be used to know when to determine and send the winner mailing")
-    ab_testing_total_pc = fields.Integer("Total A/B test percentage", compute="_compute_ab_testing_total_pc", store=True)
     ab_testing_winner_selection = fields.Selection([
         ('manual', 'Manual'),
         ('opened_ratio', 'Highest Open Rate'),
@@ -40,12 +41,10 @@ class UtmCampaign(models.Model):
     replied_ratio = fields.Integer(compute="_compute_statistics", string='Replied Ratio')
     bounced_ratio = fields.Integer(compute="_compute_statistics", string='Bounced Ratio')
 
-    @api.depends('mailing_mail_ids')
-    def _compute_ab_testing_total_pc(self):
+    @api.depends('ab_testing_winner_mailing_id')
+    def _compute_ab_testing_completed(self):
         for campaign in self:
-            campaign.ab_testing_total_pc = sum([
-                mailing.ab_testing_pc for mailing in campaign.mailing_mail_ids.filtered('ab_testing_enabled')
-            ])
+            campaign.ab_testing_completed = bool(self.ab_testing_winner_mailing_id)
 
     @api.depends('mailing_mail_ids')
     def _compute_mailing_mail_count(self):
@@ -69,12 +68,6 @@ class UtmCampaign(models.Model):
             campaign.mailing_mail_count = sum(mapped_data.get(campaign._origin.id or campaign.id, []))
             campaign.ab_testing_mailings_count = sum(ab_testing_mapped_data.get(campaign._origin.id or campaign.id, []))
 
-    @api.constrains('ab_testing_total_pc', 'ab_testing_completed')
-    def _check_ab_testing_total_pc(self):
-        for campaign in self:
-            if not campaign.ab_testing_completed and campaign.ab_testing_total_pc >= 100:
-                raise ValidationError(_("The total percentage for an A/B testing campaign should be less than 100%"))
-
     def _compute_statistics(self):
         """ Compute statistics of the mass mailing campaign """
         default_vals = {
