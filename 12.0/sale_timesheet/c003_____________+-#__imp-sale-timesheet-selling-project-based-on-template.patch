PR: https://github.com/odoo/odoo/pull/

From: 460f57f510be49910d10a786aa178c0fad1e420e
From: jem-odoo
Date: 2018-04-06 12:30:47

Structural Changes: 5
Total Changes: 118

[IMP] sale_timesheet: selling project based on template

Selling product creating project can now be based
on project template. When setting a project template
on product, this will copy the project (like a duplicate)
and replace its customer, ... with information from the
SO line, on SO confirmation.

There is only one project without template per SO, and
one project per template per SO (so 2 SO lines with the
same project template on their product will only create
one project with this template).

================================= pseudo patch: =================================

--- a/addons/sale_timesheet/models/product.py
+++ b/addons/sale_timesheet/models/product.py
@@ -1,7 +1,8 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
 
 
 class ProductTemplate(models.Model):
@@ -25,6 +26,9 @@ class ProductTemplate(models.Model):
     project_id = fields.Many2one(
         'project.project', 'Project', company_dependent=True, domain=[('sale_line_id', '=', False)],
         help='Select a non billable project on which tasks can be created. This setting must be set for each company.')
+    project_template_id = fields.Many2one(
+        'project.project', 'Project Template', company_dependent=True, domain=[('sale_line_id', '=', False)], copy=True,
+        help='Select a non billable project to be the skeleton of the new created project when selling the current product. Its stages and tasks will be duplicated.')
 
     @api.depends('invoice_policy', 'service_type')
     def _compute_service_policy(self):
@@ -49,9 +53,28 @@ class ProductTemplate(models.Model):
                 product.invoice_policy = 'delivery'
                 product.service_type = 'manual' if policy == 'delivered_manual' else 'timesheet'
 
+    @api.constrains('project_id', 'project_template_id')
+    def _check_project_and_template(self):
+        """ NOTE 'service_tracking' should be in decorator parameters but since ORM check constraints twice (one after setting
+            stored fields, one after setting non stored field), the error is raised when company-dependent fields are not set.
+            So, this constraints does cover all cases and inconsistent can still be recorded until the ORM change its behavior.
+        """
+        for product in self:
+            if product.service_tracking == 'no' and (product.project_id or product.project_template_id):
+                raise ValidationError(_('The product %s should not have a project nor a project template since it will not generate project.') % (product.name,))
+            elif product.service_tracking == 'task_global_project' and product.project_template_id:
+                raise ValidationError(_('The product %s should not have a project template since it will generate a task in a global project.') % (product.name,))
+            elif product.service_tracking in ['task_new_project', 'project_only'] and product.project_id:
+                raise ValidationError(_('The product %s should not have a global project since it will generate a project.') % (product.name,))
+
     @api.onchange('service_tracking')
     def _onchange_service_tracking(self):
-        if self.service_tracking != 'task_global_project':
+        if self.service_tracking == 'no':
+            self.project_id = False
+            self.project_template_id = False
+        elif self.service_tracking == 'task_global_project':
+            self.project_template_id = False
+        elif self.service_tracking in ['task_new_project', 'project_only']:
             self.project_id = False
 
     @api.onchange('type')

--- a/addons/sale_timesheet/models/sale_order.py
+++ b/addons/sale_timesheet/models/sale_order.py
@@ -6,7 +6,6 @@ from odoo import api, fields, models, _
 from odoo.exceptions import ValidationError
 from odoo.osv import expression
 from odoo.tools.safe_eval import safe_eval
-from odoo.tools import float_is_zero
 
 
 class SaleOrder(models.Model):
@@ -58,37 +57,35 @@ class SaleOrder(models.Model):
     @api.multi
     def action_view_task(self):
         self.ensure_one()
-        action = self.env.ref('project.action_view_task')
+
         list_view_id = self.env.ref('project.view_task_tree2').id
         form_view_id = self.env.ref('project.view_task_form2').id
 
-        result = {
-            'name': action.name,
-            'help': action.help,
-            'type': action.type,
-            'views': [[False, 'kanban'], [list_view_id, 'tree'], [form_view_id, 'form'], [False, 'graph'], [False, 'calendar'], [False, 'pivot'], [False, 'graph']],
-            'target': action.target,
-            'context': "{'group_by':'stage_id'}",
-            'res_model': action.res_model,
-        }
-        if len(self.tasks_ids) > 1:
-            result['domain'] = "[('id','in',%s)]" % self.tasks_ids.ids
-        elif len(self.tasks_ids) == 1:
-            result['views'] = [(form_view_id, 'form')]
-            result['res_id'] = self.tasks_ids.id
+        action = {'type': 'ir.actions.act_window_close'}
+
+        task_projects = self.tasks_ids.mapped('project_id')
+        if len(task_projects) == 1 and len(self.tasks_ids) > 1:  # redirect to task of the project (with kanban stage, ...)
+            action = self.env.ref('project.act_project_project_2_project_task_all').read()[0]
+            if action.get('context'):
+                eval_context = self.env['ir.actions.actions']._get_eval_context()
+                eval_context.update({'active_id': task_projects.id})
+                action['context'] = safe_eval(action['context'], eval_context)
         else:
-            result = {'type': 'ir.actions.act_window_close'}
-        return result
+            action = self.env.ref('project.action_view_task').read()[0]
+            if len(self.tasks_ids) > 1:  # cross project kanban task
+                action['views'] = [[False, 'kanban'], [list_view_id, 'tree'], [form_view_id, 'form'], [False, 'graph'], [False, 'calendar'], [False, 'pivot'], [False, 'graph']]
+            elif len(self.tasks_ids) == 1:  # single task -> form view
+                action['views'] = [(form_view_id, 'form')]
+                action['res_id'] = self.tasks_ids.id
+        return action
 
     @api.multi
     def action_view_project_ids(self):
         self.ensure_one()
-        if len(self.project_ids) == 1:
-            if self.env.user.has_group("hr_timesheet.group_hr_timesheet_user"):
-                action = self.project_ids.action_view_timesheet_plan()
-            else:
-                action = self.env.ref("project.act_project_project_2_project_task_all").read()[0]
-                action['context'] = safe_eval(action.get('context', '{}'), {'active_id': self.project_ids.id, 'active_ids': self.project_ids.ids})
+        # redirect to form or kanban view
+        billable_projects = self.project_ids.filtered(lambda project: project.sale_line_id)
+        if len(billable_projects) == 1:
+            action = billable_projects[0].action_view_timesheet_plan()
         else:
             view_form_id = self.env.ref('project.edit_project').id
             view_kanban_id = self.env.ref('project.view_project_kanban').id
@@ -129,8 +126,8 @@ class SaleOrderLine(models.Model):
     _inherit = "sale.order.line"
 
     qty_delivered_method = fields.Selection(selection_add=[('timesheet', 'Timesheets')])
-    project_id = fields.Many2one('project.project', 'Generated Project', index=True, help="Project generated by the sales order item")
-    task_id = fields.Many2one('project.task', 'Generated Task', index=True, help="Task generated by the sales order item")
+    project_id = fields.Many2one('project.project', 'Generated Project', index=True, copy=False, help="Project generated by the sales order item")
+    task_id = fields.Many2one('project.task', 'Generated Task', index=True, copy=False, help="Task generated by the sales order item")
     is_service = fields.Boolean("Is a Service", compute='_compute_is_service', store=True, compute_sudo=True, help="Sales Order item should generate a task and/or a project, depending on the product settings.")
     analytic_line_ids = fields.One2many(domain=[('project_id', '=', False)])  # only analytic lines, not timesheets (since this field determine if SO line came from expense)
 
@@ -218,7 +215,16 @@ class SaleOrderLine(models.Model):
             'partner_id': self.order_id.partner_id.id,
             'sale_line_id': self.id,
         }
-        project = self.env['project.project'].create(values)
+        if self.product_id.project_template_id:
+            values['name'] = "%s - %s" % (values['name'], self.product_id.project_template_id.name)
+            project = self.product_id.project_template_id.copy(values)
+            project.tasks.write({
+                'sale_line_id': self.id,
+                'partner_id': self.order_id.partner_id.id,
+                'email_from': self.order_id.partner_id.email,
+            })
+        else:
+            project = self.env['project.project'].create(values)
         # link project as generated by current so line
         self.write({'project_id': project.id})
         return project
@@ -264,13 +270,15 @@ class SaleOrderLine(models.Model):
         so_line_task_global_project = self.filtered(lambda sol: sol.is_service and sol.product_id.service_tracking == 'task_global_project')
         so_line_new_project = self.filtered(lambda sol: sol.is_service and sol.product_id.service_tracking in ['project_only', 'task_new_project'])
 
-        # search so lines from SO of current so lines having already generated their project, in order to check if the current one can
-        # create its own project, or reuse
+        # search so lines from SO of current so lines having their project generated, in order to check if the current one can
+        # create its own project, or reuse the one of its order.
         map_so_project = {}
         if so_line_new_project:
             order_ids = self.mapped('order_id').ids
             so_lines_with_project = self.search([('order_id', 'in', order_ids), ('project_id', '!=', False), ('product_id.service_tracking', 'in', ['project_only', 'task_new_project']), ('product_id.project_template_id', '=', False)])
             map_so_project = {sol.order_id.id: sol.project_id for sol in so_lines_with_project}
+            so_lines_with_project_templates = self.search([('order_id', 'in', order_ids), ('project_id', '!=', False), ('product_id.service_tracking', 'in', ['project_only', 'task_new_project']), ('product_id.project_template_id', '!=', False)])
+            map_so_project_templates = {(sol.order_id.id, sol.product_id.project_template_id.id): sol.project_id for sol in so_lines_with_project_templates}
 
         # search the global project of current SO lines, in which create their task
         map_sol_project = {}
@@ -279,7 +287,9 @@ class SaleOrderLine(models.Model):
 
         def _can_create_project(sol):
             if not sol.project_id:
-                if sol.order_id.id not in map_so_project:
+                if sol.product_id.project_template_id:
+                    return (sol.order_id.id, sol.product_id.project_template_id.id) not in map_so_project_templates
+                elif sol.order_id.id not in map_so_project:
                     return True
             return False
 
@@ -290,13 +300,18 @@ class SaleOrderLine(models.Model):
                     so_line._timesheet_create_task(project=map_sol_project[so_line.id])
 
         # project_only, task_new_project: create a new project, based or not on a template (1 per SO). May be create a task too.
-        if so_line_new_project:
-            for so_line in so_line_new_project:
-                project = so_line.project_id
-                if not project and _can_create_project(so_line):
-                    project = so_line._timesheet_create_project()
+        for so_line in so_line_new_project:
+            project = so_line.project_id
+            if not project and _can_create_project(so_line):
+                project = so_line._timesheet_create_project()
+                if so_line.product_id.project_template_id:
+                    map_so_project_templates[(so_line.order_id.id, so_line.product_id.project_template_id.id)] = project
+                else:
                     map_so_project[so_line.order_id.id] = project
-                if so_line.product_id.service_tracking == 'task_new_project':
-                    if not project:
+            if so_line.product_id.service_tracking == 'task_new_project':
+                if not project:
+                    if so_line.product_id.project_template_id:
+                        project = map_so_project_templates[(so_line.order_id.id, so_line.product_id.project_template_id.id)]
+                    else:
                         project = map_so_project[so_line.order_id.id]
-                    so_line._timesheet_create_task(project=project)
+                so_line._timesheet_create_task(project=project)
