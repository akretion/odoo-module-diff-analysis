PR: https://github.com/odoo/odoo/pull/

From: c9ca3761464413327d2beb697553a3ccd7eef4d1
From: RomainLibert
Date: 2019-05-31 08:21:20

Structural Changes: 22
Total Changes: 176

[IMP] hr: Introduce the public employee profile

Purpose
=======

1/ Robustness & security: right now it is not easy to understand and do something
   clean in term of security (hr people vs employees, private info vs public). A
   HR officer doesn't know if he can write something on the chatter. Currently, a
   note will be visible for all the employees who have access to the employee form
   view for example.
2/ In term of business, it makes sense to let a hr manages payroll stuff (contract,
   employees private information, ... and other employee see public information
   (résumé and work information)

Specification
=============

Introduce 2 new models:

- hr.employee.base (AbstractModel): This represents the basic skeleton
  model on which the shared fields and methods between the public and
  the private employees models.
- hr.employee.public (_auto=False): This is a sql view based on the
  employee values, readable for an internal user (i.e. an employee).

The model hr.employee is not readable anymore for an employee.

There are now 3 ways to access the employee data:
1/ From the hr.employee views. HR officer access rights are required
2/ From the public profile. The public data for an employee are accessible
   but can't be modified.
3/ From the 'My Profile' menu. A classic employee can access its own
   data from there, and can modify them.

================================= pseudo patch: =================================

--- a/addons/hr/models/__init__.py
+++ b/addons/hr/models/__init__.py
@@ -1,8 +1,10 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from . import hr_employee_base 
 from . import hr_employee
 from . import hr_employee_category
+from . import hr_employee_public
 from . import hr_department
 from . import hr_job
 from . import hr_plan

--- a/addons/hr/models/hr_employee.py
+++ b/addons/hr/models/hr_employee.py
@@ -12,11 +12,17 @@ from odoo.modules.module import get_module_resource
 
 
 class HrEmployeePrivate(models.Model):
+    """
+    NB: Any field only available on the model hr.employee (i.e. not on the
+    hr.employee.public model) should have `groups="hr.group_hr_user"` on its
+    definition to avoid being prefetched when the user hasn't access to the
+    hr.employee model. Indeed, the prefetch loads the data for all the fields
+    that are available according to the group defined on them.
+    """
     _name = "hr.employee"
     _description = "Employee"
     _order = 'name'
-    _inherit = ['mail.thread', 'mail.activity.mixin', 'resource.mixin']
-
+    _inherit = ['hr.employee.base', 'mail.thread', 'mail.activity.mixin', 'resource.mixin']
     _mail_post_access = 'read'
 
     @api.model
@@ -83,7 +89,6 @@ class HrEmployeePrivate(models.Model):
     emergency_phone = fields.Char("Emergency Phone", groups="hr.group_hr_user", tracking=True)
     km_home_work = fields.Integer(string="Km home-work", groups="hr.group_hr_user", tracking=True)
     google_drive_link = fields.Char(string="Employee Documents", groups="hr.group_hr_user", tracking=True)
-    job_title = fields.Char("Job Title")
 
     # image: all image fields are base64 encoded and PIL-supported
     image = fields.Binary(
@@ -99,17 +104,8 @@ class HrEmployeePrivate(models.Model):
         help="Small-sized photo of the employee. It is automatically "
              "resized as a 64x64px image, with aspect ratio preserved. "
              "Use this field anywhere a small image is required.")
-    # work
-    address_id = fields.Many2one(
-        'res.partner', 'Work Address')
-    work_phone = fields.Char('Work Phone')
-    mobile_phone = fields.Char('Work Mobile')
     phone = fields.Char(related='address_home_id.phone', related_sudo=False, string="Private Phone", groups="hr.group_hr_user")
-    work_email = fields.Char('Work Email')
-    work_location = fields.Char('Work Location')
     # employee in company
-    job_id = fields.Many2one('hr.job', 'Job Position')
-    department_id = fields.Many2one('hr.department', 'Department')
     parent_id = fields.Many2one('hr.employee', 'Manager')
     child_ids = fields.One2many('hr.employee', 'parent_id', string='Direct subordinates')
     coach_id = fields.Many2one('hr.employee', 'Coach')
@@ -118,22 +114,80 @@ class HrEmployeePrivate(models.Model):
         'emp_id', 'category_id',
         string='Tags')
     # misc
-    notes = fields.Text('Notes')
-    color = fields.Integer('Color Index', default=0)
-    barcode = fields.Char(string="Badge ID", help="ID used for employee identification.", copy=False)
-    pin = fields.Char(string="PIN", help="PIN used to Check In/Out in Kiosk Mode (if enabled in Configuration).", copy=False)
+    notes = fields.Text('Notes', groups="hr.group_hr_user")
+    color = fields.Integer('Color Index', default=0, groups="hr.group_hr_user")
+    barcode = fields.Char(string="Badge ID", help="ID used for employee identification.", groups="hr.group_hr_user", copy=False)
+    pin = fields.Char(string="PIN", groups="hr.group_hr_user", copy=False,
+        help="PIN used to Check In/Out in Kiosk Mode (if enabled in Configuration).")
     departure_reason = fields.Selection([
         ('fired', 'Fired'),
         ('resigned', 'Resigned'),
         ('retired', 'Retired')
-    ], string="Departure Reason", copy=False, tracking=True)
-    departure_description = fields.Text(string="Additional Information", copy=False, tracking=True)
+    ], string="Departure Reason", groups="hr.group_hr_user", copy=False, tracking=True)
+    departure_description = fields.Text(string="Additional Information", groups="hr.group_hr_user", copy=False, tracking=True)
+    message_main_attachment_id = fields.Many2one(groups="hr.group_hr_user")
 
     _sql_constraints = [
         ('barcode_uniq', 'unique (barcode)', "The Badge ID must be unique, this one is already assigned to another employee."),
         ('user_uniq', 'unique (user_id, company_id)', "A user cannot be linked to multiple employees in the same company.")
     ]
 
+    @api.multi
+    def name_get(self):
+        if self.check_access_rights('read', raise_exception=False):
+            return super(HrEmployeePrivate, self).name_get()
+        return self.env['hr.employee.public'].browse(self.ids).name_get()
+
+    @api.multi
+    def read(self, fields, load='_classic_read'):
+        if self.check_access_rights('read', raise_exception=False):
+            return super(HrEmployeePrivate, self).read(fields, load=load)
+        private_fields = set(fields).difference(self.env['hr.employee.public']._fields.keys())
+        if private_fields:
+            raise AccessError(_('The fields "%s" you try to read is not available on the public employee profile.') % (','.join(private_fields)))
+        return self.env['hr.employee.public'].browse(self.ids).read(fields, load=load)
+
+    @api.model
+    def _search(self, args, offset=0, limit=None, order=None, count=False, access_rights_uid=None):
+        """
+            We override the _search because it is the method that checks the access rights
+            This is correct to override the _search. That way we enforce the fact that calling
+            search on an hr.employee returns a hr.employee recordset, even if you don't have access
+            to this model, as the result of _search (the ids of the public employees) is to be
+            browsed on the hr.employee model. This can be trusted as the ids of the public
+            employees exactly match the ids of the related hr.employee. 
+        """
+        if self.check_access_rights('read', raise_exception=False):
+            return super(HrEmployeePrivate, self)._search(args, offset=offset, limit=limit, order=order, count=count, access_rights_uid=access_rights_uid)
+        return self.env['hr.employee.public']._search(args, offset=offset, limit=limit, order=order, count=count, access_rights_uid=access_rights_uid)
+
+    @api.multi
+    def get_formview_id(self, access_uid=None):
+        """ Override this method in order to redirect many2one towards the right model depending on access_uid """
+        if access_uid:
+            self_sudo = self.sudo(access_uid)
+        else:
+            self_sudo = self
+
+        if self_sudo.check_access_rights('read', raise_exception=False):
+            return super(HrEmployeePrivate, self).get_formview_id(access_uid=access_uid)
+        # Hardcode the form view for public employee
+        return self.env.ref('hr.hr_employee_public_view_form').id
+
+    @api.multi
+    def get_formview_action(self, access_uid=None):
+        """ Override this method in order to redirect many2one towards the right model depending on access_uid """
+        res = super(HrEmployeePrivate, self).get_formview_action(access_uid=access_uid)
+        if access_uid:
+            self_sudo = self.sudo(access_uid)
+        else:
+            self_sudo = self
+
+        if not self_sudo.check_access_rights('read', raise_exception=False):
+            res['res_model'] = 'hr.employee.public'
+
+        return res
+
     @api.constrains('pin')
     def _verify_pin(self):
         for employee in self:

--- a/None
+++ b/addons/hr/models/hr_employee_base.py
@@ -0,0 +1,25 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class HrEmployeeBase(models.AbstractModel):
+    _name = "hr.employee.base"
+    _description = "Basic Employee"
+    _order = 'name'
+
+    name = fields.Char()
+    active = fields.Boolean("Active")
+    department_id = fields.Many2one('hr.department', 'Department')
+    job_id = fields.Many2one('hr.job', 'Job Position')
+    job_title = fields.Char("Job Title")
+    company_id = fields.Many2one('res.company', 'Company')
+    address_id = fields.Many2one('res.partner', 'Work Address')
+    work_phone = fields.Char('Work Phone')
+    mobile_phone = fields.Char('Work Mobile')
+    work_email = fields.Char('Work Email')
+    work_location = fields.Char('Work Location')
+    user_id = fields.Many2one('res.users')
+    resource_id = fields.Many2one('resource.resource')
+    resource_calendar_id = fields.Many2one('resource.calendar')

--- a/None
+++ b/addons/hr/models/hr_employee_public.py
@@ -0,0 +1,59 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, tools
+
+
+class HrEmployeePublic(models.Model):
+    _name = "hr.employee.public"
+    _inherit = ["hr.employee.base"]
+    _description = 'Public Employee'
+    _order = 'name'
+    _auto = False
+    _log_access = True # Include magic fields
+
+    # Fields coming from hr.employee.base
+    create_date = fields.Datetime(readonly=True)
+    name = fields.Char(readonly=True)
+    active = fields.Boolean(readonly=True)
+    department_id = fields.Many2one(readonly=True)
+    job_id = fields.Many2one(readonly=True)
+    job_title = fields.Char(readonly=True)
+    company_id = fields.Many2one(readonly=True)
+    address_id = fields.Many2one(readonly=True)
+    mobile_phone = fields.Char(readonly=True)
+    work_phone = fields.Char(readonly=True)
+    work_email = fields.Char(readonly=True)
+    work_location = fields.Char(readonly=True)
+    user_id = fields.Many2one(readonly=True)
+    resource_id = fields.Many2one(readonly=True)
+    resource_calendar_id = fields.Many2one(readonly=True)
+
+    # hr.employee.public specific fields
+    child_ids = fields.One2many('hr.employee.public', 'parent_id', string='Direct subordinates', readonly=True)
+    image = fields.Binary("Photo", compute='_compute_image', readonly=True, compute_sudo=True)
+    image_medium = fields.Binary("Medium-sized photo", compute='_compute_image', readonly=True, compute_sudo=True)
+    image_small = fields.Binary("Small-sized photo", compute='_compute_image', readonly=True, compute_sudo=True)
+    parent_id = fields.Many2one('hr.employee.public', 'Manager', readonly=True)
+    coach_id = fields.Many2one('hr.employee.public', 'Coach', readonly=True)
+
+    def _compute_image(self):
+        for employee in self:
+            # We have to be in sudo to have access to the images
+            employee_id = self.sudo().env['hr.employee'].browse(employee.id)
+            employee.image = employee_id.image
+            employee.image_medium = employee_id.image_medium
+            employee.image_small = employee_id.image_small
+
+    @api.model
+    def _get_fields(self):
+        return ','.join('emp.%s' % name for name, field in self._fields.items() if field.store and field.type not in ['many2many', 'one2many'])
+
+    @api.model_cr
+    def init(self):
+        tools.drop_view_if_exists(self.env.cr, self._table)
+        self.env.cr.execute("""CREATE or REPLACE VIEW %s as (
+            SELECT
+                %s
+            FROM hr_employee emp
+        )""" % (self._table, self._get_fields()))
