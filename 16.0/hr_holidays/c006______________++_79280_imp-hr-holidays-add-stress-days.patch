PR: https://github.com/odoo/odoo/pull/79280

From: 3ffe2cdb974688ae97bbef511ae30a8813e2c9e4
From: Kevin Baptiste
Date: 2022-02-16 13:04:44

Structural Changes: 7
Total Changes: 78

[IMP] hr_holidays: add Stress Days

Add "Stress Days", days where employees are *not* allowed to request
a time off. Time Off officers are still allowed to request holidays on
those dates.

closes odoo/odoo#79280

Taskid: 2679873
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/__init__.py
+++ b/addons/hr_holidays/models/__init__.py
@@ -9,6 +9,7 @@ from . import hr_leave_allocation
 from . import hr_leave_type
 from . import hr_leave_accrual_plan_level
 from . import hr_leave_accrual_plan
+from . import hr_leave_stress_day
 from . import mail_message_subtype
 from . import res_partner
 from . import res_users

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -278,6 +278,7 @@ class HolidaysRequest(models.Model):
     # view
     is_hatched = fields.Boolean('Hatched', compute='_compute_is_hatched')
     is_striked = fields.Boolean('Striked', compute='_compute_is_hatched')
+    has_stress_day = fields.Boolean(compute='_compute_has_stress_day')
 
     _sql_constraints = [
         ('type_value',
@@ -520,6 +521,34 @@ class HolidaysRequest(models.Model):
             else:
                 holiday.department_id = False
 
+    @api.depends('date_from', 'date_to', 'holiday_status_id')
+    def _compute_has_stress_day(self):
+        date_from, date_to = min(self.mapped('date_from')), max(self.mapped('date_to'))
+        resource_calendar_id = self.employee_id.resource_calendar_id or self.env.company.resource_calendar_id
+        if date_from and date_to:
+            stress_days = self.env['hr.leave.stress.day'].search([
+                ('start_date', '<=', date_to.date()),
+                ('end_date', '>=', date_from.date()),
+                '|',
+                    ('resource_calendar_id', '=', False),
+                    ('resource_calendar_id', 'in', resource_calendar_id.ids),
+            ])
+
+            for leave in self:
+                domain = [
+                    ('start_date', '<=', leave.date_to.date()),
+                    ('end_date', '>=', leave.date_from.date()),
+                    '|',
+                        ('resource_calendar_id', '=', False),
+                        ('resource_calendar_id', '=', (leave.employee_id.resource_calendar_id or self.env.company.resource_calendar_id).id)
+                ]
+
+                if leave.holiday_status_id.company_id:
+                    domain += [('company_id', '=', leave.holiday_status_id.company_id.id)]
+                leave.has_stress_day = leave.date_from and leave.date_to and stress_days.filtered_domain(domain)
+        else:
+            self.has_stress_day = False
+
     @api.depends('date_from', 'date_to', 'employee_id')
     def _compute_number_of_days(self):
         for holiday in self:
@@ -900,6 +929,12 @@ class HolidaysRequest(models.Model):
                         date=vstop
                     ))
 
+    @api.constrains('date_from', 'date_to')
+    def _check_stress_day(self):
+        is_leave_user = self.user_has_groups('hr_holidays.group_hr_holidays_user')
+        if not is_leave_user and any(leave.has_stress_day for leave in self):
+            raise ValidationError(_('You are not allowed to request a time off on a Stress Day.'))
+
     def _check_double_validation_rules(self, employees, state):
         if self.user_has_groups('hr_holidays.group_hr_holidays_manager'):
             return

--- a/None
+++ b/addons/hr_holidays/models/hr_leave_stress_day.py
@@ -0,0 +1,42 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+from dateutil.relativedelta import relativedelta
+from random import randint
+
+from odoo import api, fields, models
+
+
+class StressDay(models.Model):
+    _name = 'hr.leave.stress.day'
+    _description = 'Stress Day'
+    _order = 'start_date desc, end_date desc'
+
+    name = fields.Char(required=True)
+    company_id = fields.Many2one('res.company', default=lambda self: self.env.company, required=True)
+    start_date = fields.Date(required=True)
+    end_date = fields.Date(required=True)
+    color = fields.Integer(default=lambda dummy: randint(1, 11))
+    resource_calendar_id = fields.Many2one('resource.calendar', 'Working Hours',
+        default=lambda self: self.env.company.resource_calendar_id.id, domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
+
+    _sql_constraints = [
+        ('date_from_after_day_to', 'CHECK(start_date <= end_date)', 'The start date must be anterior than the end date.')
+    ]
+
+    @api.model
+    def get_stress_days(self, start_date, end_date, resource_calendar_id=None):
+        resource_calendar_id = resource_calendar_id or self.env.user.employee_id.resource_calendar_id or self.env.company.resource_calendar_id
+        all_days = {}
+        stress_days = self.env['hr.leave.stress.day'].search([
+            ('start_date', '>=', start_date),
+            ('end_date', '<=', end_date),
+            '|',
+                ('resource_calendar_id', '=', False),
+                ('resource_calendar_id', '=', resource_calendar_id.id),
+        ])
+
+        for stress_day in stress_days:
+            num_days = (stress_day.end_date - stress_day.start_date).days
+            for d in range(num_days + 1):
+                all_days[str(stress_day.start_date + relativedelta(days=d))] = stress_day.color
+
+        return all_days
