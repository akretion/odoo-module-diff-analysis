PR: https://github.com/odoo/odoo/pull/98088

From: aa250d3245a3735df1f74fd5c96dbfa4490639b3
From: Audric Onockx (auon)
Date: 2023-02-14 16:08:49

Total Changes: 193

[IMP] project: improve and create task template for recurrence

The goal of this task is to ease the deletion/archiving of recurrent
tasks by giving the user the option to either continue
or stop the recurrence. The two main use-cases are:

\- You have a recurring task for a weekly meeting.
Next week, the user will be on time off. You are thus deleting the task.
However, you would still like tasks generated for the following meetings
and to keep track of the previous meetings.

\- You have a recurring task for a weekly meeting with an employee
that has just been fired. You are thus deleting the task and
you won't need this recurrence anymore.
(You may or may not want to keep track of the previous meetings.)

The main issue we are currently facing is that we need a task that acts
as a template for the recurrence to continue. This means that a user
cannot delete all of his tasks without breaking their recurrence.

Consequently, we will be using a "task template" for each recurrence,
which will only serve technical purposes and be invisible to the users.
When the recurrence is stopped, the task template is deleted.
This simplifies the technical and functional implementation as the user
won't be able to modify the template themselves.

\- Added task templates to recurrences in the data.
\- Deleted "all tasks" option form recurence update and changed "this
and following tasks" to "this and future tasks". Most of the time, the
user is going to update the most recent task, and it doesn't make
any functional sense to update past ones.
\- Same options for delete and archive.
\- No recurrent subtasks allowed anymore.
\- `date_deadline` is copied. We compute it by adding the delta between
the create date and the `date_deadline` of the template to the next
recurrence date.
\- Added filter to several view not to display task templates.

task-2937565

closes odoo/odoo#98088

Related: odoo/upgrade#4232
Related: odoo/enterprise#30416
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -54,6 +54,8 @@ PROJECT_TASK_READABLE_FIELDS = {
     'dependent_ids',
     'is_blocked',
     'message_is_follower',
+    'recurring_task',
+    'recurrence_template_id',
 }
 
 PROJECT_TASK_WRITABLE_FIELDS = {
@@ -1228,7 +1230,7 @@ class Task(models.Model):
     is_closed = fields.Boolean(related="stage_id.fold", string="Closing Stage", store=True, index=True, help="Folded in Kanban stages are closing stages.")
     parent_id = fields.Many2one('project.task', string='Parent Task', index=True)
     ancestor_id = fields.Many2one('project.task', string='Ancestor Task', compute='_compute_ancestor_id', index='btree_not_null', recursive=True, store=True)
-    child_ids = fields.One2many('project.task', 'parent_id', string="Sub-tasks")
+    child_ids = fields.One2many('project.task', 'parent_id', string="Sub-tasks", domain="[('recurring_task', '=', False)]")
     child_text = fields.Char(compute="_compute_child_text")
     allow_subtasks = fields.Boolean(string="Allow Sub-tasks", related="project_id.allow_subtasks", readonly=True)
     subtask_count = fields.Integer("Sub-task Count", compute='_compute_subtask_count')
@@ -1282,10 +1284,10 @@ class Task(models.Model):
     recurrence_id = fields.Many2one('project.task.recurrence', copy=False)
     recurrence_update = fields.Selection([
         ('this', 'This task'),
-        ('subsequent', 'This and following tasks'),
-        ('all', 'All tasks'),
+        ('future', 'This and future tasks'),
     ], default='this', store=False)
     recurrence_message = fields.Char(string='Next Recurrencies', compute='_compute_recurrence_message')
+    recurrence_template_id = fields.Many2one('project.task')
 
     repeat_interval = fields.Integer(string='Repeat Every', default=1, compute='_compute_repeat', readonly=False)
     repeat_unit = fields.Selection([
@@ -1367,6 +1369,10 @@ class Task(models.Model):
     is_analytic_account_id_changed = fields.Boolean('Is Analytic Account Manually Changed', compute='_compute_is_analytic_account_id_changed', store=True)
     project_analytic_account_id = fields.Many2one('account.analytic.account', string='Project Analytic Account', related='project_id.analytic_account_id')
 
+    _sql_constraints = [
+        ('recurring_task_has_no_parent', 'CHECK (NOT (recurring_task IS TRUE AND parent_id IS NOT NULL))', "A subtask cannot be recurrent.")
+    ]
+
     @property
     def SELF_READABLE_FIELDS(self):
         return PROJECT_TASK_READABLE_FIELDS | self.SELF_WRITABLE_FIELDS
@@ -1972,15 +1978,11 @@ class Task(models.Model):
                 raise AccessError(_('You have not write access of %s field.') % field)
 
     def _load_records_create(self, vals_list):
-        projects_with_recurrence = self.env['project.project'].search([('allow_recurring_tasks', '=', True)])
         for vals in vals_list:
             if vals.get('recurring_task'):
-                if vals.get('project_id') in projects_with_recurrence.ids and not vals.get('recurrence_id'):
+                if not vals.get('recurrence_id'):
                     default_val = self.default_get(self._get_recurrence_fields())
                     vals.update(**default_val)
-                else:
-                    for field_name in self._get_recurrence_fields() + ['recurring_task']:
-                        vals.pop(field_name, None)
             project_id = vals.get('project_id')
             if project_id:
                 self = self.with_context(default_project_id=project_id)
@@ -2001,6 +2003,7 @@ class Task(models.Model):
         if is_portal_user:
             self.check_access_rights('create')
         default_stage = dict()
+        recurrences = self.env['project.task.recurrence']
         for vals in vals_list:
             if is_portal_user:
                 self._ensure_fields_are_accessible(vals.keys(), operation='write', check_group_user=False)
@@ -2043,6 +2046,7 @@ class Task(models.Model):
                 rec_values['next_recurrence_date'] = fields.Datetime.today()
                 recurrence = self.env['project.task.recurrence'].create(rec_values)
                 vals['recurrence_id'] = recurrence.id
+                recurrences += recurrence
         # The sudo is required for a portal user as the record creation
         # requires the read access on other models, as mail.template
         # in order to compute the field tracking
@@ -2073,6 +2077,8 @@ class Task(models.Model):
                 task.message_subscribe(follower.partner_id.ids, follower.subtype_ids.ids)
             if current_partner not in task.message_partner_ids:
                 task.message_subscribe(current_partner.ids)
+        for recurrence in recurrences:
+            recurrence._create_task(task_from=recurrence.task_ids[-1])
         return tasks
 
     def write(self, vals):
@@ -2089,10 +2095,6 @@ class Task(models.Model):
         now = fields.Datetime.now()
         if 'parent_id' in vals and vals['parent_id'] in self.ids:
             raise UserError(_("Sorry. You can't set a task as its parent task."))
-        if 'active' in vals and not vals.get('active') and any(self.mapped('recurrence_id')):
-            vals['recurring_task'] = False
-        if 'recurrence_id' in vals and vals.get('recurrence_id') and any(not task.active for task in self):
-            raise UserError(_('Archived tasks cannot be recurring. Please unarchive the task first.'))
         # stage change: update date_last_stage_update
         if 'stage_id' in vals:
             if not 'project_id' in vals and self.filtered(lambda t: not t.project_id):
@@ -2107,6 +2109,7 @@ class Task(models.Model):
 
         # recurrence fields
         rec_fields = vals.keys() & self._get_recurrence_fields()
+        task_for_recurrence = {}
         if rec_fields:
             rec_values = {rec_field: vals[rec_field] for rec_field in rec_fields}
             for task in self:
@@ -2116,20 +2119,17 @@ class Task(models.Model):
                     rec_values['next_recurrence_date'] = fields.Datetime.today()
                     recurrence = self.env['project.task.recurrence'].create(rec_values)
                     task.recurrence_id = recurrence.id
+                    task_for_recurrence[recurrence] = task
 
         if 'recurring_task' in vals and not vals.get('recurring_task'):
             self.recurrence_id.unlink()
 
         tasks = self
         recurrence_update = vals.pop('recurrence_update', 'this')
-        if recurrence_update != 'this':
-            recurrence_domain = []
-            if recurrence_update == 'subsequent':
-                for task in self:
-                    recurrence_domain = expression.OR([recurrence_domain, ['&', ('recurrence_id', '=', task.recurrence_id.id), ('create_date', '>=', task.create_date)]])
-            else:
-                recurrence_domain = [('recurrence_id', 'in', self.recurrence_id.ids)]
-            tasks |= self.env['project.task'].search(recurrence_domain)
+        if recurrence_update == 'future':
+            for task in self:
+                recurrent_task = task.ancestor_id if task.ancestor_id.recurring_task else task
+                task_for_recurrence[recurrent_task.recurrence_id] = task
 
         # The sudo is required for a portal user as the record update
         # requires the write access on others models, as rating.rating
@@ -2165,20 +2165,22 @@ class Task(models.Model):
                 task.display_project_id = task.project_id
 
         self._task_message_auto_subscribe_notify({task: task.user_ids - old_user_ids[task] - self.env.user for task in self})
+        for recurrence, task in task_for_recurrence.items():
+            recurrence._create_task(task_from=task)
         return result
 
+    def unlink_task_and_subtasks_recursively(self):
+        childs = self.with_context(active_test=False).child_ids
+        if childs:
+            childs.unlink_task_and_subtasks_recursively()
+        self.unlink()
+
     def update_date_end(self, stage_id):
         project_task_type = self.env['project.task.type'].browse(stage_id)
         if project_task_type.fold:
             return {'date_end': fields.Datetime.now()}
         return {'date_end': False}
 
-    @api.ondelete(at_uninstall=False)
-    def _unlink_except_recurring(self):
-        if any(self.mapped('recurrence_id')):
-            # TODO: show a dialog to stop the recurrence
-            raise UserError(_('You cannot delete recurring tasks. Please disable the recurrence first.'))
-
     # ---------------------------------------------------
     # Subtasks
     # ---------------------------------------------------
@@ -2642,14 +2644,12 @@ class Task(models.Model):
         else:
             return action
 
-    def action_stop_recurrence(self):
-        tasks = self.env['project.task'].with_context(active_test=False).search([('recurrence_id', 'in', self.recurrence_id.ids)])
-        tasks.write({'recurring_task': False})
+    def action_unlink_recurrence(self):
+        self.recurrence_id.task_ids.recurring_task = False
         self.recurrence_id.unlink()
 
-    def action_continue_recurrence(self):
-        self.recurrence_id = False
-        self.recurring_task = False
+    def action_unlink_task_from_recurrence(self):
+        self.recurrence_template_id.unlink_task_and_subtasks_recursively()
 
     # ---------------------------------------------------
     # Rating business

--- a/addons/project/models/project_task_recurrence.py
+++ b/addons/project/models/project_task_recurrence.py
@@ -44,6 +44,7 @@ class ProjectTaskRecurrence(models.Model):
     _name = 'project.task.recurrence'
     _description = 'Task Recurrence'
 
+    task_template_id = fields.Many2one('project.task')
     task_ids = fields.One2many('project.task', 'recurrence_id', copy=False)
     next_recurrence_date = fields.Date()
     recurrence_left = fields.Integer(string="Number of Tasks Left to Create", copy=False)
@@ -203,53 +204,56 @@ class ProjectTaskRecurrence(models.Model):
         rules = rrule(**rrule_kwargs)
         return list(rules) if rules else []
 
-    def _new_task_values(self, task):
+    def _new_task_values(self, task_from, to_template=False):
         self.ensure_one()
         fields_to_copy = self._get_recurring_fields()
-        task_values = task.read(fields_to_copy).pop()
+        task_values = task_from.read(fields_to_copy).pop()
         create_values = {
             field: value[0] if isinstance(value, tuple) else value for field, value in task_values.items()
         }
-        create_values['stage_id'] = task.project_id.type_ids[0].id if task.project_id.type_ids else task.stage_id.id
+        create_values['stage_id'] = task_from.project_id.type_ids[0].id if task_from.project_id.type_ids\
+                               else task_from.stage_id.id
+        create_values['date_deadline'] = self._get_postponed_date(task_from, 'date_deadline', to_template=to_template)
+        create_values['active'] = not to_template
+        create_values['recurrence_template_id'] = not to_template and task_from.id
         return create_values
 
-    def _create_subtasks(self, task, new_task, depth=3):
-        if depth == 0 or not task.child_ids:
-            return
-        children = []
-        child_recurrence = []
+    def _create_subtasks(self, task_from, task_to, to_template=False):
+        self.ensure_one()
+        childs_from = task_from.with_context(active_test=False).child_ids
+        if to_template:
+            childs_to = task_from.recurrence_template_id.with_context(active_test=False).child_ids
+            childs_from_to_create = childs_from.filtered(lambda t: not t.recurrence_template_id)
+            childs_to_to_delete = childs_to.filtered(lambda t: t not in childs_from.recurrence_template_id)
+            childs_to_to_delete.unlink_task_and_subtasks_recursively()
+            (childs_to - childs_to_to_delete).parent_id = task_to
+        else:
+            childs_from_to_create = childs_from
         # copy the subtasks of the original task
-        for child in task.child_ids:
-            if child.recurrence_id and child.recurrence_id.id in child_recurrence:
-                # The subtask has been generated by another subtask in the childs
-                # This subtasks is skipped as it will be meant to be a copy of the first
-                # task of the recurrence we just created.
-                continue
-            child_values = self._new_task_values(child)
-            child_values['parent_id'] = new_task.id
-            if child.recurrence_id:
-                # The subtask has a recurrence, the recurrence is thus copied rather than used
-                # with raw reference in order to decouple the recurrence of the initial subtask
-                # from the recurrence of the copied subtask which will live its own life and generate
-                # subsequent tasks.
-                child_recurrence += [child.recurrence_id.id]
-                child_values['recurrence_id'] = child.recurrence_id.copy().id
-            if child.child_ids and depth > 1:
-                # If child has childs in the following layer and we will have to copy layer, we have to
-                # first create the new_child record in order to have a new parent_id reference for the
-                # "grandchildren" tasks
-                new_child = self.env['project.task'].sudo().create(child_values)
-                self._create_subtasks(child, new_child, depth=depth - 1)
+        for child_from in childs_from_to_create:
+            child_values = self._new_task_values(child_from, to_template=to_template)
+            child_values['parent_id'] = task_to.id
+            child_to = self.env['project.task'].sudo().create(child_values)
+            if to_template:
+                child_from.recurrence_template_id = child_to
+            if child_from.with_context(active_test=False).child_ids:
+                self._create_subtasks(child_from, child_to, to_template=to_template)
+
+    def _create_task(self, task_from=False):
+        self.ensure_one()
+        to_template = bool(task_from)
+        task_from = task_from or self.task_template_id
+        create_values = self._new_task_values(task_from, to_template=to_template)
+        task_to = self.env['project.task'].sudo().create(create_values)
+        self._create_subtasks(task_from, task_to, to_template=to_template)
+        if to_template:
+            task_from.recurrence_template_id.unlink()
+            task_from.recurrence_template_id = task_to
+            if task_from.parent_id:
+                task_to.parent_id = task_from.parent_id.recurrence_template_id
             else:
-                children.append(child_values)
-        self.env['project.task'].sudo().create(children)
-
-    def _create_next_task(self):
-        for recurrence in self:
-            task = recurrence.sudo().task_ids[-1]
-            create_values = recurrence._new_task_values(task)
-            new_task = self.env['project.task'].sudo().create(create_values)
-            recurrence._create_subtasks(task, new_task, depth=3)
+                self.task_template_id.unlink_task_and_subtasks_recursively()
+                self.task_template_id = task_to
 
     def _set_next_recurrence_date(self, date_start=None):
         today = fields.Date.today()
@@ -273,10 +277,15 @@ class ProjectTaskRecurrence(models.Model):
             return
         today = fields.Date.today()
         recurring_today = self.search([('next_recurrence_date', '<=', today)])
-        recurring_today._create_next_task()
-        for recurrence in recurring_today.filtered(lambda r: r.repeat_type == 'after'):
-            recurrence.recurrence_left -= 1
-        recurring_today._set_next_recurrence_date()
+        recurrence_ids = []  # to set the next recurrence date
+        for recurrence in recurring_today:
+            if not recurrence.task_template_id.project_id.allow_recurring_tasks:
+                continue
+            recurrence_ids.append(recurrence.id)
+            recurrence._create_task()
+            if recurrence.repeat_type == 'after':
+                recurrence.recurrence_left -= 1
+        self.browse(recurrence_ids)._set_next_recurrence_date()
 
     @api.model_create_multi
     def create(self, vals_list):
@@ -296,3 +305,39 @@ class ProjectTaskRecurrence(models.Model):
         if 'next_recurrence_date' not in vals:
             self._set_next_recurrence_date()
         return res
+
+    def unlink(self):
+        self.task_template_id.unlink_task_and_subtasks_recursively()
+        return super().unlink()
+
+    def _get_postponed_date(self, task_from, field, to_template=False):
+        # We cannot just apply the recurrence's repeat interval to the task's deadline because,
+        # if the recurrence is created later than the task, the planned date won't be set as expected.
+        # Instead, we'll apply the delta create-deadline of the previous task to the new one's create date.
+
+        # Apply the repeat interval to the create date :                # ~ the repeat interval
+        #   p1~p2~p3   ?  ?                                             # / the expected delta create-deadline
+        #  /          /  /     => p2 should be set at ?                 # c the create dates
+        # c1---------c2~c3                                              # p the deadline
+        #            ^ Recurrence initiation
+
+        # Apply the previous delta create-deadline to the create date :
+        #   p1         p2 p3
+        #  /          /  /     => p2 is set as expected
+        # c1---------c2~c3
+        #            ^ Recurrence initiation
+        self.ensure_one()
+        if not task_from[field]:
+            return False
+        field_is_datetime = task_from._fields[field].type == 'datetime'
+        datetime = task_from[field]
+        date = datetime.date() if field_is_datetime else datetime
+        delta = date - task_from.create_date.date()
+        if to_template:
+            next_recurrence_date = (self.task_template_id.create_date or self.create_date).date()
+        else:
+            next_recurrence_date = self.next_recurrence_date or fields.Date.today()
+        postponed_date = next_recurrence_date + relativedelta(days=delta.days)
+        if field_is_datetime:
+            postponed_date += relativedelta(hour=datetime.hour, minute=datetime.minute, second=datetime.second)
+        return postponed_date
