PR: https://github.com/odoo/odoo/pull/162167

From: e82567f9d5842bd95fe01ba3b9f54a65437e313f
From: Vincent Larcin
Date: 2024-05-08 16:51:37

Structural Changes: 44.8
Total Changes: 53

[IMP] services: avoid exporting labels of technical fields

Task-3631801

closes odoo/odoo#162167

Related: odoo/enterprise#60904
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_project/models/project_milestone.py
+++ b/addons/sale_project/models/project_milestone.py
@@ -17,15 +17,15 @@ class ProjectMilestone(models.Model):
             ('qty_delivered_method', '=', 'milestones'),
         ], limit=1)
 
-    allow_billable = fields.Boolean(related='project_id.allow_billable')
-    project_partner_id = fields.Many2one(related='project_id.partner_id')
+    allow_billable = fields.Boolean(related='project_id.allow_billable', export_string_translation=False)
+    project_partner_id = fields.Many2one(related='project_id.partner_id', export_string_translation=False)
 
     sale_line_id = fields.Many2one('sale.order.line', 'Sales Order Item', default=_default_sale_line_id, help='Sales Order Item that will be updated once the milestone is reached.',
         domain="[('order_partner_id', '=?', project_partner_id), ('qty_delivered_method', '=', 'milestones')]")
     quantity_percentage = fields.Float('Quantity (%)', compute="_compute_quantity_percentage", store=True, help='Percentage of the ordered quantity that will automatically be delivered once the milestone is reached.')
 
-    sale_line_display_name = fields.Char("Sale Line Display Name", related='sale_line_id.display_name')
-    product_uom = fields.Many2one(related="sale_line_id.product_uom")
+    sale_line_display_name = fields.Char("Sale Line Display Name", related='sale_line_id.display_name', export_string_translation=False)
+    product_uom = fields.Many2one(related="sale_line_id.product_uom", export_string_translation=False)
     product_uom_qty = fields.Float("Quantity", compute="_compute_product_uom_qty", readonly=False)
 
     @api.depends('sale_line_id.product_uom_qty', 'product_uom_qty')

--- a/addons/sale_project/models/project_project.py
+++ b/addons/sale_project/models/project_project.py
@@ -19,16 +19,16 @@ class ProjectProject(models.Model):
         help="Sales order item that will be selected by default on the tasks and timesheets of this project,"
             " except if the employee set on the timesheets is explicitely linked to another sales order item on the project.\n"
             "It can be modified on each task and timesheet entry individually if necessary.")
-    sale_order_id = fields.Many2one(string='Sales Order', related='sale_line_id.order_id', help="Sales order to which the project is linked.")
-    has_any_so_to_invoice = fields.Boolean('Has SO to Invoice', compute='_compute_has_any_so_to_invoice')
-    sale_order_line_count = fields.Integer(compute='_compute_sale_order_count', groups='sales_team.group_sale_salesman')
-    sale_order_count = fields.Integer(compute='_compute_sale_order_count', groups='sales_team.group_sale_salesman')
-    has_any_so_with_nothing_to_invoice = fields.Boolean('Has a SO with an invoice status of No', compute='_compute_has_any_so_with_nothing_to_invoice')
-    invoice_count = fields.Integer(compute='_compute_invoice_count', groups='account.group_account_readonly')
-    vendor_bill_count = fields.Integer(related='analytic_account_id.vendor_bill_count', groups='account.group_account_readonly')
+    sale_order_id = fields.Many2one(string='Sales Order', related='sale_line_id.order_id', export_string_translation=False)
+    has_any_so_to_invoice = fields.Boolean('Has SO to Invoice', compute='_compute_has_any_so_to_invoice', export_string_translation=False)
+    sale_order_line_count = fields.Integer(compute='_compute_sale_order_count', groups='sales_team.group_sale_salesman', export_string_translation=False)
+    sale_order_count = fields.Integer(compute='_compute_sale_order_count', groups='sales_team.group_sale_salesman', export_string_translation=False)
+    has_any_so_with_nothing_to_invoice = fields.Boolean('Has a SO with an invoice status of No', compute='_compute_has_any_so_with_nothing_to_invoice', export_string_translation=False)
+    invoice_count = fields.Integer(compute='_compute_invoice_count', groups='account.group_account_readonly', export_string_translation=False)
+    vendor_bill_count = fields.Integer(related='analytic_account_id.vendor_bill_count', groups='account.group_account_readonly', export_string_translation=False)
     partner_id = fields.Many2one(compute="_compute_partner_id", store=True, readonly=False)
-    display_sales_stat_buttons = fields.Boolean(compute='_compute_display_sales_stat_buttons')
-    sale_order_state = fields.Selection(related='sale_order_id.state')
+    display_sales_stat_buttons = fields.Boolean(compute='_compute_display_sales_stat_buttons', export_string_translation=False)
+    sale_order_state = fields.Selection(related='sale_order_id.state', export_string_translation=False)
 
     @api.model
     def _map_tasks_default_values(self, project):

--- a/addons/sale_project/models/sale_order.py
+++ b/addons/sale_project/models/sale_order.py
@@ -13,19 +13,19 @@ from odoo.osv.expression import AND
 class SaleOrder(models.Model):
     _inherit = 'sale.order'
 
-    tasks_ids = fields.Many2many('project.task', compute='_compute_tasks_ids', search='_search_tasks_ids', string='Tasks associated with this sale')
-    tasks_count = fields.Integer(string='Tasks', compute='_compute_tasks_ids', groups="project.group_project_user")
+    tasks_ids = fields.Many2many('project.task', compute='_compute_tasks_ids', search='_search_tasks_ids', string='Tasks associated with this sale', export_string_translation=False)
+    tasks_count = fields.Integer(string='Tasks', compute='_compute_tasks_ids', groups="project.group_project_user", export_string_translation=False)
 
-    visible_project = fields.Boolean('Display project', compute='_compute_visible_project', readonly=True)
+    visible_project = fields.Boolean('Display project', compute='_compute_visible_project', readonly=True, export_string_translation=False)
     project_id = fields.Many2one('project.project', 'Project',
         help='Select a non billable project on which tasks can be created.')
-    project_ids = fields.Many2many('project.project', compute="_compute_project_ids", string='Projects', copy=False, groups="project.group_project_user,project.group_project_milestone", help="Projects used in this sales order.")
-    project_count = fields.Integer(string='Number of Projects', compute='_compute_project_ids', groups='project.group_project_user')
-    milestone_count = fields.Integer(compute='_compute_milestone_count')
-    is_product_milestone = fields.Boolean(compute='_compute_is_product_milestone')
-    show_create_project_button = fields.Boolean(compute='_compute_show_project_and_task_button', groups='project.group_project_user')
-    show_project_button = fields.Boolean(compute='_compute_show_project_and_task_button', groups='project.group_project_user')
-    show_task_button = fields.Boolean(compute='_compute_show_project_and_task_button', groups='project.group_project_user')
+    project_ids = fields.Many2many('project.project', compute="_compute_project_ids", string='Projects', copy=False, groups="project.group_project_user,project.group_project_milestone", export_string_translation=False)
+    project_count = fields.Integer(string='Number of Projects', compute='_compute_project_ids', groups='project.group_project_user', export_string_translation=False)
+    milestone_count = fields.Integer(compute='_compute_milestone_count', export_string_translation=False)
+    is_product_milestone = fields.Boolean(compute='_compute_is_product_milestone', export_string_translation=False)
+    show_create_project_button = fields.Boolean(compute='_compute_show_project_and_task_button', groups='project.group_project_user', export_string_translation=False)
+    show_project_button = fields.Boolean(compute='_compute_show_project_and_task_button', groups='project.group_project_user', export_string_translation=False)
+    show_task_button = fields.Boolean(compute='_compute_show_project_and_task_button', groups='project.group_project_user', export_string_translation=False)
 
     def _compute_milestone_count(self):
         read_group = self.env['project.milestone']._read_group(

--- a/addons/sale_project/models/sale_order_line.py
+++ b/addons/sale_project/models/sale_order_line.py
@@ -15,12 +15,11 @@ class SaleOrderLine(models.Model):
     qty_delivered_method = fields.Selection(selection_add=[('milestones', 'Milestones')])
     project_id = fields.Many2one(
         'project.project', 'Generated Project',
-        index=True, copy=False)
+        index=True, copy=False, export_string_translation=False)
     task_id = fields.Many2one(
         'project.task', 'Generated Task',
-        index=True, copy=False)
-    # used to know if generate a task and/or a project, depending on the product settings
-    reached_milestones_ids = fields.One2many('project.milestone', 'sale_line_id', string='Reached Milestones', domain=[('is_reached', '=', True)])
+        index=True, copy=False, export_string_translation=False)
+    reached_milestones_ids = fields.One2many('project.milestone', 'sale_line_id', string='Reached Milestones', domain=[('is_reached', '=', True)], export_string_translation=False)
 
     def default_get(self, fields):
         res = super().default_get(fields)
