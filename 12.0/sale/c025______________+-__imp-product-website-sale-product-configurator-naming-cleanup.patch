PR: https://github.com/odoo/odoo/pull/

From: 326dabce09d634e029e68281694ec695fa665666
From: Aur√©lien Warnon
Date: 2018-09-26 13:08:18

Structural Changes: 6
Total Changes: 34

[IMP] product,(website_)sale: Product configurator naming/cleanup

Targets commit d3530eb07e24278117ab396ecb86a59deecc312d

Purpose
=======

[Follow up AL review]
Code cleanup and some improved models naming for the product configurator feature (see targeted commit).
Mostly changes the "product.attribute" related models.

Updated models:

- "product.product.attribute.value" to "product.template.attribute.value"
- "product.attribute.filter.line" to "product.template.attribute.exclusion"
- "product.attribute.line" to "product.template.attribute.line"

Updated fields:

- [sale_order_line in sale/sale.py] "product_custom_variant_values" to "product_custom_attribute_value_ids"
- [product_template_attribute_value in product/product_attribute.py] excluded_for is now a o2m instead of a m2m
- [product.attribute in sale/product_product.py] "create_variant" field is now a Selection with "no_variant" (old false), "always" (old true), "dynamic" (new value)
- [product in product/product.py] "product_attribute_value_ids" to "product_template_attribute_value_ids"

================================= pseudo patch: =================================

--- a/addons/sale/models/product_product.py
+++ b/addons/sale/models/product_product.py
@@ -61,7 +61,7 @@ class ProductAttribute(models.Model):
     type = fields.Selection([
         ('radio', 'Radio'),
         ('select', 'Select'),
-        ('color', 'Color')], default='radio')
+        ('color', 'Color')], default='radio', required=True)
 
 
 class ProductAttributeValue(models.Model):
@@ -76,7 +76,7 @@ class ProductAttributeValue(models.Model):
 
 
 class ProductProductAttributeValue(models.Model):
-    _inherit = "product.product.attribute.value"
+    _inherit = "product.template.attribute.value"
 
     html_color = fields.Char('HTML Color Index', related="product_attribute_value_id.html_color")
     is_custom = fields.Boolean('Is custom value', related="product_attribute_value_id.is_custom")

--- a/addons/sale/models/product_template.py
+++ b/addons/sale/models/product_template.py
@@ -55,14 +55,14 @@ class ProductTemplate(models.Model):
         }
         return action
 
-    def create_product_variant(self, product_attribute_value_ids):
+    def create_product_variant(self, product_template_attribute_value_ids):
         self.ensure_one()
 
         attribute_value_ids = \
-            self.env['product.product.attribute.value'] \
-                .browse(json.loads(product_attribute_value_ids)) \
+            self.env['product.template.attribute.value'] \
+                .browse(json.loads(product_template_attribute_value_ids)) \
                 .mapped('product_attribute_value_id') \
-                .filtered(lambda attribute_value_id: attribute_value_id.attribute_id.create_variant != 'never')
+                .filtered(lambda attribute_value_id: attribute_value_id.attribute_id.create_variant != 'no_variant')
 
         product_variant = self.env['product.product'].create({
             'product_tmpl_id': self.id,

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -939,9 +939,9 @@ class SaleOrderLine(models.Model):
         if self._context.get('no_variant_attribute_values'):
             attributes = self._context.get('no_variant_attribute_values')
             res['product_no_variant_attribute_values'] = [(6, 0, [int(attribute['value']) for attribute in attributes])]
-        if self._context.get('product_custom_variant_values'):
-            values = self._context.get('product_custom_variant_values')
-            res['product_custom_variant_values'] = [(0, 0, value) for value in values]
+        if self._context.get('product_custom_attribute_values'):
+            values = self._context.get('product_custom_attribute_values')
+            res['product_custom_attribute_value_ids'] = [(0, 0, value) for value in values]
         return res
 
     @api.depends('product_uom_qty', 'discount', 'price_unit', 'tax_id')
@@ -1131,10 +1131,10 @@ class SaleOrderLine(models.Model):
     product_updatable = fields.Boolean(compute='_compute_product_updatable', string='Can Edit Product', readonly=True, default=True)
     product_uom_qty = fields.Float(string='Ordered Quantity', digits=dp.get_precision('Product Unit of Measure'), required=True, default=1.0)
     product_uom = fields.Many2one('uom.uom', string='Unit of Measure')
-    product_custom_variant_values = fields.One2many('product.attribute.custom.value', 'sale_order_line_id', string='User entered custom product attribute values')
-    # M2M holding the values of product.attribute with create_variant field set to 'never'
+    product_custom_attribute_value_ids = fields.One2many('product.attribute.custom.value', 'sale_order_line_id', string='User entered custom product attribute values')
+    # M2M holding the values of product.attribute with create_variant field set to 'no_variant'
     # It allows keeping track of the extra_price associated to those attribute values and add them to the SO line description
-    product_no_variant_attribute_values = fields.Many2many('product.product.attribute.value', string='Product attribute values that do not create variants')
+    product_no_variant_attribute_values = fields.Many2many('product.template.attribute.value', string='Product attribute values that do not create variants')
     # Non-stored related field to allow portal user to see the image of the product he has ordered
     product_image = fields.Binary('Product Image', related="product_id.image", store=False)
 
@@ -1441,13 +1441,13 @@ class SaleOrderLine(models.Model):
 
         name = self.get_sale_order_line_multiline_description_sale(product)
 
-        if self.product_custom_variant_values or self.product_no_variant_attribute_values:
+        if self.product_custom_attribute_value_ids or self.product_no_variant_attribute_values:
             name += '\n'
 
-        if self.product_custom_variant_values:
-            for product_custom_variant_value in self.product_custom_variant_values:
-                if product_custom_variant_value.custom_value and product_custom_variant_value.custom_value.strip():
-                    name += '\n' + product_custom_variant_value.attribute_value_id.name + ': ' + product_custom_variant_value.custom_value.strip()
+        if self.product_custom_attribute_value_ids:
+            for product_custom_attribute_value in self.product_custom_attribute_value_ids:
+                if product_custom_attribute_value.custom_value and product_custom_attribute_value.custom_value.strip():
+                    name += '\n' + product_custom_attribute_value.attribute_value_id.name + ': ' + product_custom_attribute_value.custom_value.strip()
 
         if self.product_no_variant_attribute_values:
             for no_variant_attribute_value in self.product_no_variant_attribute_values.filtered(
