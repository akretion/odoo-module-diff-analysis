PR: https://github.com/odoo/odoo/pull/

From: 260b999922766668713c92418bf7431d465b532e
From: Yannick Tivisse
Date: 2024-06-20 12:22:53

Structural Changes: 9
Total Changes: 266

[IMP] hr_holidays: Remove multi-employee hr.leave

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -153,9 +153,8 @@ class HolidaysRequest(models.Model):
     # HR data
 
     employee_id = fields.Many2one(
-        'hr.employee', compute='_compute_from_employee_ids', store=True, string='Employee', index=True, readonly=False, ondelete="restrict",
-        tracking=True, compute_sudo=False,
-        domain=lambda self: self._get_employee_domain())
+        'hr.employee', string='Employee', index=True, ondelete="restrict", required=True,
+        tracking=True, domain=lambda self: self._get_employee_domain(), default=lambda self: self.env.user.employee_id)
     employee_company_id = fields.Many2one(related='employee_id.company_id', string="Employee Company", store=True)
     company_id = fields.Many2one('res.company', compute='_compute_company_id', store=True)
     active_employee = fields.Boolean(related='employee_id.active', string='Employee Active')
@@ -183,27 +182,6 @@ class HolidaysRequest(models.Model):
         help="Field allowing to see the leave request duration in days or hours depending on the leave_type_request_unit")    # details
     # details
     meeting_id = fields.Many2one('calendar.event', string='Meeting', copy=False)
-    parent_id = fields.Many2one('hr.leave', string='Parent', copy=False)
-    linked_request_ids = fields.One2many('hr.leave', 'parent_id', string='Linked Requests')
-    holiday_type = fields.Selection([
-        ('employee', 'By Employee'),
-        ('company', 'By Company'),
-        ('department', 'By Department'),
-        ('category', 'By Employee Tag')],
-        string='Allocation Mode', readonly=False, required=True, default='employee',
-        help='By Employee: Allocation/Request for individual Employee, By Employee Tag: Allocation/Request for group of employees in category')
-    employee_ids = fields.Many2many(
-        'hr.employee', compute='_compute_from_holiday_type', store=True, string='Employees', readonly=True, groups="hr_holidays.group_hr_holidays_responsible",
-        domain=lambda self: self._get_employee_domain(), context={'active_test': False})
-    multi_employee = fields.Boolean(
-        compute='_compute_from_employee_ids', store=True, compute_sudo=False,
-        help='Holds whether this allocation concerns more than 1 employee')
-    category_id = fields.Many2one(
-        'hr.employee.category', compute='_compute_from_holiday_type', store=True, string='Employee Tag',
-        readonly=False, help='Category of Employee')
-    mode_company_id = fields.Many2one(
-        'res.company', compute='_compute_from_holiday_type', store=True, string='Company Mode',
-        readonly=False)
     first_approver_id = fields.Many2one(
         'hr.employee', string='First Approval', readonly=True, copy=False,
         help='This area is automatically filled by the user who validate the time off')
@@ -221,7 +199,6 @@ class HolidaysRequest(models.Model):
         inverse='_inverse_supported_attachment_ids')
     supported_attachment_ids_count = fields.Integer(compute='_compute_supported_attachment_ids')
     # UX fields
-    all_employee_ids = fields.Many2many('hr.employee', compute='_compute_all_employees', compute_sudo=True)
     leave_type_request_unit = fields.Selection(related='holiday_status_id.request_unit', readonly=True)
     leave_type_support_document = fields.Boolean(related="holiday_status_id.support_document")
     # Interface fields used when not using hour-based computation
@@ -295,12 +272,6 @@ class HolidaysRequest(models.Model):
     leave_type_increases_duration = fields.Boolean(compute='_compute_leave_type_increases_duration')
 
     _sql_constraints = [
-        ('type_value',
-         "CHECK((holiday_type='employee' AND (employee_id IS NOT NULL OR multi_employee IS TRUE)) or "
-         "(holiday_type='company' AND mode_company_id IS NOT NULL) or "
-         "(holiday_type='category' AND category_id IS NOT NULL) or "
-         "(holiday_type='department' AND department_id IS NOT NULL) )",
-         "The employee, department, company or employee category of this request is missing. Please make sure that your user login is linked to an employee."),
         ('date_check2', "CHECK ((date_from <= date_to))", "The start date must be before or equal to the end date."),
         ('date_check3', "CHECK ((request_date_from <= request_date_to))", "The request start date must be before or equal to the request end date."),
         ('duration_check', "CHECK ( number_of_days >= 0 )", "If you want to change the number of days you should use the 'period' mode"),
@@ -312,11 +283,6 @@ class HolidaysRequest(models.Model):
                            self._table, ['date_to', 'date_from'])
         return res
 
-    @api.depends('employee_id', 'employee_ids')
-    def _compute_all_employees(self):
-        for leave in self:
-            leave.all_employee_ids = leave.employee_id | leave.employee_ids
-
     @api.depends_context('uid')
     def _compute_description(self):
         self.check_access_rights('read')
@@ -351,7 +317,7 @@ class HolidaysRequest(models.Model):
         for leave in self:
             leave.state = 'confirm' if leave.validation_type != 'no_validation' else 'draft'
 
-    @api.depends('holiday_type', 'employee_id', 'department_id', 'mode_company_id')
+    @api.depends('employee_id')
     def _compute_resource_calendar_id(self):
         employees_by_dates = defaultdict(lambda: self.env['hr.employee'])
         for leave in self:
@@ -360,12 +326,8 @@ class HolidaysRequest(models.Model):
         calendar_by_dates = {date_from: employees._get_calendars(date_from) for date_from, employees in employees_by_dates.items()}
         for leave in self:
             calendar = False
-            if leave.holiday_type == 'employee' and leave.employee_id and leave.request_date_from:
+            if leave.employee_id and leave.request_date_from:
                 calendar = calendar_by_dates[leave.request_date_from][leave.employee_id.id]
-            elif leave.holiday_type == 'department':
-                calendar = leave.department_id.company_id.resource_calendar_id
-            elif leave.holiday_type == 'company':
-                calendar = leave.mode_company_id.resource_calendar_id
             leave.resource_calendar_id = calendar or self.env.company.resource_calendar_id
 
     @api.depends('request_date_from_period', 'request_hour_from', 'request_hour_to', 'request_date_from', 'request_date_to',
@@ -412,15 +374,6 @@ class HolidaysRequest(models.Model):
             if holiday.holiday_status_id or holiday.request_unit_half:
                 holiday.request_unit_hours = False
 
-    @api.depends('employee_ids')
-    def _compute_from_employee_ids(self):
-        for holiday in self:
-            if len(holiday.employee_ids) == 1:
-                holiday.employee_id = holiday.employee_ids[0]._origin
-            else:
-                holiday.employee_id = False
-            holiday.multi_employee = (len(holiday.employee_ids) > 1)
-
     def _get_employee_domain(self):
         domain = [
             ('active', '=', True),
@@ -434,61 +387,22 @@ class HolidaysRequest(models.Model):
             ]
         return domain
 
-    @api.depends('holiday_type')
-    def _compute_from_holiday_type(self):
-        allocation_from_domain = self.env['hr.leave.allocation']
-        if (self._context.get('active_model') == 'hr.leave.allocation' and
-           self._context.get('active_id')):
-            allocation_from_domain = allocation_from_domain.browse(self._context['active_id'])
-        for holiday in self:
-            if holiday.holiday_type == 'employee':
-                if not holiday.employee_ids:
-                    if allocation_from_domain:
-                        holiday.employee_ids = allocation_from_domain.employee_id
-                        holiday.holiday_status_id = allocation_from_domain.holiday_status_id
-                    else:
-                        # This handles the case where a request is made with only the employee_id
-                        # but does not need to be recomputed on employee_id changes
-                        holiday.employee_ids = holiday.employee_id or self.env.user.employee_id
-                holiday.mode_company_id = False
-                holiday.category_id = False
-            elif holiday.holiday_type == 'company':
-                holiday.employee_ids = False
-                if not holiday.mode_company_id:
-                    holiday.mode_company_id = self.env.company.id
-                holiday.category_id = False
-            elif holiday.holiday_type == 'department':
-                holiday.employee_ids = False
-                holiday.mode_company_id = False
-                holiday.category_id = False
-            elif holiday.holiday_type == 'category':
-                holiday.employee_ids = False
-                holiday.mode_company_id = False
-            else:
-                holiday.employee_ids = self.env.context.get('default_employee_id') or holiday.employee_id or self.env.user.employee_id
-
-    @api.depends('employee_id', 'employee_ids')
+    @api.depends('employee_id')
     def _compute_from_employee_id(self):
         for holiday in self:
             holiday.manager_id = holiday.employee_id.parent_id.id
             if holiday.holiday_status_id.requires_allocation == 'no':
                 continue
-            if not holiday.employee_id or len(holiday.employee_ids) > 1:
+            if not holiday.employee_id:
                 holiday.holiday_status_id = False
             elif holiday.employee_id.user_id != self.env.user and holiday._origin.employee_id != holiday.employee_id:
                 if holiday.employee_id and not holiday.holiday_status_id.with_context(employee_id=holiday.employee_id.id).has_valid_allocation:
                     holiday.holiday_status_id = False
 
-    @api.depends('employee_id', 'holiday_type')
+    @api.depends('employee_id')
     def _compute_department_id(self):
         for holiday in self:
-            if holiday.employee_id:
-                holiday.department_id = holiday.employee_id.department_id
-            elif holiday.holiday_type == 'department':
-                if not holiday.department_id:
-                    holiday.department_id = self.env.user.employee_id.department_id
-            else:
-                holiday.department_id = False
+            holiday.department_id = holiday.employee_id.department_id
 
     @api.depends('date_from', 'date_to', 'holiday_status_id')
     def _compute_has_mandatory_day(self):
@@ -584,13 +498,10 @@ class HolidaysRequest(models.Model):
             leave.number_of_hours = hours
             leave.number_of_days = days
 
-    @api.depends('employee_company_id', 'mode_company_id')
+    @api.depends('employee_company_id')
     def _compute_company_id(self):
         for holiday in self:
-            holiday.company_id = holiday.employee_company_id \
-                or holiday.mode_company_id \
-                or holiday.department_id.company_id \
-                or self.env.company
+            holiday.company_id = holiday.employee_company_id or holiday.department_id.company_id or self.env.company
 
     @api.depends('number_of_days')
     def _compute_last_several_days(self):
@@ -669,25 +580,22 @@ class HolidaysRequest(models.Model):
         if self.env.context.get('leave_skip_date_check', False):
             return
 
-        all_employees = self.all_employee_ids
         all_leaves = self.search([
             ('date_from', '<', max(self.mapped('date_to'))),
             ('date_to', '>', min(self.mapped('date_from'))),
-            ('employee_id', 'in', all_employees.ids),
+            ('employee_id', 'in', self.employee_id.ids),
             ('id', 'not in', self.ids),
             ('state', 'not in', ['cancel', 'refuse']),
         ])
         for holiday in self:
             domain = [
+                ('employee_id', '=', holiday.employee_id.id),
                 ('date_from', '<', holiday.date_to),
                 ('date_to', '>', holiday.date_from),
                 ('id', '!=', holiday.id),
                 ('state', 'not in', ['cancel', 'refuse']),
             ]
-
-            employee_ids = (holiday.employee_id | holiday.employee_ids).ids
-            search_domain = domain + [('employee_id', 'in', employee_ids)]
-            conflicting_holidays = all_leaves.filtered_domain(search_domain)
+            conflicting_holidays = all_leaves.filtered_domain(domain)
 
             if conflicting_holidays:
                 conflicting_holidays_list = []
@@ -746,9 +654,7 @@ Attempting to double-book your time off won't magically make your vacation 2x be
         for (leave_type, date_from), leaves in sorted_leaves.items():
             if leave_type.requires_allocation == 'no':
                 continue
-            employees = self.env['hr.employee']
-            for leave in leaves:
-                employees |= leave._get_employees_from_holiday_type()
+            employees = leaves.employee_id
             leave_data = leave_type.get_allocation_data(employees, date_from)
             if leave_type.allows_negative:
                 max_excess = leave_type.max_allowed_negative
@@ -775,8 +681,7 @@ Attempting to double-book your time off won't magically make your vacation 2x be
     @api.depends(
         'tz', 'date_from', 'date_to', 'employee_id',
         'holiday_status_id', 'number_of_hours',
-        'leave_type_request_unit', 'number_of_days', 'mode_company_id',
-        'category_id', 'department_id',
+        'leave_type_request_unit', 'number_of_days', 'department_id',
     )
     @api.depends_context('short_name', 'hide_employee_name', 'groupby')
     def _compute_display_name(self):
@@ -789,16 +694,7 @@ Attempting to double-book your time off won't magically make your vacation 2x be
                 short_leave_name = leave.name or time_off_type_display or _('Time Off')
                 leave.display_name = _("%(name)s: %(duration)s", name=short_leave_name, duration=leave.duration_display)
             else:
-                if leave.holiday_type == 'company':
-                    target = leave.mode_company_id.name
-                elif leave.holiday_type == 'department':
-                    target = leave.department_id.name
-                elif leave.holiday_type == 'category':
-                    target = leave.category_id.name
-                elif leave.employee_id:
-                    target = leave.employee_id.name
-                else:
-                    target = ', '.join(leave.employee_ids.mapped('name'))
+                target = leave.employee_id.name or ""
                 display_date = format_date(self.env, date_from_utc) or ""
                 if leave.number_of_days > 1 and date_from_utc and date_to_utc:
                     display_date += ' - %s' % format_date(self.env, date_to_utc) or ""
@@ -857,13 +753,7 @@ Attempting to double-book your time off won't magically make your vacation 2x be
 
     @api.model_create_multi
     def create(self, vals_list):
-        employee_ids = []
-        for values in vals_list:
-            if values.get('employee_id'):
-                employee_ids.append(values['employee_id'])
-        employees = self.env['hr.employee'].browse(employee_ids)
-
-        """ Override to avoid automatic logging of creation """
+        # Override to avoid automatic logging of creation
         if not self._context.get('leave_fast_create'):
             leave_types = self.env['hr.leave.type'].browse([values.get('holiday_status_id') for values in vals_list if values.get('holiday_status_id')])
             mapped_validation_type = {leave_type.id: leave_type.leave_validation_type for leave_type in leave_types}
@@ -871,9 +761,6 @@ Attempting to double-book your time off won't magically make your vacation 2x be
             for values in vals_list:
                 employee_id = values.get('employee_id', False)
                 leave_type_id = values.get('holiday_status_id')
-                # Handle automatic department_id
-                if not values.get('department_id'):
-                    values.update({'department_id': employees.filtered(lambda emp: emp.id == employee_id).department_id.id})
 
                 # Handle no_validation
                 if mapped_validation_type[leave_type_id] == 'no_validation':
@@ -958,8 +845,6 @@ Attempting to double-book your time off won't magically make your vacation 2x be
                     raise UserError(error_message % state_description_values.get(self[:1].state))
                 if hol.date_from.date() < now:
                     raise UserError(_('You cannot delete a time off which is in the past'))
-                if hol.sudo().employee_ids and not hol.employee_id:
-                    raise UserError(_('You cannot delete a time off assigned to several employees'))
         else:
             for holiday in self.filtered(lambda holiday: holiday.state not in ['draft', 'cancel', 'confirm']):
                 raise UserError(error_message % (state_description_values.get(holiday.state),))
@@ -1025,9 +910,9 @@ Attempting to double-book your time off won't magically make your vacation 2x be
         return self.env['resource.calendar.leaves'].search([('holiday_id', 'in', self.ids)]).unlink()
 
     def _validate_leave_request(self):
-        """ Validate time off requests (holiday_type='employee')
+        """ Validate time off requests
         by creating a calendar event and a resource time off. """
-        holidays = self.filtered(lambda request: request.holiday_type == 'employee' and request.employee_id)
+        holidays = self.filtered("employee_id")
         holidays._create_resource_leave()
         meeting_holidays = holidays.filtered(lambda l: l.holiday_status_id.create_calendar_meeting)
         meetings = self.env['calendar.event']
@@ -1089,25 +974,6 @@ Attempting to double-book your time off won't magically make your vacation 2x be
             result[user.id].append(meeting_values)
         return result
 
-    def _prepare_employees_holiday_values(self, employees):
-        self.ensure_one()
-        work_days_data = employees._get_work_days_data_batch(self.date_from, self.date_to)
-        return [{
-            'name': self.name,
-            'holiday_type': 'employee',
-            'holiday_status_id': self.holiday_status_id.id,
-            'date_from': self.date_from,
-            'date_to': self.date_to,
-            'request_date_from': self.request_date_from,
-            'request_date_to': self.request_date_to,
-            'notes': self.notes,
-            'number_of_days': work_days_data[employee.id]['days'],
-            'parent_id': self.id,
-            'employee_id': employee.id,
-            'employee_ids': employee,
-            'state': 'validate',
-        } for employee in employees if work_days_data[employee.id]['days']]
-
     def action_cancel(self):
         self.ensure_one()
 
@@ -1131,10 +997,6 @@ Attempting to double-book your time off won't magically make your vacation 2x be
             'first_approver_id': False,
             'second_approver_id': False,
         })
-        linked_requests = self.mapped('linked_request_ids')
-        if linked_requests:
-            linked_requests.action_draft()
-            linked_requests.unlink()
         self.activity_update()
         return True
 
@@ -1171,18 +1033,6 @@ Attempting to double-book your time off won't magically make your vacation 2x be
     def _get_leaves_on_public_holiday(self):
         return self.filtered(lambda l: l.employee_id and not l.number_of_days)
 
-    def _get_employees_from_holiday_type(self):
-        self.ensure_one()
-        if self.holiday_type == 'employee':
-            employees = self.employee_ids
-        elif self.holiday_type == 'category':
-            employees = self.category_id.employee_ids
-        elif self.holiday_type == 'company':
-            employees = self.env['hr.employee'].search([('company_id', '=', self.mode_company_id.id)])
-        else:
-            employees = self.department_id.member_ids
-        return employees
-
     def _split_leaves(self, split_date_from, split_date_to):
         """
         Split leaves on the given full-day interval. The leaves will be split
@@ -1285,50 +1135,12 @@ Attempting to double-book your time off won't magically make your vacation 2x be
             else:
                 leaves_first_approver += leave
 
-            if leave.holiday_type != 'employee' or\
-                (leave.holiday_type == 'employee' and len(leave.employee_ids) > 1):
-                employees = leave._get_employees_from_holiday_type()
-
-                conflicting_leaves = self.env['hr.leave'].with_context(
-                    tracking_disable=True,
-                    mail_activity_automation_skip=True,
-                    leave_fast_create=True
-                ).search([
-                    ('date_from', '<=', leave.date_to),
-                    ('date_to', '>', leave.date_from),
-                    ('state', 'not in', ['cancel', 'refuse']),
-                    ('holiday_type', '=', 'employee'),
-                    ('employee_id', 'in', employees.ids)])
-
-                if conflicting_leaves:
-                    # YTI: More complex use cases could be managed in master
-                    if leave.leave_type_request_unit != 'day' or any(l.leave_type_request_unit == 'hour' for l in conflicting_leaves):
-                        raise ValidationError(_('You can not have 2 time off that overlaps on the same day.'))
-
-                    conflicting_leaves._split_leaves(leave.request_date_from, leave.request_date_to + timedelta(days=1))
-
-                values = leave._prepare_employees_holiday_values(employees)
-                leaves = self.env['hr.leave'].with_context(
-                    tracking_disable=True,
-                    mail_activity_automation_skip=True,
-                    leave_fast_create=True,
-                    no_calendar_sync=True,
-                    leave_skip_state_check=True,
-                    # date_from and date_to are computed based on the employee tz
-                    # If _compute_date_from_to is used instead, it will trigger _compute_number_of_days
-                    # and create a conflict on the number of days calculation between the different leaves
-                    leave_compute_date_from_to=True,
-                ).create(values)
-
-                leaves._validate_leave_request()
-
         leaves_second_approver.write({'second_approver_id': current_employee.id})
         leaves_first_approver.write({'first_approver_id': current_employee.id})
 
-        employee_requests = self.filtered(lambda hol: hol.holiday_type == 'employee')
-        employee_requests._validate_leave_request()
+        self._validate_leave_request()
         if not self.env.context.get('leave_fast_create'):
-            employee_requests.filtered(lambda holiday: holiday.validation_type != 'no_validation').activity_update()
+            self.filtered(lambda holiday: holiday.validation_type != 'no_validation').activity_update()
         return True
 
     def action_refuse(self):
@@ -1342,11 +1154,6 @@ Attempting to double-book your time off won't magically make your vacation 2x be
         (self - validated_holidays).write({'state': 'refuse', 'second_approver_id': current_employee.id})
         # Delete the meeting
         self.mapped('meeting_id').write({'active': False})
-        # If a category that created several holidays, cancel all related
-        linked_requests = self.mapped('linked_request_ids')
-        if linked_requests:
-            linked_requests.action_refuse()
-
         # Post a second message, more verbose than the tracking message
         for holiday in self:
             if holiday.employee_id.user_id:
@@ -1469,20 +1276,16 @@ Attempting to double-book your time off won't magically make your vacation 2x be
                             and not is_officer:
                         raise UserError(_('Only a Time Off Officer or Manager can approve/refuse its own requests.'))
 
-                    if (state == 'validate1' and val_type == 'both') and holiday.holiday_type == 'employee':
+                    if (state == 'validate1' and val_type == 'both'):
                         if not is_officer and self.env.user != holiday.employee_id.leave_manager_id:
                             raise UserError(_('You must be either %s\'s manager or Time off Manager to approve this leave') % (holiday.employee_id.name))
 
                     if (state == 'validate' and val_type == 'manager')\
-                            and self.env.user != (holiday.employee_id | holiday.sudo().employee_ids).leave_manager_id\
+                            and self.env.user != holiday.employee_id.leave_manager_id\
                             and not is_officer:
-                        if holiday.employee_id:
-                            employees = holiday.employee_id
-                        else:
-                            employees = ', '.join(holiday.employee_ids.filtered(lambda e: e.leave_manager_id != self.env.user).mapped('name'))
-                        raise UserError(_('You must be %s\'s Manager to approve this leave', employees))
+                        raise UserError(_("You must be %s's Manager to approve this leave", holiday.employee_id.name))
 
-                    if not is_officer and (state == 'validate' and val_type == 'hr') and holiday.holiday_type == 'employee':
+                    if not is_officer and (state == 'validate' and val_type == 'hr'):
                         raise UserError(_('You must either be a Time off Officer or Time off Manager to approve this leave'))
 
     @api.model
@@ -1511,12 +1314,7 @@ Attempting to double-book your time off won't magically make your vacation 2x be
 
     def _get_responsible_for_approval(self):
         self.ensure_one()
-
         responsible = self.env.user
-
-        if self.holiday_type != 'employee':
-            return responsible
-
         if self.validation_type == 'manager' or (self.validation_type == 'both' and self.state == 'confirm'):
             if self.employee_id.leave_manager_id:
                 responsible = self.employee_id.leave_manager_id
@@ -1525,7 +1323,6 @@ Attempting to double-book your time off won't magically make your vacation 2x be
         elif self.validation_type == 'hr' or (self.validation_type == 'both' and self.state == 'validate1'):
             if self.holiday_status_id.responsible_ids:
                 responsible = self.holiday_status_id.responsible_ids
-
         return responsible
 
     def activity_update(self):

--- a/addons/hr_holidays/models/hr_leave_type.py
+++ b/addons/hr_holidays/models/hr_leave_type.py
@@ -146,10 +146,10 @@ class HolidaysType(models.Model):
         date_from = self._context.get('default_date_from', fields.Datetime.today())
         date_to = self._context.get('default_date_to', fields.Datetime.today())
         employee_id = self._context.get('default_employee_id', self._context.get('employee_id', self.env.user.employee_id.id))
-        for holiday_type in self:
-            if holiday_type.requires_allocation == 'yes':
+        for leave_type in self:
+            if leave_type.requires_allocation == 'yes':
                 allocations = self.env['hr.leave.allocation'].search([
-                    ('holiday_status_id', '=', holiday_type.id),
+                    ('holiday_status_id', '=', leave_type.id),
                     ('allocation_type', '=', 'accrual'),
                     ('employee_id', '=', employee_id),
                     ('date_from', '<=', date_from),
@@ -157,14 +157,14 @@ class HolidaysType(models.Model):
                     ('date_to', '>=', date_to),
                     ('date_to', '=', False),
                 ])
-                allowed_excess = holiday_type.max_allowed_negative if holiday_type.allows_negative else 0
+                allowed_excess = leave_type.max_allowed_negative if leave_type.allows_negative else 0
                 allocations = allocations.filtered(lambda alloc:
                     alloc.allocation_type == 'accrual'
                     or (alloc.max_leaves > 0 and alloc.virtual_remaining_leaves > -allowed_excess)
                 )
-                holiday_type.has_valid_allocation = bool(allocations)
+                leave_type.has_valid_allocation = bool(allocations)
             else:
-                holiday_type.has_valid_allocation = True
+                leave_type.has_valid_allocation = True
 
     def _search_max_leaves(self, operator, value):
         value = float(value)
@@ -340,7 +340,6 @@ class HolidaysType(models.Model):
             ('holiday_status_id', 'in', self.ids),
         ]
         action['context'] = {
-            'default_holiday_type': 'department',
             'default_holiday_status_id': self.ids[0],
             'search_default_approved_state': 1,
             'search_default_year': 1,
