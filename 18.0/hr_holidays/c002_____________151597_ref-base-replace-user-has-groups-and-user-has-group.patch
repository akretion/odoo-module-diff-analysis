PR: https://github.com/odoo/odoo/pull/151597

From: cb31d4352c741a5f8a927a65debb8e027e87df22
From: Gorash
Date: 2024-03-15 14:29:08

Breaking data model changes scores: del:1 + add:0, change matches:
-    is_user_only_responsible = fields.Boolean(compute="_compute_is_user_only_responsible")

Total Changes: 30

[REF] base: replace user_has_groups() and user.has_group()

Replaced by the following res.users methods:
 - user.has_groups()   (for groups spec only, like former user_has_groups)
 - user.has_group()    (existing but adapted API and semantics)
 - user._has_group()   (existing, unchanged)

Before this commit, user_has_groups() calls self.env.user.has_group() to
test whether the current user belongs to a given group, taking into
account not having groups (external ids preceded by '!') and
request.session.debug in the case of group 'base.group_no_one'.  The use
of user_has_group() is quite confusing because it does not relate to the
current record, but to its environment.

The method has_group() is also confusing, because when applied on an
empty recordset, it falls back on self.env.user instead of the record
itself.  This confusion sometimes leads to code not implementing what
the developer intended.

The change makes it possible to unify the API, remove ambiguity and make
method calls explicit, and make the groups dependent on the session in
the case of user.has_groups() and user.has_group().

Future changes will possibly include the removal of group_no_one and
decreasing the number of session.debug usages.

Part-of: odoo/odoo#151597

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/hr_employee.py
+++ b/addons/hr_holidays/models/hr_employee.py
@@ -163,7 +163,7 @@ class HrEmployeeBase(models.AbstractModel):
                 employee.leave_manager_id = False
 
     def _compute_show_leaves(self):
-        show_leaves = self.env['res.users'].has_group('hr_holidays.group_hr_holidays_user')
+        show_leaves = self.env.user.has_group('hr_holidays.group_hr_holidays_user')
         for employee in self:
             if show_leaves or employee.user_id == self.env.user:
                 employee.show_leaves = True
@@ -286,7 +286,7 @@ class HrEmployee(models.Model):
         }
 
     def _is_leave_user(self):
-        return self == self.env.user.employee_id and self.user_has_groups('hr_holidays.group_hr_holidays_user')
+        return self == self.env.user.employee_id and self.env.user.has_group('hr_holidays.group_hr_holidays_user')
 
     def get_mandatory_days(self, start_date, end_date):
         all_days = {}

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -132,7 +132,6 @@ class HolidaysRequest(models.Model):
         "\nThe status is 'Approved', when time off request is approved by manager.")
     user_id = fields.Many2one('res.users', string='User', related='employee_id.user_id', related_sudo=True, compute_sudo=True, store=True, readonly=True, index=True)
     manager_id = fields.Many2one('hr.employee', compute='_compute_from_employee_id', store=True, readonly=False)
-    is_user_only_responsible = fields.Boolean(compute="_compute_is_user_only_responsible")
     # leave type configuration
     holiday_status_id = fields.Many2one(
         "hr.leave.type", compute='_compute_from_employee_id',
@@ -319,7 +318,7 @@ class HolidaysRequest(models.Model):
         self.check_access_rights('read')
         self.check_access_rule('read')
 
-        is_officer = self.user_has_groups('hr_holidays.group_hr_holidays_user')
+        is_officer = self.env.user.has_group('hr_holidays.group_hr_holidays_user')
 
         for leave in self:
             if is_officer or leave.user_id == self.env.user or leave.employee_id.leave_manager_id == self.env.user:
@@ -328,14 +327,14 @@ class HolidaysRequest(models.Model):
                 leave.name = '*****'
 
     def _inverse_description(self):
-        is_officer = self.user_has_groups('hr_holidays.group_hr_holidays_user')
+        is_officer = self.env.user.has_group('hr_holidays.group_hr_holidays_user')
 
         for leave in self:
             if is_officer or leave.user_id == self.env.user or leave.employee_id.leave_manager_id == self.env.user:
                 leave.sudo().private_name = leave.name
 
     def _search_description(self, operator, value):
-        is_officer = self.user_has_groups('hr_holidays.group_hr_holidays_user')
+        is_officer = self.env.user.has_group('hr_holidays.group_hr_holidays_user')
         domain = [('private_name', operator, value)]
 
         if not is_officer:
@@ -493,13 +492,6 @@ class HolidaysRequest(models.Model):
                 if holiday.employee_id and not holiday.holiday_status_id.with_context(employee_id=holiday.employee_id.id).has_valid_allocation:
                     holiday.holiday_status_id = False
 
-    @api.depends_context('uid')
-    @api.depends('employee_id')
-    def _compute_is_user_only_responsible(self):
-        user = self.env.user
-        self.is_user_only_responsible = user.has_group('hr_holidays.group_hr_holidays_responsible')\
-            and not user.has_group('hr_holidays.group_hr_holidays_user')
-
     @api.depends('employee_id', 'holiday_type')
     def _compute_department_id(self):
         for holiday in self:
@@ -841,15 +833,15 @@ Attempting to double-book your time off won't magically make your vacation 2x be
 
     @api.constrains('date_from', 'date_to')
     def _check_mandatory_day(self):
-        is_leave_user = self.user_has_groups('hr_holidays.group_hr_holidays_user')
+        is_leave_user = self.env.user.has_group('hr_holidays.group_hr_holidays_user')
         if not is_leave_user and any(leave.has_mandatory_day for leave in self):
             raise ValidationError(_('You are not allowed to request a time off on a Mandatory Day.'))
 
     def _check_double_validation_rules(self, employees, state):
-        if self.user_has_groups('hr_holidays.group_hr_holidays_manager'):
+        if self.env.user.has_group('hr_holidays.group_hr_holidays_manager'):
             return
 
-        is_leave_user = self.user_has_groups('hr_holidays.group_hr_holidays_user')
+        is_leave_user = self.env.user.has_group('hr_holidays.group_hr_holidays_user')
         if state == 'validate1':
             employees = employees.filtered(lambda employee: employee.leave_manager_id != self.env.user)
             if employees and not is_leave_user:
@@ -955,7 +947,7 @@ Attempting to double-book your time off won't magically make your vacation 2x be
         state_description_values = {elem[0]: elem[1] for elem in self._fields['state']._description_selection(self.env)}
         now = fields.Datetime.now()
 
-        if not self.user_has_groups('hr_holidays.group_hr_holidays_user'):
+        if not self.env.user.has_group('hr_holidays.group_hr_holidays_user'):
             for hol in self:
                 if hol.state not in ['draft', 'confirm', 'validate1', 'cancel']:
                     raise UserError(error_message % state_description_values.get(self[:1].state))

--- a/addons/hr_holidays/models/hr_leave_allocation.py
+++ b/addons/hr_holidays/models/hr_leave_allocation.py
@@ -26,14 +26,14 @@ class HolidaysAllocation(models.Model):
     _mail_post_access = 'read'
 
     def _default_holiday_status_id(self):
-        if self.user_has_groups('hr_holidays.group_hr_holidays_user'):
+        if self.env.user.has_group('hr_holidays.group_hr_holidays_user'):
             domain = [('has_valid_allocation', '=', True), ('requires_allocation', '=', 'yes')]
         else:
             domain = [('has_valid_allocation', '=', True), ('requires_allocation', '=', 'yes'), ('employee_requests', '=', 'yes')]
         return self.env['hr.leave.type'].search(domain, limit=1)
 
     def _domain_holiday_status_id(self):
-        if self.user_has_groups('hr_holidays.group_hr_holidays_user'):
+        if self.env.user.has_group('hr_holidays.group_hr_holidays_user'):
             return [('requires_allocation', '=', 'yes')]
         return [('employee_requests', '=', 'yes')]
 
