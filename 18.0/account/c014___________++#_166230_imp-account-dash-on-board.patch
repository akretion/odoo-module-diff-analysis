PR: https://github.com/odoo/odoo/pull/166230

From: ac106704f3c2d3e3fa94415134b9d5522b325378
From: Habib (ayh)
Date: 2024-05-29 21:32:38

Structural Changes: 3
Total Changes: 236

[IMP] account,*: {dash/on}board

A previous commit in this PR makes the Accounting dashboard available to users with only Invoicing (account) installed.
The main purpose of this commit is to improve the dashboard and simplify the onboarding process.

Journal Display and Sequence
----------------------------
The Dashboard UI has been improved. Larger cards on wide screen display (depending on the number of journals)
For Invoicing users, the Miscellaneous journal is not typically used, and is therefore hidden by default.
Empty Journal cards will display sample data or some form of onboarding steps.

Simplification/removal of onboarding steps
------------------------------------------
All onboarding steps have been removed from Invoicing (account). Remaining steps are for Accounting (accounting) users and are displayed on the Miscellaneous Journal kanban card on the dashboard.
Onboarding steps can be multi-company (when journal cards are from multiple companies)

Drag & Drop
-----------
The dashboard could always manage dragging and dropping of files to a journal card, the UI/UX is improved. Drag and Drop on miscellanous journals is only available in Accounting.

Onboarding component
--------------------
A new onboarding widget component is added which displays onboarding steps on the dashboards journal cards. Whilst the component is in Invoicing, it is only used in Accounting - on the Miscellaneous tax journal.
Since the onboarding banner is removed from the dashboard, the onboarding steps are initiated on installation of Accounting modules.

Bill Guide component
--------------------
Empty Bills Journals will display a guide indicating how to get started ie. Upload a file, email a file, create a bill manually or try our sample. This replaces the previous wizard that was available. Clicking "try our sample" creates a new sample bill with an attachment and directs the user directly to the bill.

The same component is used as the no content helper on the bills list view.

Online Sync
-----------
Online sync will no longer depend on Accounting, and can work with Invoicing (Enterprise)

Other changes include:
- simple ui improvements: views related to onboarding are simplified. Addresses on company form views adapt to the active company country (like contact form view)
- tours: overridable steps for flexible flows in invoicing/accounting
- tour tests: since the dashboard might make calls to fetch bank sync institutions (odoofin) - those API calls are mocked for all accounting tours.
- icons are added/moved to make them reusable
- prepare display of tax activities on the tax journal (links to file a tax return and pay tax - usable in Accounting)
- cleanup of actions that can be done from the dashboard
- removal of components that marked onboarding steps done on form view dialog save (company_onboarding_form)
- removal of the bill tour wizard (replaced by bill guide on kanban card)

Part of Task-3636384

closes odoo/odoo#166230

Related: odoo/upgrade#6056
Related: odoo/enterprise#62890
Signed-off-by: William Andr√© (wan) <wan@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account/models/__init__.py
+++ b/addons/account/models/__init__.py
@@ -38,7 +38,6 @@ from . import ir_actions_report
 from . import ir_module
 from . import res_currency
 from . import account_report
-from . import onboarding_onboarding
 from . import onboarding_onboarding_step
 from . import template_generic_coa
 from . import uom_uom

--- a/addons/account/models/account_journal.py
+++ b/addons/account/models/account_journal.py
@@ -823,9 +823,7 @@ class AccountJournal(models.Model):
         return self.env['res.company'].with_context(default_linked_journal_id=self.id).setting_init_bank_account_action()
 
     def action_new_transaction(self):
-        action = self.env['ir.actions.act_window']._for_xml_id('account.action_bank_statement_tree')
-        action['context'] = {'default_journal_id': self.id}
-        return action
+        return False
 
     def _create_document_from_attachment(self, attachment_ids):
         """ Create the invoices from files."""

--- a/addons/account/models/account_journal_dashboard.py
+++ b/addons/account/models/account_journal_dashboard.py
@@ -2,10 +2,11 @@ import ast
 from babel.dates import format_datetime, format_date
 from collections import defaultdict
 from datetime import datetime, timedelta
+import base64
 import json
 import random
 
-from odoo import models, api, _, fields
+from odoo import models, api, _, fields, Command, tools
 from odoo.exceptions import UserError
 from odoo.osv import expression
 from odoo.release import version
@@ -31,6 +32,8 @@ class account_journal(models.Model):
     current_statement_balance = fields.Monetary(compute='_compute_current_statement_balance') # technical field used to avoid computing the value multiple times
     has_statement_lines = fields.Boolean(compute='_compute_current_statement_balance') # technical field used to avoid computing the value multiple times
     entries_count = fields.Integer(compute='_compute_entries_count')
+    has_posted_entries = fields.Boolean(compute='_compute_has_entries')
+    has_entries = fields.Boolean(compute='_compute_has_entries')
     has_sequence_holes = fields.Boolean(compute='_compute_has_sequence_holes')
     has_unhashed_entries = fields.Boolean(string='Unhashed Entries', compute='_compute_has_unhashed_entries')
     last_statement_id = fields.Many2one(comodel_name='account.bank.statement', compute='_compute_last_bank_statement')
@@ -118,8 +121,6 @@ class account_journal(models.Model):
                 'activity_category': activity['activity_category'],
                 'date': odoo_format_date(self.env, activity['date_deadline'])
             }
-            if activity['activity_category'] == 'tax_report' and activity['res_model'] == 'account.move':
-                act['name'] = activity['ref']
 
             activities[activity['journal_id']].append(act)
         for journal in self:
@@ -174,6 +175,37 @@ class account_journal(models.Model):
             else:
                 journal.has_unhashed_entries = False
 
+    def _compute_has_entries(self):
+        sql_query = SQL(
+            """
+                       SELECT j.id,
+                              has_posted_entries.val,
+                              has_entries.val
+                         FROM account_journal j
+            LEFT JOIN LATERAL (
+                                  SELECT bool(m.id) as val
+                                    FROM account_move m
+                                   WHERE m.journal_id = j.id
+                                     AND m.state = 'posted'
+                                   LIMIT 1
+                              ) AS has_posted_entries ON true
+            LEFT JOIN LATERAL (
+                                  SELECT bool(m.id) as val
+                                    FROM account_move m
+                                   WHERE m.journal_id = j.id
+                                   LIMIT 1
+                              ) AS has_entries ON true
+                        WHERE j.id in %(journal_ids)s
+            """,
+            journal_ids=tuple(self.ids),
+        )
+        self.env.cr.execute(sql_query)
+        res = {journal_id: (has_posted, has_entries) for journal_id, has_posted, has_entries in self.env.cr.fetchall()}
+        for journal in self:
+            r = res.get(journal.id, (False, False))
+            journal.has_posted_entries = bool(r[0])
+            journal.has_entries = bool(r[1])
+
     def _compute_entries_count(self):
         res = {
             journal.id: count
@@ -345,6 +377,7 @@ class account_journal(models.Model):
         self._fill_bank_cash_dashboard_data(dashboard_data)
         self._fill_sale_purchase_dashboard_data(dashboard_data)
         self._fill_general_dashboard_data(dashboard_data)
+        self._fill_onboarding_data(dashboard_data)
         return dashboard_data
 
     def _fill_dashboard_data_count(self, dashboard_data, model, name, domain):
@@ -450,6 +483,10 @@ class account_journal(models.Model):
             misc_balance, number_misc = misc_totals.get(journal.default_account_id, (0, 0))
             currency_consistent = not journal.currency_id or journal.currency_id == journal.default_account_id.currency_id
             accessible = journal.company_id.id in journal.company_id._accessible_branches().ids
+            drag_drop_settings = {
+                'image': '/account/static/src/img/bank.svg' if journal.type == 'bank' else '/web/static/img/rfq.svg',
+                'text': _('Drop to import transactions'),
+            }
 
             dashboard_data[journal.id].update({
                 'number_to_check': number_to_check,
@@ -466,6 +503,7 @@ class account_journal(models.Model):
                 'is_sample_data': journal.has_statement_lines,
                 'nb_misc_operations': number_misc,
                 'misc_operations_balance': currency.format(misc_balance) if currency_consistent else None,
+                'drag_drop_settings': drag_drop_settings,
             })
 
     def _fill_sale_purchase_dashboard_data(self, dashboard_data):
@@ -563,8 +601,17 @@ class account_journal(models.Model):
             amount_total_signed_sum, count = to_check_vals.get(journal.id, (0, 0))
             if journal.type == 'purchase':
                 title_has_sequence_holes = _("Irregularities due to draft, cancelled or deleted bills with a sequence number since last lock date.")
+                drag_drop_settings = {
+                    'image': '/account/static/src/img/Bill.svg',
+                    'text': _('Drop and let the AI process your bills automatically.'),
+                }
             else:
                 title_has_sequence_holes = _("Irregularities due to draft, cancelled or deleted invoices with a sequence number since last lock date.")
+                drag_drop_settings = {
+                    'image': '/web/static/img/quotation.svg',
+                    'text': _('Drop to import your invoices.'),
+                }
+
             dashboard_data[journal.id].update({
                 'number_to_check': count,
                 'to_check_balance': currency.format(amount_total_signed_sum),
@@ -580,6 +627,7 @@ class account_journal(models.Model):
                 'has_unhashed_entries': journal.has_unhashed_entries,
                 'is_sample_data': is_sample_data_by_journal_id[journal.id],
                 'has_entries': not is_sample_data_by_journal_id[journal.id],
+                'drag_drop_settings': drag_drop_settings,
             })
 
     def _fill_general_dashboard_data(self, dashboard_data):
@@ -602,11 +650,47 @@ class account_journal(models.Model):
         for journal in general_journals:
             currency = journal.currency_id or self.env['res.currency'].browse(journal.company_id.sudo().currency_id.id)
             amount_total_signed_sum, count = to_check_vals.get(journal.id, (0, 0))
+            drag_drop_settings = {
+                'image': '/web/static/img/folder.svg',
+                'text': _('Drop to create journal entries with attachments.'),
+                'group': 'account.group_account_user',
+            }
+
             dashboard_data[journal.id].update({
                 'number_to_check': count,
                 'to_check_balance': currency.format(amount_total_signed_sum),
+                'drag_drop_settings': drag_drop_settings,
             })
 
+    def _fill_onboarding_data(self, dashboard_data):
+        """ Populate journals with onboarding data if they have no entries"""
+        journal_onboarding_map = {
+            'sale': 'account_invoice',
+            'general': 'account_dashboard',
+        }
+        onboarding_data = defaultdict(dict)
+        onboarding_progresses = self.env['onboarding.progress'].sudo().search([
+            ('onboarding_id.route_name', 'in', [*journal_onboarding_map.values()]),
+            ('company_id', 'in', self.company_id.ids),
+        ])
+        for progress in onboarding_progresses:
+            ob = progress.onboarding_id
+            ob_vals = ob.with_company(progress.company_id)._prepare_rendering_values()
+            onboarding_data[progress.company_id][ob.route_name] = ob_vals
+            onboarding_data[progress.company_id][ob.route_name]['current_onboarding_state'] = ob.current_onboarding_state
+            onboarding_data[progress.company_id][ob.route_name]['steps'] = [
+                {
+                    'id': step.id,
+                    'title': step.title,
+                    'description': step.description,
+                    'state': ob_vals['state'][step.id],
+                    'action': step.panel_step_open_action_name,
+                }
+                for step in ob_vals['steps']
+            ]
+        for journal in self:
+            dashboard_data[journal.id]['onboarding'] = onboarding_data[journal.company_id].get(journal_onboarding_map.get(journal.type))
+
     def _get_draft_sales_purchases_query(self):
         return self.env['account.move']._where_calc([
             *self.env['account.move']._check_company_domain(self.env.companies),
@@ -749,10 +833,14 @@ class account_journal(models.Model):
 
     def _get_move_action_context(self):
         ctx = self._context.copy()
-        ctx['default_journal_id'] = self.id
-        if self.type == 'sale':
+        journal = self
+        if not ctx.get('default_journal_id'):
+            ctx['default_journal_id'] = journal.id
+        elif not journal:
+            journal = self.browse(ctx['default_journal_id'])
+        if journal.type == 'sale':
             ctx['default_move_type'] = 'out_refund' if ctx.get('refund') else 'out_invoice'
-        elif self.type == 'purchase':
+        elif journal.type == 'purchase':
             ctx['default_move_type'] = 'in_refund' if ctx.get('refund') else 'in_invoice'
         else:
             ctx['default_move_type'] = 'entry'
@@ -770,22 +858,80 @@ class account_journal(models.Model):
         }
 
     def action_create_vendor_bill(self):
-        """ This function is called by the "Import" button of Vendor Bills,
+        """ This function is called by the "try our sample" button of Vendor Bills,
         visible on dashboard if no bill has been created yet.
         """
-        self.env['onboarding.onboarding.step'].sudo().action_validate_step('account.onboarding_onboarding_step_setup_bill')
-
-        new_wizard = self.env['account.tour.upload.bill'].create({})
-        view_id = self.env.ref('account.account_tour_upload_bill').id
-
+        context = dict(self._context)
+        purchase_journal = self.browse(context.get('default_journal_id'))
+        context['default_move_type'] = 'in_invoice'
+        invoice_date = fields.Date.today() - timedelta(days=12)
+        partner = self.env['res.partner'].search([('name', '=', 'Deco Addict')], limit=1)
+        company = purchase_journal.company_id
+        if not partner:
+            partner = self.env['res.partner'].create({
+                'name': 'Deco Addict',
+                'is_company': True,
+            })
+        default_expense_account = self.env['ir.property'].with_company(company)._get('property_account_expense_categ_id', 'product.category')
+        ref = 'DE%s' % invoice_date.strftime('%Y%m')
+        bill = self.env['account.move'].with_context(default_extract_state='done').create({
+            'move_type': 'in_invoice',
+            'partner_id': partner.id,
+            'ref': ref,
+            'invoice_date': invoice_date,
+            'invoice_date_due': invoice_date + timedelta(days=30),
+            'journal_id': purchase_journal.id,
+            'invoice_line_ids': [
+                Command.create({
+                    'name': "[FURN_8999] Three-Seat Sofa",
+                    'account_id': purchase_journal.default_account_id.id or default_expense_account.id,
+                    'quantity': 5,
+                    'price_unit': 1500,
+                }),
+                Command.create({
+                    'name': "[FURN_8220] Four Person Desk",
+                    'account_id': purchase_journal.default_account_id.id or default_expense_account.id,
+                    'quantity': 5,
+                    'price_unit': 2350,
+                })
+            ],
+        })
+        # In case of test environment, don't create the pdf
+        if tools.config['test_enable'] or tools.config['test_file']:
+            bill.with_context(no_new_invoice=True).message_post()
+        else:
+            addr = [x for x in [
+                company.street,
+                company.street2,
+                ' '.join([x for x in [company.state_id.name, company.zip] if x]),
+                company.country_id.name,
+            ] if x]
+
+            html = self.env['ir.qweb']._render('account.bill_preview', {
+                'company_name': company.name,
+                'company_street_address': addr,
+                'invoice_name': 'Invoice ' + ref,
+                'invoice_ref': ref,
+                'invoice_date': invoice_date,
+                'invoice_due_date': invoice_date + timedelta(days=30),
+            })
+            bodies = self.env['ir.actions.report']._prepare_html(html)[0]
+            content = self.env['ir.actions.report']._run_wkhtmltopdf(bodies)
+            attachment = self.env['ir.attachment'].create({
+                'type': 'binary',
+                'name': 'INV-%s-0001.pdf' % invoice_date.strftime('%Y-%m'),
+                'res_model': 'mail.compose.message',
+                'datas': base64.encodebytes(content),
+            })
+            bill.with_context(no_new_invoice=True).message_post(attachment_ids=[attachment.id])
         return {
-            'type': 'ir.actions.act_window',
-            'name': _('Import your first bill'),
+            'name': _('Bills'),
+            'res_id': bill.id,
             'view_mode': 'form',
-            'res_model': 'account.tour.upload.bill',
-            'target': 'new',
-            'res_id': new_wizard.id,
-            'views': [[view_id, 'form']],
+            'res_model': 'account.move',
+            'views': [[False, "form"]],
+            'type': 'ir.actions.act_window',
+            'context': context,
         }
 
     def to_check_ids(self):

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -971,27 +971,26 @@ class AccountChartTemplate(models.AbstractModel):
                 'name': _('Miscellaneous Operations'),
                 'type': 'general',
                 'code': _('MISC'),
-                'show_on_dashboard': True,
-                'sequence': 7,
+                'show_on_dashboard': False,
+                'sequence': 8,
             },
             "exch": {
                 'name': _('Exchange Difference'),
                 'type': 'general',
                 'code': _('EXCH'),
                 'show_on_dashboard': False,
-                'sequence': 9,
             },
             "caba": {
                 'name': _('Cash Basis Taxes'),
                 'type': 'general',
                 'code': _('CABA'),
                 'show_on_dashboard': False,
-                'sequence': 10,
             },
             "bank": {
                 'name': _('Bank'),
                 'type': 'bank',
                 'show_on_dashboard': True,
+                'sequence': 7,
             },
             "cash": {
                 'name': _('Cash'),

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -268,6 +268,14 @@ class ResCompany(models.Model):
         for company in self:
             company.max_tax_lock_date = max(company.tax_lock_date or date.min, company.parent_id.sudo().max_tax_lock_date or date.min)
 
+    def _initiate_account_onboardings(self):
+        account_onboarding_routes = [
+            'account_dashboard',
+        ]
+        onboardings = self.env['onboarding.onboarding'].sudo().search([('route_name', 'in', account_onboarding_routes)])
+        for company in self:
+            onboardings.with_company(company)._search_or_create_progress()
+
     @api.model_create_multi
     def create(self, vals_list):
         companies = super().create(vals_list)
@@ -445,7 +453,7 @@ class ResCompany(models.Model):
         context = {'dialog_size': 'medium', **self.env.context}
         return {
             'type': 'ir.actions.act_window',
-            'name': _('Create a Bank Account'),
+            'name': _('Setup Bank Account'),
             'res_model': 'account.setup.bank.manual.config',
             'target': 'new',
             'view_mode': 'form',
@@ -605,6 +613,11 @@ class ResCompany(models.Model):
         """ Set the onboarding step as done """
         self.env['onboarding.onboarding.step'].action_validate_step('account.onboarding_onboarding_step_sales_tax')
 
+    def action_save_onboarding_company_data(self):
+        ref = 'account.onboarding_onboarding_step_company_data'
+        self.env['onboarding.onboarding.step'].with_company(self).action_validate_step(ref)
+        return {'type': 'ir.actions.client', 'tag': 'soft_reload'}
+
     def get_chart_of_accounts_or_fail(self):
         account = self.env['account.account'].search(self.env['account.account']._check_company_domain(self), limit=1)
         if len(account) == 0:

--- a/addons/account/models/onboarding_onboarding_step.py
+++ b/addons/account/models/onboarding_onboarding_step.py
@@ -10,11 +10,12 @@ class OnboardingStep(models.Model):
     @api.model
     def action_open_step_company_data(self):
         """Set company's basic information."""
+        company = self.env['account.journal'].browse(self._context.get('journal_id', None)).company_id or self.env.company
         action = {
             'type': 'ir.actions.act_window',
             'name': _('Set your company data'),
             'res_model': 'res.company',
-            'res_id': self.env.company.id,
+            'res_id': company.id,
             'views': [(self.env.ref('account.res_company_form_view_onboarding').id, "form")],
             'target': 'new',
         }
@@ -58,7 +59,8 @@ class OnboardingStep(models.Model):
     # DASHBOARD ONBOARDING
     @api.model
     def action_open_step_fiscal_year(self):
-        new_wizard = self.env['account.financial.year.op'].create({'company_id': self.env.company.id})
+        company = self.env['account.journal'].browse(self._context.get('journal_id', None)).company_id or self.env.company
+        new_wizard = self.env['account.financial.year.op'].create({'company_id': company.id})
         view_id = self.env.ref('account.setup_financial_year_opening_form').id
 
         return {
@@ -74,28 +76,11 @@ class OnboardingStep(models.Model):
             }
         }
 
-    @api.model
-    def action_open_step_default_taxes(self):
-        """ Called by the 'Taxes' button of the setup bar."""
-        self.action_validate_step('account.onboarding_onboarding_step_default_taxes')
-
-        view_id_list = self.env.ref('account.view_onboarding_tax_tree').id
-        view_id_form = self.env.ref('account.view_tax_form').id
-
-        return {
-            'type': 'ir.actions.act_window',
-            'name': _('Taxes'),
-            'res_model': 'account.tax',
-            'target': 'current',
-            'views': [[view_id_list, 'list'], [view_id_form, 'form']],
-            'context': {'search_default_sale': True, 'search_default_purchase': True, 'active_test': False},
-        }
-
     @api.model
     def action_open_step_chart_of_accounts(self):
         """ Called by the 'Chart of Accounts' button of the dashboard onboarding panel."""
-        company = self.env.company
-        self.sudo().action_validate_step('account.onboarding_onboarding_step_chart_of_accounts')
+        company = self.env['account.journal'].browse(self._context.get('journal_id', None)).company_id or self.env.company
+        self.sudo().with_company(company).action_validate_step('account.onboarding_onboarding_step_chart_of_accounts')
 
         # If an opening move has already been posted, we open the tree view showing all the accounts
         if company.opening_move_posted():
