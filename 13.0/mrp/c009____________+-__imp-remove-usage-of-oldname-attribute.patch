PR: https://github.com/odoo/odoo/pull/

From: 886eca0131716e137e60a1e398a9fc3996dfa425
From: Christophe Simonis
Date: 2019-08-05 09:36:41

Structural Changes: 5.3999999999999995
Total Changes: 24

[IMP] *: remove usage of `oldname` attribute

This attribute is misleading as it is insufficient to correctly upgrade
the database. It only renames the column in the database, but other
operations are needed, like updating the corresponding `ir.model.fields`
record (and its xmlid). The default values and the translations are also
lost during the upgrade.

Moreover, this feature was misused. It was:
 - left on fields during multiple versions.
 - used on reports (SQL views). This would be ok if the feature was
   complete, but, as is, it was useless.
 - kept unchanged after a second renaming of the field (which can happen
   versions later the first rename).
 - used, even when the meaning of the field changed. i.e. the field
   `archived` has been renamed to the classic `active`, but the value
   in the database should be switched.

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_abstract_workorder.py
+++ b/addons/mrp/models/mrp_abstract_workorder.py
@@ -16,7 +16,7 @@ class MrpAbstractWorkorder(models.AbstractModel):
     product_id = fields.Many2one(related='production_id.product_id', readonly=True, store=True)
     qty_producing = fields.Float(string='Currently Produced Quantity', digits='Product Unit of Measure')
     product_uom_id = fields.Many2one('uom.uom', 'Unit of Measure', required=True, readonly=True)
-    finished_lot_id = fields.Many2one('stock.production.lot', string='Lot/Serial Number', domain="[('product_id', '=', product_id)]", oldname='final_lot_id')
+    finished_lot_id = fields.Many2one('stock.production.lot', string='Lot/Serial Number', domain="[('product_id', '=', product_id)]")
     product_tracking = fields.Selection(related="product_id.tracking")
     consumption = fields.Selection([
         ('strict', 'Strict'),

--- a/addons/mrp/models/mrp_bom.py
+++ b/addons/mrp/models/mrp_bom.py
@@ -41,7 +41,7 @@ class MrpBom(models.Model):
         digits='Unit of Measure', required=True)
     product_uom_id = fields.Many2one(
         'uom.uom', 'Product Unit of Measure',
-        default=_get_default_product_uom_id, oldname='product_uom', required=True,
+        default=_get_default_product_uom_id, required=True,
         help="Unit of Measure (Unit of Measure) is the unit of measurement for the inventory control", domain="[('category_id', '=', product_uom_category_id)]")
     product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
     sequence = fields.Integer('Sequence', help="Gives the sequence order when displaying a list of bills of material.")
@@ -230,7 +230,7 @@ class MrpBomLine(models.Model):
     product_uom_id = fields.Many2one(
         'uom.uom', 'Product Unit of Measure',
         default=_get_default_product_uom_id,
-        oldname='product_uom', required=True,
+        required=True,
         help="Unit of Measure (Unit of Measure) is the unit of measurement for the inventory control", domain="[('category_id', '=', product_uom_category_id)]")
     product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
     sequence = fields.Integer(

--- a/addons/mrp/models/mrp_production.py
+++ b/addons/mrp/models/mrp_production.py
@@ -70,7 +70,7 @@ class MrpProduction(models.Model):
         states={'draft': [('readonly', False)]})
     product_uom_id = fields.Many2one(
         'uom.uom', 'Product Unit of Measure',
-        oldname='product_uom', readonly=True, required=True,
+        readonly=True, required=True,
         states={'draft': [('readonly', False)]})
     product_uom_qty = fields.Float(string='Total Quantity', compute='_compute_product_uom_qty', store=True)
     picking_type_id = fields.Many2one(
@@ -91,7 +91,7 @@ class MrpProduction(models.Model):
     date_planned_start = fields.Datetime(
         'Deadline Start', copy=False, default=fields.Datetime.now,
         index=True, required=True,
-        states={'draft': [('readonly', False)]}, oldname="date_planned")
+        states={'draft': [('readonly', False)]})
     date_planned_finished = fields.Datetime(
         'Deadline End', copy=False, default=fields.Datetime.now,
         index=True,
@@ -145,14 +145,14 @@ class MrpProduction(models.Model):
         ('waiting', 'Waiting Another Operation')],
         string='Material Availability',
         compute='_compute_state', copy=False, index=True, readonly=True,
-        store=True, tracking=True, oldname='availability',
+        store=True, tracking=True,
         help=" * Ready: The material is available to start the production.\n\
             * Waiting: The material is not available to start the production.\n\
             The material availability is impacted by the manufacturing readiness\
             defined on the BoM.")
 
     move_raw_ids = fields.One2many(
-        'stock.move', 'raw_material_production_id', 'Components', oldname='move_lines',
+        'stock.move', 'raw_material_production_id', 'Components',
         copy=True, states={'done': [('readonly', True)], 'cancel': [('readonly', True)]},
         domain=[('scrapped', '=', False)])
     move_finished_ids = fields.One2many(
@@ -164,7 +164,7 @@ class MrpProduction(models.Model):
         )
     workorder_ids = fields.One2many(
         'mrp.workorder', 'production_id', 'Work Orders',
-        copy=False, oldname='workcenter_lines', readonly=True)
+        copy=False, readonly=True)
     workorder_count = fields.Integer('# Work Orders', compute='_compute_workorder_count')
     workorder_done_count = fields.Integer('# Done Work Orders', compute='_compute_workorder_done_count')
     move_dest_ids = fields.One2many('stock.move', 'created_production_id',
@@ -188,7 +188,7 @@ class MrpProduction(models.Model):
         copy=False)
     orderpoint_id = fields.Many2one('stock.warehouse.orderpoint', 'Orderpoint')
     propagate_cancel = fields.Boolean(
-        'Propagate cancel and split', oldname='propagate',
+        'Propagate cancel and split',
         help='If checked, when the previous move of the move (which was generated by a next procurement) is cancelled or split, the move generated by this move will too')
     propagate_date = fields.Boolean(string="Propagate Rescheduling",
         help='The rescheduling is propagated to the next move.')

--- a/addons/mrp/models/mrp_routing.py
+++ b/addons/mrp/models/mrp_routing.py
@@ -19,7 +19,7 @@ class MrpRouting(models.Model):
     note = fields.Text('Description')
     operation_ids = fields.One2many(
         'mrp.routing.workcenter', 'routing_id', 'Operations',
-        copy=True, oldname='workcenter_lines')
+        copy=True)
     company_id = fields.Many2one(
         'res.company', 'Company',
         default=lambda self: self.env.company)

--- a/addons/mrp/models/mrp_workcenter.py
+++ b/addons/mrp/models/mrp_workcenter.py
@@ -24,7 +24,7 @@ class MrpWorkcenter(models.Model):
         'Description',
         help="Description of the Work Center.")
     capacity = fields.Float(
-        'Capacity', default=1.0, oldname='capacity_per_cycle',
+        'Capacity', default=1.0,
         help="Number of pieces that can be produced in parallel.")
     sequence = fields.Integer(
         'Sequence', default=1, required=True,

--- a/addons/mrp/models/res_config_settings.py
+++ b/addons/mrp/models/res_config_settings.py
@@ -8,7 +8,7 @@ class ResConfigSettings(models.TransientModel):
     _inherit = 'res.config.settings'
 
     manufacturing_lead = fields.Float(related='company_id.manufacturing_lead', string="Manufacturing Lead Time", readonly=False)
-    use_manufacturing_lead = fields.Boolean(string="Default Manufacturing Lead Time", config_parameter='mrp.use_manufacturing_lead', oldname='default_use_manufacturing_lead')
+    use_manufacturing_lead = fields.Boolean(string="Default Manufacturing Lead Time", config_parameter='mrp.use_manufacturing_lead')
     group_mrp_byproducts = fields.Boolean("By-Products",
         implied_group='mrp.group_mrp_byproducts')
     module_mrp_mps = fields.Boolean("Master Production Schedule")
