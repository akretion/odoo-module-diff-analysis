PR: https://github.com/odoo/odoo/pull/

From: 98675d3919b75c9a88247fd5f7e017278f9593a0
From: Yannick Tivisse
Date: 2016-09-02 06:46:33

Breaking data model changes score: 8, change matches:
-    task_id = fields.Many2one('project.task', string='Task', ondelete='cascade', required=True, index=True)
-    type_id = fields.Many2one('project.task.type', string='Stage')
-    kanban_state = fields.Selection([
-    date = fields.Date(string='Date', index=True, default=fields.Date.context_today)
-    end_date = fields.Date(string='End Date', compute='_compute_end_date', store=True)
-    remaining_hours = fields.Float(string='Remaining Time', digits=(16, 2))
-    planned_hours = fields.Float(string='Planned Time', digits=(16, 2))
-    user_id = fields.Many2one('res.users', string='Responsible')

Total Changes: 57

[IMP] project: Replace 'Cumulative Flow' by a fovorite filter in task report

This report is too advanced and/or complex to be a single menuitem. Furthermore the model was a mess and a horn of plenty for bugs.

The class ProjectTaskHistoryCumulative inherits from the class ProjectTaskHistory, and create a view based on the same model.The orginal class defines a compute field 'end_date' which calls a compute method '_compute_end_date' that will either make a simple assignment or a SQL request if the columns is always opened or folded.

As ProjectTaskHistoryCumulative is declare with '_auto=False' the compute method will try to write on this table, which is obviously wrong because we are trying to write on a view.

This leads to erors when trying to edit a project stage like:

OperationalError: cannot update view "project_task_history_cumulative"
DETAIL:  Views that do not select from a single table or view are not automatically updatable.
HINT:  To enable updating the view, provide an INSTEAD OF UPDATE trigger or an unconditional ON UPDATE DO INSTEAD rule.

or when trying to delete a column which already contains some tasks.

So we removed this these models and view and replaced them by a simple favorite filter in the Tasks Reports

================================= pseudo patch: =================================

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -491,19 +491,6 @@ class Task(models.Model):
         # perform search, return the first found
         return self.env['project.task.type'].search(search_domain, order=order, limit=1).id
 
-    def _store_history(self):
-        for task in self:
-            self.env['project.task.history'].create({
-                'task_id': task.id,
-                'remaining_hours': task.remaining_hours,
-                'planned_hours': task.planned_hours,
-                'kanban_state': task.kanban_state,
-                'type_id': task.stage_id.id,
-                'user_id': task.user_id.id
-
-            })
-        return True
-
     # ------------------------------------------------
     # CRUD overrides
     # ------------------------------------------------
@@ -520,7 +507,6 @@ class Task(models.Model):
         if vals.get('user_id'):
             vals['date_assign'] = fields.Datetime.now()
         task = super(Task, self.with_context(context)).create(vals)
-        task._store_history()
         return task
 
     @api.multi
@@ -538,8 +524,6 @@ class Task(models.Model):
 
         result = super(Task, self).write(vals)
 
-        if any(item in vals for item in ['stage_id', 'remaining_hours', 'user_id', 'kanban_state']):
-            self._store_history()
         return result
 
     # ---------------------------------------------------
@@ -775,47 +759,6 @@ class AccountAnalyticAccount(models.Model):
             result = {'type': 'ir.actions.act_window_close'}
         return result
 
-
-class ProjectTaskHistory(models.Model):
-    """
-    Tasks History, used for cumulative flow charts (Lean/Agile)
-    """
-    _name = 'project.task.history'
-    _description = 'History of Tasks'
-    _rec_name = 'task_id'
-    _log_access = False
-
-    @api.depends('date', 'task_id', 'type_id', 'type_id.fold')
-    def _compute_end_date(self):
-        for history in self:
-            if history.type_id and history.type_id.fold:
-                history.end_date = history.date
-                continue
-            self.env.cr.execute('''select
-                    date
-                from
-                    project_task_history
-                where
-                    task_id=%s and
-                    id>%s
-                order by id limit 1''', (history.task_id.id, history.id))
-            res = self.env.cr.fetchone()
-            history.end_date = res and res[0] or False
-
-    task_id = fields.Many2one('project.task', string='Task', ondelete='cascade', required=True, index=True)
-    type_id = fields.Many2one('project.task.type', string='Stage')
-    kanban_state = fields.Selection([
-            ('normal', 'Normal'),
-            ('blocked', 'Blocked'),
-            ('done', 'Ready for next stage')
-        ], string='Kanban State')
-    date = fields.Date(string='Date', index=True, default=fields.Date.context_today)
-    end_date = fields.Date(string='End Date', compute='_compute_end_date', store=True)
-    remaining_hours = fields.Float(string='Remaining Time', digits=(16, 2))
-    planned_hours = fields.Float(string='Planned Time', digits=(16, 2))
-    user_id = fields.Many2one('res.users', string='Responsible')
-
-
 class ProjectTags(models.Model):
     """ Tags of project's tasks (or issues) """
     _name = "project.tags"
