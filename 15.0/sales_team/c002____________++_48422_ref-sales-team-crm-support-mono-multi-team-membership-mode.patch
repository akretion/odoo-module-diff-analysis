PR: https://github.com/odoo/odoo/pull/48422

From: 297bee205f4631702211d694684dc9f765557abe
From: Thibault DelavallÃ©e
Date: 2021-01-21 10:59:24

Structural Changes: 4
Total Changes: 189

[REF] sales_team, crm: support mono/multi team membership mode

GLOBAL PURPOSE

Ability to have salesmen belonging to several sales team is a core requirement
of CRM. It is therefore moved from website_crm_score to crm along with cleaning
and behavior improvement. Automatic lead assignment is also moved and cleaned.

SPECIFICATIONS

Purpose of this commit is to allow to use either mono salesteam mode, either
multi salesteams mode. Basic CRM use mono membership: a salesperson belongs
to a single sales team. It is however possible to choose to work using multiple
memberships. This is configured through a configuration parameter available in
CRM configuration settings.

Mono salesteam behavior
  * a given user can be member of a single sales team at a time;
  * when moving an user from team to team, its existing memberships are
    archived to keep history of what has been done within this team;
  * display an alert when creating a new team member that would archive
    existing memberships;
  * displayed members on team form view are directly res.users records to
    avoid displaying unnecessary layer when using a simple CRM;

Multi salesteam behavior
  * a given user can be member of several sales team at a time;
  * unicity contraint (user_id, crm_team_id) is still enforced;
  * displayed members on team form view are crm.team.member records as
    advanced configuration can be done directly at that level;

In all cases when adding a new member check for archived membership before
creating it. If an archived version of the member exists it is unlinked in
order to avoid breaking the unicity constraint.

Archived memberships can be managed in its dedicated menu for advanced sales
team use.

SPECIFICATIONS: SETTINGS VIEW

Move Multi Teams checkbox below Recurring Revenues / Leads checkboxes. On its
right alias configuration should appear if Leads is checked.

PLS take third configuration line. On its right future commits will gradually
add automatic assignment configuration.

LINKS

Task ID-2086889 (main task)
Task ID-2357969 (scoring migration task)
Community PR odoo/odoo#48422
Enterprise PR odoo/enterprise#499
Upgrade PR odoo/upgrade#996

================================= pseudo patch: =================================

--- a/addons/sales_team/models/crm_team.py
+++ b/addons/sales_team/models/crm_team.py
@@ -48,10 +48,14 @@ class CrmTeam(models.Model):
         related='company_id.currency_id', readonly=True)
     user_id = fields.Many2one('res.users', string='Team Leader', check_company=True)
     # memberships
+    is_membership_multi = fields.Boolean(
+        'Multiple Memberships Allowed', compute='_compute_is_membership_multi',
+        help='If True, users may belong to several sales teams. Otherwise membership is limited to a single sales team.')
     member_ids = fields.Many2many(
         'res.users', string='Salespersons', check_company=True, domain=[('share', '=', False)],
         compute='_compute_member_ids', inverse='_inverse_member_ids', search='_search_member_ids',
         help="Users assigned to this team.")
+    member_warning = fields.Text('Membership Issue Warning', compute='_compute_member_warning')
     crm_team_member_ids = fields.One2many(
         'crm.team.member', 'crm_team_id', string='Sales Team Members',
         help="Add members to automatically assign their documents to this sales team.")
@@ -69,6 +73,11 @@ class CrmTeam(models.Model):
     dashboard_button_name = fields.Char(string="Dashboard Button", compute='_compute_dashboard_button_name')
     dashboard_graph_data = fields.Text(compute='_compute_dashboard_graph')
 
+    @api.depends('sequence')  # TDE FIXME: force compute in new mode
+    def _compute_is_membership_multi(self):
+        multi_enabled = self.env['ir.config_parameter'].sudo().get_param('sales_team.membership_multi', False)
+        self.is_membership_multi = multi_enabled
+
     @api.depends('crm_team_member_ids.active')
     def _compute_member_ids(self):
         for team in self:
@@ -89,6 +98,35 @@ class CrmTeam(models.Model):
             for membership in memberships:
                 membership.active = membership.user_id in users_current
 
+    @api.depends('is_membership_multi', 'member_ids')
+    def _compute_member_warning(self):
+        """ Display a warning message to warn user they are about to archive
+        other memberships. Only valid in mono-membership mode and take into
+        account only active memberships as we may keep several archived
+        memberships. """
+        self.member_warning = False
+        if all(team.is_membership_multi for team in self):
+            return
+        # done in a loop, but to be used in form view only -> not optimized
+        for team in self:
+            member_warning = False
+            other_memberships = self.env['crm.team.member'].search([
+                ('crm_team_id', '!=', team.id if team.ids else False),  # handle NewID
+                ('user_id', 'in', team.member_ids.ids)
+            ])
+            if other_memberships and len(other_memberships) == 1:
+                member_warning = _("Adding %(user_name)s in this team would remove him/her from its current team %(team_name)s.",
+                                   user_name=other_memberships.user_id.name,
+                                   team_name=other_memberships.crm_team_id.name
+                                  )
+            elif other_memberships:
+                member_warning = _("Adding %(user_names)s in this team would remove them from their current teams (%(team_names)s).",
+                                   user_names=", ".join(other_memberships.mapped('user_id.name')),
+                                   team_names=", ".join(other_memberships.mapped('crm_team_id.name'))
+                                  )
+            if member_warning:
+                team.member_warning = member_warning + " " + _("To add a Salesperson into multiple Teams, activate the Multi-Team option in settings.")
+
     def _search_member_ids(self, operator, value):
         return [('crm_team_member_ids.user_id', operator, value)]
 

--- a/addons/sales_team/models/crm_team_member.py
+++ b/addons/sales_team/models/crm_team_member.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models
+from odoo import api, exceptions, fields, models, _
 
 
 class CrmTeamMember(models.Model):
@@ -23,6 +23,10 @@ class CrmTeamMember(models.Model):
         'res.users', compute='_compute_user_in_teams_ids',
         help='UX: Give users not to add in the currently chosen team to avoid duplicates')
     active = fields.Boolean(string='Active', default=True)
+    is_membership_multi = fields.Boolean(
+        'Multiple Memberships Allowed', compute='_compute_is_membership_multi',
+        help='If True, users may belong to several sales teams. Otherwise membership is limited to a single sales team.')
+    member_warning = fields.Text(compute='_compute_member_warning')
     # salesman information
     image_1920 = fields.Image("Image", related="user_id.image_1920", max_width=1920, max_height=1920)
     image_128 = fields.Image("Image (128)", related="user_id.image_128", max_width=128, max_height=128)
@@ -32,19 +36,150 @@ class CrmTeamMember(models.Model):
     mobile = fields.Char(string='Mobile', related='user_id.mobile')
     company_id = fields.Many2one('res.company', string='Company', related='user_id.company_id')
 
-    _sql_constraints = [
-        ('crm_team_member_unique',
-         'UNIQUE(crm_team_id,user_id)',
-         'Error, team / user memberships should not be duplicated.'),
-    ]
+    @api.constrains('crm_team_id', 'user_id', 'active')
+    def _constrains_membership(self):
+        # In mono membership mode: check crm_team_id / user_id is unique for active
+        # memberships. Inactive memberships can create duplicate pairs which is whyy
+        # we don't use a SQL constraint. Include "self" in search in case we use create
+        # multi with duplicated user / team pairs in it. Use an explicit active leaf
+        # in domain as we may have an active_test in context that would break computation
+        existing = self.env['crm.team.member'].search([
+            ('crm_team_id', 'in', self.crm_team_id.ids),
+            ('user_id', 'in', self.user_id.ids),
+            ('active', '=', True)
+        ])
+        duplicates = self.env['crm.team.member']
 
-    @api.depends('crm_team_id')
+        active_records = dict(
+            (membership.user_id.id, membership.crm_team_id.id)
+            for membership in self if membership.active
+        )
+        for membership in self:
+            potential = existing.filtered(lambda m: m.user_id == membership.user_id and \
+                m.crm_team_id == membership.crm_team_id and m.id != membership.id
+            )
+            if not potential or len(potential) > 1:
+                duplicates += potential
+                continue
+            if active_records.get(potential.user_id.id):
+                duplicates += potential
+            else:
+                active_records[potential.user_id.id] = potential.crm_team_id.id
+
+        if duplicates:
+            raise exceptions.ValidationError(
+                _("You are trying to create duplicate membership(s). We found that %(duplicates)s already exist(s).",
+                  duplicates=", ".join("%s (%s)" % (m.user_id.name, m.crm_team_id.name) for m in duplicates)
+                 ))
+
+    @api.depends('crm_team_id', 'is_membership_multi', 'user_id')
     @api.depends_context('default_crm_team_id')
     def _compute_user_in_teams_ids(self):
+        """ Give users not to add in the currently chosen team to avoid duplicates.
+        In multi membership mode this field is empty as duplicates are allowed. """
+        if all(m.is_membership_multi for m in self):
+            member_user_ids = self.env['res.users']
+        elif self.ids:
+            member_user_ids = self.env['crm.team.member'].search([('id', 'not in', self.ids)]).user_id
+        else:
+            member_user_ids = self.env['crm.team.member'].search([]).user_id
         for member in self:
-            if member.crm_team_id:
+            if member_user_ids:
+                member.user_in_teams_ids = member_user_ids
+            elif member.crm_team_id:
                 member.user_in_teams_ids = member.crm_team_id.member_ids
             elif self.env.context.get('default_crm_team_id'):
                 member.user_in_teams_ids = self.env['crm.team'].browse(self.env.context['default_crm_team_id']).member_ids
             else:
                 member.user_in_teams_ids = self.env['res.users']
+
+    @api.depends('crm_team_id')
+    def _compute_is_membership_multi(self):
+        multi_enabled = self.env['ir.config_parameter'].sudo().get_param('sales_team.membership_multi', False)
+        self.is_membership_multi = multi_enabled
+
+    @api.depends('is_membership_multi', 'active', 'user_id', 'crm_team_id')
+    def _compute_member_warning(self):
+        """ Display a warning message to warn user they are about to archive
+        other memberships. Only valid in mono-membership mode and take into
+        account only active memberships as we may keep several archived
+        memberships. """
+        if all(m.is_membership_multi for m in self):
+            self.member_warning = False
+        else:
+            active = self.filtered('active')
+            (self - active).member_warning = False
+            if not active:
+                return
+            existing = self.env['crm.team.member'].search([('user_id', 'in', active.user_id.ids)])
+            user_mapping = dict.fromkeys(existing.user_id, self.env['crm.team'])
+            for membership in existing:
+                user_mapping[membership.user_id] |= membership.crm_team_id
+
+            for member in active:
+                teams = user_mapping.get(member.user_id, self.env['crm.team'])
+                remaining = teams - (member.crm_team_id | member._origin.crm_team_id)
+                if remaining:
+                    member.member_warning = _("Adding %(user_name)s in this team would remove him/her from its current teams %(team_names)s.",
+                                              user_name=member.user_id.name,
+                                              team_names=", ".join(remaining.mapped('name'))
+                                             )
+                else:
+                    member.member_warning = False
+
+
+    @api.model_create_multi
+    def create(self, values_list):
+        """ Specific behavior implemented on create
+
+          * mono membership mode: other user memberships are automatically
+            archived (a warning already told it in form view);
+          * creating a membership already existing as archived: do nothing as
+            people can manage them from specific menu "Members";
+        """
+        is_membership_multi = self.env['ir.config_parameter'].sudo().get_param('sales_team.membership_multi', False)
+        if not is_membership_multi:
+            self._synchronize_memberships(values_list)
+        return super(CrmTeamMember, self).create(values_list)
+
+    def write(self, values):
+        """ Specific behavior about active. If you change user_id / team_id user
+        get warnings in form view and a raise in constraint check. We support
+        archive / activation of memberships that toggles other memberships. But
+        we do not support manual creation or update of user_id / team_id. This
+        either works, either crashes). Indeed supporting it would lead to complex
+        code with low added value. Users should create or remove members, and
+        maybe archive / activate them. Updating manually memberships by
+        modifying user_id or team_id is advanced and does not benefit from our
+        support. """
+        is_membership_multi = self.env['ir.config_parameter'].sudo().get_param('sales_team.membership_multi', False)
+        if not is_membership_multi and values.get('active'):
+            self._synchronize_memberships([
+                dict(user_id=membership.user_id.id, crm_team_id=membership.crm_team_id.id)
+                for membership in self
+            ])
+        return super(CrmTeamMember, self).write(values)
+
+    def _synchronize_memberships(self, user_team_ids):
+        """ Synchronize memberships: archive other memberships.
+
+        :param user_team_ids: list of pairs (user_id, crm_team_id)
+        """
+        existing = self.search([
+            ('active', '=', True),  # explicit search on active only, whatever context
+            ('user_id', 'in', [values['user_id'] for values in user_team_ids])
+        ])
+        user_memberships = dict.fromkeys(existing.user_id.ids, self.env['crm.team.member'])
+        for membership in existing:
+            user_memberships[membership.user_id.id] += membership
+
+        existing_to_archive = self.env['crm.team.member']
+        for values in user_team_ids:
+            existing_to_archive += user_memberships.get(values['user_id'], self.env['crm.team.member']).filtered(
+                lambda m: m.crm_team_id.id != values['crm_team_id']
+            )
+
+        if existing_to_archive:
+            existing_to_archive.action_archive()
+
+        return existing_to_archive
