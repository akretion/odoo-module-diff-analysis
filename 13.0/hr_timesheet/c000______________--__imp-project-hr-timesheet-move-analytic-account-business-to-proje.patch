PR: https://github.com/odoo/odoo/pull/

From: db92ca5fce6477dc9f65e904193651403b98b940
From: jem-odoo
Date: 2019-05-24 09:20:06

Structural Changes: 4
Total Changes: 79

[IMP] project,hr_timesheet: move analytic account business to project

When we remove the inheritS between project and analytic account, we move the
analytic_accound_id field in timesheet because it was the only use case for
a project to be linked to an analytic account.
This commit prepares new cost origin for a project (other that timesheet).
Register costs on project will required an analytic account to keep analytic
costs tracking. The analytic account management is now moved to project, like
it was in 10.0, but without the inheritS.

Task-1911581

================================= pseudo patch: =================================

--- a/addons/hr_timesheet/models/__init__.py
+++ b/addons/hr_timesheet/models/__init__.py
@@ -1,7 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import analytic_account
 from . import hr
 from . import hr_timesheet
 from . import ir_http

--- a/addons/hr_timesheet/models/analytic_account.py
+++ b/None
@@ -1,45 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, fields, models, _
-from odoo.exceptions import UserError
-
-
-class AccountAnalyticAccount(models.Model):
-    _inherit = 'account.analytic.account'
-    _description = 'Analytic Account'
-
-    project_ids = fields.One2many('project.project', 'analytic_account_id', string='Projects')
-    project_count = fields.Integer("Project Count", compute='_compute_project_count')
-
-    @api.multi
-    @api.depends('project_ids')
-    def _compute_project_count(self):
-        project_data = self.env['project.project'].read_group([('analytic_account_id', 'in', self.ids)], ['analytic_account_id'], ['analytic_account_id'])
-        mapping = {m['analytic_account_id'][0]: m['analytic_account_id_count'] for m in project_data}
-        for account in self:
-            account.project_count = mapping.get(account.id, 0)
-
-    @api.multi
-    def unlink(self):
-        projects = self.env['project.project'].search([('analytic_account_id', 'in', self.ids)])
-        has_tasks = self.env['project.task'].search_count([('project_id', 'in', projects.ids)])
-        if has_tasks:
-            raise UserError(_('Please remove existing tasks in the project linked to the accounts you want to delete.'))
-        return super(AccountAnalyticAccount, self).unlink()
-
-    @api.multi
-    def action_view_projects(self):
-        kanban_view_id = self.env.ref('project.view_project_kanban').id
-        result = {
-            "type": "ir.actions.act_window",
-            "res_model": "project.project",
-            "views": [[kanban_view_id, "kanban"], [False, "form"]],
-            "domain": [['analytic_account_id', '=', self.id]],
-            "context": {"create": False},
-            "name": "Projects",
-        }
-        if len(self.project_ids) == 1:
-            result['views'] = [(False, "form")]
-            result['res_id'] = self.project_ids.id
-        return result

--- a/addons/hr_timesheet/models/project.py
+++ b/addons/hr_timesheet/models/project.py
@@ -9,9 +9,6 @@ class Project(models.Model):
     _inherit = "project.project"
 
     allow_timesheets = fields.Boolean("Allow timesheets", default=True, help="Enable timesheeting on the project.")
-    analytic_account_id = fields.Many2one('account.analytic.account', string="Analytic Account", copy=False, ondelete='set null',
-        help="Analytic account to which this project is linked for financial management."
-             "Use an analytic account to record cost and revenue on your project.")
 
     @api.onchange('partner_id')
     def _onchange_partner_id(self):
@@ -47,12 +44,7 @@ class Project(models.Model):
         """
         allow_timesheets = values['allow_timesheets'] if 'allow_timesheets' in values else self.default_get(['allow_timesheets'])['allow_timesheets']
         if allow_timesheets and not values.get('analytic_account_id'):
-            analytic_account = self.env['account.analytic.account'].create({
-                'name': values.get('name', _('Unknown Analytic Account')),
-                'company_id': values.get('company_id', self.env.company_id.id),
-                'partner_id': values.get('partner_id'),
-                'active': True,
-            })
+            analytic_account = self._create_analytic_account_from_values(values)
             values['analytic_account_id'] = analytic_account.id
         return super(Project, self).create(values)
 
@@ -66,31 +58,14 @@ class Project(models.Model):
         result = super(Project, self).write(values)
         return result
 
-    @api.multi
-    def unlink(self):
-        """ Delete the empty related analytic account """
-        analytic_accounts_to_delete = self.env['account.analytic.account']
-        for project in self:
-            if project.analytic_account_id and not project.analytic_account_id.line_ids:
-                analytic_accounts_to_delete |= project.analytic_account_id
-        result = super(Project, self).unlink()
-        analytic_accounts_to_delete.unlink()
-        return result
+    # ---------------------------------------------------
+    #  Business Methods
+    # ---------------------------------------------------
 
     @api.model
     def _init_data_analytic_account(self):
         self.search([('analytic_account_id', '=', False), ('allow_timesheets', '=', True)])._create_analytic_account()
 
-    def _create_analytic_account(self):
-        for project in self:
-            analytic_account = self.env['account.analytic.account'].create({
-                'name': project.name,
-                'company_id': project.company_id.id,
-                'partner_id': project.partner_id.id,
-                'active': True,
-            })
-            project.write({'analytic_account_id': analytic_account.id})
-
 
 class Task(models.Model):
     _inherit = "project.task"
