PR: https://github.com/odoo/odoo/pull/39232

From: 2c6cd81f30a991fd21b0f93fe41ed25736943e79
From: Kevin Baptiste
Date: 2019-11-19 07:50:34

Structural Changes: 2
Total Changes: 37

[IMP] mail: track fields based on ir_model_fields

The tracked field is now a relation to the corresponding ir.model.field.
This prevents potential privacy issues should the field be deleted or renamed.

closes odoo/odoo#39232

Taskid: 2088634
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/ir_model_fields.py
+++ b/addons/mail/models/ir_model_fields.py
@@ -30,22 +30,3 @@ class IrModelField(models.Model):
         if attrs and field_data.get('tracking'):
             attrs['tracking'] = field_data['tracking']
         return attrs
-
-    def unlink(self):
-        """
-        Delete 'mail.tracking.value's when a module is uninstalled
-        """
-        if self:
-            query = """
-                DELETE FROM mail_tracking_value
-                WHERE id IN (
-                    SELECT t.id
-                    FROM mail_tracking_value t
-                    INNER JOIN mail_message m ON (m.id = t.mail_message_id)
-                    INNER JOIN ir_model_fields f ON (t.field = f.name AND m.model = f.model)
-                    WHERE f.id IN %s
-                );
-            """
-            self.flush()
-            self.env.cr.execute(query, (tuple(self.ids),))
-        return super(IrModelField, self).unlink()

--- a/addons/mail/models/mail_thread.py
+++ b/addons/mail/models/mail_thread.py
@@ -616,7 +616,7 @@ class MailThread(models.AbstractModel):
                                             getattr(self._fields[col_name], 'track_sequence', 100))  # backward compatibility with old parameter name
                 if tracking_sequence is True:
                     tracking_sequence = 100
-                tracking = self.env['mail.tracking.value'].create_tracking_values(initial_value, new_value, col_name, col_info, tracking_sequence)
+                tracking = self.env['mail.tracking.value'].create_tracking_values(initial_value, new_value, col_name, col_info, tracking_sequence, self._name)
                 if tracking:
                     tracking_value_ids.append([0, 0, tracking])
                 changes.add(col_name)

--- a/addons/mail/models/mail_tracking_value.py
+++ b/addons/mail/models/mail_tracking_value.py
@@ -12,8 +12,7 @@ class MailTracking(models.Model):
     _rec_name = 'field'
     _order = 'tracking_sequence asc'
 
-    # TDE CLEANME: why not a m2o to ir model field ?
-    field = fields.Char('Changed Field', required=True, readonly=1)
+    field = fields.Many2one('ir.model.fields', required=True, readonly=1, ondelete='cascade')
     field_desc = fields.Char('Field Description', required=True, readonly=1)
     field_type = fields.Char('Field Type')
     field_groups = fields.Char(compute='_compute_field_groups')
@@ -39,13 +38,18 @@ class MailTracking(models.Model):
     def _compute_field_groups(self):
         for tracking in self:
             model = self.env[tracking.mail_message_id.model]
-            field = model._fields.get(tracking.field)
-            tracking.field_groups = field.groups if field else 'base.group_system'
+            field = model._fields.get(tracking.field.name)
+            tracking.field_groups = field.groups
 
     @api.model
-    def create_tracking_values(self, initial_value, new_value, col_name, col_info, tracking_sequence):
+    def create_tracking_values(self, initial_value, new_value, col_name, col_info, tracking_sequence, model_name):
         tracked = True
-        values = {'field': col_name, 'field_desc': col_info['string'], 'field_type': col_info['type'], 'tracking_sequence': tracking_sequence}
+
+        field = self.env['ir.model.fields']._get(model_name, col_name)
+        if not field:
+            return
+
+        values = {'field': field.id, 'field_desc': col_info['string'], 'field_type': col_info['type'], 'tracking_sequence': tracking_sequence}
 
         if col_info['type'] in ['integer', 'float', 'char', 'text', 'datetime', 'monetary']:
             values.update({
