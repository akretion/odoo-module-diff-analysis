PR: https://github.com/odoo/odoo/pull/193490

From: 28b69daefddbb74ad9ac3fd55df88028e6de972b
From: Mohammad Abdulmoneim (abdu)
Date: 2025-01-14 09:03:42

Breaking data model changes scores: del:9.4 + add:1, change matches:
-    uom_ids = fields.One2many('uom.uom', 'category_id')
-    reference_uom_id = fields.Many2one('uom.uom', "Reference UoM", store=False)
-    name = fields.Char('Unit of Measure', required=True, translate=True)
-    category_id = fields.Many2one(
-    factor = fields.Float(
-    factor_inv = fields.Float(
-    uom_type = fields.Selection([
-    ratio = fields.Float('Combined Ratio', compute='_compute_ratio', inverse='_set_ratio', store=False)
-    color = fields.Integer('Color', compute='_compute_color')
+    related_uom_ids = fields.One2many('uom.uom', 'relative_uom_id', 'Related UoMs')
+    factor = fields.Float('Absolute Quantity', digits=0, compute='_compute_factor', recursive=True, store=True)

Total Changes: 217

[IMP] uom,*: remove units of measure categories

Previous to this commit, units were classified into categories such as
length, weight, etc. If the user defined a base unit for a product, any
movement on that product (stock move, order line, etc.) can be only done
in a unit in the same category of the base unit of the product. This
commit removes unit categories and the previously mentioned enforcement.
This is useful for some business cases that need more flexibility (for
example: buying from vendors in pieces and selling in kilograms, etc.).
To allow for some structure, a new field is added to uom.uom model to
define a reference unit for any unit. Therefore, users can define a
hierarchy of units. A side effect of this change is that the `uom_uom`
model is restructured completely to be much simpler. The fields
`uom_type`, `color`, `factor_inv`, `ratio` are no longer needed. Each
`uom_uom` record now has only two fields that define its quantity:
`relative_factor` which is the quantity that this unit contains of its
reference unit (if exists), and `factor` which is the absolute quantity
of this unit all the way up to the most ancestor unit. The latter cannot
be controlled by users and not shown in any view but used in all
quantity computations. It's also not allowed to create a unit with a
`relative_factor` != 1 without setting a reference unit.Another side
effect related to point of sale app is that the field `is_pos_groupable`
is now set on the unit level instead of category level. The value of
this field is set in odoo/upgrade#6629 to preserve the current behavior
for users. Products also now have a new field `uom_ids` labelled as
"Packagings" where users can define the units that this product can be
sold/moved in.

Task-4252043

Part-of: odoo/odoo#193490
Related: odoo/enterprise#77092
Signed-off-by: Arnold Moyaux (arm) <arm@odoo.com>
Signed-off-by: Mohammad Abdulmoneim (abdu) <abdu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/uom/models/uom_uom.py
+++ b/addons/uom/models/uom_uom.py
@@ -1,83 +1,41 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from collections import defaultdict
 from datetime import timedelta
 
 from odoo import api, fields, tools, models, _
-from odoo.exceptions import UserError, ValidationError
-
-
-class UomCategory(models.Model):
-    _name = 'uom.category'
-    _description = 'Product UoM Categories'
-
-    name = fields.Char('Unit of Measure Category', required=True, translate=True)
-
-    uom_ids = fields.One2many('uom.uom', 'category_id')
-    reference_uom_id = fields.Many2one('uom.uom', "Reference UoM", store=False) # Dummy field to keep track of reference uom change
-
-    @api.onchange('uom_ids')
-    def _onchange_uom_ids(self):
-        if len(self.uom_ids) == 1:
-            self.uom_ids[0].uom_type = 'reference'
-            self.uom_ids[0].factor = 1
-        else:
-            reference_count = sum(uom.uom_type == 'reference' for uom in self.uom_ids)
-            if reference_count == 0 and self._origin.id and self.uom_ids:
-                raise UserError(_('UoM category %s must have at least one reference unit of measure.', self.name))
-            if self.reference_uom_id:
-                new_reference = self.uom_ids.filtered(lambda o: o.uom_type == 'reference' and o._origin.id != self.reference_uom_id.id)
-            else:
-                new_reference = self.uom_ids.filtered(lambda o: o.uom_type == 'reference' and o._origin.uom_type != 'reference')
-            if new_reference:
-                other_uoms = self.uom_ids.filtered(lambda u: u._origin.id) - new_reference
-                for uom in other_uoms:
-                    uom.factor = uom._origin.factor / (new_reference._origin.factor or 1)
-                    if uom.factor > 1:
-                        uom.uom_type = 'smaller'
-                    else:
-                        uom.uom_type = 'bigger'
-                self.reference_uom_id = new_reference._origin.id
+from odoo.exceptions import UserError
 
 
 class UomUom(models.Model):
     _name = 'uom.uom'
     _description = 'Product Unit of Measure'
-    _order = "factor DESC, id"
+    _parent_name = 'relative_uom_id'
+    _parent_store = True
+    _order = "relative_uom_id, name, id"
 
     def _unprotected_uom_xml_ids(self):
         return [
-            "product_uom_hour", # NOTE: this uom is protected when hr_timesheet is installed.
-            "product_uom_dozen",
+            "product_uom_hour",  # NOTE: this uom is protected when hr_timesheet is installed.
+            "product_uom_pack_6",
         ]
 
-    name = fields.Char('Unit of Measure', required=True, translate=True)
-    category_id = fields.Many2one(
-        'uom.category', 'Category', ondelete='restrict',
-        help="Conversion between Units of Measure can only occur if they belong to the same category. The conversion will be made based on the ratios.")
-    factor = fields.Float(
-        'Ratio', default=1.0, digits=0, required=True,  # force NUMERIC with unlimited precision
-        help='How much bigger or smaller this unit is compared to the reference Unit of Measure for this category: 1 * (reference unit) = ratio * (this unit)')
-    factor_inv = fields.Float(
-        'Bigger Ratio', compute='_compute_factor_inv', digits=0,  # force NUMERIC with unlimited precision
-        readonly=True, required=True,
-        help='How many times this Unit of Measure is bigger than the reference Unit of Measure in this category: 1 * (this unit) = ratio * (reference unit)')
     rounding = fields.Float(
         'Rounding Precision', default=0.01, digits=0, required=True,
         help="The computed quantity will be a multiple of this value. "
              "Use 1.0 for a Unit of Measure that cannot be further split, such as a piece.")
+    name = fields.Char('Unit Name', required=True, translate=True)
+    relative_factor = fields.Float(
+        'Contains', default=1.0, digits=0, required=True,  # force NUMERIC with unlimited precision
+        help='How much bigger or smaller this unit is compared to the reference UoM for this unit')
     active = fields.Boolean('Active', default=True, help="Uncheck the active field to disable a unit of measure without deleting it.")
-    uom_type = fields.Selection([
-        ('bigger', 'Bigger than the reference Unit of Measure'),
-        ('reference', 'Reference Unit of Measure for this category'),
-        ('smaller', 'Smaller than the reference Unit of Measure')], 'Type',
-        default='reference', required=True)
-    ratio = fields.Float('Combined Ratio', compute='_compute_ratio', inverse='_set_ratio', store=False)
-    color = fields.Integer('Color', compute='_compute_color')
+    relative_uom_id = fields.Many2one('uom.uom', 'Reference Unit', ondelete='cascade')
+    related_uom_ids = fields.One2many('uom.uom', 'relative_uom_id', 'Related UoMs')
+    factor = fields.Float('Absolute Quantity', digits=0, compute='_compute_factor', recursive=True, store=True)
+    parent_path = fields.Char(index=True)
 
     _factor_gt_zero = models.Constraint(
-        'CHECK (factor!=0)',
+        'CHECK (relative_factor!=0)',
         'The conversion ratio for a unit of measure cannot be 0!',
     )
     _rounding_gt_zero = models.Constraint(
@@ -85,65 +43,7 @@ class UomUom(models.Model):
         'The rounding precision must be strictly positive.',
     )
 
-    def _check_category_reference_uniqueness(self):
-        categ_res = self._read_group(
-            [("category_id", "in", self.category_id.ids)],
-            ["category_id", "uom_type"],
-            ["__count"],
-        )
-        uom_by_category = defaultdict(int)
-        ref_by_category = {}
-        for category, uom_type, count in categ_res:
-            uom_by_category[category] += count
-            if uom_type == "reference":
-                ref_by_category[category] = count
-
-        for category in self.category_id:
-            reference_count = ref_by_category.get(category, 0)
-            if reference_count > 1:
-                raise ValidationError(_("UoM category %s should only have one reference unit of measure.", category.name))
-            elif reference_count == 0 and uom_by_category.get(category, 0) > 0:
-                raise ValidationError(_("UoM category %s should have a reference unit of measure.", category.name))
-
-    @api.depends('factor')
-    def _compute_factor_inv(self):
-        for uom in self:
-            uom.factor_inv = uom.factor and (1.0 / uom.factor) or 0.0
-
-    @api.depends('uom_type', 'factor')
-    def _compute_ratio(self):
-        for uom in self:
-            if uom.uom_type == 'reference':
-                uom.ratio = 1
-            elif uom.uom_type == 'bigger':
-                uom.ratio = uom.factor_inv
-            else:
-                uom.ratio = uom.factor
-
-    def _set_ratio(self):
-        if self.ratio == 0:
-            raise ValidationError(_("The value of ratio could not be Zero"))
-        if self.uom_type == 'reference':
-            self.factor = 1
-        elif self.uom_type == 'bigger':
-            self.factor = 1 / self.ratio
-        else:
-            self.factor = self.ratio
-
-    @api.depends('uom_type')
-    def _compute_color(self):
-        for uom in self:
-            if uom.uom_type == 'reference':
-                uom.color = 7
-            else:
-                uom.color = 0
-
-    @api.onchange('uom_type')
-    def _onchange_uom_type(self):
-        if self.uom_type == 'reference':
-            self.factor = 1
-
-    @api.onchange('factor', 'factor_inv', 'uom_type', 'rounding', 'category_id')
+    @api.onchange('relative_factor', 'rounding')
     def _onchange_critical_fields(self):
         if self._filter_protected_uoms() and self.create_date < (fields.Datetime.now() - timedelta(days=1)):
             return {
@@ -160,26 +60,11 @@ class UomUom(models.Model):
                 }
             }
 
-    @api.model_create_multi
-    def create(self, vals_list):
-        for values in vals_list:
-            if 'factor_inv' in values:
-                factor_inv = values.pop('factor_inv')
-                values['factor'] = factor_inv and (1.0 / factor_inv) or 0.0
-        res = super().create(vals_list)
-        res._check_category_reference_uniqueness()
-        return res
-
-    def write(self, values):
-        if 'factor_inv' in values:
-            factor_inv = values.pop('factor_inv')
-            values['factor'] = factor_inv and (1.0 / factor_inv) or 0.0
-
-        res = super().write(values)
-        if ('uom_type' not in values or values['uom_type'] != 'reference') and\
-                not self.env.context.get('allow_to_change_reference'):
-            self._check_category_reference_uniqueness()
-        return res
+    @api.constrains('relative_factor', 'relative_uom_id')
+    def _check_factor(self):
+        for uom in self:
+            if not uom.relative_uom_id and uom.relative_factor != 1.0:
+                raise UserError(_("The conversion ratio for a unit of measure without a reference unit must be 1!"))
 
     @api.ondelete(at_uninstall=False)
     def _unlink_except_master_data(self):
@@ -190,26 +75,6 @@ class UomUom(models.Model):
                 ", ".join(locked_uoms.mapped('name')),
             ))
 
-    @api.model
-    def name_create(self, name):
-        """ The UoM category and factor are required, so we'll have to add temporary values
-        for imported UoMs """
-        values = {
-            self._rec_name: name,
-            'factor': 1
-        }
-        # look for the category based on the english name, i.e. no context on purpose!
-        # TODO: should find a way to have it translated but not created until actually used
-        if not self._context.get('default_category_id'):
-            EnglishUoMCateg = self.env['uom.category'].with_context({})
-            misc_category = EnglishUoMCateg.search([('name', '=', 'Unsorted/Imported Units')])
-            if misc_category:
-                values['category_id'] = misc_category.id
-            else:
-                values['category_id'] = EnglishUoMCateg.name_create('Unsorted/Imported Units')[0]
-        new_uom = self.create(values)
-        return new_uom.id, new_uom.display_name
-
     def _compute_quantity(self, qty, to_unit, round=True, rounding_method='UP', raise_if_failure=True):
         """ Convert the given quantity from the current UoM `self` into a given one
             :param qty: the quantity to convert
@@ -222,20 +87,12 @@ class UomUom(models.Model):
             return qty
         self.ensure_one()
 
-        if self != to_unit and self.category_id.id != to_unit.category_id.id:
-            if raise_if_failure:
-                raise UserError(_(
-                    'The unit of measure %(unit)s defined on the order line doesn\'t belong to the same category as the unit of measure %(product_unit)s defined on the product. Please correct the unit of measure defined on the order line or on the product. They should belong to the same category.',
-                    unit=self.name, product_unit=to_unit.name))
-            else:
-                return qty
-
         if self == to_unit:
             amount = qty
         else:
-            amount = qty / self.factor
+            amount = qty * self.factor
             if to_unit:
-                amount = amount * to_unit.factor
+                amount = amount / to_unit.factor
 
         if to_unit and round:
             amount = tools.float_round(amount, precision_rounding=to_unit.rounding, rounding_method=rounding_method)
@@ -246,13 +103,19 @@ class UomUom(models.Model):
         self.ensure_one()
         if not self or not price or not to_unit or self == to_unit:
             return price
-        if self.category_id.id != to_unit.category_id.id:
-            return price
-        amount = price * self.factor
+        amount = price * to_unit.factor
         if to_unit:
-            amount = amount / to_unit.factor
+            amount = amount / self.factor
         return amount
 
+    @api.depends('relative_factor', 'relative_uom_id', 'relative_uom_id.factor')
+    def _compute_factor(self):
+        for uom in self:
+            if uom.relative_uom_id:
+                uom.factor = uom.relative_factor * uom.relative_uom_id.factor
+            else:
+                uom.factor = uom.relative_factor
+
     def _filter_protected_uoms(self):
         """Verifies self does not contain protected uoms."""
         linked_model_data = self.env['ir.model.data'].sudo().search([
@@ -265,3 +128,17 @@ class UomUom(models.Model):
             return self.browse()
         else:
             return self.browse(set(linked_model_data.mapped('res_id')))
+
+    def _has_common_reference(self, other_uom):
+        """ Check if `self` and `other_uom` have a common reference unit """
+        self.ensure_one()
+        other_uom.ensure_one()
+        self_path = self.parent_path.split('/')
+        other_path = other_uom.parent_path.split('/')
+        common_path = []
+        for self_parent, other_parent in zip(self_path, other_path):
+            if self_parent == other_parent:
+                common_path.append(self_parent)
+            else:
+                break
+        return bool(common_path)
