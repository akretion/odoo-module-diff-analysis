PR: https://github.com/odoo/odoo/pull/35662

From: c230cfa0fe70000f1c1b05a70052d268c821366c
From: jbm-odoo
Date: 2019-08-21 10:04:54

Structural Changes: 5
Total Changes: 31

[ADD] stock_sms: Integration with stock pickings

The user can already send a confirmation email when the
Stock Picking is done. It'd be great to communicate the
same information by SMS.

In addition, the current mailing tool requires a manual
action. The idea is to automate the process via a
Setting instead.

id=1972567

closes odoo/odoo#35662

Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/res_company.py
+++ b/addons/stock/models/res_company.py
@@ -7,9 +7,20 @@ from odoo import api, fields, models, _
 class Company(models.Model):
     _inherit = "res.company"
 
+    def _default_confirmation_mail_template(self):
+        try:
+            return self.env.ref('stock.mail_template_data_delivery_confirmation').id
+        except ValueError:
+            return False
+
     internal_transit_location_id = fields.Many2one(
         'stock.location', 'Internal Transit Location', ondelete="restrict",
         help="Technical field used for resupply routes between warehouses that belong to this company")
+    stock_move_email_validation = fields.Boolean("Email Confirmation picking", default=False)
+    stock_mail_confirmation_template_id = fields.Many2one('mail.template', string="Email Template confirmation picking",
+        domain="[('model', '=', 'stock.picking')]",
+        default=_default_confirmation_mail_template,
+        help="Email sent to the customer once the order is done.")
 
     def _create_transit_location(self):
         '''Create a transit location with company_id being the given company_id. This is needed

--- a/addons/stock/models/res_config_settings.py
+++ b/addons/stock/models/res_config_settings.py
@@ -28,6 +28,9 @@ class ResConfigSettings(models.TransientModel):
     group_warning_stock = fields.Boolean("Warnings for Stock", implied_group='stock.group_warning_stock')
     module_stock_picking_batch = fields.Boolean("Batch Pickings")
     module_stock_barcode = fields.Boolean("Barcode Scanner")
+    stock_move_email_validation = fields.Boolean(related='company_id.stock_move_email_validation', readonly=False)
+    stock_mail_confirmation_template_id = fields.Many2one(related='company_id.stock_mail_confirmation_template_id', readonly=False)
+    module_stock_sms = fields.Boolean("SMS Confirmation")
     module_delivery = fields.Boolean("Delivery Methods")
     module_delivery_dhl = fields.Boolean("DHL USA")
     module_delivery_fedex = fields.Boolean("FedEx")

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -679,8 +679,14 @@ class Picking(models.Model):
                     #'qty_done': ops.qty_done})
         todo_moves._action_done(cancel_backorder=self.env.context.get('cancel_backorder'))
         self.write({'date_done': fields.Datetime.now()})
+        self._send_confirmation_email()
         return True
 
+    def _send_confirmation_email(self):
+        for stock_pick in self.filtered(lambda p: p.company_id.stock_move_email_validation and p.picking_type_id.code == 'outgoing'):
+            delivery_template_id = stock_pick.company_id.stock_mail_confirmation_template_id.id
+            stock_pick.with_context(force_send=True).message_post_with_template(delivery_template_id, email_layout_xmlid='mail.mail_notification_light')
+
     @api.depends('state', 'move_lines', 'move_lines.state', 'move_lines.package_level_id', 'move_lines.move_line_ids.package_level_id')
     def _compute_move_without_package(self):
         for picking in self:
@@ -756,6 +762,9 @@ class Picking(models.Model):
             picking.move_lines._do_unreserve()
             picking.package_level_ids.filtered(lambda p: not p.move_ids).unlink()
 
+    def _check_sms_confirmation_popup(self):
+        return False
+
     def button_validate(self):
         self.ensure_one()
         if not self.move_lines and not self.move_line_ids:
@@ -783,6 +792,14 @@ class Picking(models.Model):
                     if not line.lot_name and not line.lot_id:
                         raise UserError(_('You need to supply a Lot/Serial number for product %s.') % product.display_name)
 
+        # Propose to use the sms mechanism the first time a delivery
+        # picking is validated. Whatever the user's decision (use it or not),
+        # the method button_validate is called again (except if it's cancel),
+        # so the checks are made twice in that case, but the flow is not broken
+        sms_confirmation = self._check_sms_confirmation_popup()
+        if sms_confirmation:
+            return sms_confirmation
+
         if no_quantities_done:
             view = self.env.ref('stock.view_immediate_transfer')
             wiz = self.env['stock.immediate.transfer'].create({'pick_ids': [(4, self.id)]})
