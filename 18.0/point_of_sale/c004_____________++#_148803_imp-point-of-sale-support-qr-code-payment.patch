PR: https://github.com/odoo/odoo/pull/148803

From: 07469491e0651b6b1e110796f28112c8a79c9f7d
From: mhch-odoo
Date: 2024-03-12 16:41:00

Structural Changes: 4
Total Changes: 116

[IMP] point_of_sale: support QR code payment

In the accounting module we have the possibility to display a qr code
for payment in an invoice.
These changes aim at enabeling the POS to use that feature to display
payment qr code at checkout.

Currently this doesn't support payment status fetching so the cachier
will have to manually confirm that the payment is received.

We currently suppport all QR from invoicing:
SAPA
SWISS QR
EMV QR
QRIS

task-3617200

Part-of: odoo/odoo#148803

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/pos_payment_method.py
+++ b/addons/point_of_sale/models/pos_payment_method.py
@@ -1,5 +1,5 @@
 from odoo import api, fields, models, _
-from odoo.exceptions import UserError
+from odoo.exceptions import UserError, ValidationError
 
 
 class PosPaymentMethod(models.Model):
@@ -10,6 +10,12 @@ class PosPaymentMethod(models.Model):
     def _get_payment_terminal_selection(self):
         return []
 
+    def _get_payment_method_type(self):
+        selection = [('none', 'None required'), ('terminal', 'Terminal')]
+        if self.env['res.partner.bank'].get_available_qr_methods_in_sequence():
+            selection.append(('qr_code', 'Bank App (QR Code)'))
+        return selection
+
     name = fields.Char(string="Method", required=True, translate=True, help='Defines the name of the payment method that will be displayed in the Point of Sale when the payments are selected.')
     sequence = fields.Integer(copy=False)
     outstanding_account_id = fields.Many2one('account.account',
@@ -46,12 +52,32 @@ class PosPaymentMethod(models.Model):
     active = fields.Boolean(default=True)
     type = fields.Selection(selection=[('cash', 'Cash'), ('bank', 'Bank'), ('pay_later', 'Customer Account')], compute="_compute_type")
     image = fields.Image("Image", max_width=50, max_height=50)
+    payment_method_type = fields.Selection(selection=_get_payment_method_type, string="Integration", default='none', required=True)
+    default_qr = fields.Char(compute='_compute_qr')
+    qr_code_method = fields.Selection(
+        string='QR Code Format', copy=False,
+        selection=lambda self: self.env['res.partner.bank'].get_available_qr_methods_in_sequence(),
+        help='Type of QR-code to be generated for this payment method.',
+    )
+    hide_qr_code_method = fields.Boolean(compute='_compute_hide_qr_code_method')
 
-    @api.depends('type')
+    @api.depends('type', 'payment_method_type')
     def _compute_hide_use_payment_terminal(self):
         no_terminals = not bool(self._fields['use_payment_terminal'].selection(self))
         for payment_method in self:
-            payment_method.hide_use_payment_terminal = no_terminals or payment_method.type in ('cash', 'pay_later')
+            payment_method.hide_use_payment_terminal = no_terminals or payment_method.type in ('cash', 'pay_later') or payment_method.payment_method_type != 'terminal'
+
+    @api.depends('payment_method_type')
+    def _compute_hide_qr_code_method(self):
+        for payment_method in self:
+            payment_method.hide_qr_code_method = payment_method.payment_method_type != 'qr_code' or len(self.env['res.partner.bank'].get_available_qr_methods_in_sequence()) == 1
+
+    @api.onchange('payment_method_type')
+    def _onchange_payment_method_type(self):
+        # We don't display the field if there is only one option and cannot set a default on it
+        selection_options = self.env['res.partner.bank'].get_available_qr_methods_in_sequence()
+        if len(selection_options) == 1:
+            self.qr_code_method = selection_options[0][0]
 
     @api.onchange('use_payment_terminal')
     def _onchange_use_payment_terminal(self):
@@ -88,12 +114,92 @@ class PosPaymentMethod(models.Model):
         whitelisted_fields = {'sequence'}
         return bool(fields - whitelisted_fields and self.open_session_ids)
 
+    @api.model_create_multi
+    def create(self, vals_list):
+        for vals in vals_list:
+            if vals.get('payment_method_type', False):
+                self._force_payment_method_type_values(vals, vals['payment_method_type'])
+        return super().create(vals_list)
+
     def write(self, vals):
         if self._is_write_forbidden(set(vals.keys())):
             raise UserError(_('Please close and validate the following open PoS Sessions before modifying this payment method.\n'
                             'Open sessions: %s', (' '.join(self.open_session_ids.mapped('name')),)))
-        return super(PosPaymentMethod, self).write(vals)
+
+        if 'payment_method_type' in vals:
+            self._force_payment_method_type_values(vals, vals['payment_method_type'])
+            return super().write(vals)
+
+        pmt_terminal = self.filtered(lambda pm: pm.payment_method_type == 'terminal')
+        pmt_qr = self.filtered(lambda pm: pm.payment_method_type == 'qr_code')
+        not_pmt = self - pmt_terminal - pmt_qr
+
+        res = True
+        forced_vals = vals.copy()
+        if pmt_terminal:
+            self._force_payment_method_type_values(forced_vals, 'terminal', True)
+            res = super(PosPaymentMethod, pmt_terminal).write(forced_vals) and res
+        if pmt_qr:
+            self._force_payment_method_type_values(forced_vals, 'qr_code', True)
+            res = super(PosPaymentMethod, pmt_qr).write(forced_vals) and res
+        if not_pmt:
+            res = super(PosPaymentMethod, not_pmt).write(vals) and res
+
+        return res
+
+    @staticmethod
+    def _force_payment_method_type_values(vals, payment_method_type, if_present=False):
+        if payment_method_type == 'terminal':
+            disabled_fields_name = ['qr_code_method']
+        elif payment_method_type == 'qr_code':
+            disabled_fields_name = ['use_payment_terminal']
+        else:
+            disabled_fields_name = ['use_payment_terminal', 'qr_code_method']
+        if if_present:
+            for name in disabled_fields_name:
+                if name in vals:
+                    vals[name] = False
+        else:
+            for name in disabled_fields_name:
+                vals[name] = False
 
     def copy_data(self, default=None):
         default = dict(default or {}, config_ids=[(5, 0, 0)])
         return super().copy_data(default=default)
+
+    @api.constrains('payment_method_type', 'journal_id', 'qr_code_method')
+    def _check_payment_method(self):
+        for rec in self:
+            if rec.payment_method_type == "qr_code":
+                if (rec.journal_id.type != 'bank' or not rec.journal_id.bank_account_id):
+                    raise ValidationError(_("At least one bank account must be defined on the journal to allow registering QR code payments with Bank apps."))
+                if not rec.qr_code_method:
+                    raise ValidationError(_("You must select a QR-code method to generate QR-codes for this payment method."))
+                error_msg = self.journal_id.bank_account_id._get_error_messages_for_qr(self.qr_code_method, False, rec.company_id.currency_id)
+                if error_msg:
+                    raise ValidationError(error_msg)
+
+    @api.depends('payment_method_type', 'journal_id')
+    def _compute_qr(self):
+        for pm in self:
+            if pm.payment_method_type != "qr_code":
+                pm.default_qr = False
+                continue
+            try:
+                # Generate QR without amount that can then be used when the POS is offline
+                pm.default_qr = pm.get_qr_code(False, '', '', pm.company_id.currency_id.id, False)
+            except UserError:
+                pm.default_qr = False
+
+    def get_qr_code(self, amount, free_communication, structured_communication, currency, debtor_partner):
+        """ Generates and returns a QR-code
+        """
+        self.ensure_one()
+        if self.payment_method_type != "qr_code" or not self.qr_code_method:
+            raise UserError(_("This payment method is not configured to generate QR codes."))
+        payment_bank = self.journal_id.bank_account_id
+        debtor_partner = self.env['res.partner'].browse(debtor_partner)
+        currency = self.env['res.currency'].browse(currency)
+
+        return payment_bank.with_context(from_portal=True).build_qr_code_base64(
+            float(amount), free_communication, structured_communication, currency, debtor_partner, self.qr_code_method, silent_errors=False)

--- a/addons/point_of_sale/models/pos_session.py
+++ b/addons/point_of_sale/models/pos_session.py
@@ -127,7 +127,7 @@ class PosSession(models.Model):
             },
             'pos.payment.method': {
                 'domain': ['|', ('active', '=', False), ('active', '=', True)],
-                'fields': ['id', 'name', 'is_cash_count', 'use_payment_terminal', 'split_transactions', 'type', 'image', 'sequence'],
+                'fields': ['id', 'name', 'is_cash_count', 'use_payment_terminal', 'split_transactions', 'type', 'image', 'sequence', 'payment_method_type', 'default_qr'],
             },
             'pos.printer': {
                 'domain': [('id', 'in', config_id.printer_ids.ids)],
