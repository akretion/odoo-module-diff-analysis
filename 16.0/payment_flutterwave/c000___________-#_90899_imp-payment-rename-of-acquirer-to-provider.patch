PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Breaking data model changes score: 2, change matches:
-    _inherit = 'payment.acquirer'
-    provider = fields.Selection(

Total Changes: 254

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_flutterwave/models/__init__.py
+++ b/addons/payment_flutterwave/models/__init__.py
@@ -1,5 +1,5 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_token
 from . import payment_transaction

--- a/addons/payment_flutterwave/models/payment_acquirer.py
+++ b/addons/payment_flutterwave/models/payment_provider.py
@@ -15,10 +15,10 @@ from odoo.addons.payment_flutterwave.const import SUPPORTED_CURRENCIES
 _logger = logging.getLogger(__name__)
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('flutterwave', "Flutterwave")], ondelete={'flutterwave': 'set default'}
     )
     flutterwave_public_key = fields.Char(
@@ -42,25 +42,25 @@ class PaymentAcquirer(models.Model):
     def _compute_feature_support_fields(self):
         """ Override of `payment` to enable additional features. """
         super()._compute_feature_support_fields()
-        self.filtered(lambda acq: acq.provider == 'flutterwave').update({
+        self.filtered(lambda p: p.code == 'flutterwave').update({
             'support_tokenization': True,
         })
 
     # === BUSINESS METHODS ===#
 
     @api.model
-    def _get_compatible_acquirers(self, *args, currency_id=None, is_validation=False, **kwargs):
-        """ Override of payment to filter out Flutterwave acquirers for unsupported currencies or
+    def _get_compatible_providers(self, *args, currency_id=None, is_validation=False, **kwargs):
+        """ Override of payment to filter out Flutterwave providers for unsupported currencies or
         for validation operations. """
-        acquirers = super()._get_compatible_acquirers(
+        providers = super()._get_compatible_providers(
             *args, currency_id=currency_id, is_validation=is_validation, **kwargs
         )
 
         currency = self.env['res.currency'].browse(currency_id).exists()
         if (currency and currency.name not in SUPPORTED_CURRENCIES) or is_validation:
-            acquirers = acquirers.filtered(lambda a: a.provider != 'flutterwave')
+            providers = providers.filtered(lambda p: p.code != 'flutterwave')
 
-        return acquirers
+        return providers
 
     def _flutterwave_make_request(self, endpoint, payload=None, method='POST'):
         """ Make a request to Flutterwave API at the specified endpoint.

--- a/addons/payment_flutterwave/models/payment_transaction.py
+++ b/addons/payment_flutterwave/models/payment_transaction.py
@@ -25,15 +25,15 @@ class PaymentTransaction(models.Model):
         Note: self.ensure_one() from `_get_processing_values`
 
         :param dict processing_values: The generic and specific processing values of the transaction
-        :return: The dict of acquirer-specific processing values.
+        :return: The dict of provider-specific processing values.
         :rtype: dict
         """
         res = super()._get_specific_rendering_values(processing_values)
-        if self.provider != 'flutterwave':
+        if self.provider_code != 'flutterwave':
             return res
 
         # Initiate the payment and retrieve the payment link data.
-        base_url = self.acquirer_id.get_base_url()
+        base_url = self.provider_id.get_base_url()
         payload = {
             'tx_ref': self.reference,
             'amount': self.amount,
@@ -49,7 +49,7 @@ class PaymentTransaction(models.Model):
                 'logo': urls.url_join(base_url, f'web/image/res.company/{self.company_id.id}/logo'),
             },
         }
-        payment_link_data = self.acquirer_id._flutterwave_make_request('payments', payload=payload)
+        payment_link_data = self.provider_id._flutterwave_make_request('payments', payload=payload)
 
         # Extract the payment link URL and embed it in the redirect form.
         rendering_values = {
@@ -66,7 +66,7 @@ class PaymentTransaction(models.Model):
         :raise UserError: If the transaction is not linked to a token.
         """
         super()._send_payment_request()
-        if self.provider != 'flutterwave':
+        if self.provider_code != 'flutterwave':
             return
 
         # Prepare the payment request to Flutterwave.
@@ -75,7 +75,7 @@ class PaymentTransaction(models.Model):
 
         first_name, last_name = payment_utils.split_partner_name(self.partner_name)
         data = {
-            'token': self.token_id.acquirer_ref,
+            'token': self.token_id.provider_ref,
             'email': self.token_id.flutterwave_customer_email,
             'amount': self.amount,
             'currency': self.currency_id.name,
@@ -87,7 +87,7 @@ class PaymentTransaction(models.Model):
         }
 
         # Make the payment request to Flutterwave.
-        response_content = self.acquirer_id._flutterwave_make_request(
+        response_content = self.provider_id._flutterwave_make_request(
             'tokenized-charges', payload=data
         )
 
@@ -98,25 +98,25 @@ class PaymentTransaction(models.Model):
         )
         self._handle_notification_data('flutterwave', response_content['data'])
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of payment to find the transaction based on Flutterwave data.
 
-        :param str provider: The provider of the acquirer that handled the transaction.
+        :param str provider_code: The code of the provider that handled the transaction.
         :param dict notification_data: The notification data sent by the provider.
         :return: The transaction if found.
         :rtype: recordset of `payment.transaction`
         :raise ValidationError: If inconsistent data were received.
         :raise ValidationError: If the data match no transaction.
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'flutterwave' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'flutterwave' or len(tx) == 1:
             return tx
 
         reference = notification_data.get('tx_ref')
         if not reference:
             raise ValidationError("Flutterwave: " + _("Received data with missing reference."))
 
-        tx = self.search([('reference', '=', reference), ('provider', '=', 'flutterwave')])
+        tx = self.search([('reference', '=', reference), ('provider_code', '=', 'flutterwave')])
         if not tx:
             raise ValidationError(
                 "Flutterwave: " + _("No transaction found matching reference %s.", reference)
@@ -133,17 +133,17 @@ class PaymentTransaction(models.Model):
         :raise ValidationError: If inconsistent data were received.
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'flutterwave':
+        if self.provider_code != 'flutterwave':
             return
 
         # Verify the notification data.
-        verification_response_content = self.acquirer_id._flutterwave_make_request(
+        verification_response_content = self.provider_id._flutterwave_make_request(
             'transactions/verify_by_reference', payload={'tx_ref': self.reference}, method='GET'
         )
         verified_data = verification_response_content['data']
 
         # Process the verified notification data.
-        self.acquirer_reference = verified_data['id']
+        self.provider_reference = verified_data['id']
         payment_status = verified_data['status'].lower()
         if payment_status in PAYMENT_STATUS_MAPPING['pending']:
             self._set_pending()
@@ -177,10 +177,10 @@ class PaymentTransaction(models.Model):
         self.ensure_one()
 
         token = self.env['payment.token'].create({
-            'acquirer_id': self.acquirer_id.id,
+            'provider_id': self.provider_id.id,
             'payment_details': notification_data['card']['last_4digits'],
             'partner_id': self.partner_id.id,
-            'acquirer_ref': notification_data['card']['token'],
+            'provider_ref': notification_data['card']['token'],
             'flutterwave_customer_email': notification_data['customer']['email'],
             'verified': True,  # The payment is confirmed, so the payment method is valid.
         })
