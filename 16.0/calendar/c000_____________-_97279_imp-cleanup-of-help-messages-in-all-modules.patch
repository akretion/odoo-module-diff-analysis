PR: https://github.com/odoo/odoo/pull/97279

From: 3363e55cac2a121c29842a0b2463f940bdd866a4
From: Fabien Pinckaers
Date: 2022-08-01 22:26:53

Structural Changes: 4.9
Total Changes: 15

[IMP] cleanup of help messages in all modules

This commit aims at removing unuseful help message to:
1/ reduce translators work, to focus on more useful translations
2/ not sending unuseful information in load_views
3/ reduce help message to useful messages, so that we can mark
   fields having a tooltip in the future UI.
4/ some cleanup of existing messages too

The main use cases:
- REMOVED: help redundant with the field name, providing no extra info
- MOVED TO COMMENT: technical help messages, that should not be in UX

closes odoo/odoo#97279

Signed-off-by: Fabien Pinckaers <fp@odoo.com>

================================= pseudo patch: =================================

--- a/addons/calendar/models/calendar_alarm.py
+++ b/addons/calendar/models/calendar_alarm.py
@@ -19,8 +19,7 @@ class Alarm(models.Model):
         list(_interval_selection.items()), 'Unit', required=True, default='hours')
     duration_minutes = fields.Integer(
         'Duration in minutes', store=True,
-        search='_search_duration_minutes', compute='_compute_duration_minutes',
-        help="Duration in minutes")
+        search='_search_duration_minutes', compute='_compute_duration_minutes')
     mail_template_id = fields.Many2one(
         'mail.template', string="Email Template",
         domain=[('model', 'in', ['calendar.attendee'])],

--- a/addons/calendar/models/calendar_attendee.py
+++ b/addons/calendar/models/calendar_attendee.py
@@ -34,14 +34,13 @@ class Attendee(models.Model):
     recurrence_id = fields.Many2one('calendar.recurrence', related='event_id.recurrence_id')
     # attendee
     partner_id = fields.Many2one('res.partner', 'Attendee', required=True, readonly=True)
-    email = fields.Char('Email', related='partner_id.email', help="Email of Invited Person")
-    phone = fields.Char('Phone', related='partner_id.phone', help="Phone number of Invited Person")
+    email = fields.Char('Email', related='partner_id.email')
+    phone = fields.Char('Phone', related='partner_id.phone')
     common_name = fields.Char('Common name', compute='_compute_common_name', store=True)
     access_token = fields.Char('Invitation Token', default=_default_access_token)
     mail_tz = fields.Selection(_tz_get, compute='_compute_mail_tz', help='Timezone used for displaying time in the mail template')
     # state
-    state = fields.Selection(STATE_SELECTION, string='Status', readonly=True, default='needsAction',
-                             help="Status of the attendee's participation")
+    state = fields.Selection(STATE_SELECTION, string='Status', readonly=True, default='needsAction')
     availability = fields.Selection(
         [('free', 'Available'), ('busy', 'Busy')], 'Available/Busy', readonly=True)
 

--- a/addons/calendar/models/calendar_event.py
+++ b/addons/calendar/models/calendar_event.py
@@ -100,7 +100,7 @@ class Meeting(models.Model):
     user_id = fields.Many2one('res.users', 'Organizer', default=lambda self: self.env.user)
     partner_id = fields.Many2one(
         'res.partner', string='Scheduled by', related='user_id.partner_id', readonly=True)
-    location = fields.Char('Location', tracking=True, help="Location of Event")
+    location = fields.Char('Location', tracking=True)
     videocall_location = fields.Char('Meeting URL', compute='_compute_videocall_location', store=True, copy=True)
     access_token = fields.Char('Invitation Token', store=True, copy=False, index=True)
     videocall_source = fields.Selection([('discuss', 'Discuss'), ('custom', 'Custom')], compute='_compute_videocall_source')

--- a/addons/calendar/models/calendar_filter.py
+++ b/addons/calendar/models/calendar_filter.py
@@ -11,8 +11,7 @@ class Contacts(models.Model):
     user_id = fields.Many2one('res.users', 'Me', required=True, default=lambda self: self.env.user, index=True)
     partner_id = fields.Many2one('res.partner', 'Employee', required=True, index=True)
     active = fields.Boolean('Active', default=True)
-    partner_checked = fields.Boolean('Checked', default=True,
-        help="This field is used to know if the partner is checked in the filter of the calendar view for the user_id.")
+    partner_checked = fields.Boolean('Checked', default=True)  # used to know if the partner is checked in the filter of the calendar view for the user_id.
 
     _sql_constraints = [
         ('user_id_partner_id_unique', 'UNIQUE(user_id, partner_id)', 'A user cannot have the same contact twice.')
