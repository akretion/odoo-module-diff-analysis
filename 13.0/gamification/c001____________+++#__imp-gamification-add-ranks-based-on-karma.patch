PR: https://github.com/odoo/odoo/pull/

From: 9e082662af3f14fb28731f5e273a87f1bb8a5748
From: David Beguin
Date: 2019-02-07 12:13:28

Structural Changes: 11
Total Changes: 102

[IMP] gamification : add ranks based on karma

To encourage forum and slides users to be more active ranks are now added.
They are directly linked to karma. The more the user has karma the more his
rank will be high.

The default rank is Newbie, with 1 point of karma. Users with 0 karma are
considered as inactive on forum or slides. When a user reach a new rank
a mail is sent to him to congratulate him with his new rank.

To add a button in the mail template to allow users to go directly on
a website section (like forum or slides) simply override
get_gamification_redirection_data to add the target url.

Partial commit linked to eLearning project. Main specifications related
to gamification and user profile can be found on task 1922159 (PR #30514).
Main specifications related to eLearning can be found on task 1902304
(PR #29876).

================================= pseudo patch: =================================

--- a/addons/gamification/models/gamification_karma_rank.py
+++ b/addons/gamification/models/gamification_karma_rank.py
@@ -3,7 +3,52 @@
 
 from werkzeug.exceptions import Forbidden
 
+from odoo import api, tools, fields, models
+from odoo.tools.translate import html_translate
+
 
 class KarmaError(Forbidden):
     """ Karma-related error, used for forum and posts. """
     pass
+
+
+class KarmaRank(models.Model):
+    _name = 'gamification.karma.rank'
+    _description = 'Rank based on karma'
+    _order = 'karma_required'
+
+    name = fields.Text(string='Rank Name', translate=True, required=True)
+    description = fields.Html(string='Description', translate=html_translate, sanitize_attributes=False,)
+    description_reach_next = fields.Html(
+        string='Motivation phrase', translate=html_translate, sanitize_attributes=False,
+        help="Motivation phrase to reach next rank")
+    karma_required = fields.Integer(string='Required Karma', help='Minimum karma needed to reach this rank')
+    user_ids = fields.One2many('res.users', 'rank_id', string='Users', help="Users having this rank")
+    image = fields.Binary('Rank Icon')
+    image_medium = fields.Binary(
+        "Medium-sized rank icon",
+        help="Medium-sized icon of the rank. It is automatically "
+             "resized as a 128x128px image, with aspect ratio preserved. "
+             "Use this field in form views or some kanban views.")
+    image_small = fields.Binary(
+        "Small-sized rank icon",
+        help="Small-sized icon of the rank. It is automatically "
+             "resized as a 64x64px image, with aspect ratio preserved. "
+             "Use this field anywhere a small image is required.")
+
+    @api.model_create_multi
+    def create(self, values_list):
+        for vals in values_list:
+            tools.image_resize_images(vals)
+        res = super(KarmaRank, self).create(values_list)
+        users = self.env['res.users'].sudo().search([('karma', '>', 0)])
+        users._recompute_rank()
+        return res
+
+    @api.multi
+    def write(self, vals):
+        tools.image_resize_images(vals)
+        res = super(KarmaRank, self).write(vals)
+        users = self.env['res.users'].sudo().search([('karma', '>', 0)])
+        users._recompute_rank()
+        return res

--- a/addons/gamification/models/res_users.py
+++ b/addons/gamification/models/res_users.py
@@ -12,12 +12,8 @@ class Users(models.Model):
     gold_badge = fields.Integer('Gold badges count', compute="_get_user_badge_level")
     silver_badge = fields.Integer('Silver badges count', compute="_get_user_badge_level")
     bronze_badge = fields.Integer('Bronze badges count', compute="_get_user_badge_level")
-
-    @api.multi
-    def add_karma(self, karma):
-        for user in self:
-            user.karma += karma
-        return True
+    rank_id = fields.Many2one('gamification.karma.rank', 'Rank', index=False)
+    next_rank_id = fields.Many2one('gamification.karma.rank', 'Next Rank', index=False)
 
     @api.multi
     @api.depends('badge_ids')
@@ -42,3 +38,52 @@ class Users(models.Model):
         for (user_id, level, count) in self.env.cr.fetchall():
             # levels are gold, silver, bronze but fields have _badge postfix
             self.browse(user_id)['{}_badge'.format(level)] = count
+
+    @api.model_create_multi
+    def create(self, values_list):
+        res = super(Users, self).create(values_list)
+        res._recompute_rank()
+        return res
+
+    @api.multi
+    def write(self, vals):
+        if 'karma' in vals:
+            self._recompute_rank()
+        return super(Users, self).write(vals)
+
+    @api.multi
+    def add_karma(self, karma):
+        for user in self:
+            user.karma += karma
+        return True
+
+    def _rank_changed(self):
+        if self.rank_id.karma_required > 0:
+            template = self.env.ref('gamification.mail_template_data_new_rank_reached', raise_if_not_found=False)
+            if template:
+                template.send_mail(self.id, force_send=True, notif_layout='mail.mail_notification_light')
+
+    def _recompute_rank(self):
+        """
+        The caller should filter the users on karma > 0 before calling this method
+        to avoid looping on every single users
+        """
+        ranks = [{'rank': rank, 'karma_required': rank.karma_required} for rank in
+                 self.env['gamification.karma.rank'].search([], order="karma_required DESC")]
+        for user in self:
+            for i in range(0, len(ranks)):
+                if user.karma >= ranks[i]['karma_required']:
+                    if user.rank_id != ranks[i]['rank']:
+                        user.rank_id = ranks[i]['rank'].id
+                        user.next_rank_id = ranks[i - 1]['rank'].id if i > 0 else False
+                        user._rank_changed()
+                    break
+
+    def get_gamification_redirection_data(self):
+        """
+        Hook for other modules to add redirect button(s) in new rank reached mail
+        Must return a list of dictionnary including url and label.
+        E.g. return [{'url': '/forum', label: 'Go to Forum'}]
+        """
+        self.ensure_one()
+        return []
