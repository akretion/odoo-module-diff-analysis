PR: https://github.com/odoo/odoo/pull/186906

From: 9144eb051538d5a92d403e1ad9c635ce39e090ec
From: Gorash
Date: 2024-11-14 10:39:02

Breaking data model changes scores: del:7 + add:0, change matches:
-    _inherit = ['account.move.line']
-    _inherit = ['account.move']
-    _inherit = ["hr.expense"]
-    _inherit = ["hr.expense.sheet"]
-    _inherit = ["hr.expense.split"]
-    _inherit = ['product.template']
-    _inherit = ['sale.order']

Total Changes: 14

[REV] *: Restore the model `_name`

Following internal discussions, the python typing and inheritance task is
canceled. The use of the class name instead of '_name' was done to allow
notations such as `partner_id = fields.Many2one[base.ResParter](string='Partner')`.
Since this notation is canceled, we put `_name` back (although the class
name is sufficient).

Partial revert:
https://github.com/odoo/enterprise/pull/69762
https://github.com/odoo/odoo/pull/178200

closes odoo/odoo#186906

Related: odoo/enterprise#73643
Signed-off-by: Raphael Collet <rco@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_expense/models/account_move_line.py
+++ b/addons/sale_expense/models/account_move_line.py
@@ -4,7 +4,7 @@ from odoo import models
 
 
 class AccountMoveLine(models.Model):
-    _inherit = ['account.move.line']
+    _inherit = 'account.move.line'
 
     def _sale_can_be_reinvoice(self):
         """ determine if the generated analytic line should be reinvoiced or not.
@@ -44,7 +44,7 @@ class AccountMoveLine(models.Model):
 
 
 class AccountMove(models.Model):
-    _inherit = ['account.move']
+    _inherit = 'account.move'
 
     def _reverse_moves(self, default_values_list=None, cancel=False):
         self.expense_sheet_id._sale_expense_reset_sol_quantities()

--- a/addons/sale_expense/models/hr_expense.py
+++ b/addons/sale_expense/models/hr_expense.py
@@ -5,7 +5,7 @@ from odoo import api, fields, models
 
 
 class HrExpense(models.Model):
-    _inherit = ["hr.expense"]
+    _inherit = "hr.expense"
 
     sale_order_id = fields.Many2one('sale.order', compute='_compute_sale_order_id', store=True, string='Customer to Reinvoice', readonly=False, tracking=True,
         # NOTE: only confirmed SO can be selected, but this domain in activated throught the name search with the `sale_expense_all_order`

--- a/addons/sale_expense/models/hr_expense_sheet.py
+++ b/addons/sale_expense/models/hr_expense_sheet.py
@@ -5,7 +5,7 @@ from odoo import fields, models, _
 
 
 class HrExpenseSheet(models.Model):
-    _inherit = ["hr.expense.sheet"]
+    _inherit = "hr.expense.sheet"
 
     sale_order_count = fields.Integer(compute='_compute_sale_order_count')
 

--- a/addons/sale_expense/models/hr_expense_split.py
+++ b/addons/sale_expense/models/hr_expense_split.py
@@ -5,7 +5,7 @@ from odoo import fields, models, api
 
 
 class HrExpenseSplit(models.TransientModel):
-    _inherit = ["hr.expense.split"]
+    _inherit = "hr.expense.split"
 
     def default_get(self, fields):
         result = super(HrExpenseSplit, self).default_get(fields)

--- a/addons/sale_expense/models/product_template.py
+++ b/addons/sale_expense/models/product_template.py
@@ -5,7 +5,7 @@ from odoo import api, models, fields, _
 
 
 class ProductTemplate(models.Model):
-    _inherit = ['product.template']
+    _inherit = 'product.template'
 
     expense_policy_tooltip = fields.Char(compute='_compute_expense_policy_tooltip')
 

--- a/addons/sale_expense/models/sale_order.py
+++ b/addons/sale_expense/models/sale_order.py
@@ -6,7 +6,7 @@ from odoo.osv import expression
 
 
 class SaleOrder(models.Model):
-    _inherit = ['sale.order']
+    _inherit = 'sale.order'
 
     expense_ids = fields.One2many('hr.expense', 'sale_order_id', string='Expenses', domain=[('state', '=', 'done')], readonly=True, copy=False)
     expense_count = fields.Integer("# of Expenses", compute='_compute_expense_count', compute_sudo=True)
