PR: https://github.com/odoo/odoo/pull/

From: a934b9e1ba4031e1bf0689d5cee6feea09424e8b
From: Josse Colpaert
Date: 2015-09-09 15:11:54

Structural Changes: 4
Total Changes: 40

[IMP] delivery: add fields for retrieving the bulk weight and the weight of the packages of a picking

As the transporter interfaces will put a label on every package,
it is in handy to have a field with the list of the final packages
(and their weights) treated in  the picking.
We give a weight for the products that are not in a package also(bulk).
We only put the weight on the package in the views.

The weights in the product form views should appear entirely or not in
product / product templates (only when only 1 variant)
(attrs was only on the field, not label, ...)

The digits= for the weights are not needed as there is a decimal precision
on these fields.

================================= pseudo patch: =================================

--- a/addons/delivery/models/stock_picking.py
+++ b/addons/delivery/models/stock_picking.py
@@ -6,6 +6,22 @@ from openerp.exceptions import UserError
 
 import openerp.addons.decimal_precision as dp
 
+class StockQuantPackage(models.Model):
+    _inherit = "stock.quant.package"
+
+    @api.one
+    @api.depends('quant_ids', 'children_ids')
+    def _compute_weight(self):
+        weight = 0
+        for quant in self.quant_ids:
+            weight += quant.qty * quant.product_id.weight
+        for pack in self.children_ids:
+            pack._compute_weight()
+            weight += pack.weight
+        self.weight = weight
+
+    weight = fields.Float(compute='_compute_weight')
+
 
 class StockPicking(models.Model):
     _inherit = 'stock.picking'
@@ -14,6 +30,28 @@ class StockPicking(models.Model):
         uom_categ_id = self.env.ref('product.product_uom_categ_kgm').id
         return self.env['product.uom'].search([('category_id', '=', uom_categ_id), ('factor', '=', 1)], limit=1)
 
+    @api.one
+    @api.depends('pack_operation_ids')
+    def _compute_packages(self):
+        self.ensure_one()
+        packs = set()
+        for packop in self.pack_operation_ids:
+            if packop.result_package_id:
+                packs.add(packop.result_package_id.id)
+            elif packop.package_id and not packop.product_id:
+                packs.add(packop.package_id.id)
+        self.package_ids = list(packs)
+
+    @api.one
+    @api.depends('pack_operation_ids')
+    def _compute_bulk_weight(self):
+        weight = 0.0
+        uom_obj = self.env['product.uom']
+        for packop in self.pack_operation_ids:
+            if packop.product_id and not packop.result_package_id:
+                weight += uom_obj._compute_qty_obj(packop.product_uom_id , packop.product_qty, packop.product_id.uom_id) * packop.product_id.weight
+        self.weight_bulk = weight
+
     carrier_price = fields.Float(string="Shipping Cost", readonly=True)
     delivery_type = fields.Selection(related='carrier_id.delivery_type', readonly=True)
     carrier_id = fields.Many2one("delivery.carrier", string="Carrier")
@@ -22,6 +60,8 @@ class StockPicking(models.Model):
     carrier_tracking_ref = fields.Char(string='Carrier Tracking Ref', copy=False)
     number_of_packages = fields.Integer(string='Number of Packages', copy=False)
     weight_uom_id = fields.Many2one('product.uom', string='Unit of Measure', required=True, readonly="1", help="Unit of measurement for Weight", default=_default_uom)
+    package_ids = fields.Many2many('stock.quant.package', compute='_compute_packages', string='Packages')
+    weight_bulk = fields.Float('Bulk Weight', compute='_compute_bulk_weight')
 
     @api.depends('product_id', 'move_lines')
     def _cal_weight(self):
