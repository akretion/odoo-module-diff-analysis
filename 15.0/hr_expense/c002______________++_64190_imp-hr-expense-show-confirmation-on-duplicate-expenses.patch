PR: https://github.com/odoo/odoo/pull/64190

From: 278f5a6995ab77d9692ab7bb92dcc1439bcb5b2e
From: Kevin Baptiste
Date: 2021-03-04 12:54:34

Structural Changes: 4
Total Changes: 63

[IMP] hr_expense: show confirmation on duplicate expenses

Display a confirmation dialog when a user creates duplicate expenses.

Two expenses (or more) are considered duplicates when they share the same
date, amount, product, employee, company and currency.

closes odoo/odoo#64190

Taskid: 2368636
Related: odoo/upgrade#2061
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_expense/models/hr_expense.py
+++ b/addons/hr_expense/models/hr_expense.py
@@ -98,6 +98,8 @@ class HrExpense(models.Model):
         ('refused', 'Refused')
     ], compute='_compute_state', string='Status', copy=False, index=True, readonly=True, store=True, default='draft', help="Status of the expense.")
     sheet_id = fields.Many2one('hr.expense.sheet', string="Expense Report", domain="[('employee_id', '=', employee_id), ('company_id', '=', company_id)]", readonly=True, copy=False)
+    approved_by = fields.Many2one('res.users', string='Approved By', related='sheet_id.user_id')
+    approved_on = fields.Datetime(string='Approved On', related='sheet_id.approval_date')
     reference = fields.Char("Bill Reference")
     is_refused = fields.Boolean("Explicitly Refused by manager or accountant", readonly=True, copy=False)
 
@@ -105,6 +107,8 @@ class HrExpense(models.Model):
     is_ref_editable = fields.Boolean("Reference Is Editable By Current User", compute='_compute_is_ref_editable')
     product_has_cost =  fields.Boolean("Is product with non zero cost selected", compute='_compute_product_has_cost')
     same_currency = fields.Boolean("Is currency_id different from the company_currency_id", compute='_compute_same_currency')
+    duplicate_expense_ids = fields.Many2many('hr.expense', compute='_compute_duplicate_expense_ids')
+
     sample = fields.Boolean()
     label_total_amount_company = fields.Char(compute='_compute_label_total_amount_company')
     label_convert_rate = fields.Char(compute='_compute_label_convert_rate')
@@ -234,6 +238,35 @@ class HrExpense(models.Model):
             for expense in self:
                 expense.employee_id = self.env.user.with_company(expense.company_id).employee_id
 
+    @api.depends('employee_id', 'product_id', 'total_amount')
+    def _compute_duplicate_expense_ids(self):
+        self.duplicate_expense_ids = [(5, 0, 0)]
+
+        expenses = self.filtered(lambda e: e.employee_id and e.product_id and e.total_amount)
+        if expenses.ids:
+            duplicates_query = """
+              SELECT ARRAY_AGG(DISTINCT he.id)
+                FROM hr_expense AS he
+                JOIN hr_expense AS ex ON he.employee_id = ex.employee_id
+                                     AND he.product_id = ex.product_id
+                                     AND he.date = ex.date
+                                     AND he.total_amount = ex.total_amount
+                                     AND he.company_id = ex.company_id
+                                     AND he.currency_id = ex.currency_id
+               WHERE ex.id in %(expense_ids)s
+               GROUP BY he.employee_id, he.product_id, he.date, he.total_amount, he.company_id, he.currency_id
+              HAVING COUNT(he.id) > 1
+            """
+            self.env.cr.execute(duplicates_query, {
+                'expense_ids': tuple(expenses.ids),
+            })
+            duplicates = [x[0] for x in self.env.cr.fetchall()]
+
+            for ids in duplicates:
+                exp = expenses.filtered(lambda e: e.id in ids)
+                exp.duplicate_expense_ids = [(6, 0, ids)]
+                expenses = expenses - exp
+
     @api.onchange('product_id', 'date', 'account_id')
     def _onchange_product_id_date_account_id(self):
         rec = self.env['account.analytic.default'].sudo().account_get(
@@ -364,7 +397,7 @@ Or send your receipts at <a href="mailto:%(email)s?subject=Lunch%%20with%%20cust
         sheet = self.env['hr.expense.sheet'].create({
             'company_id': self.company_id.id,
             'employee_id': self[0].employee_id.id,
-            'name': todo[0].name if len(todo) == 1 else '',
+            'name': todo[0].name if len(todo) == 1 else _('Expense Report'),
             'expense_line_ids': [(6, 0, todo.ids)]
         })
         return sheet
@@ -388,6 +421,14 @@ Or send your receipts at <a href="mailto:%(email)s?subject=Lunch%%20with%%20cust
         res['context'] = {'default_res_model': 'hr.expense', 'default_res_id': self.id}
         return res
 
+    def action_approve_duplicates(self):
+        root = self.env['ir.model.data'].xmlid_to_res_id("base.partner_root")
+        for expense in self.duplicate_expense_ids:
+            expense.message_post(
+                body=_('%(user)s confirms this expense is not a duplicate with similar expense.', user=self.env.user.name),
+                author_id=root
+            )
+
     # ----------------------------------------
     # Business
     # ----------------------------------------
@@ -855,6 +896,7 @@ class HrExpenseSheet(models.Model):
     is_multiple_currency = fields.Boolean("Handle lines with different currencies", compute='_compute_is_multiple_currency')
     can_reset = fields.Boolean('Can Reset', compute='_compute_can_reset')
     can_approve = fields.Boolean('Can Approve', compute='_compute_can_approve')
+    approval_date = fields.Datetime('Approval Date', readonly=True)
 
     _sql_constraints = [
         ('journal_id_required_posted', "CHECK((state IN ('post', 'done') AND journal_id IS NOT NULL) OR (state NOT IN ('post', 'done')))", 'The journal must be set on posted expense'),
@@ -1003,7 +1045,7 @@ class HrExpenseSheet(models.Model):
         self.write({'state': 'submit'})
         self.activity_update()
 
-    def approve_expense_sheets(self):
+    def _check_can_approve(self):
         if not self.user_has_groups('hr_expense.group_hr_expense_team_approver'):
             raise UserError(_("Only Managers and HR Officers can approve expenses"))
         elif not self.user_has_groups('hr_expense.group_hr_expense_manager'):
@@ -1015,8 +1057,21 @@ class HrExpenseSheet(models.Model):
             if not self.env.user in current_managers and not self.user_has_groups('hr_expense.group_hr_expense_user') and self.employee_id.expense_manager_id != self.env.user:
                 raise UserError(_("You can only approve your department expenses"))
 
+    def approve_expense_sheets(self):
+        self._check_can_approve()
+
+        duplicates = self.expense_line_ids.duplicate_expense_ids.filtered(lambda exp: exp.state in ['approved', 'done'])
+        if duplicates:
+            action = self.env["ir.actions.act_window"]._for_xml_id('hr_expense.hr_expense_approve_duplicate_action')
+            action['context'] = {'default_sheet_ids': self.ids, 'default_expense_ids': duplicates.ids}
+            return action
+        self._do_approve()
+
+    def _do_approve(self):
+        self._check_can_approve()
+
         responsible_id = self.user_id.id or self.env.user.id
-        self.write({'state': 'approve', 'user_id': responsible_id})
+        self.write({'state': 'approve', 'user_id': responsible_id, 'approval_date': fields.Datetime.now()})
         self.activity_update()
 
     def paid_expense_sheets(self):
@@ -1043,7 +1098,7 @@ class HrExpenseSheet(models.Model):
         if not self.can_reset:
             raise UserError(_("Only HR Officers or the concerned employee can reset to draft."))
         self.mapped('expense_line_ids').write({'is_refused': False})
-        self.write({'state': 'draft'})
+        self.write({'state': 'draft', 'approval_date': False})
         self.activity_update()
         return True
 
