PR: https://github.com/odoo/odoo/pull/79599

From: 07c872d67441f89b6195fe4cc3739709d5f83808
From: Thibault Delavall√©e
Date: 2021-11-10 14:30:50

Structural Changes: 2
Total Changes: 32

[IMP] gamification: remove m2m display

PURPOSE

Gamification display is slow when being heavily used. Indeed the m2m towards
users is used in kanban and form views, leading to a huge data fetch when
being used in production environment with lots of users.

SPECIFICATIONS

Remove user_ids m2m from views. Indeed in some heavily used DBs you may have
more than 10K records in user_ids, leading to a huge m2m tags to display.

Replace it by an optimized count, used in

  * form view: as a stat button redirecting to participants of a challenge;
  * kanban view: a line (replacing the 11 first avatars) redirecting to
    participants of a challenge;

Task-2678295

Part-of: odoo/odoo#79599

================================= pseudo patch: =================================

--- a/addons/gamification/models/gamification_challenge.py
+++ b/addons/gamification/models/gamification_challenge.py
@@ -60,6 +60,7 @@ class Challenge(models.Model):
     _inherit = 'mail.thread'
     _order = 'end_date, start_date, name, id'
 
+    # description
     name = fields.Char("Challenge Name", required=True, translate=True)
     description = fields.Text("Description", translate=True)
     state = fields.Selection([
@@ -71,10 +72,11 @@ class Challenge(models.Model):
     manager_id = fields.Many2one(
         'res.users', default=lambda self: self.env.uid,
         string="Responsible", help="The user responsible for the challenge.",)
-
+    # members
     user_ids = fields.Many2many('res.users', 'gamification_challenge_users_rel', string="Users", help="List of users participating to the challenge")
     user_domain = fields.Char("User domain", help="Alternative to a list of users")
-
+    user_count = fields.Integer('# Users', compute='_compute_user_count')
+    # periodicity
     period = fields.Selection([
             ('once', "Non recurring"),
             ('daily', "Daily"),
@@ -129,6 +131,26 @@ class Challenge(models.Model):
     ], string="Appears in", required=True, default='hr',
        help="Define the visibility of the challenge through menus")
 
+    @api.depends('user_ids')
+    def _compute_user_count(self):
+        mapped_data = {}
+        if self.ids:
+            query = """
+                SELECT gamification_challenge_id, count(res_users_id)
+                  FROM gamification_challenge_users_rel rel
+             LEFT JOIN res_users users
+                    ON users.id=rel.res_users_id AND users.active = TRUE
+                 WHERE gamification_challenge_id IN %s
+              GROUP BY gamification_challenge_id
+            """
+            self.env.cr.execute(query, [tuple(self.ids)])
+            mapped_data = dict(
+                (challenge_id, user_count)
+                for challenge_id, user_count in self.env.cr.fetchall()
+            )
+        for challenge in self:
+            challenge.user_count = mapped_data.get(challenge.id, 0)
+
     REPORT_OFFSETS = {
         'daily': timedelta(days=1),
         'weekly': timedelta(days=7),
@@ -315,6 +337,12 @@ class Challenge(models.Model):
             challenge.report_progress()
         return True
 
+    def action_view_users(self):
+        """ Redirect to the participants (users) list. """
+        action = self.env["ir.actions.actions"]._for_xml_id("base.action_res_users")
+        action['domain'] = [('id', 'in', self.user_ids.ids)]
+        return action
+
     ##### Automatic actions #####
 
     def _generate_goals_from_challenge(self):
