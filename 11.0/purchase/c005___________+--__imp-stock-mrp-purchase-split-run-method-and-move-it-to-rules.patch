PR: https://github.com/odoo/odoo/pull/

From: c914df5a369eb49e4e72a698c0811200b5825f22
From: amoyaux
Date: 2017-09-08 15:08:06

Structural Changes: 5
Total Changes: 172

[IMP] stock,mrp,purchase: split _run method and move it to rules

Previously mrp, stock and purchase used _run methon on procurement
group and start with a if checking for the action type. This commit
instead launch a specific method depending the rule's action's type

Also _run method and their submethod used in procurement group
was always called with a rule. Thus we choose to move this method
on the rule object himself.

================================= pseudo patch: =================================

--- a/addons/purchase/models/purchase.py
+++ b/addons/purchase/models/purchase.py
@@ -747,6 +747,12 @@ class PurchaseOrderLine(models.Model):
         else:
             return datetime.today() + relativedelta(days=seller.delay if seller else 0)
 
+    def _merge_in_existing_line(self, product_id, product_qty, product_uom, location_id, name, origin, values):
+        """ This function purpose is to be override with the purpose to forbide _run_buy  method
+        to merge a new po line in an existing one.
+        """
+        return True
+
     @api.onchange('product_id')
     def onchange_product_id(self):
         result = {}
@@ -842,62 +848,62 @@ class PurchaseOrderLine(models.Model):
             self.product_qty = 1.0
 
 
-class ProcurementRule(models.Model):
-    _inherit = 'procurement.rule'
+class ProcurementGroup(models.Model):
+    _inherit = 'procurement.group'
 
-    action = fields.Selection(selection_add=[('buy', 'Buy')])
+    @api.model
+    def _get_exceptions_domain(self):
+        return super(ProcurementGroup, self)._get_exceptions_domain() + [('created_purchase_line_id', '=', False)]
 
 
-class ProcurementGroup(models.Model):
-    _inherit = 'procurement.group'
+class ProcurementRule(models.Model):
+    _inherit = 'procurement.rule'
+    action = fields.Selection(selection_add=[('buy', 'Buy')])
 
     @api.multi
-    def _run(self, values, rule, doraise=True):
-        if rule.action == 'buy':
-            cache = {}
-            suppliers = values['product_id'].seller_ids\
-                .filtered(lambda r: (not r.company_id or r.company_id == values['company_id']) and (not r.product_id or r.product_id == values['product_id']))
-            if not suppliers:
-                msg = _('No vendor associated to product %s. Unable to generate the purchase order.') % (values['product_id'].display_name,)
-                if doraise:
-                    raise UserError(msg)
-                else:
-                    self._log_next_activity(values['product_id'], msg)
-                    return False
-            supplier = self._make_po_select_supplier(values, rule, suppliers)
-            partner = supplier.name
+    def _run_buy(self, product_id, product_qty, product_uom, location_id, name, origin, values):
+        cache = {}
+        suppliers = product_id.seller_ids\
+            .filtered(lambda r: (not r.company_id or r.company_id == values['company_id']) and (not r.product_id or r.product_id == product_id))
+        if not suppliers:
+            msg = _('No vendor associated to product %s. Unable to generate the purchase order.') % (product_id.display_name,)
+            raise UserError(msg)
 
-            domain = self._make_po_get_domain(values, rule, partner)
+        supplier = self._make_po_select_supplier(values, suppliers)
+        partner = supplier.name
 
-            if domain in cache:
-                po = cache[domain]
-            else:
-                po = self.env['purchase.order'].search([dom for dom in domain])
-                po = po[0] if po else False
-                cache[domain] = po
-            if not po:
-                vals = self._prepare_purchase_order(values, rule, partner)
-                po = self.env['purchase.order'].create(vals)
-                cache[domain] = po
-            elif not po.origin or values['origin'] not in po.origin.split(', '):
-                if po.origin:
-                    if values['origin']:
-                        po.write({'origin': po.origin + ', ' + values['origin']})
-                    else:
-                        po.write({'origin': po.origin})
+        domain = self._make_po_get_domain(values, partner)
+
+        if domain in cache:
+            po = cache[domain]
+        else:
+            po = self.env['purchase.order'].search([dom for dom in domain])
+            po = po[0] if po else False
+            cache[domain] = po
+        if not po:
+            vals = self._prepare_purchase_order(product_id, product_qty, product_uom, origin, values, partner)
+            po = self.env['purchase.order'].create(vals)
+            cache[domain] = po
+        elif not po.origin or origin not in po.origin.split(', '):
+            if po.origin:
+                if origin:
+                    po.write({'origin': po.origin + ', ' + origin})
                 else:
-                    po.write({'origin': values['origin']})
-
-            # Create Line
-            po_line = False
-            for line in po.order_line:
-                if line.product_id == values['product_id'] and line.product_uom == values['product_id'].uom_po_id:
-                    procurement_uom_po_qty = values['product_uom']._compute_quantity(values['product_qty'], values['product_id'].uom_po_id)
-                    seller = values['product_id']._select_seller(
+                    po.write({'origin': po.origin})
+            else:
+                po.write({'origin': origin})
+
+        # Create Line
+        po_line = False
+        for line in po.order_line:
+            if line.product_id == product_id and line.product_uom == product_id.uom_po_id:
+                if line._merge_in_existing_line(product_id, product_qty, product_uom, location_id, name, origin, values):
+                    procurement_uom_po_qty = product_uom._compute_quantity(product_qty, product_id.uom_po_id)
+                    seller = product_id._select_seller(
                         partner_id=partner,
-                        quantity = line.product_qty + procurement_uom_po_qty,
-                        date = po.date_order and po.date_order[:10],
-                        uom_id=values['product_id'].uom_po_id)
+                        quantity=line.product_qty + procurement_uom_po_qty,
+                        date=po.date_order and po.date_order[:10],
+                        uom_id=product_id.uom_po_id)
 
                     price_unit = self.env['account.tax']._fix_tax_included_price(seller.price, line.product_id.supplier_taxes_id, line.taxes_id) if seller else 0.0
                     if price_unit and seller and po.currency_id and seller.currency_id != po.currency_id:
@@ -909,50 +915,48 @@ class ProcurementGroup(models.Model):
                         'move_dest_ids': [(4, x.id) for x in values.get('move_dest_ids', [])]
                     })
                     break
-            if not po_line:
-                vals = self._prepare_purchase_order_line(values, rule, po, supplier)
-                self.env['purchase.order.line'].create(vals)
-            return True
-        return super(ProcurementGroup, self)._run(values, rule, doraise=True)
+        if not po_line:
+            vals = self._prepare_purchase_order_line(product_id, product_qty, product_uom, values, po, supplier)
+            self.env['purchase.order.line'].create(vals)
 
-    def _get_purchase_schedule_date(self, values, rule):
+    def _get_purchase_schedule_date(self, values):
         """Return the datetime value to use as Schedule Date (``date_planned``) for the
            Purchase Order Lines created to satisfy the given procurement. """
-        procurement_date_planned = datetime.strptime(values['date_planned'], DEFAULT_SERVER_DATETIME_FORMAT)
+        procurement_date_planned = fields.Datetime.from_string(values['date_planned'])
         schedule_date = (procurement_date_planned - relativedelta(days=values['company_id'].po_lead))
         return schedule_date
 
-    def _get_purchase_order_date(self, values, rule, partner, schedule_date):
+    def _get_purchase_order_date(self, product_id, product_qty, product_uom, values, partner, schedule_date):
         """Return the datetime value to use as Order Date (``date_order``) for the
            Purchase Order created to satisfy the given procurement. """
-        seller = values['product_id']._select_seller(
+        seller = product_id._select_seller(
             partner_id=partner,
-            quantity=values['product_qty'],
+            quantity=product_qty,
             date=fields.Date.to_string(schedule_date),
-            uom_id=values['product_uom'])
+            uom_id=product_uom)
 
         return schedule_date - relativedelta(days=int(seller.delay))
 
-    @api.model
-    def _prepare_purchase_order_line(self, values, rule, po, supplier):
-        procurement_uom_po_qty = values['product_uom']._compute_quantity(values['product_qty'], values['product_id'].uom_po_id)
-        seller = values['product_id']._select_seller(
+    @api.multi
+    def _prepare_purchase_order_line(self, product_id, product_qty, product_uom, values, po, supplier):
+        procurement_uom_po_qty = product_uom._compute_quantity(product_qty, product_id.uom_po_id)
+        seller = product_id._select_seller(
             partner_id=supplier.name,
             quantity=procurement_uom_po_qty,
             date=po.date_order and po.date_order[:10],
-            uom_id=values['product_id'].uom_po_id)
+            uom_id=product_id.uom_po_id)
 
-        taxes = values['product_id'].supplier_taxes_id
+        taxes = product_id.supplier_taxes_id
         fpos = po.fiscal_position_id
         taxes_id = fpos.map_tax(taxes) if fpos else taxes
         if taxes_id:
             taxes_id = taxes_id.filtered(lambda x: x.company_id.id == values['company_id'].id)
 
-        price_unit = self.env['account.tax']._fix_tax_included_price(seller.price, values['product_id'].supplier_taxes_id, taxes_id) if seller else 0.0
+        price_unit = self.env['account.tax']._fix_tax_included_price(seller.price, product_id.supplier_taxes_id, taxes_id) if seller else 0.0
         if price_unit and seller and po.currency_id and seller.currency_id != po.currency_id:
             price_unit = seller.currency_id.compute(price_unit, po.currency_id)
 
-        product_lang = values['product_id'].with_context({
+        product_lang = product_id.with_context({
             'lang': supplier.name.lang,
             'partner_id': supplier.name.id,
         })
@@ -965,8 +969,8 @@ class ProcurementGroup(models.Model):
         return {
             'name': name,
             'product_qty': procurement_uom_po_qty,
-            'product_id': values['product_id'].id,
-            'product_uom': values['product_id'].uom_po_id.id,
+            'product_id': product_id.id,
+            'product_uom': product_id.uom_po_id.id,
             'price_unit': price_unit,
             'date_planned': date_planned,
             'orderpoint_id': values.get('orderpoint_id', False) and values.get('orderpoint_id').id,
@@ -975,56 +979,50 @@ class ProcurementGroup(models.Model):
             'move_dest_ids': [(4, x.id) for x in values.get('move_dest_ids', [])],
         }
 
-    def _prepare_purchase_order(self, values, rule, partner):
-        schedule_date = self._get_purchase_schedule_date(values, rule)
-        purchase_date = self._get_purchase_order_date(values, rule, partner, schedule_date)
+    def _prepare_purchase_order(self, product_id, product_qty, product_uom, origin, values, partner):
+        schedule_date = self._get_purchase_schedule_date(values)
+        purchase_date = self._get_purchase_order_date(product_id, product_qty, product_uom, values, partner, schedule_date)
         fpos = self.env['account.fiscal.position'].with_context(company_id=values['company_id'].id).get_fiscal_position(partner.id)
 
-        gpo = rule.group_propagation_option
-        group = (gpo == 'fixed' and rule.group_id.id) or \
+        gpo = self.group_propagation_option
+        group = (gpo == 'fixed' and self.group_id.id) or \
                 (gpo == 'propagate' and values['group_id'].id) or False
 
         return {
             'partner_id': partner.id,
-            'picking_type_id': rule.picking_type_id.id,
+            'picking_type_id': self.picking_type_id.id,
             'company_id': values['company_id'].id,
             'currency_id': partner.property_purchase_currency_id.id or self.env.user.company_id.currency_id.id,
             'dest_address_id': values.get('partner_dest_id', False) and values['partner_dest_id'].id,
-            'origin': values['origin'],
+            'origin': origin,
             'payment_term_id': partner.property_supplier_payment_term_id.id,
             'date_order': purchase_date.strftime(DEFAULT_SERVER_DATETIME_FORMAT),
             'fiscal_position_id': fpos,
             'group_id': group
         }
 
-    def _make_po_select_supplier(self, values, rule, suppliers):
+    def _make_po_select_supplier(self, values, suppliers):
         """ Method intended to be overridden by customized modules to implement any logic in the
             selection of supplier.
         """
         return suppliers[0]
 
-    def _make_po_get_domain(self, values, rule, partner):
-        domain = super(ProcurementGroup, self)._make_po_get_domain(values, partner)
-        gpo = rule.group_propagation_option
-        group = (gpo == 'fixed' and rule.group_id) or \
+    def _make_po_get_domain(self, values, partner):
+        domain = super(ProcurementRule, self)._make_po_get_domain(values, partner)
+        gpo = self.group_propagation_option
+        group = (gpo == 'fixed' and self.group_id) or \
                 (gpo == 'propagate' and values['group_id']) or False
 
         domain += (
             ('partner_id', '=', partner.id),
             ('state', '=', 'draft'),
-            ('picking_type_id', '=', rule.picking_type_id.id),
+            ('picking_type_id', '=', self.picking_type_id.id),
             ('company_id', '=', values['company_id'].id),
             )
         if group:
             domain += (('group_id', '=', group.id),)
-        if values.get('date_planned', False):
-            domain += (('date_planned', '=', values.get('date_planned')),)
         return domain
 
-    @api.model
-    def _get_exceptions_domain(self):
-        return super(ProcurementGroup, self)._get_exceptions_domain() + [('created_purchase_line_id', '=', False)]
-
 
 class ProductTemplate(models.Model):
     _name = 'product.template'
