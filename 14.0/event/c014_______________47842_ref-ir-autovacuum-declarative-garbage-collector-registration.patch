PR: https://github.com/odoo/odoo/pull/47842

From: c5d3a109f530cd0763a1c3860086b5b7abef1b64
From: Julien Castiaux
Date: 2020-05-19 13:38:19

Structural Changes: 1
Total Changes: 32

[REF] ir.autovacuum: declarative garbage collector registration

The ir.autovacuum model purpose is to run several garbage collecting
operations like removing files from the filestore when no attachment
references them anymore.

The precedent strategy to register new garbage collection tasks was to
override the `power_on` method and to imperatively execute a vacuum
cleaning method on a given model. All calls were executed in a single
SQL transaction without any error handling, meaning a single fail during
any call resulted in a complete failure of the entire vacuum cleaning
chain.

We introduce a new `@autovacuum` api decorator, its purpose it to
register garbage collecting methods that will be safely executed in
their own transaction by the vacuum cleaner. In order to ensure this
new strategy is used, we deprecate `power_on` extensions.

By the way, garbage-collecting methods can be quite heavy and we don't
want users to directly call them. We now ensure they are private.

closes odoo/odoo#47842

Task: 2154079
Signed-off-by: Raphael Collet (rco) <rco@openerp.com>
Co-authored-by: Raphael Collet <rco@odoo.com>
Co-authored-by: Olivier Dony <odo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/event/models/__init__.py
+++ b/addons/event/models/__init__.py
@@ -9,4 +9,3 @@ from . import event_tag
 from . import event_ticket
 from . import res_config_settings
 from . import res_partner
-from . import ir_autovacuum

--- a/addons/event/models/event_event.py
+++ b/addons/event/models/event_event.py
@@ -496,3 +496,13 @@ class EventEvent(models.Model):
 
             result[event.id] = cal.serialize().encode('utf-8')
         return result
+
+    @api.autovacuum
+    def _gc_mark_events_done(self):
+        """ move every ended events in the next 'ended stage' """
+        ended_events = self.env['event.event'].search([
+            ('date_end', '<', fields.Datetime.now()),
+            ('stage_id.pipe_end', '=', False),
+        ])
+        if ended_events:
+            ended_events.action_set_done()

--- a/addons/event/models/ir_autovacuum.py
+++ b/None
@@ -1,21 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-from odoo import api, models, fields
-
-
-class AutoVacuum(models.AbstractModel):
-    _inherit = 'ir.autovacuum'
-
-    @api.model
-    def power_on(self, *args, **kwargs):
-        """
-        Cron which drags all events which end date is < now (= passed)
-        into the first next (by sequence) stage defined as "Ended"
-        (if they are not already in an ended stage)
-        """
-        ended_events = self.env['event.event'].search([('date_end', '<', fields.Datetime.now()), ('stage_id.pipe_end', '=', False)])
-
-        if ended_events:
-            ended_events.action_set_done()
-
-        return super(AutoVacuum, self).power_on(*args, **kwargs)
