PR: https://github.com/odoo/odoo/pull/165124

From: eedd0e9dc6bd7a29e41e6e27d1dc4cb8e9d08906
From: Florent de Labarre
Date: 2024-05-14 08:41:53

Structural Changes: 4
Total Changes: 35

[IMP] mrp: allow find kits product

Before this PR the field is_kits is not searchable.
Before this PR the field is_kits is computed sudo, it should not.

closes odoo/odoo#165124

X-original-commit: 0f28686587dc103ea50ecccb2ad227e27625e4d6
Signed-off-by: William Henrotin (whe) <whe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mrp/models/product.py
+++ b/addons/mrp/models/product.py
@@ -30,7 +30,7 @@ class ProductTemplate(models.Model):
         compute='_compute_used_in_bom_count', compute_sudo=False)
     mrp_product_qty = fields.Float('Manufactured', digits='Product Unit of Measure',
         compute='_compute_mrp_product_qty', compute_sudo=False)
-    is_kits = fields.Boolean(compute='_compute_is_kits', compute_sudo=False)
+    is_kits = fields.Boolean(compute='_compute_is_kits', search='_search_is_kits')
 
     def _compute_bom_count(self):
         for product in self:
@@ -38,11 +38,21 @@ class ProductTemplate(models.Model):
 
     def _compute_is_kits(self):
         domain = [('product_tmpl_id', 'in', self.ids), ('type', '=', 'phantom')]
-        bom_mapping = self.env['mrp.bom'].search_read(domain, ['product_tmpl_id'])
+        bom_mapping = self.env['mrp.bom'].sudo().search_read(domain, ['product_tmpl_id'])
         kits_ids = set(b['product_tmpl_id'][0] for b in bom_mapping)
         for template in self:
             template.is_kits = (template.id in kits_ids)
 
+    def _search_is_kits(self, operator, value):
+        assert operator in ('=', '!='), 'Unsupported operator'
+        bom_tmpl_query = self.env['mrp.bom'].sudo()._search(
+            [('company_id', 'in', [False] + self.env.companies.ids),
+             ('type', '=', 'phantom'), ('active', '=', True)])
+        neg = ''
+        if (operator == '=' and not value) or (operator == '!=' and value):
+            neg = 'not '
+        return [('id', neg + 'inselect', bom_tmpl_query.subselect('product_tmpl_id'))]
+
     def _compute_show_qty_status_button(self):
         super()._compute_show_qty_status_button()
         for template in self:
@@ -112,7 +122,7 @@ class ProductProduct(models.Model):
         compute='_compute_used_in_bom_count', compute_sudo=False)
     mrp_product_qty = fields.Float('Manufactured', digits='Product Unit of Measure',
         compute='_compute_mrp_product_qty', compute_sudo=False)
-    is_kits = fields.Boolean(compute="_compute_is_kits", compute_sudo=False)
+    is_kits = fields.Boolean(compute="_compute_is_kits", search='_search_is_kits')
 
     def _compute_bom_count(self):
         for product in self:
@@ -123,7 +133,7 @@ class ProductProduct(models.Model):
                        '|', ('product_id', 'in', self.ids),
                             '&', ('product_id', '=', False),
                                  ('product_tmpl_id', 'in', self.product_tmpl_id.ids)]
-        bom_mapping = self.env['mrp.bom'].search_read(domain, ['product_tmpl_id', 'product_id'])
+        bom_mapping = self.env['mrp.bom'].sudo().search_read(domain, ['product_tmpl_id', 'product_id'])
         kits_template_ids = set([])
         kits_product_ids = set([])
         for bom_data in bom_mapping:
@@ -134,6 +144,23 @@ class ProductProduct(models.Model):
         for product in self:
             product.is_kits = (product.id in kits_product_ids or product.product_tmpl_id.id in kits_template_ids)
 
+    def _search_is_kits(self, operator, value):
+        assert operator in ('=', '!='), 'Unsupported operator'
+        bom_tmpl_query = self.env['mrp.bom'].sudo()._search(
+            [('company_id', 'in', [False] + self.env.companies.ids),
+             ('active', '=', True),
+             ('type', '=', 'phantom'), ('product_id', '=', False)])
+        bom_product_query = self.env['mrp.bom'].sudo()._search(
+            [('company_id', 'in', [False] + self.env.companies.ids),
+             ('type', '=', 'phantom'), ('product_id', '!=', False)])
+        neg = ''
+        op = '|'
+        if (operator == '=' and not value) or (operator == '!=' and value):
+            neg = 'not '
+            op = '&'
+        return [op, ('product_tmpl_id', neg + 'inselect', bom_tmpl_query.subselect('product_tmpl_id')),
+                ('id', neg + 'inselect', bom_product_query.subselect('product_id'))]
+
     def _compute_show_qty_status_button(self):
         super()._compute_show_qty_status_button()
         for product in self:
