PR: https://github.com/odoo/odoo/pull/127442

From: b2870fcec4148e66598ed04f9576dbc76f741be1
From: Jitendra Prajapat
Date: 2024-01-15 11:09:59

Structural Changes: 3
Total Changes: 37

[IMP] mrp: added smartbutton in picking

Before this commit:
===================
- No smart button was available in the picking module to redirect to the
  associated manufacturing order.
- There was no relation established between manufacturing orders and picking
  after making changes to the routes, rules, and supply method
  (switching to "take from stock").

After this commit:
==================
- Implemented a smart button in the picking module that allows users to easily
  navigate to the related manufacturing order.
- Addressed the issue to ensure a proper relationship between manufacturing
  orders and picking, specifically adopting the "take from stock" approach in
  route-rule-supply method

task - 3391795

closes odoo/odoo#127442

Signed-off-by: Steve Van Essche <svs@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_production.py
+++ b/addons/mrp/models/mrp_production.py
@@ -494,6 +494,7 @@ class MrpProduction(models.Model):
             order.picking_ids = self.env['stock.picking'].search([
                 ('group_id', '=', order.procurement_group_id.id), ('group_id', '!=', False),
             ])
+            order.picking_ids |= order.move_raw_ids.move_orig_ids.picking_id
             order.delivery_count = len(order.picking_ids)
 
     @api.depends('product_uom_id', 'product_qty', 'product_id.uom_id')

--- a/addons/mrp/models/stock_picking.py
+++ b/addons/mrp/models/stock_picking.py
@@ -95,17 +95,53 @@ class StockPicking(models.Model):
     _inherit = 'stock.picking'
 
     has_kits = fields.Boolean(compute='_compute_has_kits')
+    production_count = fields.Integer(
+        "Count of MO generated",
+        compute='_compute_mrp_production_ids',
+        groups='mrp.group_mrp_user')
+
+    production_ids = fields.Many2many(
+        'mrp.production',
+        compute='_compute_mrp_production_ids',
+        groups='mrp.group_mrp_user')
 
     @api.depends('move_ids')
     def _compute_has_kits(self):
         for picking in self:
             picking.has_kits = any(picking.move_ids.mapped('bom_line_id'))
 
+    @api.depends('group_id')
+    def _compute_mrp_production_ids(self):
+        data = self.env['procurement.group'].read_group(
+            domain=[('id', 'in', self.group_id.ids)],
+            groupby=['id', 'mrp_production_ids'],
+            fields=['mrp_production_ids'])
+        groups_by_id = {group['id'].id: group['id'] for group in data}
+        for picking in self:
+            group = groups_by_id.get(picking.group_id.id, self.env['procurement.group'])
+            picking.production_ids = group.mrp_production_ids | picking.move_ids.move_dest_ids.raw_material_production_id
+            picking.production_count = len(picking.production_ids)
+
     def action_detailed_operations(self):
         action = super().action_detailed_operations()
         action['context']['has_kits'] = self.has_kits
         return action
 
+    def action_view_mrp_production(self):
+        self.ensure_one()
+        action = {
+            'res_model': 'mrp.production',
+            'type': 'ir.actions.act_window',
+            'domain': [('id', 'in', self.production_ids.ids)],
+            'view_mode': 'tree,form',
+        }
+        if self.production_count == 1:
+            action.update({
+                'view_mode': 'form',
+                'res_id': self.production_ids.id,
+            })
+        return action
+
     def _less_quantities_than_expected_add_documents(self, moves, documents):
         documents = super(StockPicking, self)._less_quantities_than_expected_add_documents(moves, documents)
 
