PR: https://github.com/odoo/odoo/pull/

From: 3a094f22941217932004ca53b94ae305712a4ac0
From: Thibault Delavall√©e
Date: 2019-12-05 15:21:28

Structural Changes: 4
Total Changes: 46

[REF] survey: on survey.user_input.line, rename value_suggested{_row} fields

PURPOSE

As new features are about to land in survey, notably live interactions [1]
and new survey building [2] performing a pre cleaning is necessary. In this
PR we clean survey models by: removing unnecessary fields, cleaning some code
and finally renaming models.

SPECIFICATIONS

A new naming for ``survey.question.answer`` has been recently introduced:
``suggested_answer_ids`` and ``matrix_row_ids``. In this commit we propagate
that naming to survey.user_input.line model. New naming is

  * ``suggested_answer_id``: one chosen value for single / multiple choice.
    It is also used for matrix columns as those indicates the value to give
    on a given row;
  * ``matrix_row_id``: the related row of the suggested answer for matrix
    questions;

It adds two benefits

  * it finishes by _id which is always a good idea for m2o fields;
  * it better indicates the use;

LINKS

[0] Related to Task ID 2061901 (survey models cleaning and preparation)
[1] Task ID 1972640 (live interactions)
[2] Task ID 2119587 (new frontend for building surveys)

PR #40765

================================= pseudo patch: =================================

--- a/addons/survey/models/survey_survey.py
+++ b/addons/survey/models/survey_survey.py
@@ -571,9 +571,9 @@ class Survey(models.Model):
                 if row_id == 0:
                     choice.append(answer_id)
                 else:
-                    domain_filter.extend(['|', ('value_suggested_row.id', '=', row_id), ('value_suggested.id', '=', answer_id)])
+                    domain_filter.extend(['|', ('matrix_row_id.id', '=', row_id), ('suggested_answer_id.id', '=', answer_id)])
             if choice:
-                domain_filter.insert(0, ('value_suggested.id', 'in', choice))
+                domain_filter.insert(0, ('suggested_answer_id.id', 'in', choice))
             else:
                 domain_filter = domain_filter[1:]
             input_lines = self.env['survey.user_input.line'].search(domain_filter)
@@ -622,8 +622,8 @@ class Survey(models.Model):
             comments = []
             answers = OrderedDict((label.id, {'text': label.value, 'count': 0, 'answer_id': label.id, 'answer_score': label.answer_score}) for label in question.suggested_answer_ids)
             for input_line in input_lines:
-                if input_line.answer_type == 'suggestion' and answers.get(input_line.value_suggested.id) and (not(current_filters) or input_line.user_input_id.id in current_filters):
-                    answers[input_line.value_suggested.id]['count'] += 1
+                if input_line.answer_type == 'suggestion' and answers.get(input_line.suggested_answer_id.id) and (not(current_filters) or input_line.user_input_id.id in current_filters):
+                    answers[input_line.suggested_answer_id.id]['count'] += 1
                 if input_line.answer_type == 'text' and (not(current_filters) or input_line.user_input_id.id in current_filters):
                     comments.append(input_line)
             result_summary = {'answers': list(answers.values()), 'comments': comments}
@@ -639,8 +639,8 @@ class Survey(models.Model):
             for cell in product(rows, answers):
                 res[cell] = 0
             for input_line in input_lines:
-                if input_line.answer_type == 'suggestion' and (not(current_filters) or input_line.user_input_id.id in current_filters) and input_line.value_suggested_row:
-                    res[(input_line.value_suggested_row.id, input_line.value_suggested.id)] += 1
+                if input_line.answer_type == 'suggestion' and (not(current_filters) or input_line.user_input_id.id in current_filters) and input_line.matrix_row_id:
+                    res[(input_line.matrix_row_id.id, input_line.suggested_answer_id.id)] += 1
                 if input_line.answer_type == 'text' and (not(current_filters) or input_line.user_input_id.id in current_filters):
                     comments.append(input_line)
             result_summary = {'answers': answers, 'rows': rows, 'result': res, 'comments': comments}
@@ -699,7 +699,7 @@ class Survey(models.Model):
             question_answer_correct = question.suggested_answer_ids.filtered(lambda answer: answer.is_correct)
             for user_answer in user_answers:
                 user_answer_lines_question = user_answer.user_input_line_ids.filtered(lambda line: line.question_id == question)
-                user_answer_correct = user_answer_lines_question.filtered(lambda line: line.answer_is_correct and not line.skipped).mapped('value_suggested')
+                user_answer_correct = user_answer_lines_question.filtered(lambda line: line.answer_is_correct and not line.skipped).mapped('suggested_answer_id')
                 user_answer_incorrect = user_answer_lines_question.filtered(lambda line: not line.answer_is_correct and not line.skipped)
 
                 if user_answer_correct == question_answer_correct:

--- a/addons/survey/models/survey_user.py
+++ b/addons/survey/models/survey_user.py
@@ -196,16 +196,16 @@ class SurveyUserInputLine(models.Model):
     value_date = fields.Date('Date answer')
     value_datetime = fields.Datetime('Datetime answer')
     value_free_text = fields.Text('Free Text answer')
-    value_suggested = fields.Many2one('survey.question.answer', string="Suggested answer")
-    value_suggested_row = fields.Many2one('survey.question.answer', string="Row answer")
+    suggested_answer_id = fields.Many2one('survey.question.answer', string="Suggested answer")
+    matrix_row_id = fields.Many2one('survey.question.answer', string="Row answer")
     answer_score = fields.Float('Score')
     answer_is_correct = fields.Boolean('Correct', compute='_compute_answer_is_correct')
 
-    @api.depends('value_suggested', 'question_id')
+    @api.depends('suggested_answer_id', 'question_id')
     def _compute_answer_is_correct(self):
         for answer in self:
-            if answer.value_suggested and answer.question_id.question_type in ['simple_choice', 'multiple_choice']:
-                answer.answer_is_correct = answer.value_suggested.is_correct
+            if answer.suggested_answer_id and answer.question_id.question_type in ['simple_choice', 'multiple_choice']:
+                answer.answer_is_correct = answer.suggested_answer_id.is_correct
             else:
                 answer.answer_is_correct = False
 
@@ -223,7 +223,7 @@ class SurveyUserInputLine(models.Model):
                 'number': (bool(uil.value_number) or uil.value_number == 0),
                 'date': bool(uil.value_date),
                 'free_text': bool(uil.value_free_text),
-                'suggestion': bool(uil.value_suggested)
+                'suggestion': bool(uil.suggested_answer_id)
             }
             if not fields_type.get(uil.answer_type, True):
                 raise ValidationError(_('The answer must be in the right type'))
@@ -231,22 +231,22 @@ class SurveyUserInputLine(models.Model):
     @api.model_create_multi
     def create(self, vals_list):
         for vals in vals_list:
-            value_suggested = vals.get('value_suggested')
-            if value_suggested:
-                vals.update({'answer_score': self.env['survey.question.answer'].browse(int(value_suggested)).answer_score})
+            suggested_answer_id = vals.get('suggested_answer_id')
+            if suggested_answer_id:
+                vals.update({'answer_score': self.env['survey.question.answer'].browse(int(suggested_answer_id)).answer_score})
         return super(SurveyUserInputLine, self).create(vals_list)
 
     def write(self, vals):
-        value_suggested = vals.get('value_suggested')
-        if value_suggested:
-            vals.update({'answer_score': self.env['survey.question.answer'].browse(int(value_suggested)).answer_score})
+        suggested_answer_id = vals.get('suggested_answer_id')
+        if suggested_answer_id:
+            vals.update({'answer_score': self.env['survey.question.answer'].browse(int(suggested_answer_id)).answer_score})
         return super(SurveyUserInputLine, self).write(vals)
 
     def _get_save_line_values(self, answer, answer_type):
         if not answer or (isinstance(answer, str) and not answer.strip()):
             return {'answer_type': None, 'skipped': True}
         if answer_type == 'suggestion':
-            return {'answer_type': answer_type, 'value_suggested': answer}
+            return {'answer_type': answer_type, 'suggested_answer_id': answer}
         value = float(answer) if answer_type == 'number' else answer
         return {'answer_type': answer_type, 'value_' + answer_type: value}
 
@@ -310,7 +310,7 @@ class SurveyUserInputLine(models.Model):
                 vals_list.append(vals.copy())
 
         if comment:
-            vals.update({'answer_type': 'text', 'value_text': comment, 'skipped': False, 'value_suggested': False})
+            vals.update({'answer_type': 'text', 'value_text': comment, 'skipped': False, 'suggested_answer_id': False})
             vals_list.append(vals.copy())
 
         old_answers.sudo().unlink()
@@ -324,11 +324,11 @@ class SurveyUserInputLine(models.Model):
 
         for row_key, row_answer in answers.items():
             for answer in row_answer:
-                vals.update({'answer_type': 'suggestion', 'value_suggested': answer, 'value_suggested_row': row_key})
+                vals.update({'answer_type': 'suggestion', 'suggested_answer_id': answer, 'matrix_row_id': row_key})
                 vals_list.append(vals.copy())
 
         if comment:
-            vals.update({'answer_type': 'text', 'value_text': comment, 'skipped': False, 'value_suggested': False})
+            vals.update({'answer_type': 'text', 'value_text': comment, 'skipped': False, 'suggested_answer_id': False})
             vals_list.append(vals.copy())
 
         old_answers.sudo().unlink()
