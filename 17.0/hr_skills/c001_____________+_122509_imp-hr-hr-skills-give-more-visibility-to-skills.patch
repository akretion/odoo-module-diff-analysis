PR: https://github.com/odoo/odoo/pull/122509

From: b11b09405bf2b104d3e8e2ed419045d75e55957f
From: dasz
Date: 2023-10-16 10:39:50

Structural Changes: 3
Total Changes: 51

[IMP] hr,hr_skills: give more visibility to skills

UX changes to improve the visibility of skills related features
in hr applications:
- install skills by default with HR
- custom button for skills history
- new skills demo data
- inline create for skill type form
- better skill add ux for employee
- no skills --> redirect to skill types form

task 3334909

closes odoo/odoo#122509

Related: odoo/upgrade#4848
Related: odoo/enterprise#43235
Signed-off-by: Sofie Gvaladze (sgv) <sgv@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_skills/models/hr_employee_skill.py
+++ b/addons/hr_skills/models/hr_employee_skill.py
@@ -15,7 +15,9 @@ class EmployeeSkill(models.Model):
     employee_id = fields.Many2one('hr.employee', required=True, ondelete='cascade')
     skill_id = fields.Many2one('hr.skill', compute='_compute_skill_id', store=True, domain="[('skill_type_id', '=', skill_type_id)]", readonly=False, required=True, ondelete='cascade')
     skill_level_id = fields.Many2one('hr.skill.level', compute='_compute_skill_level_id', domain="[('skill_type_id', '=', skill_type_id)]", store=True, readonly=False, required=True, ondelete='cascade')
-    skill_type_id = fields.Many2one('hr.skill.type', required=True, ondelete='cascade')
+    skill_type_id = fields.Many2one('hr.skill.type',
+                                    default=lambda self: self.env['hr.skill.type'].search([], limit=1),
+                                    required=True, ondelete='cascade')
     level_progress = fields.Integer(related='skill_level_id.level_progress')
 
     _sql_constraints = [
@@ -37,7 +39,9 @@ class EmployeeSkill(models.Model):
     @api.depends('skill_type_id')
     def _compute_skill_id(self):
         for record in self:
-            if record.skill_id.skill_type_id != record.skill_type_id:
+            if record.skill_type_id:
+                record.skill_id = record.skill_type_id.skill_ids[0] if record.skill_type_id.skill_ids else False
+            else:
                 record.skill_id = False
 
     @api.depends('skill_id')

--- a/addons/hr_skills/models/hr_skill_level.py
+++ b/addons/hr_skills/models/hr_skill_level.py
@@ -2,7 +2,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models, _
-from odoo.exceptions import ValidationError
 
 
 class SkillLevel(models.Model):
@@ -29,28 +28,14 @@ class SkillLevel(models.Model):
 
     @api.model_create_multi
     def create(self, vals_list):
-        levels = super().create(vals_list)
-        levels.skill_type_id._set_default_level()
-        return levels
-
-    def write(self, values):
-        levels = super().write(values)
-        self.skill_type_id._set_default_level()
-        return levels
-
-    def unlink(self):
-        skill_types = self.skill_type_id
-        res = super().unlink()
-        skill_types._set_default_level()
+        skill_levels = super().create(vals_list)
+        for level in skill_levels:
+            if level.default_level:
+                level.skill_type_id.skill_level_ids.filtered(lambda r: r.id != level.id).default_level = False
+        return skill_levels
+
+    def write(self, vals):
+        res = super().write(vals)
+        if vals.get('default_level'):
+            self.skill_type_id.skill_level_ids.filtered(lambda r: r.id != self.id).default_level = False
         return res
-
-    @api.constrains('default_level', 'skill_type_id')
-    def _constrains_default_level(self):
-        for skill_type in set(self.mapped('skill_type_id')):
-            if len(skill_type.skill_level_ids.filtered('default_level')) > 1:
-                raise ValidationError(_('Only one default level is allowed per skill type.'))
-
-    def action_set_default(self):
-        self.ensure_one()
-        self.skill_type_id.skill_level_ids.with_context(no_skill_level_check=True).default_level = False
-        self.default_level = True

--- a/addons/hr_skills/models/hr_skill_type.py
+++ b/addons/hr_skills/models/hr_skill_type.py
@@ -12,11 +12,3 @@ class SkillType(models.Model):
     name = fields.Char(required=True)
     skill_ids = fields.One2many('hr.skill', 'skill_type_id', string="Skills")
     skill_level_ids = fields.One2many('hr.skill.level', 'skill_type_id', string="Levels")
-
-    def _set_default_level(self):
-        if self.env.context.get('no_skill_level_check'):
-            return
-
-        for types in self:
-            if not types.skill_level_ids.filtered('default_level'):
-                types.skill_level_ids[:1].default_level = True
