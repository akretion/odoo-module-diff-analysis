PR: https://github.com/odoo/odoo/pull/84719

From: fa111d449d843a365a81af5d1b0df75c3954a17b
From: Joseph Caburnay
Date: 2022-06-03 14:39:51

Structural Changes: 9
Total Changes: 62

[IMP] point_of_sale,*pos*: configure pos from general settings

Purpose:

- Move PoS settings in general settings to be consistent with the rest
  of Odoo (PoS being the only app where settings are split in two locations)
- Clean settings by enabling obvious settings or dropping unnecessary ones.

closes odoo/odoo#84719

Task-id: 2753430
Related: odoo/upgrade#3260
Related: odoo/enterprise#24425
Signed-off-by: Masereel Pierre <pim@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_restaurant/models/__init__.py
+++ b/addons/pos_restaurant/models/__init__.py
@@ -6,3 +6,4 @@ from . import pos_order
 from . import pos_payment
 from . import pos_restaurant
 from . import pos_session
+from . import res_config_settings

--- a/addons/pos_restaurant/models/pos_config.py
+++ b/addons/pos_restaurant/models/pos_config.py
@@ -17,20 +17,6 @@ class PosConfig(models.Model):
     set_tip_after_payment = fields.Boolean('Set Tip After Payment', help="Adjust the amount authorized by payment terminals to add a tip after the customers left or at the end of the day.")
     module_pos_restaurant = fields.Boolean(default=True)
 
-    @api.onchange('module_pos_restaurant')
-    def _onchange_module_pos_restaurant(self):
-        if not self.module_pos_restaurant:
-            self.update({'iface_printbill': False,
-            'iface_splitbill': False,
-            'is_order_printer': False,
-            'is_table_management': False,
-            'iface_orderline_notes': False})
-
-    @api.onchange('iface_tipproduct')
-    def _onchange_iface_tipproduct(self):
-        if not self.iface_tipproduct:
-            self.set_tip_after_payment = False
-
     def _force_http(self):
         enforce_https = self.env['ir.config_parameter'].sudo().get_param('point_of_sale.enforce_https')
         if not enforce_https and self.printer_ids.filtered(lambda pt: pt.printer_type == 'epson_epos'):

--- a/None
+++ b/addons/pos_restaurant/models/res_config_settings.py
@@ -0,0 +1,47 @@
+# -*- coding: utf-8 -*-
+
+from odoo import fields, models, api
+
+
+class ResConfigSettings(models.TransientModel):
+    _inherit = 'res.config.settings'
+
+    def _get_floors_domain(self):
+        return ['|', ('pos_config_id', 'in', self.pos_config_id.ids), ('pos_config_id', '=', False)]
+
+    pos_floor_ids = fields.One2many(related='pos_config_id.floor_ids', readonly=False, domain=lambda self: self._get_floors_domain())
+    pos_iface_orderline_notes = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False, pos='iface_orderline_notes')
+    pos_iface_printbill = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False, pos='iface_printbill')
+    pos_iface_splitbill = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False, pos='iface_splitbill')
+    pos_is_order_printer = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False, pos='is_order_printer')
+    pos_is_table_management = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False, pos='is_table_management')
+    pos_printer_ids = fields.Many2many(related='pos_config_id.printer_ids', readonly=False)
+    pos_set_tip_after_payment = fields.Boolean(compute='_compute_pos_set_tip_after_payment', store=True, readonly=False, pos='set_tip_after_payment')
+
+    @api.depends('pos_module_pos_restaurant', 'pos_config_id')
+    def _compute_pos_module_pos_restaurant(self):
+        for res_config in self:
+            if not res_config.pos_module_pos_restaurant:
+                res_config.update({
+                    'pos_iface_orderline_notes': False,
+                    'pos_iface_printbill': False,
+                    'pos_iface_splitbill': False,
+                    'pos_is_order_printer': False,
+                    'pos_is_table_management': False,
+                })
+            else:
+                res_config.update({
+                    'pos_iface_orderline_notes': res_config.pos_config_id.iface_orderline_notes,
+                    'pos_iface_printbill': res_config.pos_config_id.iface_printbill,
+                    'pos_iface_splitbill': res_config.pos_config_id.iface_splitbill,
+                    'pos_is_order_printer': res_config.pos_config_id.is_order_printer,
+                    'pos_is_table_management': res_config.pos_config_id.is_table_management,
+                })
+
+    @api.depends('pos_iface_tipproduct', 'pos_config_id')
+    def _compute_pos_set_tip_after_payment(self):
+        for res_config in self:
+            if res_config.pos_iface_tipproduct:
+                res_config.pos_set_tip_after_payment = res_config.pos_config_id.set_tip_after_payment
+            else:
+                res_config.pos_set_tip_after_payment = False
