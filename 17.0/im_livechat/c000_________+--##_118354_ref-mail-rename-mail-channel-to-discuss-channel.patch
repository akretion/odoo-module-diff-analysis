PR: https://github.com/odoo/odoo/pull/118354

From: 90cb44e1e1b6bad9c12f3bd14d1c9e340461e19e
From: Sébastien Theys
Date: 2023-04-21 00:21:53

Structural Changes: 7
Total Changes: 686

[REF] mail, *: rename mail.channel to discuss.channel

* = bus, calendar, crm_livechat, hr, hr_holidays, im_livechat, mail_bot,
    mass_mailing, privacy_lookup, test_discuss_full, test_mail,
    test_mail_full, website_crm_livechat, website_livechat, base

In preparation of splitting discuss and mail modules.

Part of task-3265211

closes odoo/odoo#118354

Related: odoo/upgrade#4553
Related: odoo/enterprise#39661
Signed-off-by: Sébastien Theys (seb) <seb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/im_livechat/models/__init__.py
+++ b/addons/im_livechat/models/__init__.py
@@ -7,8 +7,8 @@ from . import chatbot_script_step
 from . import res_users
 from . import res_partner
 from . import im_livechat_channel
-from . import mail_channel
-from . import mail_channel_member
+from . import discuss_channel
+from . import discuss_channel_member
 from . import mail_message
 from . import res_users_settings
 from . import rating_rating

--- a/addons/im_livechat/models/chatbot_message.py
+++ b/addons/im_livechat/models/chatbot_message.py
@@ -13,10 +13,10 @@ class ChatbotMailMessage(models.Model):
     _name = 'chatbot.message'
     _description = 'Chatbot Message'
     _order = 'create_date desc, id desc'
-    _rec_name = 'mail_channel_id'
+    _rec_name = 'discuss_channel_id'
 
     mail_message_id = fields.Many2one('mail.message', string='Related Mail Message', required=True, ondelete="cascade")
-    mail_channel_id = fields.Many2one('mail.channel', string='Discussion Channel', required=True, ondelete="cascade")
+    discuss_channel_id = fields.Many2one('discuss.channel', string='Discussion Channel', required=True, ondelete="cascade")
     script_step_id = fields.Many2one(
         'chatbot.script.step', string='Chatbot Step', required=True, ondelete='cascade')
     user_script_answer_id = fields.Many2one('chatbot.script.answer', string="User's answer", ondelete="set null")

--- a/addons/im_livechat/models/chatbot_script.py
+++ b/addons/im_livechat/models/chatbot_script.py
@@ -135,7 +135,7 @@ class ChatbotScript(models.Model):
         end user.
 
         This is important because we need to display those welcoming steps in a special fashion on
-        the frontend, since those are not inserted into the mail.channel as actual mail.messages,
+        the frontend, since those are not inserted into the discuss.channel as actual mail.messages,
         to avoid bloating the channels with bot messages if the end-user never interacts with it. """
         self.ensure_one()
 
@@ -147,21 +147,21 @@ class ChatbotScript(models.Model):
 
         return welcome_steps
 
-    def _post_welcome_steps(self, mail_channel):
+    def _post_welcome_steps(self, discuss_channel):
         """ Welcome messages are only posted after the visitor's first interaction with the chatbot.
         See 'chatbot.script#_get_welcome_steps()' for more details.
 
         Side note: it is important to set the 'chatbot_current_step_id' on each iteration so that
-        it's correctly set when going into 'mail_channel#_message_post_after_hook()'. """
+        it's correctly set when going into 'discuss_channel#_message_post_after_hook()'. """
 
         self.ensure_one()
         posted_messages = self.env['mail.message']
 
         for welcome_step in self._get_welcome_steps():
-            mail_channel.chatbot_current_step_id = welcome_step.id
+            discuss_channel.chatbot_current_step_id = welcome_step.id
 
             if not is_html_empty(welcome_step.message):
-                posted_messages += mail_channel.with_context(mail_create_nosubscribe=True).message_post(
+                posted_messages += discuss_channel.with_context(mail_create_nosubscribe=True).message_post(
                     author_id=self.operator_partner_id.id,
                     body=plaintext2html(welcome_step.message),
                     message_type='comment',
@@ -194,7 +194,7 @@ class ChatbotScript(models.Model):
             ]
         }
 
-    def _validate_email(self, email_address, mail_channel):
+    def _validate_email(self, email_address, discuss_channel):
         email_address = html2plaintext(email_address)
         email_normalized = email_normalize(email_address)
 
@@ -205,7 +205,7 @@ class ChatbotScript(models.Model):
                 "'%(input_email)s' does not look like a valid email. Can you please try again?",
                 input_email=email_address
             )
-            posted_message = mail_channel._chatbot_post_message(self, plaintext2html(error_message))
+            posted_message = discuss_channel._chatbot_post_message(self, plaintext2html(error_message))
 
         return {
             'success': bool(email_normalized),

--- a/addons/im_livechat/models/chatbot_script_step.py
+++ b/addons/im_livechat/models/chatbot_script_step.py
@@ -120,24 +120,24 @@ class ChatbotScriptStep(models.Model):
     # Business Methods
     # --------------------------
 
-    def _chatbot_prepare_customer_values(self, mail_channel, create_partner=True, update_partner=True):
-        """ Common method that allows retreiving default customer values from the mail.channel
+    def _chatbot_prepare_customer_values(self, discuss_channel, create_partner=True, update_partner=True):
+        """ Common method that allows retreiving default customer values from the discuss.channel
         following a chatbot.script.
 
         This method will return a dict containing the 'customer' values such as:
         {
             'partner': The created partner (see 'create_partner') or the partner from the
               environment if not public
-            'email': The email extracted from the mail.channel messages
+            'email': The email extracted from the discuss.channel messages
               (see step_type 'question_email')
-            'phone': The phone extracted from the mail.channel messages
+            'phone': The phone extracted from the discuss.channel messages
               (see step_type 'question_phone')
             'description': A default description containing the "Please contact me on" and "Please
               call me on" with the related email and phone numbers.
               Can be used as a default description to create leads or tickets for example.
         }
 
-        :param record mail_channel: the mail.channel holding the visitor's conversation with the bot.
+        :param record discuss_channel: the discuss.channel holding the visitor's conversation with the bot.
         :param bool create_partner: whether or not to create a res.partner is the current user is public.
           Defaults to True.
         :param bool update_partner: whether or not to set update the email and phone on the res.partner
@@ -146,7 +146,7 @@ class ChatbotScriptStep(models.Model):
         :return dict: a dict containing the customer values."""
 
         partner = False
-        user_inputs = mail_channel._chatbot_find_customer_values_in_messages({
+        user_inputs = discuss_channel._chatbot_find_customer_values_in_messages({
             'question_email': 'email',
             'question_phone': 'phone',
         })
@@ -254,18 +254,18 @@ class ChatbotScriptStep(models.Model):
             return step
         return self.env['chatbot.script.step']
 
-    def _is_last_step(self, mail_channel=False):
+    def _is_last_step(self, discuss_channel=False):
         self.ensure_one()
-        mail_channel = mail_channel or self.env['mail.channel']
+        discuss_channel = discuss_channel or self.env['discuss.channel']
 
         # if it's not a question and if there is no next step, then we end the script
         if self.step_type != 'question_selection' and not self._fetch_next_step(
-           mail_channel.chatbot_message_ids.user_script_answer_id):
+           discuss_channel.chatbot_message_ids.user_script_answer_id):
             return True
 
         return False
 
-    def _process_answer(self, mail_channel, message_body):
+    def _process_answer(self, discuss_channel, message_body):
         """ Method called when the user reacts to the current chatbot.script step.
         For most chatbot.script.step#step_types it simply returns the next chatbot.script.step of
         the script (see '_fetch_next_step').
@@ -274,7 +274,7 @@ class ChatbotScriptStep(models.Model):
         we store the user raw answer (the mail message HTML body) into the chatbot.message in order
         to be able to recover it later (see '_chatbot_prepare_customer_values').
 
-        :param mail_channel:
+        :param discuss_channel:
         :param message_body:
         :return: script step to display next
         :rtype: 'chatbot.script.step' """
@@ -288,7 +288,7 @@ class ChatbotScriptStep(models.Model):
 
         if self.step_type in ['question_email', 'question_phone']:
             chatbot_message = self.env['chatbot.message'].search([
-                ('mail_channel_id', '=', mail_channel.id),
+                ('discuss_channel_id', '=', discuss_channel.id),
                 ('script_step_id', '=', self.id),
             ], limit=1)
 
@@ -296,9 +296,9 @@ class ChatbotScriptStep(models.Model):
                 chatbot_message.write({'user_raw_answer': message_body})
                 self.env.flush_all()
 
-        return self._fetch_next_step(mail_channel.chatbot_message_ids.user_script_answer_id)
+        return self._fetch_next_step(discuss_channel.chatbot_message_ids.user_script_answer_id)
 
-    def _process_step(self, mail_channel):
+    def _process_step(self, discuss_channel):
         """ When we reach a chatbot.step in the script we need to do some processing on behalf of
         the bot. Which is for most chatbot.script.step#step_types just posting the message field.
 
@@ -310,14 +310,14 @@ class ChatbotScriptStep(models.Model):
 
         self.ensure_one()
         # We change the current step to the new step
-        mail_channel.chatbot_current_step_id = self.id
+        discuss_channel.chatbot_current_step_id = self.id
 
         if self.step_type == 'forward_operator':
-            return self._process_step_forward_operator(mail_channel)
+            return self._process_step_forward_operator(discuss_channel)
 
-        return mail_channel._chatbot_post_message(self.chatbot_script_id, plaintext2html(self.message))
+        return discuss_channel._chatbot_post_message(self.chatbot_script_id, plaintext2html(self.message))
 
-    def _process_step_forward_operator(self, mail_channel):
+    def _process_step_forward_operator(self, discuss_channel):
         """ Special type of step that will add a human operator to the conversation when reached,
         which stops the script and allow the visitor to discuss with a real person.
 
@@ -328,28 +328,28 @@ class ChatbotScriptStep(models.Model):
         human_operator = False
         posted_message = False
 
-        if mail_channel.livechat_channel_id:
-            human_operator = mail_channel.livechat_channel_id._get_random_operator()
+        if discuss_channel.livechat_channel_id:
+            human_operator = discuss_channel.livechat_channel_id._get_random_operator()
 
         # handle edge case where we found yourself as available operator -> don't do anything
         # it will act as if no-one is available (which is fine)
         if human_operator and human_operator != self.env.user:
-            mail_channel.sudo().add_members(
+            discuss_channel.sudo().add_members(
                 human_operator.partner_id.ids,
                 open_chat_window=True,
                 post_joined_message=False)
 
             if self.message:
                 # first post the message of the step (if we have one)
-                posted_message = mail_channel._chatbot_post_message(self.chatbot_script_id, plaintext2html(self.message))
+                posted_message = discuss_channel._chatbot_post_message(self.chatbot_script_id, plaintext2html(self.message))
 
             # then post a small custom 'Operator has joined' notification
-            mail_channel._chatbot_post_message(
+            discuss_channel._chatbot_post_message(
                 self.chatbot_script_id,
                 Markup('<div class="o_mail_notification">%s</div>') % _('%s has joined', human_operator.partner_id.name))
 
-            mail_channel._broadcast(human_operator.partner_id.ids)
-            mail_channel.channel_pin(pinned=True)
+            discuss_channel._broadcast(human_operator.partner_id.ids)
+            discuss_channel.channel_pin(pinned=True)
 
         return posted_message
 

--- a/addons/im_livechat/models/digest.py
+++ b/addons/im_livechat/models/digest.py
@@ -15,7 +15,7 @@ class Digest(models.Model):
     kpi_livechat_response_value = fields.Float(digits=(16, 2), compute='_compute_kpi_livechat_response_value')
 
     def _compute_kpi_livechat_rating_value(self):
-        channels = self.env['mail.channel'].search([('channel_type', '=', 'livechat')])
+        channels = self.env['discuss.channel'].search([('channel_type', '=', 'livechat')])
         start, end, __ = self._get_kpi_compute_parameters()
         domain = [
             ('create_date', '>=', start),
@@ -29,7 +29,7 @@ class Digest(models.Model):
 
     def _compute_kpi_livechat_conversations_value(self):
         start, end, __ = self._get_kpi_compute_parameters()
-        self.kpi_livechat_conversations_value = self.env['mail.channel'].search_count([
+        self.kpi_livechat_conversations_value = self.env['discuss.channel'].search_count([
             ('channel_type', '=', 'livechat'),
             ('create_date', '>=', start), ('create_date', '<', end),
         ])

--- a/addons/im_livechat/models/mail_channel.py
+++ b/addons/im_livechat/models/discuss_channel.py
@@ -7,14 +7,14 @@ from odoo.tools import email_normalize, html_escape, html2plaintext, plaintext2h
 from markupsafe import Markup
 
 
-class MailChannel(models.Model):
+class DiscussChannel(models.Model):
     """ Chat Session
         Reprensenting a conversation between users.
         It extends the base method for anonymous usage.
     """
 
-    _name = 'mail.channel'
-    _inherit = ['rating.mixin', 'mail.channel']
+    _name = 'discuss.channel'
+    _inherit = ['rating.mixin', 'discuss.channel']
 
     anonymous_name = fields.Char('Anonymous Name')
     channel_type = fields.Selection(selection_add=[('livechat', 'Livechat Conversation')], ondelete={'livechat': 'cascade'})
@@ -22,20 +22,20 @@ class MailChannel(models.Model):
     livechat_channel_id = fields.Many2one('im_livechat.channel', 'Channel')
     livechat_operator_id = fields.Many2one('res.partner', string='Operator')
     chatbot_current_step_id = fields.Many2one('chatbot.script.step', string='Chatbot Current Step')
-    chatbot_message_ids = fields.One2many('chatbot.message', 'mail_channel_id', string='Chatbot Messages')
+    chatbot_message_ids = fields.One2many('chatbot.message', 'discuss_channel_id', string='Chatbot Messages')
     country_id = fields.Many2one('res.country', string="Country", help="Country of the visitor of the channel")
 
     _sql_constraints = [('livechat_operator_id', "CHECK((channel_type = 'livechat' and livechat_operator_id is not null) or (channel_type != 'livechat'))",
                          'Livechat Operator ID is required for a channel of type livechat.')]
 
     def _compute_is_chat(self):
-        super(MailChannel, self)._compute_is_chat()
+        super()._compute_is_chat()
         for record in self:
             if record.channel_type == 'livechat':
                 record.is_chat = True
 
     def _channel_message_notifications(self, message, message_format=False):
-        """ When a anonymous user create a mail.channel, the operator is not notify (to avoid massive polling when
+        """ When a anonymous user create a discuss.channel, the operator is not notify (to avoid massive polling when
             clicking on livechat button). So when the anonymous person is sending its FIRST message, the channel header
             should be added to the notification, since the user cannot be listining to the channel.
         """
@@ -43,7 +43,7 @@ class MailChannel(models.Model):
         for channel in self:
             # add uuid to allow anonymous to listen
             if channel.channel_type == 'livechat':
-                notifications.append([channel.uuid, 'mail.channel/new_message', notifications[0][2]])
+                notifications.append([channel.uuid, 'discuss.channel/new_message', notifications[0][2]])
         if not message.author_id:
             unpinned_members = self.channel_member_ids.filtered(lambda member: not member.is_pinned)
             if unpinned_members:
@@ -74,11 +74,11 @@ class MailChannel(models.Model):
         hours = 1  # never remove empty session created within the last hour
         self.env.cr.execute("""
             SELECT id as id
-            FROM mail_channel C
+            FROM discuss_channel C
             WHERE NOT EXISTS (
                 SELECT 1
                 FROM mail_message M
-                WHERE M.res_id = C.id AND m.model = 'mail.channel'
+                WHERE M.res_id = C.id AND m.model = 'discuss.channel'
             ) AND C.channel_type = 'livechat' AND livechat_channel_id IS NOT NULL AND
                 COALESCE(write_date, create_date, (now() at time zone 'UTC'))::timestamp
                 < ((now() at time zone 'UTC') - interval %s)""", ("%s hours" % hours,))
@@ -86,7 +86,7 @@ class MailChannel(models.Model):
         self.browse(empty_channel_ids).unlink()
 
     def _execute_command_help_message_extra(self):
-        msg = super(MailChannel, self)._execute_command_help_message_extra()
+        msg = super()._execute_command_help_message_extra()
         if self.channel_type == 'livechat':
             return msg + _("Type <b>:shortcut</b> to insert a canned response in your message.<br>")
         return msg
@@ -222,10 +222,10 @@ class MailChannel(models.Model):
         if self.chatbot_current_step_id:
             self.env['chatbot.message'].sudo().create({
                 'mail_message_id': message.id,
-                'mail_channel_id': self.id,
+                'discuss_channel_id': self.id,
                 'script_step_id': self.chatbot_current_step_id.id,
             })
-        return super(MailChannel, self)._message_post_after_hook(message, msg_vals)
+        return super()._message_post_after_hook(message, msg_vals)
 
     def _chatbot_restart(self, chatbot_script):
         self.write({

--- a/addons/im_livechat/models/mail_channel_member.py
+++ b/addons/im_livechat/models/discuss_channel_member.py
@@ -6,20 +6,20 @@ from odoo import api, models
 
 
 class ChannelMember(models.Model):
-    _inherit = 'mail.channel.member'
+    _inherit = 'discuss.channel.member'
 
     @api.autovacuum
     def _gc_unpin_livechat_sessions(self):
         """ Unpin read livechat sessions with no activity for at least one day to
             clean the operator's interface """
-        members = self.env['mail.channel.member'].search([
+        members = self.env['discuss.channel.member'].search([
             ('is_pinned', '=', True),
             ('last_seen_dt', '<=', datetime.now() - timedelta(days=1)),
             ('channel_id.channel_type', '=', 'livechat'),
         ])
         sessions_to_be_unpinned = members.filtered(lambda m: m.message_unread_counter == 0)
         sessions_to_be_unpinned.write({'is_pinned': False})
-        self.env['bus.bus']._sendmany([(member.partner_id, 'mail.channel/unpin', {'id': member.channel_id.id}) for member in sessions_to_be_unpinned])
+        self.env['bus.bus']._sendmany([(member.partner_id, 'discuss.channel/unpin', {'id': member.channel_id.id}) for member in sessions_to_be_unpinned])
 
     def _get_partner_data(self, fields=None):
         if self.channel_id.channel_type == 'livechat':

--- a/addons/im_livechat/models/im_livechat_channel.py
+++ b/addons/im_livechat/models/im_livechat_channel.py
@@ -56,7 +56,7 @@ class ImLivechatChannel(models.Model):
 
     # relationnal fields
     user_ids = fields.Many2many('res.users', 'im_livechat_channel_im_user', 'channel_id', 'user_id', string='Operators', default=_default_user_ids)
-    channel_ids = fields.One2many('mail.channel', 'livechat_channel_id', 'Sessions')
+    channel_ids = fields.One2many('discuss.channel', 'livechat_channel_id', 'Sessions')
     chatbot_script_count = fields.Integer(string='Number of Chatbot', compute='_compute_chatbot_script_count')
     rule_ids = fields.One2many('im_livechat.channel.rule', 'channel_id', 'Rules')
 
@@ -87,7 +87,7 @@ class ImLivechatChannel(models.Model):
 
     @api.depends('channel_ids')
     def _compute_nbr_channel(self):
-        data = self.env['mail.channel']._read_group([
+        data = self.env['discuss.channel']._read_group([
             ('livechat_channel_id', 'in', self._ids),
             ('has_message', '=', True)], ['livechat_channel_id'], ['__count'])
         channel_count = {livechat_channel.id: count for livechat_channel, count in data}
@@ -137,8 +137,8 @@ class ImLivechatChannel(models.Model):
         self.ensure_one()
         return self.user_ids.filtered(lambda user: user.im_status == 'online')
 
-    def _get_livechat_mail_channel_vals(self, anonymous_name, operator=None, chatbot_script=None, user_id=None, country_id=None):
-        # partner to add to the mail.channel
+    def _get_livechat_discuss_channel_vals(self, anonymous_name, operator=None, chatbot_script=None, user_id=None, country_id=None):
+        # partner to add to the discuss.channel
         operator_partner_id = operator.partner_id.id if operator else chatbot_script.operator_partner_id.id
         members_to_add = [Command.create({'partner_id': operator_partner_id, 'is_pinned': False})]
         visitor_user = False
@@ -167,8 +167,8 @@ class ImLivechatChannel(models.Model):
             'name': name,
         }
 
-    def _open_livechat_mail_channel(self, anonymous_name, previous_operator_id=None, chatbot_script=None, user_id=None, country_id=None, persisted=True):
-        """ Return a livechat session. If the session is persisted, creates a mail.channel record with a connected operator or with Odoobot as
+    def _open_livechat_discuss_channel(self, anonymous_name, previous_operator_id=None, chatbot_script=None, user_id=None, country_id=None, persisted=True):
+        """ Return a livechat session. If the session is persisted, creates a discuss.channel record with a connected operator or with Odoobot as
             an operator if a chatbot has been configured, or return false otherwise
             :param anonymous_name : the name of the anonymous person of the session
             :param previous_operator_id : partner_id.id of the previous operator that this visitor had in the past
@@ -199,19 +199,19 @@ class ImLivechatChannel(models.Model):
         if not user_operator and not chatbot_script:
             # no one available
             return False
-        mail_channel_vals = self._get_livechat_mail_channel_vals(anonymous_name, user_operator, chatbot_script, user_id=user_id, country_id=country_id)
+        discuss_channel_vals = self._get_livechat_discuss_channel_vals(anonymous_name, user_operator, chatbot_script, user_id=user_id, country_id=country_id)
         if persisted:
             # create the session, and add the link with the given channel
-            mail_channel = self.env["mail.channel"].with_context(mail_create_nosubscribe=False).sudo().create(mail_channel_vals)
+            discuss_channel = self.env["discuss.channel"].with_context(mail_create_nosubscribe=False).sudo().create(discuss_channel_vals)
             if user_operator:
-                mail_channel._broadcast([user_operator.partner_id.id])
-            return mail_channel.sudo().channel_info()[0]
+                discuss_channel._broadcast([user_operator.partner_id.id])
+            return discuss_channel.sudo().channel_info()[0]
         else:
             operator_partner_id = user_operator.partner_id if user_operator else chatbot_script.operator_partner_id
             display_name = operator_partner_id.user_livechat_username or operator_partner_id.display_name
             return {
-                'name': mail_channel_vals['name'],
-                'chatbot_current_step_id': mail_channel_vals['chatbot_current_step_id'],
+                'name': discuss_channel_vals['name'],
+                'chatbot_current_step_id': discuss_channel_vals['chatbot_current_step_id'],
                 'state': 'open',
                 'operator_pid': (operator_partner_id.id, display_name.replace(',', '')),
                 'chatbot_script_id': chatbot_script.id if chatbot_script else None
@@ -222,7 +222,7 @@ class ImLivechatChannel(models.Model):
         A livechat is considered 'active' if it has at least one message within the 30 minutes.
 
         (Some annoying conversions have to be made on the fly because this model holds 'res.users' as available operators
-        and the mail_channel model stores the partner_id of the randomly selected operator)
+        and the discuss_channel model stores the partner_id of the randomly selected operator)
 
         :return : user
         :rtype : res.users
@@ -232,8 +232,8 @@ class ImLivechatChannel(models.Model):
             return False
 
         self.env.cr.execute("""SELECT COUNT(DISTINCT c.id), c.livechat_operator_id
-            FROM mail_channel c
-            LEFT OUTER JOIN mail_message m ON c.id = m.res_id AND m.model = 'mail.channel'
+            FROM discuss_channel c
+            LEFT OUTER JOIN mail_message m ON c.id = m.res_id AND m.model = 'discuss.channel'
             WHERE c.channel_type = 'livechat'
             AND c.livechat_operator_id in %s
             AND m.create_date > ((now() at time zone 'UTC') - interval '30 minutes')

--- a/addons/im_livechat/models/mail_message.py
+++ b/addons/im_livechat/models/mail_message.py
@@ -20,8 +20,8 @@ class MailMessage(models.Model):
         vals_list = super()._message_format(fnames=fnames, format_reply=format_reply, legacy=legacy)
         for vals in vals_list:
             message_sudo = self.browse(vals['id']).sudo().with_prefetch(self.ids)
-            mail_channel = self.env['mail.channel'].browse(message_sudo.res_id) if message_sudo.model == 'mail.channel' else self.env['mail.channel']
-            if mail_channel.channel_type == 'livechat':
+            discuss_channel = self.env['discuss.channel'].browse(message_sudo.res_id) if message_sudo.model == 'discuss.channel' else self.env['discuss.channel']
+            if discuss_channel.channel_type == 'livechat':
                 if message_sudo.author_id:
                     vals.pop('email_from')
                 if message_sudo.author_id.user_livechat_username:
@@ -29,8 +29,8 @@ class MailMessage(models.Model):
                         'id': message_sudo.author_id.id,
                         'user_livechat_username': message_sudo.author_id.user_livechat_username,
                     }
-                if mail_channel.chatbot_current_step_id \
-                        and message_sudo.author_id == mail_channel.chatbot_current_step_id.chatbot_script_id.operator_partner_id:
+                if discuss_channel.chatbot_current_step_id \
+                        and message_sudo.author_id == discuss_channel.chatbot_current_step_id.chatbot_script_id.operator_partner_id:
                     chatbot_message_id = self.env['chatbot.message'].sudo().search([
                         ('mail_message_id', '=', message_sudo.id)], limit=1)
                     if chatbot_message_id.script_step_id:

--- a/addons/im_livechat/models/rating_rating.py
+++ b/addons/im_livechat/models/rating_rating.py
@@ -13,7 +13,7 @@ class Rating(models.Model):
         for rating in self:
             # cannot change the rec_name of session since it is use to create the bus channel
             # so, need to override this method to set the same alternative rec_name as in reporting
-            if rating.res_model == 'mail.channel':
+            if rating.res_model == 'discuss.channel':
                 current_object = self.env[rating.res_model].sudo().browse(rating.res_id)
                 rating.res_name = ('%s / %s') % (current_object.livechat_channel_id.name, current_object.id)
             else:
@@ -21,7 +21,7 @@ class Rating(models.Model):
 
     def action_open_rated_object(self):
         action = super(Rating, self).action_open_rated_object()
-        if self.res_model == 'mail.channel':
-            view_id = self.env.ref('im_livechat.mail_channel_view_form').id
+        if self.res_model == 'discuss.channel':
+            view_id = self.env.ref('im_livechat.discuss_channel_view_form').id
             action['views'] = [[view_id, 'form']]
         return action

--- a/addons/im_livechat/models/res_partner.py
+++ b/addons/im_livechat/models/res_partner.py
@@ -11,9 +11,9 @@ class Partners(models.Model):
 
     def _get_channels_as_member(self):
         channels = super()._get_channels_as_member()
-        channels |= self.env['mail.channel'].search([
+        channels |= self.env['discuss.channel'].search([
             ('channel_type', '=', 'livechat'),
-            ('channel_member_ids', 'in', self.env['mail.channel.member'].sudo()._search([
+            ('channel_member_ids', 'in', self.env['discuss.channel.member'].sudo()._search([
                 ('partner_id', '=', self.id),
                 ('is_pinned', '=', True),
             ])),
