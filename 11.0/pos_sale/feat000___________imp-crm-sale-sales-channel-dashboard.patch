PR: https://github.com/odoo/odoo/pull/

From: eed8a3468639aff82360a7552f9c7a1216b89345
From: Denis Vermylen (dve)
Date: 2017-01-03 18:04:34
+    pos_config_ids = fields.One2many('pos.config', 'crm_team_id', string="Point of Sales")

Total Changes: 112

[IMP] crm_*, sale_*: sales channel dashboard

        Functional
        ==========

Sales teams become sales channels. Their dashboard cards now include a graph
displaying customizable data for managers (comparable to those in accounting).

By default, you now have the following sales channels (non-demo):

      Direct Sales      (with installation of crm or sale)

  Sales Channel type: Sales
  Works same as before, what's changed is:
    - their cards display one big button directing to the start of their
      workflow
    - the links on the right-hand side have been reworked, and are only
      displayed when there is at least one item requiring attention.
    - 'More' tab remains unchanged.

      Website           (with installation of website_sale)

  Sales Channel type: Website
  Differences lies in the links displayed in the dashboard card:
    - it displays abandoned carts, awaiting payments and payments to capture
  Default Channel linked to all sales made from the eCommerce.

      Point of Sale     (with installation of sale and point_of_sale
                                              -> auto-installs pos_sale)

  Sales Channel type: Point of Sale
  Linked to pos.configs and their pos.sessions and pos.orders.
    - only links to their linked pos.config dashboard and open sessions
    - can't use opportunities, lead or invoicing and can only display
      pos.order data in the graph.
  Default Channel linked to the default pos.config.

        Technical
        =========

* Add a channel type: sales, pos, website that have different actions/settings
* Add a graphs to the kanban cards in the sales/crm dashboard, configurable in
  the form view in the new dashboard page.
* Rename sales teams to sales channels, rename and add default and demo sales
  channels
* Change dashboard links depending on the channel type and add a related
  computed fields on crm.team
* Rename strings and improve channel form view.
* Leads are now checked by default once activated for 'sales' type channels
* Disable checking "leads" without using "opportunities".
* Hide invoicing and invoicing target depending on channel type.
* Move currency_id to sales_team

================================= pseudo patch: =================================

--- a/None
+++ b/addons/pos_sale/models/__init__.py
@@ -0,0 +1,6 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import pos_config
+import crm_team
+import pos_session

--- a/None
+++ b/addons/pos_sale/models/crm_team.py
@@ -0,0 +1,83 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models, _
+from datetime import datetime
+
+
+class CrmTeam(models.Model):
+    _inherit = 'crm.team'
+
+    team_type = fields.Selection(selection_add=[('pos', 'Point of Sale')])
+    pos_config_ids = fields.One2many('pos.config', 'crm_team_id', string="Point of Sales")
+    pos_sessions_open_count = fields.Integer(string='Open POS Sessions', compute='_compute_pos_sessions_open_count')
+    pos_order_amount_total = fields.Float(string="Session Sale Amount", compute='_compute_pos_order_amount_total')
+
+    def _compute_pos_sessions_open_count(self):
+        for team in self.filtered(lambda t: t.team_type == 'pos'):
+            team.pos_sessions_open_count = self.env['pos.session'].search_count([('config_id.crm_team_id', '=', team.id), ('state', '=', 'opened')])
+
+    def _compute_pos_order_amount_total(self):
+        for team in self.filtered(lambda t: t.team_type == 'pos'):
+            team.pos_order_amount_total = sum(self.env['report.pos.order'].search(
+                [('session_id', 'in', team.pos_config_ids.mapped('session_ids').filtered(lambda s: s.state == 'opened').ids)]
+            ).mapped('price_total'))
+
+    def _graph_data(self, start_date, end_date):
+        """ If the type of the sales team is point of sale ('pos'), the graph will display the sales data.
+            The override here is to get data from pos.order instead of sale.order.
+        """
+        if self.team_type == 'pos':
+            result = []
+            if self.dashboard_graph_group == 'user':
+                order_data = self.env['report.pos.order'].read_group(
+                    domain=[
+                        ('date', '>=', fields.Date.to_string(start_date)),
+                        ('date', '<=', fields.Datetime.to_string(datetime.combine(end_date, datetime.max.time()))),
+                        ('config_id', 'in', self.pos_config_ids.ids),
+                        ('state', 'in', ['paid', 'done', 'invoiced'])],
+                    fields=['user_id', 'price_total'],
+                    groupby=['user_id']
+                )
+                for data_point in order_data:
+                    result.append({'x_value': data_point.get('user_id')[0], 'y_value': data_point.get('price_total')})
+            else:
+                order_data = self.env['report.pos.order'].read_group(
+                    domain=[
+                        ('date', '>=', fields.Date.to_string(start_date)),
+                        ('date', '<=', fields.Datetime.to_string(datetime.combine(end_date, datetime.max.time()))),
+                        ('config_id', 'in', self.pos_config_ids.ids),
+                        ('state', 'in', ['paid', 'done', 'invoiced'])],
+                    fields=['date', 'price_total'],
+                    groupby=['date:' + self.dashboard_graph_group]
+                )
+                if self.dashboard_graph_group == 'day':
+                    for data_point in order_data:
+                        result.append({'x_value': fields.Date.to_string((fields.datetime.strptime(data_point.get('date:day'), "%d %b %Y"))), 'y_value': data_point.get('price_total')})
+                if self.dashboard_graph_group == 'week':
+                    for data_point in order_data:
+                        # non-standard groupby formatting requires garbage formatting here, hope this'll hold ...
+                        result.append({'x_value': int(data_point.get('date:week')[1:3]) - 1, 'y_value': data_point.get('price_total')})
+                if self.dashboard_graph_group == 'month':
+                    for data_point in order_data:
+                        result.append({'x_value': fields.datetime.strptime(data_point.get('date:month'), "%B %Y").month, 'y_value': data_point.get('price_total')})
+            return result
+
+        return super(CrmTeam, self)._graph_data(start_date, end_date)
+
+    def _compute_dashboard_button_name(self):
+        pos_teams = self.filtered(lambda team: team.team_type == 'pos')
+        pos_teams.update({'dashboard_button_name': _("Dashboard")})
+        super(CrmTeam, self - pos_teams)._compute_dashboard_button_name()
+
+    def action_primary_channel_button(self):
+        if self.team_type == 'pos':
+            action = self.env.ref('point_of_sale.action_pos_config_kanban').read()[0]
+            action['context'] = {'search_default_crm_team_id': self.id}
+            return action
+        return super(CrmTeam, self).action_primary_channel_button()
+
+    def _graph_title_and_key(self):
+        if self.team_type == 'pos':
+            return [_('Sales'), _('Untaxed Amount')]
+        return super(CrmTeam, self)._graph_title_and_key()

--- a/None
+++ b/addons/pos_sale/models/pos_config.py
@@ -0,0 +1,13 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class PosConfig(models.Model):
+    _inherit = 'pos.config'
+
+    crm_team_id = fields.Many2one(
+        'crm.team', string="Sales Channel", domain=[('team_type', '=', 'pos')],
+        default=lambda self: self.env['crm.team'].search([('team_type', '=', 'pos')], limit=1).id,
+        help="This Point of sale's sales will be related to this Sales Channel.")

--- a/None
+++ b/addons/pos_sale/models/pos_session.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class PosSession(models.Model):
+    _inherit = 'pos.session'
+
+    crm_team_id = fields.Many2one('crm.team', related='config_id.crm_team_id', string="Sales Channel", readonly=True)
