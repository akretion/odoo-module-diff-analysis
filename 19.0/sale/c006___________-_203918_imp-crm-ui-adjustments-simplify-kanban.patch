PR: https://github.com/odoo/odoo/pull/203918

From: 4b7f91f14a68235346fc15a1db8c703fd7cc348d
From: Renaud Thiry
Date: 2025-04-17 07:54:30

Breaking data model changes scores: del:3 + add:0, change matches:
-    quotations_count = fields.Integer(
-    quotations_amount = fields.Float(
-    sales_to_invoice_count = fields.Integer(

Total Changes: 47

[IMP] crm: UI adjustments, simplify kanban

The kanban view for teams is mainly use to navigate between pipelines.

We remove all of the aggregated stats, which can be found using
grouping/pivot views. And we make clicking the team go directly to the
pipeline.

This declutters the views and ensures we don't compute all these values
for no reason every time a user simply wants to check a pipe.

Additionally:
* make "teams" menu accessible to all
* re-allign some fields in modal views
* random team colors
* some rewordings

Because random team colors updates the state of the random generator
a test with fixed seed is updated to match the new values at compute time.
Results are still as expected.

Seed 1870 no longer gives funny results :(

task-4568114

Part-of: odoo/odoo#203918
Related: odoo/enterprise#82421
Related: odoo/upgrade#7467
Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/sale/models/crm_team.py
+++ b/addons/sale/models/crm_team.py
@@ -17,55 +17,8 @@ class CrmTeam(models.Model):
     invoiced_target = fields.Float(
         string='Invoicing Target',
         help="Revenue Target for the current month (untaxed total of paid invoices).")
-    quotations_count = fields.Integer(
-        compute='_compute_quotations_to_invoice',
-        string='Number of quotations to invoice', readonly=True)
-    quotations_amount = fields.Float(
-        compute='_compute_quotations_to_invoice',
-        string='Amount of quotations to invoice', readonly=True)
-    sales_to_invoice_count = fields.Integer(
-        compute='_compute_sales_to_invoice',
-        string='Number of sales to invoice', readonly=True)
     sale_order_count = fields.Integer(compute='_compute_sale_order_count', string='# Sale Orders')
 
-    def _compute_quotations_to_invoice(self):
-        query = self.env['sale.order']._where_calc([
-            ('team_id', 'in', self.ids),
-            ('state', 'in', ['draft', 'sent']),
-        ])
-        self.env['sale.order']._apply_ir_rules(query, 'read')
-        select_sql = SQL("""
-            SELECT team_id, count(*), sum(amount_total /
-                CASE COALESCE(currency_rate, 0)
-                WHEN 0 THEN 1.0
-                ELSE currency_rate
-                END
-            ) as amount_total
-            FROM sale_order
-            WHERE %s
-            GROUP BY team_id
-        """, query.where_clause or SQL("TRUE"))
-        self.env.cr.execute(select_sql)
-        quotation_data = self.env.cr.dictfetchall()
-        teams = self.browse()
-        for datum in quotation_data:
-            team = self.browse(datum['team_id'])
-            team.quotations_amount = datum['amount_total']
-            team.quotations_count = datum['count']
-            teams |= team
-        remaining = (self - teams)
-        remaining.quotations_amount = 0
-        remaining.quotations_count = 0
-
-    def _compute_sales_to_invoice(self):
-        sale_order_data = self.env['sale.order']._read_group([
-            ('team_id', 'in', self.ids),
-            ('invoice_status','=','to invoice'),
-        ], ['team_id'], ['__count'])
-        data_map = {team.id: count for team, count in sale_order_data}
-        for team in self:
-            team.sales_to_invoice_count = data_map.get(team.id,0.0)
-
     def _compute_invoiced(self):
         if self.ids:
             today = fields.Date.today()
