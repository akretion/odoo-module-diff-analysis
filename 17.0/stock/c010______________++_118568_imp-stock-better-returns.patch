PR: https://github.com/odoo/odoo/pull/118568

From: ccb41edf2b8fd9d49188f3a3c97735ab682cff62
From: Pieter Claeys (clpi)
Date: 2023-06-23 16:00:05

Structural Changes: 6
Total Changes: 79

[IMP] stock: better returns

Improve the returns process by adding the following improvements:
- Removal of the 'return' operations type. Returns of deliveries now
become receipts.
- Update of the `stock_picking_return` wizard by removing the onchange
on picking_id.
- Show returns in the sale portal, with a new 'return label' PDF report
- Enable returns for multi-step receipts on purchases

Community PR: https://github.com/odoo/odoo/pull/118568
Enterprise PR: https://github.com/odoo/enterprise/pull/39761

closes odoo/odoo#118568

Task: 3081370
Related: odoo/upgrade#4660
Related: odoo/enterprise#39761
Signed-off-by: Tiffany Chang <tic@odoo.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -189,6 +189,7 @@ class StockMove(models.Model):
         help="Computes when a move should be reserved")
     product_packaging_id = fields.Many2one('product.packaging', 'Packaging', domain="[('product_id', '=', product_id)]", check_company=True)
     from_immediate_transfer = fields.Boolean(related="picking_id.immediate_transfer")
+    show_reserved = fields.Boolean(compute='_compute_show_reserved')
 
     @api.depends('product_id')
     def _compute_product_uom(self):
@@ -310,7 +311,7 @@ class StockMove(models.Model):
         """ This will return the move lines to consider when applying _quantity_done_compute on a stock.move.
         In some context, such as MRP, it is necessary to compute quantity_done on filtered sock.move.line."""
         self.ensure_one()
-        if self.picking_type_id.show_reserved is False:
+        if not self.show_reserved:
             return self.move_line_nosuggest_ids
         return self.move_line_ids
 
@@ -327,6 +328,11 @@ class StockMove(models.Model):
             else:
                 move.delay_alert_date = False
 
+    @api.depends('picking_type_id', 'origin_returned_move_id')
+    def _compute_show_reserved(self):
+        for move in self:
+            move.show_reserved = move.picking_type_id.show_reserved or move.origin_returned_move_id
+
     def _quantity_done_sml(self):
         self.ensure_one()
         quantity = 0
@@ -551,14 +557,14 @@ Please change the quantity done or the rounding precision of your unit of measur
             )
             lots_by_move_id_list.append({move.id: lot_ids for move, lot_ids in lots_by_move_id})
         for move in self:
-            move.lot_ids = lots_by_move_id_list[0 if move.picking_type_id.show_reserved else 1].get(move._origin.id, [])
+            move.lot_ids = lots_by_move_id_list[0 if move.show_reserved else 1].get(move._origin.id, [])
 
     def _set_lot_ids(self):
         for move in self:
             if move.product_id.tracking != 'serial':
                 continue
             move_lines_commands = []
-            if move.picking_type_id.show_reserved is False:
+            if not move.show_reserved:
                 mls = move.move_line_nosuggest_ids
             else:
                 mls = move.move_line_ids
@@ -789,7 +795,7 @@ Please change the quantity done or the rounding precision of your unit of measur
         # reserved move lines. We do this by displaying `move_line_nosuggest_ids`. We use
         # different views to display one field or another so that the webclient doesn't have to
         # fetch both.
-        if self.picking_type_id.show_reserved:
+        if self.show_reserved:
             view = self.env.ref('stock.view_stock_move_operations')
         else:
             view = self.env.ref('stock.view_stock_move_nosuggest_operations')
@@ -834,7 +840,7 @@ Please change the quantity done or the rounding precision of your unit of measur
         since there's no way to undo the action.
         """
         self.ensure_one()
-        if self.picking_type_id.show_reserved:
+        if self.show_reserved:
             move_lines = self.move_line_ids
         else:
             move_lines = self.move_line_nosuggest_ids
@@ -910,7 +916,7 @@ Please change the quantity done or the rounding precision of your unit of measur
         lot_names = self.env['stock.lot'].generate_lot_names(next_serial, next_serial_count or self.next_serial_count)
         field_data = [{'lot_name': lot_name[0], 'qty_done': lot_name[1]} for lot_name in lot_names]
         move_lines_commands = self._generate_serial_move_line_commands(field_data)
-        if self.picking_type_id.show_reserved:
+        if self.show_reserved:
             self.move_line_ids = move_lines_commands
         else:
             self.move_line_nosuggest_ids = move_lines_commands
@@ -954,7 +960,7 @@ Please change the quantity done or the rounding precision of your unit of measur
                     break
             move_lines_vals.append(move_line_vals)
         move_lines_commands = self._generate_serial_move_line_commands(move_lines_vals, location_dest_id=location_id)
-        if self.picking_type_id.show_reserved:
+        if self.show_reserved:
             self.update({'move_line_ids': move_lines_commands})
         else:
             self.update({'move_line_nosuggest_ids': move_lines_commands})
@@ -1279,7 +1285,7 @@ Please change the quantity done or the rounding precision of your unit of measur
             'product_uom_id': self.product_id.uom_id.id,
         }
         # Select the right move lines depending of the picking type's configuration.
-        move_lines = self['move_line_ids' if self.picking_type_id.show_reserved else 'move_line_nosuggest_ids']
+        move_lines = self['move_line_ids' if self.show_reserved else 'move_line_nosuggest_ids']
         move_lines = move_lines.filtered(lambda ml: not ml.lot_id and not ml.lot_name)
 
         if origin_move_line:

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -43,6 +43,9 @@ class PickingType(models.Model):
         'stock.location', 'Default Destination Location',
         check_company=True,
         help="This is the default destination location when you create a picking manually with this operation type. It is possible however to change it or that the routes put another location. If it is empty, it will check for the customer location on the partner. ")
+    default_location_return_id = fields.Many2one('stock.location', 'Default returns location', check_company=True,
+        help="This is the default location for returns created from a picking with this operation type.",
+        domain="[('return_location', '=', 'True')]")
     code = fields.Selection([('incoming', 'Receipt'), ('outgoing', 'Delivery'), ('internal', 'Internal Transfer')], 'Type of Operation', required=True)
     return_picking_type_id = fields.Many2one(
         'stock.picking.type', 'Operation Type for Returns',
@@ -67,7 +70,8 @@ class PickingType(models.Model):
     show_reserved = fields.Boolean(
         'Pre-fill Detailed Operations', default=True,
         help="If this checkbox is ticked, Odoo will automatically pre-fill the detailed "
-        "operations with the corresponding products, locations and lot/serial numbers.")
+        "operations with the corresponding products, locations and lot/serial numbers. "
+        "For moves that are returns, the detailed operations will always be prefilled, regardless of this option.")
     reservation_method = fields.Selection(
         [('at_confirm', 'At Confirmation'), ('manual', 'Manually'), ('by_date', 'Before scheduled date')],
         'Reservation Method', required=True, default='at_confirm',
@@ -301,6 +305,11 @@ class Picking(models.Model):
         check_company=True,
         help="If this shipment was split, then this field links to the shipment which contains the already processed part.")
     backorder_ids = fields.One2many('stock.picking', 'backorder_id', 'Back Orders')
+    return_id = fields.Many2one('stock.picking', 'Return of', copy=False, index='btree_not_null', readonly=True, check_company=True,
+        help="If this picking was created as a return of another picking, this field links to the original picking.")
+    return_ids = fields.One2many('stock.picking', 'return_id', 'Returns')
+    return_count = fields.Integer('# Returns', compute='_compute_return_count', compute_sudo=False)
+
     move_type = fields.Selection([
         ('direct', 'As soon as possible'), ('one', 'When all products are ready')], 'Shipping Policy',
         default='direct', required=True,
@@ -685,6 +694,11 @@ class Picking(models.Model):
                 picking.location_id = location_id
                 picking.location_dest_id = location_dest_id
 
+    @api.depends('return_ids')
+    def _compute_return_count(self):
+        for picking in self:
+            picking.return_count = len(picking.return_ids)
+
     def _get_show_allocation(self, picking_type_id):
         """ Helper method for computing "show_allocation" value.
         Separated out from _compute function so it can be reused in other models (e.g. batch).
@@ -1612,5 +1626,22 @@ class Picking(models.Model):
         )
         return True
 
+    def action_see_returns(self):
+        self.ensure_one()
+        if len(self.return_ids) == 1:
+            return {
+                "type": "ir.actions.act_window",
+                "res_model": "stock.picking",
+                "views": [[False, "form"]],
+                "res_id": self.return_ids.id
+            }
+        return {
+            'name': _('Returns'),
+            "type": "ir.actions.act_window",
+            "res_model": "stock.picking",
+            "views": [[False, "tree"], [False, "form"]],
+            "domain": [('id', 'in', self.return_ids.ids)],
+        }
+
     def _get_report_lang(self):
         return self.move_ids and self.move_ids[0].partner_id.lang or self.partner_id.lang or self.env.lang

--- a/addons/stock/models/stock_warehouse.py
+++ b/addons/stock/models/stock_warehouse.py
@@ -76,7 +76,6 @@ class Warehouse(models.Model):
     out_type_id = fields.Many2one('stock.picking.type', 'Out Type', check_company=True)
     in_type_id = fields.Many2one('stock.picking.type', 'In Type', check_company=True)
     int_type_id = fields.Many2one('stock.picking.type', 'Internal Type', check_company=True)
-    return_type_id = fields.Many2one('stock.picking.type', 'Return Type', check_company=True)
     crossdock_route_id = fields.Many2one('stock.route', 'Crossdock Route', ondelete='restrict')
     reception_route_id = fields.Many2one('stock.route', 'Receipt Route', ondelete='restrict')
     delivery_route_id = fields.Many2one('stock.route', 'Delivery Route', ondelete='restrict')
@@ -349,7 +348,7 @@ class Warehouse(models.Model):
                 warehouse_data[picking_type] = PickingType.create(values).id
 
         if 'out_type_id' in warehouse_data:
-            PickingType.browse(warehouse_data['out_type_id']).write({'return_picking_type_id': warehouse_data.get('return_type_id', False)})
+            PickingType.browse(warehouse_data['out_type_id']).write({'return_picking_type_id': warehouse_data.get('in_type_id', False)})
         if 'in_type_id' in warehouse_data:
             PickingType.browse(warehouse_data['in_type_id']).write({'return_picking_type_id': warehouse_data.get('out_type_id', False)})
         return warehouse_data
@@ -941,11 +940,7 @@ class Warehouse(models.Model):
             },
             'int_type_id': {
                 'barcode': self.code.replace(" ", "").upper() + "-INTERNAL",
-            },
-            'return_type_id': {
-                'default_location_dest_id': output_loc.id,
-                'barcode': self.code.replace(" ", "").upper() + "-RETURNS",
-            },
+            }
         }
 
     def _get_picking_type_create_values(self, max_sequence):
@@ -1007,16 +1002,6 @@ class Warehouse(models.Model):
                 'sequence': max_sequence + 2,
                 'sequence_code': 'INT',
                 'company_id': self.company_id.id,
-            }, 'return_type_id': {
-                'name': _('Returns'),
-                'code': 'incoming',
-                'use_create_lots': False,
-                'use_existing_lots': True,
-                'default_location_src_id': False,
-                'sequence': max_sequence + 6,
-                'show_reserved': True,
-                'sequence_code': 'IN',
-                'company_id': self.company_id.id,
             },
         }, max_sequence + 6
 
@@ -1052,11 +1037,6 @@ class Warehouse(models.Model):
                 'prefix': code + '/INT/', 'padding': 5,
                 'company_id': self.company_id.id,
             },
-            'return_type_id': {
-                'name': name + ' ' + _('Sequence return'),
-                'prefix': code + '/RET/', 'padding': 5,
-                'company_id': self.company_id.id,
-            },
         }
 
     def _format_rulename(self, from_loc, dest_loc, suffix):
