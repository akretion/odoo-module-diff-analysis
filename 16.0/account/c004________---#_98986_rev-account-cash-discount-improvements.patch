PR: https://github.com/odoo/odoo/pull/98986

From: 8b1ed8e510f1324f1c3579b844c19ccceaf05d57
From: Laurent Smet
Date: 2022-08-27 01:33:55

Breaking data model changes scores: del:13 + add:0, change matches:
-    invoice_early_pay_amount_after_discount = fields.Monetary(
-    early_payment_applicable = fields.Boolean(string="True if the conditions required to offer an EPD are fulfilled.", compute="_compute_early_payment_applicable")
-    has_early_payment = fields.Boolean(string="Apply Early Payment Discount", compute="_compute_has_early_payment", readonly=False, store=True)
-    percentage_to_discount = fields.Float("Discount", digits='Discount', default=2)
-    discount_computation = fields.Selection([
-    discount_days = fields.Integer(string='Availability', required=True, default=7)
-    discount_account_id = fields.Many2one(comodel_name='account.account', string='Counterpart Account')
-    account_journal_cash_discount_expense_id = fields.Many2one(comodel_name='account.account.template', string='Cash Discount Write-Off Expense Account',)
-    account_journal_cash_discount_income_id = fields.Many2one(comodel_name='account.account.template', string='Cash Discount Write-Off Income Account',)
-    account_journal_cash_discount_income_id = fields.Many2one(comodel_name='account.account', string='Cash Discount Write-Off Income Account')
-    account_journal_cash_discount_expense_id = fields.Many2one(comodel_name='account.account', string='Cash Discount Write-Off Expense Account')
-    account_journal_cash_discount_income_id = fields.Many2one(
-    account_journal_cash_discount_expense_id = fields.Many2one(

Total Changes: 316

[REV] account: cash discount improvements

Current task is not covered the whole cash discount feature. For now, we decided to revert the current feature and make a new more complete one later.

This reverts commit 7482aff6d719722f93f71d169d27d1c3e156ebd7.

closes odoo/odoo#98986

Related: odoo/enterprise#30783
Signed-off-by: Quentin De Paoli <qdp@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -444,12 +444,6 @@ class AccountMove(models.Model):
         tracking=True,
     )
 
-    # ==== Early payment cash discount field ====
-    invoice_early_pay_amount_after_discount = fields.Monetary(
-        compute='_compute_early_pay_amount_after_discount',
-        help="Total amount left to pay after the discount was applied",
-    )
-
     # === Reverse feature fields === #
     reversed_entry_id = fields.Many2one(
         comodel_name='account.move',
@@ -1162,21 +1156,6 @@ class AccountMove(models.Model):
                 # Non-invoice moves don't support that field (because of multicurrency: all lines of the invoice share the same currency)
                 move.tax_totals = None
 
-    def _get_report_early_payment_totals_values(self):
-        self.ensure_one()
-
-        if self.move_type not in ['out_invoice', 'out_receipt', 'in_invoice', 'in_receipt'] or \
-                not self.payment_state == 'not_paid' or \
-                not self.invoice_payment_term_id.has_early_payment:
-            return
-
-        base_lines = self.line_ids.filtered(lambda x: x.display_type == 'product')
-        return self.env['account.tax']._prepare_tax_totals(
-            [x._convert_to_tax_base_line_dict() for x in base_lines],
-            self.currency_id,
-            early_payment_term=self.invoice_payment_term_id,
-        )
-
     @api.depends('partner_id', 'invoice_source_email', 'partner_id.name')
     def _compute_invoice_partner_display_info(self):
         for move in self:
@@ -1295,36 +1274,6 @@ class AccountMove(models.Model):
                 updated_credit = move.partner_id.credit + move.amount_total_signed
                 move.partner_credit_warning = self._build_credit_warning_message(move, updated_credit)
 
-    @api.depends('invoice_payment_term_id', 'amount_residual_signed', 'currency_id')
-    def _compute_early_pay_amount_after_discount(self):
-        for record in self:
-            if record.invoice_payment_term_id.has_early_payment:
-                percentage_to_discount = record.invoice_payment_term_id.percentage_to_discount
-                discount_computation = self.invoice_payment_term_id.discount_computation
-
-                discounted_amount_untaxed = (100 - percentage_to_discount) * record.amount_untaxed / 100
-                if discount_computation == 'included':
-                    discounted_amount_tax = (100 - percentage_to_discount) * record.amount_tax / 100
-                else:
-                    discounted_amount_tax = record.amount_tax
-                record.invoice_early_pay_amount_after_discount = discounted_amount_untaxed + discounted_amount_tax
-                if record.currency_id.compare_amounts(record.invoice_early_pay_amount_after_discount, 0.0) <= 0.0:
-                    record.invoice_early_pay_amount_after_discount = 0
-            else:
-                record.invoice_early_pay_amount_after_discount = 0
-
-    def _is_eligible_for_early_discount(self, payment_date):
-        '''
-        An early payment discount is possible if the option has been activated,
-        no partial payment was registered,
-        and the payment date is before the last early_payment_date possible.
-        '''
-        self.ensure_one()
-        return self.move_type in ['out_invoice', 'out_receipt', 'in_invoice', 'in_receipt'] and \
-               self.invoice_payment_term_id.has_early_payment and \
-               self.payment_state == 'not_paid' and \
-               payment_date <= self.invoice_payment_term_id._get_last_date_for_discount(self.invoice_date)
-
     def _build_credit_warning_message(self, record, updated_credit):
         ''' Build the warning message that will be displayed in a yellow banner on top of the current record
             if the partner exceeds a credit limit (set on the company or the partner itself).

--- a/addons/account/models/account_payment_term.py
+++ b/addons/account/models/account_payment_term.py
@@ -4,7 +4,6 @@ from odoo import api, exceptions, fields, models, _
 from odoo.exceptions import UserError, ValidationError
 
 from dateutil.relativedelta import relativedelta
-from datetime import timedelta
 
 
 class AccountPaymentTerm(models.Model):
@@ -22,17 +21,6 @@ class AccountPaymentTerm(models.Model):
     company_id = fields.Many2one('res.company', string='Company')
     sequence = fields.Integer(required=True, default=10)
 
-    # -------Early payment discount fields-------
-    early_payment_applicable = fields.Boolean(string="True if the conditions required to offer an EPD are fulfilled.", compute="_compute_early_payment_applicable")
-    has_early_payment = fields.Boolean(string="Apply Early Payment Discount", compute="_compute_has_early_payment", readonly=False, store=True)
-    percentage_to_discount = fields.Float("Discount", digits='Discount', default=2)
-    discount_computation = fields.Selection([
-        ('included', 'Tax included'),
-        ('excluded', 'Tax excluded'),
-       ], string='Computation', default='included')
-    discount_days = fields.Integer(string='Availability', required=True, default=7)
-    discount_account_id = fields.Many2one(comodel_name='account.account', string='Counterpart Account')
-
     @api.constrains('line_ids')
     def _check_lines(self):
         for terms in self:
@@ -107,32 +95,6 @@ class AccountPaymentTerm(models.Model):
             ).unlink()
         return super(AccountPaymentTerm, self).unlink()
 
-    @api.depends('line_ids')
-    def _compute_early_payment_applicable(self):
-        for term in self:
-            term.early_payment_applicable = not any(line.value != 'balance' for line in term.line_ids)
-
-    @api.depends('early_payment_applicable')
-    def _compute_has_early_payment(self):
-        for term in self:
-            if not term.early_payment_applicable:
-                term.has_early_payment = False
-
-    @api.onchange('discount_days')
-    def _onchange_discount_days(self):
-        if self.discount_days <= 0:
-            raise ValidationError(_("The discount availability must be strictly positive."))
-
-    @api.onchange('percentage_to_discount')
-    def _onchange_percentage_to_discount(self):
-        if self.percentage_to_discount <= 0:
-            raise ValidationError(_("The discount percentage must be strictly positive."))
-        if self.percentage_to_discount > 100:
-            raise ValidationError(_("The discount percentage cannot exceed 100."))
-
-    def _get_last_date_for_discount(self, move_date):
-        return move_date + timedelta(days=self.discount_days)
-
 
 class AccountPaymentTermLine(models.Model):
     _name = "account.payment.term.line"

--- a/addons/account/models/account_reconcile_model.py
+++ b/addons/account/models/account_reconcile_model.py
@@ -809,126 +809,74 @@ class AccountReconcileModel(models.Model):
         return self.env['res.partner']
 
     def _get_invoice_matching_amls_result(self, st_line, partner, candidate_vals):
-        def _create_result_dict(amls_values_list, status):
-            if 'rejected' in status:
-                return
-
-            result = {
-                'amls': self.env['account.move.line'],
-                'amls_values_list': amls_values_list,
-            }
-            for aml_values in amls_values_list:
-                result['amls'] |= aml_values['aml']
-
-            if 'allow_write_off' in status and self.line_ids:
-                result['status'] = 'write_off'
-
-            if 'allow_auto_reconcile' in status and candidate_vals['allow_auto_reconcile'] and self.auto_reconcile:
-                result['auto_reconcile'] = True
-
-            return result
-
         st_line_currency = st_line.foreign_currency_id or st_line.currency_id
-        st_line_amount = st_line._prepare_move_line_default_vals()[1]['amount_currency']
-        sign = 1 if st_line_amount > 0.0 else -1
 
         amls = candidate_vals['amls']
-        amls_values_list = []
-        same_currency_mode = amls.currency_id == st_line_currency
-        for aml in amls:
-            extra_aml_values = {}
-
-            amount_residual = aml.amount_residual
-            amount_residual_currency = aml.amount_residual_currency
-
-            # Manage the early payment discount.
-            if same_currency_mode and aml.move_id._is_eligible_for_early_discount(st_line.date):
-                amount_residual = aml.move_id.amount_total_signed
-                amount_residual_currency = -aml.move_id.invoice_early_pay_amount_after_discount * sign
-                discounted_balance = aml.amount_residual_currency - amount_residual_currency
-
-                if aml.move_id.move_type == 'out_invoice':
-                    account = aml.company_id.account_journal_cash_discount_expense_id
-                else:
-                    account = aml.company_id.account_journal_cash_discount_income_id
-
-                extra_aml_values['early_payment_vals'] = {
-                    'name': _("%s - Early Payment Discount", aml.display_name),
-                    'account': account,
-                    'balance': discounted_balance,
-                }
-
-            amls_values_list.append({
-                'aml': aml,
-                'amount_residual': amount_residual,
-                'amount_residual_currency': amount_residual_currency,
-                **extra_aml_values,
-            })
+        if amls.currency_id == st_line_currency:
+            st_line_amount = st_line._prepare_move_line_default_vals()[1]['amount_currency']
+            sign = 1 if st_line_amount > 0.0 else -1
 
-        kepts_amls_values_list = []
-        sum_amount_residual_currency = 0.0
-        if same_currency_mode:
-            for aml_values in amls_values_list:
+            kepts_amls = self.env['account.move.line']
+            sum_aml_residual = 0.0
+            for aml in amls:
 
-                if st_line_currency.compare_amounts(st_line_amount, -aml_values['amount_residual_currency']) == 0:
+                if st_line_currency.compare_amounts(st_line_amount, -aml.amount_residual_currency) == 0:
                     # Special case: the amounts are the same, submit the line directly.
-                    kepts_amls_values_list = [aml_values]
+                    kepts_amls = aml
                     break
 
-                if st_line_currency.compare_amounts(sign * (st_line_amount + sum_amount_residual_currency), 0.0) > 0:
+                elif st_line_currency.compare_amounts(sign * (st_line_amount + sum_aml_residual), 0.0) > 0:
                     # Here, we still have room for other candidates ; so we add the current one to the list we keep.
                     # Then, we continue iterating, even if there is no room anymore, just in case one of the following candidates
                     # is an exact match, which would then be preferred on the current candidates.
-                    kepts_amls_values_list.append(aml_values)
-                    sum_amount_residual_currency += aml_values['amount_residual_currency']
-
-        # Try to match the amls having the same currency as the statement line.
-        if kepts_amls_values_list:
-            status = self._check_rule_propositions(st_line, kepts_amls_values_list)
-            result = _create_result_dict(kepts_amls_values_list, status)
-            if result:
-                return result
-
-        # Try to match the whole candidates.
-        if amls:
-            status = self._check_rule_propositions(st_line, amls_values_list)
-            result = _create_result_dict(amls_values_list, status)
-            if result:
-                return result
-
-    def _check_rule_propositions(self, st_line, amls_values_list):
+                    kepts_amls |= aml
+                    sum_aml_residual += aml.amount_residual_currency
+        else:
+            kepts_amls = amls
+
+        # We check the amount criteria of the reconciliation model, and select the
+        # kept_candidates if they pass the verification.
+        status = self._check_rule_propositions(st_line, kepts_amls)
+        if 'rejected' in status:
+            return None
+
+        rslt = {'amls': kepts_amls}
+
+        if 'allow_write_off' in status and self.line_ids:
+            rslt['status'] = 'write_off'
+
+        if 'allow_auto_reconcile' in status and candidate_vals['allow_auto_reconcile'] and self.auto_reconcile:
+            rslt['auto_reconcile'] = True
+
+        return rslt
+
+    def _check_rule_propositions(self, st_line, amls):
         """ Check restrictions that can't be handled for each move.line separately.
         Note: Only used by models having a type equals to 'invoice_matching'.
-        :param st_line:             The statement line.
-        :param amls_values_list:    The candidates account.move.line as a list of dict:
-            * aml:                          The record.
-            * amount_residual:              The amount residual to consider.
-            * amount_residual_currency:     The amount residual in foreign currency to consider.
+
+        :param st_line:     The statement line.
+        :param amls:        The candidates account.move.line.
         :return: A string representing what to do with the candidates:
             * rejected:             Reject candidates.
             * allow_write_off:      Allow to generate the write-off from the reconcile model lines if specified.
             * allow_auto_reconcile: Allow to automatically reconcile entries if 'auto_validate' is enabled.
         """
-        self.ensure_one()
-
         if not self.allow_payment_tolerance:
             return {'allow_write_off', 'allow_auto_reconcile'}
+        if not amls:
+            return {'rejected'}
 
-        st_line_currency = st_line.foreign_currency_id or st_line.currency_id
+        currency = st_line.foreign_currency_id or st_line.currency_id
         st_line_amount_curr = st_line._prepare_move_line_default_vals()[1]['amount_currency']
         amls_amount_curr = sum(
-            st_line._prepare_counterpart_amounts_using_st_line_rate(
-                aml_values['aml'].currency_id,
-                aml_values['amount_residual'],
-                aml_values['amount_residual_currency'],
-            )['amount_currency']
-            for aml_values in amls_values_list
+            st_line._prepare_counterpart_amounts_using_st_line_rate(aml.currency_id, aml.amount_residual, aml.amount_residual_currency)['amount_currency']
+            for aml in amls
         )
         sign = 1 if st_line_amount_curr > 0.0 else -1
         amount_curr_after_rec = sign * (amls_amount_curr + st_line_amount_curr)
 
         # The statement line will be fully reconciled.
-        if st_line_currency.is_zero(amount_curr_after_rec):
+        if currency.is_zero(amount_curr_after_rec):
             return {'allow_auto_reconcile'}
 
         # The payment amount is higher than the sum of invoices.

--- a/addons/account/models/account_tax.py
+++ b/addons/account/models/account_tax.py
@@ -807,7 +807,8 @@ class AccountTax(models.Model):
             'analytic_account_id': line_vals['analytic_account'].id if tax.analytic else False,
         }
 
-    def _compute_taxes(self, base_lines, tax_lines=None, handle_price_include=True, include_caba_tags=False, early_payment_term=None):
+    def _compute_taxes(self, base_lines, tax_lines=None,
+                       handle_price_include=True, include_caba_tags=False):
         """ Generic method to compute the taxes for different business models.
 
         :param base_lines: A list of python dictionaries created using the '_convert_to_tax_base_line_dict' method.
@@ -815,7 +816,6 @@ class AccountTax(models.Model):
         :param handle_price_include:    Manage the price-included taxes. If None, use the 'handle_price_include' key
                                         set on base lines.
         :param include_caba_tags: Manage tags for taxes being exigible on_payment.
-        :param early_payment_term:  The payment term to consider for the early payment discount.
         :return: A python dictionary containing:
 
             The complete diff on tax lines if 'tax_lines' is passed as parameter:
@@ -852,15 +852,10 @@ class AccountTax(models.Model):
 
         base_line_map = {}
         for line_vals in base_lines:
-            orig_price_unit_after_discount = line_vals['price_unit'] * (1 - (line_vals['discount'] / 100.0))
-            price_unit_after_discount = orig_price_unit_after_discount
+            price_unit_after_discount = line_vals['price_unit'] * (1 - (line_vals['discount'] / 100.0))
             taxes = line_vals['taxes']._origin
             currency = line_vals['currency'] or self.env.company.currency_id
 
-            if early_payment_term and early_payment_term.has_early_payment:
-                remaining_part_to_consider = (100 - early_payment_term.percentage_to_discount) / 100.0
-                price_unit_after_discount = remaining_part_to_consider * price_unit_after_discount
-
             if taxes:
 
                 if handle_price_include is None:
@@ -885,24 +880,6 @@ class AccountTax(models.Model):
                     'price_total': taxes_res['total_included'],
                 }
 
-                if early_payment_term \
-                        and early_payment_term.has_early_payment \
-                        and early_payment_term.discount_computation == 'excluded':
-                    new_taxes_res = taxes.with_context(**line_vals['extra_context']).compute_all(
-                        orig_price_unit_after_discount,
-                        currency=currency,
-                        quantity=line_vals['quantity'],
-                        product=line_vals['product'],
-                        partner=line_vals['partner'],
-                        is_refund=line_vals['is_refund'],
-                        handle_price_include=manage_price_include,
-                        include_caba_tags=include_caba_tags,
-                    )
-                    for tax_res, new_taxes_res in zip(taxes_res['taxes'], new_taxes_res['taxes']):
-                        delta_tax = new_taxes_res['amount'] - tax_res['amount']
-                        tax_res['amount'] += delta_tax
-                        to_update_vals['price_total'] += delta_tax
-
                 for tax_res in taxes_res['taxes']:
                     grouping_dict = self._get_generation_dict_from_base_line(line_vals, tax_res)
                     tax_res['grouping_dict'] = grouping_dict
@@ -1029,14 +1006,13 @@ class AccountTax(models.Model):
             })
         return tax_group_vals_list
 
-    def _prepare_tax_totals(self, base_lines, currency, tax_lines=None, early_payment_term=None):
+    def _prepare_tax_totals(self, base_lines, currency, tax_lines=None):
         """ Compute the tax totals details for the business documents.
-        :param base_lines:          A list of python dictionaries created using the '_convert_to_tax_base_line_dict' method.
-        :param currency:            The currency set on the business document.
-        :param tax_lines:           Optional list of python dictionaries created using the '_convert_to_tax_line_dict' method.
-                                    If specified, the taxes will be recomputed using them instead of recomputing the taxes on
-                                    the provided base lines.
-        :param early_payment_term:  The payment term to consider for the early payment discount.
+        :param base_lines:  A list of python dictionaries created using the '_convert_to_tax_base_line_dict' method.
+        :param currency:    The currency set on the business document.
+        :param tax_lines:   Optional list of python dictionaries created using the '_convert_to_tax_line_dict' method.
+                            If specified, the taxes will be recomputed using them instead of recomputing the taxes on
+                            the provided base lines.
         :return: A dictionary in the following form:
             {
                 'amount_total':                 The total amount to be displayed on the document, including every total
@@ -1086,7 +1062,6 @@ class AccountTax(models.Model):
             tax_results = self._compute_taxes(
                 base_lines,
                 tax_lines=tax_lines,
-                early_payment_term=early_payment_term,
             )
 
             for base_line_vals, to_update in tax_results['base_lines_to_update']:

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -136,9 +136,6 @@ class AccountChartTemplate(models.Model):
     default_cash_difference_expense_account_id = fields.Many2one('account.account.template', string="Cash Difference Expense Account")
     default_pos_receivable_account_id = fields.Many2one('account.account.template', string="PoS receivable account")
 
-    account_journal_cash_discount_expense_id = fields.Many2one(comodel_name='account.account.template', string='Cash Discount Write-Off Expense Account',)
-    account_journal_cash_discount_income_id = fields.Many2one(comodel_name='account.account.template', string='Cash Discount Write-Off Income Account',)
-
     property_account_receivable_id = fields.Many2one('account.account.template', string='Receivable Account')
     property_account_payable_id = fields.Many2one('account.account.template', string='Payable Account')
     property_account_expense_categ_id = fields.Many2one('account.account.template', string='Category of Expense Account')
@@ -200,24 +197,6 @@ class AccountChartTemplate(models.Model):
             'company_id': company.id,
         })
 
-    @api.model
-    def _create_cash_discount_expense_account(self, company, code_digits):
-        return self.env['account.account'].create({
-            'name': _("Cash Discount Expense Account"),
-            'code': 999997,
-            'account_type': 'expense',
-            'company_id': company.id,
-        })
-
-    @api.model
-    def _create_cash_discount_income_account(self, company, code_digits):
-        return self.env['account.account'].create({
-            'name': _("Cash Discount Income Account"),
-            'code': 999998,
-            'account_type': 'income_other',
-            'company_id': company.id,
-        })
-
     def try_loading(self, company=False, install_demo=True):
         """ Installs this chart of accounts for the current company if not chart
         of accounts had been created for it yet.
@@ -332,13 +311,6 @@ class AccountChartTemplate(models.Model):
         if not company.account_journal_suspense_account_id:
             company.account_journal_suspense_account_id = self._create_liquidity_journal_suspense_account(company, self.code_digits)
 
-        # Set default cash discount write-off accounts
-        if not company.account_journal_cash_discount_expense_id:
-            company.account_journal_cash_discount_expense_id = self._create_cash_discount_expense_account(company, self.code_digits)
-
-        if not company.account_journal_cash_discount_income_id:
-            company.account_journal_cash_discount_income_id = self._create_cash_discount_income_account(company, self.code_digits)
-
         if not company.account_journal_payment_debit_account_id:
             company.account_journal_payment_debit_account_id = self.env['account.account'].create({
                 'name': _("Outstanding Receipts"),
@@ -645,8 +617,6 @@ class AccountChartTemplate(models.Model):
             'account_default_pos_receivable_account_id': self.default_pos_receivable_account_id,
             'income_currency_exchange_account_id': self.income_currency_exchange_account_id,
             'expense_currency_exchange_account_id': self.expense_currency_exchange_account_id,
-            'account_journal_cash_discount_expense_id': self.account_journal_cash_discount_expense_id,
-            'account_journal_cash_discount_income_id': self.account_journal_cash_discount_income_id,
         }
 
         values = {}

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -1,11 +1,10 @@
 # -*- coding: utf-8 -*-
 
-import calendar
 from datetime import timedelta, datetime, date
+import calendar
 
 from odoo import fields, models, api, _
 from odoo.exceptions import ValidationError, UserError, RedirectWarning
-from odoo.tools.float_utils import float_round, float_is_zero
 from odoo.tools.mail import is_html_empty
 from odoo.tools.misc import format_date
 from odoo.tools.float_utils import float_round, float_is_zero
@@ -66,10 +65,6 @@ class ResCompany(models.Model):
     account_journal_suspense_account_id = fields.Many2one('account.account', string='Journal Suspense Account')
     account_journal_payment_debit_account_id = fields.Many2one('account.account', string='Journal Outstanding Receipts Account')
     account_journal_payment_credit_account_id = fields.Many2one('account.account', string='Journal Outstanding Payments Account')
-
-    account_journal_cash_discount_income_id = fields.Many2one(comodel_name='account.account', string='Cash Discount Write-Off Income Account')
-    account_journal_cash_discount_expense_id = fields.Many2one(comodel_name='account.account', string='Cash Discount Write-Off Expense Account')
-
     transfer_account_code_prefix = fields.Char(string='Prefix of the transfer accounts')
     account_sale_tax_id = fields.Many2one('account.tax', string="Default Sale Tax")
     account_purchase_tax_id = fields.Many2one('account.tax', string="Default Purchase Tax")

--- a/addons/account/models/res_config_settings.py
+++ b/addons/account/models/res_config_settings.py
@@ -159,21 +159,6 @@ class ResConfigSettings(models.TransientModel):
     # Quick encoding (fiduciary mode)
     quick_edit_mode = fields.Selection(string="Quick encoding", readonly=False, related='company_id.quick_edit_mode')
 
-    account_journal_cash_discount_income_id = fields.Many2one(
-        comodel_name='account.account',
-        string='Cash Discount Write-Off Income Account',
-        readonly=False,
-        related='company_id.account_journal_cash_discount_income_id',
-        domain="[('deprecated', '=', False), ('company_id', '=', company_id), \
-                ('account_type', 'in', ('income', 'income_other'))]")
-    account_journal_cash_discount_expense_id = fields.Many2one(
-        comodel_name='account.account',
-        string='Cash Discount Write-Off Expense Account',
-        readonly=False,
-        related='company_id.account_journal_cash_discount_expense_id',
-        domain="[('deprecated', '=', False), ('company_id', '=', company_id), \
-                ('account_type', '=', 'expense')]")
-
     def set_values(self):
         super().set_values()
         # install a chart of accounts for the given company (if required)
