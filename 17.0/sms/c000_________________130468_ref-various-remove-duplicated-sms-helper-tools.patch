PR: https://github.com/odoo/odoo/pull/130468

From: 626557147cefe9e8479a57d585138e4a3f6fc412
From: Thibault Delavall√©e
Date: 2023-08-02 16:50:17

Structural Changes: 1
Total Changes: 50

[REF] various: remove duplicated sms helper tools

RATIONALE

Simplify field management for mail / phone / sms flows. Make it working out
of the box, easier to use and tweak.

SPECIFICATIONS

Simplify model custom code when dealing with phone and sms by using helpers
and standard behavior defined on all models.

'_sms_get_partner_fields' was introduced at odoo/odoo@bdebcab0cea467e070c1936fed16173247abafdd to have a generic
implementation of finding partners on a record. Since then another version
has been added directly in 'mail' module, using '_mail_get_partners'.

'_sms_get_number_fields' was introduced at the same time to have a generic
implementation of finding numbers on a record. Since then a generic and
improved version has been added directly in 'phone_validation' module, see
'_phone_get_number_fields'.

Those method can therefore be removed, and replaced by the generic ones
available on BaseModel.

Task-3422449 (Mail, Phone: Move and improve field helpers)
Prepares Task-36879 (Mail: Support MultiCompany Aliases)

Part-of: odoo/odoo#130468

================================= pseudo patch: =================================

--- a/addons/sms/models/__init__.py
+++ b/addons/sms/models/__init__.py
@@ -7,7 +7,6 @@ from . import mail_followers
 from . import mail_message
 from . import mail_notification
 from . import mail_thread
-from . import mail_thread_phone
 from . import res_partner
 from . import sms_api
 from . import sms_sms

--- a/addons/sms/models/ir_model.py
+++ b/addons/sms/models/ir_model.py
@@ -18,7 +18,7 @@ class IrModel(models.Model):
         for model in self:
             if model.is_mail_thread:
                 ModelObject = self.env[model.model]
-                potential_fields = ModelObject._sms_get_number_fields() + ModelObject._sms_get_partner_fields()
+                potential_fields = ModelObject._phone_get_number_fields() + ModelObject._mail_get_partner_fields()
                 if any(fname in ModelObject._fields for fname in potential_fields):
                     model.is_mail_thread_sms = True
                     continue
@@ -31,7 +31,7 @@ class IrModel(models.Model):
             if model.model not in self.env:
                 continue
             ModelObject = self.env[model.model]
-            potential_fields = ModelObject._sms_get_number_fields() + ModelObject._sms_get_partner_fields()
+            potential_fields = ModelObject._phone_get_number_fields() + ModelObject._mail_get_partner_fields()
             if any(fname in ModelObject._fields for fname in potential_fields):
                 valid_models |= model
 

--- a/addons/sms/models/mail_thread.py
+++ b/addons/sms/models/mail_thread.py
@@ -42,34 +42,15 @@ class MailThread(models.AbstractModel):
     def _search_message_has_sms_error(self, operator, operand):
         return ['&', ('message_ids.has_sms_error', operator, operand), ('message_ids.author_id', '=', self.env.user.partner_id.id)]
 
-    def _sms_get_partner_fields(self):
-        """ This method returns the fields to use to find the contact to link
-        whensending an SMS. Having partner is not necessary, having only phone
-        number fields is possible. However it gives more flexibility to
-        notifications management when having partners. """
-        fields = []
-        if hasattr(self, 'partner_id'):
-            fields.append('partner_id')
-        if hasattr(self, 'partner_ids'):
-            fields.append('partner_ids')
-        return fields
-
     def _sms_get_default_partners(self):
         """ This method will likely need to be overridden by inherited models.
                :returns partners: recordset of res.partner
         """
         partners = self.env['res.partner']
-        for fname in self._sms_get_partner_fields():
+        for fname in self._mail_get_partner_fields():
             partners = partners.union(*self.mapped(fname))  # ensure ordering
         return partners
 
-    def _sms_get_number_fields(self):
-        """ This method returns the fields to use to find the number to use to
-        send an SMS on a record. """
-        if 'mobile' in self:
-            return ['mobile']
-        return []
-
     def _sms_get_recipients_info(self, force_field=False, partner_fallback=True):
         """" Get SMS recipient information on current record set. This method
         checks for numbers and sanitation in order to centralize computation.
@@ -82,7 +63,7 @@ class MailThread(models.AbstractModel):
             customer, force its number to found field number or fallback on customer fields;
 
         :param force_field: either give a specific field to find phone number, either
-            generic heuristic is used to find one based on ``_sms_get_number_fields``;
+            generic heuristic is used to find one based on ``_phone_get_number_fields``;
         :param partner_fallback: if no value found in the record, check its customer
             values based on ``_sms_get_default_partners``;
 
@@ -96,11 +77,11 @@ class MailThread(models.AbstractModel):
                 False it means number comes from the record itself, even if linked to a
                 customer;
             'field_store': field in which the number has been found (generally mobile or
-                phone, see ``_sms_get_number_fields``);
+                phone, see ``_phone_get_number_fields``);
         } for each record in self
         """
         result = dict.fromkeys(self.ids, False)
-        tocheck_fields = [force_field] if force_field else self._sms_get_number_fields()
+        tocheck_fields = [force_field] if force_field else self._phone_get_number_fields()
         for record in self:
             all_numbers = [record[fname] for fname in tocheck_fields if fname in record]
             all_partners = record._sms_get_default_partners()
@@ -122,7 +103,7 @@ class MailThread(models.AbstractModel):
             elif all_partners and partner_fallback:
                 partner = self.env['res.partner']
                 for partner in all_partners:
-                    for fname in self.env['res.partner']._sms_get_number_fields():
+                    for fname in self.env['res.partner']._phone_get_number_fields():
                         valid_number = phone_validation.phone_sanitize_numbers_w_record([partner[fname]], record)[partner[fname]]['sanitized']
                         if valid_number:
                             break

--- a/addons/sms/models/mail_thread_phone.py
+++ b/None
@@ -1,16 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import models
-
-
-class PhoneMixin(models.AbstractModel):
-    _inherit = 'mail.thread.phone'
-
-    def _sms_get_number_fields(self):
-        """ Add fields coming from mail.thread.phone implementation. """
-        phone_fields = self._phone_get_number_fields()
-        sms_fields = super(PhoneMixin, self)._sms_get_number_fields()
-        for fname in (f for f in sms_fields if f not in phone_fields):
-            phone_fields.append(fname)
-        return phone_fields
