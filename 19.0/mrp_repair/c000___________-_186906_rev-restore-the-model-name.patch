PR: https://github.com/odoo/odoo/pull/186906

From: 9144eb051538d5a92d403e1ad9c635ce39e090ec
From: Gorash
Date: 2024-11-14 10:39:02

Breaking data model changes scores: del:3 + add:0, change matches:
-    _inherit = ['mrp.production']
-    _inherit = ['repair.order']
-    _inherit = ['stock.move']

Total Changes: 6

[REV] *: Restore the model `_name`

Following internal discussions, the python typing and inheritance task is
canceled. The use of the class name instead of '_name' was done to allow
notations such as `partner_id = fields.Many2one[base.ResParter](string='Partner')`.
Since this notation is canceled, we put `_name` back (although the class
name is sufficient).

Partial revert:
https://github.com/odoo/enterprise/pull/69762
https://github.com/odoo/odoo/pull/178200

closes odoo/odoo#186906

Related: odoo/enterprise#73643
Signed-off-by: Raphael Collet <rco@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mrp_repair/models/production.py
+++ b/addons/mrp_repair/models/production.py
@@ -4,7 +4,7 @@ from odoo import api, fields, models, _
 
 
 class MrpProduction(models.Model):
-    _inherit = ['mrp.production']
+    _inherit = 'mrp.production'
 
     repair_count = fields.Integer(
         string='Count of source repairs',

--- a/addons/mrp_repair/models/repair.py
+++ b/addons/mrp_repair/models/repair.py
@@ -4,7 +4,7 @@ from odoo import api, models, fields, _
 
 
 class RepairOrder(models.Model):
-    _inherit = ['repair.order']
+    _inherit = 'repair.order'
 
     production_count = fields.Integer(
         'Count of MOs generated',
@@ -75,7 +75,7 @@ class RepairOrder(models.Model):
 
 
 class StockMove(models.Model):
-    _inherit = ['stock.move']
+    _inherit = 'stock.move'
 
     def _prepare_phantom_line_vals(self, bom_line, qty):
         self.ensure_one()
