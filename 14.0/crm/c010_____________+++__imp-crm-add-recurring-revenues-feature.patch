PR: https://github.com/odoo/odoo/pull/

From: a54f3852d612e4bd9341713680b1228570c27051
From: Patrick Hoste
Date: 2020-08-14 12:59:30

Structural Changes: 9
Total Changes: 39

[IMP] crm: add recurring revenues feature

PURPOSE

Allow users to configure contract recurrences and Monthly Recurring Revenues
on Opportunities they're trying to close. One short revenues are not sufficient
to cover real life use cases of CRM revenu analysis.

SPECIFICATIONS

Adds an option in the settings to activate the recurring revenue feature.
This feature is set on an opportunity to indicate a revenue that could be
perceived over time. This time indicator is set by the crm.recurring.plan
model in which the number of months is determined.

By default some plans are added in data. When using plans, revenues are
computed across the plan months.

LINKS

Task ID-2283052
odoo/odoo#54194
odoo/enterprise#12423
odoo/upgrade#1463

Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/crm/models/__init__.py
+++ b/addons/crm/models/__init__.py
@@ -12,3 +12,4 @@ from . import res_partner
 from . import digest
 from . import crm_lead_scoring_frequency
 from . import utm
+from . import crm_recurring_plan

--- a/addons/crm/models/crm_lead.py
+++ b/addons/crm/models/crm_lead.py
@@ -127,6 +127,14 @@ class Lead(models.Model):
     # Opportunity specific
     expected_revenue = fields.Monetary('Expected Revenue', currency_field='company_currency', tracking=True)
     prorated_revenue = fields.Monetary('Prorated Revenue', currency_field='company_currency', store=True, compute="_compute_prorated_revenue")
+    recurring_revenue = fields.Monetary('Recurring Revenues', currency_field='company_currency', groups="crm.group_use_recurring_revenues")
+    recurring_plan = fields.Many2one('crm.recurring.plan', string="Recurring Plan", groups="crm.group_use_recurring_revenues")
+    recurring_revenue_monthly = fields.Monetary('Expected MRR', currency_field='company_currency', store=True,
+                                               compute="_compute_recurring_revenue_monthly",
+                                               groups="crm.group_use_recurring_revenues")
+    recurring_revenue_monthly_prorated = fields.Monetary('Prorated MRR', currency_field='company_currency', store=True,
+                                               compute="_compute_recurring_revenue_monthly_prorated",
+                                               groups="crm.group_use_recurring_revenues")
     company_currency = fields.Many2one("res.currency", string='Currency', related='company_id.currency_id', readonly=True)
     # Dates
     date_closed = fields.Datetime('Closed Date', readonly=True, copy=False)
@@ -371,6 +379,16 @@ class Lead(models.Model):
         for lead in self:
             lead.prorated_revenue = round((lead.expected_revenue or 0.0) * (lead.probability or 0) / 100.0, 2)
 
+    @api.depends('recurring_revenue', 'recurring_plan.number_of_months')
+    def _compute_recurring_revenue_monthly(self):
+        for lead in self:
+            lead.recurring_revenue_monthly = (lead.recurring_revenue or 0.0) / (lead.recurring_plan.number_of_months or 1)
+
+    @api.depends('recurring_revenue_monthly', 'probability')
+    def _compute_recurring_revenue_monthly_prorated(self):
+        for lead in self:
+            lead.recurring_revenue_monthly_prorated = (lead.recurring_revenue_monthly or 0.0) * (lead.probability or 0) / 100.0
+
     def _compute_meeting_count(self):
         if self.ids:
             meeting_data = self.env['calendar.event'].sudo().read_group([

--- a/None
+++ b/addons/crm/models/crm_recurring_plan.py
@@ -0,0 +1,19 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class RecurringPlan(models.Model):
+    _name = "crm.recurring.plan"
+    _description = "CRM Recurring revenue plans"
+    _order = "sequence"
+
+    name = fields.Char('Plan Name', required=True, translate=True)
+    number_of_months = fields.Integer('# Months', required=True)
+    active = fields.Boolean('Active', default=True)
+    sequence = fields.Integer('Sequence', default=10)
+
+    _sql_constraints = [
+        ('check_number_of_months', 'CHECK(number_of_months >= 0)', 'The number of month can\'t be negative.'),
+    ]

--- a/addons/crm/models/res_config_settings.py
+++ b/addons/crm/models/res_config_settings.py
@@ -14,6 +14,7 @@ class ResConfigSettings(models.TransientModel):
         'Manual Assignment of Emails', config_parameter='crm.generate_lead_from_alias',
         compute="_compute_generate_lead_from_alias", readonly=False, store=True)
     group_use_lead = fields.Boolean(string="Leads", implied_group='crm.group_use_lead')
+    group_use_recurring_revenues = fields.Boolean(string="Recurring Revenues", implied_group='crm.group_use_recurring_revenues')
     module_crm_iap_lead = fields.Boolean("Generate new leads based on their country, industries, size, etc.")
     module_crm_iap_lead_website = fields.Boolean("Create Leads/Opportunities from your website's traffic")
     module_crm_iap_lead_enrich = fields.Boolean("Enrich your leads automatically with company data based on their email address.")
