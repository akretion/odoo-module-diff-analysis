PR: https://github.com/odoo/odoo/pull/39622

From: 92cf2474a2b6cbe13bb0d9f92f21a6f6b9c98a18
From: shivam shah
Date: 2019-11-26 07:35:34

Breaking data model changes score: 5, change matches:
-    on_change_fields = fields.Char(string="On Change Fields Trigger", help="Comma-separated list of field names that triggers the onchange.")
-    trigger_field_ids = fields.Many2many('ir.model.fields', string='Watched fields',
+    on_change_field_ids = fields.Many2many('ir.model.fields', 'model_id', string="On Change Fields Trigger", help="Fields that trigger the onchange.")
+    trigger_field_ids = fields.Many2many('ir.model.fields', string='Trigger Fields',

Total Changes: 15

[IMP] base_automation,sms: Improve the interface of automated action

Below points are improved in automated action
- Set no_create on model_id, crud_model_id, partner_ids, and channel_ids
- Set widget many2many tags and change string for trigger_field_ids
- Rename 'Trigger Condition' to 'Trigger'
- Change on_change_fields into a many2many to ir.model.fields
- Set 'Hours' as default of field trg_date_range_time
- Rename label of crud_model_id to 'Target Model'
- Rename label of sms_mass_keep_log to 'Log as Note'
- On creation of template set the default model
- Hide the 'Security' tab
- Set no_create on fields resource_ref and col1
- Make 'value' readonly when col1 is not set
- Rename 'Link using field' to 'Link Field'

Task-2082503

closes odoo/odoo#39622

Closes: #39622
Related: odoo/enterprise#6515
Signed-off-by: Aaron Bohy (aab) <aab@odoo.com>

================================= pseudo patch: =================================

--- a/addons/base_automation/models/base_automation.py
+++ b/addons/base_automation/models/base_automation.py
@@ -43,7 +43,7 @@ class BaseAutomation(models.Model):
         ('on_unlink', 'On Deletion'),
         ('on_change', 'Based on Form Modification'),
         ('on_time', 'Based on Timed Condition')
-        ], string='Trigger Condition', required=True)
+        ], string='Trigger', required=True)
     trg_date_id = fields.Many2one('ir.model.fields', string='Trigger Date',
                                   help="""When should the condition be triggered.
                                   If present, will be checked by the scheduler. If empty, will be checked at creation and update.""",
@@ -53,20 +53,20 @@ class BaseAutomation(models.Model):
                                     You can put a negative number if you need a delay before the
                                     trigger date, like sending a reminder 15 minutes before a meeting.""")
     trg_date_range_type = fields.Selection([('minutes', 'Minutes'), ('hour', 'Hours'), ('day', 'Days'), ('month', 'Months')],
-                                           string='Delay type', default='day')
+                                           string='Delay type', default='hour')
     trg_date_calendar_id = fields.Many2one("resource.calendar", string='Use Calendar',
                                             help="When calculating a day-based timed condition, it is possible to use a calendar to compute the date based on working days.")
     filter_pre_domain = fields.Char(string='Before Update Domain',
                                     help="If present, this condition must be satisfied before the update of the record.")
     filter_domain = fields.Char(string='Apply on', help="If present, this condition must be satisfied before executing the action rule.")
     last_run = fields.Datetime(readonly=True, copy=False)
-    on_change_fields = fields.Char(string="On Change Fields Trigger", help="Comma-separated list of field names that triggers the onchange.")
-    trigger_field_ids = fields.Many2many('ir.model.fields', string='Watched fields',
+    on_change_field_ids = fields.Many2many('ir.model.fields', 'model_id', string="On Change Fields Trigger", help="Fields that trigger the onchange.")
+    trigger_field_ids = fields.Many2many('ir.model.fields', string='Trigger Fields',
                                         help="The action will be triggered if and only if one of these fields is updated."
                                              "If empty, all fields are watched.")
 
     # which fields have an impact on the registry
-    CRITICAL_FIELDS = ['model_id', 'active', 'trigger', 'on_change_fields']
+    CRITICAL_FIELDS = ['model_id', 'active', 'trigger', 'on_change_field_ids']
 
     @api.onchange('model_id')
     def onchange_model_id(self):
@@ -80,6 +80,7 @@ class BaseAutomation(models.Model):
             self.trg_date_id = self.trg_date_range = self.trg_date_range_type = False
         elif self.trigger == 'on_time':
             self.filter_pre_domain = False
+            self.trg_date_range_type = 'hour'
 
     @api.onchange('trigger', 'state')
     def _onchange_state(self):
@@ -379,8 +380,8 @@ class BaseAutomation(models.Model):
             elif action_rule.trigger == 'on_change':
                 # register an onchange method for the action_rule
                 method = make_onchange(action_rule.id)
-                for field_name in action_rule.on_change_fields.split(","):
-                    Model._onchange_methods[field_name.strip()].append(method)
+                for field in action_rule.on_change_field_ids:
+                    Model._onchange_methods[field.name].append(method)
 
     def _unregister_hook(self):
         """ Remove the patches installed by _register_hook() """
