PR: https://github.com/odoo/odoo/pull/

From: cc9324f74084760da3e49f069e3ef62f0d4280d7
From: svs-odoo
Date: 2019-05-29 14:03:29

Structural Changes: 23.6
Total Changes: 516

[IMP] *: usability of Inventory Adjustment

Change the use of Inventory Adjustment, notable changes are:

    - Removed filter field: When user creates a new inventory
    adjustment, he can set one or multiple locations and/or products.
    An inventory adjustment will worry only about defined
    locations/products, but if neither product or location was set,
    it'll manage all stock.

    - Inventory Adjustment Lines have their own view instead of be
    listed on the Inventory Adjustment form view.
    Inventory adjustment lines have new color legend:
        - Red: The quantity is outdated.
        - Blue: There is difference between the on hand quantity and the
        counted quantity.
    New inventory lines created by the user are written in bold.

    - User can't modify already existing inventory lines, except for the
    counted quantity.

    - When an inventory line is outdated, the user has the possibility
    to select and update it, that'll recompute the on hand quantity.

    - When an inventory adjustment is validated, it will take in account
    only the difference between the theoretical quantity ('On Hand
    Quantity') and the counted quantity to adjust the quants.

    - When an inventory adjustment is canceled, it will keep its
    inventory lines and won't regenerate them when re-started.

    - When an Inventory Adjustment generates Account Moves, user can now
    find them in a stat button in the Inventory Adjustment form view.

Also, made some changes in demo data to match new requirement.

Task #1935921

================================= pseudo patch: =================================

--- a/addons/stock/models/stock_inventory.py
+++ b/addons/stock/models/stock_inventory.py
@@ -4,7 +4,8 @@
 from odoo import api, fields, models, _
 from odoo.addons import decimal_precision as dp
 from odoo.exceptions import UserError, ValidationError
-from odoo.tools import float_utils, float_compare
+from odoo.osv import expression
+from odoo.tools import float_compare, float_is_zero
 
 
 class Inventory(models.Model):
@@ -13,16 +14,21 @@ class Inventory(models.Model):
     _order = "date desc, id desc"
 
     @api.model
-    def _default_location_id(self):
-        company_user = self.env.company
-        warehouse = self.env['stock.warehouse'].search([('company_id', '=', company_user.id)], limit=1)
-        if warehouse:
-            return warehouse.lot_stock_id.id
-        else:
-            raise UserError(_('You must define a warehouse for the company: %s.') % (company_user.name,))
+    def _default_location_ids(self):
+        # If the multilocation group is not active, default the location to the one of the main
+        # warehouse.
+        if not self.user_has_groups('stock.group_stock_multi_locations'):
+            company_user = self.env.company
+            warehouse = self.env['stock.warehouse'].search([('company_id', '=', company_user.id)], limit=1)
+            if warehouse:
+                return [(4, warehouse.lot_stock_id.id)]
+
+    @api.model
+    def _domain_location_ids(self):
+        return [('company_id', '=', self.env.company.id), ('usage', 'in', ['internal', 'transit'])]
 
     name = fields.Char(
-        'Inventory Reference',
+        'Inventory Reference', default="Inventory",
         readonly=True, required=True,
         states={'draft': [('readonly', False)]})
     date = fields.Datetime(
@@ -50,137 +56,53 @@ class Inventory(models.Model):
         readonly=True, index=True, required=True,
         states={'draft': [('readonly', False)]},
         default=lambda self: self.env.company)
-    location_id = fields.Many2one(
-        'stock.location', 'Inventoried Location',
-        readonly=True, required=True,
-        states={'draft': [('readonly', False)]},
-        default=_default_location_id)
-    product_id = fields.Many2one(
-        'product.product', 'Inventoried Product',
-        readonly=True,
-        states={'draft': [('readonly', False)]},
-        help="Specify Product to focus your inventory on a particular Product.")
-    package_id = fields.Many2one(
-        'stock.quant.package', 'Inventoried Pack',
-        readonly=True,
-        states={'draft': [('readonly', False)]},
-        help="Specify Pack to focus your inventory on a particular Pack.")
-    partner_id = fields.Many2one(
-        'res.partner', 'Inventoried Owner',
+    location_ids = fields.Many2many(
+        'stock.location', string='Inventoried Location(s)',
         readonly=True,
         states={'draft': [('readonly', False)]},
-        help="Specify Owner to focus your inventory on a particular Owner.")
-    lot_id = fields.Many2one(
-        'stock.production.lot', 'Inventoried Lot/Serial Number',
-        copy=False, readonly=True,
+        default=lambda self: self._default_location_ids(),
+        domain=lambda self: self._domain_location_ids())
+    product_ids = fields.Many2many(
+        'product.product', string='Inventoried Product(s)',
+        domain=[('type', '=', 'product')], readonly=True,
         states={'draft': [('readonly', False)]},
-        help="Specify Lot/Serial Number to focus your inventory on a particular Lot/Serial Number.")
-    filter = fields.Selection(
-        string='Inventory of', selection='_selection_filter',
-        required=True,
-        default='none',
-        help="If you do an entire inventory, you can choose 'All Products' and it will prefill the inventory with the current stock.  If you only do some products  "
-             "(e.g. Cycle Counting) you can choose 'Manual Selection of Products' and the system won't propose anything.  You can also let the "
-             "system propose for a single product / lot /... ")
-    total_qty = fields.Float('Total Quantity', compute='_compute_total_qty')
-    category_id = fields.Many2one(
-        'product.category', 'Product Category',
-        readonly=True, states={'draft': [('readonly', False)]},
-        help="Specify Product Category to focus your inventory on a particular Category.")
-    exhausted = fields.Boolean('Include Exhausted Products', readonly=True, states={'draft': [('readonly', False)]})
-
-    @api.one
-    @api.depends('product_id', 'line_ids.product_qty')
-    def _compute_total_qty(self):
-        """ For single product inventory, total quantity of the counted """
-        if self.product_id:
-            self.total_qty = sum(self.mapped('line_ids').mapped('product_qty'))
-        else:
-            self.total_qty = 0
+        help="Specify Products to focus your inventory on particular Products.")
+    start_empty = fields.Boolean('Empty Inventory',
+        help="Allows to start with an empty inventory.")
 
-    @api.multi
     def unlink(self):
         for inventory in self:
             if inventory.state == 'done':
                 raise UserError(_('You cannot delete a validated inventory adjustement.'))
         return super(Inventory, self).unlink()
 
-    @api.model
-    def _selection_filter(self):
-        """ Get the list of filter allowed according to the options checked
-        in 'Settings\Warehouse'. """
-        res_filter = [
-            ('none', _('All products')),
-            ('category', _('One product category')),
-            ('product', _('One product only')),
-            ('partial', _('Select products manually'))]
-
-        if self.user_has_groups('stock.group_tracking_owner'):
-            res_filter += [('owner', _('One owner only')), ('product_owner', _('One product for a specific owner'))]
-        if self.user_has_groups('stock.group_production_lot'):
-            res_filter.append(('lot', _('One Lot/Serial Number')))
-        if self.user_has_groups('stock.group_tracking_lot'):
-            res_filter.append(('pack', _('A Pack')))
-        return res_filter
-
-    @api.onchange('filter')
-    def _onchange_filter(self):
-        if self.filter not in ('product', 'product_owner'):
-            self.product_id = False
-        if self.filter != 'lot':
-            self.lot_id = False
-        if self.filter not in ('owner', 'product_owner'):
-            self.partner_id = False
-        if self.filter != 'pack':
-            self.package_id = False
-        if self.filter != 'category':
-            self.category_id = False
-        if self.filter == 'product':
-            self.exhausted = True
-            if self.product_id:
-                return {'domain': {'product_id': [('product_tmpl_id', '=', self.product_id.product_tmpl_id.id)]}}
-
-    @api.onchange('location_id')
-    def _onchange_location_id(self):
-        if self.location_id.company_id:
-            self.company_id = self.location_id.company_id
-
-    @api.one
-    @api.constrains('filter', 'product_id', 'lot_id', 'partner_id', 'package_id')
-    def _check_filter_product(self):
-        if self.filter == 'none' and self.product_id and self.location_id and self.lot_id:
-            return
-        if self.filter not in ('product', 'product_owner') and self.product_id:
-            raise ValidationError(_('The selected product doesn\'t belong to that owner..'))
-        if self.filter != 'lot' and self.lot_id:
-            raise ValidationError(_('The selected lot number doesn\'t exist.'))
-        if self.filter not in ('owner', 'product_owner') and self.partner_id:
-            raise ValidationError(_('The selected owner doesn\'t have the proprietary of that product.'))
-        if self.filter != 'pack' and self.package_id:
-            raise ValidationError(_('The selected inventory options are not coherent, the package doesn\'t exist.'))
-
-    def action_reset_product_qty(self):
-        self.mapped('line_ids').write({'product_qty': 0})
-        return True
-
     def action_validate(self):
+        if not self.exists():
+            return
+        self.ensure_one()
+        if not self.user_has_groups('stock.group_stock_manager'):
+            raise UserError(_("Only a stock manager can validate an inventory adjustment."))
+        if self.state != 'confirm':
+            raise UserError(_(
+                "You can't validate the inventory '%s', maybe this inventory " +
+                "has been already validated or isn't ready.") % (self.name))
         inventory_lines = self.line_ids.filtered(lambda l: l.product_id.tracking in ['lot', 'serial'] and not l.prod_lot_id and l.theoretical_qty != l.product_qty)
         lines = self.line_ids.filtered(lambda l: float_compare(l.product_qty, 1, precision_rounding=l.product_uom_id.rounding) > 0 and l.product_id.tracking == 'serial' and l.prod_lot_id)
         if inventory_lines and not lines:
             wiz_lines = [(0, 0, {'product_id': product.id, 'tracking': product.tracking}) for product in inventory_lines.mapped('product_id')]
             wiz = self.env['stock.track.confirmation'].create({'inventory_id': self.id, 'tracking_line_ids': wiz_lines})
             return {
-                    'name': _('Tracked Products in Inventory Adjustment'),
-                    'type': 'ir.actions.act_window',
-                    'view_mode': 'form',
-                    'res_model': 'stock.track.confirmation',
-                    'target': 'new',
-                    'res_id': wiz.id,
-                }
-        else:
-            self._action_done()
-
-    def _action_done(self, cancel_backorder=False):
+                'name': _('Tracked Products in Inventory Adjustment'),
+                'type': 'ir.actions.act_window',
+                'view_mode': 'form',
+                'views': [(False, 'form')],
+                'res_model': 'stock.track.confirmation',
+                'target': 'new',
+                'res_id': wiz.id,
+            }
+        return self._action_done()
+
+    def _action_done(self):
         negative = next((line for line in self.mapped('line_ids') if line.product_qty < 0 and line.product_qty != line.theoretical_qty), False)
         if negative:
             raise UserError(_('You cannot set a negative product quantity in an inventory line:\n\t%s - qty: %s') % (negative.product_id.name, negative.product_qty))
@@ -205,34 +127,81 @@ class Inventory(models.Model):
 
     def action_cancel_draft(self):
         self.mapped('move_ids')._action_cancel()
-        self.write({
-            'line_ids': [(5,)],
-            'state': 'draft'
-        })
+        self.write({'state': 'draft'})
 
     def action_start(self):
-        for inventory in self.filtered(lambda x: x.state not in ('done','cancel')):
-            vals = {'state': 'confirm', 'date': fields.Datetime.now()}
-            if (inventory.filter != 'partial') and not inventory.line_ids:
-                vals.update({'line_ids': [(0, 0, line_values) for line_values in inventory._get_inventory_lines_values()]})
+        self.ensure_one()
+        self._action_start()
+        return self.action_open_inventory_lines()
+
+    def _action_start(self):
+        """ Confirms the Inventory Adjustment and generates its inventory lines
+        if its state is draft and don't have already inventory lines (can happen
+        with demo data or tests).
+        """
+        for inventory in self:
+            if inventory.state != 'draft':
+                continue
+            vals = {
+                'state': 'confirm',
+                'date': fields.Datetime.now()
+            }
+            if not inventory.line_ids and not inventory.start_empty:
+                self.env['stock.inventory.line'].create(inventory._get_inventory_lines_values())
             inventory.write(vals)
-        return True
 
-    def action_inventory_line_tree(self):
-        action = self.env.ref('stock.action_inventory_line_tree').read()[0]
-        action['context'] = {
-            'default_location_id': self.location_id.id,
-            'default_product_id': self.product_id.id,
-            'default_prod_lot_id': self.lot_id.id,
-            'default_package_id': self.package_id.id,
-            'default_partner_id': self.partner_id.id,
+    def action_open_inventory_lines(self):
+        self.ensure_one()
+        action = {
+            'type': 'ir.actions.act_window',
+            'views': [(self.env.ref('stock.stock_inventory_line_tree2').id, 'tree')],
+            'view_mode': 'tree',
+            'name': _('Inventory Lines'),
+            'res_model': 'stock.inventory.line',
+        }
+        context = {
+            'default_is_editable': True,
             'default_inventory_id': self.id,
         }
+        # Define domains and context
+        domain = [
+            ('inventory_id', '=', self.id),
+            ('location_id.usage', 'in', ['internal', 'transit'])
+        ]
+        if self.location_ids:
+            context['default_location_id'] = self.location_ids[0].id
+            if len(self.location_ids) == 1:
+                if not self.location_ids[0].child_ids:
+                    context['readonly_location_id'] = True
+
+        if self.product_ids:
+            if len(self.product_ids) == 1:
+                context['default_product_id'] = self.product_ids[0].id
+
+        action['context'] = context
+        action['domain'] = domain
+        return action
+
+    def action_view_related_move_lines(self):
+        self.ensure_one()
+        domain = [('move_id', 'in', self.move_ids.ids)]
+        action = {
+            'name': _('Product Moves'),
+            'type': 'ir.actions.act_window',
+            'res_model': 'stock.move.line',
+            'view_type': 'list',
+            'view_mode': 'list,form',
+            'domain': domain,
+        }
         return action
 
     def _get_inventory_lines_values(self):
         # TDE CLEANME: is sql really necessary ? I don't think so
-        locations = self.env['stock.location'].search([('id', 'child_of', [self.location_id.id])])
+        locations = self.env['stock.location']
+        if self.location_ids:
+            locations = self.env['stock.location'].search([('id', 'child_of', self.location_ids.ids)])
+        else:
+            locations = self.env['stock.location'].search(self._domain_location_ids())
         domain = ' location_id in %s AND quantity != 0 AND active = TRUE'
         args = (tuple(locations.ids),)
 
@@ -240,37 +209,14 @@ class Inventory(models.Model):
         Product = self.env['product.product']
         # Empty recordset of products available in stock_quants
         quant_products = self.env['product.product']
-        # Empty recordset of products to filter
-        products_to_filter = self.env['product.product']
 
-        # case 0: Filter on company
+        # If inventory by company
         if self.company_id:
             domain += ' AND company_id = %s'
             args += (self.company_id.id,)
-
-        #case 1: Filter on One owner only or One product for a specific owner
-        if self.partner_id:
-            domain += ' AND owner_id = %s'
-            args += (self.partner_id.id,)
-        #case 2: Filter on One Lot/Serial Number
-        if self.lot_id:
-            domain += ' AND lot_id = %s'
-            args += (self.lot_id.id,)
-        #case 3: Filter on One product
-        if self.product_id:
-            domain += ' AND product_id = %s'
-            args += (self.product_id.id,)
-            products_to_filter |= self.product_id
-        #case 4: Filter on A Pack
-        if self.package_id:
-            domain += ' AND package_id = %s'
-            args += (self.package_id.id,)
-        #case 5: Filter on One product category + Exahausted Products
-        if self.category_id:
-            categ_products = Product.search([('categ_id', 'child_of', self.category_id.id)])
-            domain += ' AND product_id = ANY (%s)'
-            args += (categ_products.ids,)
-            products_to_filter |= categ_products
+        if self.product_ids:
+            domain += ' AND product_id in %s'
+            args += (tuple(self.product_ids.ids),)
 
         self.env.cr.execute("""SELECT product_id, sum(quantity) as product_qty, location_id, lot_id as prod_lot_id, package_id, owner_id as partner_id
             FROM stock_quant
@@ -280,6 +226,7 @@ class Inventory(models.Model):
             GROUP BY product_id, location_id, lot_id, package_id, partner_id """ % domain, args)
 
         for product_data in self.env.cr.dictfetchall():
+            product_data['inventory_id'] = self.id
             # replace the None the dictionary by False, because falsy values are tested later on
             for void_field in [item[0] for item in product_data.items() if item[1] is None]:
                 product_data[void_field] = False
@@ -288,31 +235,6 @@ class Inventory(models.Model):
                 product_data['product_uom_id'] = Product.browse(product_data['product_id']).uom_id.id
                 quant_products |= Product.browse(product_data['product_id'])
             vals.append(product_data)
-        if self.exhausted:
-            exhausted_vals = self._get_exhausted_inventory_line(products_to_filter, quant_products)
-            vals.extend(exhausted_vals)
-        return vals
-
-    def _get_exhausted_inventory_line(self, products, quant_products):
-        '''
-        This function return inventory lines for exausted products
-        :param products: products With Selected Filter.
-        :param quant_products: products available in stock_quants
-        '''
-        vals = []
-        exhausted_domain = [('type', 'not in', ('service', 'consu', 'digital'))]
-        if products:
-            exhausted_products = products - quant_products
-            exhausted_domain += [('id', 'in', exhausted_products.ids)]
-        else:
-            exhausted_domain += [('id', 'not in', quant_products.ids)]
-        exhausted_products = self.env['product.product'].search(exhausted_domain)
-        for product in exhausted_products:
-            vals.append({
-                'inventory_id': self.id,
-                'product_id': product.id,
-                'location_id': self.location_id.id,
-            })
         return vals
 
 
@@ -321,23 +243,48 @@ class InventoryLine(models.Model):
     _description = "Inventory Line"
     _order = "product_id, inventory_id, location_id, prod_lot_id"
 
+    @api.model
+    def _domain_location_id(self):
+        domain = self.env['stock.inventory']._domain_location_ids()
+        if self.env.context.get('active_model') == 'stock.inventory':
+            inventory = self.env['stock.inventory'].browse(self.env.context.get('active_id'))
+            if inventory.exists() and inventory.location_ids:
+                domain = expression.AND([
+                    domain,
+                    [('id', 'child_of', inventory.location_ids.ids)]
+                ])
+        return domain
+
+    @api.model
+    def _domain_product_id(self):
+        domain = [('type', '=', 'product')]
+        if self.env.context.get('active_model') == 'stock.inventory':
+            inventory = self.env['stock.inventory'].browse(self.env.context.get('active_id'))
+            if inventory.exists() and len(inventory.product_ids) > 1:
+                domain = expression.AND([
+                    domain,
+                    [('id', 'in', inventory.product_ids.ids)]
+                ])
+        return domain
+
+    is_editable = fields.Boolean(help="Technical field to restrict the edition.")
     inventory_id = fields.Many2one(
         'stock.inventory', 'Inventory',
         index=True, ondelete='cascade')
     partner_id = fields.Many2one('res.partner', 'Owner')
     product_id = fields.Many2one(
         'product.product', 'Product',
-        domain=[('type', '=', 'product')],
+        domain=lambda self: self._domain_product_id(),
         index=True, required=True)
     product_uom_id = fields.Many2one(
         'uom.uom', 'Product Unit of Measure',
-        required=True)
-    product_uom_category_id = fields.Many2one(string='Uom category', related='product_uom_id.category_id', readonly=True)
+        required=True, readonly=True)
     product_qty = fields.Float(
-        'Checked Quantity',
+        'Counted Quantity',
         digits=dp.get_precision('Product Unit of Measure'), default=0)
     location_id = fields.Many2one(
         'stock.location', 'Location',
+        domain=lambda self: self._domain_location_id(),
         index=True, required=True)
     package_id = fields.Many2one(
         'stock.quant.package', 'Pack', index=True)
@@ -347,76 +294,124 @@ class InventoryLine(models.Model):
     company_id = fields.Many2one(
         'res.company', 'Company', related='inventory_id.company_id',
         index=True, readonly=True, store=True)
-    # TDE FIXME: necessary ? -> replace by location_id
-    state = fields.Selection(
-        'Status',  related='inventory_id.state', readonly=True)
+    state = fields.Selection('Status', related='inventory_id.state')
     theoretical_qty = fields.Float(
-        'Theoretical Quantity', compute='_compute_theoretical_qty',
-        digits=dp.get_precision('Product Unit of Measure'), readonly=True, store=True)
-    inventory_location_id = fields.Many2one(
-        'stock.location', 'Inventory Location', related='inventory_id.location_id', related_sudo=False, readonly=False)
+        'Theoretical Quantity',
+        digits=dp.get_precision('Product Unit of Measure'), readonly=True)
+    difference_qty = fields.Float('Difference', compute='_compute_difference',
+        help="Indicates the gap between the product's theoretical quantity and its newest quantity.",
+        readonly=True, digits=dp.get_precision('Product Unit of Measure'))
+    inventory_date = fields.Datetime('Inventory Date', readonly=True,
+        default=fields.Datetime.now,
+        help="Last date at which the On Hand Quantity has been computed.")
+    outdated = fields.Boolean(String='Quantity oudated',
+        compute='_compute_outdated', search='_search_outdated')
     product_tracking = fields.Selection('Tracking', related='product_id.tracking', readonly=True)
 
-    @api.one
-    @api.depends('location_id', 'product_id', 'package_id', 'product_uom_id', 'company_id', 'prod_lot_id', 'partner_id')
-    def _compute_theoretical_qty(self):
-        if not self.product_id:
-            self.theoretical_qty = 0
-            return
-        theoretical_qty = self.product_id.get_theoretical_quantity(
-            self.product_id.id,
-            self.location_id.id,
-            lot_id=self.prod_lot_id.id,
-            package_id=self.package_id.id,
-            owner_id=self.partner_id.id,
-            to_uom=self.product_uom_id.id,
-        )
-        self.theoretical_qty = theoretical_qty
-
-    @api.onchange('product_id')
-    def _onchange_product(self):
-        res = {}
-        # If no UoM or incorrect UoM put default one from product
-        if self.product_id:
-            self.product_uom_id = self.product_id.uom_id
-            res['domain'] = {'product_uom_id': [('category_id', '=', self.product_id.uom_id.category_id.id)]}
-        return res
+    @api.depends('product_qty', 'theoretical_qty')
+    def _compute_difference(self):
+        for line in self:
+            line.difference_qty = line.product_qty - line.theoretical_qty
+
+    @api.depends('inventory_date', 'product_id.stock_move_ids')
+    def _compute_outdated(self):
+        grouped_quants = self.env['stock.quant'].read_group(
+            [('product_id', 'in', self.product_id.ids), ('location_id', 'in', self.location_id.ids)],
+            ['product_id', 'location_id', 'lot_id', 'package_id', 'owner_id', 'quantity:sum'],
+            ['product_id', 'location_id', 'lot_id', 'package_id', 'owner_id'],
+            lazy=False)
+        quants = {
+            (quant['product_id'][0],
+            quant['location_id'][0],
+            quant['lot_id'] and quant['lot_id'][0],
+            quant['package_id'] and quant['package_id'][0],
+            quant['owner_id'] and quant['owner_id'][0]): quant['quantity']
+            for quant in grouped_quants
+        }
+        for line in self:
+            if line.state == 'done' or not line.id:
+                continue
+            qty = quants.get((
+                line.product_id.id,
+                line.location_id.id,
+                line.prod_lot_id.id,
+                line.package_id.id,
+                line.partner_id.id,
+                ), 0
+            )
+            if float_compare(qty, line.theoretical_qty, precision_rounding=line.product_uom_id.rounding) != 0:
+                line.outdated = True
+            else:
+                line.outdated = False
 
     @api.onchange('product_id', 'location_id', 'product_uom_id', 'prod_lot_id', 'partner_id', 'package_id')
     def _onchange_quantity_context(self):
+        if self.product_id:
+            self.product_uom_id = self.product_id.uom_id
         if self.product_id and self.location_id and self.product_id.uom_id.category_id == self.product_uom_id.category_id:  # TDE FIXME: last part added because crash
-            self._compute_theoretical_qty()
-            self.product_qty = self.theoretical_qty
+            theoretical_qty = self.product_id.get_theoretical_quantity(
+                self.product_id.id,
+                self.location_id.id,
+                lot_id=self.prod_lot_id.id,
+                package_id=self.package_id.id,
+                owner_id=self.partner_id.id,
+                to_uom=self.product_uom_id.id,
+            )
+        else:
+            theoretical_qty = 0
+        # We update `product_qty` only if it equals to `theoretical_qty` to
+        # avoid to reset quantity when user manually set it.
+        if self.product_qty == self.theoretical_qty:
+            self.product_qty = theoretical_qty
+        self.theoretical_qty = theoretical_qty
 
     @api.model_create_multi
     def create(self, vals_list):
+        """ Override to handle the case we create inventory line without
+        `theoretical_qty` because this field is usually computed, but in some
+        case (typicaly in tests), we create inventory line without trigger the
+        onchange, so in this case, we set `theoretical_qty` depending of the
+        product's theoretical quantity.
+        Handles the same problem with `product_uom_id` as this field is normally
+        set in an onchange of `product_id`.
+        Finally, this override checks we don't try to create a duplicated line.
+        """
         for values in vals_list:
+            if 'theoretical_qty' not in values:
+                theoretical_qty = self.env['product.product'].get_theoretical_quantity(
+                    values['product_id'],
+                    values['location_id'],
+                    lot_id=values.get('prod_lot_id'),
+                    package_id=values.get('package_id'),
+                    owner_id=values.get('partner_id'),
+                    to_uom=values.get('product_uom_id'),
+                )
+                values['theoretical_qty'] = theoretical_qty
             if 'product_id' in values and 'product_uom_id' not in values:
                 values['product_uom_id'] = self.env['product.product'].browse(values['product_id']).uom_id.id
         res = super(InventoryLine, self).create(vals_list)
         res._check_no_duplicate_line()
         return res
 
-    @api.multi
-    def write(self,vals):
+    def write(self, vals):
         res = super(InventoryLine, self).write(vals)
         self._check_no_duplicate_line()
         return res
 
     def _check_no_duplicate_line(self):
         for line in self:
-            existings = self.search([
+            domain = [
                 ('id', '!=', line.id),
                 ('product_id', '=', line.product_id.id),
-                ('inventory_id.state', '=', 'confirm'),
                 ('location_id', '=', line.location_id.id),
                 ('partner_id', '=', line.partner_id.id),
                 ('package_id', '=', line.package_id.id),
-                ('prod_lot_id', '=', line.prod_lot_id.id)])
+                ('prod_lot_id', '=', line.prod_lot_id.id),
+                ('inventory_id', '=', line.inventory_id.id)]
+            existings = self.search_count(domain)
             if existings:
-                raise UserError(_("You cannot have two inventory adjustments in state 'In Progress' with the same product (%s),"
-                                   " same location, same package, same owner and same lot. Please first validate"
-                                   " the first inventory adjustment before creating another one.") % (line.product_id.display_name))
+                raise UserError(_("There is already one inventory adjustment line for this product,"
+                                  " you should rather modify this one instead of creating a new one."))
 
     @api.constrains('product_id')
     def _check_product_id(self):
@@ -458,12 +453,47 @@ class InventoryLine(models.Model):
     def _generate_moves(self):
         vals_list = []
         for line in self:
-            if float_utils.float_compare(line.theoretical_qty, line.product_qty, precision_rounding=line.product_id.uom_id.rounding) == 0:
+            rounding = line.product_id.uom_id.rounding
+            if float_is_zero(line.difference_qty, precision_rounding=rounding):
                 continue
-            diff = line.theoretical_qty - line.product_qty
-            if diff < 0:  # found more than expected
-                vals = line._get_move_values(abs(diff), line.product_id.property_stock_inventory.id, line.location_id.id, False)
+            if line.difference_qty > 0:  # found more than expected
+                vals = line._get_move_values(line.difference_qty, line.product_id.property_stock_inventory.id, line.location_id.id, False)
             else:
-                vals = line._get_move_values(abs(diff), line.location_id.id, line.product_id.property_stock_inventory.id, True)
+                vals = line._get_move_values(abs(line.difference_qty), line.location_id.id, line.product_id.property_stock_inventory.id, True)
             vals_list.append(vals)
         return self.env['stock.move'].create(vals_list)
+
+    def _refresh_inventory(self):
+        return self[0].inventory_id.action_open_inventory_lines()
+
+    def action_refresh_quantity(self):
+        filtered_lines = self.filtered(lambda l: l.state != 'done')
+        for line in filtered_lines:
+            if line.outdated:
+                quants = self.env['stock.quant']._gather(line.product_id, line.location_id, lot_id=line.prod_lot_id, package_id=line.package_id, owner_id=line.partner_id, strict=True)
+                if quants.exists():
+                    quantity = sum(quants.mapped('quantity'))
+                    if line.theoretical_qty != quantity:
+                        line.theoretical_qty = quantity
+                else:
+                    line.theoretical_qty = 0
+                line.inventory_date = fields.Datetime.now()
+
+    def action_reset_product_qty(self):
+        """ Write `product_qty` to zero on the selected records. """
+        impacted_lines = self.env['stock.inventory.line']
+        for line in self:
+            if line.state == 'done':
+                continue
+            impacted_lines |= line
+        impacted_lines.write({'product_qty': 0})
+
+    def _search_outdated(self, operator, value):
+        if operator != '=':
+            if operator == '!=' and isinstance(value, bool):
+                value = not value
+            else:
+                raise NotImplementedError()
+        lines = self.search([('inventory_id', '=', self.env.context.get('default_inventory_id'))])
+        line_ids = lines.filtered(lambda line: line.outdated == value).ids
+        return [('id', 'in', line_ids)]
