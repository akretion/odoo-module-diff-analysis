PR: https://github.com/odoo/odoo/pull/

From: 2950ffaa86ef38263e9a4a59a30d0768f82a61fa
From: Aline Preillon
Date: 2017-02-21 15:42:11

Breaking data model changes scores: del:1 + add:0, change matches:
-    notify_email = fields.Selection([

Total Changes: 29

[IMP] mail: improve notification management, either email either inbox

Currently partners have a boolean field to choose whether to receive
notifications only in their Odoo inbox or to receive them in their inbox
and by email. This leads to several issues :

 * if a customer is configured to not receive emails he will not receive
   any notification on sales orders, leads, ... This is not clearly
   indicated to the salesman and it is not easy to know how to change
   that behavior
 * if an user chooses to receive emails and does not use its inbox a lot
   of notifications stay in Odoo. The user has to manually set them as
   done to make them disappear which is redundant.

This commit changes that behavior. From now on customers will always
receive all notifications by email. Indeed Odoo is not a customer oriented
mailbox. Moreover sales orders or discussions on leads send to customers
should always be sent by email as it is the standard communication
mechanism. Users will be able to choose to receive notifications in Odoo
or by email. The choice is no longer inbox or inbox + email, but inbox
or email. Choosing one option or the other one depends on the way the
user wants to work.

Technically the field is moved on the users model and selection keys
are renamed. Notification process is modified

 * notified_partner_ids contains as before specified recipients as well
   as followers matching the subtype
 * customers and users working with emails are notified. During that
   process customers notifications are marked as done to be able to
   track the email state without having needaction. Users notifications
   are currently deleted as we do not track their email state.

The removal of partner field implies changes in various addons that
define partner data with this field set in the values.

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_message.py
+++ b/addons/mail/models/mail_message.py
@@ -801,12 +801,17 @@ class Message(models.Model):
         # those methods are called as SUPERUSER because portal users posting messages
         # have no access to partner model. Maybe propagating a real uid could be necessary.
         email_channels = channels_sudo.filtered(lambda channel: channel.email_send)
+        # make a dedicated search on res.users to avoid user_ids.notification_type that will be user_ids.id in [ARRAY]
+        notif_users = self.env['res.users'].sudo().search([
+            ('partner_id', 'in', partners_sudo.ids),
+            ('notification_type', '=', 'inbox')
+        ])
         partners_sudo.search([
             '|',
-            ('id', 'in', partners_sudo.ids),
+            ('id', 'in', (partners_sudo - notif_users.mapped('partner_id')).ids),
             ('channel_ids', 'in', email_channels.ids),
             ('email', '!=', self_sudo.author_id and self_sudo.author_id.email or self_sudo.email_from),
-            ('notify_email', '!=', 'none')])._notify(self, force_send=force_send, send_after_commit=send_after_commit, user_signature=user_signature)
+        ])._notify(self, force_send=force_send, send_after_commit=send_after_commit, user_signature=user_signature)
         channels_sudo._notify(self)
 
         # Discard cache, because child / parent allow reading and therefore

--- a/addons/mail/models/res_partner.py
+++ b/addons/mail/models/res_partner.py
@@ -19,14 +19,6 @@ class Partner(models.Model):
     _mail_mass_mailing = _('Customers')
 
     message_bounce = fields.Integer('Bounce', help="Counter of the number of bounced emails for this contact")
-    notify_email = fields.Selection([
-        ('none', 'Never'),
-        ('always', 'All Messages')],
-        'Email Messages and Notifications', required=True,
-        oldname='notification_email_send', default='always',
-        help="Policy to receive emails for new messages pushed to your personal Inbox:\n"
-             "- Never: no emails are sent\n"
-             "- All Messages: for every notification you receive in your Inbox")
     opt_out = fields.Boolean(
         'Opt-Out', help="If opt-out is checked, this contact has refused to receive emails for mass mailing and marketing campaign. "
                         "Filter 'Available for Mass Mailing' allows users to filter the partners when performing mass mailing.")
@@ -140,6 +132,7 @@ class Partner(models.Model):
                 ('res_partner_id', 'in', email.recipient_ids.ids)])
             notifications.write({
                 'is_email': True,
+                'is_read': True,  # handle by email discards Inbox notification
                 'email_status': 'ready',
             })
 

--- a/addons/mail/models/res_users.py
+++ b/addons/mail/models/res_users.py
@@ -23,6 +23,13 @@ class Users(models.Model):
         ('everyone', 'Everyone'),
         ('partners', 'Authenticated Partners'),
         ('followers', 'Followers only')], string='Alias Contact Security', related='alias_id.alias_contact')
+    notification_type = fields.Selection([
+        ('email', 'Handle by Emails'),
+        ('inbox', 'Handle in Odoo')],
+        'Notification Management', required=True, default='email',
+        help="Policy on how to handle Chatter notifications:\n"
+             "- Emails: notifications are sent to your email\n"
+             "- Odoo: notifications appear in your Odoo Inbox")
 
     def __init__(self, pool, cr):
         """ Override of __init__ to add access rights on notification_email_send
@@ -32,10 +39,10 @@ class Users(models.Model):
         init_res = super(Users, self).__init__(pool, cr)
         # duplicate list to avoid modifying the original reference
         type(self).SELF_WRITEABLE_FIELDS = list(self.SELF_WRITEABLE_FIELDS)
-        type(self).SELF_WRITEABLE_FIELDS.extend(['notify_email'])
+        type(self).SELF_WRITEABLE_FIELDS.extend(['notification_type'])
         # duplicate list to avoid modifying the original reference
         type(self).SELF_READABLE_FIELDS = list(self.SELF_READABLE_FIELDS)
-        type(self).SELF_READABLE_FIELDS.extend(['notify_email'])
+        type(self).SELF_READABLE_FIELDS.extend(['notification_type'])
         return init_res
 
     @api.model
