PR: https://github.com/odoo/odoo/pull/186359

From: 25243bf841888bb319a5ab1d3df39bd87ea8b061
From: David Monnom
Date: 2024-12-09 14:20:21

Breaking data model changes scores: del:4 + add:0, change matches:
-    _inherit = 'account.fiscal.position'
-    takeaway = fields.Boolean("Takeaway", help="Allow to create orders for takeaway customers.")
-    takeaway_fp_id = fields.Many2one(
-    takeaway = fields.Boolean(string="Take Away", default=False)

Total Changes: 32

[IMP] point_of_sale, pos_*: presets in self order

*: pos_online_payment_self_order, pos_restaurant, pos_self_order

Adding presets in self order module.

closes odoo/odoo#186359

Taskid: 4310935
Related: odoo/enterprise#73348
Related: odoo/upgrade#6743
Signed-off-by: Adrien Guilliams (adgu) <adgu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_restaurant/models/__init__.py
+++ b/addons/pos_restaurant/models/__init__.py
@@ -7,4 +7,3 @@ from . import pos_payment
 from . import pos_restaurant
 from . import pos_session
 from . import res_config_settings
-from . import account_fiscal_position

--- a/addons/pos_restaurant/models/account_fiscal_position.py
+++ b/None
@@ -1,12 +0,0 @@
-from odoo import models, api
-from odoo.osv.expression import OR
-
-
-class AccountFiscalPosition(models.Model):
-    _inherit = 'account.fiscal.position'
-
-    @api.model
-    def _load_pos_data_domain(self, data):
-        params = super()._load_pos_data_domain(data)
-        params = OR([params, [('id', '=', data['pos.config'][0]['takeaway_fp_id'])]])
-        return params

--- a/addons/pos_restaurant/models/pos_config.py
+++ b/addons/pos_restaurant/models/pos_config.py
@@ -13,22 +13,12 @@ class PosConfig(models.Model):
     floor_ids = fields.Many2many('restaurant.floor', string='Restaurant Floors', help='The restaurant floors served by this point of sale.')
     set_tip_after_payment = fields.Boolean('Set Tip After Payment', help="Adjust the amount authorized by payment terminals to add a tip after the customers left or at the end of the day.")
     module_pos_restaurant_appointment = fields.Boolean("Table Booking")
-    takeaway = fields.Boolean("Takeaway", help="Allow to create orders for takeaway customers.")
-    takeaway_fp_id = fields.Many2one(
-        'account.fiscal.position',
-        string='Alternative Fiscal Position',
-        help='This is useful for restaurants with onsite and take-away services that imply specific tax rates.',
-    )
 
     def _get_forbidden_change_fields(self):
         forbidden_keys = super(PosConfig, self)._get_forbidden_change_fields()
         forbidden_keys.append('floor_ids')
         return forbidden_keys
 
-    @api.depends('takeaway_fp_id', 'takeaway')
-    def _compute_local_data_integrity(self):
-        super()._compute_local_data_integrity()
-
     @api.model_create_multi
     def create(self, vals_list):
         for vals in vals_list:
@@ -118,6 +108,11 @@ class PosConfig(models.Model):
             'pos_restaurant.food',
             'pos_restaurant.drinks',
         ])
+        presets = self.get_record_by_ref([
+            'point_of_sale.pos_takein_preset',
+            'point_of_sale.pos_takeout_preset',
+            'point_of_sale.pos_delivery_preset',
+        ])
         config = self.env['pos.config'].create({
             'name': _('Restaurant'),
             'company_id': self.env.company.id,
@@ -127,6 +122,9 @@ class PosConfig(models.Model):
             'iface_available_categ_ids': restaurant_categories,
             'iface_splitbill': True,
             'module_pos_restaurant': True,
+            'use_presets': True,
+            'default_preset_id': presets[0],
+            'available_preset_ids': [(6, 0, presets[1:])],
         })
         self.env['ir.model.data']._update_xmlids([{
             'xml_id': self._get_suffixed_ref_name(ref_name),

--- a/addons/pos_restaurant/models/pos_order.py
+++ b/addons/pos_restaurant/models/pos_order.py
@@ -8,7 +8,6 @@ class PosOrder(models.Model):
 
     table_id = fields.Many2one('restaurant.table', string='Table', help='The table where this order was served', index='btree_not_null', readonly=True)
     customer_count = fields.Integer(string='Guests', help='The amount of customers that have been served by this order.', readonly=True)
-    takeaway = fields.Boolean(string="Take Away", default=False)
     origin_table_id = fields.Many2one('restaurant.table', string='Original Table', help='The table where the order was originally created', readonly=True)
 
     @api.model
