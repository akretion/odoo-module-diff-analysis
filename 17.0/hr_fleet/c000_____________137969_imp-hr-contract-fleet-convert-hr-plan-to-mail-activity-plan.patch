PR: https://github.com/odoo/odoo/pull/137969

From: 7053e37df1d69d3cf7901593e0b00120739dd2b4
From: Pierre-Yves Dufays
Date: 2023-10-12 16:12:09

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = 'hr.plan.activity.type'
-    responsible = fields.Selection(selection_add=[('fleet_manager', "Fleet Manager"), ('employee',)], ondelete={'fleet_manager': 'set default'})

Total Changes: 34

[IMP] hr(_contract/_fleet): convert hr.plan to mail.activity.plan

We convert the custom plan implementation to use the generic one. As the
generic one can define plans for multiple model. We use the check
dedicated_to_res_model == 'hr.employee' to activate the specific feature for
hr.employee. Indeed, that field contains the model name when the plan is
applicable only for one model.

We also remove the 'launch plan' button as we can now launch a plan directly
from the activities button in the chatter.

Technical notes:
For the activity schedule wizard, we add the support for active_ids and
active_model as default values for res_ids and res_model because it is used as
link in the chatter to launch the wizard and we want to avoid a big migration
by keeping the link identical (and there are probably no simple solution to
keep the same behavior).

HR CONTRACT

Before the first contract date of the first selected element was chosen to
determine the planned due date if all first contract date were different
otherwise the minimum was chosen. So if the selection included 2 different date
among 3, the minimum was chosen but the first if the 3 were different.
With this change, the minimum is always used to determine the default planned
due date.

Task-3390865

Part-of: odoo/odoo#137969

================================= pseudo patch: =================================

--- a/addons/hr_fleet/models/__init__.py
+++ b/addons/hr_fleet/models/__init__.py
@@ -8,4 +8,4 @@ from . import fleet_vehicle
 from . import fleet_vehicle_log_contract
 from . import fleet_vehicle_log_services
 from . import fleet_vehicle_odometer
-from . import hr_plan_activity_type
+from . import mail_activity_plan_template

--- a/addons/hr_fleet/models/mail_activity_plan_template.py
+++ b/addons/hr_fleet/models/mail_activity_plan_template.py
@@ -1,25 +1,35 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import fields, models, _
+from odoo import api, fields, models, _
+from odoo import exceptions
 
 
-class HrPlanActivityType(models.Model):
-    _inherit = 'hr.plan.activity.type'
+class MailActivityPlanTemplate(models.Model):
+    _inherit = 'mail.activity.plan.template'
 
-    responsible = fields.Selection(selection_add=[('fleet_manager', "Fleet Manager"), ('employee',)], ondelete={'fleet_manager': 'set default'})
+    responsible_type = fields.Selection(
+        selection_add=[('fleet_manager', "Fleet Manager")],
+        ondelete={'fleet_manager': 'set default'})
 
-    def get_responsible_id(self, employee):
-        if self.responsible == 'fleet_manager':
+    @api.constrains('plan_id', 'responsible_type')
+    def _check_responsible_hr_fleet(self):
+        """ Ensure that hr types are used only on employee model """
+        for template in self.filtered(lambda tpl: tpl.plan_id.res_model != 'hr.employee'):
+            if template.responsible_type == 'fleet_manager':
+                raise exceptions.ValidationError(_('Fleet manager responsible is limited to Employee plans.'))
+
+    def _determine_responsible(self, on_demand_responsible, employee):
+        if self.responsible_type == 'fleet_manager' and self.plan_id.res_model == 'hr.employee':
             employee_id = self.env['hr.employee'].browse(employee._origin.id)
             vehicle = employee_id.car_ids[:1]
-            warning = False
+            error = False
             if not vehicle:
-                warning = _('Employee %s is not linked to a vehicle.', employee_id.name)
+                error = _('Employee %s is not linked to a vehicle.', employee_id.name)
             if vehicle and not vehicle.manager_id:
-                warning = _("Employee's vehicle %s is not linked to a fleet manager.", employee_id.name)
+                error = _("Employee's vehicle %s is not linked to a fleet manager.", employee_id.name)
             return {
                 'responsible': vehicle.manager_id,
-                'warning': warning,
+                'error': error,
             }
-        return super().get_responsible_id(employee)
+        return super()._determine_responsible(on_demand_responsible, employee)
