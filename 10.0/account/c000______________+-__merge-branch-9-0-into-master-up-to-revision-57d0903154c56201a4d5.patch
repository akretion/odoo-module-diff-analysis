PR: https://github.com/odoo/odoo/pull/

From: 63e72649da67e544e807f7e454c3dc754c0b297a
From: qdp-odoo
Date: 2015-10-21 14:55:40

Structural Changes: 6
Total Changes: 39

Merge branch '9.0' into master up to revision 57d0903154c56201a4d59a3e7176f55dc46dc1ae

================================= pseudo patch: =================================

--- a/addons/account/models/account.py
+++ b/addons/account/models/account.py
@@ -329,7 +329,7 @@ class AccountJournal(models.Model):
         prefix = code.upper()
         if refund:
             prefix = 'R' + prefix
-        return prefix + '/%(year)s/'
+        return prefix + '/%(range_year)s/'
 
     @api.model
     def _create_sequence(self, vals, refund=False):

--- a/addons/account/models/account_analytic_line.py
+++ b/addons/account/models/account_analytic_line.py
@@ -27,16 +27,16 @@ class AccountAnalyticLine(models.Model):
 
         result = 0.0
         prod_accounts = self.product_id.product_tmpl_id._get_product_accounts()
-        unit = self.product_uom_id.id
+        unit = self.product_uom_id
         account = prod_accounts['expense']
         if not unit or self.product_id.uom_po_id.category_id.id != unit.category_id.id:
-            unit = self.product_id.uom_po_id.id
+            unit = self.product_id.uom_po_id
 
         ctx = dict(self._context or {})
         if unit:
             # price_get() will respect a 'uom' in its context, in order
             # to return a default price for those units
-            ctx['uom'] = unit
+            ctx['uom'] = unit.id
 
         # Compute based on pricetype
         amount_unit = self.product_id.with_context(ctx).price_get('standard_price')[self.product_id.id]

--- a/addons/account/models/account_bank_statement.py
+++ b/addons/account/models/account_bank_statement.py
@@ -345,10 +345,8 @@ class AccountBankStatement(models.Model):
     def link_bank_to_partner(self):
         for statement in self:
             for st_line in statement.line_ids:
-                if st_line.bank_account_id and st_line.partner_id and st_line.bank_account_id.partner_id.id != st_line.partner_id.id:
-                    bank_vals = st_line.bank_account_id.onchange_partner_id(st_line.partner_id.id)['value']
-                    bank_vals.update({'partner_id': st_line.partner_id.id})
-                    st_line.bank_account_id.write(bank_vals)
+                if st_line.bank_account_id and st_line.partner_id and st_line.bank_account_id.partner_id != st_line.partner_id:
+                    st_line.bank_account_id.partner_id = st_line.partner_id
 
 
 class AccountBankStatementLine(models.Model):

--- a/addons/account/models/account_invoice.py
+++ b/addons/account/models/account_invoice.py
@@ -148,7 +148,7 @@ class AccountInvoice(models.Model):
                     continue
                 # get the payment value in invoice currency
                 if payment.currency_id and amount_currency != 0:
-                    amount_to_show = amount_currency
+                    amount_to_show = -amount_currency
                 else:
                     amount_to_show = payment.company_id.currency_id.compute(-amount, self.currency_id)
                 info['content'].append({
@@ -736,6 +736,9 @@ class AccountInvoice(models.Model):
             ctx_nolang = ctx.copy()
             ctx_nolang.pop('lang', None)
             move = account_move.with_context(ctx_nolang).create(move_vals)
+            # Pass invoice in context in method post: used if you want to get the same
+            # account move reference when creating the same invoice after a cancelled one:
+            move.post()
             # make the invoice point to that move
             vals = {
                 'move_id': move.id,
@@ -743,9 +746,6 @@ class AccountInvoice(models.Model):
                 'move_name': move.name,
             }
             inv.with_context(ctx).write(vals)
-            # Pass invoice in context in method post: used if you want to get the same
-            # account move reference when creating the same invoice after a cancelled one:
-            move.post()
         return True
 
     @api.multi
@@ -1131,7 +1131,7 @@ class AccountInvoiceLine(models.Model):
                 if company.currency_id != currency:
                     if type in ('in_invoice', 'in_refund'):
                         self.price_unit = product.standard_price
-                    self.price_unit = self.price_unit * currency.with_context(dict(self._context or {}, date=self.date_invoice)).rate
+                    self.price_unit = self.price_unit * currency.with_context(dict(self._context or {}, date=self.invoice_id.date_invoice)).rate
 
                 if self.uom_id and self.uom_id.id != product.uom_id.id:
                     self.price_unit = self.env['product.uom']._compute_price(

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -120,7 +120,7 @@ class AccountMove(models.Model):
                 new_name = False
                 journal = move.journal_id
 
-                if invoice and invoice.move_name != '/':
+                if invoice and invoice.move_name and invoice.move_name != '/':
                     new_name = invoice.move_name
                 else:
                     if journal.sequence_id:
@@ -226,6 +226,11 @@ class AccountMoveLine(models.Model):
             for unreconciled lines, and something in-between for partially reconciled lines.
         """
         for line in self:
+            if not line.account_id.reconcile:
+                line.reconciled = False
+                line.amount_residual = 0
+                line.amount_residual_currency = 0
+                continue
             #amounts in the partial reconcile table aren't signed, so we need to use abs()
             amount = abs(line.debit - line.credit)
             amount_residual_currency = abs(line.amount_currency) or 0.0
@@ -1134,8 +1139,8 @@ class AccountPartialReconcile(models.Model):
     _name = "account.partial.reconcile"
     _description = "Partial Reconcile"
 
-    debit_move_id = fields.Many2one('account.move.line')
-    credit_move_id = fields.Many2one('account.move.line')
+    debit_move_id = fields.Many2one('account.move.line', index=True)
+    credit_move_id = fields.Many2one('account.move.line', index=True)
     amount = fields.Monetary(currency_field='company_currency_id', help="Amount concerned by this matching. Assumed to be always positive")
     amount_currency = fields.Monetary(string="Amount in Currency")
     currency_id = fields.Many2one('res.currency', string='Currency')

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -678,10 +678,10 @@ class WizardMultiChartsAccounts(models.TransientModel):
         if not self.chart_template_id.complete_tax_set:
             value = self.sale_tax_rate
             ref_taxs = obj_tax_temp.search([('type_tax_use', '=', 'sale'), ('chart_template_id', 'in', all_parents)], order="sequence, id desc", limit=1)
-            ref_taxs.write({'amount': value, 'name': _('Tax %.2f%%') % value})
+            ref_taxs.write({'amount': value, 'name': _('Tax %.2f%%') % value, 'description': '%.2f%%' % value})
             value = self.purchase_tax_rate
             ref_taxs = obj_tax_temp.search([('type_tax_use', '=', 'purchase'), ('chart_template_id', 'in', all_parents)], order="sequence, id desc", limit=1)
-            ref_taxs.write({'amount': value, 'name': _('Purchase Tax %.2f%%') % value})
+            ref_taxs.write({'amount': value, 'name': _('Tax %.2f%%') % value, 'description': '%.2f%%' % value})
         return True
 
     @api.multi

--- a/addons/account/models/account.py
+++ b/addons/account/models/account.py
@@ -218,7 +218,7 @@ class AccountJournal(models.Model):
         help="This field contains the information related to the numbering of the journal entries of this journal.", required=True, copy=False)
     refund_sequence_id = fields.Many2one('ir.sequence', string='Refund Entry Sequence',
         help="This field contains the information related to the numbering of the refund entries of this journal.", copy=False)
-    sequence = fields.Integer(help='Used to order Journals in the dashboard view')
+    sequence = fields.Integer(help='Used to order Journals in the dashboard view', default=10)
 
     #groups_id = fields.Many2many('res.groups', 'account_journal_group_rel', 'journal_id', 'group_id', string='Groups')
     currency_id = fields.Many2one('res.currency', help='The currency used to enter statement', string="Currency", oldname='currency')
@@ -466,7 +466,7 @@ class ResPartnerBank(models.Model):
     @api.constrains('journal_id')
     def _check_journal_id(self):
         if len(self.journal_id) > 1:
-            raise ValidationError(_('A bank account can anly belong to one journal.'))
+            raise ValidationError(_('A bank account can only belong to one journal.'))
 
 
 #----------------------------------------------------------

--- a/addons/account/models/account_invoice.py
+++ b/addons/account/models/account_invoice.py
@@ -209,8 +209,8 @@ class AccountInvoice(models.Model):
         ], string='Status', index=True, readonly=True, default='draft',
         track_visibility='onchange', copy=False,
         help=" * The 'Draft' status is used when a user is encoding a new and unconfirmed Invoice.\n"
-             " * The 'Pro-forma' status is used the invoice does not have an invoice number.\n"
-             " * The 'Open' status is used when user create invoice, an invoice number is generated. Its in open status till user does not pay invoice.\n"
+             " * The 'Pro-forma' status is used when the invoice does not have an invoice number.\n"
+             " * The 'Open' status is used when user creates invoice, an invoice number is generated. Its in open status till user does not pay invoice.\n"
              " * The 'Paid' status is set automatically when the invoice is paid. Its related journal entries may or may not be reconciled.\n"
              " * The 'Cancelled' status is used when user cancel invoice.")
     sent = fields.Boolean(readonly=True, default=False, copy=False,

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -171,6 +171,7 @@ class AccountChartTemplate(models.Model):
                 'default_debit_account_id': _get_default_account(journal, 'debit'),
                 'refund_sequence': True,
                 'show_on_dashboard': journal['favorite'],
+                'sequence': journal['sequence']
             }
             journal_data.append(vals)
         return journal_data
@@ -758,6 +759,7 @@ class WizardMultiChartsAccounts(models.TransientModel):
                 'type': acc.account_type,
                 'company_id': company.id,
                 'currency_id': acc.currency_id.id,
+                'sequence': 10
             })
 
 
