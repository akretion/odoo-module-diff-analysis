PR: https://github.com/odoo/odoo/pull/165372

From: 728d9f83f6d140b57b91000f683298f1f5bd43c9
From: Arnold Moyaux
Date: 2024-05-24 16:23:18

Structural Changes: 6
Total Changes: 107

[REF] stock: remove product type

Cleaning following the specs. product and consu are too confusing for
people. Now we have product template of type "goods" and an extra
checkbox to set an inventory tracking

closes odoo/odoo#165372

Related: odoo/upgrade#6040
Related: odoo/enterprise#62435
Signed-off-by: Arnold Moyaux (arm) <arm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/product.py
+++ b/addons/stock/models/product.py
@@ -120,7 +120,7 @@ class Product(models.Model):
     @api.depends('stock_move_ids.product_qty', 'stock_move_ids.state', 'stock_move_ids.quantity')
     @api.depends_context(
         'lot_id', 'owner_id', 'package_id', 'from_date', 'to_date',
-        'location', 'warehouse_id', 'allowed_company_ids'
+        'location', 'warehouse_id', 'allowed_company_ids', 'is_storable'
     )
     def _compute_quantities(self):
         products = self.with_context(prefetch_fields=False).filtered(lambda p: p.type != 'service').with_context(prefetch_fields=True)
@@ -407,7 +407,7 @@ class Product(models.Model):
 
         if include_zero:
             products_without_quants_in_domain = self.env['product.product'].search([
-                ('type', '=', 'product'),
+                ('is_storable', '=', True),
                 ('id', 'not in', list(processed_product_ids))],
                 order='id'
             )
@@ -657,15 +657,12 @@ class ProductTemplate(models.Model):
     _inherit = 'product.template'
     _check_company_auto = True
 
+    is_storable = fields.Boolean(
+        'Track Inventory', store=True, compute='compute_is_storable', readonly=False,
+        default=False, precompute=True)
     responsible_id = fields.Many2one(
         'res.users', string='Responsible', default=lambda self: self.env.uid, company_dependent=True, check_company=True,
         help="This user will be responsible of the next activities related to logistic operations for this product.")
-    detailed_type = fields.Selection(selection_add=[
-        ('product', 'Storable Product')
-    ], tracking=True, ondelete={'product': 'set consu'})
-    type = fields.Selection(selection_add=[
-        ('product', 'Storable Product')
-    ], ondelete={'product': 'set consu'})
     property_stock_production = fields.Many2one(
         'stock.location', "Production Location",
         company_dependent=True, check_company=True, domain="[('usage', '=', 'production'), '|', ('company_id', '=', False), ('company_id', '=', allowed_company_ids[0])]",
@@ -680,7 +677,7 @@ class ProductTemplate(models.Model):
     tracking = fields.Selection([
         ('serial', 'By Unique Serial Number'),
         ('lot', 'By Lots'),
-        ('none', 'No Tracking')],
+        ('none', 'By Quantity')],
         string="Tracking", required=True, default='none', # Not having a default value here causes issues when migrating.
         compute='_compute_tracking', store=True, readonly=False, precompute=True,
         help="Ensure the traceability of a storable product in your warehouse.")
@@ -725,12 +722,16 @@ class ProductTemplate(models.Model):
     show_forecasted_qty_status_button = fields.Boolean(compute='_compute_show_qty_status_button')
 
     @api.depends('type')
+    def compute_is_storable(self):
+        self.filtered(lambda t: t.type != 'consu' and t.is_storable).is_storable = False
+
+    @api.depends('is_storable')
     def _compute_show_qty_status_button(self):
         for template in self:
-            template.show_on_hand_qty_status_button = template.type == 'product'
-            template.show_forecasted_qty_status_button = template.type == 'product'
+            template.show_on_hand_qty_status_button = template.is_storable
+            template.show_forecasted_qty_status_button = template.is_storable
 
-    @api.depends('type')
+    @api.depends('is_storable')
     def _compute_has_available_route_ids(self):
         self.has_available_route_ids = self.env['stock.route'].search_count([('product_selectable', '=', True)])
 
@@ -843,23 +844,27 @@ class ProductTemplate(models.Model):
             template.reordering_min_qty = res[template.id]['reordering_min_qty']
             template.reordering_max_qty = res[template.id]['reordering_max_qty']
 
+    @api.depends('is_storable')
     def _compute_product_tooltip(self):
         super()._compute_product_tooltip()
         for record in self:
-            if record.type == 'product':
-                record.product_tooltip += _(
-                    "Storable products are physical items for which you manage the inventory level."
-                )
+            if record.type == 'consu':
+                if record.is_storable:
+                    record.product_tooltip += _(
+                        " You manage the inventory level."
+                    )
+                else:
+                    record.product_tooltip += _(
+                        " They are always available."
+                    )
 
     @api.onchange('tracking')
     def _onchange_tracking(self):
         return self.mapped('product_variant_ids')._onchange_tracking()
 
-    @api.depends('type')
+    @api.depends('is_storable')
     def _compute_tracking(self):
-        self.filtered(
-            lambda t: not t.tracking or t.type in ('consu', 'service')  and t.tracking != 'none'
-        ).tracking = 'none'
+        self.filtered(lambda t: not t.is_storable and t.tracking != 'none').tracking = 'none'
 
     @api.onchange('type')
     def _onchange_type(self):
@@ -905,24 +910,24 @@ class ProductTemplate(models.Model):
             done_moves = self.env['stock.move'].sudo().search([('product_id', 'in', updated.with_context(active_test=False).mapped('product_variant_ids').ids)], limit=1)
             if done_moves:
                 raise UserError(_("You cannot change the unit of measure as there are already stock moves for this product. If you want to change the unit of measure, you should rather archive this product and create a new one."))
-        if 'type' in vals and vals['type'] != 'product' and sum(self.mapped('nbr_reordering_rules')) != 0:
+        if 'is_storable' in vals and not vals['is_storable'] and sum(self.mapped('nbr_reordering_rules')) != 0:
             raise UserError(_('You still have some active reordering rules on this product. Please archive or delete them first.'))
-        if any('type' in vals and vals['type'] != prod_tmpl.type for prod_tmpl in self):
+        if any('is_storable' in vals and vals['is_storable'] != prod_tmpl.is_storable for prod_tmpl in self):
             existing_done_move_lines = self.env['stock.move.line'].sudo().search([
                 ('product_id', 'in', self.mapped('product_variant_ids').ids),
                 ('state', '=', 'done'),
             ], limit=1)
             if existing_done_move_lines:
-                raise UserError(_("You can not change the type of a product that was already used."))
+                raise UserError(_("You can not change the inventory tracking of a product that was already used."))
             existing_reserved_move_lines = self.env['stock.move.line'].sudo().search([
                 ('product_id', 'in', self.mapped('product_variant_ids').ids),
                 ('state', 'in', ['partially_available', 'assigned']),
             ], limit=1)
             if existing_reserved_move_lines:
-                raise UserError(_("You can not change the type of a product that is currently reserved on a stock move. If you need to change the type, you should first unreserve the stock move."))
-        if 'type' in vals and vals['type'] != 'product' and any(p.type == 'product' and not float_is_zero(p.qty_available, precision_rounding=p.uom_id.rounding) for p in self):
-            raise UserError(_("Available quantity should be set to zero before changing type"))
-        return super(ProductTemplate, self).write(vals)
+                raise UserError(_("You can not change the inventory tracking of a product that is currently reserved on a stock move. If you need to change the inventory tracking, you should first unreserve the stock move."))
+        if 'is_storable' in vals and not vals['is_storable'] and any(p.is_storable and not float_is_zero(p.qty_available, precision_rounding=p.uom_id.rounding) for p in self):
+            raise UserError(_("Available quantity should be set to zero before changing inventory tracking"))
+        return super().write(vals)
 
     def copy(self, default=None):
         new_products = super().copy(default=default)

--- a/addons/stock/models/stock_lot.py
+++ b/addons/stock/models/stock_lot.py
@@ -36,7 +36,7 @@ class StockLot(models.Model):
     ref = fields.Char('Internal Reference', help="Internal reference number in case it differs from the manufacturer's lot/serial number")
     product_id = fields.Many2one(
         'product.product', 'Product', index=True,
-        domain=("[('tracking', '!=', 'none'), ('type', '=', 'product')] +"
+        domain=("[('tracking', '!=', 'none'), ('is_storable', '=', True)] +"
             " ([('product_tmpl_id', '=', context['default_product_tmpl_id'])] if context.get('default_product_tmpl_id') else [])"),
         required=True, check_company=True)
     product_uom_id = fields.Many2one(

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -45,7 +45,7 @@ class StockMove(models.Model):
     product_id = fields.Many2one(
         'product.product', 'Product',
         check_company=True,
-        domain="[('type', 'in', ['product', 'consu'])]", index=True, required=True)
+        domain="[('type', '=', 'consu')]", index=True, required=True)
     description_picking = fields.Text('Description of Picking')
     product_qty = fields.Float(
         'Real Quantity', compute='_compute_product_qty', inverse='_set_product_qty',
@@ -166,7 +166,7 @@ class StockMove(models.Model):
     show_operations = fields.Boolean(related='picking_id.picking_type_id.show_operations')
     picking_code = fields.Selection(related='picking_id.picking_type_id.code', readonly=True)
     show_details_visible = fields.Boolean('Details Visible', compute='_compute_show_details_visible')
-    product_type = fields.Selection(related='product_id.detailed_type', readonly=True)
+    is_storable = fields.Boolean(related='product_id.is_storable')
     additional = fields.Boolean("Whether the move was added after the picking's confirmation", default=False)
     is_locked = fields.Boolean(compute='_compute_is_locked', readonly=True)
     is_initial_demand_editable = fields.Boolean('Is initial demand editable', compute='_compute_is_initial_demand_editable')
@@ -437,7 +437,7 @@ Please change the quantity done or the rounding precision of your unit of measur
         # Prefetch product info to avoid fetching all product fields
         self.product_id.fetch(['type', 'uom_id'])
 
-        not_product_moves = self.filtered(lambda move: move.product_id.type != 'product')
+        not_product_moves = self.filtered(lambda move: not move.product_id.is_storable)
         for move in not_product_moves:
             move.forecast_availability = move.product_qty
 
@@ -566,7 +566,7 @@ Please change the quantity done or the rounding precision of your unit of measur
     def _compute_show_info(self):
         for move in self:
             move.show_quant = move.picking_code != 'incoming'\
-                           and move.product_id.detailed_type == 'product'
+                           and move.product_id.is_storable
             move.show_lots_m2o = not move.show_quant\
                 and move.has_tracking != 'none'\
                 and (move.picking_type_id.use_existing_lots or move.state == 'done' or move.origin_returned_move_id.id)
@@ -1576,7 +1576,7 @@ Please change the quantity done or the rounding precision of your unit of measur
     def _should_bypass_reservation(self, forced_location=False):
         self.ensure_one()
         location = forced_location or self.location_id
-        return location.should_bypass_reservation() or self.product_id.type != 'product'
+        return location.should_bypass_reservation() or not self.product_id.is_storable
 
     def _get_picked_quantity(self):
         self.ensure_one()

--- a/addons/stock/models/stock_move_line.py
+++ b/addons/stock/models/stock_move_line.py
@@ -341,7 +341,7 @@ class StockMoveLine(models.Model):
             if move:
                 reservation = not move._should_bypass_reservation()
             else:
-                reservation = product.type == 'product' and not location.should_bypass_reservation()
+                reservation = product.is_storable and not location.should_bypass_reservation()
             if move_line.quantity and reservation:
                 self.env.context.get('reserved_quant', self.env['stock.quant'])._update_reserved_quantity(
                     product, location, move_line.quantity_product_uom, lot_id=move_line.lot_id, package_id=move_line.package_id, owner_id=move_line.owner_id)
@@ -352,7 +352,7 @@ class StockMoveLine(models.Model):
 
         for ml, vals in zip(mls, vals_list):
             if ml.state == 'done':
-                if ml.product_id.type == 'product':
+                if ml.product_id.is_storable:
                     Quant = self.env['stock.quant']
                     quantity = ml.product_uom_id._compute_quantity(ml.quantity, ml.move_id.product_id.uom_id, rounding_method='HALF-UP')
                     in_date = None
@@ -410,7 +410,7 @@ class StockMoveLine(models.Model):
         # reserve the maximum possible.
         if updates or 'quantity' in vals:
             for ml in self:
-                if ml.product_id.type != 'product' or ml.state == 'done':
+                if not ml.product_id.is_storable or ml.state == 'done':
                     continue
                 if 'quantity' in vals or 'product_uom_id' in vals:
                     new_ml_uom = updates.get('product_uom_id', ml.product_uom_id)
@@ -440,7 +440,7 @@ class StockMoveLine(models.Model):
         mls = self.env['stock.move.line']
         if updates or 'quantity' in vals:
             next_moves = self.env['stock.move']
-            mls = self.filtered(lambda ml: ml.move_id.state == 'done' and ml.product_id.type == 'product')
+            mls = self.filtered(lambda ml: ml.move_id.state == 'done' and ml.product_id.is_storable)
             if not updates:  # we can skip those where quantity is already good up to UoM rounding
                 mls = mls.filtered(lambda ml: not float_is_zero(ml.quantity - vals['quantity'], precision_rounding=ml.product_uom_id.rounding))
             for ml in mls:
@@ -608,7 +608,7 @@ class StockMoveLine(models.Model):
         package = quants_value.get('package', self.package_id)
         owner = quants_value.get('owner', self.owner_id)
         available_qty = 0
-        if self.product_id.type != 'product' or float_is_zero(quantity, precision_rounding=self.product_uom_id.rounding):
+        if not self.product_id.is_storable or float_is_zero(quantity, precision_rounding=self.product_uom_id.rounding):
             return 0, False
         if action == "available":
             available_qty, in_date = self.env['stock.quant']._update_available_quantity(self.product_id, location, quantity, lot_id=lot, package_id=package, owner_id=owner, in_date=in_date)

--- a/addons/stock/models/stock_orderpoint.py
+++ b/addons/stock/models/stock_orderpoint.py
@@ -46,7 +46,7 @@ class StockWarehouseOrderpoint(models.Model):
         'product.product', 'Product',
         domain=("[('product_tmpl_id', '=', context.get('active_id', False))] if context.get('active_model') == 'product.template' else"
             " [('id', '=', context.get('default_product_id', False))] if context.get('default_product_id') else"
-            " [('type', '=', 'product')]"),
+            " [('is_storable', '=', True)]"),
         ondelete='cascade', required=True, check_company=True)
     product_category_id = fields.Many2one('product.category', name='Product Category', related='product_id.categ_id', store=True)
     product_uom = fields.Many2one(
@@ -641,7 +641,7 @@ class StockWarehouseOrderpoint(models.Model):
         return timezone(self.company_id.partner_id.tz or 'UTC').localize(datetime.combine(self.lead_days_date, time(12))).astimezone(UTC).replace(tzinfo=None)
 
     def _get_orderpoint_products(self):
-        return self.env['product.product'].search([('type', '=', 'product'), ('stock_move_ids', '!=', False)])
+        return self.env['product.product'].search([('is_storable', '=', True), ('stock_move_ids', '!=', False)])
 
     def _get_orderpoint_locations(self):
         return self.env['stock.location'].search([('replenish_location', '=', True)])

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -832,7 +832,7 @@ class Picking(models.Model):
         """
         if not picking_type_id or picking_type_id.code == 'outgoing':
             return False
-        lines = self.move_ids.filtered(lambda m: m.product_id.type == 'product' and m.state != 'cancel')
+        lines = self.move_ids.filtered(lambda m: m.product_id.is_storable and m.state != 'cancel')
         if lines:
             allowed_states = ['confirmed', 'partially_available', 'waiting']
             if self[0].state == 'done':
@@ -1068,7 +1068,7 @@ class Picking(models.Model):
             )
 
     def _check_move_lines_map_quant_package(self, package):
-        return package._check_move_lines_map_quant(self.move_line_ids.filtered(lambda ml: ml.package_id == package and ml.product_id.type == 'product'))
+        return package._check_move_lines_map_quant(self.move_line_ids.filtered(lambda ml: ml.package_id == package and ml.product_id.is_storable))
 
     def _get_entire_pack_location_dest(self, move_line_ids):
         location_dest_ids = move_line_ids.mapped('location_dest_id')
@@ -1223,7 +1223,7 @@ class Picking(models.Model):
         another_action = False
         if self.env.user.has_group('stock.group_reception_report'):
             pickings_show_report = self.filtered(lambda p: p.picking_type_id.auto_show_reception_report)
-            lines = pickings_show_report.move_ids.filtered(lambda m: m.product_id.type == 'product' and m.state != 'cancel' and m.quantity and not m.move_dest_ids)
+            lines = pickings_show_report.move_ids.filtered(lambda m: m.product_id.is_storable and m.state != 'cancel' and m.quantity and not m.move_dest_ids)
             if lines:
                 # don't show reception report if all already assigned/nothing to assign
                 wh_location_ids = self.env['stock.location']._search([('id', 'child_of', pickings_show_report.picking_type_id.warehouse_id.view_location_id.ids), ('usage', '!=', 'supplier')])
@@ -1630,7 +1630,7 @@ class Picking(models.Model):
         view = self.env.ref('stock.stock_scrap_form_view2')
         products = self.env['product.product']
         for move in self.move_ids:
-            if move.state not in ('draft', 'cancel') and move.product_id.type in ('product', 'consu'):
+            if move.state not in ('draft', 'cancel') and move.product_id.type == 'consu':
                 products |= move.product_id
         return {
             'name': _('Scrap Products'),

--- a/addons/stock/models/stock_quant.py
+++ b/addons/stock/models/stock_quant.py
@@ -39,8 +39,8 @@ class StockQuant(models.Model):
     def _domain_product_id(self):
         if self.env.user.has_group('stock.group_stock_user'):
             return ("[] if not context.get('inventory_mode') else"
-                " [('type', '=', 'product'), ('product_tmpl_id', 'in', context.get('product_tmpl_ids', []) + [context.get('product_tmpl_id', 0)])] if context.get('product_tmpl_ids') or context.get('product_tmpl_id') else"
-                " [('type', '=', 'product')]")
+                " [('is_storable', '=', True), ('product_tmpl_id', 'in', context.get('product_tmpl_ids', []) + [context.get('product_tmpl_id', 0)])] if context.get('product_tmpl_ids') or context.get('product_tmpl_id') else"
+                " [('is_storable', '=', True)]")
         return "[]"
 
     product_id = fields.Many2one(
@@ -572,7 +572,7 @@ class StockQuant(models.Model):
 
     @api.constrains('product_id')
     def check_product_id(self):
-        if any(elem.product_id.type != 'product' for elem in self):
+        if any(not elem.product_id.is_storable for elem in self):
             raise ValidationError(_('Quants cannot be created for consumables or services.'))
 
     @api.constrains('quantity')

--- a/addons/stock/models/stock_rule.py
+++ b/addons/stock/models/stock_rule.py
@@ -460,7 +460,7 @@ class ProcurementGroup(models.Model):
 
     @api.model
     def _skip_procurement(self, procurement):
-        return procurement.product_id.type not in ("consu", "product") or float_is_zero(
+        return procurement.product_id.type != "consu" or float_is_zero(
             procurement.product_qty, precision_rounding=procurement.product_uom.rounding
         )
 

--- a/addons/stock/models/stock_scrap.py
+++ b/addons/stock/models/stock_scrap.py
@@ -19,7 +19,7 @@ class StockScrap(models.Model):
     company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company, required=True)
     origin = fields.Char(string='Source Document')
     product_id = fields.Many2one(
-        'product.product', 'Product', domain="[('type', 'in', ['product', 'consu'])]",
+        'product.product', 'Product', domain="[('type', '=', 'consu')]",
         required=True, check_company=True)
     product_uom_id = fields.Many2one(
         'uom.uom', 'Unit of Measure',
@@ -176,7 +176,7 @@ class StockScrap(models.Model):
         return action
 
     def _should_check_available_qty(self):
-        return self.product_id.type == 'product'
+        return self.product_id.is_storable
 
     def check_available_qty(self):
         if not self._should_check_available_qty():

--- a/addons/stock/models/stock_storage_category.py
+++ b/addons/stock/models/stock_storage_category.py
@@ -54,7 +54,7 @@ class StorageCategoryProductCapacity(models.Model):
     product_id = fields.Many2one('product.product', 'Product', ondelete='cascade', check_company=True,
         domain=("[('product_tmpl_id', '=', context.get('active_id', False))] if context.get('active_model') == 'product.template' else"
             " [('id', '=', context.get('default_product_id', False))] if context.get('default_product_id') else"
-            " [('type', '=', 'product')]"))
+            " [('is_storable', '=', True)]"))
     package_type_id = fields.Many2one('stock.package.type', 'Package Type', ondelete='cascade', check_company=True)
     quantity = fields.Float('Quantity', required=True)
     product_uom_id = fields.Many2one(related='product_id.uom_id')
