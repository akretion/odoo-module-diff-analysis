PR: https://github.com/odoo/odoo/pull/152215

From: d32b42d2fe20a177261aebcd94e14f9aebf1ddbf
From: Pierre-Yves Dufays
Date: 2024-03-14 14:46:57

Structural Changes: 7
Total Changes: 61

[IMP] {test_}mail, hr_contract: allow to configure activity templates deadline

When configuring a plan, we can now set for each activity template a delay to
modulate (after/before) the deadline of the created activities when scheduling
a plan.

Before, the deadline of the activities created when scheduling an activity plan
were determined by the plan date + the delay configured in the related activity
type.

We also rewrite slightly the tests to check those dates and we rename
plan_date_dateline to plan_date of the activity schedule wizard because that
date doesn't represent the deadline but the base date of the plan. Indeed, from
that date the activity deadline are computed by adding/subtracting the
delay_count (based on delay_unit).

Note that:
- we increment the mail version as there is already an upgrade for that version
- we use default=0 for plan template delay_count so that the delay_count is set
to 0 during the upgrade instead of null.

Task-3639909

Part-of: odoo/odoo#152215

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_activity.py
+++ b/addons/mail/models/mail_activity.py
@@ -179,34 +179,11 @@ class MailActivity(models.Model):
         if self.activity_type_id:
             if self.activity_type_id.summary:
                 self.summary = self.activity_type_id.summary
-            self.date_deadline = self._calculate_date_deadline(self.activity_type_id)
+            self.date_deadline = self.activity_type_id._get_date_deadline()
             self.user_id = self.activity_type_id.default_user_id or self.env.user
             if self.activity_type_id.default_note:
                 self.note = self.activity_type_id.default_note
 
-    @api.model
-    def _calculate_date_deadline(self, activity_type, force_base_date=None):
-        """ Compute the activity deadline given its type, the force_base_date and the context.
-
-        The deadline is computed by adding the activity type delay to a base date defined as:
-        - the force_base_date
-        - or the activity_previous_deadline context value if the activity type delay_from is
-          previous_activity
-        - or the current date
-
-        :param activity_type: activity type
-        :param date force_base_date: if set, this force the base date for computation
-        """
-        if force_base_date:
-            # Date.context_today is correct because date_deadline is a Date and is meant to be
-            # expressed in user TZ
-            base = force_base_date
-        elif activity_type.delay_from == 'previous_activity' and 'activity_previous_deadline' in self.env.context:
-            base = fields.Date.from_string(self.env.context.get('activity_previous_deadline'))
-        else:
-            base = fields.Date.context_today(self)
-        return base + relativedelta(**{activity_type.delay_unit: activity_type.delay_count})
-
     @api.onchange('recommended_activity_type_id')
     def _onchange_recommended_activity_type_id(self):
         if self.recommended_activity_type_id:

--- a/addons/mail/models/mail_activity_plan_template.py
+++ b/addons/mail/models/mail_activity_plan_template.py
@@ -1,6 +1,8 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from dateutil.relativedelta import relativedelta
+
 from odoo import api, fields, models, _
 from odoo.exceptions import ValidationError
 
@@ -23,6 +25,20 @@ class MailActivityPlanTemplate(models.Model):
         domain="['|', ('res_model', '=', False), '&', ('res_model', '!=', False), ('res_model', '=', parent.res_model)]",
         ondelete='restrict', required=True
     )
+    # Activity type delay fields are ignored in favor of these
+    delay_count = fields.Integer(
+        'Interval', default=0,
+        help='Number of days/week/month before executing the action after or before the scheduled plan date.')
+    delay_unit = fields.Selection([
+        ('days', 'days'),
+        ('weeks', 'weeks'),
+        ('months', 'months')],
+        string="Delay units", help="Unit of delay", required=True, default='days')
+    delay_from = fields.Selection([
+        ('before_plan_date', 'Before Plan Date'),
+        ('after_plan_date', 'After Plan Date'),
+    ],
+        string='Trigger', default="before_plan_date", required=True)
     icon = fields.Char('Icon', related='activity_type_id.icon', readonly=True)
     summary = fields.Char('Summary', compute="_compute_summary", store=True, readonly=False)
     responsible_type = fields.Selection([
@@ -71,6 +87,15 @@ class MailActivityPlanTemplate(models.Model):
             if template.responsible_type != 'other' and template.responsible_id:
                 template.responsible_id = False
 
+    def _get_date_deadline(self, base_date=False):
+        """ Return the deadline of the activity to be created given the base date. """
+        self.ensure_one()
+        base_date = base_date or fields.Date.context_today(self)
+        delta = relativedelta(**{self.delay_unit: self.delay_count})
+        if self.delay_from == 'after_plan_date':
+            return base_date + delta
+        return base_date - delta
+
     def _determine_responsible(self, on_demand_responsible, applied_on_record):
         """ Determine the responsible for the activity based on the template
         for the given record and on demand responsible.

--- a/addons/mail/models/mail_activity_type.py
+++ b/addons/mail/models/mail_activity_type.py
@@ -1,6 +1,8 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from dateutil.relativedelta import relativedelta
+
 from odoo import api, fields, models, _
 from odoo.exceptions import UserError
 
@@ -135,3 +137,12 @@ class MailActivityType(models.Model):
         if self.env.ref('mail.mail_activity_data_todo') in self:
             raise UserError(_("The 'To-Do' activity type is used to create reminders from the top bar menu and the command palette. Consequently, it cannot be archived or deleted."))
         return super().action_archive()
+
+    def _get_date_deadline(self):
+        """ Return the activity deadline computed from today or from activity_previous_deadline context variable. """
+        self.ensure_one()
+        if self.delay_from == 'previous_activity' and 'activity_previous_deadline' in self.env.context:
+            base = fields.Date.from_string(self.env.context.get('activity_previous_deadline'))
+        else:
+            base = fields.Date.context_today(self)
+        return base + relativedelta(**{self.delay_unit: self.delay_count})
