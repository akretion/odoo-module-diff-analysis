PR: https://github.com/odoo/odoo/pull/

From: b341b5ca73dafa94a305f8be82a5dd5d9ed3fe1e
From: Fabien Pinckaers
Date: 2018-01-07 18:28:03

Structural Changes: 16
Total Changes: 10

[IMP] Remove duplicate fields names

================================= pseudo patch: =================================

--- a/addons/purchase/models/purchase.py
+++ b/addons/purchase/models/purchase.py
@@ -130,7 +130,7 @@ class PurchaseOrder(models.Model):
     order_line = fields.One2many('purchase.order.line', 'order_id', string='Order Lines', states={'cancel': [('readonly', True)], 'done': [('readonly', True)]}, copy=True)
     notes = fields.Text('Terms and Conditions')
 
-    invoice_count = fields.Integer(compute="_compute_invoice", string='# of Bills', copy=False, default=0, store=True)
+    invoice_count = fields.Integer(compute="_compute_invoice", string='Bill Count', copy=False, default=0, store=True)
     invoice_ids = fields.Many2many('account.invoice', compute="_compute_invoice", string='Bills', copy=False, store=True)
     invoice_status = fields.Selection([
         ('no', 'Nothing to Bill'),
@@ -138,7 +138,7 @@ class PurchaseOrder(models.Model):
         ('invoiced', 'No Bill to Receive'),
         ], string='Billing Status', compute='_get_invoiced', store=True, readonly=True, copy=False, default='no')
 
-    picking_count = fields.Integer(compute='_compute_picking', string='Receptions', default=0, store=True)
+    picking_count = fields.Integer(compute='_compute_picking', string='Picking count', default=0, store=True)
     picking_ids = fields.Many2many('stock.picking', compute='_compute_picking', string='Receptions', copy=False, store=True)
 
     # There is no inverse function on purpose since the date may be different on each line

--- a/addons/purchase/models/res_config_settings.py
+++ b/addons/purchase/models/res_config_settings.py
@@ -12,7 +12,7 @@ class ResConfigSettings(models.TransientModel):
     po_order_approval = fields.Boolean("Order Approval", default=lambda self: self.env.user.company_id.po_double_validation == 'two_step')
     po_double_validation = fields.Selection(related='company_id.po_double_validation', string="Levels of Approvals *")
     po_double_validation_amount = fields.Monetary(related='company_id.po_double_validation_amount', string="Minimum Amount", currency_field='company_currency_id')
-    company_currency_id = fields.Many2one('res.currency', related='company_id.currency_id', readonly=True,
+    company_currency_id = fields.Many2one('res.currency', related='company_id.currency_id', string="Company Currency", readonly=True,
         help='Utility field to express amount currency')
     default_purchase_method = fields.Selection([
         ('purchase', 'Ordered quantities'),
@@ -21,7 +21,7 @@ class ResConfigSettings(models.TransientModel):
         help="This default value is applied to any new product created. "
         "This can be changed in the product detail form.", default="receive")
     module_purchase_requisition = fields.Boolean("Purchase Agreements")
-    group_warning_purchase = fields.Boolean("Warnings", implied_group='purchase.group_warning_purchase')
+    group_warning_purchase = fields.Boolean("Purchase Warnings", implied_group='purchase.group_warning_purchase')
     module_stock_dropshipping = fields.Boolean("Dropshipping")
     group_manage_vendor_price = fields.Boolean("Vendor Pricelists",
         implied_group="purchase.group_manage_vendor_price")

--- a/addons/purchase/models/res_partner.py
+++ b/addons/purchase/models/res_partner.py
@@ -24,7 +24,7 @@ class res_partner(models.Model):
     property_purchase_currency_id = fields.Many2one(
         'res.currency', string="Supplier Currency", company_dependent=True,
         help="This currency will be used, instead of the default one, for purchases from the current partner")
-    purchase_order_count = fields.Integer(compute='_purchase_invoice_count', string='# of Purchase Order')
+    purchase_order_count = fields.Integer(compute='_purchase_invoice_count', string='Purchase Order Count')
     supplier_invoice_count = fields.Integer(compute='_purchase_invoice_count', string='# Vendor Bills')
     purchase_warn = fields.Selection(WARNING_MESSAGE, 'Purchase Order', help=WARNING_HELP, required=True, default="no-message")
     purchase_warn_msg = fields.Text('Message for Purchase Order')

--- a/addons/purchase/models/purchase.py
+++ b/addons/purchase/models/purchase.py
@@ -130,7 +130,7 @@ class PurchaseOrder(models.Model):
     order_line = fields.One2many('purchase.order.line', 'order_id', string='Order Lines', states={'cancel': [('readonly', True)], 'done': [('readonly', True)]}, copy=True)
     notes = fields.Text('Terms and Conditions')
 
-    invoice_count = fields.Integer(compute="_compute_invoice", string='# of Bills', copy=False, default=0, store=True)
+    invoice_count = fields.Integer(compute="_compute_invoice", string='Bill Count', copy=False, default=0, store=True)
     invoice_ids = fields.Many2many('account.invoice', compute="_compute_invoice", string='Bills', copy=False, store=True)
     invoice_status = fields.Selection([
         ('no', 'Nothing to Bill'),

--- a/addons/purchase/models/res_config_settings.py
+++ b/addons/purchase/models/res_config_settings.py
@@ -21,7 +21,7 @@ class ResConfigSettings(models.TransientModel):
         help="This default value is applied to any new product created. "
         "This can be changed in the product detail form.", default="receive")
     module_purchase_requisition = fields.Boolean("Purchase Agreements")
-    group_warning_purchase = fields.Boolean("Warnings for Purchase", implied_group='purchase.group_warning_purchase')
+    group_warning_purchase = fields.Boolean("Purchase Warnings", implied_group='purchase.group_warning_purchase')
     module_stock_dropshipping = fields.Boolean("Dropshipping")
     group_manage_vendor_price = fields.Boolean("Vendor Pricelists",
         implied_group="purchase.group_manage_vendor_price")

--- a/addons/purchase/models/res_partner.py
+++ b/addons/purchase/models/res_partner.py
@@ -24,7 +24,7 @@ class res_partner(models.Model):
     property_purchase_currency_id = fields.Many2one(
         'res.currency', string="Supplier Currency", company_dependent=True,
         help="This currency will be used, instead of the default one, for purchases from the current partner")
-    purchase_order_count = fields.Integer(compute='_purchase_invoice_count', string='# of Purchase Order')
+    purchase_order_count = fields.Integer(compute='_purchase_invoice_count', string='Purchase Order Count')
     supplier_invoice_count = fields.Integer(compute='_purchase_invoice_count', string='# Vendor Bills')
     purchase_warn = fields.Selection(WARNING_MESSAGE, 'Purchase Order', help=WARNING_HELP, required=True, default="no-message")
     purchase_warn_msg = fields.Text('Message for Purchase Order')
