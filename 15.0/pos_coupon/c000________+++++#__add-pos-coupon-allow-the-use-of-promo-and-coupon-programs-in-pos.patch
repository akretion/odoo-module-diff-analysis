PR: https://github.com/odoo/odoo/pull/

From: 54c42ae8365f7f15d4355acc449781f9e1926b72
From: Joseph Caburnay
Date: 2020-11-03 10:48:03

Structural Changes: 37
Total Changes: 333

[ADD] pos_coupon: allow the use of promo and coupon programs in pos

================================= pseudo patch: =================================

--- a/None
+++ b/addons/pos_coupon/models/__init__.py
@@ -0,0 +1,8 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from . import pos_config
+from . import pos_order
+from . import coupon
+from . import coupon_program
+from . import barcode_rule

--- a/None
+++ b/addons/pos_coupon/models/barcode_rule.py
@@ -0,0 +1,15 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models, fields
+from odoo.tools.translate import _
+
+
+class BarcodeRule(models.Model):
+    _inherit = 'barcode.rule'
+
+    type = fields.Selection(selection_add=[
+        ('coupon', 'Coupon'),
+    ], ondelete={
+        'coupon': 'set default',
+    })

--- a/None
+++ b/addons/pos_coupon/models/coupon.py
@@ -0,0 +1,42 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+# NOTE Use black to automatically format this code.
+
+from odoo import api, fields, models, _
+
+
+class Coupon(models.Model):
+    _inherit = "coupon.coupon"
+
+    source_pos_order_id = fields.Many2one(
+        "pos.order",
+        string="PoS Order Reference",
+        help="PoS order where this coupon is generated.",
+    )
+    pos_order_id = fields.Many2one(
+        "pos.order",
+        string="Applied on PoS Order",
+        help="PoS order where this coupon is consumed/booked.",
+    )
+
+    def _check_coupon_code(self, order_date, partner_id, **kwargs):
+        if self.program_id.id in kwargs.get("reserved_program_ids", []):
+            return {
+                "error": _("A coupon from the same program has already been reserved for this order.")
+            }
+        return super()._check_coupon_code(order_date, partner_id, **kwargs)
+
+    def _get_default_template(self):
+        if self.source_pos_order_id:
+            return self.env.ref('pos_coupon.mail_coupon_template', False)
+        return super()._get_default_template()
+
+    @api.model
+    def _generate_code(self):
+        """
+        Modify the generated barcode to be compatible with the default
+        barcode rule in this module. See `data/default_barcode_patterns.xml`.
+        """
+        code = super()._generate_code()
+        return '043' + code[3:]

--- a/None
+++ b/addons/pos_coupon/models/coupon_program.py
@@ -0,0 +1,84 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+# NOTE Use black to automatically format this code.
+
+from odoo import api, fields, models, _
+
+import ast
+
+class CouponProgram(models.Model):
+    _inherit = "coupon.program"
+
+    pos_config_ids = fields.Many2many(
+        "pos.config",
+        string="Point of Sales",
+        readonly=True,
+    )
+    pos_order_line_ids = fields.One2many(
+        "pos.order.line",
+        "program_id",
+        string="PoS Order Lines",
+        help="Order lines where this program is applied.",
+    )
+    promo_barcode = fields.Char(
+        "Barcode",
+        default=lambda self: self.env["coupon.coupon"]._generate_code(),
+        help="A technical field used as an alternative to the promo_code. "
+        "This is automatically generated when promo_code is changed.",
+    )
+    pos_order_ids = fields.Many2many(
+        "pos.order", help="The PoS orders where this program is applied.",
+    )
+    pos_order_count = fields.Integer(
+        "PoS Order Count", compute="_compute_pos_order_count"
+    )
+    valid_product_ids = fields.Many2many(
+        "product.product",
+        "Valid Products",
+        compute="_compute_valid_product_ids",
+        help="These are the products that are valid in this program.",
+    )
+    valid_partner_ids = fields.Many2many(
+        "res.partner",
+        "Valid Partners",
+        compute="_compute_valid_partner_ids",
+        help="These are the partners that can avail this program.",
+    )
+
+    @api.depends("pos_order_ids")
+    def _compute_pos_order_count(self):
+        for program in self:
+            program.pos_order_count = len(program.pos_order_ids)
+
+    def write(self, vals):
+        if "promo_code" in vals:
+            vals.update({"promo_barcode": self.env["coupon.coupon"]._generate_code()})
+        return super(CouponProgram, self).write(vals)
+
+    def action_view_pos_orders(self):
+        self.ensure_one()
+        return {
+            "name": _("PoS Orders"),
+            "view_mode": "tree,form",
+            "res_model": "pos.order",
+            "type": "ir.actions.act_window",
+            "domain": [("id", "in", self.pos_order_ids.ids)],
+            "context": dict(self._context, create=False),
+        }
+
+    @api.depends("rule_products_domain")
+    def _compute_valid_product_ids(self):
+        for program in self:
+            domain = ast.literal_eval(program.rule_products_domain) if program.rule_products_domain else []
+            program.valid_product_ids = self.env["product.product"].search(domain).ids
+
+    @api.depends("rule_partners_domain")
+    def _compute_valid_partner_ids(self):
+        for program in self:
+            domain = ast.literal_eval(program.rule_partners_domain) if program.rule_partners_domain else []
+            program.valid_partner_ids = self.env["res.partner"].search(domain).ids
+
+    def get_number_usage(self):
+        res = super(CouponProgram, self).get_number_usage()
+        return res + self.pos_order_count

--- a/None
+++ b/addons/pos_coupon/models/pos_config.py
@@ -0,0 +1,104 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+# NOTE Use black to automatically format this code.
+
+from datetime import datetime
+
+from odoo import api, fields, models, _
+from odoo.exceptions import UserError
+
+
+class PosConfig(models.Model):
+    _inherit = "pos.config"
+
+    use_coupon_programs = fields.Boolean(
+        "Coupons & Promotions",
+        help="Use coupon and promotion programs in this PoS configuration.",
+    )
+    coupon_program_ids = fields.Many2many(
+        "coupon.program",
+        string="Coupon Programs",
+        compute="_filter_programs",
+        inverse="_set_programs",
+    )
+    promo_program_ids = fields.Many2many(
+        "coupon.program",
+        string="Promotion Programs",
+        compute="_filter_programs",
+        inverse="_set_programs",
+    )
+    program_ids = fields.Many2many("coupon.program", string="Coupons and Promotions")
+
+    @api.depends("program_ids")
+    def _filter_programs(self):
+        for config in self:
+            config.coupon_program_ids = config.program_ids.filtered(
+                lambda program: program.program_type == "coupon_program"
+            )
+            config.promo_program_ids = config.program_ids.filtered(
+                lambda program: program.program_type == "promotion_program"
+            )
+
+    def _set_programs(self):
+        for config in self:
+            config.program_ids = config.coupon_program_ids | config.promo_program_ids
+
+    def open_session_cb(self, check_coa=True):
+        # Check validity of programs before opening a new session
+        invalid_reward_products_msg = ""
+        for program in self.program_ids:
+            if (
+                program.reward_product_id
+                and not program.reward_product_id.available_in_pos
+            ):
+                reward_product = program.reward_product_id
+                invalid_reward_products_msg += "\n\t"
+                invalid_reward_products_msg += _(
+                    "Program: %(name)s (%(type)s), Reward Product: `%(reward_product)s`",
+                    name=program.name,
+                    type=program.program_type,
+                    reward_product=reward_product.name,
+                )
+
+        if invalid_reward_products_msg:
+            intro = _(
+                "To continue, make the following reward products to be available in Point of Sale."
+            )
+            raise UserError(f"{intro}\n{invalid_reward_products_msg}")
+
+        return super(PosConfig, self).open_session_cb(check_coa)
+
+    def use_coupon_code(self, code, creation_date, partner_id, reserved_program_ids):
+        coupon_to_check = self.env["coupon.coupon"].search(
+            [("code", "=", code), ("program_id", "in", self.program_ids.ids)]
+        )
+        # If not unique, we only check the first coupon.
+        coupon_to_check = coupon_to_check[:1]
+        if not coupon_to_check:
+            return {
+                "successful": False,
+                "payload": {
+                    "error_message": _("This coupon is invalid (%s).") % (code)
+                },
+            }
+        message = coupon_to_check._check_coupon_code(
+            fields.Date.from_string(creation_date[:11]),
+            partner_id,
+            reserved_program_ids=reserved_program_ids,
+        )
+        error_message = message.get("error", False)
+        if error_message:
+            return {
+                "successful": False,
+                "payload": {"error_message": error_message},
+            }
+
+        coupon_to_check.write({"state": "used"})
+        return {
+            "successful": True,
+            "payload": {
+                "program_id": coupon_to_check.program_id.id,
+                "coupon_id": coupon_to_check.id,
+            },
+        }

--- a/None
+++ b/addons/pos_coupon/models/pos_order.py
@@ -0,0 +1,80 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+# NOTE Use black to automatically format this code.
+
+from collections import defaultdict
+
+from odoo import api, fields, models, _
+
+
+class PosOrder(models.Model):
+    _inherit = "pos.order"
+
+    applied_program_ids = fields.Many2many(
+        "coupon.program",
+        string="Applied Programs",
+        help="Technical field. This is set when the order is validated. "
+        "We normally get this value thru the `program_id` of the reward lines.",
+    )
+    used_coupon_ids = fields.One2many(
+        "coupon.coupon", "pos_order_id", string="Consumed Coupons"
+    )
+    generated_coupon_ids = fields.One2many(
+        "coupon.coupon", "source_pos_order_id", string="Generated Coupons"
+    )
+
+    def validate_coupon_programs(
+        self, program_ids_to_generate_coupons, unused_coupon_ids
+    ):
+        """This is called after create_from_ui is called. We set here fields
+        that are used to link programs and coupons to the order.
+
+        We also return the generated coupons that can be used in the frontend
+        to print the generated codes in the receipt.
+        """
+        self.ensure_one()
+
+        program_ids_to_generate_coupons = program_ids_to_generate_coupons or []
+        unused_coupon_ids = unused_coupon_ids or []
+
+        self.env["coupon.coupon"].browse(unused_coupon_ids).write({"state": "new"})
+        self.write(
+            {
+                "applied_program_ids": [(4, i) for i in self.lines.program_id.ids],
+                "used_coupon_ids": [(4, i) for i in self.lines.coupon_id.ids],
+                "generated_coupon_ids": [
+                    (4, i)
+                    for i in (
+                        self.env["coupon.program"]
+                        .browse(program_ids_to_generate_coupons)
+                        ._generate_coupons(self.partner_id.id)
+                    ).ids
+                ],
+            }
+        )
+        return [
+            {
+                "code": coupon.code,
+                "expiration_date": coupon.expiration_date,
+                "program_name": coupon.program_id.name,
+            }
+            for coupon in self.generated_coupon_ids
+        ]
+
+
+class PosOrderLine(models.Model):
+    _inherit = "pos.order.line"
+
+    is_program_reward = fields.Boolean(
+        "Is reward line",
+        help="Flag indicating that this order line is a result of coupon/promo program.",
+    )
+    program_id = fields.Many2one(
+        "coupon.program",
+        string="Program",
+        help="Promotion/Coupon Program where this reward line is based.",
+    )
+    coupon_id = fields.Many2one(
+        "coupon.coupon", string="Coupon", help="Coupon that generated this reward.",
+    )
