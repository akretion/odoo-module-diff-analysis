PR: https://github.com/odoo/odoo/pull/129114

From: c344f8e36cefab86cec984e3063361628e6eb758
From: Jitendra Prajapat
Date: 2024-03-18 19:46:48

Structural Changes: 32
Total Changes: 318

[IMP] purchase{_requisition}: add new purchase template agreement type

In this commit
==============

Added new purchase template agreement type:
- Introduce a new Purchase Agreement type: `Purchase Template`.
- Revise purchase agreement settings descriptions for clarity.

UI/UX cleanups and changes:
- Added a new purchase alternative setting to make the purchase alternative
  visible (no longer visible by default) - feature to be separated in
  future task
- Rename blanket order menu item to agreement types.
- Reorganize and rename fields in the purchase agreement.
- Adjusted purchase agreement reports to handle both two types of
  requsition types: 1. Blanket Order and 2.Purchase Template.
- Rename field names and English fixes for better user experience.

Relevant removed model and fields:
- Remove fields (`state_blanket_order`,`is_quantity_copy`,`type_id`) and added
  new field `requisition_type` in place of `type_id` in purchase_requisition.
- Removed three state options ('ongoing', 'in_progress', and 'open'), since
  'confirmed' best applies to both requisition types
- Removed model `purchase_requisition_type` as there will only two type of
  purchase Agreements(`blanket order`,`purchase template`).

Also cleanup and fix the code when needed/useful.

Related upgrade PR: odoo/upgrade#5252

task - 3414352

closes odoo/odoo#129114

Signed-off-by: Arnold Moyaux (arm) <arm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/purchase_requisition/models/__init__.py
+++ b/addons/purchase_requisition/models/__init__.py
@@ -3,3 +3,4 @@
 from . import purchase
 from . import product
 from . import purchase_requisition
+from . import res_config_settings

--- a/addons/purchase_requisition/models/purchase.py
+++ b/addons/purchase_requisition/models/purchase.py
@@ -23,8 +23,8 @@ class PurchaseOrderGroup(models.Model):
 class PurchaseOrder(models.Model):
     _inherit = 'purchase.order'
 
-    requisition_id = fields.Many2one('purchase.requisition', string='Blanket Order', copy=False)
-    is_quantity_copy = fields.Selection(related='requisition_id.is_quantity_copy', readonly=False)
+    requisition_id = fields.Many2one('purchase.requisition', string='Agreement', copy=False)
+    requisition_type = fields.Selection(related='requisition_id.requisition_type')
 
     purchase_group_id = fields.Many2one('purchase.order.group')
     alternative_po_ids = fields.One2many(
@@ -39,7 +39,8 @@ class PurchaseOrder(models.Model):
     @api.depends('purchase_group_id')
     def _compute_has_alternatives(self):
         self.has_alternatives = False
-        self.filtered(lambda po: po.purchase_group_id).has_alternatives = True
+        if self.env.user.has_group('purchase_requisition.group_purchase_alternatives'):
+            self.filtered(lambda po: po.purchase_group_id).has_alternatives = True
 
     @api.onchange('requisition_id')
     def _onchange_requisition_id(self):
@@ -69,10 +70,10 @@ class PurchaseOrder(models.Model):
             else:
                 self.origin = requisition.name
         self.notes = requisition.description
-        self.date_order = fields.Datetime.now()
-
-        if requisition.type_id.line_copy != 'copy':
-            return
+        if requisition.date_start:
+            self.date_order = max(fields.Datetime.now(), fields.Datetime.to_datetime(requisition.date_start))
+        else:
+            self.date_order = fields.Datetime.now()
 
         # Create PO lines if necessary
         order_lines = []
@@ -97,7 +98,7 @@ class PurchaseOrder(models.Model):
                 product_qty = line.product_qty
                 price_unit = line.price_unit
 
-            if requisition.type_id.quantity_copy != 'copy':
+            if requisition.requisition_type != 'purchase_template':
                 product_qty = 0
 
             # Create PO line
@@ -122,14 +123,6 @@ class PurchaseOrder(models.Model):
                     'context': dict(self.env.context, default_alternative_po_ids=alternative_po_ids.ids, default_po_ids=self.ids),
                 }
         res = super(PurchaseOrder, self).button_confirm()
-        for po in self:
-            if not po.requisition_id:
-                continue
-            if po.requisition_id.type_id.exclusive == 'exclusive':
-                others_po = po.requisition_id.mapped('purchase_ids').filtered(lambda r: r.id != po.id)
-                others_po.button_cancel()
-                if po.state not in ['draft', 'sent', 'to approve']:
-                    po.requisition_id.action_done()
         return res
 
     @api.model_create_multi

--- a/addons/purchase_requisition/models/purchase_requisition.py
+++ b/addons/purchase_requisition/models/purchase_requisition.py
@@ -1,40 +1,7 @@
-# -*- encoding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
-from datetime import datetime, time
 
 from odoo import api, fields, models, _
-from odoo.exceptions import UserError
-
-
-PURCHASE_REQUISITION_STATES = [
-    ('draft', 'Draft'),
-    ('ongoing', 'Ongoing'),
-    ('in_progress', 'Confirmed'),
-    ('open', 'Bid Selection'),
-    ('done', 'Closed'),
-    ('cancel', 'Cancelled')
-]
-
-
-class PurchaseRequisitionType(models.Model):
-    _name = "purchase.requisition.type"
-    _description = "Purchase Requisition Type"
-    _order = "sequence"
-
-    name = fields.Char(string='Agreement Type', required=True, translate=True)
-    sequence = fields.Integer(default=1)
-    exclusive = fields.Selection([
-        ('exclusive', 'Select only one RFQ (exclusive)'), ('multiple', 'Select multiple RFQ (non-exclusive)')],
-        string='Agreement Selection Type', required=True, default='multiple',
-            help="""Select only one RFQ (exclusive):  when a purchase order is confirmed, cancel the remaining purchase order.\n
-                    Select multiple RFQ (non-exclusive): allows multiple purchase orders. On confirmation of a purchase order it does not cancel the remaining orders""")
-    quantity_copy = fields.Selection([
-        ('copy', 'Use quantities of agreement'), ('none', 'Set quantities manually')],
-        string='Quantities', required=True, default='none')
-    line_copy = fields.Selection([
-        ('copy', 'Use lines of agreement'), ('none', 'Do not create RfQ lines automatically')],
-        string='Lines', required=True, default='copy')
-    active = fields.Boolean(default=True, help="Set active to false to hide the Purchase Agreement Types without removing it.")
+from odoo.exceptions import UserError, ValidationError
 
 
 class PurchaseRequisition(models.Model):
@@ -43,17 +10,18 @@ class PurchaseRequisition(models.Model):
     _inherit = ['mail.thread', 'mail.activity.mixin']
     _order = "id desc"
 
-    def _get_type_id(self):
-        return self.env['purchase.requisition.type'].search([], limit=1)
-
-    name = fields.Char(string='Reference', required=True, copy=False, default='New', readonly=True)
-    origin = fields.Char(string='Source Document')
+    name = fields.Char(
+        string='Agreement', copy=False, readonly=True, required=True,
+        default=lambda self: _('New'))
+    active = fields.Boolean('Active', default=True)
+    reference = fields.Char(string='Reference')
     order_count = fields.Integer(compute='_compute_orders_number', string='Number of Orders')
-    vendor_id = fields.Many2one('res.partner', string="Vendor", domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
-    type_id = fields.Many2one('purchase.requisition.type', string="Agreement Type", required=True, default=_get_type_id)
-    ordering_date = fields.Date(string="Ordering Date", tracking=True)
-    date_end = fields.Datetime(string='Agreement Deadline', tracking=True)
-    schedule_date = fields.Date(string='Delivery Date', index=True, help="The expected and scheduled delivery date where all the products are received", tracking=True)
+    vendor_id = fields.Many2one('res.partner', string='Vendor', domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
+    requisition_type = fields.Selection([
+        ('blanket_order', 'Blanket Order'), ('purchase_template', 'Purchase Template')],
+         string='Agreement Type', required=True, default='blanket_order')
+    date_start = fields.Date(string='Start Date', tracking=True)
+    date_end = fields.Date(string='End Date', tracking=True)
     user_id = fields.Many2one(
         'res.users', string='Purchase Representative',
         default=lambda self: self.env.user, check_company=True)
@@ -62,31 +30,25 @@ class PurchaseRequisition(models.Model):
     purchase_ids = fields.One2many('purchase.order', 'requisition_id', string='Purchase Orders')
     line_ids = fields.One2many('purchase.requisition.line', 'requisition_id', string='Products to Purchase', copy=True)
     product_id = fields.Many2one('product.product', related='line_ids.product_id', string='Product')
-    state = fields.Selection(PURCHASE_REQUISITION_STATES,
-                              'Status', tracking=True, required=True,
-                              copy=False, default='draft')
-    state_blanket_order = fields.Selection(PURCHASE_REQUISITION_STATES, compute='_set_state')
-    is_quantity_copy = fields.Selection(related='type_id.quantity_copy', readonly=True)
-    currency_id = fields.Many2one('res.currency', 'Currency', required=True,
-        default=lambda self: self.env.company.currency_id.id)
-
-    @api.depends('state')
-    def _set_state(self):
-        for requisition in self:
-            requisition.state_blanket_order = requisition.state
+    state = fields.Selection(
+        selection=[
+            ('draft', 'Draft'),
+            ('confirmed', 'Confirmed'),
+            ('done', 'Closed'),
+            ('cancel', 'Cancelled')
+        ],
+        string='Status', tracking=True, required=True,
+        copy=False, default='draft')
+    currency_id = fields.Many2one(
+        'res.currency', 'Currency', required=True, precompute=True,
+        compute='_compute_currency_id', store=True, readonly=False)
 
     @api.onchange('vendor_id')
     def _onchange_vendor(self):
-        self = self.with_company(self.company_id)
-        if not self.vendor_id:
-            self.currency_id = self.env.company.currency_id.id
-        else:
-            self.currency_id = self.vendor_id.property_purchase_currency_id.id or self.env.company.currency_id.id
-
         requisitions = self.env['purchase.requisition'].search([
             ('vendor_id', '=', self.vendor_id.id),
-            ('state', '=', 'ongoing'),
-            ('type_id.quantity_copy', '=', 'none'),
+            ('state', '=', 'confirmed'),
+            ('requisition_type', '=', 'blanket_order'),
             ('company_id', '=', self.company_id.id),
         ])
         if any(requisitions):
@@ -98,11 +60,60 @@ class PurchaseRequisition(models.Model):
             }
             return {'warning': warning}
 
+    @api.depends('vendor_id')
+    def _compute_currency_id(self):
+        for requisition in self:
+            if not requisition.vendor_id or not requisition.vendor_id.property_purchase_currency_id:
+                requisition.currency_id = requisition.company_id.currency_id.id
+            else:
+                requisition.currency_id = requisition.vendor_id.property_purchase_currency_id.id
+
     @api.depends('purchase_ids')
     def _compute_orders_number(self):
         for requisition in self:
             requisition.order_count = len(requisition.purchase_ids)
 
+    @api.constrains('date_start', 'date_end')
+    def _check_dates(self):
+        invalid_requsitions = self.filtered(lambda r: r.date_end and r.date_start and r.date_end < r.date_start)
+        if invalid_requsitions:
+            raise ValidationError(_(
+                "End date cannot be earlier than start date. Please check dates for agreements: %s", ', '.join(invalid_requsitions.mapped('name'))
+            ))
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        defaults = self.default_get(['requisition_type', 'company_id'])
+        for vals in vals_list:
+            requisition_type = vals.get('requisition_type', defaults['requisition_type'])
+            company_id = vals.get('company_id', defaults['company_id'])
+            if requisition_type == 'blanket_order':
+                vals['name'] = self.env['ir.sequence'].with_company(company_id).next_by_code('purchase.requisition.blanket.order')
+            else:
+                vals['name'] = self.env['ir.sequence'].with_company(company_id).next_by_code('purchase.requisition.purchase.template')
+        return super().create(vals_list)
+
+    def write(self, vals):
+        requisitions_to_rename = self.env['purchase.requisition']
+        if 'requisition_type' in vals or 'company_id' in vals:
+            requisitions_to_rename = self.filtered(lambda r:
+                r.requisition_type != vals.get('requisition_type', r.requisition_type) or
+                r.company_id.id != vals.get('company_id', r.company_id.id))
+        res = super().write(vals)
+        for requisition in requisitions_to_rename:
+            if requisition.state != 'draft':
+                raise UserError(_("You cannot change the Agreement Type or Company of a not draft purchase agreement."))
+            if requisition.requisition_type == 'purchase_template':
+                requisition.date_start = requisition.date_end = False
+            code = requisition.requisition_type == 'blanket_order' and 'purchase.requisition.blanket.order' or 'purchase.requisition.purchase.template'
+            requisition.name = self.env['ir.sequence'].with_company(requisition.company_id).next_by_code(code)
+        return res
+
+    def unlink(self):
+        # Draft requisitions could have some requisition lines.
+        self.line_ids.unlink()
+        return super().unlink()
+
     def action_cancel(self):
         # try to set all associated quotations to cancel state
         for requisition in self:
@@ -111,32 +122,24 @@ class PurchaseRequisition(models.Model):
             requisition.purchase_ids.button_cancel()
             for po in requisition.purchase_ids:
                 po.message_post(body=_('Cancelled by the agreement associated to this quotation.'))
-        self.write({'state': 'cancel'})
+        self.state = 'cancel'
 
-    def action_in_progress(self):
+    def action_confirm(self):
         self.ensure_one()
         if not self.line_ids:
-            raise UserError(_("You cannot confirm agreement '%s' because there is no product line.", self.name))
-        if self.type_id.quantity_copy == 'none' and self.vendor_id:
+            raise UserError(_("You cannot confirm agreement '%(agreement)s' because it does not contain any product lines.", agreement=self.name))
+        if self.requisition_type == 'blanket_order':
             for requisition_line in self.line_ids:
                 if requisition_line.price_unit <= 0.0:
-                    raise UserError(_('You cannot confirm the blanket order without price.'))
+                    raise UserError(_('You cannot confirm a blanket order with lines missing a price.'))
                 if requisition_line.product_qty <= 0.0:
-                    raise UserError(_('You cannot confirm the blanket order without quantity.'))
-                requisition_line.create_supplier_info()
-            self.write({'state': 'ongoing'})
-        else:
-            self.write({'state': 'in_progress'})
-        # Set the sequence number regarding the requisition type
-        if self.name == 'New':
-            self.name = self.env['ir.sequence'].with_company(self.company_id).next_by_code('purchase.requisition.blanket.order')
-
-    def action_open(self):
-        self.write({'state': 'open'})
+                    raise UserError(_('You cannot confirm a blanket order with lines missing a quantity.'))
+                requisition_line._create_supplier_info()
+        self.state = 'confirmed'
 
     def action_draft(self):
         self.ensure_one()
-        self.write({'state': 'draft'})
+        self.state = 'draft'
 
     def action_done(self):
         """
@@ -155,11 +158,6 @@ class PurchaseRequisition(models.Model):
         if any(requisition.state not in ('draft', 'cancel') for requisition in self):
             raise UserError(_('You can only delete draft or cancelled requisitions.'))
 
-    def unlink(self):
-        # Draft requisitions could have some requisition lines.
-        self.mapped('line_ids').unlink()
-        return super(PurchaseRequisition, self).unlink()
-
 
 class PurchaseRequisitionLine(models.Model):
     _name = "purchase.requisition.line"
@@ -174,48 +172,83 @@ class PurchaseRequisitionLine(models.Model):
         domain="[('category_id', '=', product_uom_category_id)]")
     product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
     product_qty = fields.Float(string='Quantity', digits='Product Unit of Measure')
-    product_description_variants = fields.Char('Custom Description')
-    price_unit = fields.Float(string='Unit Price', digits='Product Price')
-    qty_ordered = fields.Float(compute='_compute_ordered_qty', string='Ordered Quantities')
+    product_description_variants = fields.Char('Description')
+    price_unit = fields.Float(
+        string='Unit Price', digits='Product Price', default=0.0,
+        compute="_compute_price_unit", readonly=False, store=True)
+    qty_ordered = fields.Float(compute='_compute_ordered_qty', string='Ordered')
     requisition_id = fields.Many2one('purchase.requisition', required=True, string='Purchase Agreement', ondelete='cascade')
     company_id = fields.Many2one('res.company', related='requisition_id.company_id', string='Company', store=True, readonly=True)
-    schedule_date = fields.Date(string='Scheduled Date')
     supplier_info_ids = fields.One2many('product.supplierinfo', 'purchase_requisition_line_id')
 
+    @api.depends('requisition_id.purchase_ids.state')
+    def _compute_ordered_qty(self):
+        line_found = set()
+        for line in self:
+            total = 0.0
+            for po in line.requisition_id.purchase_ids.filtered(lambda purchase_order: purchase_order.state in ['purchase', 'done']):
+                for po_line in po.order_line.filtered(lambda order_line: order_line.product_id == line.product_id):
+                    if po_line.product_uom != line.product_uom_id:
+                        total += po_line.product_uom._compute_quantity(po_line.product_qty, line.product_uom_id)
+                    else:
+                        total += po_line.product_qty
+            if line.product_id not in line_found:
+                line.qty_ordered = total
+                line_found.add(line.product_id)
+            else:
+                line.qty_ordered = 0
+
+    @api.depends('product_id')
+    def _compute_product_uom_id(self):
+        for line in self:
+            line.product_uom_id = line.product_id.uom_id
+
+    @api.depends('product_id', 'company_id', 'requisition_id.date_start', 'product_qty', 'product_uom_id', 'requisition_id.vendor_id', 'requisition_id.requisition_type')
+    def _compute_price_unit(self):
+        for line in self:
+            if line.requisition_id.state != 'draft' or line.requisition_id.requisition_type != 'purchase_template' or not line.requisition_id.vendor_id or not line.product_id:
+                continue
+            seller = line.product_id._select_seller(
+                partner_id=line.requisition_id.vendor_id, quantity=line.product_qty,
+                date=line.requisition_id.date_start, uom_id=line.product_uom_id)
+            line.price_unit = seller.price if seller else line.product_id.standard_price
+
     @api.model_create_multi
     def create(self, vals_list):
         lines = super().create(vals_list)
         for line, vals in zip(lines, vals_list):
-            if line.requisition_id.state not in ['draft', 'cancel', 'done'] and line.requisition_id.is_quantity_copy == 'none':
+            if line.requisition_id.requisition_type == 'blanket_order' and line.requisition_id.state not in ['draft', 'cancel', 'done']:
+                if vals['price_unit'] <= 0.0:
+                    raise UserError(_("You cannot have a negative or unit price of 0 for an already confirmed blanket order."))
                 supplier_infos = self.env['product.supplierinfo'].search([
                     ('product_id', '=', vals.get('product_id')),
                     ('partner_id', '=', line.requisition_id.vendor_id.id),
                 ])
                 if not any(s.purchase_requisition_id for s in supplier_infos):
-                    line.create_supplier_info()
-                if vals['price_unit'] <= 0.0:
-                    raise UserError(_('You cannot confirm the blanket order without price.'))
+                    line._create_supplier_info()
         return lines
 
     def write(self, vals):
-        res = super(PurchaseRequisitionLine, self).write(vals)
-        if 'price_unit' in vals:
-            if vals['price_unit'] <= 0.0 and any(
-                    requisition.state not in ['draft', 'cancel', 'done'] and
-                    requisition.is_quantity_copy == 'none' for requisition in self.mapped('requisition_id')):
-                raise UserError(_('You cannot confirm the blanket order without price.'))
-            # If the price is updated, we have to update the related SupplierInfo
-            self.supplier_info_ids.write({'price': vals['price_unit']})
+        res = super().write(vals)
+        if 'price_unit' not in vals:
+            return res
+        if vals['price_unit'] <= 0.0 and any(
+                requisition.requisition_type == 'blanket_order' and
+                requisition.state not in ['draft', 'cancel', 'done'] for requisition in self.mapped('requisition_id')):
+            raise UserError(_("You cannot have a negative or unit price of 0 for an already confirmed blanket order."))
+        # If the price is updated, we have to update the related SupplierInfo
+        self.supplier_info_ids.write({'price': vals['price_unit']})
         return res
 
     def unlink(self):
         to_unlink = self.filtered(lambda r: r.requisition_id.state not in ['draft', 'cancel', 'done'])
-        to_unlink.mapped('supplier_info_ids').unlink()
-        return super(PurchaseRequisitionLine, self).unlink()
+        to_unlink.supplier_info_ids.unlink()
+        return super().unlink()
 
-    def create_supplier_info(self):
+    def _create_supplier_info(self):
+        self.ensure_one()
         purchase_requisition = self.requisition_id
-        if purchase_requisition.type_id.quantity_copy == 'none' and purchase_requisition.vendor_id:
+        if purchase_requisition.requisition_type == 'blanket_order' and purchase_requisition.vendor_id:
             # create a supplier_info only in case of blanket order
             self.env['product.supplierinfo'].sudo().create({
                 'partner_id': purchase_requisition.vendor_id.id,
@@ -226,45 +259,13 @@ class PurchaseRequisitionLine(models.Model):
                 'purchase_requisition_line_id': self.id,
             })
 
-    @api.depends('requisition_id.purchase_ids.state')
-    def _compute_ordered_qty(self):
-        line_found = set()
-        for line in self:
-            total = 0.0
-            for po in line.requisition_id.purchase_ids.filtered(lambda purchase_order: purchase_order.state in ['purchase', 'done']):
-                for po_line in po.order_line.filtered(lambda order_line: order_line.product_id == line.product_id):
-                    if po_line.product_uom != line.product_uom_id:
-                        total += po_line.product_uom._compute_quantity(po_line.product_qty, line.product_uom_id)
-                    else:
-                        total += po_line.product_qty
-            if line.product_id not in line_found:
-                line.qty_ordered = total
-                line_found.add(line.product_id)
-            else:
-                line.qty_ordered = 0
-
-    @api.depends('product_id')
-    def _compute_product_uom_id(self):
-        for line in self:
-            line.product_uom_id = line.product_id.uom_id
-
-    @api.onchange('product_id')
-    def _onchange_product_id(self):
-        if self.product_id:
-            self.product_uom_id = self.product_id.uom_po_id
-            self.product_qty = 1.0
-        if not self.schedule_date:
-            self.schedule_date = self.requisition_id.schedule_date
-
     def _prepare_purchase_order_line(self, name, product_qty=0.0, price_unit=0.0, taxes_ids=False):
         self.ensure_one()
-        requisition = self.requisition_id
         if self.product_description_variants:
             name += '\n' + self.product_description_variants
-        if requisition.schedule_date:
-            date_planned = datetime.combine(requisition.schedule_date, time.min)
-        else:
-            date_planned = datetime.now()
+        date_planned = fields.Datetime.now()
+        if self.requisition_id.date_start:
+            date_planned = max(date_planned, fields.Datetime.to_datetime(self.requisition_id.date_start))
         return {
             'name': name,
             'product_id': self.product_id.id,

--- a/None
+++ b/addons/purchase_requisition/models/res_config_settings.py
@@ -0,0 +1,9 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class ResConfigSettings(models.TransientModel):
+    _inherit = 'res.config.settings'
+
+    group_purchase_alternatives = fields.Boolean("Purchase Alternatives", implied_group='purchase_requisition.group_purchase_alternatives')
