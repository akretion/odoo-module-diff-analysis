PR: https://github.com/odoo/odoo/pull/162435

From: 9d9e31db623d06f66dbbd7dd4b5219f7bf093376
From: vava-odoo
Date: 2024-04-19 17:48:11

Structural Changes: 1
Total Changes: 215

[REM] base: remove deprecated res.config.installer

Since Odoo 9.0, res.config.installer is not used anymore in Odoo
standard. This commit removes it from the codebase.

closes odoo/odoo#162435

Related: odoo/upgrade#5934
Signed-off-by: Vallaeys Valentin (vava) <vava@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/res_config.py
+++ b/odoo/addons/base/models/res_config.py
@@ -120,206 +120,6 @@ class ResConfigConfigurable(models.TransientModel):
         return self.cancel() or self.next()
 
 
-class ResConfigInstaller(models.TransientModel, ResConfigModuleInstallationMixin):
-    """ New-style configuration base specialized for addons selection
-    and installation.
-
-    Basic usage
-    -----------
-
-    Subclasses can simply define a number of boolean fields. The field names
-    should be the names of the addons to install (when selected). Upon action
-    execution, selected boolean fields (and those only) will be interpreted as
-    addons to install, and batch-installed.
-
-    Additional addons
-    -----------------
-
-    It is also possible to require the installation of an additional
-    addon set when a specific preset of addons has been marked for
-    installation (in the basic usage only, additionals can't depend on
-    one another).
-
-    These additionals are defined through the ``_install_if``
-    property. This property is a mapping of a collection of addons (by
-    name) to a collection of addons (by name) [#]_, and if all the *key*
-    addons are selected for installation, then the *value* ones will
-    be selected as well. For example::
-
-        _install_if = {
-            ('sale','crm'): ['sale_crm'],
-        }
-
-    This will install the ``sale_crm`` addon if and only if both the
-    ``sale`` and ``crm`` addons are selected for installation.
-
-    You can define as many additionals as you wish, and additionals
-    can overlap in key and value. For instance::
-
-        _install_if = {
-            ('sale','crm'): ['sale_crm'],
-            ('sale','project'): ['sale_service'],
-        }
-
-    will install both ``sale_crm`` and ``sale_service`` if all of
-    ``sale``, ``crm`` and ``project`` are selected for installation.
-
-    Hook methods
-    ------------
-
-    Subclasses might also need to express dependencies more complex
-    than that provided by additionals. In this case, it's possible to
-    define methods of the form ``_if_%(name)s`` where ``name`` is the
-    name of a boolean field. If the field is selected, then the
-    corresponding module will be marked for installation *and* the
-    hook method will be executed.
-
-    Hook methods take the usual set of parameters (cr, uid, ids,
-    context) and can return a collection of additional addons to
-    install (if they return anything, otherwise they should not return
-    anything, though returning any "falsy" value such as None or an
-    empty collection will have the same effect).
-
-    Complete control
-    ----------------
-
-    The last hook is to simply overload the ``modules_to_install``
-    method, which implements all the mechanisms above. This method
-    takes the usual set of parameters (cr, uid, ids, context) and
-    returns a ``set`` of addons to install (addons selected by the
-    above methods minus addons from the *basic* set which are already
-    installed) [#]_ so an overloader can simply manipulate the ``set``
-    returned by ``ResConfigInstaller.modules_to_install`` to add or
-    remove addons.
-
-    Skipping the installer
-    ----------------------
-
-    Unless it is removed from the view, installers have a *skip*
-    button which invokes ``action_skip`` (and the ``cancel`` hook from
-    ``res.config``). Hooks and additionals *are not run* when skipping
-    installation, even for already installed addons.
-
-    Again, setup your hooks accordingly.
-
-    .. [#] note that since a mapping key needs to be hashable, it's
-           possible to use a tuple or a frozenset, but not a list or a
-           regular set
-
-    .. [#] because the already-installed modules are only pruned at
-           the very end of ``modules_to_install``, additionals and
-           hooks depending on them *are guaranteed to execute*. Setup
-           your hooks accordingly.
-    """
-    _name = 'res.config.installer'
-    _inherit = 'res.config'
-    _description = 'Config Installer'
-
-    _install_if = {}
-
-    def already_installed(self):
-        """ For each module, check if it's already installed and if it
-        is return its name
-
-        :returns: a list of the already installed modules in this
-                  installer
-        :rtype: [str]
-        """
-        return [m.name for m in self._already_installed()]
-
-    def _already_installed(self):
-        """ For each module (boolean fields in a res.config.installer),
-        check if it's already installed (either 'to install', 'to upgrade'
-        or 'installed') and if it is return the module's record
-
-        :returns: a list of all installed modules in this installer
-        :rtype: recordset (collection of Record)
-        """
-        selectable = [name for name, field in self._fields.items()
-                      if field.type == 'boolean']
-        return self.env['ir.module.module'].search([('name', 'in', selectable),
-                            ('state', 'in', ['to install', 'installed', 'to upgrade'])])
-
-    def modules_to_install(self):
-        """ selects all modules to install:
-
-        * checked boolean fields
-        * return values of hook methods. Hook methods are of the form
-          ``_if_%(addon_name)s``, and are called if the corresponding
-          addon is marked for installation. They take the arguments
-          cr, uid, ids and context, and return an iterable of addon
-          names
-        * additionals, additionals are setup through the ``_install_if``
-          class variable. ``_install_if`` is a dict of {iterable:iterable}
-          where key and value are iterables of addon names.
-
-          If all the addons in the key are selected for installation
-          (warning: addons added through hooks don't count), then the
-          addons in the value are added to the set of modules to install
-        * not already installed
-        """
-        base = set(module_name
-                   for installer in self.read()
-                   for module_name, to_install in installer.items()
-                   if self._fields[module_name].type == 'boolean' and to_install)
-
-        hooks_results = set()
-        for module in base:
-            hook = getattr(self, '_if_%s'% module, None)
-            if hook:
-                hooks_results.update(hook() or set())
-
-        additionals = set(module
-                          for requirements, consequences in self._install_if.items()
-                          if base.issuperset(requirements)
-                          for module in consequences)
-
-        return (base | hooks_results | additionals) - set(self.already_installed())
-
-    @api.model
-    def default_get(self, fields_list):
-        ''' If an addon is already installed, check it by default
-        '''
-        defaults = super(ResConfigInstaller, self).default_get(fields_list)
-        return dict(defaults, **dict.fromkeys(self.already_installed(), True))
-
-    @api.model
-    def fields_get(self, allfields=None, attributes=None):
-        """ If an addon is already installed, set it to readonly as
-        res.config.installer doesn't handle uninstallations of already
-        installed addons
-        """
-        fields = super().fields_get(allfields=allfields, attributes=attributes)
-
-        for name in self.already_installed():
-            if name not in fields:
-                continue
-            fields[name].update(
-                readonly=True,
-                help= ustr(fields[name].get('help', '')) +
-                     _('\n\nThis addon is already installed on your system'))
-        return fields
-
-    def execute(self):
-        to_install = list(self.modules_to_install())
-        _logger.info('Selecting addons %s to install', to_install)
-
-        IrModule = self.env['ir.module.module']
-        modules = IrModule.search([('name', 'in', to_install)])
-        module_names = {module.name for module in modules}
-        to_install_missing_names = [name for name in to_install if name not in module_names]
-
-        result = self._install_modules(modules)
-        #FIXME: if result is not none, the corresponding todo will be skipped because it was just marked done
-        if to_install_missing_names:
-            return {
-                'type': 'ir.actions.client',
-                'tag': 'apps',
-                'params': {'modules': to_install_missing_names},
-            }
-        return result
-
-
 class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin):
     """ Base configuration wizard for application settings.  It provides support for setting
         default values, assigning groups to employee users, and installing modules.

--- a/odoo/addons/base/security/ir.model.access.csv
+++ b/odoo/addons/base/security/ir.model.access.csv
@@ -126,7 +126,6 @@ access_res_users_settings_user,res.users.settings,model_res_users_settings,group
 "access_ir_demo_failure","access.ir.demo_failure","model_ir_demo_failure","base.group_system",1,1,1,0
 "access_ir_demo_failure_wizard","access.ir.demo_failure.wizard","model_ir_demo_failure_wizard","base.group_system",1,1,1,0
 "access_res_config","access.res.config","model_res_config","base.group_system",1,1,1,0
-"access_res_config_installer","access.res.config.installer","model_res_config_installer","base.group_system",1,1,1,0
 "access_res_config_settings","access.res.config.settings","model_res_config_settings","base.group_system",1,1,1,0
 "access_change_password_wizard","access.change.password.wizard","model_change_password_wizard","base.group_erp_manager",1,1,1,0
 "access_change_password_user","access.change.password.user","model_change_password_user","base.group_erp_manager",1,1,1,0

--- a/odoo/addons/base/views/res_config_views.xml
+++ b/odoo/addons/base/views/res_config_views.xml
@@ -16,19 +16,5 @@
             </field>
         </record>
 
-        <record id="res_config_installer" model="ir.ui.view">
-            <field name="name">Inheritable view for installer objects</field>
-            <field name="model">res.config.installer</field>
-            <field name="arch" type="xml">
-                <form string="Configuration Installer">
-                    <separator string="title" colspan="4"/>
-                    <footer>
-                        <button name="action_next" type="object" string="Install Apps" class="btn-primary" data-hotkey="q"/>
-                        <button string="Skip" class="btn-secondary" special="cancel" data-hotkey="x"/>
-                    </footer>
-                </form>
-            </field>
-        </record>
-
     </data>
 </odoo>
