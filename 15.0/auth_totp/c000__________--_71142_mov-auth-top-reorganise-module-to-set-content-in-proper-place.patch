PR: https://github.com/odoo/odoo/pull/71142

From: 09f6ae5b95bbcfec8a8e60c62d7e6c72d1826c31
From: David Beguin
Date: 2021-08-30 21:05:12

Breaking data model changes scores: del:5 + add:0, change matches:
-    user_id = fields.Many2one('res.users', required=True, readonly=True)
-    secret = fields.Char(required=True, readonly=True)
-    url = fields.Char(store=True, readonly=True, compute='_compute_qrcode')
-    qrcode = fields.Binary(
-    code = fields.Char(string="Verification Code", size=7)

Total Changes: 179

[MOV] auth_top: reorganise module to set content in proper place

This commit juste moves the different part of code (class, views, data) in the
correct file where they belong.

Task-2487630

Part-of: odoo/odoo#71142

================================= pseudo patch: =================================

--- a/addons/auth_totp/models/__init__.py
+++ b/addons/auth_totp/models/__init__.py
@@ -1,3 +1,6 @@
 # -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
 from . import ir_http
 from . import res_users
+from . import totp

--- a/addons/auth_totp/models/res_users.py
+++ b/addons/auth_totp/models/res_users.py
@@ -1,20 +1,18 @@
 # -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
 import base64
 import functools
-import hmac
-import io
 import logging
 import os
 import re
-import struct
-import time
-
-import werkzeug.urls
 
 from odoo import _, api, fields, models
 from odoo.addons.base.models.res_users import check_identity
 from odoo.exceptions import AccessDenied, UserError
-from odoo.http import request, db_list
+from odoo.http import request
+
+from odoo.addons.auth_totp.models.totp import TOTP, TOTP_SECRET_SIZE
 
 _logger = logging.getLogger(__name__)
 
@@ -165,111 +163,3 @@ class Users(models.Model):
             'views': [(False, 'form')],
             'context': self.env.context,
         }
-
-
-class TOTPWizard(models.TransientModel):
-    _name = 'auth_totp.wizard'
-    _description = "Two-Factor Setup Wizard"
-
-    user_id = fields.Many2one('res.users', required=True, readonly=True)
-    secret = fields.Char(required=True, readonly=True)
-    url = fields.Char(store=True, readonly=True, compute='_compute_qrcode')
-    qrcode = fields.Binary(
-        attachment=False, store=True, readonly=True,
-        compute='_compute_qrcode',
-    )
-    code = fields.Char(string="Verification Code", size=7)
-
-    @api.depends('user_id.login', 'user_id.company_id.display_name', 'secret')
-    def _compute_qrcode(self):
-        # TODO: make "issuer" configurable through config parameter?
-        global_issuer = request and request.httprequest.host.split(':', 1)[0]
-        for w in self:
-            issuer = global_issuer or w.user_id.company_id.display_name
-            w.url = url = werkzeug.urls.url_unparse((
-                'otpauth', 'totp',
-                werkzeug.urls.url_quote(f'{issuer}:{w.user_id.login}', safe=':'),
-                werkzeug.urls.url_encode({
-                    'secret': compress(w.secret),
-                    'issuer': issuer,
-                    # apparently a lowercase hash name is anathema to google
-                    # authenticator (error) and passlib (no token)
-                    'algorithm': ALGORITHM.upper(),
-                    'digits': DIGITS,
-                    'period': TIMESTEP,
-                }), ''
-            ))
-
-            data = io.BytesIO()
-            import qrcode
-            qrcode.make(url.encode(), box_size=4).save(data, optimise=True, format='PNG')
-            w.qrcode = base64.b64encode(data.getvalue()).decode()
-
-    @check_identity
-    def enable(self):
-        try:
-            c = int(compress(self.code))
-        except ValueError:
-            raise UserError(_("The verification code should only contain numbers"))
-        if self.user_id._totp_try_setting(self.secret, c):
-            self.secret = '' # empty it, because why keep it until GC?
-            return {
-                'type': 'ir.actions.client',
-                'tag': 'display_notification',
-                'params': {
-                    'type': 'success',
-                    'message': _("Two-factor authentication is now enabled."),
-                    'next': {'type': 'ir.actions.act_window_close'},
-                }
-            }
-        raise UserError(_('Verification failed, please double-check the 6-digit code'))
-
-# 160 bits, as recommended by HOTP RFC 4226, section 4, R6.
-# Google Auth uses 80 bits by default but supports 160.
-TOTP_SECRET_SIZE = 160
-
-# The algorithm (and key URI format) allows customising these parameters but
-# google authenticator doesn't support it
-# https://github.com/google/google-authenticator/wiki/Key-Uri-Format
-ALGORITHM = 'sha1'
-DIGITS = 6
-TIMESTEP = 30
-
-class TOTP:
-    def __init__(self, key):
-        self._key = key
-
-    def match(self, code, t=None, window=TIMESTEP):
-        """
-        :param code: authenticator code to check against this key
-        :param int t: current timestamp (seconds)
-        :param int window: fuzz window to account for slow fingers, network
-                           latency, desynchronised clocks, ..., every code
-                           valid between t-window an t+window is considered
-                           valid
-        """
-        if t is None:
-            t = time.time()
-
-        low = int((t - window) / TIMESTEP)
-        high = int((t + window) / TIMESTEP) + 1
-
-        return next((
-            counter for counter in range(low, high)
-            if hotp(self._key, counter) == code
-        ), None)
-
-def hotp(secret, counter):
-    # C is the 64b counter encoded in big-endian
-    C = struct.pack(">Q", counter)
-    mac = hmac.new(secret, msg=C, digestmod=ALGORITHM).digest()
-    # the data offset is the last nibble of the hash
-    offset = mac[-1] & 0xF
-    # code is the 4 bytes at the offset interpreted as a 31b big-endian uint
-    # (31b to avoid sign concerns). This effectively limits digits to 9 and
-    # hard-limits it to 10: each digit is normally worth 3.32 bits but the
-    # 10th is only worth 1.1 (9 digits encode 29.9 bits).
-    code = struct.unpack_from('>I', mac, offset)[0] & 0x7FFFFFFF
-    r = code % (10 ** DIGITS)
-    # NOTE: use text / bytes instead of int?
-    return r

--- a/None
+++ b/addons/auth_totp/models/totp.py
@@ -0,0 +1,56 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import hmac
+import struct
+import time
+
+# 160 bits, as recommended by HOTP RFC 4226, section 4, R6.
+# Google Auth uses 80 bits by default but supports 160.
+TOTP_SECRET_SIZE = 160
+
+# The algorithm (and key URI format) allows customising these parameters but
+# google authenticator doesn't support it
+# https://github.com/google/google-authenticator/wiki/Key-Uri-Format
+ALGORITHM = 'sha1'
+DIGITS = 6
+TIMESTEP = 30
+
+class TOTP:
+    def __init__(self, key):
+        self._key = key
+
+    def match(self, code, t=None, window=TIMESTEP):
+        """
+        :param code: authenticator code to check against this key
+        :param int t: current timestamp (seconds)
+        :param int window: fuzz window to account for slow fingers, network
+                           latency, desynchronised clocks, ..., every code
+                           valid between t-window an t+window is considered
+                           valid
+        """
+        if t is None:
+            t = time.time()
+
+        low = int((t - window) / TIMESTEP)
+        high = int((t + window) / TIMESTEP) + 1
+
+        return next((
+            counter for counter in range(low, high)
+            if hotp(self._key, counter) == code
+        ), None)
+
+def hotp(secret, counter):
+    # C is the 64b counter encoded in big-endian
+    C = struct.pack(">Q", counter)
+    mac = hmac.new(secret, msg=C, digestmod=ALGORITHM).digest()
+    # the data offset is the last nibble of the hash
+    offset = mac[-1] & 0xF
+    # code is the 4 bytes at the offset interpreted as a 31b big-endian uint
+    # (31b to avoid sign concerns). This effectively limits digits to 9 and
+    # hard-limits it to 10: each digit is normally worth 3.32 bits but the
+    # 10th is only worth 1.1 (9 digits encode 29.9 bits).
+    code = struct.unpack_from('>I', mac, offset)[0] & 0x7FFFFFFF
+    r = code % (10 ** DIGITS)
+    # NOTE: use text / bytes instead of int?
+    return r
