PR: https://github.com/odoo/odoo/pull/

From: f4524f03c32a27b1899562a71cad6f491bfe44ce
From: David Beguin
Date: 2019-08-09 14:30:55

Structural Changes: 2
Total Changes: 47

[REF] mail: move and improve bounce management in mail gateway

PURPOSE

Add some improvements in mail gateway: remove private discussion, improve
bounce management, allow resetting bounce counters, improve automatic set or
reset of blacklists and ease mass mailing inheritance.

SPECIFICATIONS

Purpose
  * move bounce information detection in message parsing. It allows to have
    this information available in various steps of routing instead of having
    to manually re-compute them;
  * handle bounce in specific methods allowing easy override;
  * improve bounce management, notably when detecting a bounce not linked
    to the bounce alias configuration;
  * better integration with blacklist mechanism;

Specifications
  * compute bounce information in ``_message_parse_extract_bounce``.It parses
    bounce information and returns a dictionary allowing to update parsed email
    values;
  * remove override in mass_mailign that basically does what mail already
    does;
  * manage bounce in ``_routing_handle_bounce``;
  * when detecting a bounce, correctly call the bounce management method on
    all models inheriting from blacklist;
  * correctly update bounce counter;
  * bounced mailing traces and automatic blacklist in mass mailing should
    be done in ``_routing_handle_bounce``;
  * add some tests;

LINKS

Related to task 1893155
Linked to PR #33340

================================= pseudo patch: =================================

--- a/addons/mass_mailing/models/mail_thread.py
+++ b/addons/mass_mailing/models/mail_thread.py
@@ -16,22 +16,6 @@ class MailThread(models.AbstractModel):
     """ Update MailThread to add the support of bounce management in mass mailing traces. """
     _inherit = 'mail.thread'
 
-    @api.model
-    def message_route(self, message, message_dict, model=None, thread_id=None, custom_values=None):
-        """ Override to udpate mass mailing traces based on bounce emails """
-        bounce_alias = self.env['ir.config_parameter'].sudo().get_param("mail.bounce.alias")
-        email_to = decode_message_header(message, 'To')
-        email_to_localpart = (tools.email_split(email_to) or [''])[0].split('@', 1)[0].lower()
-
-        if bounce_alias and bounce_alias in email_to_localpart:
-            bounce_re = re.compile("%s\+(\d+)-?([\w.]+)?-?(\d+)?" % re.escape(bounce_alias), re.UNICODE)
-            bounce_match = bounce_re.search(email_to)
-            if bounce_match:
-                bounced_mail_id = bounce_match.group(1)
-                self.env['mailing.trace'].set_bounced(mail_mail_ids=[bounced_mail_id])
-
-        return super(MailThread, self).message_route(message, message_dict, model, thread_id, custom_values)
-
     @api.model
     def message_route_process(self, message, message_dict, routes):
         """ Override to update the parent mailing traces. The parent is found
@@ -52,8 +36,9 @@ class MailThread(models.AbstractModel):
         )
         return super(MailThread, no_massmail).message_post_with_template(template_id, **kwargs)
 
-    def _message_receive_bounce(self, email, partner, mail_id=None):
-        """In addition, an auto blacklist rule check if the email can be blacklisted
+    @api.model
+    def _routing_handle_bounce(self, email_message, message_dict):
+        """ In addition, an auto blacklist rule check if the email can be blacklisted
         to avoid sending mails indefinitely to this email address.
         This rule checks if the email bounced too much. If this is the case,
         the email address is added to the blacklist in order to avoid continuing
@@ -61,14 +46,18 @@ class MailThread(models.AbstractModel):
         in the last month and the bounced are at least separated by one week,
         to avoid blacklist someone because of a temporary mail server error,
         then the email is considered as invalid and is blacklisted."""
-        super(MailThread, self)._message_receive_bounce(email, partner, mail_id=None)
-
-        three_months_ago = fields.Datetime.to_string(datetime.datetime.now() - datetime.timedelta(weeks=13))
-        traces = self.env['mailing.trace'] \
-            .search(['&', ('bounced', '>', three_months_ago), ('email', '=ilike', email)]) \
-            .mapped('bounced')
-        if len(traces) >= BLACKLIST_MAX_BOUNCED_LIMIT:
-            if max(traces) > min(traces) + datetime.timedelta(weeks=1):
-                blacklist_rec = self.env['mail.blacklist'].sudo()._add(email)
-                blacklist_rec._message_log(
-                    body='This email has been automatically blacklisted because of too much bounced.')
+        super(MailThread, self)._routing_handle_bounce(email_message, message_dict)
+
+        bounced_email = message_dict['bounced_email']
+        bounced_msg_id = message_dict['bounced_msg_id']
+
+        if bounced_msg_id:
+            self.env['mailing.trace'].set_bounced(mail_message_ids=[bounced_msg_id])
+        if bounced_email:
+            three_months_ago = fields.Datetime.to_string(datetime.datetime.now() - datetime.timedelta(weeks=13))
+            stats = self.env['mailing.trace'].search(['&', ('bounced', '>', three_months_ago), ('email', '=ilike', bounced_email)]).mapped('bounced')
+            if len(stats) >= BLACKLIST_MAX_BOUNCED_LIMIT:
+                if max(stats) > min(stats) + datetime.timedelta(weeks=1):
+                    blacklist_rec = self.env['mail.blacklist'].sudo()._add(bounced_email)
+                    blacklist_rec._message_log(
+                        body='This email has been automatically blacklisted because of too much bounced.')
