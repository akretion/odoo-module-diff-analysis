PR: https://github.com/odoo/odoo/pull/83465

From: 99b56ec7069b4d34ae1fc04305d3876c98648f51
From: Nicolas Pierre
Date: 2022-04-11 09:01:50

Structural Changes: 5
Total Changes: 14

[IMP] mrp_subcontracting: subcontracting portal

Creation of a subcontracting portal to let the subcontractor register himself
all the components that were used for the production. The portal is
reusing the backend view of the stock picking where components were
registered before.

closes odoo/odoo#83465

Task: 2645298
Community-pr:  https://github.com/odoo/odoo/pull/83465
Enterprise-pr: https://github.com/odoo/enterprise/pull/24647
Related: odoo/upgrade#3402
Related: odoo/enterprise#24647
Signed-off-by: Arnold Moyaux <arm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/res_config_settings.py
+++ b/addons/stock/models/res_config_settings.py
@@ -11,7 +11,7 @@ class ResConfigSettings(models.TransientModel):
     module_product_expiry = fields.Boolean("Expiration Dates",
         help="Track following dates on lots & serial numbers: best before, removal, end of life, alert. \n Such dates are set automatically at lot/serial number creation based on values set on the product (in days).")
     group_stock_production_lot = fields.Boolean("Lots & Serial Numbers",
-        implied_group='stock.group_production_lot')
+        implied_group='stock.group_production_lot', group="base.group_user,base.group_portal")
     group_stock_lot_print_gs1 = fields.Boolean("Print GS1 Barcodes for Lots & Serial Numbers",
         implied_group='stock.group_stock_lot_print_gs1')
     group_lot_on_delivery_slip = fields.Boolean("Display Lots & Serial Numbers on Delivery Slips",

--- a/addons/stock/models/stock_location.py
+++ b/addons/stock/models/stock_location.py
@@ -223,6 +223,7 @@ class Location(models.Model):
         The quantity should be in the default UOM of the product, it is used when
         no package is specified.
         """
+        self = self._check_access_putaway()
         # find package type on package or packaging
         package_type = self.env['stock.package.type']
         if package:
@@ -235,7 +236,7 @@ class Location(models.Model):
         categ = product.categ_id
         while categ:
             putaway_rules |= self.putaway_rule_ids.filtered(lambda x: x.category_id == categ and (package_type in x.package_type_ids or package_type == x.package_type_ids))
-            categ = categ.parent_id
+            categ = categ.sudo().parent_id
         if package_type:
             putaway_rules |= self.putaway_rule_ids.filtered(lambda x: not x.product_id and (package_type in x.package_type_ids or package_type == x.package_type_ids))
 
@@ -319,6 +320,9 @@ class Location(models.Model):
         self.ensure_one()
         return self.usage in ('supplier', 'customer', 'inventory', 'production') or self.scrap_location or (self.usage == 'transit' and not self.company_id)
 
+    def _check_access_putaway(self):
+        return self
+
     def _check_can_be_used(self, product, quantity=0, package=None, location_qty=0):
         """Check if product/package can be stored in the location. Quantity
         should in the default uom of product, it's only used when no package is

--- a/addons/stock/models/stock_move_line.py
+++ b/addons/stock/models/stock_move_line.py
@@ -174,7 +174,7 @@ class StockMoveLine(models.Model):
                         message = _('You cannot use the same serial number twice. Please correct the serial numbers encoded.')
                     else:
                         # check if in correct source location
-                        message, recommended_location = self.env['stock.quant']._check_serial_number(self.product_id,
+                        message, recommended_location = self.env['stock.quant'].sudo()._check_serial_number(self.product_id,
                                                                                                      self.lot_id,
                                                                                                      self.company_id,
                                                                                                      self.location_id,

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -320,7 +320,9 @@ class Picking(models.Model):
         check_company=True, readonly=True, required=True,
         states={'draft': [('readonly', False)]})
     move_ids = fields.One2many('stock.move', 'picking_id', string="Stock Moves", copy=True)
-    move_ids_without_package = fields.One2many('stock.move', 'picking_id', string="Stock moves not in package", compute='_compute_move_without_package', inverse='_set_move_without_package')
+    move_ids_without_package = fields.One2many(
+        'stock.move', 'picking_id', string="Stock moves not in package", compute='_compute_move_without_package',
+        inverse='_set_move_without_package', compute_sudo=True)
     has_scrap_move = fields.Boolean(
         'Has Scrap Moves', compute='_has_scrap_move')
     picking_type_id = fields.Many2one(
