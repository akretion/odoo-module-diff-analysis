PR: https://github.com/odoo/odoo/pull/97279

From: 3363e55cac2a121c29842a0b2463f940bdd866a4
From: Fabien Pinckaers
Date: 2022-08-01 22:26:53

Structural Changes: 9.9
Total Changes: 25

[IMP] cleanup of help messages in all modules

This commit aims at removing unuseful help message to:
1/ reduce translators work, to focus on more useful translations
2/ not sending unuseful information in load_views
3/ reduce help message to useful messages, so that we can mark
   fields having a tooltip in the future UI.
4/ some cleanup of existing messages too

The main use cases:
- REMOVED: help redundant with the field name, providing no extra info
- MOVED TO COMMENT: technical help messages, that should not be in UX

closes odoo/odoo#97279

Signed-off-by: Fabien Pinckaers <fp@odoo.com>

================================= pseudo patch: =================================

--- a/addons/gamification/models/gamification_badge_user.py
+++ b/addons/gamification/models/gamification_badge_user.py
@@ -13,9 +13,9 @@ class BadgeUser(models.Model):
     _rec_name = "badge_name"
 
     user_id = fields.Many2one('res.users', string="User", required=True, ondelete="cascade", index=True)
-    sender_id = fields.Many2one('res.users', string="Sender", help="The user who has send the badge")
+    sender_id = fields.Many2one('res.users', string="Sender")
     badge_id = fields.Many2one('gamification.badge', string='Badge', required=True, ondelete="cascade", index=True)
-    challenge_id = fields.Many2one('gamification.challenge', string='Challenge originating', help="If this badge was rewarded through a challenge")
+    challenge_id = fields.Many2one('gamification.challenge', string='Challenge')
     comment = fields.Text('Comment')
     badge_name = fields.Char(related='badge_id.name', string="Badge Name", readonly=False)
     level = fields.Selection(

--- a/addons/gamification/models/gamification_challenge.py
+++ b/addons/gamification/models/gamification_challenge.py
@@ -71,10 +71,10 @@ class Challenge(models.Model):
         string="State", required=True, tracking=True)
     manager_id = fields.Many2one(
         'res.users', default=lambda self: self.env.uid,
-        string="Responsible", help="The user responsible for the challenge.",)
+        string="Responsible")
     # members
-    user_ids = fields.Many2many('res.users', 'gamification_challenge_users_rel', string="Users", help="List of users participating to the challenge")
-    user_domain = fields.Char("User domain", help="Alternative to a list of users")
+    user_ids = fields.Many2many('res.users', 'gamification_challenge_users_rel', string="Participants")
+    user_domain = fields.Char("User domain")        # Alternative to a list of users
     user_count = fields.Integer('# Users', compute='_compute_user_count')
     # periodicity
     period = fields.Selection([

--- a/addons/gamification/models/gamification_challenge_line.py
+++ b/addons/gamification/models/gamification_challenge_line.py
@@ -18,7 +18,7 @@ class ChallengeLine(models.Model):
     challenge_id = fields.Many2one('gamification.challenge', string='Challenge', required=True, ondelete="cascade")
     definition_id = fields.Many2one('gamification.goal.definition', string='Goal Definition', required=True, ondelete="cascade")
 
-    sequence = fields.Integer('Sequence', help='Sequence number for ordering', default=1)
+    sequence = fields.Integer('Sequence', default=1)
     target_goal = fields.Float('Target Value to Reach', required=True)
 
     name = fields.Char("Name", related='definition_id.name', readonly=False)

--- a/addons/gamification/models/gamification_goal.py
+++ b/addons/gamification/models/gamification_goal.py
@@ -42,7 +42,7 @@ class Goal(models.Model):
         ('canceled', "Canceled"),
     ], default='draft', string='State', required=True)
     to_update = fields.Boolean('To update')
-    closed = fields.Boolean('Closed goal', help="These goals will not be recomputed.")
+    closed = fields.Boolean('Closed goal')
 
     computation_mode = fields.Selection(related='definition_id.computation_mode', readonly=False)
     remind_update_delay = fields.Integer(

--- a/addons/gamification/models/gamification_goal_definition.py
+++ b/addons/gamification/models/gamification_goal_definition.py
@@ -33,10 +33,10 @@ class GoalDefinition(models.Model):
         ('progress', "Progressive (using numerical values)"),
         ('boolean', "Exclusive (done or not-done)"),
     ], default='progress', string="Displayed as", required=True)
-    model_id = fields.Many2one('ir.model', string='Model', help='The model object for the field to evaluate')
+    model_id = fields.Many2one('ir.model', string='Model')
     model_inherited_ids = fields.Many2many('ir.model', related='model_id.inherited_model_ids')
     field_id = fields.Many2one(
-        'ir.model.fields', string='Field to Sum', help='The field containing the value to evaluate',
+        'ir.model.fields', string='Field to Sum',
         domain=DOMAIN_TEMPLATE % ''
     )
     field_date_id = fields.Many2one(

--- a/addons/gamification/models/gamification_karma_rank.py
+++ b/addons/gamification/models/gamification_karma_rank.py
@@ -14,11 +14,10 @@ class KarmaRank(models.Model):
     description = fields.Html(string='Description', translate=html_translate, sanitize_attributes=False,)
     description_motivational = fields.Html(
         string='Motivational', translate=html_translate, sanitize_attributes=False,
-        help="Motivational phrase to reach this rank")
+        help="Motivational phrase to reach this rank on your profile page")
     karma_min = fields.Integer(
-        string='Required Karma', required=True, default=1,
-        help='Minimum karma needed to reach this rank')
-    user_ids = fields.One2many('res.users', 'rank_id', string='Users', help="Users having this rank")
+        string='Required Karma', required=True, default=1)
+    user_ids = fields.One2many('res.users', 'rank_id', string='Users')
     rank_users_count = fields.Integer("# Users", compute="_compute_rank_users_count")
 
     _sql_constraints = [
