PR: https://github.com/odoo/odoo/pull/

From: b0185e15ccde6cf9d4cb82a230cd4180db89e3b2
From: Kinjal Mehta
Date: 2016-12-22 12:29:38

Structural Changes: 7
Total Changes: 30

[FIX] all: fix some common typos

Sale Order --> Sales Order
Sale Report --> Sales Report
Sale Team -> Sales Team
Payment Term --> Payment Terms

================================= pseudo patch: =================================

--- a/addons/sale/models/account_invoice.py
+++ b/addons/sale/models/account_invoice.py
@@ -66,7 +66,7 @@ class AccountInvoice(models.Model):
     @api.multi
     def order_lines_layouted(self):
         """
-        Returns this sale order lines ordered by sale_layout_category sequence. Used to render the report.
+        Returns this sales order lines ordered by sale_layout_category sequence. Used to render the report.
         """
         self.ensure_one()
         report_pages = [[]]
@@ -93,7 +93,7 @@ class AccountInvoiceLine(models.Model):
         'sale.order.line',
         'sale_order_line_invoice_rel',
         'invoice_line_id', 'order_line_id',
-        string='Sale Order Lines', readonly=True, copy=False)
+        string='Sales Order Lines', readonly=True, copy=False)
     layout_category_id = fields.Many2one('sale.layout_category', string='Section')
     layout_category_sequence = fields.Integer(
         related='layout_category_id.sequence',

--- a/addons/sale/models/procurement_order.py
+++ b/addons/sale/models/procurement_order.py
@@ -6,4 +6,4 @@ from odoo import fields, models
 
 class ProcurementOrder(models.Model):
     _inherit = 'procurement.order'
-    sale_line_id = fields.Many2one('sale.order.line', string='Sale Order Line')
+    sale_line_id = fields.Many2one('sale.order.line', string='Sales Order Line')

--- a/addons/sale/models/product_template.py
+++ b/addons/sale/models/product_template.py
@@ -11,7 +11,7 @@ class ProductTemplate(models.Model):
     track_service = fields.Selection([('manual', 'Manually set quantities on order')], string='Track Service',
         help="Manually set quantities on order: Invoice based on the manually entered quantity, without creating an analytic account.\n"
              "Timesheets on contract: Invoice based on the tracked hours on the related timesheet.\n"
-             "Create a task and track hours: Create a task on the sale order validation and track the work hours.",
+             "Create a task and track hours: Create a task on the sales order validation and track the work hours.",
         default='manual')
     sale_line_warn = fields.Selection(WARNING_MESSAGE, 'Sales Order Line', help=WARNING_HELP, required=True, default="no-message")
     sale_line_warn_msg = fields.Text('Message for Sales Order Line')

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -114,7 +114,7 @@ class SaleOrder(models.Model):
     validity_date = fields.Date(string='Expiration Date', readonly=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]},
         help="Manually set the expiration date of your quotation (offer), or it will set the date automatically based on the template if online quotation is installed.")
     create_date = fields.Datetime(string='Creation Date', readonly=True, index=True, help="Date on which sales order is created.")
-    confirmation_date = fields.Datetime(string='Confirmation Date', readonly=True, index=True, help="Date on which the sale order is confirmed.", oldname="date_confirm")
+    confirmation_date = fields.Datetime(string='Confirmation Date', readonly=True, index=True, help="Date on which the sales order is confirmed.", oldname="date_confirm")
     user_id = fields.Many2one('res.users', string='Salesperson', index=True, track_visibility='onchange', default=lambda self: self.env.user)
     partner_id = fields.Many2one('res.partner', string='Customer', readonly=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, required=True, change_default=True, index=True, track_visibility='always')
     partner_invoice_id = fields.Many2one('res.partner', string='Invoice Address', readonly=True, required=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, help="Invoice address for current sales order.")
@@ -189,7 +189,7 @@ class SaleOrder(models.Model):
         """
         Update the following fields when the partner is changed:
         - Pricelist
-        - Payment term
+        - Payment terms
         - Invoice address
         - Delivery address
         """
@@ -281,7 +281,7 @@ class SaleOrder(models.Model):
         self.ensure_one()
         journal_id = self.env['account.invoice'].default_get(['journal_id'])['journal_id']
         if not journal_id:
-            raise UserError(_('Please define an accounting sale journal for this company.'))
+            raise UserError(_('Please define an accounting sales journal for this company.'))
         invoice_vals = {
             'name': self.client_order_ref or '',
             'origin': self.name,
@@ -740,13 +740,13 @@ class SaleOrderLine(models.Model):
     order_partner_id = fields.Many2one(related='order_id.partner_id', store=True, string='Customer')
     analytic_tag_ids = fields.Many2many('account.analytic.tag', string='Analytic Tags')
     is_downpayment = fields.Boolean(
-        string="Is a down payment", help="Down payments are made when creating invoices from a sale order."
-        " They are not copied when duplicating a sale order.")
+        string="Is a down payment", help="Down payments are made when creating invoices from a sales order."
+        " They are not copied when duplicating a sales order.")
 
     state = fields.Selection([
         ('draft', 'Quotation'),
         ('sent', 'Quotation Sent'),
-        ('sale', 'Sale Order'),
+        ('sale', 'Sales Order'),
         ('done', 'Done'),
         ('cancel', 'Cancelled'),
     ], related='order_id.state', string='Order Status', readonly=True, copy=False, store=True, default='draft')
@@ -884,7 +884,7 @@ class SaleOrderLine(models.Model):
     @api.multi
     def unlink(self):
         if self.filtered(lambda x: x.state in ('sale', 'done')):
-            raise UserError(_('You can not remove a sale order line.\nDiscard changes and try setting the quantity to 0.'))
+            raise UserError(_('You can not remove a sales order line.\nDiscard changes and try setting the quantity to 0.'))
         return super(SaleOrderLine, self).unlink()
 
     @api.multi
@@ -902,7 +902,7 @@ class SaleOrderLine(models.Model):
             :parem float qty: total quentity of product
             :param tuple price_and_rule: tuple(price, suitable_rule) coming from pricelist computation
             :param obj uom: unit of measure of current order line
-            :param integer pricelist_id: pricelist id of sale order"""
+            :param integer pricelist_id: pricelist id of sales order"""
         PricelistItem = self.env['product.pricelist.item']
         field_name = 'lst_price'
         currency_id = None

--- a/addons/sale/models/sale_analytic.py
+++ b/addons/sale/models/sale_analytic.py
@@ -36,7 +36,7 @@ class SaleOrderLine(models.Model):
 
 class AccountAnalyticLine(models.Model):
     _inherit = "account.analytic.line"
-    so_line = fields.Many2one('sale.order.line', string='Sale Order Line')
+    so_line = fields.Many2one('sale.order.line', string='Sales Order Line')
 
     def _get_invoice_price(self, order):
         if self.product_id.expense_policy == 'sales_price':
@@ -81,7 +81,7 @@ class AccountAnalyticLine(models.Model):
         if not so_line and self.account_id and self.product_id and (self.product_id.expense_policy != 'no'):
             order = self.env['sale.order'].search([('project_id', '=', self.account_id.id)], limit=1)
             if order and order.state != 'sale':
-                raise UserError(_('The Sale Order %s linked to the Analytic Account must be validated before registering expenses.') % order.name)
+                raise UserError(_('The Sales Order %s linked to the Analytic Account must be validated before registering expenses.') % order.name)
 
             order = self.env['sale.order'].search([('project_id', '=', self.account_id.id), ('state', '=', 'sale')], limit=1)
             if not order:

--- a/addons/sale/models/sale_config_settings.py
+++ b/addons/sale/models/sale_config_settings.py
@@ -102,7 +102,7 @@ class SaleConfiguration(models.TransientModel):
     auto_done_setting = fields.Selection([
         (0, "Allow to edit sales order from the 'Sales Order' menu (not from the Quotation menu)"),
         (1, "Never allow to modify a confirmed sales order")
-        ], "Sale Order Modification")
+        ], "Sales Order Modification")
     module_sale_contract = fields.Boolean("Manage subscriptions and recurring invoicing")
     module_website_sale_digital = fields.Boolean("Sell digital products - provide downloadable content on your customer portal")
 
