PR: https://github.com/odoo/odoo/pull/

From: df2ea31ff6eb5978c700d0ca0d096c4b1b33bee1
From: Aur√©lien Warnon
Date: 2018-09-25 16:39:32

Structural Changes: 8
Total Changes: 29

[IMP] (website_)sale: Add custom values for product attributes

Purpose
=======

Product attrivutes can now have custom values.
These values are specified by the user during the SO creation.
They are also available on the webshop frontend.

Specification
=============

add a new mode to generate variants as they are added to the order/cart
- ability to define attribute extra prices & exclude combinations

================================= pseudo patch: =================================

--- a/addons/sale/models/product_product.py
+++ b/addons/sale/models/product_product.py
@@ -67,14 +67,25 @@ class ProductAttribute(models.Model):
 class ProductAttributeValue(models.Model):
     _inherit = "product.attribute.value"
 
+    is_custom = fields.Boolean('Is custom value', help="Allow users to input custom values for this attribute value")
     html_color = fields.Char(
         string='HTML Color Index', oldname='color',
         help="""Here you can set a
         specific HTML color index (e.g. #ff0000) to display the color if the
-        attibute type is 'Color'.""")
+        attribute type is 'Color'.""")
 
 
 class ProductProductAttributeValue(models.Model):
     _inherit = "product.product.attribute.value"
 
-    html_color = fields.Char('HTML Color Index', related="product_attribute_value_id.html_color")
\ No newline at end of file
+    html_color = fields.Char('HTML Color Index', related="product_attribute_value_id.html_color")
+    is_custom = fields.Boolean('Is custom value', related="product_attribute_value_id.is_custom")
+
+
+class ProductAttributeCustomValue(models.Model):
+    _name = "product.attribute.custom.value"
+    _rec_name = 'custom_value'
+
+    attribute_value_id = fields.Many2one('product.attribute.value', string='Attribute')
+    sale_order_line_id = fields.Many2one('sale.order.line', string='Sale order line')
+    custom_value = fields.Char('Custom value')

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -936,7 +936,9 @@ class SaleOrderLine(models.Model):
             res['product_id'] = int(self._context.get('product_id'))
         if self._context.get('quantity'):
             res['product_uom_qty'] = float(self._context.get('quantity'))
-
+        if self._context.get('product_custom_variant_values'):
+            values = self._context.get('product_custom_variant_values')
+            res['product_custom_variant_values'] = [(0, 0, value) for value in values]
         return res
 
     @api.depends('product_uom_qty', 'discount', 'price_unit', 'tax_id')
@@ -1126,6 +1128,7 @@ class SaleOrderLine(models.Model):
     product_updatable = fields.Boolean(compute='_compute_product_updatable', string='Can Edit Product', readonly=True, default=True)
     product_uom_qty = fields.Float(string='Ordered Quantity', digits=dp.get_precision('Product Unit of Measure'), required=True, default=1.0)
     product_uom = fields.Many2one('uom.uom', string='Unit of Measure')
+    product_custom_variant_values = fields.One2many('product.attribute.custom.value', 'sale_order_line_id', string='Custom variant values')
     # Non-stored related field to allow portal user to see the image of the product he has ordered
     product_image = fields.Binary('Product Image', related="product_id.image", store=False)
 
@@ -1421,7 +1424,14 @@ class SaleOrderLine(models.Model):
                 self.product_id = False
                 return result
 
-        vals.update(name=self.get_sale_order_line_multiline_description_sale(product))
+        name = self.get_sale_order_line_multiline_description_sale(product)
+        if self.product_custom_variant_values:
+            name += '\n'
+            for product_custom_variant_value in self.product_custom_variant_values:
+                if product_custom_variant_value.custom_value and product_custom_variant_value.custom_value.strip():
+                    name += '\n' + product_custom_variant_value.attribute_value_id.name + ': ' + product_custom_variant_value.custom_value.strip()
+
+        vals.update(name=name)
 
         self._compute_tax_id()
 
