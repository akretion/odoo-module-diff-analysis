PR: https://github.com/odoo/odoo/pull/

From: 55549f1e612793769fc7bdf860ac6af06735a755
From: Raphael Collet
Date: 2017-08-28 07:53:23

Structural Changes: 5
Total Changes: 193

[ADD] base: direct support for binding an action to a model

================================= pseudo patch: =================================

--- a/odoo/addons/base/ir/ir_actions.py
+++ b/odoo/addons/base/ir/ir_actions.py
@@ -8,6 +8,7 @@ from odoo.tools.safe_eval import safe_eval, test_python_expr
 from odoo.tools import pycompat
 from odoo.http import request
 
+from collections import defaultdict
 import datetime
 import dateutil
 import logging
@@ -29,6 +30,11 @@ class IrActions(models.Model):
     help = fields.Html(string='Action Description',
                        help='Optional help text for the users with a description of the target view, such as its usage and purpose.',
                        translate=True)
+    binding_model_id = fields.Many2one('ir.model', ondelete='cascade',
+                                       help="Setting a value makes this action available in the sidebar for the given model.")
+    binding_type = fields.Selection([('action', 'Action'),
+                                     ('report', 'Report')],
+                                    required=True, default='action')
 
     def _compute_xml_id(self):
         res = self.get_external_id()
@@ -38,6 +44,8 @@ class IrActions(models.Model):
     @api.model
     def create(self, vals):
         res = super(IrActions, self).create(vals)
+        # self.get_bindings() depends on action records
+        self.clear_caches()
         # ir_values.get_actions() depends on action records
         self.env['ir.values'].clear_caches()
         return res
@@ -45,6 +53,8 @@ class IrActions(models.Model):
     @api.multi
     def write(self, vals):
         res = super(IrActions, self).write(vals)
+        # self.get_bindings() depends on action records
+        self.clear_caches()
         # ir_values.get_actions() depends on action records
         self.env['ir.values'].clear_caches()
         return res
@@ -56,6 +66,8 @@ class IrActions(models.Model):
         todos = self.env['ir.actions.todo'].search([('action_id', 'in', self.ids)])
         todos.unlink()
         res = super(IrActions, self).unlink()
+        # self.get_bindings() depends on action records
+        self.clear_caches()
         # ir_values.get_actions() depends on action records
         self.env['ir.values'].clear_caches()
         return res
@@ -72,6 +84,38 @@ class IrActions(models.Model):
             'timezone': timezone,
         }
 
+    @api.model
+    @tools.ormcache('frozenset(self.env.user.groups_id.ids)', 'model_name')
+    def get_bindings(self, model_name):
+        """ Retrieve the list of actions bound to the given model.
+
+           :return: a dict mapping binding types to a list of dict describing
+                    actions, where the latter is given by calling the method
+                    ``read`` on the action record.
+        """
+        cr = self.env.cr
+        query = """ SELECT a.id, a.type, a.binding_type
+                    FROM ir_actions a, ir_model m
+                    WHERE a.binding_model_id=m.id AND m.model=%s
+                    ORDER BY a.id """
+        cr.execute(query, [model_name])
+
+        # discard unauthorized actions, and read action definitions
+        result = defaultdict(list)
+        user_groups = self.env.user.groups_id
+        for action_id, action_model, binding_type in cr.fetchall():
+            try:
+                action = self.env[action_model].browse(action_id)
+                action_groups = getattr(action, 'groups_id', ())
+                if action_groups and not action_groups & user_groups:
+                    # the user may not perform this action
+                    continue
+                result[binding_type].append(action.read()[0])
+            except (AccessError, MissingError):
+                continue
+
+        return result
+
 
 class IrActionsActWindow(models.Model):
     _name = 'ir.actions.act_window'
@@ -320,9 +364,6 @@ class IrActionsServer(models.Model):
     model_id = fields.Many2one('ir.model', string='Model', required=True, ondelete='cascade',
                                help="Model on which the server action runs.")
     model_name = fields.Char(related='model_id.model', readonly=True, store=True)
-    menu_ir_values_id = fields.Many2one('ir.values', string='Action on Object',
-                                        copy=False, readonly=True,
-                                        help='IrValues entry of the related more menu entry action')
     # Python code
     code = fields.Text(string='Python Code', groups='base.group_system',
                        default=DEFAULT_PYTHON_CODE,
@@ -365,25 +406,15 @@ class IrActionsServer(models.Model):
     def create_action(self):
         """ Create a contextual action for each server action. """
         for action in self:
-            ir_values = self.env['ir.values'].sudo().create({
-                'name': _('Run %s') % action.name,
-                'model': action.model_id.model,
-                'key2': 'client_action_multi',
-                'value': "ir.actions.server,%s" % action.id,
-            })
-            action.write({'menu_ir_values_id': ir_values.id})
+            action.write({'binding_model_id': action.model_id.id,
+                          'binding_type': 'action'})
         return True
 
     @api.multi
     def unlink_action(self):
         """ Remove the contextual actions created for the server actions. """
         self.check_access_rights('write', raise_exception=True)
-        for action in self:
-            if action.menu_ir_values_id:
-                try:
-                    action.menu_ir_values_id.sudo().unlink()
-                except Exception:
-                    raise UserError(_('Deletion of the action record failed.'))
+        self.filtered('binding_model_id').write({'binding_model_id': False})
         return True
 
     @api.model

--- a/odoo/addons/base/ir/ir_actions.xml
+++ b/odoo/addons/base/ir/ir_actions.xml
@@ -52,14 +52,14 @@
             <field name="model">ir.actions.report</field>
             <field name="arch" type="xml">
                 <form string="Report">
-                    <field name="ir_values_id" invisible="1"/>
+                    <field name="binding_model_id" invisible="1"/>
                     <sheet>
                         <div class="oe_button_box" name="button_box">
                             <button name="create_action" string="Add in the 'Print' menu" type="object"
-                                    attrs="{'invisible':[('ir_values_id','!=',False)]}" icon="fa-plus-square"
+                                    attrs="{'invisible':[('binding_model_id','!=',False)]}" icon="fa-plus-square"
                                     help="Display an option on related documents to print this report" class="oe_stat_button"/>
                             <button name="unlink_action" string="Remove from the 'Print' menu" type="object"
-                                    attrs="{'invisible':[('ir_values_id','=',False)]}" icon="fa-minus-square"
+                                    attrs="{'invisible':[('binding_model_id','=',False)]}" icon="fa-minus-square"
                                     help="Remove the contextual action related this report" class="oe_stat_button"/>
                             <button name="associated_view" string="QWeb views" type="object"
                                     attrs="{'invisible':[('report_type', 'not in', ['qweb-pdf', 'qweb-html'])]}" icon='fa-code'
@@ -254,13 +254,13 @@
             <field name="arch" type="xml">
                 <form string="Server Action">
                     <header>
-                        <field name="menu_ir_values_id" invisible="1"/>
+                        <field name="binding_model_id" invisible="1"/>
                         <button name="create_action" string="Create Contextual Action" type="object"
                                 class="btn-primary"
-                                attrs="{'invisible':[('menu_ir_values_id','!=',False)]}"
+                                attrs="{'invisible':[('binding_model_id','!=',False)]}"
                                 help="Display an option in the 'More' top-menu in order to run this action."/>
                         <button name="unlink_action" string="Remove Contextual Action" type="object"
-                                attrs="{'invisible':[('menu_ir_values_id','=',False)]}"
+                                attrs="{'invisible':[('binding_model_id','=',False)]}"
                                 help="Remove 'More' top-menu contextual action related to this action"/>
                     </header>
                     <sheet>

--- a/odoo/addons/base/ir/ir_actions_report.py
+++ b/odoo/addons/base/ir/ir_actions_report.py
@@ -79,6 +79,7 @@ class IrActionsReport(models.Model):
 
     name = fields.Char(translate=True)
     type = fields.Char(default='ir.actions.report')
+    binding_type = fields.Selection(default='report')
     model = fields.Char(required=True)
 
     report_type = fields.Selection([('qweb-html', 'HTML'), ('qweb-pdf', 'PDF')], required=True, default='qweb-pdf',
@@ -90,8 +91,6 @@ class IrActionsReport(models.Model):
     report_file = fields.Char(string='Report File', required=False, readonly=False, store=True,
                               help="The path to the main report file (depending on Report Type) or empty if the content is in another field")
     groups_id = fields.Many2many('res.groups', 'res_groups_report_rel', 'uid', 'gid', string='Groups')
-    ir_values_id = fields.Many2one('ir.values', string='More Menu entry', readonly=True,
-                                   help='More menu entry.', copy=False)
     multi = fields.Boolean(string='On Multiple Doc.', help="If set to true, the action will not be displayed on the right toolbar of a form view.")
 
     paperformat_id = fields.Many2one('report.paperformat', 'Paper format')
@@ -119,25 +118,15 @@ class IrActionsReport(models.Model):
     def create_action(self):
         """ Create a contextual action for each report. """
         for report in self:
-            ir_values = self.env['ir.values'].sudo().create({
-                'name': report.name,
-                'model': report.model,
-                'key2': 'client_print_multi',
-                'value': "ir.actions.report,%s" % report.id,
-            })
-            report.write({'ir_values_id': ir_values.id})
+            model = self.env['ir.model']._get(report.model)
+            report.write({'binding_model_id': model.id, 'binding_type': 'report'})
         return True
 
     @api.multi
     def unlink_action(self):
         """ Remove the contextual actions created for the reports. """
         self.check_access_rights('write', raise_exception=True)
-        for report in self:
-            if report.ir_values_id:
-                try:
-                    report.ir_values_id.sudo().unlink()
-                except Exception:
-                    raise UserError(_('Deletion of the action record failed.'))
+        self.filtered('binding_model_id').write({'binding_model_id': False})
         return True
 
     #--------------------------------------------------------------------------

--- a/odoo/addons/base/module/module_view.xml
+++ b/odoo/addons/base/module/module_view.xml
@@ -50,20 +50,6 @@
                </search>
             </field>
         </record>
-        <record id="action_module_open_categ" model="ir.actions.act_window">
-            <field name="name">Apps</field>
-            <field name="res_model">ir.module.module</field>
-            <field name="view_type">form</field>
-            <field name="view_mode">tree,form,kanban</field>
-            <field name="domain">[('category_id','=',active_id)]</field>
-        </record>
-        <record id="ir_action_module_category" model="ir.values">
-            <field eval="'tree_but_open'" name="key2"/>
-            <field eval="'ir.module.category'" name="model"/>
-            <field name="name">Categorized Apps</field>
-            <field eval="'ir.actions.act_window,%d'%action_module_open_categ" name="value"/>
-        </record>
-
 
         <!-- Modules -->
         <record id="module_form" model="ir.ui.view">

--- a/odoo/addons/base/module/wizard/base_module_immediate_install.xml
+++ b/odoo/addons/base/module/wizard/base_module_immediate_install.xml
@@ -5,18 +5,9 @@
             <field name="name">Base: Module Immediate Install</field>
             <field name="type">ir.actions.server</field>
             <field name="model_id" ref="model_ir_module_module" />
+            <field name="binding_model_id" ref="model_ir_module_module" />
             <field name="state">code</field>
             <field name="code">records.button_immediate_install()</field>
         </record>
-
-        <record model="ir.values" id="action_module_immediate_install">
-            <field name="name">action_module_immediate_install</field>
-            <field name="action_id" ref="action_server_module_immediate_install" />
-            <field name="value" eval="'ir.actions.server,' + str(ref('action_server_module_immediate_install'))" />
-            <field name="key">action</field>
-            <field name="model_id" ref="model_ir_module_module" />
-            <field name="model">ir.module.module</field>
-            <field name="key2">client_action_multi</field>
-        </record>
     </data>
 </odoo>

--- a/odoo/addons/base/res/res_company_view.xml
+++ b/odoo/addons/base/res/res_company_view.xml
@@ -113,13 +113,6 @@
         </record>
         <menuitem action="action_res_company_form" id="menu_action_res_company_form" parent="base.menu_users"/>
 
-        <record id="ir_open_company" model="ir.values">
-            <field eval="'tree_but_open'" name="key2"/>
-            <field eval="'res.company'" name="model"/>
-            <field name="name">Companies</field>
-            <field eval="'ir.actions.act_window,%d'%company_normal_action_tree" name="value"/>
-        </record>
-
         <record id="view_company_report_form" model="ir.ui.view">
             <field name="name">res.company.report.form</field>
             <field name="model">res.company</field>

--- a/odoo/addons/base/res/res_users.py
+++ b/odoo/addons/base/res/res_users.py
@@ -681,6 +681,8 @@ class GroupsView(models.Model):
     def create(self, values):
         user = super(GroupsView, self).create(values)
         self._update_user_groups_view()
+        # actions.get_bindings() depends on action records
+        self.env['ir.actions.actions'].clear_caches()
         # ir_values.get_actions() depends on action records
         self.env['ir.values'].clear_caches()
         return user
@@ -689,6 +691,8 @@ class GroupsView(models.Model):
     def write(self, values):
         res = super(GroupsView, self).write(values)
         self._update_user_groups_view()
+        # actions.get_bindings() depends on action records
+        self.env['ir.actions.actions'].clear_caches()
         # ir_values.get_actions() depends on action records
         self.env['ir.values'].clear_caches()
         return res
@@ -697,6 +701,8 @@ class GroupsView(models.Model):
     def unlink(self):
         res = super(GroupsView, self).unlink()
         self._update_user_groups_view()
+        # actions.get_bindings() depends on action records
+        self.env['ir.actions.actions'].clear_caches()
         # ir_values.get_actions() depends on action records
         self.env['ir.values'].clear_caches()
         return res

--- a/odoo/addons/base/tests/test_ir_actions.py
+++ b/odoo/addons/base/tests/test_ir_actions.py
@@ -60,19 +60,11 @@ class TestServerActions(TestServerActionsBase):
 
         # Do: create contextual action
         self.action.create_action()
-
-        # Test: ir_values created
-        ir_values = self.env['ir.values'].search([('name', '=', 'Run TestAction')])
-        self.assertEqual(len(ir_values), 1, 'ir_actions_server: create_action should have created an entry in ir_values')
-        self.assertEqual(ir_values.value, b'ir.actions.server,%d' % self.action.id, 'ir_actions_server: created ir_values should reference the server action')
-        self.assertEqual(ir_values.model, 'res.partner', 'ir_actions_server: created ir_values should be linked to the action base model')
+        self.assertEqual(self.action.binding_model_id.model, 'res.partner')
 
         # Do: remove contextual action
         self.action.unlink_action()
-
-        # Test: ir_values removed
-        ir_values = self.env['ir.values'].search([('name', '=', 'Run TestAction')])
-        self.assertEqual(len(ir_values), 0, 'ir_actions_server: unlink_action should remove the ir_values record')
+        self.assertFalse(self.action.binding_model_id)
 
     def test_10_code(self):
         self.action.write({
@@ -186,6 +178,55 @@ class TestServerActions(TestServerActionsBase):
             })
 
 
+class TestActionBindings(common.TransactionCase):
+
+    def test_bindings(self):
+        """ check the action bindings on models """
+        Actions = self.env['ir.actions.actions']
+
+        # first make sure there is no bound action
+        bindings = Actions.get_bindings('res.partner')
+        self.assertFalse(bindings['action'])
+        self.assertFalse(bindings['report'])
+
+        # create action bindings, and check the returned bindings
+        action1 = self.env.ref('base.action_attachment')
+        action2 = self.env.ref('base.ir_default_menu_action')
+        action3 = self.env['ir.actions.report'].search([('groups_id', '=', False)], limit=1)
+        action1.binding_model_id = action2.binding_model_id \
+                                 = action3.binding_model_id \
+                                 = self.env['ir.model']._get('res.partner')
+
+        bindings = Actions.get_bindings('res.partner')
+        self.assertItemsEqual(
+            bindings['action'],
+            (action1 + action2).read(),
+            "Wrong action bindings",
+        )
+        self.assertItemsEqual(
+            bindings['report'],
+            action3.read(),
+            "Wrong action bindings",
+        )
+
+        # add a group on an action, and check that it is not returned
+        group = self.env.ref('base.group_user')
+        action2.groups_id += group
+        self.env.user.groups_id -= group
+
+        bindings = Actions.get_bindings('res.partner')
+        self.assertItemsEqual(
+            bindings['action'],
+            action1.read(),
+            "Wrong action bindings",
+        )
+        self.assertItemsEqual(
+            bindings['report'],
+            action3.read(),
+            "Wrong action bindings",
+        )
+
+
 class TestCustomFields(common.TransactionCase):
     MODEL = 'res.partner'
 
