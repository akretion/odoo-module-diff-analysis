PR: https://github.com/odoo/odoo/pull/178200

From: 8785ff45962cc9b34b2582d9ba17a9261907ebc0
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:17 + add:4, change matches:
-    parent_id: PartnerCategory = fields.Many2one('res.partner.category', string='Category', index=True, ondelete='cascade')
-    child_ids: PartnerCategory = fields.One2many('res.partner.category', 'parent_id', string='Child Tags')
+    child_ids: ResPartnerCategory = fields.One2many('res.partner.category', 'parent_id', string='Child Tags')
-    partner_ids: Partner = fields.Many2many('res.partner', column1='category_id', column2='partner_id', string='Partners', copy=False)
+    partner_ids: ResPartner = fields.Many2many('res.partner', column1='category_id', column2='partner_id', string='Partners', copy=False)
-    title: PartnerTitle = fields.Many2one('res.partner.title')
-    parent_id: Partner = fields.Many2one('res.partner', string='Related Company', index=True)
-    child_ids: Partner = fields.One2many('res.partner', 'parent_id', string='Contact', domain=[('active', '=', True)], context={'active_test': False})
+    child_ids: ResPartner = fields.One2many('res.partner', 'parent_id', string='Contact', domain=[('active', '=', True)], context={'active_test': False})
-    same_vat_partner_id: Partner = fields.Many2one('res.partner', string='Partner with same Tax ID', compute='_compute_same_vat_partner_id', store=False)
-    same_company_registry_partner_id: Partner = fields.Many2one('res.partner', string='Partner with same Company Registry', compute='_compute_same_vat_partner_id', store=False)
-    category_id: PartnerCategory = fields.Many2many('res.partner.category', column1='partner_id',
+    category_id: ResPartnerCategory = fields.Many2many('res.partner.category', column1='partner_id',
-    state_id: CountryState = fields.Many2one("res.country.state", string='State', ondelete='restrict', domain="[('country_id', '=?', country_id)]")
-    country_id: Country = fields.Many2one('res.country', string='Country', ondelete='restrict')
-    commercial_partner_id: Partner = fields.Many2one(
-    self: Partner = fields.Many2one(comodel_name='res.partner', compute='_compute_get_ids')

Total Changes: 83

[IMP] *: Using class name corresponding to odoo models (fixes)

fix changes from previous script

closes odoo/odoo#178200

Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/ir_model.py
+++ b/odoo/addons/base/models/ir_model.py
@@ -193,11 +193,12 @@ class Base(models.AbstractModel):
     _description = 'Base'
 
 
-class _Unknown(models.AbstractModel):
+class Unknown(models.AbstractModel):
     """
     Abstract model used as a substitute for relational fields with an unknown
     comodel.
     """
+    _name = '_unknown'
     _description = 'Unknown'
 
 
@@ -349,7 +350,7 @@ class IrModel(models.Model):
             crons.unlink()
 
         self._drop_table()
-        res = super(IrModel, self).unlink()
+        res = super().unlink()
 
         # Reload registry for normal unlink only. For module uninstall, the
         # reload is done independently in odoo.modules.loading.
@@ -371,7 +372,7 @@ class IrModel(models.Model):
         # writes (4,id,False) even for non dirty items.
         if 'field_id' in vals:
             vals['field_id'] = [op for op in vals['field_id'] if op[0] != 4]
-        res = super(IrModel, self).write(vals)
+        res = super().write(vals)
         # ordering has been changed, reload registry to reflect update + signaling
         if 'order' in vals:
             self.env.flush_all()  # setup_models need to fetch the updated values from the db
@@ -380,7 +381,7 @@ class IrModel(models.Model):
 
     @api.model_create_multi
     def create(self, vals_list):
-        res = super(IrModel, self).create(vals_list)
+        res = super().create(vals_list)
         manual_models = [
             vals['model'] for vals in vals_list if vals.get('state', 'manual') == 'manual'
         ]

--- a/odoo/addons/base/models/ir_qweb.py
+++ b/odoo/addons/base/models/ir_qweb.py
@@ -2693,7 +2693,6 @@ def render(template_name, values, load, **options):
         for cache_name, cache in _Registry__caches.items():
             _Registry__caches_groups.setdefault(cache_name.split('.')[0], []).append(cache)
 
-
     class MockIrQWeb(IrQweb):
         _register = False               # not visible in real registry
 

--- a/odoo/addons/base/models/res_company.py
+++ b/odoo/addons/base/models/res_company.py
@@ -257,7 +257,7 @@ class ResCompany(models.Model):
             constraint = [('id', 'in', companies.ids)]
             newself = newself.sudo()
         newself = newself.with_context(context)
-        domain = super(Company, newself)._search_display_name(operator, value)
+        domain = super(ResCompany, newself)._search_display_name(operator, value)
         return expression.AND([domain, constraint])
 
     @api.model

--- a/odoo/addons/base/models/res_config.py
+++ b/odoo/addons/base/models/res_config.py
@@ -121,7 +121,7 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
 
             class MyConfigWizard(models.TransientModel):
                 _name = 'my.settings'
-                _inherit = 'res.config.settings'
+                _inherit = ['res.config.settings']
 
                 default_foo = fields.type(..., default_model='my.model'),
                 group_bar = fields.Boolean(..., group='base.group_user', implied_group='my.group'),

--- a/odoo/addons/base/models/res_partner.py
+++ b/odoo/addons/base/models/res_partner.py
@@ -19,10 +19,10 @@ from odoo.exceptions import RedirectWarning, UserError, ValidationError
 
 import typing
 if typing.TYPE_CHECKING:
-    from .res_users import UsersView as ResUsers
+    from .res_users import ResUsers
     from .res_bank import ResPartnerBank
-    from .res_country import Country, CountryState
-    from .res_company import Company as ResCompany
+    from .res_country import ResCountry, ResCountryState
+    from .res_company import ResCompany
 
 # Global variables used for the warning fields declared on the res.partner
 # in the following modules : sale, purchase, account, stock
@@ -46,7 +46,7 @@ def _tz_get(self):
     return _tzs
 
 
-class FormatVATLabelMixin(models.AbstractModel):
+class FormatVatLabelMixin(models.AbstractModel):
     _description = "Country Specific VAT Label"
 
     @api.model
@@ -80,8 +80,8 @@ class FormatAddressMixin(models.AbstractModel):
         if address_view_id and not self._context.get('no_address_format') and (not address_view_id.model or address_view_id.model == self._name):
             #render the partner address accordingly to address_view_id
             for address_node in arch.xpath("//div[hasclass('o_address_format')]"):
-                ResPartner = self.env['res.partner'].with_context(no_address_format=True)
-                sub_arch, _sub_view = ResPartner._get_view(address_view_id.id, 'form')
+                Partner = self.env['res.partner'].with_context(no_address_format=True)
+                sub_arch, _sub_view = Partner._get_view(address_view_id.id, 'form')
                 #if the model is different than res.partner, there are chances that the view won't work
                 #(e.g fields not present on the model). In that case we just return arch
                 if self._name != 'res.partner':
@@ -145,11 +145,11 @@ class ResPartnerCategory(models.Model):
 
     name = fields.Char('Name', required=True, translate=True)
     color = fields.Integer(string='Color', default=_get_default_color, aggregator=False)
-    parent_id: PartnerCategory = fields.Many2one('res.partner.category', string='Category', index=True, ondelete='cascade')
-    child_ids: PartnerCategory = fields.One2many('res.partner.category', 'parent_id', string='Child Tags')
+    parent_id: ResPartnerCategory = fields.Many2one('res.partner.category', string='Category', index=True, ondelete='cascade')
+    child_ids: ResPartnerCategory = fields.One2many('res.partner.category', 'parent_id', string='Child Tags')
     active = fields.Boolean(default=True, help="The active field allows you to hide the category without removing it.")
     parent_path = fields.Char(index=True)
-    partner_ids: Partner = fields.Many2many('res.partner', column1='category_id', column2='partner_id', string='Partners', copy=False)
+    partner_ids: ResPartner = fields.Many2many('res.partner', column1='category_id', column2='partner_id', string='Partners', copy=False)
 
     @api.constrains('parent_id')
     def _check_parent_id(self):
@@ -218,10 +218,10 @@ class ResPartner(models.Model):
 
     name = fields.Char(index=True, default_export_compatible=True)
     complete_name = fields.Char(compute='_compute_complete_name', store=True, index=True)
-    title: PartnerTitle = fields.Many2one('res.partner.title')
-    parent_id: Partner = fields.Many2one('res.partner', string='Related Company', index=True)
+    title: ResPartnerTitle = fields.Many2one('res.partner.title')
+    parent_id: ResPartner = fields.Many2one('res.partner', string='Related Company', index=True)
     parent_name = fields.Char(related='parent_id.name', readonly=True, string='Parent name')
-    child_ids: Partner = fields.One2many('res.partner', 'parent_id', string='Contact', domain=[('active', '=', True)], context={'active_test': False})
+    child_ids: ResPartner = fields.One2many('res.partner', 'parent_id', string='Contact', domain=[('active', '=', True)], context={'active_test': False})
     ref = fields.Char(string='Reference', index=True)
     lang = fields.Selection(_lang_get, string='Language',
                             help="All the emails and documents sent to this contact will be translated in this language.")
@@ -239,15 +239,15 @@ class ResPartner(models.Model):
         readonly=False, store=True,
         help='The internal user in charge of this contact.')
     vat = fields.Char(string='Tax ID', index=True, help="The Tax Identification Number. Values here will be validated based on the country format. You can use '/' to indicate that the partner is not subject to tax.")
-    same_vat_partner_id: Partner = fields.Many2one('res.partner', string='Partner with same Tax ID', compute='_compute_same_vat_partner_id', store=False)
-    same_company_registry_partner_id: Partner = fields.Many2one('res.partner', string='Partner with same Company Registry', compute='_compute_same_vat_partner_id', store=False)
+    same_vat_partner_id: ResPartner = fields.Many2one('res.partner', string='Partner with same Tax ID', compute='_compute_same_vat_partner_id', store=False)
+    same_company_registry_partner_id: ResPartner = fields.Many2one('res.partner', string='Partner with same Company Registry', compute='_compute_same_vat_partner_id', store=False)
     company_registry = fields.Char(string="Company ID", compute='_compute_company_registry', store=True, readonly=False,
        help="The registry number of the company. Use it if it is different from the Tax ID. It must be unique across all partners of a same country")
     bank_ids: ResPartnerBank = fields.One2many('res.partner.bank', 'partner_id', string='Banks')
     website = fields.Char('Website Link')
     comment = fields.Html(string='Notes')
 
-    category_id: PartnerCategory = fields.Many2many('res.partner.category', column1='partner_id',
+    category_id: ResPartnerCategory = fields.Many2many('res.partner.category', column1='partner_id',
                                     column2='category_id', string='Tags', default=_default_category)
     active = fields.Boolean(default=True)
     employee = fields.Boolean(help="Check this box if this contact is an Employee.")
@@ -264,8 +264,8 @@ class ResPartner(models.Model):
     street2 = fields.Char()
     zip = fields.Char(change_default=True)
     city = fields.Char()
-    state_id: CountryState = fields.Many2one("res.country.state", string='State', ondelete='restrict', domain="[('country_id', '=?', country_id)]")
-    country_id: Country = fields.Many2one('res.country', string='Country', ondelete='restrict')
+    state_id: ResCountryState = fields.Many2one("res.country.state", string='State', ondelete='restrict', domain="[('country_id', '=?', country_id)]")
+    country_id: ResCountry = fields.Many2one('res.country', string='Country', ondelete='restrict')
     country_code = fields.Char(related='country_id.code', string="Country Code")
     partner_latitude = fields.Float(string='Geo Latitude', digits=(10, 7))
     partner_longitude = fields.Float(string='Geo Longitude', digits=(10, 7))
@@ -293,7 +293,7 @@ class ResPartner(models.Model):
     contact_address = fields.Char(compute='_compute_contact_address', string='Complete Address')
 
     # technical field used for managing commercial fields
-    commercial_partner_id: Partner = fields.Many2one(
+    commercial_partner_id: ResPartner = fields.Many2one(
         'res.partner', string='Commercial Entity',
         compute='_compute_commercial_partner', store=True,
         recursive=True, index=True)
@@ -303,7 +303,7 @@ class ResPartner(models.Model):
     barcode = fields.Char(help="Use a barcode to identify this contact.", copy=False, company_dependent=True)
 
     # hack to allow using plain browse record in qweb views, and used in ir.qweb.field.contact
-    self: Partner = fields.Many2one(comodel_name='res.partner', compute='_compute_get_ids')
+    self: ResPartner = fields.Many2one(comodel_name='res.partner', compute='_compute_get_ids')
 
     _sql_constraints = [
         ('check_name', "CHECK( (type='contact' AND name IS NOT NULL) or (type!='contact') )", 'Contacts require a name'),
@@ -404,7 +404,7 @@ class ResPartner(models.Model):
             partner_id = partner._origin.id
             #active_test = False because if a partner has been deactivated you still want to raise the error,
             #so that you can reactivate it instead of creating a new one, which would loose its history.
-            ResPartner = self.with_context(active_test=False).sudo()
+            Partner = self.with_context(active_test=False).sudo()
             domain = [
                 ('vat', '=', partner.vat),
             ]
@@ -414,7 +414,7 @@ class ResPartner(models.Model):
                 domain += [('id', '!=', partner_id), '!', ('id', 'child_of', partner_id)]
             # For VAT number being only one character, we will skip the check just like the regular check_vat
             should_check_vat = partner.vat and len(partner.vat) != 1
-            partner.same_vat_partner_id = should_check_vat and not partner.parent_id and ResPartner.search(domain, limit=1)
+            partner.same_vat_partner_id = should_check_vat and not partner.parent_id and Partner.search(domain, limit=1)
             # check company_registry
             domain = [
                 ('company_registry', '=', partner.company_registry),
@@ -422,7 +422,7 @@ class ResPartner(models.Model):
             ]
             if partner_id:
                 domain += [('id', '!=', partner_id), '!', ('id', 'child_of', partner_id)]
-            partner.same_company_registry_partner_id = bool(partner.company_registry) and not partner.parent_id and ResPartner.search(domain, limit=1)
+            partner.same_company_registry_partner_id = bool(partner.company_registry) and not partner.parent_id and Partner.search(domain, limit=1)
 
     @api.depends(lambda self: self._display_address_depends())
     def _compute_contact_address(self):

--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -1428,6 +1428,9 @@ class ResUsers(models.Model):
         """
         return False
 
+
+ResUsersPatchedInTest = ResUsers
+
 #
 # Implied groups
 #
@@ -1437,7 +1440,9 @@ class ResUsers(models.Model):
 #
 
 
-class ResGroups(models.Model):
+# TODO: reorganize or split the file to avoid declaring classes multiple times
+# pylint: disable=E0102
+class ResGroups(models.Model):  # noqa: F811
     _inherit = ['res.groups']
 
     implied_ids = fields.Many2many('res.groups', 'res_groups_implied_rel', 'gid', 'hid',
@@ -1553,7 +1558,8 @@ class ResGroups(models.Model):
         return SetDefinitions(data)
 
 
-class ResUsers(models.Model):
+class UsersImplied(models.Model):
+    _name = 'res.users'
     _inherit = ['res.users']
 
     @api.model_create_multi
@@ -1576,7 +1582,7 @@ class ResUsers(models.Model):
         if demoted_users:
             # demoted users are restricted to the assigned groups only
             vals = {'groups_id': [Command.clear()] + values['groups_id']}
-            super(ResUsers, demoted_users).write(vals)
+            super(UsersImplied, demoted_users).write(vals)
         # add implied groups for all users (in batches)
         users_batch = defaultdict(self.browse)
         for user in self:
@@ -1584,7 +1590,7 @@ class ResUsers(models.Model):
         for groups, users in users_batch.items():
             gs = set(concat(g.trans_implied_ids for g in groups))
             vals = {'groups_id': [Command.link(g.id) for g in gs]}
-            super(ResUsers, users).write(vals)
+            super(UsersImplied, users).write(vals)
         return res
 
 #
@@ -1610,7 +1616,8 @@ class ResUsers(models.Model):
 #
 
 
-class ResGroups(models.Model):
+# pylint: disable=E0102
+class ResGroups(models.Model):  # noqa: F811
     _inherit = ['res.groups']
 
     @api.model_create_multi
@@ -1845,7 +1852,8 @@ class IrModuleCategory(models.Model):
         return res
 
 
-class ResUsers(models.Model):
+# pylint: disable=E0102
+class ResUsers(models.Model):  # noqa: F811
     _inherit = ['res.users']
 
     user_group_warning = fields.Text(string="User Group Warning", compute="_compute_user_group_warning")
@@ -2107,7 +2115,7 @@ class ResUsers(models.Model):
         if allfields:
             missing = missing.intersection(allfields)
         if missing:
-            self = self.sudo()  # to use super without changing class name.
+            self = self.sudo()  # noqa: PLW0642
             res.update({
                 key: dict(values, readonly=key not in self.SELF_WRITEABLE_FIELDS, searchable=False)
                 for key, values in super().fields_get(missing, attributes).items()
@@ -2230,7 +2238,8 @@ KEY_CRYPT_CONTEXT = CryptContext(
 )
 
 
-class ResUsers(models.Model):
+# pylint: disable=E0102
+class ResUsers(models.Model):  # noqa: F811
     _inherit = ['res.users']
 
     api_key_ids = fields.One2many('res.users.apikeys', 'user_id', string="API Keys")
