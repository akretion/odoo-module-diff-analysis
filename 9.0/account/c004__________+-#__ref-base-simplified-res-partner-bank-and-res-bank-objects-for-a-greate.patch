PR: https://github.com/odoo/odoo/pull/

From: 6cb6f43c2beffaccd871ac93f19e11aeeb92d131
From: qdp-odoo
Date: 2015-08-19 13:44:59

Breaking data model changes score: 4, change matches:
+    journal_id = fields.One2many('account.journal', 'bank_account_id', domain=[('type', '=', 'bank')], string='Account Journal', readonly=True,
-    _inherit = "res.partner.bank"
-    journal_id = fields.Many2one('account.journal', string='Account Journal',
+    bank_journal_ids = fields.One2many('account.journal', 'company_id', domain=[('type', '=', 'bank')], string='Bank Journals')

Total Changes: 237

[REF] base: simplified res.partner.bank and res.bank objects for a greater usability + [IMP] account: bank journals are now the bank accounts of a company

================================= pseudo patch: =================================

--- a/addons/account/models/__init__.py
+++ b/addons/account/models/__init__.py
@@ -5,7 +5,6 @@ import account
 import account_payment
 import account_invoice
 import account_bank_statement
-import account_bank
 import account_move
 import chart_template
 import account_analytic_line

--- a/addons/account/models/account.py
+++ b/addons/account/models/account.py
@@ -6,7 +6,7 @@ import math
 from openerp.osv import expression
 from openerp.tools.float_utils import float_round as round
 from openerp.tools import DEFAULT_SERVER_DATETIME_FORMAT
-from openerp.exceptions import UserError
+from openerp.exceptions import UserError, ValidationError
 from openerp import api, fields, models, _
 
 
@@ -189,7 +189,7 @@ class AccountJournal(models.Model):
         return self.env.ref('account.account_payment_method_manual_out')
 
     name = fields.Char(string='Journal Name', required=True)
-    code = fields.Char(string='Sequence Prefix', size=5, required=True, help="The journal entries of this journal will be named using this prefix.")
+    code = fields.Char(string='Short Code', size=5, required=True, help="The journal entries of this journal will be named using this prefix.")
     type = fields.Selection([
             ('sale', 'Sale'),
             ('purchase', 'Purchase'),
@@ -240,6 +240,13 @@ class AccountJournal(models.Model):
     profit_account_id = fields.Many2one('account.account', string='Profit Account', domain=[('deprecated', '=', False)], help="Used to register a profit when the ending balance of a cash register differs from what the system computes")
     loss_account_id = fields.Many2one('account.account', string='Loss Account', domain=[('deprecated', '=', False)], help="Used to register a loss when the ending balance of a cash register differs from what the system computes")
 
+    # Bank journals fields
+    bank_account_id = fields.Many2one('res.partner.bank', string="Bank Account", ondelete='restrict')
+    display_on_footer = fields.Boolean("Show in Invoices Footer", help="Display this bank account on the footer of printed documents like invoices and sales orders.")
+    bank_statements_source = fields.Selection([('manual', 'Record Manually')], string='Bank Feeds')
+    bank_acc_number = fields.Char(related='bank_account_id.acc_number')
+    bank_id = fields.Many2one('res.bank', related='bank_account_id.bank_id')
+
     _sql_constraints = [
         ('code_company_uniq', 'unique (code, name, company_id)', 'The code and name of the journal must be unique per company !'),
     ]
@@ -253,6 +260,17 @@ class AccountJournal(models.Model):
             if self.default_debit_account_id and not self.default_debit_account_id.currency_id.id == self.currency_id.id:
                 raise UserError(_('Configuration error!\nThe currency of the journal should be the same than the default debit account.'))
 
+    @api.one
+    @api.constrains('type', 'bank_account_id')
+    def _check_bank_account(self):
+        if self.type == 'bank' and self.bank_account_id:
+            if self.bank_account_id.company_id != self.company_id:
+                raise ValidationError(_('The bank account of a bank journal must belong to the same company (%s).') % self.company_id.name)
+            # A bank account can belong to a customer/supplier, in which case their partner_id is the customer/supplier.
+            # Or they are part of a bank journal and their partner_id must be the company's partner_id.
+            if self.bank_account_id.partner_id != self.company_id.partner_id:
+                raise ValidationError(_('The holder of a journal\'s bank account must be the company (%s).') % self.company_id.name)
+
     @api.onchange('default_debit_account_id')
     def onchange_debit_account_id(self):
         if not self.default_credit_account_id:
@@ -285,7 +303,14 @@ class AccountJournal(models.Model):
                 if journal.refund_sequence_id:
                     new_prefix = self._get_sequence_prefix(vals['code'], refund=True)
                     journal.refund_sequence_id.write({'prefix': new_prefix})
-        return super(AccountJournal, self).write(vals)
+        result = super(AccountJournal, self).write(vals)
+
+        # Create the bank_account_id if necessary
+        if 'bank_acc_number' in vals:
+            for journal in self.filtered(lambda r: r.type == 'bank' and not r.bank_account_id):
+                journal.set_bank_account(vals.get('bank_acc_number'), vals.get('bank_id'))
+
+        return result
 
     @api.model
     def _get_sequence_prefix(self, code, refund=False):
@@ -349,57 +374,55 @@ class AccountJournal(models.Model):
                 'company_id': company.id,
         }
 
-    @api.model
-    def _prepare_bank_journal(self, company, line):
-        '''
-        This function prepares the value to use for the creation of a bank journal created through the wizard of
-        generating COA from templates.
-
-        :param company: company for which the wizard is running
-        :param line: dictionary containing the values encoded by the user related to his bank account with keys 
-            - acc_name (char): name of the bank account
-            - account_type (char): kind of liquidity journal to create. Either 'bank' or 'cash'
-            - currency_id (int): id of the currency related to this account if its different than the company currency (False otherwise)
-        :return: mapping of field names and values
-        :rtype: dict
-        '''
-        # we need to loop to find next number for journal code
-        for num in xrange(1, 100):
-            # journal_code has a maximal size of 5, hence we can enforce the boundary num < 100
-            journal_code = line.get('account_type', 'bank') == 'cash' and 'CSH' or 'BNK'
-            journal_code += str(num)
-            journal = self.env['account.journal'].search([('code', '=', journal_code), ('company_id', '=', company.id)], limit=1)
-            if not journal:
-                break
-        else:
-            raise UserError(_('Cannot generate an unused journal code.'))
-
-        return {
-                'name': line['acc_name'],
-                'code': journal_code,
-                'type': line.get('account_type', 'bank'),
-                'company_id': company.id,
-                'analytic_journal_id': False,
-                'currency_id': line.get('currency_id', False),
-                'show_on_dashboard': True,
-        }
-
     @api.model
     def create(self, vals):
+        company_id = vals.get('company_id', self.env.user.company_id.id)
         if vals.get('type') in ('bank', 'cash'):
+            # If no code provided, loop to find next available journal code
+            if not vals.get('code'):
+                for num in xrange(1, 100):
+                    # journal_code has a maximal size of 5, hence we can enforce the boundary num < 100
+                    journal_code = (vals['type'] == 'cash' and 'CSH' or 'BNK') + str(num)
+                    journal = self.env['account.journal'].search([('code', '=', journal_code), ('company_id', '=', company_id)], limit=1)
+                    if not journal:
+                        vals['code'] = journal_code
+                        break
+                else:
+                    raise UserError(_("Cannot generate an unused journal code. Please fill the 'Shortcode' field."))
+
+            # Create a default debit/credit account if not given
             default_account = vals.get('default_debit_account_id') or vals.get('default_credit_account_id')
             if not default_account:
-                company = self.env['res.company'].browse(vals['company_id'])
+                company = self.env['res.company'].browse(company_id)
                 account_vals = self._prepare_liquidity_account(vals.get('name'), company, vals.get('currency_id'), vals.get('type'))
                 default_account = self.env['account.account'].create(account_vals)
                 vals['default_debit_account_id'] = default_account.id
                 vals['default_credit_account_id'] = default_account.id
+
         # We just need to create the relevant sequences according to the chosen options
         if not vals.get('sequence_id'):
             vals.update({'sequence_id': self.sudo()._create_sequence(vals).id})
         if vals.get('refund_sequence') and not vals.get('refund_sequence_id'):
             vals.update({'refund_sequence_id': self.sudo()._create_sequence(vals, refund=True).id})
-        return super(AccountJournal, self).create(vals)
+
+        journal = super(AccountJournal, self).create(vals)
+
+        # Create the bank_account_id if necessary
+        if journal.type == 'bank' and not journal.bank_account_id and vals.get('bank_acc_number'):
+            journal.set_bank_account(vals.get('bank_acc_number'), vals.get('bank_id'))
+
+        return journal
+
+    def set_bank_account(self, acc_number, bank_id=None):
+        """ Create a res.partner.bank and set it as value of the  field bank_account_id """
+        self.ensure_one()
+        self.bank_account_id = self.env['res.partner.bank'].create({
+            'acc_number': acc_number,
+            'bank_id': bank_id,
+            'company_id': self.company_id.id,
+            'currency_id': self.currency_id.id,
+            'partner_id': self.company_id.partner_id.id,
+        }).id
 
     @api.multi
     @api.depends('name', 'currency_id', 'company_id', 'company_id.currency_id')
@@ -419,6 +442,19 @@ class AccountJournal(models.Model):
             journal.at_least_one_outbound = bool(len(self.outbound_payment_method_ids))
 
 
+class ResPartnerBank(models.Model):
+    _inherit = "res.partner.bank"
+
+    journal_id = fields.One2many('account.journal', 'bank_account_id', domain=[('type', '=', 'bank')], string='Account Journal', readonly=True,
+        help="The accounting journal corresponding to this bank account.")
+
+    @api.one
+    @api.constrains('journal_id')
+    def _check_journal_id(self):
+        if len(self.journal_id) > 1:
+            raise ValidationError(_('A bank account can anly belong to one journal.'))
+
+
 #----------------------------------------------------------
 # Tax
 #----------------------------------------------------------

--- a/addons/account/models/account_bank.py
+++ b/None
@@ -1,44 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from openerp import api, fields, models
-
-
-class Bank(models.Model):
-    _inherit = "res.partner.bank"
-
-    journal_id = fields.Many2one('account.journal', string='Account Journal',
-        help="This journal will be created automatically for this bank account when you save the record")
-
-    @api.model
-    def create(self, data):
-        result = super(Bank, self).create(data)
-        result.post_write()
-        return result
-
-    @api.multi
-    def write(self, data):
-        result = super(Bank, self).write(data)
-        self.post_write()
-        return result
-
-    @api.model
-    def _prepare_name(self, bank):
-        "Return the name to use when creating a bank journal"
-        name = bank.bank_name + ' ' if bank.bank_name else ''
-        name += bank.acc_number
-        return name
-
-    @api.multi
-    def post_write(self):
-        JournalObj = self.env['account.journal']
-        for bank in self:
-            # Create a journal for the bank account if it belongs to the company.
-            if bank.company_id and not bank.journal_id:
-                journal_vals = JournalObj._prepare_bank_journal(bank.company_id, {'acc_name': self._prepare_name(bank), 'currency_id': bank.currency_id.id, 'account_type': 'bank'})
-                journal = JournalObj.create(journal_vals)
-                missing_vals = {'journal_id': journal.id}
-                if not bank.partner_id:
-                    missing_vals['partner_id'] = bank.company_id.partner_id.id
-                if not bank.owner_name:
-                    missing_vals['owner_name'] = bank.company_id.partner_id.name
-                bank.write(missing_vals)

--- a/addons/account/models/account_journal_dashboard.py
+++ b/addons/account/models/account_journal_dashboard.py
@@ -187,7 +187,8 @@ class account_journal(models.Model):
             'sum_waiting': formatLang(self.env, sum_waiting or 0.0, currency_obj=self.currency_id or self.company_id.currency_id),
             'sum_late': formatLang(self.env, sum_late or 0.0, currency_obj=self.currency_id or self.company_id.currency_id),
             'currency_id': self.currency_id and self.currency_id.id or self.company_id.currency_id.id,
-            'show_import': True if self.type in ['bank', 'cash'] and len(ac_bnk_stmt) == 0 and last_balance == 0 else False,
+            'no_statement': bool(self.type in ['bank', 'cash'] and len(ac_bnk_stmt) == 0),
+            'bank_statements_source': self.bank_statements_source,
             'title': title, 
         }
 
@@ -220,7 +221,7 @@ class account_journal(models.Model):
         }
 
     @api.multi
-    def create_cash_bank(self):
+    def create_cash_statement(self):
         ctx = self._context.copy()
         ctx.update({'journal_id': self.id, 'default_journal_id': self.id, 'default_journal_type': 'cash'})
         return {
@@ -337,13 +338,12 @@ class account_journal(models.Model):
         return action
 
     @api.multi
-    def import_statement(self):
-        """return action to import bank/cash statements. This button should be called only on journals with type =='bank'"""
-        model = 'account.bank.statement'
-        action_name = 'action_account_bank_statement_import'
-        ir_model_obj = self.pool['ir.model.data']
-        model, action_id = ir_model_obj.get_object_reference(self._cr, self._uid, 'account_bank_statement_import', action_name)
-        action = self.pool[model].read(self._cr, self._uid, action_id, context=self.env.context)
-        # Note: this drops action['context'], which is a dict stored as a string, which is not easy to update
-        action.update({'context': (u"{'journal_id': " + str(self.id) + u"}")})
+    def create_bank_statement(self):
+        """return action to create a bank statements. This button should be called only on journals with type =='bank'"""
+        self.bank_statements_source = 'manual'
+        action = self.env.ref('account.action_bank_statement_tree').read()[0]
+        action.update({
+            'views': [[False, 'form']],
+            'context': "{'default_journal_id': " + str(self.id) + "}",
+        })
         return action

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -751,42 +751,21 @@ class WizardMultiChartsAccounts(models.TransientModel):
     def _create_bank_journals_from_o2m(self, company, acc_template_ref):
         '''
         This function creates bank journals and its accounts for each line encoded in the field bank_account_ids of the
-        wizard.
+        wizard (which is currently only used to create a default bank and cash journal when the CoA is installed).
 
-        :param company_id: the id of the company for which the wizard is running.
+        :param company: the company for which the wizard is running.
         :param acc_template_ref: the dictionary containing the mapping between the ids of account templates and the ids
             of the accounts that have been generated from them.
-        :return: True
         '''
         self.ensure_one()
-        # Build a list with all the data to process
-        journal_data = []
-        if self.bank_account_ids:
-            for acc in self.bank_account_ids:
-                vals = {
-                    'acc_name': acc.acc_name,
-                    'account_type': acc.account_type,
-                    'currency_id': acc.currency_id.id,
-                }
-                journal_data.append(vals)
-
-        for line in journal_data:
-            if line['account_type'] == 'bank':
-                #create the bank account that will trigger the journal and account.account creation
-                res_partner_bank_vals = {
-                    'acc_number': line['acc_name'],
-                    'currency_id': line['currency_id'],
-                    'company_id': company.id,
-                    'owner_name': company.partner_id.name,
-                    'partner_id': company.partner_id.id,
-                    'footer': True
-                }
-                self.env['res.partner.bank'].create(res_partner_bank_vals)
-            else:
-                #create the cash journal that will trigger the account.account creation
-                vals_journal = self.env['account.journal']._prepare_bank_journal(company, line)
-                self.env['account.journal'].create(vals_journal)
-        return True
+        # Create the journals that will trigger the account.account creation
+        for acc in self.bank_account_ids:
+            self.env['account.journal'].create({
+                'name': acc.acc_name,
+                'type': acc.account_type,
+                'company_id': company.id,
+                'currency_id': acc.currency_id.id,
+            })
 
 
 class AccountBankAccountsWizard(models.TransientModel):

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -34,6 +34,8 @@ class ResCompany(models.Model):
     property_stock_account_input_categ_id = fields.Many2one('account.account', oldname="property_stock_account_input_categ")
     property_stock_account_output_categ_id = fields.Many2one('account.account', oldname="property_stock_account_output_categ")
     property_stock_valuation_account_id = fields.Many2one('account.account')
+    bank_journal_ids = fields.One2many('account.journal', 'company_id', domain=[('type', '=', 'bank')], string='Bank Journals')
+
 
     @api.multi
     def compute_fiscalyear_dates(self, date):

--- a/addons/account/models/res_config.py
+++ b/addons/account/models/res_config.py
@@ -174,14 +174,9 @@ class AccountConfigSettings(models.TransientModel):
         return True
 
     @api.multi
-    def open_company_form(self):
-        return {
-            'type': 'ir.actions.act_window',
-            'name': 'Configure your Company',
-            'res_model': 'res.company',
-            'res_id': self.company_id.id,
-            'view_mode': 'form',
-        }
+    def open_bank_accounts(self):
+        action_rec = self.env['ir.model.data'].xmlid_to_object('account.action_account_bank_journal_form')
+        return action_rec.read([])[0]
 
     @api.multi
     def set_transfer_account(self):
