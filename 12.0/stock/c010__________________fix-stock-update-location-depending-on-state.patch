PR: https://github.com/odoo/odoo/pull/

From: 2e4ab78ce7b95003cedaaca3ceeedcf0a2c8e2ff
From: Pierre Masereel
Date: 2018-07-19 14:42:08

Structural Changes: 2
Total Changes: 36

[FIX] stock: update location depending on state

maybe we should compute

================================= pseudo patch: =================================

--- a/addons/stock/models/stock_package_level.py
+++ b/addons/stock/models/stock_package_level.py
@@ -13,7 +13,7 @@ class StockPackageLevel(models.Model):
     picking_id = fields.Many2one('stock.picking', 'Picking')
     move_ids = fields.One2many('stock.move', 'package_level_id')
     move_line_ids = fields.One2many('stock.move.line', 'package_level_id')
-    location_id = fields.Many2one('stock.location', 'From')
+    location_id = fields.Many2one('stock.location', 'From', compute='_compute_location_id')
     location_dest_id = fields.Many2one('stock.location', 'To')
     is_done = fields.Boolean('Done', compute='_compute_is_done', inverse='_set_is_done')
     state = fields.Selection([
@@ -51,8 +51,8 @@ class StockPackageLevel(models.Model):
                         else:
                             corresponding_move = package_level.move_ids.filtered(lambda m: m.product_id == quant.product_id)[:1]
                             self.env['stock.move.line'].create({
-                                'location_id': package_level.picking_id.location_id.id,
-                                'location_dest_id': package_level.picking_id.location_dest_id.id,
+                                'location_id': package_level.location_id.id,
+                                'location_dest_id': package_level.location_dest_id.id,
                                 'picking_id': package_level.picking_id.id,
                                 'product_id': quant.product_id.id,
                                 'qty_done': quant.quantity,
@@ -110,12 +110,6 @@ class StockPackageLevel(models.Model):
                 package_level.show_lots_m2o = False
                 package_level.show_lots_text = False
 
-
-    @api.onchange('package_id')
-    def _onchange_package_id(self):
-        if not self.is_fresh_package:
-            self.location_id = self.package_id.location_id
-
     def _generate_moves(self):
         for package_level in self:
             if package_level.package_id:
@@ -136,9 +130,6 @@ class StockPackageLevel(models.Model):
         if vals.get('location_dest_id'):
             result.mapped('move_line_ids').write({'location_dest_id': vals['location_dest_id']})
             result.mapped('move_ids').write({'location_dest_id': vals['location_dest_id']})
-        if not result.is_fresh_package and vals.get('location_id'):
-            result.mapped('move_line_ids').write({'location_id': vals['location_id']})
-            result.mapped('move_ids').write({'location_id': vals['location_id']})
         if result.picking_id.state != 'draft' and result.location_id and result.location_dest_id and not result.move_ids and not result.move_line_ids:
             result._generate_moves()
         return result
@@ -148,13 +139,6 @@ class StockPackageLevel(models.Model):
         if vals.get('location_dest_id'):
             self.mapped('move_line_ids').write({'location_dest_id': vals['location_dest_id']})
             self.mapped('move_ids').write({'location_dest_id': vals['location_dest_id']})
-        if vals.get('location_id'):
-            fresh_packages = self.env['stock.package_level']
-            for package_level in self:
-                if package_level.is_fresh_package:
-                    fresh_packages |= package_level
-            fresh_packages.mapped('move_line_ids').write({'location_id': vals['location_id']})
-            fresh_packages.mapped('move_ids').write({'location_id': vals['location_id']})
         return result
 
     def unlink(self):
@@ -183,3 +167,15 @@ class StockPackageLevel(models.Model):
                 or any(grouped_ops.get(key, 0) - grouped_quants.get(key, 0) != 0 for key in grouped_ops):
             all_in = False
         return all_in
+
+    @api.depends('state', 'move_line_ids')
+    def _compute_location_id(self):
+        for pl in self:
+            if pl.state == 'new' or pl.is_fresh_package:
+                pl.location = False
+            elif pl.state in ('draft', 'cancel'):
+                pl.location_id = pl.picking_id.location_id
+            elif pl.state == 'confirmed' and pl.move_ids:
+                pl.location_id = pl.move_ids[0].location_id
+            elif pl.state in ('assigned', 'done') and pl.move_line_ids:
+                pl.location_id = pl.move_line_ids[0].location_id

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -661,7 +661,7 @@ class Picking(models.Model):
                             'result_package_id': pack.id,
                         })
                     else:
-                        move_lines_in_package_level = move_lines_to_pack.filtered(lambda ml: ml.move_id.package_level_id != False)
+                        move_lines_in_package_level = move_lines_to_pack.filtered(lambda ml: ml.move_id.package_level_id)
                         move_lines_without_package_level = move_lines_to_pack - move_lines_in_package_level
                         for ml in move_lines_in_package_level:
                             ml.write({
