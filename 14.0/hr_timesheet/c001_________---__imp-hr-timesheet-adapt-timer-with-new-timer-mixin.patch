PR: https://github.com/odoo/odoo/pull/

From: 3bcef3a050635c4123172a4dc9ac15cdb9050a58
From: Okan SUMER (osu)
Date: 2020-02-05 15:44:37

Breaking data model changes scores: del:9 + add:0, change matches:
-    timer_start = fields.Datetime("Timesheet Timer Start")
-    timer_pause = fields.Datetime("Timesheet Timer Last Pause")
-    display_timer_start_primary = fields.Boolean(compute='_compute_display_timer_buttons')
-    display_timer_stop = fields.Boolean(compute='_compute_display_timer_buttons')
-    display_timer_pause = fields.Boolean(compute='_compute_display_timer_buttons')
-    display_timer_resume = fields.Boolean(compute='_compute_display_timer_buttons')
-    timer_start = fields.Datetime("Timer Start")
-    timer_pause = fields.Datetime("Timer Last Pause")
-    is_timer_running = fields.Boolean(compute="_compute_timer")

Total Changes: 165

[IMP] hr_timesheet: Adapt timer with new timer mixin

Purpose
=======

Now that we have a new timer mixin that offers more possibilities
than what was currently implemented, we can reuse it in the timesheet
management module.

TaskID: 2149450

================================= pseudo patch: =================================

--- a/addons/hr_timesheet/models/__init__.py
+++ b/addons/hr_timesheet/models/__init__.py
@@ -1,7 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import timer_mixin
 from . import hr_employee
 from . import hr_timesheet
 from . import ir_http

--- a/addons/hr_timesheet/models/hr_timesheet.py
+++ b/addons/hr_timesheet/models/hr_timesheet.py
@@ -199,42 +199,33 @@ class AccountAnalyticLine(models.Model):
     def _compute_display_timer(self):
         uom_hour = self.env.ref('uom.product_uom_hour')
         for analytic_line in self:
-            analytic_line.display_timer = analytic_line.encoding_uom_id == uom_hour
+            analytic_line.display_timer = analytic_line.encoding_uom_id == uom_hour and analytic_line.project_id.allow_timesheet_timer
 
     def action_timer_start(self):
-        """ Start timer and search if another timer hasn't been launched.
-            If yes, then stop the timer before launch this timer.
+        """ Start a timer if it isn't already started and the
+        timesheets allow to track time
         """
-        if not self.timer_start and self.display_timer:
-            self._stop_running_timers()
+        if not self.user_timer_id.timer_start and self.display_timer:
             super().action_timer_start()
 
-    def _stop_running_timers(self):
-        """ Search if a timesheet has a timer activated and stop the timer.
-            Check if a timer is activated for another timesheet
-            if yes, then update unit_amount field and stop timer,
-            otherwise, do nothing.
-        """
-        analytic_line = self.search([('timer_start', '!=', False), ('user_id', '=', self.env.uid)])
-        if analytic_line:
-            analytic_line.action_timer_stop()
-
     def action_timer_stop(self):
-        """ Action stop the timer of the current timesheet.
-            When the timer must be stopped, we must calculate the new
-            unit_amount based on the timer and the previous value of
-            unit_amount for the current timesheet.
+        """ Stop the current timer
         """
-        if self.timer_start and self.display_timer:
-            minutes_spent = self._get_minutes_spent()
-            if self.unit_amount == 0 and minutes_spent < 1:
-                # Check if unit_amount equals 0 and minutes_spent is less than 1 minute,
-                # if yes, then remove the timesheet
-                self.unlink()
+        if self.user_timer_id.timer_start and self.display_timer:
+            minutes_spent = super().action_timer_stop()
+            self._add_timesheet_time(minutes_spent)
+
+    def _add_timesheet_time(self, minutes_spent):
+        if self.unit_amount == 0 and minutes_spent < 1:
+            # Check if unit_amount equals 0 and minutes_spent is less than 1 minute,
+            # if yes, then remove the timesheet
+            self.unlink()
+        else:
+            if minutes_spent < 1:
+                amount = self.unit_amount
             else:
-                if minutes_spent < 1:
-                    amount = self.unit_amount
-                else:
-                    amount = self.unit_amount + minutes_spent * 60 / 3600
-                self.write({'unit_amount': amount})
-                super().action_timer_stop()
+                amount = self.unit_amount + minutes_spent * 60 / 3600
+            self.write({'unit_amount': amount})
+
+    def _action_interrupt_user_timers(self):
+        self.action_timer_stop()
\ No newline at end of file

--- a/addons/hr_timesheet/models/project.py
+++ b/addons/hr_timesheet/models/project.py
@@ -1,6 +1,5 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
-from math import ceil
 
 from odoo import models, fields, api, _
 from odoo.exceptions import UserError, ValidationError
@@ -79,7 +78,6 @@ class Project(models.Model):
     def _init_data_analytic_account(self):
         self.search([('analytic_account_id', '=', False), ('allow_timesheets', '=', True)])._create_analytic_account()
 
-
 class Task(models.Model):
     _name = "project.task"
     _inherit = ["project.task", "timer.mixin"]
@@ -94,32 +92,22 @@ class Task(models.Model):
     subtask_effective_hours = fields.Float("Sub-tasks Hours Spent", compute='_compute_subtask_effective_hours', store=True, help="Sum of actually spent hours on the subtask(s)")
     timesheet_ids = fields.One2many('account.analytic.line', 'task_id', 'Timesheets')
 
-    timer_start = fields.Datetime("Timesheet Timer Start")
-    timer_pause = fields.Datetime("Timesheet Timer Last Pause")
     # YTI FIXME: Those field seems quite useless
     timesheet_timer_first_start = fields.Datetime("Timesheet Timer First Use", readonly=True)
     timesheet_timer_last_stop = fields.Datetime("Timesheet Timer Last Use", readonly=True)
     display_timesheet_timer = fields.Boolean("Display Timesheet Time", compute='_compute_display_timesheet_timer')
-    display_timer_start_primary = fields.Boolean(compute='_compute_display_timer_buttons')
+
     display_timer_start_secondary = fields.Boolean(compute='_compute_display_timer_buttons')
-    display_timer_stop = fields.Boolean(compute='_compute_display_timer_buttons')
-    display_timer_pause = fields.Boolean(compute='_compute_display_timer_buttons')
-    display_timer_resume = fields.Boolean(compute='_compute_display_timer_buttons')
 
     @api.depends('display_timesheet_timer', 'timer_start', 'timer_pause', 'total_hours_spent')
     def _compute_display_timer_buttons(self):
         for task in self:
-            start_p, start_s, stop, pause, resume = True, True, True, True, True
+            displays = super()._compute_display_timer_buttons()
+            start_p, start_s, stop, pause, resume = displays['start_p'], displays['start_p'], displays['stop'], displays['pause'], displays['resume']
             if not task.display_timesheet_timer:
                 start_p, start_s, stop, pause, resume = False, False, False, False, False
             else:
-                if task.timer_start:
-                    start_p, start_s = False, False
-                    if task.timer_pause:
-                        pause = False
-                    else:
-                        resume = False
-                else:
+                if not task.timer_start:
                     stop, pause, resume = False, False, False
                     if not task.total_hours_spent:
                         start_s = False
@@ -213,27 +201,19 @@ class Task(models.Model):
         return result
 
     def action_timer_start(self):
-        self.ensure_one()
-        if not self.timesheet_timer_first_start:
-            self.write({'timesheet_timer_first_start': fields.Datetime.now()})
-        super(Task, self).action_timer_start()
+        if not self.user_timer_id.timer_start and self.display_timesheet_timer:
+            super(Task, self).action_timer_start()
 
     def action_timer_stop(self):
-        self.ensure_one()
-        if self.timer_start:  # timer was either running or paused
-            minutes_spent = self._get_minutes_spent()
-            minutes_spent = self._timer_rounding(minutes_spent)
+        # timer was either running or paused
+        if self.user_timer_id.timer_start and self.display_timesheet_timer:
+            minutes_spent = super().action_timer_stop()
+            minimum_duration = int(self.env['ir.config_parameter'].sudo().get_param('hr_timesheet.timesheet_min_duration', 0))
+            rounding = int(self.env['ir.config_parameter'].sudo().get_param('hr_timesheet.timesheet_rounding', 0))
+            minutes_spent = self._timer_rounding(minutes_spent, minimum_duration, rounding)
             return self._action_create_timesheet(minutes_spent * 60 / 3600)
         return False
 
-    def _timer_rounding(self, minutes_spent):
-        minimum_duration = int(self.env['ir.config_parameter'].sudo().get_param('hr_timesheet.timesheet_min_duration', 0))
-        rounding = int(self.env['ir.config_parameter'].sudo().get_param('hr_timesheet.timesheet_rounding', 0))
-        minutes_spent = max(minimum_duration, minutes_spent)
-        if rounding and ceil(minutes_spent % rounding) != 0:
-            minutes_spent = ceil(minutes_spent / rounding) * rounding
-        return minutes_spent
-
     def _action_create_timesheet(self, time_spent):
         return {
             "name": _("Validate Spent Time"),
@@ -244,7 +224,7 @@ class Task(models.Model):
             "context": {
                 **self.env.context,
                 'active_id': self.id,
-                'active_model': 'project.task',
+                'active_model': self._name,
                 'default_time_spent': time_spent,
             },
         }

--- a/addons/hr_timesheet/models/timer_mixin.py
+++ b/None
@@ -1,65 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import models, fields, api
-
-
-class TimerMixin(models.AbstractModel):
-    _name = 'timer.mixin'
-    _description = 'Timer Mixin'
-    # YTI Note: This mixin is supposed to be extended to
-    # any models
-
-    timer_start = fields.Datetime("Timer Start")
-    timer_pause = fields.Datetime("Timer Last Pause")
-    is_timer_running = fields.Boolean(compute="_compute_timer")
-
-    @api.depends('timer_start')
-    def _compute_timer(self):
-        for record in self:
-            record.is_timer_running = bool(record.timer_start)
-
-    def action_timer_start(self):
-        """ Action start the timer.
-            Start timer and search if another timer hasn't been launched.
-            If yes, then stop the timer before launch this timer.
-        """
-        self.ensure_one()
-        if not self.timer_start:
-            self.write({'timer_start': fields.Datetime.now()})
-
-    def action_timer_stop(self):
-        """ Stop the timer and return the spent minutes since it started
-            :return minutes_spent if the timer is started,
-                    otherwise return False
-        """
-        self.ensure_one()
-        if not self.timer_start:
-            return False
-        minutes_spent = self._get_minutes_spent()
-        self.write({'timer_start': False, 'timer_pause': False})
-        return minutes_spent
-
-    def _get_minutes_spent(self):
-        start_time = self.timer_start
-        stop_time = fields.Datetime.now()
-        # timer was either running or paused
-        if self.timer_pause:
-            start_time += (stop_time - self.timer_pause)
-        return (stop_time - start_time).total_seconds() / 60
-
-    def action_timer_pause(self):
-        self.write({'timer_pause': fields.Datetime.now()})
-
-    def action_timer_resume(self):
-        new_start = self.timer_start + (fields.Datetime.now() - self.timer_pause)
-        self.write({'timer_start': new_start, 'timer_pause': False})
-
-    @api.model
-    def get_server_time(self):
-        """ Returns the server time.
-            The timer widget needs the server time instead of the client time
-            to avoid time desynchronization issues like the timer beginning at 0:00
-            and not 23:59 and so on.
-        """
-        return fields.Datetime.now()
