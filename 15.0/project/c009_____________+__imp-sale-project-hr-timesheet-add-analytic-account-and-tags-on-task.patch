PR: https://github.com/odoo/odoo/pull/

From: dd706ea024f757f359f0e557844e8a5329a235ea
From: Thibault Libioulle
Date: 2021-09-03 10:45:58

Structural Changes: 6
Total Changes: 29

[IMP] (sale_)project,hr_timesheet: add analytic account and tags on task

Previously, all costs allocated to a task were associated, if set, to
the analytic account of their project.

This commit adds a deeper level of granularity, as the user will be able
to override the project analytic account and add analytic tags.
When creating timesheets or creating account move line related to SO
linked to a task, the analytic account of the task is now taken into
account rather than the one defined on the project. If an analytic
account is set on the SO, it remains the default account used.

If a task is related to an SOL and an invoice line is created from this
SOL, the analytic tags of the task are also given to the account move
line.

If different analytic account are linked to a same SOL through the
project using this SOL or the tasks using this SOL, than no default
analytic account is set on the invoice line.

PR : #70527

task-2458135

================================= pseudo patch: =================================

--- a/addons/project/models/__init__.py
+++ b/addons/project/models/__init__.py
@@ -2,6 +2,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from . import analytic_account
+from . import analytic_account_tag
 from . import project_milestone
 from . import project_project_stage
 from . import project_task_recurrence

--- a/None
+++ b/addons/project/models/analytic_account_tag.py
@@ -0,0 +1,9 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+class AccountAnalyticTag(models.Model):
+    _inherit = 'account.analytic.tag'
+
+    task_ids = fields.Many2many('project.task', string='Tasks')

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -1040,6 +1040,16 @@ class Task(models.Model):
     repeat_show_week = fields.Boolean(compute='_compute_repeat_visibility')
     repeat_show_month = fields.Boolean(compute='_compute_repeat_visibility')
 
+    # Account analytic
+    analytic_account_id = fields.Many2one('account.analytic.account', ondelete='set null',
+        domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]", check_company=True,
+        help="Analytic account to which this task is linked for financial management. "
+             "Use an analytic account to record cost and revenue on your task. "
+             "If empty, the analytic account of the project will be used.")
+    project_analytic_account_id = fields.Many2one('account.analytic.account', string='Project Analytic Account', related='project_id.analytic_account_id')
+    analytic_tag_ids = fields.Many2many('account.analytic.tag',
+        domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]", check_company=True)
+
     @property
     def SELF_READABLE_FIELDS(self):
         return PROJECT_TASK_READABLE_FIELDS | self.SELF_WRITABLE_FIELDS
@@ -1979,6 +1989,13 @@ class Task(models.Model):
             portal_users = task.message_partner_ids.user_ids.filtered('share')
             task.message_unsubscribe(partner_ids=portal_users.partner_id.ids)
 
+    # ---------------------------------------------------
+    # Analytic accounting
+    # ---------------------------------------------------
+    def _get_task_analytic_account_id(self):
+        self.ensure_one()
+        return self.analytic_account_id or self.project_analytic_account_id
+
 class ProjectTags(models.Model):
     """ Tags of project's tasks """
     _name = "project.tags"

--- a/addons/project/models/project_task_recurrence.py
+++ b/addons/project/models/project_task_recurrence.py
@@ -146,7 +146,7 @@ class ProjectTaskRecurrence(models.Model):
         return ['message_partner_ids', 'company_id', 'description', 'displayed_image_id', 'email_cc',
                 'parent_id', 'partner_email', 'partner_id', 'partner_phone', 'planned_hours',
                 'project_id', 'project_privacy_visibility', 'sequence', 'tag_ids', 'recurrence_id',
-                'name', 'recurring_task']
+                'name', 'recurring_task', 'analytic_account_id']
 
     def _get_weekdays(self, n=1):
         self.ensure_one()
