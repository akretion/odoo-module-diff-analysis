PR: https://github.com/odoo/odoo/pull/146339

From: b3be0eefd1c701c252ebbdc37757ac07108fe988
From: Florian(flg)
Date: 2024-01-24 09:20:31

Structural Changes: 2
Total Changes: 47

[IMP] account: Add filters for hole in sequences

The aim of this commit is adding a new filter to get
moves that made a sequence hole and to get draft/cancelled
moves with a sequence number consumed.
For the first part of the filter, we have to create a search
function to search on this computed field.
This search function is using xor to know if we use a
inselect or not inselect operator.
Truth table for (operator == '=') ^ (value is False)
+----------+-------+---------------+--------------+
| operator | value |    compute    |    result    |
+----------+-------+---------------+--------------+
| =        | true  | true ^ false  | inselect     |
| =        | false | true ^ true   | not inselect |
| !=       | true  | false ^ false | not inselect |
| !=       | false | false ^ true  | inselect     |
+----------+-------+---------------+--------------+

task-3619576

closes odoo/odoo#146339

Signed-off-by: William Andr√© (wan) <wan@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_journal_dashboard.py
+++ b/addons/account/models/account_journal_dashboard.py
@@ -131,7 +131,7 @@ class account_journal(models.Model):
               FROM account_move move
               JOIN res_company company ON company.id = move.company_id
              WHERE move.journal_id = ANY(%(journal_ids)s)
-               AND (move.state = 'posted' OR (move.state = 'draft' AND move.name != '/'))
+               AND move.state = 'posted'
                AND (company.fiscalyear_lock_date IS NULL OR move.date > company.fiscalyear_lock_date)
           GROUP BY move.journal_id, move.sequence_prefix
             HAVING COUNT(*) != MAX(move.sequence_number) - MIN(move.sequence_number) + 1
@@ -498,6 +498,10 @@ class account_journal(models.Model):
             (number_draft, sum_draft) = self._count_results_and_sum_amounts(query_results_drafts[journal.id], currency)
             (number_late, sum_late) = self._count_results_and_sum_amounts(late_query_results[journal.id], currency)
             amount_total_signed_sum, count = to_check_vals.get(journal.id, (0, 0))
+            if journal.type == 'purchase':
+                title_has_sequence_holes = _("Irregularities due to draft, cancelled or deleted bills with a sequence number since last lock date.")
+            else:
+                title_has_sequence_holes = _("Irregularities due to draft, cancelled or deleted invoices with a sequence number since last lock date.")
             dashboard_data[journal.id].update({
                 'number_to_check': count,
                 'to_check_balance': currency.format(amount_total_signed_sum),
@@ -509,6 +513,7 @@ class account_journal(models.Model):
                 'sum_waiting': currency.format(sum_waiting),
                 'sum_late': currency.format(sum_late),
                 'has_sequence_holes': journal.has_sequence_holes,
+                'title_has_sequence_holes': title_has_sequence_holes,
                 'is_sample_data': dashboard_data[journal.id]['entries_count'],
             })
 
@@ -833,6 +838,7 @@ class account_journal(models.Model):
             'type': 'ir.actions.act_window',
             'name': _("Journal Entries"),
             'res_model': 'account.move',
+            'search_view_id': (self.env.ref('account.view_account_move_with_gaps_in_sequence_filter').id, 'search'),
             'view_mode': 'list,form',
             'domain': expression.OR(
                 [('journal_id', '=', journal_id), ('sequence_prefix', '=', prefix)]
@@ -841,6 +847,7 @@ class account_journal(models.Model):
             'context': {
                 **self._get_move_action_context(),
                 'search_default_group_by_sequence_prefix': 1,
+                'search_default_irregular_sequences': 1,
                 'expand': 1,
             }
         }

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -245,7 +245,7 @@ class AccountMove(models.Model):
         compute='_compute_suitable_journal_ids',
     )
     highest_name = fields.Char(compute='_compute_highest_name')
-    made_sequence_hole = fields.Boolean(compute='_compute_made_sequence_hole')
+    made_sequence_hole = fields.Boolean(compute='_compute_made_sequence_hole', search="_search_made_sequence_hole")
     show_name_warning = fields.Boolean(store=False)
     type_name = fields.Char('Type Name', compute='_compute_type_name')
     country_code = fields.Char(related='company_id.account_fiscal_country_id.code', readonly=True)
@@ -780,26 +780,34 @@ class AccountMove(models.Model):
         for record in self:
             record.highest_name = record._get_last_sequence()
 
+    @api.model
+    def _get_query_made_hole(self, ids=None):
+        return f"""
+                SELECT this.id
+                  FROM account_move this
+                  JOIN res_company company ON company.id = this.company_id
+             LEFT JOIN account_move other ON this.journal_id = other.journal_id
+                                         AND this.sequence_prefix = other.sequence_prefix
+                                         AND this.sequence_number = other.sequence_number + 1
+                 WHERE other.id IS NULL
+                   AND this.sequence_number != 1
+                   AND this.name != '/'
+                  {"AND this.id = ANY(%(move_ids)s)" if ids is not None else ""}
+        """, {'move_ids': ids} if ids is not None else {}
+
     @api.depends('name', 'journal_id')
     def _compute_made_sequence_hole(self):
-        self.env.cr.execute("""
-            SELECT this.id
-              FROM account_move this
-              JOIN res_company company ON company.id = this.company_id
-         LEFT JOIN account_move other ON this.journal_id = other.journal_id
-                                     AND this.sequence_prefix = other.sequence_prefix
-                                     AND this.sequence_number = other.sequence_number + 1
-             WHERE other.id IS NULL
-               AND this.sequence_number != 1
-               AND this.name != '/'
-               AND this.id = ANY(%(move_ids)s)
-        """, {
-            'move_ids': self.ids,
-        })
+        query, params = self._get_query_made_hole(self.ids)
+        self.env.cr.execute(query, params)
         made_sequence_hole = set(r[0] for r in self.env.cr.fetchall())
         for move in self:
             move.made_sequence_hole = move.id in made_sequence_hole
 
+    def _search_made_sequence_hole(self, operator, value):
+        query, params = self._get_query_made_hole()
+        operator = 'inselect' if (operator == '=') ^ (value is False) else 'not inselect'
+        return [('id', operator, (query, params))]
+
     @api.depends('move_type')
     def _compute_type_name(self):
         type_name_mapping = dict(
