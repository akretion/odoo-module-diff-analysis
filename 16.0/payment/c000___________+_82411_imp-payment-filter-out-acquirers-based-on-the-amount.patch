PR: https://github.com/odoo/odoo/pull/82411

From: c1aa010af74662e5861cb7221d5221e00256e630
From: Horacio Tellez
Date: 2022-07-26 11:24:57

Breaking data model changes score: 3, change matches:
-    country_ids = fields.Many2many(
+    available_country_ids = fields.Many2many(

Total Changes: 51

[IMP] payment: filter out acquirers based on the amount

This commit adds the possibility to define a maximum payment amount that
a given acquirer can process. If the payment amount exceeds the value,
the acquirer is filtered out of the available acquirers listed on the
payment forms.

While we're at it, the field `country_ids` is renamed to
`available_country_ids` to better depict that it is not a property of
the acquirer, but a configuration option. It will also be coherent with
the field `available_currency_ids` that is expected to be added soon.

Task - 2162165

closes odoo/odoo#82411

Related: odoo/enterprise#24412
Related: odoo/upgrade#3703
Signed-off-by: Antoine Vandevenne (anv) <anv@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment/models/payment_acquirer.py
+++ b/addons/payment/models/payment_acquirer.py
@@ -39,6 +39,10 @@ class PaymentAcquirer(models.Model):
     company_id = fields.Many2one(  # Indexed to speed-up ORM searches (from ir_rule or others)
         string="Company", comodel_name='res.company', default=lambda self: self.env.company.id,
         required=True, index=True)
+    main_currency_id = fields.Many2one(
+        related='company_id.currency_id',
+        help="The main currency of the company, used to display monetary fields.",
+    )
     payment_icon_ids = fields.Many2many(
         string="Supported Payment Icons", comodel_name='payment.icon')
     allow_tokenization = fields.Boolean(
@@ -65,17 +69,29 @@ class PaymentAcquirer(models.Model):
         help="The template rendering the inline payment form when making a payment by token.",
         domain=[('type', '=', 'qweb')],
     )
-    country_ids = fields.Many2many(
-        string="Countries", comodel_name='res.country', relation='payment_country_rel',
-        column1='payment_id', column2='country_id',
-        help="The countries for which this payment acquirer is available.\n"
-             "If none is set, it is available for all countries.")
     journal_id = fields.Many2one(
         string="Payment Journal", comodel_name='account.journal',
         compute='_compute_journal_id', inverse='_inverse_journal_id',
         help="The journal in which the successful transactions are posted",
         domain="[('type', '=', 'bank'), ('company_id', '=', company_id)]")
 
+    # Availability fields.
+    available_country_ids = fields.Many2many(
+        string="Countries",
+        comodel_name='res.country',
+        help="The countries in which this payment acquirer is available. Leave blank to make it "
+             "available in all countries.",
+        relation='payment_country_rel',
+        column1='payment_id',
+        column2='country_id',
+    )
+    maximum_amount = fields.Monetary(
+        string="Maximum Amount",
+        help="The maximum payment amount that this payment acquirer is available for. Leave blank "
+             "to make it available for any payment amount.",
+        currency_field='main_currency_id',
+    )
+
     # Fees fields
     fees_active = fields.Boolean(string="Add Extra Fees")
     fees_dom_fixed = fields.Float(string="Fixed domestic fees")
@@ -376,7 +392,7 @@ class PaymentAcquirer(models.Model):
 
     @api.model
     def _get_compatible_acquirers(
-        self, company_id, partner_id, currency_id=None, force_tokenization=False,
+        self, company_id, partner_id, amount, currency_id=None, force_tokenization=False,
         is_validation=False, **kwargs
     ):
         """ Select and return the acquirers matching the criteria.
@@ -386,6 +402,7 @@ class PaymentAcquirer(models.Model):
 
         :param int company_id: The company to which acquirers must belong, as a `res.company` id
         :param int partner_id: The partner making the payment, as a `res.partner` id
+        :param float amount: The amount to pay, `0` for validation transactions.
         :param int currency_id: The payment currency if known beforehand, as a `res.currency` id
         :param bool force_tokenization: Whether only acquirers allowing tokenization can be matched
         :param bool is_validation: Whether the operation is a validation
@@ -404,8 +421,26 @@ class PaymentAcquirer(models.Model):
         partner = self.env['res.partner'].browse(partner_id)
         if partner.country_id:  # The partner country must either not be set or be supported
             domain = expression.AND([
-                domain,
-                ['|', ('country_ids', '=', False), ('country_ids', 'in', [partner.country_id.id])]
+                domain, [
+                    '|',
+                    ('available_country_ids', '=', False),
+                    ('available_country_ids', 'in', [partner.country_id.id]),
+                ]
+            ])
+
+        # Handle the maximum amount.
+        currency = self.env['res.currency'].browse(currency_id).exists()
+        if not is_validation and currency:  # The currency is required to convert the amount.
+            company = self.env['res.company'].browse(company_id).exists()
+            date = fields.Date.context_today(self)
+            converted_amount = currency._convert(amount, company.currency_id, company, date)
+            domain = expression.AND([
+                domain, [
+                    '|', '|',
+                    ('maximum_amount', '>=', converted_amount),
+                    ('maximum_amount', '=', False),
+                    ('maximum_amount', '=', 0.),
+                ]
             ])
 
         # Handle tokenization support requirements
