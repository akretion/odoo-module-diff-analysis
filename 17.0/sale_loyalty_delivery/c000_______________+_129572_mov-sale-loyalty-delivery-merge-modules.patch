PR: https://github.com/odoo/odoo/pull/129572

From: 4396f171ef14513c8d2000fd141c76e9e052db3d
From: Victor Feyens
Date: 2023-08-03 17:31:14

Structural Changes: 3
Total Changes: 72

[MOV] (_ => sale_)loyalty_delivery: merge modules

There is no need to have two bridges linking delivery & loyalty.
The two modules held the two parts of the same logic, making no
sense to keep the two modules separate.

Task-3420579

Part-of: odoo/odoo#129572

================================= pseudo patch: =================================

--- a/addons/sale_loyalty_delivery/models/__init__.py
+++ b/addons/sale_loyalty_delivery/models/__init__.py
@@ -1,5 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from . import loyalty_program
+from . import loyalty_reward
 from . import sale_order
 from . import sale_order_line

--- a/None
+++ b/addons/sale_loyalty_delivery/models/loyalty_program.py
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import _, api, models
+
+
+class LoyaltyProgram(models.Model):
+    _inherit = 'loyalty.program'
+
+    @api.model
+    def _program_type_default_values(self):
+        res = super()._program_type_default_values()
+        # Add a loyalty reward for free shipping
+        if 'loyalty' in res:
+            res['loyalty']['reward_ids'].append((0, 0, {
+                'reward_type': 'shipping',
+                'required_points': 100,
+            }))
+        return res
+
+    @api.model
+    def get_program_templates(self):
+        # Override 'promotion' template to say free shipping
+        res = super().get_program_templates()
+        if 'promotion' in res:
+            res['promotion']['description'] = _("Automatic promotion: free shipping on orders higher than $50")
+        return res
+
+    @api.model
+    def _get_template_values(self):
+        res = super()._get_template_values()
+        if 'promotion' in res:
+            res['promotion']['reward_ids'] = [(5, 0, 0), (0, 0, {
+                'reward_type': 'shipping',
+            })]
+        return res

--- a/None
+++ b/addons/sale_loyalty_delivery/models/loyalty_reward.py
@@ -0,0 +1,24 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import _, fields, models
+
+
+class LoyaltyReward(models.Model):
+    _inherit = 'loyalty.reward'
+
+    reward_type = fields.Selection(
+        selection_add=[('shipping', 'Free Shipping')],
+        ondelete={'shipping': 'set default'})
+
+    def _compute_description(self):
+        shipping_rewards = self.filtered(lambda r: r.reward_type == 'shipping')
+        super(LoyaltyReward, self - shipping_rewards)._compute_description()
+        shipping_rewards.description = _('Free shipping')
+        for reward in shipping_rewards:
+            if reward.discount_max_amount:
+                format_string = '%(amount)g %(symbol)s'
+                if reward.currency_id.position == 'before':
+                    format_string = '%(symbol)s %(amount)g'
+                formatted_amount = format_string % {'amount': reward.discount_max_amount, 'symbol': reward.currency_id.symbol}
+                reward.description += _(' (Max %s)', formatted_amount)

--- a/addons/sale_loyalty_delivery/models/sale_order.py
+++ b/addons/sale_loyalty_delivery/models/sale_order.py
@@ -4,9 +4,19 @@
 from odoo import _, models
 from odoo.fields import Command
 
+
 class SaleOrder(models.Model):
     _inherit = 'sale.order'
 
+    # delivery overrides
+
+    def _compute_amount_total_without_delivery(self):
+        self.ensure_one()
+        lines = self.order_line.filtered(lambda l: l.coupon_id and l.coupon_id.program_type in ['ewallet', 'gift_card'])
+        return super()._compute_amount_total_without_delivery() - sum(lines.mapped('price_unit'))
+
+    # sale_loyalty overrides
+
     def _get_no_effect_on_threshold_lines(self):
         self.ensure_one()
         lines = self.order_line.filtered(lambda line:\
