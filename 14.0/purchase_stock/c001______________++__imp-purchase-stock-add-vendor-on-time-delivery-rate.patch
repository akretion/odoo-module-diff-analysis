PR: https://github.com/odoo/odoo/pull/

From: d83334ef8ee566e56ad8b25264d66704120ba598
From: yhu-odoo
Date: 2020-05-27 07:41:43

Structural Changes: 4
Total Changes: 38

[IMP] purchase_stock: add vendor on-time delivery rate

Add on-time delivery rate to vendor. When editing a PO, user can see
the overall on-time delivery rate during the last 365 days next to the
vendor. When click it, user will be redirect to a graph view showing
the detail of the on-time delivery rate of this vendor. Also add a stat
button to show the on-time delivery rate on partner form.

Task: 2230811
PR: #49921

================================= pseudo patch: =================================

--- a/addons/purchase_stock/models/__init__.py
+++ b/addons/purchase_stock/models/__init__.py
@@ -6,5 +6,6 @@ from . import product
 from . import purchase
 from . import res_company
 from . import res_config_settings
+from . import res_partner
 from . import stock
 from . import stock_rule

--- a/addons/purchase_stock/models/purchase.py
+++ b/addons/purchase_stock/models/purchase.py
@@ -29,6 +29,7 @@ class PurchaseOrder(models.Model):
     is_shipped = fields.Boolean(compute="_compute_is_shipped")
     effective_date = fields.Datetime("Effective Date", compute='_compute_effective_date', store=True, copy=False,
         help="Completion date of the first receipt order.")
+    on_time_rate = fields.Float(related='partner_id.on_time_rate')
 
     @api.depends('order_line.move_ids.returned_move_ids',
                  'order_line.move_ids.state',

--- a/None
+++ b/addons/purchase_stock/models/res_partner.py
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from datetime import timedelta
+
+from odoo import api, fields, models
+
+
+class ResPartner(models.Model):
+    _inherit = 'res.partner'
+
+    purchase_line_ids = fields.One2many('purchase.order.line', 'partner_id', string="Purchase Lines")
+    on_time_rate = fields.Float(
+        "On-Time Delivery Rate", compute='_compute_on_time_rate',
+        help="Over the past 12 months, number of products received on time / total number of ordered products.")
+
+    @api.depends('purchase_line_ids')
+    def _compute_on_time_rate(self):
+        order_lines = self.env['purchase.order.line'].search([
+            ('partner_id', 'in', self.ids),
+            ('date_order', '>', fields.Date.today() - timedelta(365)),
+            ('qty_received', '!=', 0),
+        ]).filtered(lambda l: l.product_id.product_tmpl_id.type != 'service' and l.order_id.state in ['done', 'purchase'])
+        partner_dict = {}
+        for line in order_lines:
+            on_time, ordered = partner_dict.get(line.partner_id, (0, 0))
+            ordered += line.product_uom_qty
+            on_time += sum(line.mapped('move_ids').filtered(lambda m: m.state == 'done' and m.date <= m.purchase_line_id.date_planned).mapped('quantity_done'))
+            partner_dict[line.partner_id] = (on_time, ordered)
+        seen_partner = self.env['res.partner']
+        for partner, numbers in partner_dict.items():
+            seen_partner |= partner
+            on_time, ordered = numbers
+            partner.on_time_rate = on_time / ordered * 100 if ordered else 100
+        (self - seen_partner).on_time_rate = 100
+
