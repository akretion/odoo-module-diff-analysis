PR: https://github.com/odoo/odoo/pull/33863

From: ed18095127b20da516fa5ada943b2dd6d5c84652
From: Julien Mougenot
Date: 2019-07-29 08:29:26

Structural Changes: 23
Total Changes: 722

[IMP] base: Configure document layout

The onboarding modal for setting up the few base fields of a company
has now been moved to a wizard
It is accessible from the general settings, but also in the onboarding
section of sale and account modules.

The following company settings are editable with that wizard:

- Set report **layout**:
The user can chose the overall look of the report. The current choices
are : *Standard* (default), *Background*, *Boxed* and *Clean*.

- Set company **logo**:
Changes the company logo.

- Set report **colors**:
The user can set the primary and secondary colors of the report through
a newly added widget allowing to pick a custom color.
When changing the **logo**, colors are automatically set to its most dominant
colors.
> A "Reset colors" button also triggers the color calculation.

- Set report **font**:
Changes the overall font of the report. Only Google Fonts are used
for enhanced compatibility.

- Company **tagline**, also called "header"
- **Footer**
- **Paper format**
- Report **preview**:
A mockup of a final report
Automatically updates when changing **layout**, **logo**, **colors** or **font**

Co-authored by: Julien Mougenot <jum@odoo.com>

closes odoo/odoo#33863

Signed-off-by: VincentSchippefilt <VincentSchippefilt@users.noreply.github.com>


Co-authored-by: Lucas Perais <lpe@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/__manifest__.py
+++ b/odoo/addons/base/__manifest__.py
@@ -58,6 +58,7 @@ The kernel of Odoo, needed for all installation.
         'wizard/base_export_language_views.xml',
         'wizard/base_update_translations_views.xml',
         'wizard/base_partner_merge_views.xml',
+        'wizard/base_document_layout_views.xml',
         'data/ir_actions_data.xml',
         'data/ir_demo_failure_data.xml',
         'views/res_company_views.xml',

--- a/odoo/addons/base/data/res_company_data.xml
+++ b/odoo/addons/base/data/res_company_data.xml
@@ -8,8 +8,18 @@
             <field name="favicon" model="res.company" eval="obj()._get_default_favicon(original=True)"/>
         </record>
 
+        <record id="main_company_scss" model="ir.attachment">
+            <!-- Default data : -->
+            <!-- $o-company-font: 'Lato'; $o-company-primary-color: rgb(0, 0, 0); $o-company-secondary-color: rgb(0, 0, 0); -->
+            <field name="datas">JG8tY29tcGFueS1mb250OiAnTGF0byc7JG8tY29tcGFueS1wcmltYXJ5LWNvbG9yOiByZ2IoMCwgMCwgMCk7JG8tY29tcGFueS1zZWNvbmRhcnktY29sb3I6IHJnYigwLCAwLCAwKTs=</field>
+            <field name="mimetype">text/scss</field>
+            <field name="name">res.company.scss</field>
+            <field name="type">binary</field>
+            <field name="url">/web/static/src/scss/report_styles.scss</field>
+        </record>
+
         <record id="main_partner" model="res.partner">
             <field name="company_id" ref="main_company"/>
         </record>
-    </data>
+    </data> 
 </odoo>

--- a/odoo/addons/base/models/__init__.py
+++ b/odoo/addons/base/models/__init__.py
@@ -29,7 +29,7 @@ from . import ir_property
 from . import ir_module
 from . import ir_demo
 from . import ir_demo_failure
-
+from . import report_layout
 from . import report_paperformat
 
 from . import image_mixin

--- a/odoo/addons/base/models/ir_actions_report.py
+++ b/odoo/addons/base/models/ir_actions_report.py
@@ -791,18 +791,7 @@ class IrActionsReport(models.Model):
         """
         discard_logo_check = self.env.context.get('discard_logo_check')
         if self.env.is_admin() and ((not self.env.company.external_report_layout_id) or (not discard_logo_check and not self.env.company.logo)) and config:
-            template = self.env.ref('base.view_company_report_form_with_print') if self.env.context.get('from_transient_model', False) else self.env.ref('base.view_company_report_form')
-            return {
-                'name': _('Choose Your Document Layout'),
-                'type': 'ir.actions.act_window',
-                'context': {'default_report_name': self.report_name, 'discard_logo_check': True},
-                'view_mode': 'form',
-                'res_id': self.env.company.id,
-                'res_model': 'res.company',
-                'views': [(template.id, 'form')],
-                'view_id': template.id,
-                'target': 'new',
-            }
+            return self.env.ref('base.action_base_document_layout_configurator').read()[0]
 
         context = self.env.context
         if docids:

--- a/None
+++ b/odoo/addons/base/models/report_layout.py
@@ -0,0 +1,15 @@
+# -*- coding: ascii -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class ReportLayout(models.Model):
+    _name = "report.layout"
+    _description = 'Report Layout'
+
+    view_id = fields.Many2one('ir.ui.view', 'Document Template', required=True)
+    image = fields.Char(string="Preview image src")
+    pdf = fields.Char(string="Preview pdf src")
+
+    name = fields.Char()

--- a/odoo/addons/base/models/res_company.py
+++ b/odoo/addons/base/models/res_company.py
@@ -94,8 +94,9 @@ class Company(models.Model):
     base_onboarding_company_state = fields.Selection([
         ('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done")], string="State of the onboarding company step", default='not_done')
     favicon = fields.Binary(string="Company Favicon", help="This field holds the image used to display a favicon for a given company.", default=_get_default_favicon)
-
-
+    font = fields.Selection([("Lato", "Lato"), ("Roboto", "Roboto"), ("Open Sans", "Open Sans"), ("Montserrat", "Montserrat"), ("Oswald", "Oswald"), ("Raleway", "Raleway")], default="Lato")
+    primary_color = fields.Char()
+    secondary_color = fields.Char()
     _sql_constraints = [
         ('name_uniq', 'unique (name)', 'The company name must be unique !')
     ]
@@ -309,3 +310,24 @@ class Company(models.Model):
             main_company = self.env['res.company'].sudo().search([], limit=1, order="id")
 
         return main_company
+
+    def update_scss(self):
+        """ update the company scss stylesheet """
+        scss_properties = []
+        if self.primary_color:
+            scss_properties.append('$o-company-primary-color:%s;' % self.primary_color)
+        if self.secondary_color:
+            scss_properties.append('$o-company-secondary-color:%s;' % self.secondary_color)
+        if self.font:
+            scss_properties.append('$o-company-font:%s;' % self.font)
+        scss_string = '\n'.join(scss_properties)
+
+        if not len(scss_string):
+            scss_string = ""
+
+        scss_data = base64.b64encode((scss_string).encode('utf-8'))
+
+        attachment = self.env['ir.attachment'].search([('name', '=', 'res.company.scss')])
+        attachment.write({'datas': scss_data})
+
+        return ''

--- a/odoo/addons/base/security/ir.model.access.csv
+++ b/odoo/addons/base/security/ir.model.access.csv
@@ -96,3 +96,4 @@
 "access_ir_logging","ir_logging admin","model_ir_logging","group_erp_manager",1,1,1,1
 "paperformat_access_portal","ir_actions_report_paperformat group_portal","model_report_paperformat",,1,0,0,0
 "paperformat_access_employee","ir_actions_report_paperformat group_system","model_report_paperformat",group_system,1,1,1,1
+"access_report_layout","access_report_layout","model_report_layout",,1,1,1,1

--- a/odoo/addons/base/tests/__init__.py
+++ b/odoo/addons/base/tests/__init__.py
@@ -38,3 +38,4 @@ from . import test_res_partner_bank
 from . import test_reports
 from . import test_tests_tags
 from . import test_non_regression
+from . import test_base_document_layout

--- a/odoo/addons/base/tests/fire_small.jpeg
+++ b/odoo/addons/base/tests/fire_small.jpeg
Binary files /dev/null and b/odoo/addons/base/tests/fire_small.jpeg differ

--- a/odoo/addons/base/tests/odoo.jpg
+++ b/odoo/addons/base/tests/odoo.jpg
Binary files /dev/null and b/odoo/addons/base/tests/odoo.jpg differ

--- a/odoo/addons/base/tests/overwatch.jpg
+++ b/odoo/addons/base/tests/overwatch.jpg
Binary files /dev/null and b/odoo/addons/base/tests/overwatch.jpg differ

--- a/None
+++ b/odoo/addons/base/tests/test_base_document_layout.py
@@ -0,0 +1,206 @@
+import os
+from PIL import Image
+from functools import partial
+
+from odoo.tests import TransactionCase, tagged, Form
+from odoo.tools import frozendict, image_to_base64, hex_to_rgb
+
+
+dir_path = os.path.dirname(os.path.realpath(__file__))
+_file_cache = {}
+
+
+class TestBaseDocumentLayoutHelpers(TransactionCase):
+    #
+    #   Public
+    #
+    def setUp(self):
+        super(TestBaseDocumentLayoutHelpers, self).setUp()
+        self.color_fields = ['primary_color', 'secondary_color']
+        self.company = self.env.company
+        self.css_color_error = 0
+        self._set_templates_and_layouts()
+        self._set_images()
+
+    def assertColors(self, checked_obj, expected):
+        _expected_getter = expected.get if isinstance(expected, dict) else partial(getattr, expected)
+        for fname in self.color_fields:
+            color1 = getattr(checked_obj, fname)
+            color2 = _expected_getter(fname)
+            if self.css_color_error:
+                self._compare_colors_rgb(color1, color2)
+            else:
+                self.assertEqual(color1, color2)
+
+    #
+    #   Private
+    #
+    def _compare_colors_rgb(self, color1, color2):
+        self.assertEqual(bool(color1), bool(color2))
+        if not color1:
+            return
+        color1 = hex_to_rgb(color1)
+        color2 = hex_to_rgb(color2)
+        self.assertEqual(len(color1), len(color2))
+        for i in range(len(color1)):
+            self.assertAlmostEqual(color1[i], color2[i], delta=self.css_color_error)
+
+    def _get_images_for_test(self):
+        return ['overwatch.jpg', 'odoo.jpg']
+
+    def _set_images(self):
+        for fname in self._get_images_for_test():
+            fname_split = fname.split('.')
+            if not fname_split[0] in _file_cache:
+                with Image.open(os.path.join(dir_path, fname), 'r') as img:
+                    base64_img = image_to_base64(img, 'JPEG')
+                    primary, secondary = self.env['base.document.layout'].create(
+                        {})._parse_logo_colors(base64_img)
+                    _img = frozendict({
+                        'img': base64_img,
+                        'colors': {
+                            'primary_color': primary,
+                            'secondary_color': secondary,
+                        },
+                    })
+                    _file_cache[fname_split[0]] = _img
+        self.company_imgs = frozendict(_file_cache)
+
+    def _set_templates_and_layouts(self):
+        self.layout_template1 = self.env['ir.ui.view'].create({
+            'name': 'layout_template1',
+            'key': 'layout_template1',
+            'type': 'qweb',
+            'arch': '''<div></div>''',
+        })
+        self.env['ir.model.data'].create({
+            'name': self.layout_template1.name,
+            'model': 'ir.ui.view',
+            'module': 'base',
+            'res_id': self.layout_template1.id,
+        })
+        self.default_colors = {
+            'primary_color': '#000000',
+            'secondary_color': '#000000',
+        }
+        self.report_layout1 = self.env['report.layout'].create({
+            'view_id': self.layout_template1.id,
+            'name': 'report_%s' % self.layout_template1.name,
+        })
+        self.layout_template2 = self.env['ir.ui.view'].create({
+            'name': 'layout_template2',
+            'key': 'layout_template2',
+            'type': 'qweb',
+            'arch': '''<div></div>''',
+        })
+        self.env['ir.model.data'].create({
+            'name': self.layout_template2.name,
+            'model': 'ir.ui.view',
+            'module': 'base',
+            'res_id': self.layout_template2.id,
+        })
+        self.report_layout2 = self.env['report.layout'].create({
+            'view_id': self.layout_template2.id,
+            'name': 'report_%s' % self.layout_template2.name,
+        })
+
+
+@tagged('document_layout')
+class TestBaseDocumentLayout(TestBaseDocumentLayoutHelpers):
+    # Logo change Tests
+    def test_company_no_color_change_logo(self):
+        """When neither a logo nor the colors are set
+        The wizard displays the colors of the report layout
+        Changing logo means the colors on the wizard change too
+        Emptying the logo works and doesn't change the colors"""
+        self.company.write({
+            'primary_color': False,
+            'secondary_color': False,
+            'logo': False,
+            'external_report_layout_id': self.env.ref('base.layout_template1').id,
+        })
+        default_colors = self.default_colors
+        with Form(self.env['base.document.layout']) as doc_layout:
+            self.assertColors(doc_layout, default_colors)
+            self.assertEqual(doc_layout.company_id, self.company)
+            doc_layout.logo = self.company_imgs['overwatch']['img']
+
+            self.assertColors(doc_layout, self.company_imgs['overwatch']['colors'])
+
+            doc_layout.logo = ''
+            self.assertColors(doc_layout, self.company_imgs['overwatch']['colors'])
+            self.assertEqual(doc_layout.logo, '')
+
+    def test_company_no_color_but_logo_change_logo(self):
+        """When company colors are not set, but a logo is,
+        the wizard displays the computed colors from the logo"""
+        self.company.write({
+            'primary_color': '#ff0080',
+            'secondary_color': '#00ff00',
+            'logo': self.company_imgs['overwatch']['img'],
+        })
+
+        with Form(self.env['base.document.layout']) as doc_layout:
+            self.assertColors(doc_layout, self.company)
+            doc_layout.logo = self.company_imgs['odoo']['img']
+            self.assertColors(doc_layout, self.company_imgs['odoo']['colors'])
+
+    def test_company_colors_change_logo(self):
+        """changes of the logo implies displaying the new computed colors"""
+        self.company.write({
+            'primary_color': '#ff0080',
+            'secondary_color': '#00ff00',
+            'logo': False,
+        })
+
+        with Form(self.env['base.document.layout']) as doc_layout:
+            self.assertColors(doc_layout, self.company)
+            doc_layout.logo = self.company_imgs['odoo']['img']
+            self.assertColors(doc_layout, self.company_imgs['odoo']['colors'])
+
+    def test_company_colors_and_logo_change_logo(self):
+        """The colors of the company may differ from the one the logo computes
+        Opening the wizard in these condition displays the company's colors
+        When the logo changes, colors must change according to the logo"""
+        self.company.write({
+            'primary_color': '#ff0080',
+            'secondary_color': '#00ff00',
+            'logo': self.company_imgs['overwatch']['img'],
+        })
+
+        with Form(self.env['base.document.layout']) as doc_layout:
+            self.assertColors(doc_layout, self.company)
+            doc_layout.logo = self.company_imgs['odoo']['img']
+            self.assertColors(doc_layout, self.company_imgs['odoo']['colors'])
+
+    # Layout change tests
+    def test_company_colors_reset_colors(self):
+        """Reset the colors when they differ from the ones originally
+        computed from the company logo"""
+        self.company.write({
+            'primary_color': '#ff0080',
+            'secondary_color': '#00ff00',
+            'logo': self.company_imgs['overwatch']['img'],
+        })
+
+        with Form(self.env['base.document.layout']) as doc_layout:
+            self.assertColors(doc_layout, self.company)
+            doc_layout.custom_colors = False
+            self.assertColors(doc_layout, self.company_imgs['overwatch']['colors'])
+
+    # /!\ This case is NOT supported, and probably not supportable
+    # res.partner resizes manu-militari the image it is given
+    # so res.company._get_logo differs from res.partner.[default image]
+    # def test_company_no_colors_default_logo_and_layout_change_layout(self):
+    #     """When the default YourCompany logo is set, and no colors are set on company:
+    #     change wizard's color according to template"""
+    #     self.company.write({
+    #         'primary_color': False,
+    #         'secondary_color': False,
+    #         'external_report_layout_id': self.layout_template1.id,
+    #     })
+    #     default_colors = self.default_colors
+    #     with Form(self.env['base.document.layout']) as doc_layout:
+    #         self.assertColors(doc_layout, default_colors)
+    #         doc_layout.report_layout_id = self.report_layout2
+    #         self.assertColors(doc_layout, self.report_layout2)

--- a/odoo/addons/base/tests/tommy_small.jpeg
+++ b/odoo/addons/base/tests/tommy_small.jpeg
Binary files /dev/null and b/odoo/addons/base/tests/tommy_small.jpeg differ

--- a/odoo/addons/base/views/res_company_views.xml
+++ b/odoo/addons/base/views/res_company_views.xml
@@ -115,86 +115,5 @@
             </field>
         </record>
         <menuitem action="action_res_company_form" id="menu_action_res_company_form" parent="base.menu_users"/>
-
-        <record id="view_company_report_form" model="ir.ui.view">
-            <field name="name">res.company.report.form</field>
-            <field name="model">res.company</field>
-            <field name="inherit_id" ref="base.view_company_form" />
-            <field name="mode">primary</field>
-            <field name="priority">1024</field>
-            <field name="arch" type="xml">
-                <field name="logo" position="before">
-                    <div class="row">
-                        <div class="alert alert-warning ml8 mr8" role="status" attrs="{'invisible': [('logo','!=',False)]}">
-                            Update your company details and upload your logo to get a beautiful document.
-                        </div>
-                    </div>
-                </field>
-              <xpath expr="//h1" position="replace">
-                <h2>
-                    <field name="name"/>
-                </h2>
-              </xpath>
-              <field name="parent_id" position="replace"/>
-              <xpath expr="//sheet" position="inside">
-                    <hr />
-                    <div class="row mt16">
-                        <field style="margin-right: 40px;" name="external_report_layout_id" widget="report_layout" options="{
-                            'field_image': 'preview_image',
-                            'field_binary': 'preview_pdf'
-                        }"/>
-                    </div>
-                    <footer>
-                        <button string="Save" type="object" class="oe_highlight" special="save"/>
-                        <button string="Cancel" class="oe_link" special="cancel" />
-                    </footer>
-                </xpath>
-            </field>
-        </record>
-
-    <record id="view_company_report_form_with_print" model="ir.ui.view">
-            <field name="name">res.company.report.form.with.print</field>
-            <field name="model">res.company</field>
-            <field name="mode">primary</field>
-            <field name="inherit_id" ref="base.view_company_report_form" />
-            <field name="priority">1024</field>
-            <field name="arch" type="xml">
-                <xpath expr="//button[@special='save']" position="before" >
-                    <button string="Save and Print" type="object" class="oe_highlight" name="write_company_and_print_report"/>
-                </xpath>
-            </field>
-        </record>
-        <record id="view_company_document_template_form" model="ir.ui.view">
-            <field name="name">res.company.document.template.form</field>
-            <field name="model">res.company</field>
-            <field name="mode">primary</field>
-            <field name="priority">2048</field>
-            <field name="arch" type="xml">
-                <form class="o_company_document_layout">
-                    <group>
-                        <label for="external_report_layout_id" string="Template" colspan="2" />
-                        <field name="external_report_layout_id" colspan="2" nolabel="1"
-                                class="report_layout_container"
-                                widget="report_layout" options="{
-                                    'field_image': 'preview_image',
-                                    'field_binary': 'preview_pdf'
-                                }"/>
-                    </group>
-                    <group>
-                        <field name="logo" widget="image" style="width: 50%"/>
-                        <field name="report_header"  widget="char"
-                            placeholder="e.g. Global Business Solutions" />
-                        <field name="report_footer" string="Footer"
-                            placeholder="e.g. Bank accounts (one per line)" />
-                        <field name="paperformat_id" widget="selection" required="1"/>
-                    </group>
-                    <footer>
-                        <button special="save" string="Save"
-                                class="btn btn-primary" type="object" />
-                        <button special="cancel" string="Cancel" />
-                    </footer>
-                </form>
-            </field>
-        </record>
     </data>
 </odoo>

--- a/odoo/addons/base/wizard/__init__.py
+++ b/odoo/addons/base/wizard/__init__.py
@@ -9,3 +9,4 @@ from . import base_module_uninstall
 from . import base_export_language
 from . import base_update_translations
 from . import base_partner_merge
+from . import base_document_layout

--- a/None
+++ b/odoo/addons/base/wizard/base_document_layout.py
@@ -0,0 +1,194 @@
+# -*- coding: utf-8 -*-
+
+from odoo import api, fields, models, tools
+
+DEFAULT_PRIMARY = '#000000'
+DEFAULT_SECONDARY = '#000000'
+
+
+class BaseDocumentLayout(models.TransientModel):
+    """
+    Customise the company document layout and display a live preview
+    """
+
+    _name = 'base.document.layout'
+    _description = 'Company Document Layout'
+
+    company_id = fields.Many2one(
+        'res.company', default=lambda self: self.env.company, required=True)
+
+    logo = fields.Binary(related='company_id.logo', readonly=False)
+    preview_logo = fields.Binary(related='logo', string="Preview logo")
+    report_header = fields.Text(related='company_id.report_header', readonly=False)
+    report_footer = fields.Text(related='company_id.report_footer', readonly=False)
+    paperformat_id = fields.Many2one(related='company_id.paperformat_id', readonly=False)
+    external_report_layout_id = fields.Many2one(related='company_id.external_report_layout_id', readonly=False)
+
+    font = fields.Selection(related='company_id.font', readonly=False)
+    primary_color = fields.Char(related='company_id.primary_color', readonly=False)
+    secondary_color = fields.Char(related='company_id.secondary_color', readonly=False)
+
+    custom_colors = fields.Boolean(compute="_compute_custom_colors", readonly=False)
+    logo_primary_color = fields.Char()
+    logo_secondary_color = fields.Char()
+
+    report_layout_id = fields.Many2one('report.layout', compute="_compute_report_layout_id", readonly=False)
+    preview = fields.Html(compute='_compute_preview')
+
+    @api.depends('company_id')
+    def _compute_report_layout_id(self):
+        default_report_layout = self.env['report.layout']
+        for wizard in self:
+            wizard_layout = wizard.env["report.layout"].search([
+                ('view_id.key', '=', wizard.company_id.external_report_layout_id.key)
+            ])
+            if not wizard_layout:
+                default_report_layout = default_report_layout or default_report_layout.search([
+                ], limit=1)
+                wizard_layout = default_report_layout
+            wizard.report_layout_id = wizard_layout
+
+            if wizard.logo:
+                wizard_for_image = wizard
+                if wizard._context.get('bin_size'):
+                    wizard_for_image = wizard.with_context(bin_size=False)
+                wizard.logo_primary_color, wizard.logo_secondary_color = wizard_for_image._parse_logo_colors()
+            if not wizard.primary_color:
+                wizard.primary_color = wizard.logo_primary_color or DEFAULT_PRIMARY
+            if not wizard.secondary_color:
+                wizard.secondary_color = wizard.logo_secondary_color or DEFAULT_SECONDARY
+
+    @api.depends('logo', 'font')
+    def _compute_preview(self):
+        """ compute a qweb based preview to display on the wizard """
+        for wizard in self:
+            ir_qweb = wizard.env['ir.qweb']
+            wizard.preview = ir_qweb.render('base.layout_preview', {
+                'company': wizard,
+            })
+
+    @api.depends('primary_color', 'secondary_color')
+    def _compute_custom_colors(self):
+        for wizard in self:
+            logo_primary = wizard.logo_primary_color or ''
+            logo_secondary = wizard.logo_secondary_color or ''
+            # Force lower case on color to ensure that FF01AA == ff01aa
+            wizard.custom_colors = wizard.logo and wizard.primary_color and wizard.secondary_color and not(
+                wizard.primary_color.lower() == logo_primary.lower() and
+                wizard.secondary_color.lower() == logo_secondary.lower())
+
+    @api.onchange('custom_colors')
+    def onchange_custom_colors(self):
+        for wizard in self:
+            if wizard.logo and not wizard.custom_colors:
+                wizard.primary_color = wizard.logo_primary_color or DEFAULT_PRIMARY
+                wizard.secondary_color = wizard.logo_secondary_color or DEFAULT_SECONDARY
+                
+    @api.onchange('primary_color', 'secondary_color')
+    def onchange_company_colors(self):
+        for wizard in self:
+            wizard._compute_custom_colors()
+            wizard._compute_preview()
+
+    def _parse_logo_colors(self, logo=None, white_threshold=225):
+        """
+        Identifies dominant colors
+
+        First resizes the original image to improve performance, then discards
+        transparent colors and white-ish colors, then calls the averaging
+        method twice to evaluate both primary and secondary colors.
+
+        :param logo: alternate logo to process
+        :param white_threshold: arbitrary value defining the maximum value a color can reach
+
+        :return colors: hex values of primary and secondary colors
+        """
+        self.ensure_one()
+        logo = logo or self.logo
+        if not logo:
+            return False, False
+
+        # The "===" gives different base64 encoding a correct padding
+        logo += b'===' if type(logo) == bytes else '==='
+        try:
+            # Catches exceptions caused by logo not being an image
+            image = tools.base64_to_image(logo)
+        except:
+            return False, False
+
+        base_w, base_h = image.size
+        w = int(50 * base_w / base_h)
+        h = 50
+
+        # Converts to RGBA if no alpha detected
+        image_converted = image.convert(
+            'RGBA') if 'A' not in image.getbands() else image
+        image_resized = image_converted.resize((w, h))
+
+        colors = []
+        for color in image_resized.getcolors(w * h):
+            if not(color[1][0] > white_threshold and
+                   color[1][1] > white_threshold and
+                   color[1][2] > white_threshold) and color[1][3] > 0:
+                colors.append(color)
+
+        if not colors:  # May happen when the whole image is white
+            return False, False
+        primary, remaining = tools.average_dominant_color(colors)
+        secondary = tools.average_dominant_color(
+            remaining)[0] if len(remaining) > 0 else primary
+
+        # Lightness and saturation are calculated here.
+        # - If both colors have a similar lightness, the most colorful becomes primary
+        # - When the difference in lightness is too great, the brightest color becomes primary
+        l_primary = tools.get_lightness(primary)
+        l_secondary = tools.get_lightness(secondary)
+        if (l_primary < 0.2 and l_secondary < 0.2) or (l_primary >= 0.2 and l_secondary >= 0.2):
+            s_primary = tools.get_saturation(primary)
+            s_secondary = tools.get_saturation(secondary)
+            if s_primary < s_secondary:
+                primary, secondary = secondary, primary
+        elif l_secondary > l_primary:
+            primary, secondary = secondary, primary
+
+        return tools.rgb_to_hex(primary), tools.rgb_to_hex(secondary)
+
+    @api.onchange('report_layout_id')
+    def onchange_report_layout_id(self):
+        for wizard in self:
+            wizard.external_report_layout_id = wizard.report_layout_id.view_id
+            wizard._compute_preview()
+
+    @api.onchange('logo')
+    def onchange_logo(self):
+        for wizard in self:
+            # Trick to:
+            # - test the new logo is different from company's
+            # - Avoid the cache miss on company.logo to erase the new logo
+            # It is admitted that if the user puts the original image back, it won't change colors
+            logo = wizard.logo
+            company = wizard.company_id
+            # at that point wizard.logo has been assigned the value present in DB
+            logo_same = company.logo == logo
+            wizard.logo = logo
+            if not logo:
+                wizard.logo_primary_color, wizard.logo_secondary_color = False, False
+                wizard._compute_custom_colors()
+            if logo_same and company.primary_color and company.secondary_color:
+                continue
+
+            wizard.logo_primary_color, wizard.logo_secondary_color = wizard._parse_logo_colors()
+            if wizard.logo_primary_color:
+                wizard.primary_color = wizard.logo_primary_color
+            if wizard.logo_secondary_color:
+                wizard.secondary_color = wizard.logo_secondary_color
+
+    @api.model
+    def action_open_base_document_layout(self, action_ref=None):
+        if not action_ref:
+            action_ref = 'base.action_base_document_layout_configurator'
+        return self.env.ref(action_ref).read()[0]
+
+    def document_layout_save(self):
+        # meant to be overriden
+        pass

--- a/None
+++ b/odoo/addons/base/wizard/base_document_layout_views.xml
@@ -0,0 +1,169 @@
+<?xml version="1.0" encoding="utf-8"?>
+<odoo>
+    <data>
+        <record id="view_base_document_layout" model="ir.ui.view">
+            <field name="name">Document Layout</field>
+            <field name="model">base.document.layout</field>
+            <field name="arch" type="xml">
+                <form class="o_document_layout">
+                    <group>
+                        <group class="o_document_layout_company">
+                            <field name="company_id" invisible="1"/>
+                            <field name="external_report_layout_id" invisible="1" />
+                            <field name="custom_colors" invisible="1" />
+                            <field name="logo_primary_color" invisible="1" />
+                            <field name="logo_secondary_color" invisible="1" />
+                            <field name="report_layout_id" widget="radio" string="Layout" class="mb-4" />
+                            <field name="logo" widget="image" class="mb-4" />
+                            <label for="primary_color" string="Colors" />
+                            <div class="o_document_layout_colors">
+                                <field name="primary_color" widget="color" class="mb-4" />
+                                <field name="secondary_color" widget="color" class="mb-4" />
+                                <button class="btn btn-link" title="Reset to logo colors">
+                                    <label for="custom_colors" class="fa fa-refresh mb-4" string="" />
+                                </button>
+                            </div>
+                            <field name="font" widget="font" class="mb-4" />
+                            <field name="report_header" widget="char" placeholder="e.g. Global Business Solutions" />
+                            <field name="report_footer" string="Footer" placeholder="e.g. Opening hours, bank accounts (one per line)" />
+                            <field name="paperformat_id" />
+                        </group>
+                        <div class="o_document_layout_preview">
+                            <field name="preview_logo" widget="image" readonly="1" nolabel="1" class="o_document_layout_preview_logo" />
+                            <field name="preview" widget="html" class="o_document_layout_preview_html" />
+                        </div>
+                    </group>
+                    <footer>
+                        <button string="Save" class="btn-primary" type="object" name="document_layout_save"/>
+                        <button special="cancel" string="Cancel" />
+                    </footer>
+                </form>
+            </field>
+        </record>
+
+        <record id="action_base_document_layout_configurator" model="ir.actions.act_window">
+            <field name="type">ir.actions.act_window</field>
+            <field name="name">Configure your document layout</field>
+            <field name="view_mode">form</field>
+            <field name="target">new</field>
+            <field name="res_model">base.document.layout</field>
+            <field name="view_id" ref="base.view_base_document_layout"/>
+        </record>
+
+    <!-- this template is used by the BaseDocumentLayout wizard to display a live preview of a dummy report -->
+    <template id="layout_preview" name="layout preview">
+        <!-- compute some layout specific variables -->
+        <t t-set="footer_color" t-value="'black'" />
+        <t t-set="table_border_color" t-value="'black'" />
+
+        <t t-if="company.report_layout_id.name == 'Background'"><t t-set="footer_color" t-value="company.secondary_color" /></t>
+        <t t-if="company.report_layout_id.name in ['Background', 'Clean']"><t t-set="table_border_color" t-value="company.secondary_color" /></t>
+        <t t-if="company.report_layout_id.name != 'Standard'"><t t-set="footer_border_color" t-value="company.secondary_color" /></t>
+
+        <div t-attf-class="page o_preview_layout o_preview_{{company.report_layout_id.name.lower()}}_layout" t-attf-style="font-family: {{company.font}};">
+            <div class="header">
+                <h2 t-attf-style="color: {{company.primary_color}}">Invoice INV/2019/0005</h2>
+                <div class="row o_layout_information">
+                    <div class="col-auto">
+                        <strong>
+                            <span t-attf-style="color: {{company.secondary_color}}">Invoice Date:</span>
+                        </strong>
+                        <p>02/05/2019</p>
+                    </div>
+                    <div class="col-auto">
+                        <strong>
+                            <span t-attf-style="color: {{company.secondary_color}}">Payment Terms:</span>
+                        </strong>
+                        <p>End of the month</p>
+                    </div>
+                    <div class="col-auto">
+                        <strong>
+                            <span t-attf-style="color: {{company.secondary_color}}">Source:</span>
+                        </strong>
+                        <p>SO022</p>
+                    </div>
+                </div>
+            </div>
+            <div class="article">
+                <table class="table table-sm" t-attf-style="border-color: {{table_border_color}}">
+                    <thead>
+                        <tr t-attf-style="color: {{company.secondary_color}}">
+                            <th>Description</th>
+                            <th>Quantity</th>
+                            <th>Unit Price</th>
+                            <th>Amount</th>
+                        </tr>
+                    </thead>
+                    <tbody>
+                        <tr>
+                            <td>[SKU001] Server</td>
+                            <td>2.000</td>
+                            <td>190.00</td>
+                            <!-- fallback to white when browser does not support RRGGBBAA notation -->
+                            <td t-if="company.report_layout_id.name == 'Boxed'" class="o_price_total"
+                                t-attf-style="background-color: white;background-color: {{company.secondary_color}}19;">$ 380.00</td>
+                            <td t-else="" class="o_price_total">$ 380.00</td>
+                        </tr>
+                        <tr>
+                            <td>[SKU002] Computer</td>
+                            <td>1.000</td>
+                            <td>1250.00</td>
+                            <!-- fallback to white when browser does not support RRGGBBAA notation -->
+                            <td t-if="company.report_layout_id.name == 'Boxed'" class="o_price_total"
+                                t-attf-style="background-color: white;background-color: {{company.secondary_color}}19;">$ 1250.00</td>
+                            <td t-else="" class="o_price_total">$ 1250.00</td>
+                        </tr>
+                    </tbody>
+                </table>
+                <div class="clearfix">
+                    <div class="row">
+                        <div t-attf-class="col-5 ml-auto">
+                            <table class="table table-sm"  t-attf-style="border-color: {{table_border_color}}">
+                                <tr class="o_subtotal">
+                                    <td>
+                                        <strong t-if="company.report_layout_id.name == 'Clean'" t-attf-style="color: {{company.secondary_color}}">Subtotal</strong>
+                                        <strong t-else="" t-attf-style="color: {{company.primary_color}}">Subtotal</strong>
+                                    </td>
+                                    <td>
+                                        <span>$ 1630.00</span>
+                                    </td>
+                                </tr>
+                                <tr class="o_total">
+                                    <t t-if="company.report_layout_id.name == 'Boxed'">
+                                        <!-- fallback to primary color when browser does not support RRGGBBAA notation -->
+                                        <td t-attf-style="background-color: {{company.primary_color}};background-color: {{company.primary_color}}D0;">
+                                            <strong>Total</strong>
+                                        </td>
+                                        <td t-attf-style="background-color: {{company.primary_color}};background-color: {{company.primary_color}}D0;">
+                                            <span>$ 1630.00</span>
+                                        </td>
+                                    </t>
+                                    <t t-else="">
+                                        <td>
+                                            <strong t-if="company.report_layout_id.name == 'Clean'" t-attf-style="color: {{company.secondary_color}}">Total</strong>
+                                            <strong t-else="" t-attf-style="color: {{company.primary_color}}">Total</strong>
+                                        </td>
+                                        <td>
+                                            <span>$ 1630.00</span>
+                                        </td>
+                                    </t>
+                                </tr>
+                            </table>
+                        </div>
+                    </div>
+                </div>
+            </div>
+            <div t-attf-class="footer" t-attf-style="color: {{footer_color}}; border-color: {{footer_border_color}}">
+                <div class="text-center">
+                    <ul class="list-inline mb4">
+                        <li class="list-inline-item">+1 (650) 691-3277</li>
+                        <li class="list-inline-item">info@example.com</li>
+                        <li class="list-inline-item">example.com</li>
+                    </ul>
+                </div>
+            </div>
+        </div>
+    </template>
+    </data>
+</odoo>
+
