PR: https://github.com/odoo/odoo/pull/82851

From: 6b8752604898bf2b583b7f5334e35f6a1583595e
From: Fabien Pinckaers
Date: 2022-01-22 11:51:42

Structural Changes: 10
Total Changes: 68

[IMP] Speed Imp: remove unnecessary base64 encode & decode

Avoid to base64 encode, then decode to process assets and images for a ~25% speed improvement.
Change image processing tool to work on images, rather than base64 encoded strings.

Performance is ~25% faster on assets & images:

  /web/assets/...frontend.min.css:    13ms to 7ms,  base64 enc/dec: 2 -> 0
  /web/image/XML_ID:                  10ms to 8ms,  base64 enc/dec: 3 -> 0
  /web/image/res.users/2/avatar_128:  40ms to 20ms, base64 enc/dec: 6 -> 2

closes odoo/odoo#82851

Related: odoo/enterprise#23537
Signed-off-by: Fabien Pinckaers <fp@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/avatar_mixin.py
+++ b/odoo/addons/base/models/avatar_mixin.py
@@ -25,11 +25,11 @@ class AvatarMixin(models.AbstractModel):
     _avatar_name_field = "name"
 
     # all image fields are base64 encoded and PIL-supported
-    avatar_1920 = fields.Image("Avatar", max_width=1920, max_height=1920, compute="_compute_avatar_1920")
-    avatar_1024 = fields.Image("Avatar 1024", max_width=1024, max_height=1024, compute="_compute_avatar_1024")
-    avatar_512 = fields.Image("Avatar 512", max_width=512, max_height=512, compute="_compute_avatar_512")
-    avatar_256 = fields.Image("Avatar 256", max_width=256, max_height=256, compute="_compute_avatar_256")
-    avatar_128 = fields.Image("Avatar 128", max_width=128, max_height=128, compute="_compute_avatar_128")
+    avatar_1920 = fields.Image("Avatar", compute="_compute_avatar_1920")
+    avatar_1024 = fields.Image("Avatar 1024", compute="_compute_avatar_1024")
+    avatar_512 = fields.Image("Avatar 512", compute="_compute_avatar_512")
+    avatar_256 = fields.Image("Avatar 256", compute="_compute_avatar_256")
+    avatar_128 = fields.Image("Avatar 128", compute="_compute_avatar_128")
 
     def _compute_avatar(self, avatar_field, image_field):
         for record in self:
@@ -38,7 +38,7 @@ class AvatarMixin(models.AbstractModel):
                 if record.id and record[record._avatar_name_field]:
                     avatar = record._avatar_generate_svg()
                 else:
-                    avatar = record._avatar_get_placeholder()
+                    avatar = b64encode(record._avatar_get_placeholder())
             record[avatar_field] = avatar
 
     @api.depends(lambda self: [self._avatar_name_field, 'image_1920'])
@@ -76,4 +76,4 @@ class AvatarMixin(models.AbstractModel):
         return "base/static/img/avatar_grey.png"
 
     def _avatar_get_placeholder(self):
-        return b64encode(file_open(self._avatar_get_placeholder_path(), 'rb').read())
+        return file_open(self._avatar_get_placeholder_path(), 'rb').read()

--- a/odoo/addons/base/models/ir_attachment.py
+++ b/odoo/addons/base/models/ir_attachment.py
@@ -316,13 +316,11 @@ class IrAttachment(models.Model):
                 try:
                     img = fn_quality = False
                     if is_raw:
-                        img = ImageProcess(False, verify_resolution=False)
-                        img.image = Image.open(io.BytesIO(values['raw']))
-                        img.original_format = (img.image.format or '').upper()
+                        img = ImageProcess(values['raw'], verify_resolution=False)
                         fn_quality = img.image_quality
                     else:  # datas
-                        img = ImageProcess(values['datas'], verify_resolution=False)
-                        fn_quality = img.image_quality_base64
+                        img = ImageProcess(base64.b64decode(values['datas']), verify_resolution=False)
+                        fn_quality = lambda **args: base64.b64encode(img.image_quality(**args))
 
                     w, h = img.image.size
                     nw, nh = map(int, max_resolution.split('x'))

--- a/odoo/addons/base/models/ir_http.py
+++ b/odoo/addons/base/models/ir_http.py
@@ -359,11 +359,11 @@ class IrHttp(models.AbstractModel):
                     module_resource_path = os.path.normpath(module_resource_path)
                     if module_resource_path.startswith(module_path):
                         with open(module_resource_path, 'rb') as f:
-                            content = base64.b64encode(f.read())
+                            content = f.read()
                         status = 200
                         filename = os.path.basename(module_resource_path)
-                        mimetype = guess_mimetype(base64.b64decode(content), default=default_mimetype)
-                        filehash = '"%s"' % hashlib.md5(pycompat.to_text(content).encode('utf-8')).hexdigest()
+                        mimetype = record.mimetype
+                        filehash = record.checksum
 
             if not content:
                 status = 301
@@ -372,7 +372,7 @@ class IrHttp(models.AbstractModel):
         return status, content, filename, mimetype, filehash
 
     def _binary_record_content(
-            self, record, field='datas', filename=None,
+            self, record, field='raw', filename=None,
             filename_field='name', default_mimetype='application/octet-stream'):
 
         model = record._name
@@ -383,18 +383,23 @@ class IrHttp(models.AbstractModel):
         field_def = record._fields[field]
         if field_def.type == 'binary' and field_def.attachment and not field_def.related:
             if model != 'ir.attachment':
-                field_attachment = self.env['ir.attachment'].sudo().search_read(domain=[('res_model', '=', model), ('res_id', '=', record.id), ('res_field', '=', field)], fields=['datas', 'mimetype', 'checksum'], limit=1)
+                field_attachment = self.env['ir.attachment'].sudo().search_read(domain=[('res_model', '=', model), ('res_id', '=', record.id), ('res_field', '=', field)], fields=['raw', 'mimetype', 'checksum'], limit=1)
                 if field_attachment:
                     mimetype = field_attachment[0]['mimetype']
-                    content = field_attachment[0]['datas']
+                    content = field_attachment[0]['raw']
                     filehash = field_attachment[0]['checksum']
             else:
                 mimetype = record['mimetype']
-                content = record['datas']
+                content = record['raw']
                 filehash = record['checksum']
 
         if not content:
-            content = record[field] or ''
+            if model == 'ir.attachment':
+                content = record.raw
+            else:
+                data = record[field] or b''
+                content = base64.b64decode(data)
+                filehash = '"%s"' % hashlib.md5(str(content).encode('utf-8')).hexdigest()
 
         # filename
         default_filename = False
@@ -406,11 +411,7 @@ class IrHttp(models.AbstractModel):
                 filename = "%s-%s-%s" % (record._name, record.id, field)
 
         if not mimetype:
-            try:
-                decoded_content = base64.b64decode(content)
-            except base64.binascii.Error:  # if we could not decode it, no need to pass it down: it would crash elsewhere...
-                return (404, [], None)
-            mimetype = guess_mimetype(decoded_content, default=default_mimetype)
+            mimetype = guess_mimetype(content, default=default_mimetype)
 
         # extension
         _, existing_extension = os.path.splitext(filename)
@@ -420,12 +421,12 @@ class IrHttp(models.AbstractModel):
                 filename = "%s%s" % (filename, extension)
 
         if not filehash:
-            filehash = '"%s"' % hashlib.md5(pycompat.to_text(content).encode('utf-8')).hexdigest()
+            filehash = '"%s"' % hashlib.md5(str(base64.b64encode(content)).encode('utf-8')).hexdigest()
 
         status = 200 if content else 404
         return status, content, filename, mimetype, filehash
 
-    def _binary_set_headers(self, status, content, filename, mimetype, unique, filehash=None, download=False):
+    def _binary_set_headers(self, status, filename, mimetype, unique, filehash=None, download=False):
         headers = [('Content-Type', mimetype), ('X-Content-Type-Options', 'nosniff'), ('Content-Security-Policy', "default-src 'none'")]
         # cache
         etag = bool(request) and request.httprequest.headers.get('If-None-Match')
@@ -439,9 +440,9 @@ class IrHttp(models.AbstractModel):
         if download:
             headers.append(('Content-Disposition', content_disposition(filename)))
 
-        return (status, headers, content)
+        return (status, headers)
 
-    def binary_content(self, xmlid=None, model='ir.attachment', id=None, field='datas',
+    def binary_content(self, xmlid=None, model='ir.attachment', id=None, field='raw',
                        unique=False, filename=None, filename_field='name', download=False,
                        mimetype=None, default_mimetype='application/octet-stream',
                        access_token=None):
@@ -479,8 +480,8 @@ class IrHttp(models.AbstractModel):
                 record, field=field, filename=filename, filename_field=filename_field,
                 default_mimetype='application/octet-stream')
 
-        status, headers, content = self._binary_set_headers(
-            status, content, filename, mimetype, unique, filehash=filehash, download=download)
+        status, headers = self._binary_set_headers(
+            status, filename, mimetype, unique, filehash=filehash, download=download)
 
         return status, headers, content
 

--- a/odoo/addons/base/models/res_company.py
+++ b/odoo/addons/base/models/res_company.py
@@ -159,7 +159,8 @@ class Company(models.Model):
     @api.depends('partner_id.image_1920')
     def _compute_logo_web(self):
         for company in self:
-            company.logo_web = tools.image_process(company.partner_id.image_1920, size=(180, 0))
+            img = company.partner_id.image_1920
+            company.logo_web = img and base64.b64encode(tools.image_process(base64.b64decode(img), size=(180, 0)))
 
     @api.onchange('state_id')
     def _onchange_state(self):

--- a/odoo/addons/base/models/res_partner.py
+++ b/odoo/addons/base/models/res_partner.py
@@ -264,7 +264,7 @@ class Partner(models.Model):
         partners_with_internal_user = self.filtered(lambda partner: partner.user_ids - partner.user_ids.filtered('share'))
         super(Partner, partners_with_internal_user)._compute_avatar(avatar_field, image_field)
         for partner in self - partners_with_internal_user:
-            partner[avatar_field] = partner[image_field] or partner._avatar_get_placeholder()
+            partner[avatar_field] = partner[image_field] or base64.b64encode(partner._avatar_get_placeholder())
 
     def _avatar_get_placeholder_path(self):
         if self.is_company:

--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -28,7 +28,7 @@ from odoo.exceptions import AccessDenied, AccessError, UserError, ValidationErro
 from odoo.http import request
 from odoo.osv import expression
 from odoo.service.db import check_super
-from odoo.tools import partition, collections, frozendict, lazy_property, image_process
+from odoo.tools import partition, collections, frozendict, lazy_property
 
 _logger = logging.getLogger(__name__)
 
