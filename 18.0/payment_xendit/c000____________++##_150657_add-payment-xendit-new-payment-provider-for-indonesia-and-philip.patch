PR: https://github.com/odoo/odoo/pull/150657

From: 377878d89d165e198b18239fadbf09c2bffcd025
From: nni-odoo
Date: 2024-01-24 09:20:35

Structural Changes: 5
Total Changes: 233

[ADD] payment_xendit: new payment provider for Indonesia and Philippines

See the README.md file for more details.

2946329

closes odoo/odoo#150657

X-original-commit: 8164b7c4fda418be45d79922ecc0107e0f1c0f5b
Signed-off-by: Antoine Vandevenne (anv) <anv@odoo.com>
Signed-off-by: Nigel Nicholas (nni) <nni@odoo.com>

================================= pseudo patch: =================================

--- a/None
+++ b/addons/payment_xendit/models/__init__.py
@@ -0,0 +1,4 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from . import payment_provider
+from . import payment_transaction

--- a/None
+++ b/addons/payment_xendit/models/payment_provider.py
@@ -0,0 +1,79 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import logging
+import pprint
+
+import requests
+
+from odoo import _, fields, models
+from odoo.exceptions import ValidationError
+
+from odoo.addons.payment_xendit import const
+
+
+_logger = logging.getLogger(__name__)
+
+
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
+
+    code = fields.Selection(
+        selection_add=[('xendit', "Xendit")], ondelete={'xendit': 'set default'}
+    )
+    xendit_secret_key = fields.Char(
+        string="Xendit Secret Key", groups='base.group_system', required_if_provider='xendit'
+    )
+    xendit_webhook_token = fields.Char(
+        string="Xendit Webhook Token", groups='base.group_system', required_if_provider='xendit'
+    )
+
+    # === BUSINESS METHODS ===#
+
+    def _get_supported_currencies(self):
+        """ Override of `payment` to return the supported currencies. """
+        supported_currencies = super()._get_supported_currencies()
+        if self.code == 'xendit':
+            supported_currencies = supported_currencies.filtered(
+                lambda c: c.name in const.SUPPORTED_CURRENCIES
+            )
+        return supported_currencies
+
+    def _get_default_payment_method_codes(self):
+        """ Override of `payment` to return the default payment method codes. """
+        default_codes = super()._get_default_payment_method_codes()
+        if self.code != 'xendit':
+            return default_codes
+        return const.DEFAULT_PAYMENT_METHODS_CODES
+
+    def _xendit_make_request(self, payload=None):
+        """ Make a request to Xendit API and return the JSON-formatted content of the response.
+
+        Note: self.ensure_one()
+
+        :param dict payload: The payload of the request.
+        :return The JSON-formatted content of the response.
+        :rtype: dict
+        :raise ValidationError: If an HTTP error occurs.
+        """
+        self.ensure_one()
+
+        auth = (self.xendit_secret_key, '')
+        url = "https://api.xendit.co/v2/invoices"
+        try:
+            response = requests.post(url, json=payload, auth=auth, timeout=10)
+            response.raise_for_status()
+        except (requests.exceptions.ConnectionError, requests.exceptions.Timeout):
+            _logger.exception("Unable to reach endpoint at %s", url)
+            raise ValidationError("Xendit: " + _("Could not establish the connection to the API."))
+        except requests.exceptions.HTTPError as err:
+            error_message = err.response.json().get('message')
+            _logger.exception(
+                "Invalid API request at %s with data:\n%s", url, pprint.pformat(payload)
+            )
+            raise ValidationError(
+                "Xendit: " + _(
+                    "The communication with the API failed. Xendit gave us the following"
+                    " information: '%s'", error_message
+                )
+            )
+        return response.json()

--- a/None
+++ b/addons/payment_xendit/models/payment_transaction.py
@@ -0,0 +1,150 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import logging
+import pprint
+
+from werkzeug import urls
+
+from odoo import _, models
+from odoo.exceptions import ValidationError
+
+from odoo.addons.payment_xendit import const
+
+
+_logger = logging.getLogger(__name__)
+
+
+class PaymentTransaction(models.Model):
+    _inherit = 'payment.transaction'
+
+    def _get_specific_rendering_values(self, processing_values):
+        """ Override of `payment` to return Xendit-specific rendering values.
+
+        Note: self.ensure_one() from `_get_processing_values`
+
+        :param dict processing_values: The generic and specific processing values of the transaction
+        :return: The dict of provider-specific processing values.
+        :rtype: dict
+        """
+        res = super()._get_specific_rendering_values(processing_values)
+        if self.provider_code != 'xendit':
+            return res
+
+        # Initiate the payment and retrieve the invoice data.
+        payload = self._xendit_prepare_invoice_request_payload()
+        _logger.info("Sending invoice request for link creation:\n%s", pprint.pformat(payload))
+        invoice_data = self.provider_id._xendit_make_request(payload)
+        _logger.info("Received invoice request response:\n%s", pprint.pformat(invoice_data))
+
+        # Extract the payment link URL and embed it in the redirect form.
+        rendering_values = {
+            'api_url': invoice_data.get('invoice_url')
+        }
+        return rendering_values
+
+    def _xendit_prepare_invoice_request_payload(self):
+        """ Create the payload for the invoice request based on the transaction values.
+
+        :return: The request payload.
+        :rtype: dict
+        """
+        base_url = self.provider_id.get_base_url()
+        redirect_url = urls.url_join(base_url, '/payment/status')
+        payload = {
+            'external_id': self.reference,
+            'amount': self.amount,
+            'description': self.reference,
+            'customer': {
+                'given_names': self.partner_name,
+            },
+            'success_redirect_url': redirect_url,
+            'failure_redirect_url': redirect_url,
+            'payment_methods': [const.PAYMENT_METHODS_MAPPING.get(
+                self.payment_method_code, self.payment_method_code.upper())
+            ],
+            'currency': self.currency_id.name,
+        }
+        # Extra payload values that must not be included if empty.
+        if self.partner_email:
+            payload['customer']['email'] = self.partner_id.email
+        if phone := self.partner_id.mobile or self.partner_id.phone:
+            payload['customer']['mobile_number'] = phone
+        address_details = {}
+        if self.partner_city:
+            address_details['city'] = self.partner_city
+        if self.partner_country_id.name:
+            address_details['country'] = self.partner_country_id.name
+        if self.partner_zip:
+            address_details['postal_code'] = self.partner_zip
+        if self.partner_state_id.name:
+            address_details['state'] = self.partner_state_id.name
+        if self.partner_address:
+            address_details['street_line1'] = self.partner_address
+        if address_details:
+            payload['customer']['addresses'] = [address_details]
+
+        return payload
+
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
+        """ Override of `payment` to find the transaction based on the notification data.
+
+        :param str provider_code: The code of the provider that handled the transaction.
+        :param dict notification_data: The notification data sent by the provider.
+        :return: The transaction if found.
+        :rtype: payment.transaction
+        :raise ValidationError: If inconsistent data were received.
+        :raise ValidationError: If the data match no transaction.
+        """
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'xendit' or len(tx) == 1:
+            return tx
+
+        reference = notification_data.get('external_id')
+        if not reference:
+            raise ValidationError("Xendit: " + _("Received data with missing reference."))
+
+        tx = self.search([('reference', '=', reference), ('provider_code', '=', 'xendit')])
+        if not tx:
+            raise ValidationError(
+                "Xendit: " + _("No transaction found matching reference %s.", reference)
+            )
+        return tx
+
+    def _process_notification_data(self, notification_data):
+        """ Override of `payment` to process the transaction based on Xendit data.
+
+        Note: self.ensure_one()
+
+        :param dict notification_data: The notification data sent by the provider.
+        :return: None
+        :raise ValidationError: If inconsistent data were received.
+        """
+        self.ensure_one()
+
+        super()._process_notification_data(notification_data)
+        if self.provider_code != 'xendit':
+            return
+
+        # Update the provider reference.
+        self.provider_reference = notification_data.get('id')
+
+        # Update payment method.
+        payment_method_code = notification_data.get('payment_method', '')
+        payment_method = self.env['payment.method']._get_from_code(
+            payment_method_code, mapping=const.PAYMENT_METHODS_MAPPING
+        )
+        self.payment_method_id = payment_method or self.payment_method_id
+
+        # Update the payment state.
+        payment_status = notification_data.get('status')
+        if payment_status in const.PAYMENT_STATUS_MAPPING['pending']:
+            self._set_pending()
+        elif payment_status in const.PAYMENT_STATUS_MAPPING['done']:
+            self._set_done()
+        elif payment_status in const.PAYMENT_STATUS_MAPPING['cancel']:
+            self._set_canceled()
+        elif payment_status in const.PAYMENT_STATUS_MAPPING['error']:
+            self._set_error(_(
+                "An error occurred during the processing of your payment (status %s). Please try "
+                "again."
+            ))
