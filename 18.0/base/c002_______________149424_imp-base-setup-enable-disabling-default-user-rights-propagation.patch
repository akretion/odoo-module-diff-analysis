PR: https://github.com/odoo/odoo/pull/149424

From: 59d3762d4ce1e40ed42671c0e6e4f77d3d4fc830
From: Martin Trigaux
Date: 2024-02-22 11:09:36

Structural Changes: 1
Total Changes: 37

[IMP] base_setup: enable disabling default user rights propagation

When installing a new module, the access of the Default Template User
is propagated to any existing employee. This can be problematic in
companies that don't want all their employees to become manager by
default.  Allow to disable this behaviour in a settings.

Task-id 3685856

closes odoo/odoo#149424

Signed-off-by: Martin Trigaux (mat) <mat@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -305,8 +305,12 @@ class Users(models.Model):
         return ['signature', 'action_id', 'company_id', 'email', 'name', 'image_1920', 'lang', 'tz']
 
     def _default_groups(self):
-        default_user_id = self.env['ir.model.data']._xmlid_to_res_id('base.default_user', raise_if_not_found=False)
-        return self.env['res.users'].browse(default_user_id).sudo().groups_id if default_user_id else []
+        """Default groups for employees
+
+        All the groups of the Template User
+        """
+        default_user = self.env.ref('base.default_user', raise_if_not_found=False)
+        return default_user.sudo().groups_id if default_user else []
 
     partner_id = fields.Many2one('res.partner', required=True, ondelete='restrict', auto_join=True, index=True,
         string='Related Partner', help='Partner-related data of the user')
@@ -324,7 +328,7 @@ class Users(models.Model):
     active_partner = fields.Boolean(related='partner_id.active', readonly=True, string="Partner is Active")
     action_id = fields.Many2one('ir.actions.actions', string='Home Action',
         help="If specified, this action will be opened at log on for this user, in addition to the standard menu.")
-    groups_id = fields.Many2many('res.groups', 'res_groups_users_rel', 'uid', 'gid', string='Groups', default=_default_groups)
+    groups_id = fields.Many2many('res.groups', 'res_groups_users_rel', 'uid', 'gid', string='Groups', default=lambda s: s._default_groups())
     log_ids = fields.One2many('res.users.log', 'create_uid', string='User log entries')
     login_date = fields.Datetime(related='log_ids.create_date', string='Latest authentication', readonly=False)
     share = fields.Boolean(compute='_compute_share', compute_sudo=True, string='Share User', store=True,
@@ -633,6 +637,15 @@ class Users(models.Model):
             self.env['res.users.settings'].sudo().create(setting_vals)
         return users
 
+    def _apply_groups_to_existing_employees(self):
+        """ Should new groups be added to existing employees?
+
+        If the template user is being modified, the groups should be applied to
+        every other base_user users
+        """
+        default_user = self.env.ref('base.default_user', raise_if_not_found=False)
+        return default_user and default_user in self
+
     def write(self, values):
         if values.get('active') and SUPERUSER_ID in self._ids:
             raise UserError(_("You cannot activate the superuser."))
@@ -655,18 +668,20 @@ class Users(models.Model):
                 # safe fields only, so we write as super-user to bypass access rights
                 self = self.sudo()
 
-        if 'groups_id' in values:
-            default_user = self.env.ref('base.default_user', raise_if_not_found=False)
-            if default_user and default_user in self:
-                old_groups = default_user.groups_id
+        old_groups = []
+        if 'groups_id' in values and self._apply_groups_to_existing_employees():
+            # if modify groups_id content, compute the delta of groups to apply
+            # the new ones to other existing users
+            old_groups = self._default_groups()
 
         res = super(Users, self).write(values)
 
-        if 'groups_id' in values and default_user and default_user in self:
-            # Sync added groups on default user template to existing users
-            added_groups = default_user.groups_id - old_groups
+        if old_groups:
+            # new elements in _default_groups() means new groups for default users
+            # that needs to be added to existing ones as well for consistency
+            added_groups = self._default_groups() - old_groups
             if added_groups:
-                internal_users = self.env.ref('base.group_user').users - default_user
+                internal_users = self.env.ref('base.group_user').users - self
                 internal_users.write({'groups_id': [Command.link(gid) for gid in added_groups.ids]})
 
         if 'company_id' in values:
