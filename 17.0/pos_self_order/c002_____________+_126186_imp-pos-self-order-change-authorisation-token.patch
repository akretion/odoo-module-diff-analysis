PR: https://github.com/odoo/odoo/pull/126186

From: 0ae2b9a3f2d5af5ac8663f2b7960cb74fc53f119
From: David Monnom (moda)
Date: 2023-07-03 19:56:04

Structural Changes: 3
Total Changes: 83

[IMP] pos_self_order: change authorisation token

Previously, access_token were linked to tables. These tables were linked
to a floor_plan, which could be linked to several pos_configs.

The only way to access the self-order was to obtain a valid table
access_token. This behaviour was not correct because sometimes we would
allow table selection directly in the interface or commands without
a table.

Now, access_token is managed by pos_config. When a user has this token,
they can place commands and select the table they want if the option is
enabled.

closes odoo/odoo#126186

Signed-off-by: Joseph Caburnay (jcb) <jcb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_self_order/models/pos_config.py
+++ b/addons/pos_self_order/models/pos_config.py
@@ -2,6 +2,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from typing import Optional, List, Dict, Callable
+import uuid
 from werkzeug.urls import url_quote
 import base64
 
@@ -10,7 +11,6 @@ from odoo import api, fields, models, modules
 from odoo.tools import file_open, split_every
 
 from odoo.addons.pos_self_order.models.product_product import ProductProduct
-from odoo.addons.pos_self_order.models.pos_order import PosOrderLine
 
 
 class PosConfig(models.Model):
@@ -52,6 +52,27 @@ class PosConfig(models.Model):
         help="Name of the image to display on the self order screen",
         default=_self_order_default_image_name,
     )
+    access_token = fields.Char(
+        "Security Token",
+        copy=False,
+        required=True,
+        readonly=True,
+        default=lambda self: self._get_access_token(),
+    )
+
+    @staticmethod
+    def _get_access_token():
+        return uuid.uuid4().hex[:16]
+
+    def _update_access_token(self):
+        self.access_token = self._get_access_token()
+        self.floor_ids.table_ids._update_identifier()
+
+    @api.model
+    def _init_access_token(self):
+        pos_config_ids = self.env["pos.config"].search([])
+        for pos_config_id in pos_config_ids:
+            pos_config_id.access_token = self._get_access_token()
 
     @api.model_create_multi
     def create(self, vals_list):
@@ -68,13 +89,6 @@ class PosConfig(models.Model):
                 pos_config_id.self_order_view_mode = True
                 pos_config_id.self_order_table_mode = True
 
-                self.env['pos_self_order.custom_link'].create({
-                    'url': '/menu/%s/products' % pos_config_id.id,
-                    'name': 'View Menu',
-                    'pos_config_ids': pos_config_id,
-                    'style': 'primary',
-                })
-
         return pos_config_ids
 
     @api.depends("module_pos_restaurant")
@@ -90,16 +104,19 @@ class PosConfig(models.Model):
     def _get_self_order_route(self, table_id: Optional[int] = None) -> str:
         self.ensure_one()
         base_route = f"/menu/{self.id}"
+        table_route = ""
+
         if not self.self_order_table_mode:
             return base_route
-        access_token = (
-            self.env["restaurant.table"]
-            .search(
-                [("active", "=", True), *(table_id and [("id", "=", table_id)] or [])], limit=1
-            )
-            .access_token
+
+        table = self.env["restaurant.table"].search(
+            [("active", "=", True), ("id", "=", table_id)], limit=1
         )
-        return f"{base_route}?at={access_token}"
+
+        if table:
+            table_route = f"&table_identifier={table.identifier}"
+
+        return f"{base_route}?access_token={self.access_token}{table_route}"
 
     def _get_self_order_url(self, table_id: Optional[int] = None) -> str:
         self.ensure_one()

--- a/addons/pos_self_order/models/pos_restaurant.py
+++ b/addons/pos_self_order/models/pos_restaurant.py
@@ -23,45 +23,35 @@ class RestaurantFloor(models.Model):
 class RestaurantTable(models.Model):
     _inherit = "restaurant.table"
 
-    access_token = fields.Char(
+    identifier = fields.Char(
         "Security Token",
         copy=False,
         required=True,
         readonly=True,
-        default=lambda self: self._get_access_token(),
+        default=lambda self: self._get_identifier(),
     )
 
-    @staticmethod
-    def _get_access_token():
-        return uuid.uuid4().hex[:8]
-
     def _get_self_order_data(self) -> Dict:
         self.ensure_one()
-        return self.read(["name", "access_token"])[0]
+        return self.read(["name", "identifier"])[0]
 
     def _get_data_for_qr_codes_page(self, url: Callable[[Optional[int]], str]) -> List[Dict]:
         return [
             {
-                "access_token": table.access_token,
-                "id": table.id,
-                "name": table.name,
-                "url": url(table.id),
+                'identifier': table.identifier,
+                'id': table.id,
+                'name': table.name,
+                'url': url(table.id),
             }
             for table in self
         ]
 
+    @staticmethod
+    def _get_identifier():
+        return uuid.uuid4().hex[:8]
+
     @api.model
-    def _update_access_token(self):
-        """
-        We define a new access token field in this file.
-        There might already be databases that have restaurant.table records.
-        They will now also get an access token each; the problem is that
-        because of the way `default` values work, all those tables that
-        exist in the db will get the same access token.
-        This method will be ran at the moment the pos_self_order module
-        is installed and will thus make sure that every record has a
-        different access token.
-        """
+    def _update_identifier(self):
         tables = self.env["restaurant.table"].search([])
         for table in tables:
-            table.access_token = self._get_access_token()
+            table.identifier = self._get_identifier()
