PR: https://github.com/odoo/odoo/pull/160169

From: 02f756d061f1e52a2265e051ac57b13b311fb115
From: David Monnom (moda)
Date: 2024-04-29 23:21:31

Structural Changes: 9
Total Changes: 221

[IMP] pos_*: allow arbitrary data in related models

*: All pos related modules

This commit allows to access arbitrary data in related models. This is
useful for data that are computed on the server side and that are not
recomputed on the client side.

Before this commit, it was only possible to access data that are linked
to a field in the model.

Now custom data coming from the server can be added to any record with
the prefix `_` in the key. For example, if the server sends the
following data for `pos.order`:

Classic fields:
```
{
  id: 1,
  name: 'Order 1',
  partner_id: 1,
  partner_name: 'Partner 1',
}
```

Custom fields:
```
{
  id: 1,
  name: 'Order 1',
  partner_id: 1,
  partner_name: 'Partner 1',
  _custom_field: 'Custom value',
}
```

closes odoo/odoo#160169

Related: odoo/enterprise#60017
Signed-off-by: Adrien Guilliams (adgu) <adgu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_loyalty/models/__init__.py
+++ b/addons/pos_loyalty/models/__init__.py
@@ -12,4 +12,5 @@ from . import pos_order_line
 from . import pos_order
 from . import pos_session
 from . import res_config_settings
+from . import product_product
 from . import res_partner

--- a/addons/pos_loyalty/models/loyalty_card.py
+++ b/addons/pos_loyalty/models/loyalty_card.py
@@ -1,14 +1,23 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import fields, models
+from odoo import fields, models, api
 
 class LoyaltyCard(models.Model):
-    _inherit = 'loyalty.card'
+    _name = 'loyalty.card'
+    _inherit = ['loyalty.card', 'pos.load.mixin']
 
     source_pos_order_id = fields.Many2one('pos.order', "PoS Order Reference",
         help="PoS order where this coupon was generated.")
 
+    @api.model
+    def _load_pos_data_domain(self, data):
+        return [('program_id', 'in', [program["id"] for program in data["loyalty.program"]['data']])]
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return ['partner_id', 'code', 'points', 'program_id', 'expiration_date']
+
     def _has_source_order(self):
         return super()._has_source_order() or bool(self.source_pos_order_id)
 

--- a/addons/pos_loyalty/models/loyalty_program.py
+++ b/addons/pos_loyalty/models/loyalty_program.py
@@ -1,12 +1,11 @@
-# -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import _, api, fields, models
-from odoo.tools import unique
 from odoo.exceptions import UserError
 
 class LoyaltyProgram(models.Model):
-    _inherit = 'loyalty.program'
+    _name = 'loyalty.program'
+    _inherit = ['loyalty.program', 'pos.load.mixin']
 
     # NOTE: `pos_config_ids` satisfies an excpeptional use case: when no PoS is specified, the loyalty program is
     # applied to every PoS. You can access the loyalty programs of a PoS using _get_program_ids() of pos.config
@@ -16,6 +15,19 @@ class LoyaltyProgram(models.Model):
     pos_report_print_id = fields.Many2one('ir.actions.report', string="Print Report", domain=[('model', '=', 'loyalty.card')], compute='_compute_pos_report_print_id', inverse='_inverse_pos_report_print_id', readonly=False,
         help="This is used to print the generated gift cards from PoS.")
 
+    @api.model
+    def _load_pos_data_domain(self, data):
+        config_id = self.env['pos.config'].browse(data['pos.config']['data'][0]['id'])
+        return [('id', 'in', config_id._get_program_ids().ids)]
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return [
+            'name', 'trigger', 'applies_on', 'program_type', 'pricelist_ids', 'date_from',
+            'date_to', 'limit_usage', 'max_usage', 'is_nominative', 'portal_visible',
+            'portal_point_name', 'trigger_product_ids', 'rule_ids', 'reward_ids'
+        ]
+
     @api.depends("communication_plan_ids.pos_report_print_id")
     def _compute_pos_report_print_id(self):
         for program in self:

--- a/addons/pos_loyalty/models/loyalty_reward.py
+++ b/addons/pos_loyalty/models/loyalty_reward.py
@@ -1,13 +1,59 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import models
+from odoo import models, api
+import ast
+import json
 
 class LoyaltyReward(models.Model):
-    _inherit = 'loyalty.reward'
+    _name = 'loyalty.reward'
+    _inherit = ['loyalty.reward', 'pos.load.mixin']
 
     def _get_discount_product_values(self):
         res = super()._get_discount_product_values()
         for vals in res:
             vals.update({'taxes_id': False})
         return res
+
+    @api.model
+    def _load_pos_data_domain(self, data):
+        config_id = self.env['pos.config'].browse(data['pos.config']['data'][0]['id'])
+        return [('program_id', 'in', config_id._get_program_ids().ids)]
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return ['description', 'program_id', 'reward_type', 'required_points', 'clear_wallet', 'currency_id',
+                'discount', 'discount_mode', 'discount_applicability', 'all_discount_product_ids', 'is_global_discount',
+                'discount_max_amount', 'discount_line_product_id', 'reward_product_id',
+                'multi_product', 'reward_product_ids', 'reward_product_qty', 'reward_product_uom_id', 'reward_product_domain']
+
+    def _load_pos_data(self, data):
+        domain = self._load_pos_data_domain(data)
+        fields = self._load_pos_data_fields(data['pos.config']['data'][0]['id'])
+        rewards = self.search_read(domain, fields, load=False)
+        for reward in rewards:
+            reward['reward_product_domain'] = self._replace_ilike_with_in(reward['reward_product_domain'])
+        return {
+            'data': rewards,
+            'fields': fields,
+        }
+
+    def _replace_ilike_with_in(self, domain_str):
+        if domain_str == "null":
+            return domain_str
+
+        domain = ast.literal_eval(domain_str)
+
+        for index, condition in enumerate(domain):
+            if isinstance(condition, (list, tuple)) and len(condition) == 3:
+                field_name, operator, value = condition
+                field = self.env['product.product']._fields.get(field_name)
+
+                if field and field.type == 'many2one' and operator in ('ilike', 'not ilike'):
+                    comodel = self.env[field.comodel_name]
+                    matching_ids = list(comodel._name_search(value, [], operator, limit=None))
+
+                    new_operator = 'in' if operator == 'ilike' else 'not in'
+                    domain[index] = [field_name, new_operator, matching_ids]
+
+        return json.dumps(domain)

--- a/addons/pos_loyalty/models/loyalty_rule.py
+++ b/addons/pos_loyalty/models/loyalty_rule.py
@@ -5,7 +5,8 @@ from odoo import api, fields, models
 from odoo.osv import expression
 
 class LoyaltyRule(models.Model):
-    _inherit = 'loyalty.rule'
+    _name = 'loyalty.rule'
+    _inherit = ['loyalty.rule', 'pos.load.mixin']
 
     valid_product_ids = fields.Many2many(
         'product.product', "Valid Products", compute='_compute_valid_product_ids',
@@ -18,6 +19,17 @@ class LoyaltyRule(models.Model):
         "This is automatically generated when the promo code is changed."
     )
 
+    @api.model
+    def _load_pos_data_domain(self, data):
+        config_id = self.env['pos.config'].browse(data['pos.config']['data'][0]['id'])
+        return [('program_id', 'in', config_id._get_program_ids().ids)]
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return ['program_id', 'valid_product_ids', 'any_product', 'currency_id',
+            'reward_point_amount', 'reward_point_split', 'reward_point_mode',
+            'minimum_qty', 'minimum_amount', 'minimum_amount_tax_mode', 'mode', 'code']
+
     @api.depends('product_ids', 'product_category_id', 'product_tag_id') #TODO later: product tags
     def _compute_valid_product_ids(self):
         for rule in self:

--- a/addons/pos_loyalty/models/pos_order_line.py
+++ b/addons/pos_loyalty/models/pos_order_line.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import fields, models
+from odoo import fields, models, api
 
 class PosOrderLine(models.Model):
     _inherit = 'pos.order.line'
@@ -21,3 +21,9 @@ class PosOrderLine(models.Model):
 
     def _is_not_sellable_line(self):
         return super().is_not_sellable_line() or self.reward_id
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        params = super()._load_pos_data_fields(config_id)
+        params += ['is_reward_line', 'reward_id', 'reward_identifier_code', 'points_cost', 'coupon_id']
+        return params

--- a/addons/pos_loyalty/models/pos_session.py
+++ b/addons/pos_loyalty/models/pos_session.py
@@ -1,89 +1,13 @@
-# -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import models
-from odoo.osv.expression import OR
-import ast
-import json
+from odoo import models, api
 
 class PosSession(models.Model):
     _inherit = 'pos.session'
 
-    def _load_data_params(self, config_id):
-        params = super()._load_data_params(config_id)
-        params['product.product']['fields'].append('all_product_tag_ids')
-        params.update({
-            'loyalty.program': {
-                'domain': [('id', 'in', self.config_id._get_program_ids().ids)],
-                'fields': [
-                    'name', 'trigger', 'applies_on', 'program_type', 'pricelist_ids', 'date_from',
-                    'date_to', 'limit_usage', 'max_usage', 'is_nominative', 'portal_visible',
-                    'portal_point_name', 'trigger_product_ids', 'rule_ids', 'reward_ids'
-                ],
-            },
-            'loyalty.rule': {
-                'domain': [('program_id', 'in', self.config_id._get_program_ids().ids)],
-                'fields': ['program_id', 'valid_product_ids', 'any_product', 'currency_id',
-                    'reward_point_amount', 'reward_point_split', 'reward_point_mode',
-                    'minimum_qty', 'minimum_amount', 'minimum_amount_tax_mode', 'mode', 'code'],
-            },
-            'loyalty.reward': {
-                'domain': [('program_id', 'in', self.config_id._get_program_ids().ids)],
-                'fields': ['description', 'program_id', 'reward_type', 'required_points', 'clear_wallet', 'currency_id',
-                    'discount', 'discount_mode', 'discount_applicability', 'all_discount_product_ids', 'is_global_discount',
-                    'discount_max_amount', 'discount_line_product_id', 'reward_product_id',
-                    'multi_product', 'reward_product_ids', 'reward_product_qty', 'reward_product_uom_id', 'reward_product_domain'],
-            },
-            'loyalty.card': {
-                'domain': lambda data: [('program_id', 'in', [program["id"] for program in data["loyalty.program"]])],
-                'fields': ['partner_id', 'code', 'points', 'program_id', 'expiration_date'],
-            },
-        })
-        params['pos.order.line']['fields'] += ['is_reward_line', 'reward_id', 'reward_identifier_code', 'points_cost', 'coupon_id']
-        return params
+    @api.model
+    def _load_pos_data_models(self, config_id):
+        data = super()._load_pos_data_models(config_id)
+        data += ['loyalty.program', 'loyalty.rule', 'loyalty.reward', 'loyalty.card']
+        return data
 
-    def _replace_ilike_with_in(self, domain_str):
-        if domain_str == "null":
-            return domain_str
-
-        domain = ast.literal_eval(domain_str)
-
-        for index, condition in enumerate(domain):
-            if isinstance(condition, (list, tuple)) and len(condition) == 3:
-                field_name, operator, value = condition
-                field = self.env['product.product']._fields.get(field_name)
-
-                if field and field.type == 'many2one' and operator in ('ilike', 'not ilike'):
-                    comodel = self.env[field.comodel_name]
-                    matching_ids = list(comodel._name_search(value, [], operator, limit=None))
-
-                    new_operator = 'in' if operator == 'ilike' else 'not in'
-                    domain[index] = [field_name, new_operator, matching_ids]
-
-        return json.dumps(domain)
-
-    def load_data(self, models_to_load, only_data=False):
-        result = super().load_data(models_to_load, only_data)
-
-        # adapt product
-        if len(models_to_load) == 0 or 'product.product' in models_to_load:
-            product_params = self._load_data_params(self.config_id)['product.product']
-            rewards = self.config_id._get_program_ids().reward_ids
-            reward_products = rewards.discount_line_product_id | rewards.reward_product_ids
-            trigger_products = self.config_id._get_program_ids().filtered(lambda p: p.program_type == 'ewallet').trigger_product_ids
-
-            products = list(set(reward_products.ids + trigger_products.ids) - set(product['id'] for product in result['data']['product.product']))
-            products = self.env['product.product'].search_read([('id', 'in', products)], fields=product_params['fields'], load=False)
-            self._process_pos_ui_product_product(products)
-
-            result['custom']['pos_special_products_ids'].extend(
-                [product.id for product in reward_products if product.id not in [p["id"] for p in result['data']['product.product']]]
-            )
-            result['data']['product.product'].extend(products)
-
-        # adapt loyalty
-        if len(models_to_load) == 0 or 'loyalty.reward' in models_to_load:
-            for reward in result['data']['loyalty.reward']:
-                reward['reward_product_domain'] = self._replace_ilike_with_in(reward['reward_product_domain'])
-
-        return result

--- a/None
+++ b/addons/pos_loyalty/models/product_product.py
@@ -0,0 +1,29 @@
+from odoo import api, models
+
+
+class ProductProduct(models.Model):
+    _inherit = 'product.product'
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        params = super()._load_pos_data_fields(config_id)
+        params += ['all_product_tag_ids']
+        return params
+
+    def _load_pos_data(self, data):
+        res = super()._load_pos_data(data)
+        config_id = self.env['pos.config'].browse(data['pos.config']['data'][0]['id'])
+        rewards = config_id._get_program_ids().reward_ids
+        reward_products = rewards.discount_line_product_id | rewards.reward_product_ids | rewards.reward_product_id
+        trigger_products = config_id._get_program_ids().filtered(lambda p: p.program_type == 'ewallet').trigger_product_ids
+
+        loyalty_product_ids = set(reward_products.ids + trigger_products.ids)
+        classic_product_ids = {product['id'] for product in res['data']}
+        products = self.env['product.product'].browse(list(loyalty_product_ids - classic_product_ids))
+        products = products.read(fields=res['fields'], load=False)
+        self._process_pos_ui_product_product(products, config_id)
+
+        data['pos.session']['data'][0]['_pos_special_products_ids'] += [product.id for product in reward_products if product.id not in [p["id"] for p in res['data']]]
+        res['data'].extend(products)
+
+        return res
