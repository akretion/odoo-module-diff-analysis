PR: https://github.com/odoo/odoo/pull/

From: 58e4a58427c2aeba6398b5ff1940931abe33463e
From: jem-odoo
Date: 2018-08-13 12:40:28

Structural Changes: 8
Total Changes: 115

[MERGE] hr_timesheet: log timesheet in any time UoM

Since uom management has been extract in a separated module, we
can now add the possibility to use it without product.

This commit brings the ability to record the timesheets in
an different UoM than 'Hours'. The user can now set an encoding
UoM for its timesheet on the company. This will display the
timesheet field `unit_amount` with a different widget.
For instance, timesheeting in hours will still use
the traditionnal float_time widget, when timesheeting in 'Days'
will displayed a toggle button with a range of defined possible
values.
The widget used by UoM is customizable on the UoM. The `unit_amount`
field should now be decorated with the 'timesheet_uom' widget.
This one will bind the correct widget (float_time, float_toggle, ...).
If the encoding UoM has no widget associated, the fallback will
be 'float_factor', using the uoM converstion factor.

Everything will still be stored in the database in 'Hours' (the
UoM set on the `project_mode_time_id` field on the company).

For more details, please have a look at the subcommits.

Task #39079
Closes #24893

================================= pseudo patch: =================================

--- a/addons/hr_timesheet/models/__init__.py
+++ b/addons/hr_timesheet/models/__init__.py
@@ -4,6 +4,9 @@
 from . import analytic_account
 from . import hr
 from . import hr_timesheet
+from . import ir_http
+from . import res_company
 from . import res_config_settings
 from . import project
 from . import res_users
+from . import uom

--- a/addons/hr_timesheet/models/hr_timesheet.py
+++ b/addons/hr_timesheet/models/hr_timesheet.py
@@ -1,6 +1,9 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from lxml import etree
+import json
+
 from odoo import api, fields, models, _
 from odoo.exceptions import UserError
 
@@ -46,6 +49,10 @@ class AccountAnalyticLine(models.Model):
         for line in self:
             line.department_id = line.employee_id.department_id
 
+    # ----------------------------------------------------
+    # ORM overrides
+    # ----------------------------------------------------
+
     @api.model
     def create(self, values):
         # compute employee only for timesheet lines, makes no sense for other lines
@@ -70,6 +77,28 @@ class AccountAnalyticLine(models.Model):
         self.filtered(lambda t: t.project_id)._timesheet_postprocess(values)
         return result
 
+    @api.model
+    def fields_view_get(self, view_id=None, view_type='form', toolbar=False, submenu=False):
+        """ Set the correct label for `unit_amount`, depending on company UoM """
+        result = super(AccountAnalyticLine, self).fields_view_get(view_id=view_id, view_type=view_type, toolbar=toolbar, submenu=submenu)
+        result['arch'] = self._apply_timesheet_label(result['arch'])
+        return result
+
+    @api.model
+    def _apply_timesheet_label(self, view_arch):
+        doc = etree.XML(view_arch)
+        encoding_uom = self.env.user.company_id.timesheet_encode_uom_id
+        # Here, we select only the unit_amount field having no string set to give priority to
+        # custom inheretied view stored in database. Even if normally, no xpath can be done on
+        # 'string' attribute.
+        for node in doc.xpath("//field[@name='unit_amount'][@widget='timesheet_uom'][not(@string)]"):
+            node.set('string', _('Duration (%s)') % (encoding_uom.name))
+        return etree.tostring(doc, encoding='unicode')
+
+    # ----------------------------------------------------
+    # Business Methods
+    # ----------------------------------------------------
+
     def _timesheet_preprocess(self, vals):
         """ Deduce other field values from the one given.
             Overrride this to compute on the fly some field that can not be computed fields.

--- a/None
+++ b/addons/hr_timesheet/models/ir_http.py
@@ -0,0 +1,21 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models
+
+
+class Http(models.AbstractModel):
+    _inherit = 'ir.http'
+
+    def session_info(self):
+        """ The widget 'timesheet_uom' needs to know which UoM conversion factor and which javascript
+            widget to apply, depending on th ecurrent company.
+        """
+        result = super(Http, self).session_info()
+
+        company = self.env.user.company_id
+        encoding_uom = company.timesheet_encode_uom_id
+
+        result['timesheet_uom'] = encoding_uom.read(['name', 'rounding', 'timesheet_widget'])[0]
+        result['timesheet_uom_factor'] = company.project_time_mode_id._compute_quantity(1.0, encoding_uom, round=False)  # convert encoding uom into stored uom to get conversion factor
+        return result

--- a/addons/hr_timesheet/models/project.py
+++ b/addons/hr_timesheet/models/project.py
@@ -151,3 +151,10 @@ class Task(models.Model):
                 'company_id': account_id.company_id.id,
             })
         return result
+
+    @api.model
+    def fields_view_get(self, view_id=None, view_type='form', toolbar=False, submenu=False):
+        """ Set the correct label for `unit_amount`, depending on company UoM """
+        result = super(Task, self).fields_view_get(view_id=view_id, view_type=view_type, toolbar=toolbar, submenu=submenu)
+        result['arch'] = self.env['account.analytic.line']._apply_timesheet_label(result['arch'])
+        return result

--- a/None
+++ b/addons/hr_timesheet/models/res_company.py
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class ResCompany(models.Model):
+    _inherit = 'res.company'
+
+    @api.model
+    def _default_project_time_mode_id(self):
+        uom = self.env.ref('uom.product_uom_hour', raise_if_not_found=False)
+        if not uom:
+            uom = self.env['uom.uom'].search([('measure_type', '=', 'time'), ('uom_type', '=', 'reference')], limit=1)
+        if not uom:
+            uom = self.env['uom.uom'].search([('measure_type', '=', 'time')], limit=1)
+        return uom
+
+    @api.model
+    def _default_timesheet_encode_uom_id(self):
+        uom = self.env.ref('uom.product_uom_hour', raise_if_not_found=False)
+        if not uom:
+            uom = self.env['uom.uom'].search([('measure_type', '=', 'time'), ('uom_type', '=', 'reference')], limit=1)
+        if not uom:
+            uom = self.env['uom.uom'].search([('measure_type', '=', 'time')], limit=1)
+        return uom
+
+    project_time_mode_id = fields.Many2one('uom.uom', string='Project Time Unit',
+        default=_default_project_time_mode_id, domain=[('measure_type', '=', 'time')],
+        help="This will set the unit of measure used in projects and tasks.\n"
+             "If you use the timesheet linked to projects, don't "
+             "forget to setup the right unit of measure in your employees.")
+    timesheet_encode_uom_id = fields.Many2one('uom.uom', string="Timesheet Encoding Unit",
+        default=_default_timesheet_encode_uom_id, domain=[('measure_type', '=', 'time')], required=True,
+        help="""This will set the unit of measure used to encode timesheet. This will simply provide tools
+        and widgets to help the encoding. All reporting will still be expressed in hours (default value).""")

--- a/addons/hr_timesheet/models/res_config_settings.py
+++ b/addons/hr_timesheet/models/res_config_settings.py
@@ -9,3 +9,12 @@ class ResConfigSettings(models.TransientModel):
 
     module_project_timesheet_synchro = fields.Boolean("Awesome Timesheet")
     module_project_timesheet_holidays = fields.Boolean("Leaves")
+    project_time_mode_id = fields.Many2one(
+        'uom.uom', related='company_id.project_time_mode_id', string='Project Time Unit',
+        help="This will set the unit of measure used in projects and tasks.\n"
+             "If you use the timesheet linked to projects, don't "
+             "forget to setup the right unit of measure in your employees.")
+    timesheet_encode_uom_id = fields.Many2one('uom.uom', string="Encoding Unit",
+        related='company_id.timesheet_encode_uom_id',
+        help="""This will set the unit of measure used to encode timesheet. This will simply provide tools
+        and widgets to help the encoding. All reporting will still be expressed in hours (default value).""")

--- a/None
+++ b/addons/hr_timesheet/models/uom.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class Uom(models.Model):
+    _inherit = 'uom.uom'
+
+    timesheet_widget = fields.Char("Widget", help="Widget used in the webclient when this unit is the one used to encode timesheets.")
