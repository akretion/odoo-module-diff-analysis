PR: https://github.com/odoo/odoo/pull/

From: 079a13a349c942ab69ca704263bc5cb52c391d92
From: Joren Van Onder
Date: 2018-01-31 14:53:04

Breaking data model changes score: 6, change matches:
+    analytic_distribution_ids = fields.One2many('account.analytic.distribution', 'tag_id', string="Analytic Accounts")
+    children_ids = fields.One2many('account.analytic.group', 'parent_id', string="Childrens")
-    tag_ids = fields.Many2many('account.analytic.tag', 'account_analytic_account_tag_rel', 'account_id', 'tag_id', string='Tags', copy=True)
-    company_id = fields.Many2one(related='account_id.company_id', string='Company', store=True, readonly=True)
-    currency_id = fields.Many2one(related="company_id.currency_id", string="Currency", readonly=True)

Total Changes: 85

[IMP] analytic: in-depth refactoring

* analytic accounts can be shared among companies
* amount on analytic lines always refer to amount in company currency of which it belongs to
* add analytic groups (hierarchical way to classify analytic accounts)
* analytic tags:
* only present on analytic lines, not anymore on analytic accounts
* can be used to distribue/split an analytic lines among several analytic accounts
* enabled by a dedicated res.group
* added on several objects (vouchers, expenses, analytic defaults...) as well as in bank statement reconciliation widget (manual counterpart and account.reconcile.model)

* bunch of fixes made related to analytic

Was PR #22124. Was task 32386. Original work by tbe.

================================= pseudo patch: =================================

--- a/addons/analytic/models/analytic_account.py
+++ b/addons/analytic/models/analytic_account.py
@@ -1,16 +1,57 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models
+from odoo import api, fields, models, _
+from odoo.osv import expression
+from odoo.exceptions import ValidationError
 
 
+class AccountAnalyticDistribution(models.Model):
+    _name = 'account.analytic.distribution'
+    _rec_name = 'account_id'
+
+    account_id = fields.Many2one('account.analytic.account', string='Analytic Account', required=True)
+    percentage = fields.Float(string='Percentage', required=True, default=100.0)
+    name = fields.Char(string='Name', related='account_id.name')
+    tag_id = fields.Many2one('account.analytic.tag', string="Parent tag", required=True)
+
+    _sql_constraints = [
+        ('check_percentage', 'CHECK(percentage >= 0 AND percentage <= 100)',
+         'The percentage of an analytic distribution should be between 0 and 100.')
+    ]
+
 class AccountAnalyticTag(models.Model):
     _name = 'account.analytic.tag'
     _description = 'Analytic Tags'
     name = fields.Char(string='Analytic Tag', index=True, required=True)
     color = fields.Integer('Color Index')
     active = fields.Boolean(default=True, help="Set active to false to hide the Analytic Tag without removing it.")
-
+    active_analytic_distribution = fields.Boolean('Analytic Distribution')
+    analytic_distribution_ids = fields.One2many('account.analytic.distribution', 'tag_id', string="Analytic Accounts")
+    company_id = fields.Many2one('res.company', string='Company')
+
+class AccountAnalyticGroup(models.Model):
+    _name = 'account.analytic.group'
+    _description = 'Analytic Categories'
+    _parent_store = True
+    _rec_name = 'complete_name'
+
+    name = fields.Char(required=True)
+    description = fields.Text(string='Description')
+    parent_id = fields.Many2one('account.analytic.group', string="Parent", ondelete='cascade')
+    parent_left = fields.Integer('Left Parent', index=True)
+    parent_right = fields.Integer('Right Parent', index=True)
+    children_ids = fields.One2many('account.analytic.group', 'parent_id', string="Childrens")
+    complete_name = fields.Char('Complete Name', compute='_compute_complete_name', store=True)
+    company_id = fields.Many2one('res.company', string='Company')
+
+    @api.depends('name', 'parent_id.complete_name')
+    def _compute_complete_name(self):
+        for group in self:
+            if group.parent_id:
+                group.complete_name = '%s / %s' % (group.parent_id.complete_name, group.name)
+            else:
+                group.complete_name = group.name
 
 class AccountAnalyticAccount(models.Model):
     _name = 'account.analytic.account'
@@ -20,22 +61,31 @@ class AccountAnalyticAccount(models.Model):
 
     @api.multi
     def _compute_debit_credit_balance(self):
+        res_currency_obj = self.env['res.currency']
         analytic_line_obj = self.env['account.analytic.line']
         domain = [('account_id', 'in', self.mapped('id'))]
         if self._context.get('from_date', False):
             domain.append(('date', '>=', self._context['from_date']))
         if self._context.get('to_date', False):
             domain.append(('date', '<=', self._context['to_date']))
-
-        account_amounts = analytic_line_obj.search_read(domain, ['account_id', 'amount'])
+        if self._context.get('tag_ids'):
+            tag_domain = expression.OR([[('tag_ids', 'in', [tag])] for tag in self._context['tag_ids']])
+            domain = expression.AND([domain, tag_domain])
+        if self._context.get('company_ids'):
+            domain.append(('company_id', 'in', self._context['company_ids']))
+
+        user_currency = self.env.user.company_id.currency_id
+        account_amounts = analytic_line_obj.search_read(domain, ['account_id', 'amount', 'currency_id'])
         account_ids = set([line['account_id'][0] for line in account_amounts])
         data_debit = {account_id: 0.0 for account_id in account_ids}
         data_credit = {account_id: 0.0 for account_id in account_ids}
         for account_amount in account_amounts:
-            if account_amount['amount'] < 0.0:
-                data_debit[account_amount['account_id'][0]] += account_amount['amount']
+            currency_id = account_amount['currency_id'][0]
+            amount = res_currency_obj.browse(currency_id).compute(account_amount['amount'], user_currency)
+            if amount < 0.0:
+                data_debit[account_amount['account_id'][0]] += amount
             else:
-                data_credit[account_amount['account_id'][0]] += account_amount['amount']
+                data_credit[account_amount['account_id'][0]] += amount
 
         for account in self:
             account.debit = abs(data_debit.get(account.id, 0.0))
@@ -46,10 +96,11 @@ class AccountAnalyticAccount(models.Model):
     code = fields.Char(string='Reference', index=True, track_visibility='onchange')
     active = fields.Boolean('Active', help="If the active field is set to False, it will allow you to hide the account without removing it.", default=True)
 
-    tag_ids = fields.Many2many('account.analytic.tag', 'account_analytic_account_tag_rel', 'account_id', 'tag_id', string='Tags', copy=True)
+    group_id = fields.Many2one('account.analytic.group', string='Group')
+
     line_ids = fields.One2many('account.analytic.line', 'account_id', string="Analytic Lines")
 
-    company_id = fields.Many2one('res.company', string='Company', required=True, default=lambda self: self.env.user.company_id)
+    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.user.company_id)
 
     # use auto_join to speed up name_search call
     partner_id = fields.Many2one('res.partner', string='Customer', auto_join=True, track_visibility='onchange')
@@ -66,9 +117,9 @@ class AccountAnalyticAccount(models.Model):
         for analytic in self:
             name = analytic.name
             if analytic.code:
-                name = '['+analytic.code+'] '+name
+                name = '[' + analytic.code + '] ' + name
             if analytic.partner_id:
-                name = name +' - '+analytic.partner_id.commercial_partner_id.name
+                name = name + ' - ' + analytic.partner_id.commercial_partner_id.name
             res.append((analytic.id, name))
         return res
 
@@ -101,8 +152,14 @@ class AccountAnalyticLine(models.Model):
     account_id = fields.Many2one('account.analytic.account', 'Analytic Account', required=True, ondelete='restrict', index=True)
     partner_id = fields.Many2one('res.partner', string='Partner')
     user_id = fields.Many2one('res.users', string='User', default=_default_user)
-
     tag_ids = fields.Many2many('account.analytic.tag', 'account_analytic_line_tag_rel', 'line_id', 'tag_id', string='Tags', copy=True)
+    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, default=lambda self: self.env.user.company_id)
+    currency_id = fields.Many2one(related="company_id.currency_id", string="Currency", readonly=True, store=True)
+    group_id = fields.Many2one('account.analytic.group', related='account_id.group_id', store=True, readonly=True)
 
-    company_id = fields.Many2one(related='account_id.company_id', string='Company', store=True, readonly=True)
-    currency_id = fields.Many2one(related="company_id.currency_id", string="Currency", readonly=True)
+    @api.multi
+    @api.constrains('company_id', 'account_id')
+    def _check_company_id(self):
+        for line in self:
+            if line.account_id.company_id and line.company_id.id != line.account_id.company_id.id:
+                raise ValidationError(_('The selected account belongs to another company that the one you\'re trying to create an analytic item for'))
