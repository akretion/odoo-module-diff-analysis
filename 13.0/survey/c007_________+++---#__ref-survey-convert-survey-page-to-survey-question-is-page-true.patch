PR: https://github.com/odoo/odoo/pull/

From: dba478332681dd21a39c4a183c002b1cf6e046d2
From: AurÃ©lien Warnon
Date: 2019-02-06 09:37:59

Structural Changes: 22
Total Changes: 115

[REF] survey: convert survey.page to survey.question -> is_page=True

Task #1902306

Purpose
=======

survey.question is now also the model used for the survey's pages (with the "is_page" field set to True).
This allows to put all the pages and questions together in a o2m field on the view side and
easily reorganize your survey by dragging the items around.

It also removes one level of encoding by directly having 'Add a page' and 'Add a question'
links on the tree view of questions, enabling a faster encoding.

However, this has the downside of making the code reading a little bit more complicated.
Efforts were made at the model level to create computed fields so that the use of these models
still seems somewhat logical. That means:
- A survey still has "page_ids" (question_and_page_ids filtered on is_page = True)
- These "page_ids" still have question_ids (questions located between this page and the next)
- These "question_ids" still have a "page_id"

That makes the use and display of these information at view and controller levels easier to understand.

================================= pseudo patch: =================================

--- a/addons/survey/models/__init__.py
+++ b/addons/survey/models/__init__.py
@@ -3,7 +3,6 @@
 
 from . import ir_autovacuum
 from . import survey_survey
-from . import survey_page
 from . import survey_question
 from . import survey_stage
 from . import survey_user

--- a/addons/survey/models/survey_page.py
+++ b/None
@@ -1,19 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-
-class SurveyPage(models.Model):
-    """ A page for a survey. Pages are essentially containers, allowing to group questions by ordered
-        screens. """
-    _name = 'survey.page'
-    _description = 'Survey Page'
-    _rec_name = 'title'
-    _order = 'sequence,id'
-
-    title = fields.Char('Page Title', required=True, translate=True)
-    survey_id = fields.Many2one('survey.survey', string='Survey', ondelete='cascade', required=True)
-    question_ids = fields.One2many('survey.question', 'page_id', string='Questions', copy=True)
-    sequence = fields.Integer('Page number', default=10)
-    description = fields.Html('Description', translate=True, oldname="note", help="An introductory text to your page")
\ No newline at end of file

--- a/addons/survey/models/survey_question.py
+++ b/addons/survey/models/survey_question.py
@@ -21,22 +21,46 @@ def dict_keys_startswith(dictionary, string):
 
 
 class SurveyQuestion(models.Model):
-    """ Questions that will be asked in a survey. Each question can have one of more suggested answers (eg. in case of
-    dropdown choices, multi-answer checkboxes, radio buttons...). """
+    """ Questions that will be asked in a survey.
+
+        Each question can have one of more suggested answers (eg. in case of
+        dropdown choices, multi-answer checkboxes, radio buttons...).
+
+        Technical note:
+
+        survey.question is also the model used for the survey's pages (with the "is_page" field set to True).
+        This allows to put all the pages and questions together in a o2m field on the view side and
+        easily reorganize your survey by dragging the items around.
+
+        It also removes on level of encoding by directly having 'Add a page' and 'Add a question'
+        links on the tree view of questions, enabling a faster encoding.
+
+        However, this has the downside of making the code reading a little bit more complicated.
+        Efforts were made at the model level to create computed fields so that the use of these models
+        still seems somewhat logical. That means:
+        - A survey still has "page_ids" (question_and_page_ids filtered on is_page = True)
+        - These "page_ids" still have question_ids (questions located between this page and the next)
+        - These "question_ids" still have a "page_id"
+
+        That makes the use and display of these information at view and controller levels easier to understand.
+    """
+
     _name = 'survey.question'
     _description = 'Survey Question'
     _rec_name = 'question'
     _order = 'sequence,id'
 
     # Question metadata
-    page_id = fields.Many2one(
-        'survey.page', string='Survey page',
-        ondelete='cascade', required=True, default=lambda self: self.env.context.get('page_id'))
-    survey_id = fields.Many2one('survey.survey', related='page_id.survey_id', string='Survey', readonly=False)
+    survey_id = fields.Many2one('survey.survey', string='Survey', ondelete='cascade')
+    page_id = fields.Many2one('survey.question', string='Page', compute="_compute_page_id", store=True)
+    question_ids = fields.One2many('survey.question', string='Questions', compute="_compute_question_ids")
     sequence = fields.Integer('Sequence', default=10)
     # Question
-    question = fields.Char('Question Name', required=True, translate=True)
+    is_page = fields.Boolean('Is a page?')
+    title = fields.Char('Title', required=True, translate=True)
+    question = fields.Char('Question', related="title")
     description = fields.Html('Description', help="Use this field to add additional explanations about your question", translate=True)
+
     question_type = fields.Selection([
         ('free_text', 'Multiple Lines Text Box'),
         ('textbox', 'Single Line Text Box'),
@@ -282,6 +306,49 @@ class SurveyQuestion(models.Model):
                 errors.update({answer_tag: self.constr_error_msg})
         return errors
 
+    @api.multi
+    @api.depends('survey_id.question_and_page_ids.is_page', 'survey_id.question_and_page_ids.sequence')
+    def _compute_question_ids(self):
+        """Will take all questions of the survey for which the index is higher than the index of this page
+        and lower than the index of the next page."""
+        for question in self:
+            if question.is_page:
+                next_page_index = False
+                for page in question.survey_id.page_ids:
+                    if page._index() > question._index():
+                        next_page_index = page._index()
+                        break
+
+                question.question_ids = question.survey_id.question_ids.filtered(lambda q:
+                    q._index() > question._index() and (not next_page_index or q._index() < next_page_index))
+            else:
+                question.question_ids = self.env['survey.question']
+
+    @api.multi
+    @api.depends('survey_id.question_and_page_ids.is_page', 'survey_id.question_and_page_ids.sequence')
+    def _compute_page_id(self):
+        """Will find the page to which this question belongs to by looking inside the corresponding survey"""
+        for question in self:
+            if question.is_page:
+                question.page_id = None
+            else:
+                question.page_id = next(
+                    (iter(question
+                        .survey_id
+                        .question_and_page_ids
+                        .filtered(lambda q: q.is_page and q.sequence < question.sequence)
+                        .sorted(reverse=True))),
+                    None
+                )
+
+    @api.multi
+    def _index(self):
+        """We would normally just use the 'sequence' field of questions BUT, if the pages and questions are
+        created without ever moving records around, the sequence field can be set to 0 for all the questions.
+
+        However, the order of the recordset is always correct so we can rely on the index method."""
+        self.ensure_one()
+        return list(self.survey_id.question_and_page_ids).index(self)
 
 class SurveyLabel(models.Model):
     """ A suggested answer for a question """

--- a/addons/survey/models/survey_survey.py
+++ b/addons/survey/models/survey_survey.py
@@ -33,6 +33,9 @@ class Survey(models.Model):
     thank_you_message = fields.Html("Thanks Message", translate=True, help="This message will be displayed when survey is completed")
     quizz_mode = fields.Boolean("Quizz Mode")
     active = fields.Boolean("Active", default=True)
+    question_and_page_ids = fields.One2many('survey.question', 'survey_id', string='Pages and Questions', copy=True)
+    page_ids = fields.One2many('survey.question', string='Pages', compute="_compute_page_and_question_ids")
+    question_ids = fields.One2many('survey.question', string='Questions', compute="_compute_page_and_question_ids")
     stage_id = fields.Many2one('survey.stage', string="Stage", default=lambda self: self._get_default_stage_id(),
                                ondelete="restrict", copy=False, group_expand='_read_group_stage_ids')
     is_closed = fields.Boolean("Is closed", related='stage_id.closed', readonly=True)
@@ -41,7 +44,6 @@ class Survey(models.Model):
         default='default', required=True,
         help='Category is used to know in which context the survey is used. Various apps may define their own categories when they use survey like jobs recruitment or employee appraisal surveys.')
     # content
-    page_ids = fields.One2many('survey.page', 'survey_id', string='Pages', copy=True)
     user_input_ids = fields.One2many('survey.user_input', 'survey_id', string='User responses', readonly=True, groups='survey.group_survey_user')
     # security / access
     access_mode = fields.Selection([
@@ -91,6 +93,12 @@ class Survey(models.Model):
         for survey in self:
             survey.public_url = urls.url_join(base_url, "survey/start/%s" % (survey.access_token))
 
+    @api.depends('question_and_page_ids')
+    def _compute_page_and_question_ids(self):
+        for survey in self:
+            survey.page_ids = survey.question_and_page_ids.filtered(lambda question: question.is_page)
+            survey.question_ids = survey.question_and_page_ids - survey.page_ids
+
     @api.model
     def _read_group_stage_ids(self, stages, domain, order):
         """ Read group customization in order to display all the stages in the

--- a/addons/survey/models/survey_user.py
+++ b/addons/survey/models/survey_user.py
@@ -43,10 +43,12 @@ class SurveyUserInput(models.Model):
     token = fields.Char('Identification token', default=lambda self: str(uuid.uuid4()), readonly=True, required=True, copy=False)
     partner_id = fields.Many2one('res.partner', string='Partner', readonly=True)
     email = fields.Char('E-mail', readonly=True)
+
+    # Displaying data
+    last_displayed_page_id = fields.Many2one('survey.question', string='Last displayed page')
     # answers
     user_input_line_ids = fields.One2many('survey.user_input_line', 'user_input_id', string='Answers', copy=True)
     deadline = fields.Datetime('Deadline', help="Datetime until customer can open the survey and submit answers")
-    last_displayed_page_id = fields.Many2one('survey.page', string='Last displayed page')
     quizz_score = fields.Float("Score for the quiz", compute="_compute_quizz_score", default=0.0)
 
     @api.depends('user_input_line_ids.quizz_mark')
