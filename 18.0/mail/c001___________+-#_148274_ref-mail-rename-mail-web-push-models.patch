PR: https://github.com/odoo/odoo/pull/148274

From: 175d7d7e04d982466ef6c69d370ffc40fc95ae96
From: Thibault DelavallÃ©e
Date: 2024-01-13 00:36:24

Structural Changes: 3
Total Changes: 322

[REF] mail: rename mail web push models

Improve naming of push models: use 'mail.push' namespace

  * 'mail.notification.web.push' -> 'mail.push' is sufficient and understandable
    while being shorter;
  * 'mail.partner.device' -> 'mail.push.device' to use the mail.push namespace;

Update 'user_device' field name to 'mail_push_device_id' (both for new model
name and _id indicating it is a m2o).

Task-3669738

Part-of: odoo/odoo#148274

================================= pseudo patch: =================================

--- a/addons/mail/models/__init__.py
+++ b/addons/mail/models/__init__.py
@@ -36,8 +36,8 @@ from . import mail_message_subtype
 from . import mail_message_translation
 from . import mail_message
 from . import mail_mail
-from . import mail_notification_web_push
-from . import mail_partner_device
+from . import mail_push
+from . import mail_push_device
 from . import mail_tracking_value
 from . import mail_template
 

--- a/addons/mail/models/mail_notification_web_push.py
+++ b/addons/mail/models/mail_push.py
@@ -11,17 +11,17 @@ from odoo.addons.mail.tools.web_push import push_to_end_point, DeviceUnreachable
 _logger = logging.getLogger(__name__)
 
 
-class MailNotificationWebPush(models.Model):
-    _name = 'mail.notification.web.push'
-    _description = 'Cron data used for web push notification'
+class MailPush(models.Model):
+    _name = 'mail.push'
+    _description = "Push Notifications"
 
-    user_device = fields.Many2one('mail.partner.device', string='devices', required=True, ondelete="cascade")
+    mail_push_device_id = fields.Many2one('mail.push.device', string='devices', required=True, ondelete="cascade")
     payload = fields.Text()
 
     @api.model
     def _push_notification_to_endpoint(self, batch_size=50):
         """Send to web browser endpoint computed notification"""
-        web_push_notifications_sudo = self.sudo().search_fetch([], ['user_device', 'payload'], limit=batch_size)
+        web_push_notifications_sudo = self.sudo().search_fetch([], ['mail_push_device_id', 'payload'], limit=batch_size)
         if not web_push_notifications_sudo:
             return
 
@@ -35,9 +35,9 @@ class MailNotificationWebPush(models.Model):
         devices_to_unlink = set()
 
         # process send notif
-        devices = web_push_notifications_sudo.user_device.grouped('id')
+        devices = web_push_notifications_sudo.mail_push_device_id.grouped('id')
         for web_push_notification_sudo in web_push_notifications_sudo:
-            device = devices.get(web_push_notification_sudo.user_device.id)
+            device = devices.get(web_push_notification_sudo.mail_push_device_id.id)
             if device.id in devices_to_unlink:
                 continue
             try:
@@ -61,7 +61,7 @@ class MailNotificationWebPush(models.Model):
 
         # clean up obsolete devices
         if devices_to_unlink:
-            self.env['mail.partner.device'].sudo().browse(devices_to_unlink).unlink()
+            self.env['mail.push.device'].sudo().browse(devices_to_unlink).unlink()
 
         # restart the cron if needed
         if self.search_count([]) > 0:

--- a/addons/mail/models/mail_partner_device.py
+++ b/addons/mail/models/mail_push_device.py
@@ -1,24 +1,22 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
+
 import json
 import logging as logger
 
 from odoo import api, fields, models
-from ..tools.jwt import generate_vapid_keys
+from ..tools.jwt import generate_vapid_keys, InvalidVapidError
 
 _logger = logger.getLogger(__name__)
 
 
-class InvalidVapidError(Exception):
-    pass
-
-
-class MailPartnerDevice(models.Model):
-    _name = 'mail.partner.device'
-    _description = 'Partner Web Push Device'
+class MailPushDevice(models.Model):
+    _name = 'mail.push.device'
+    _description = "Push Notification Device"
 
-    partner_id = fields.Many2one('res.partner', string='Partner', index=True, required=True,
-                                 default=lambda self: self.env.user.partner_id)
+    partner_id = fields.Many2one(
+        'res.partner', string='Partner', index=True, required=True,
+        default=lambda self: self.env.user.partner_id)
     endpoint = fields.Char(string='Browser endpoint', required=True)
     keys = fields.Char(string='Browser keys', required=True,
                        help=("It's refer to browser keys used by the notification: \n"
@@ -54,10 +52,10 @@ class MailPartnerDevice(models.Model):
         if not endpoint or not browser_keys:
             return
         search_endpoint = kw.get('previousEndpoint', endpoint)
-        user_device = self.sudo().search([('endpoint', '=', search_endpoint)])
-        if user_device:
-            if user_device.partner_id is not self.env.user.partner_id:
-                user_device.write({
+        mail_push_device = self.sudo().search([('endpoint', '=', search_endpoint)])
+        if mail_push_device:
+            if mail_push_device.partner_id is not self.env.user.partner_id:
+                mail_push_device.write({
                     'endpoint': endpoint,
                     'expiration_time': kw.get('expirationTime'),
                     'keys': json.dumps(browser_keys),
@@ -76,11 +74,11 @@ class MailPartnerDevice(models.Model):
         endpoint = kw.get('endpoint')
         if not endpoint:
             return
-        user_device = self.sudo().search([
+        mail_push_device = self.sudo().search([
             ('endpoint', '=', endpoint)
         ])
-        if user_device:
-            user_device.unlink()
+        if mail_push_device:
+            mail_push_device.unlink()
 
     def _verify_vapid_public_key(self, sw_public_key):
         ir_params_sudo = self.env['ir.config_parameter'].sudo()

--- a/addons/mail/models/mail_thread.py
+++ b/addons/mail/models/mail_thread.py
@@ -3586,7 +3586,7 @@ class MailThread(models.AbstractModel):
         if not partner_ids:
             return
 
-        partner_devices_sudo = self.env['mail.partner.device'].sudo()
+        partner_devices_sudo = self.env['mail.push.device'].sudo()
         devices = partner_devices_sudo.search([
             ('partner_id', 'in', partner_ids)
         ])
@@ -3628,11 +3628,11 @@ class MailThread(models.AbstractModel):
             # clean up obsolete devices
             if devices_to_unlink:
                 devices_list = list(devices_to_unlink)
-                self.env['mail.partner.device'].sudo().browse(devices_list).unlink()
+                self.env['mail.push.device'].sudo().browse(devices_list).unlink()
 
         else:
-            self.env['mail.notification.web.push'].sudo().create([{
-                'user_device': device.id,
+            self.env['mail.push'].sudo().create([{
+                'mail_push_device_id': device.id,
                 'payload': json.dumps(payload),
             } for device in devices])
             self.env.ref('mail.ir_cron_web_push_notification')._trigger()
