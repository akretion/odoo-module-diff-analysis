PR: https://github.com/odoo/odoo/pull/101730

From: 7c4da16b5961dd734b76127d79052112fde630db
From: Dossogne Bertrand
Date: 2022-10-04 07:55:46

Structural Changes: 5
Total Changes: 71

[IMP] mail, various: improve mail template usability

Allow our users to modify mail template more easily

- make the list accessible from the settings
- give them a link to update relevant views to update header/footer
- make the list and form of templates more readable
- add a description on templates, allowing to describe their usage

In order to better filter templates, a new category field is added that
is computed based on active flag, description being set and the template
having an xml ID. Master templates are active, with a description and an
xml ID.

Update master data to add description on some templates.

task-2944770

closes odoo/odoo#101730

X-original-commit: dfa867343ee8842f3f127ac62584fd471b41dde1
Related: odoo/enterprise#32079
Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_template.py
+++ b/addons/mail/models/mail_template.py
@@ -29,6 +29,15 @@ class MailTemplate(models.Model):
 
     # description
     name = fields.Char('Name', translate=True)
+    description = fields.Text(
+        'Template description', translate=True,
+        help="This field is used for internal description of the template's usage.")
+    active = fields.Boolean(default=True)
+    template_category = fields.Selection(
+        [('base_template', 'Base Template'),
+         ('hidden_template', 'Hidden Template'),
+         ('custom_template', 'Custom Template')],
+         compute="_compute_template_category", search="_search_template_category")
     model_id = fields.Many2one('ir.model', 'Applies to')
     model = fields.Char('Related Document Model', related='model_id.model', index=True, store=True, readonly=True)
     subject = fields.Char('Subject', translate=True, prefetch=True, help="Subject (placeholders may be used here)")
@@ -85,6 +94,42 @@ class MailTemplate(models.Model):
         for template in self:
             template.can_write = template in writable_templates
 
+    @api.depends('active', 'description')
+    def _compute_template_category(self):
+        """ Base templates (or master templates) are active templates having
+        a description and an XML ID. User defined templates (no xml id),
+        templates without description or archived templates are not
+        base templates anymore. """
+        deactivated = self.filtered(lambda template: not template.active)
+        if deactivated:
+            deactivated.template_category = 'hidden_template'
+        remaining = self - deactivated
+        if remaining:
+            template_external_ids = remaining.get_external_id()
+            for template in remaining:
+                if bool(template_external_ids[template.id]) and template.description:
+                    template.template_category = 'base_template'
+                elif bool(template_external_ids[template.id]):
+                    template.template_category = 'hidden_template'
+                else:
+                    template.template_category = 'custom_template'
+
+    @api.model
+    def _search_template_category(self, operator, value):
+        if operator in ['in', 'not in'] and isinstance(value, list):
+            value_templates = self.env['mail.template'].search([]).filtered(
+                lambda t: t.template_category in value
+            )
+            return [('id', operator, value_templates.ids)]
+
+        if operator in ['=', '!='] and isinstance(value, str):
+            value_templates = self.env['mail.template'].search([]).filtered(
+                lambda t: t.template_category == value
+            )
+            return [('id', 'in' if operator == "=" else 'not in', value_templates.ids)]
+
+        raise NotImplementedError(_('Operation not supported'))
+
     # ------------------------------------------------------------
     # CRUD
     # ------------------------------------------------------------

--- a/addons/mail/models/mail_thread.py
+++ b/addons/mail/models/mail_thread.py
@@ -3073,10 +3073,12 @@ class MailThread(models.AbstractModel):
 
         for record in self:
             model_description = self.env['ir.model']._get(record._name).display_name
+            company = record.company_id.sudo() if 'company_id' in record else self.env.company
             values = {
-                'object': record,
-                'model_description': model_description,
                 'access_link': record._notify_get_action_link('view'),
+                'company': company,
+                'model_description': model_description,
+                'object': record,
             }
             assignation_msg = self.env['ir.qweb']._render(template, values, minimal_qcontext=True)
             assignation_msg = self.env['mail.render.mixin']._replace_local_links(assignation_msg)

--- a/addons/mail/models/res_config_settings.py
+++ b/addons/mail/models/res_config_settings.py
@@ -3,7 +3,8 @@
 
 import datetime
 
-from odoo import api, fields, models, tools
+from odoo import _, fields, models
+from odoo.exceptions import UserError
 
 
 class ResConfigSettings(models.TransientModel):
@@ -35,6 +36,8 @@ class ResConfigSettings(models.TransientModel):
         'Twilio Account Auth Token',
         config_parameter='mail.twilio_account_token',
     )
+    primary_color = fields.Char(related='company_id.primary_color', string="Header Color", readonly=False)
+    secondary_color = fields.Char(related='company_id.secondary_color', string="Button Color", readonly=False)
 
     def _compute_fail_counter(self):
         previous_date = fields.Datetime.now() - datetime.timedelta(days=30)
@@ -43,3 +46,18 @@ class ResConfigSettings(models.TransientModel):
             ('date', '>=', previous_date),
             ('state', '=', 'exception'),
         ])
+
+    def open_email_layout(self):
+        layout = self.env.ref('mail.mail_notification_layout', raise_if_not_found=False)
+        if not layout:
+            raise UserError(_("This layout seems to no longer exist."))
+        return {
+            'type': 'ir.actions.act_window',
+            'name': _('Mail Layout'),
+            'view_mode': 'form',
+            'res_id': layout.id,
+            'res_model': 'ir.ui.view',
+        }
+
+    def open_mail_templates(self):
+        return self.env['ir.actions.actions']._for_xml_id('mail.action_email_template_tree_all')
