PR: https://github.com/odoo/odoo/pull/

From: beaa30a3d1843de43a45f419bfbc1bfa7613a920
From: Laurent Smet
Date: 2019-06-28 11:52:55

Breaking data model changes score: 1, change matches:
-    _inherit = 'account.invoice'

Total Changes: 302

[IMP/REF] accounting-pocalypse yeaaahh

This commit merges the following models
 * account.invoice and account.move
 * account.invoice.line and account.move.line
 * account.voucher and account.move
 * account.voucher.line and account.move.line

It was the opportunity for a big cleanup of the code, so it also restructures the whole account module, its different models/fields, the tests etc. for a better world and a better code readability.

==== Rationale ====
The rationale of this huge change is that we want journal entries / invoices to be easily edited, and changes reflected in the other model. It's a HUGE feature and very strategic for the fiduciary companies. For example, changing the account of a journal entry needs to be automatically reflected on the related invoice.

The same reasoning applies to sale/purchase vouchers.

==== Changes made in features =====
When creating an invoice, you are now creating a journal entry directly.
*-> The object account.invoice no longer exists.
In the same fashion when creating an invoice line, you're now adding journal items directly in the journal entry representing the invoice. If this invoice line has some tax, it may create additional journal items as well.
*-> The models account.invoice.line & account.invoice.tax no longer exist

Identically, when creating a sale/purchase receipt with its lines, you are now creating a journal entry directly and there's no more usability difference between encoding a receipt or an invoice.
*-> The object account.voucher no longer exists.
*-> The object account.voucher.line no longer exists.
*-> The whole account_voucher module no longer exists.

Positive side-effects coming from these changes are
* draft invoices/bills/sale or purchase receipts now create a draft accounting entry. Validate these objects now simply post its journal entry. That means that draft invoices/bills/sale or purchase receipt can straightforwardly be included in reporting or budgets.
* opening a journal entry in form view will now always open the correct view: if it's a sale/purchase journal entry we will have a customer invoice/vendor bill view or a sale/purchase receipt view, whatever the menu we're coming from.
* code & business logic simplification. It is also condensed in a single place instead of being partially duplicated on invoices, vouchers and journal entries.

There should be no feature loss, except the one allowing to group multiple journal items together based on the same product during the invoice validation.

==== Changes made in models =====
* account.invoice: model removed. Instead, now use account.move with following mapping

field (account.invoice) 		field (account.move)
*----------------------			--------------------
name 					invoice_payment_ref
number 					name
reference 				ref
comment 				narration
user_id 				invoice_user_id
amount_					total_company_signed amount_total_signed
residual 				amount_residual
state 					state + invoice_payment_state 		/!\ selection changed
date_invoice 				invoice_date
date_due 				invoice_date_due
sent 					invoice_sent
origin 					invoice_origin
payment_term_id 			invoice_payment_term_id
partner_bank_id 			invoice_partner_bank_id
incoterm_id 				invoice_incoterm_id
vendor_bill_id 				invoice_vendor_bill_id
source_email 				invoice_source_email
vendor_display_name 			invoice_vendor_display_name
invoice_icon 				invoice_vendor_icon
cash_rounding_id 			invoice_cash_rounding_id
sequence_number_next 			invoice_sequence_number_next
sequence_number_next_prefix 		invoice_sequence_number_next_prefix

'invoices' subset of account.move can be accessed by using the selection field 'type' or one of the many helpers like is_invoice()

* account.move: now has a valid state 'cancel' that has to be excluded from all business logic
* account.move: field 'amount' renamed into 'amount_total'
* account.move: field 'reverse_entry_id' renamed into 'reversed_entry_id'
* account.move.line: now has a field 'display_type' that has to be excluded from all business logic, in order to support invoice layouting
* account.invoice.line: model removed. Instead, now use account.move.line with following mapping

field (account.invoice.line) 		field (account.move.line)
*---------------------------		-------------------------
invoice_id 				move_id
uom_id 					product_uom_id
invoice_line_tax_ids 			tax_ids
account_analytic_id 			analytic_account_id

'invoice lines' subset of all account.move.line from a journal entry can be accessed by using the boolean field 'exclude_from_invoice_tab'

* account.invoice.tax: model removed. Instead, now use account.move.line with following mapping

field (account.invoice.tax) 		field (account.move.line)
*--------------------------		-------------------------
invoice_id 				move_id
account_analytic_id 			analytic_account_id
amount 					price_unit
base 					tax_base_amount

'tax lines' subset of all account.move.line from a journal entry can be accessed by using the relational field 'tax_line_id'

* account.invoice.confirm: model removed. Instead, now use the 'post()' function of account.move
* account.invoice.refund: model removed. Instead, now use account.move.reversal to reverse the entries with the same options as we had for invoices
* account.voucher: model removed. Instead, now use account.move of type in ['out_receipt', 'in_receipt]
* account.voucher.line: model removed. Instead, now use account.move.line

==== Changes made in functions ====
* on account.move, method _run_post_draft_to_post() renamed into _autopost_draft_entries()
* on account.move, method action_account_invoice_payment() renamed into action_invoice_register_payment()
* on account.move, method action_invoice_reconcile_to_check() renamed into action_open_matching_suspense_moves()
* on account.move, method _get_domain_edition_mode_available() renamed into _get_domain_matching_supsense_moves()
* on account.move, method _get_intrastat_country_id() renamed into _get_invoice_intrastat_country_id()
* on account.move.line, method _get_domain_for_edition_mode() renamed into _get_suspense_moves_domain()
* in account.bank.statement, contextual key 'edition_mode' renamed into 'suspense_moves_mode'

Was task 1917430

================================= pseudo patch: =================================

--- a/addons/purchase_stock/models/account_invoice.py
+++ b/addons/purchase_stock/models/account_invoice.py
@@ -5,151 +5,171 @@ from odoo import api, fields, models
 from odoo.tools.float_utils import float_compare
 
 
-class AccountInvoice(models.Model):
-    _inherit = 'account.invoice'
-
-    @api.model
-    def invoice_line_move_line_get(self):
-        res = super(AccountInvoice, self).invoice_line_move_line_get()
-
-        if self.env.company.anglo_saxon_accounting:
-            if self.type in ['in_invoice', 'in_refund']:
-                for i_line in self.invoice_line_ids:
-                    res.extend(self._anglo_saxon_purchase_move_lines(i_line, res))
-        return res
-
-    @api.model
-    def _anglo_saxon_purchase_move_lines(self, i_line, res):
-        """Return the additional move lines for purchase invoices and refunds.
-
-        i_line: An account.invoice.line object.
-        res: The move line entries produced so far by the parent move_line_get.
-        """
-        inv = i_line.invoice_id
-        company_currency = inv.company_id.currency_id
-        if i_line.product_id and i_line.product_id.valuation == 'real_time' and i_line.product_id.type == 'product':
-            # get the fiscal position
-            fpos = i_line.invoice_id.fiscal_position_id
-            # get the price difference account at the product
-            acc = i_line.product_id.property_account_creditor_price_difference
-            if not acc:
-                # if not found on the product get the price difference account at the category
-                acc = i_line.product_id.categ_id.property_account_creditor_price_difference_categ
-            acc = fpos.map_account(acc).id
-            # reference_account_id is the stock input account
-            reference_account_id = i_line.product_id.product_tmpl_id.get_product_accounts(fiscal_pos=fpos)['stock_input'].id
-            diff_res = []
-            # calculate and write down the possible price difference between invoice price and product price
-            for line in res:
-                if line.get('invl_id', 0) == i_line.id and reference_account_id == line['account_id']:
-                    # valuation_price unit is always expressed in invoice currency, so that it can always be computed with the good rate
-                    valuation_price_unit = company_currency._convert(
-                        i_line.product_id.uom_id._compute_price(i_line.product_id.standard_price, i_line.uom_id),
-                        inv.currency_id,
-                        company=inv.company_id, date=fields.Date.today(), round=False,
-                    )
+class AccountMove(models.Model):
+    _inherit = 'account.move'
+
+    @api.multi
+    def _stock_account_prepare_anglo_saxon_in_lines_vals(self):
+        ''' Prepare values used to create the journal items (account.move.line) corresponding to the price difference
+         lines for vendor bills.
+
+        Example:
+
+        Buy a product having a cost of 9 and a supplier price of 10 and being a storable product and having a perpetual
+        valuation in FIFO. The vendor bill's journal entries looks like:
+
+        Account                                     | Debit | Credit
+        ---------------------------------------------------------------
+        101120 Stock Interim Account (Received)     | 10.0  |
+        ---------------------------------------------------------------
+        101100 Account Payable                      |       | 10.0
+        ---------------------------------------------------------------
+
+        This method computes values used to make two additional journal items:
+
+        ---------------------------------------------------------------
+        101120 Stock Interim Account (Received)     |       | 1.0
+        ---------------------------------------------------------------
+        xxxxxx Price Difference Account             | 1.0   |
+        ---------------------------------------------------------------
+
+        :return: A list of Python dictionary to be passed to env['account.move.line'].create.
+        '''
+        lines_vals_list = []
+
+        for move in self:
+            if move.type not in ('in_invoice', 'in_refund', 'in_receipt') or not move.company_id.anglo_saxon_accounting:
+                continue
+
+            for line in move.invoice_line_ids.filtered(lambda line: line.product_id.type == 'product' and line.product_id.valuation == 'real_time'):
+
+                # Filter out lines being not eligible for price difference.
+                if line.product_id.type != 'product' or line.product_id.valuation != 'real_time':
+                    continue
+
+                # Retrieve accounts needed to generate the price difference.
+                debit_pdiff_account = line.product_id.property_account_creditor_price_difference \
+                                or line.product_id.categ_id.property_account_creditor_price_difference_categ
+                debit_pdiff_account = move.fiscal_position_id.map_account(debit_pdiff_account)
+
+                if line.product_id.cost_method != 'standard' and line.purchase_line_id:
+                    po_currency = line.purchase_line_id.currency_id
+                    po_company = line.purchase_line_id.company_id
+
+                    # Retrieve stock valuation moves.
+                    valuation_stock_moves = self.env['stock.move'].search([
+                        ('purchase_line_id', '=', line.purchase_line_id.id),
+                        ('state', '=', 'done'),
+                        ('product_qty', '!=', 0.0),
+                    ])
+                    if move.type == 'in_refund':
+                        valuation_stock_moves = valuation_stock_moves.filtered(lambda stock_move: stock_move._is_out())
+                    else:
+                        valuation_stock_moves = valuation_stock_moves.filtered(lambda stock_move: stock_move._is_in())
+
+                    if valuation_stock_moves:
+                        valuation_price_unit_total = 0
+                        valuation_total_qty = 0
+                        for val_stock_move in valuation_stock_moves:
+                            # In case val_stock_move is a return move, its valuation entries have been made with the
+                            # currency rate corresponding to the original stock move
+                            valuation_date = val_stock_move.origin_returned_move_id.date or val_stock_move.date
+                            layers_qty = sum(val_stock_move.mapped('stock_valuation_layer_ids.quantity'))
+                            layers_values = sum(val_stock_move.mapped('stock_valuation_layer_ids.value'))
+                            valuation_price_unit_total += line.company_currency_id._convert(
+                                layers_values, move.currency_id,
+                                move.company_id, valuation_date, round=False,
+                            )
+                            valuation_total_qty += layers_qty
+                        valuation_price_unit = valuation_price_unit_total / valuation_total_qty
+                        valuation_price_unit = line.product_id.uom_id._compute_price(valuation_price_unit, line.product_uom_id)
 
-                    if i_line.product_id.cost_method != 'standard' and i_line.purchase_line_id:
-                        po_currency = i_line.purchase_id.currency_id
-                        po_company = i_line.purchase_id.company_id
-                        #for average/fifo/lifo costing method, fetch real cost price from incomming moves
+                    elif line.product_id.cost_method == 'fifo':
+                        # In this condition, we have a real price-valuated product which has not yet been received
                         valuation_price_unit = po_currency._convert(
-                            i_line.purchase_line_id.product_uom._compute_price(i_line.purchase_line_id.price_unit, i_line.uom_id),
-                            inv.currency_id,
-                            company=po_company, date=inv.date or inv.date_invoice, round=False,
+                            line.purchase_line_id.price_unit, move.currency_id,
+                            po_company, move.date, round=False,
                         )
-                        stock_move_obj = self.env['stock.move']
-                        valuation_stock_move = stock_move_obj.search([
-                            ('purchase_line_id', '=', i_line.purchase_line_id.id),
-                            ('state', '=', 'done'), ('product_qty', '!=', 0.0)
-                        ])
-                        if self.type == 'in_refund':
-                            valuation_stock_move = valuation_stock_move.filtered(lambda m: m._is_out())
-                        elif self.type == 'in_invoice':
-                            valuation_stock_move = valuation_stock_move.filtered(lambda m: m._is_in())
-
-                        if valuation_stock_move:
-                            valuation_price_unit_total = 0
-                            valuation_total_qty = 0
-                            for val_stock_move in valuation_stock_move:
-                                # In case val_stock_move is a return move, its valuation entries have been made with the
-                                # currency rate corresponding to the original stock move
-                                valuation_date = val_stock_move.origin_returned_move_id.date or val_stock_move.date
-                                layers_qty = sum(val_stock_move.mapped('stock_valuation_layer_ids.quantity'))
-                                layers_values = sum(val_stock_move.mapped('stock_valuation_layer_ids.value'))
-                                valuation_price_unit_total += company_currency._convert(
-                                    layers_values,
-                                    inv.currency_id,
-                                    company=inv.company_id, date=valuation_date, round=False,
-                                )
-                                valuation_total_qty += layers_qty
-
-                            # in Stock Move, price unit is in company_currency
-                            valuation_price_unit = valuation_price_unit_total / valuation_total_qty
-                            valuation_price_unit = i_line.product_id.uom_id._compute_price(valuation_price_unit, i_line.uom_id)
-
-                        elif i_line.product_id.cost_method == 'fifo':
-                            # In this condition, we have a real price-valuated product which has not yet been received
-                            valuation_price_unit = po_currency._convert(
-                                i_line.purchase_line_id.price_unit, inv.currency_id,
-                                company=po_company, date=inv.date or inv.date_invoice, round=False,
-                            )
+                    else:
+                        # For average/fifo/lifo costing method, fetch real cost price from incoming moves.
+                        price_unit = line.purchase_line_id.product_uom._compute_price(line.purchase_line_id.price_unit, line.product_uom_id)
+                        valuation_price_unit = po_currency._convert(
+                            price_unit, move.currency_id,
+                            po_company, move.date, round=False
+                        )
+
+                else:
+                    # Valuation_price unit is always expressed in invoice currency, so that it can always be computed with the good rate
+                    price_unit = line.product_id.uom_id._compute_price(line.product_id.standard_price, line.product_uom_id)
+                    valuation_price_unit = line.company_currency_id._convert(
+                        price_unit, move.currency_id,
+                        move.company_id, fields.Date.today(), round=False
+                    )
 
-                    interim_account_price = valuation_price_unit * line['quantity']
-                    invoice_cur_prec = inv.currency_id.decimal_places
-
-                    # price with discount and without tax included
-                    price_unit = i_line.price_unit * (1 - (i_line.discount or 0.0) / 100.0)
-                    tax_ids = []
-                    if line['tax_ids']:
-                        #line['tax_ids'] is -2many commands list for account.move.line
-                        tax_ids = [tax_data['id'] for tax_data in self.env['account.move.line'].resolve_2many_commands('tax_ids', line['tax_ids'], ['id'])]
-                        taxes = self.env['account.tax'].browse(tax_ids)
-                        price_unit = taxes.compute_all(price_unit, currency=inv.currency_id, quantity=1.0, is_refund=inv.type in ('in_refund', 'out_refund'))['total_excluded']
-
-                        for tax in taxes:
-                            tax_ids.append((4, tax.id, None))
-                            for child in tax.children_tax_ids:
-                                if child.type_tax_use != 'none':
-                                    tax_ids.append((4, child.id, None))
-
-                    if float_compare(valuation_price_unit, price_unit, precision_digits=invoice_cur_prec) != 0 and float_compare(line['price_unit'], i_line.price_unit, precision_digits=invoice_cur_prec) == 0:
-                        price_before = line.get('price', 0.0)
-                        price_unit_val_dif = price_unit - valuation_price_unit
-
-                        price_val_dif = price_before - interim_account_price
-                        if inv.currency_id.compare_amounts(price_unit, valuation_price_unit) != 0 and acc:
-                            # If the unit prices have not changed and we have a
-                            # valuation difference, it means this difference is due to exchange rates,
-                            # so we don't create anything, the exchange rate entries will
-                            # be processed automatically by the rest of the code.
-                            diff_line = {
-                                'type': 'src',
-                                'name': i_line.name[:64],
-                                'price_unit': price_unit_val_dif,
-                                'quantity': line['quantity'],
-                                'price': inv.currency_id.round(price_val_dif),
-                                'account_id': acc,
-                                'product_id': line['product_id'],
-                                'uom_id': line['uom_id'],
-                                'account_analytic_id': line['account_analytic_id'],
-                                'tax_ids': tax_ids,
-                            }
-                            # We update the original line accordingly
-                            # line['price_unit'] doesn't contain the discount, so use price_unit
-                            # instead. It could make sense to include the discount in line['price_unit'],
-                            # but that doesn't seem a good idea in stable since it is done in
-                            # "invoice_line_move_line_get" of "account.invoice".
-                            line['price_unit'] = inv.currency_id.round(price_unit - diff_line['price_unit'])
-                            line['price'] = inv.currency_id.round(line['price'] - diff_line['price'])
-                            diff_res.append(diff_line)
-            return diff_res
-        return []
-
-    def _get_last_step_stock_moves(self):
+                invoice_cur_prec = move.currency_id.decimal_places
+
+                price_unit = line.price_unit * (1 - (line.discount or 0.0) / 100.0)
+                if line.tax_ids:
+                    price_unit = line.tax_ids.compute_all(
+                        price_unit, currency=move.currency_id, quantity=1.0, is_refund=move.type == 'in_refund')['total_excluded']
+
+                if float_compare(valuation_price_unit, price_unit, precision_digits=invoice_cur_prec) != 0 \
+                        and float_compare(line['price_unit'], line.price_unit, precision_digits=invoice_cur_prec) == 0:
+
+                    price_unit_val_dif = price_unit - valuation_price_unit
+
+                    if move.currency_id.compare_amounts(price_unit, valuation_price_unit) != 0 and debit_pdiff_account:
+                        # Add price difference account line.
+                        vals = {
+                            'name': line.name[:64],
+                            'move_id': move.id,
+                            'currency_id': line.currency_id.id,
+                            'product_id': line.product_id.id,
+                            'product_uom_id': line.product_uom_id.id,
+                            'quantity': line.quantity,
+                            'price_unit': price_unit_val_dif,
+                            'price_subtotal': line.quantity * price_unit_val_dif,
+                            'account_id': debit_pdiff_account.id,
+                            'analytic_account_id': line.analytic_account_id.id,
+                            'analytic_tag_ids': [(6, 0, line.analytic_tag_ids.ids)],
+                            'exclude_from_invoice_tab': True,
+                            'is_anglo_saxon_line': True,
+                        }
+                        vals.update(line._get_fields_onchange_subtotal(price_subtotal=vals['price_subtotal']))
+                        lines_vals_list.append(vals)
+
+                        # Correct the amount of the current line.
+                        vals = {
+                            'name': line.name[:64],
+                            'move_id': move.id,
+                            'currency_id': line.currency_id.id,
+                            'product_id': line.product_id.id,
+                            'product_uom_id': line.product_uom_id.id,
+                            'quantity': line.quantity,
+                            'price_unit': -price_unit_val_dif,
+                            'price_subtotal': line.quantity * -price_unit_val_dif,
+                            'account_id': line.account_id.id,
+                            'analytic_account_id': line.analytic_account_id.id,
+                            'analytic_tag_ids': [(6, 0, line.analytic_tag_ids.ids)],
+                            'exclude_from_invoice_tab': True,
+                            'is_anglo_saxon_line': True,
+                        }
+                        vals.update(line._get_fields_onchange_subtotal(price_subtotal=vals['price_subtotal']))
+                        lines_vals_list.append(vals)
+        return lines_vals_list
+
+    @api.multi
+    def post(self):
+        # OVERRIDE
+        # Create additional price difference lines for vendor bills.
+        self.env['account.move.line'].create(self._stock_account_prepare_anglo_saxon_in_lines_vals())
+        return super(AccountMove, self).post()
+
+    @api.multi
+    def _stock_account_get_last_step_stock_moves(self):
         """ Overridden from stock_account.
         Returns the stock moves associated to this invoice."""
-        rslt = super(AccountInvoice, self)._get_last_step_stock_moves()
+        rslt = super(AccountMove, self)._stock_account_get_last_step_stock_moves()
         for invoice in self.filtered(lambda x: x.type == 'in_invoice'):
             rslt += invoice.mapped('invoice_line_ids.purchase_line_id.move_ids').filtered(lambda x: x.state == 'done' and x.location_id.usage == 'supplier')
         for invoice in self.filtered(lambda x: x.type == 'in_refund'):

--- a/addons/purchase_stock/models/purchase.py
+++ b/addons/purchase_stock/models/purchase.py
@@ -307,7 +307,7 @@ class PurchaseOrderLine(models.Model):
                         'activity_type_id': self.env.ref('mail.mail_activity_data_todo').id,
                         'note': _('The quantities on your purchase order indicate less than billed. You should ask for a refund. '),
                         'res_id': line.invoice_lines[0].invoice_id.id,
-                        'res_model_id': self.env.ref('account.model_account_invoice').id,
+                        'res_model_id': self.env.ref('account.model_account_move').id,
                     })
                     activity._onchange_activity_type_id()
 

--- a/addons/purchase_stock/models/stock.py
+++ b/addons/purchase_stock/models/stock.py
@@ -97,7 +97,7 @@ class StockMove(models.Model):
         """ Overridden to return the vendor bills related to this stock move.
         """
         rslt = super(StockMove, self)._get_related_invoices()
-        rslt += self.mapped('picking_id.purchase_id.invoice_ids').filtered(lambda x: x.state not in ('draft', 'cancel'))
+        rslt += self.mapped('picking_id.purchase_id.invoice_ids').filtered(lambda x: x.state == 'posted')
         return rslt
 
 
