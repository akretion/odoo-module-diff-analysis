PR: https://github.com/odoo/odoo/pull/136909

From: 78192c45c083d8755a8904e0b0965b435aec669b
From: Daniel Kosky (dako)
Date: 2023-10-17 00:35:05

Structural Changes: 3
Total Changes: 70

[IMP] account_peppol: demo mode

This commit implements a demo mode in which a user can register to
peppol. The demo user performs no communication with the proxy server,
instead making and receiving only mocked calls and responses.

The @handle_demo decorator is added and utilised in order to avoid
adding the specific (and mostly irrelevant) branches of this of demo
functionality to the body of the code. When the edi_user has the
edi_mode 'demo' this decorator diverts the execution of the
function (excepting when running tests, whenupon it is ignored).

Specific logic is added to the res config settings in order to specify
which modes are availble to the current user based on the
"account_peppol.mode_constraint" config param, and the
"saas_trail.confirmation_token" config param. This allows us to default
users using runbot/demo-data/saas-trial databases to "demo" mode
registration.

task-id: 3497466
         3497725

closes odoo/odoo#136909

Signed-off-by: Laurent Smet (las) <las@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account_peppol/models/account_edi_proxy_user.py
+++ b/addons/account_peppol/models/account_edi_proxy_user.py
@@ -4,8 +4,9 @@
 import logging
 
 from odoo import _, fields, models, modules, tools
-from odoo.exceptions import UserError
 from odoo.addons.account_edi_proxy_client.models.account_edi_proxy_user import AccountEdiProxyError
+from odoo.addons.account_peppol.tools.demo_utils import handle_demo
+from odoo.exceptions import UserError
 
 _logger = logging.getLogger(__name__)
 
@@ -20,6 +21,7 @@ class AccountEdiProxyClientUser(models.Model):
     # HELPER METHODS
     # -------------------------------------------------------------------------
 
+    @handle_demo
     def _make_request(self, url, params=False):
         # extends account_edi_proxy_client to update peppol_proxy_state
         # of archived users
@@ -47,22 +49,10 @@ class AccountEdiProxyClientUser(models.Model):
         urls['peppol'] = {
             'prod': 'https://peppol.api.odoo.com',
             'test': 'https://peppol.test.odoo.com',
+            'demo': 'demo',
         }
         return urls
 
-    def _get_server_url(self, proxy_type=None, edi_mode=None):
-        proxy_type = proxy_type or self.proxy_type
-        if not proxy_type == 'peppol':
-            return super()._get_server_url(proxy_type, edi_mode)
-
-        peppol_param = self.env['ir.config_parameter'].sudo().get_param(
-            'account_peppol.edi.mode', False
-        )
-        if peppol_param == 'test':
-            edi_mode = 'test'
-
-        return super()._get_server_url(proxy_type, edi_mode)
-
     # -------------------------------------------------------------------------
     # CRONS
     # -------------------------------------------------------------------------

--- a/addons/account_peppol/models/account_move.py
+++ b/addons/account_peppol/models/account_move.py
@@ -1,7 +1,7 @@
 # -*- coding:utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import fields, models, _
+from odoo import api, fields, models, _
 from odoo.exceptions import UserError
 
 
@@ -21,6 +21,7 @@ class AccountMove(models.Model):
         copy=False,
         readonly=True,
     )
+    peppol_is_demo_uuid = fields.Boolean(compute="_compute_peppol_is_demo_uuid")
 
     def action_cancel_peppol_documents(self):
         # if the peppol_move_state is processing/done
@@ -28,3 +29,8 @@ class AccountMove(models.Model):
         if any(move.peppol_move_state in {'processing', 'done'} for move in self):
             raise UserError(_("Cannot cancel an entry that has already been sent to PEPPOL"))
         self.peppol_move_state = 'canceled'
+
+    @api.depends('peppol_message_uuid')
+    def _compute_peppol_is_demo_uuid(self):
+        for move in self:
+            move.peppol_is_demo_uuid = (move.peppol_message_uuid or '').startswith('demo_')

--- a/addons/account_peppol/models/res_config_settings.py
+++ b/addons/account_peppol/models/res_config_settings.py
@@ -5,6 +5,11 @@ from odoo import _, api, fields, models, modules, tools
 from odoo.exceptions import UserError, ValidationError
 
 from odoo.addons.account_edi_proxy_client.models.account_edi_proxy_user import AccountEdiProxyError
+from odoo.addons.account_edi_ubl_cii.models.account_edi_common import EAS_MAPPING
+from odoo.addons.account_peppol.tools.demo_utils import handle_demo
+
+# at the moment, only European countries are accepted
+ALLOWED_COUNTRIES = set(EAS_MAPPING.keys()) - {'AU', 'SG', 'NZ'}
 
 
 class ResConfigSettings(models.TransientModel):
@@ -36,6 +41,17 @@ class ResConfigSettings(models.TransientModel):
     has_peppol_participant = fields.Boolean(
         compute='_compute_has_peppol_participant'
     )
+    account_peppol_edi_mode = fields.Selection(
+        selection=[('demo', 'Demo'), ('test', 'Test'), ('prod', 'Live')],
+        compute='_compute_account_peppol_edi_mode',
+        inverse='_inverse_account_peppol_edi_mode',
+        readonly=False,
+    )
+    account_peppol_mode_constraint = fields.Selection(
+        selection=[('demo', 'Demo'), ('test', 'Test'), ('prod', 'Live')],
+        compute='_compute_account_peppol_mode_constraint',
+        help="Using the config params, this field specifies which edi modes may be selected from the UI"
+    )
 
     # -------------------------------------------------------------------------
     # HELPER METHODS
@@ -61,6 +77,26 @@ class ResConfigSettings(models.TransientModel):
     # -------------------------------------------------------------------------
     # COMPUTE METHODS
     # -------------------------------------------------------------------------
+    @api.depends('is_account_peppol_eligible', 'account_peppol_edi_user')
+    def _compute_account_peppol_mode_constraint(self):
+        mode_constraint = self.env['ir.config_parameter'].sudo().get_param('account_peppol.mode_constraint')
+        trial_param = self.env['ir.config_parameter'].sudo().get_param('saas_trial.confirm_token')
+        self.account_peppol_mode_constraint = trial_param and 'demo' or mode_constraint or 'prod'
+
+    @api.depends('is_account_peppol_eligible', 'account_peppol_edi_user')
+    def _compute_account_peppol_edi_mode(self):
+        edi_mode = self.env['ir.config_parameter'].sudo().get_param('account_peppol.edi.mode')
+        for config in self:
+            if config.account_peppol_edi_user:
+                config.account_peppol_edi_mode = config.account_peppol_edi_user.edi_mode
+            else:
+                config.account_peppol_edi_mode = edi_mode or 'prod'
+
+    def _inverse_account_peppol_edi_mode(self):
+        for config in self:
+            if not config.account_peppol_edi_user and config.account_peppol_edi_mode:
+                self.env['ir.config_parameter'].sudo().set_param('account_peppol.edi.mode', config.account_peppol_edi_mode)
+                return
 
     @api.depends("company_id.account_edi_proxy_client_ids")
     def _compute_account_peppol_edi_user(self):
@@ -92,6 +128,7 @@ class ResConfigSettings(models.TransientModel):
     # BUSINESS ACTIONS
     # -------------------------------------------------------------------------
 
+    @handle_demo
     def button_create_peppol_proxy_user(self):
         """
         The first step of the Peppol onboarding.
@@ -109,7 +146,7 @@ class ResConfigSettings(models.TransientModel):
 
         company = self.company_id
         edi_proxy_client = self.env['account_edi_proxy_client.user']
-        edi_user = edi_proxy_client.sudo()._register_proxy_user(company, 'peppol', 'prod')
+        edi_user = edi_proxy_client.sudo()._register_proxy_user(company, 'peppol', self.account_peppol_edi_mode)
         self.account_peppol_proxy_state = 'not_verified'
 
         # if there is an error when activating the participant below,
@@ -144,6 +181,7 @@ class ResConfigSettings(models.TransientModel):
         # but we need the field for future in case the user decided to migrate away from Odoo
         self.account_peppol_migration_key = False
 
+    @handle_demo
     def button_update_peppol_user_data(self):
         """
         Action for the user to be able to update their contact details any time
@@ -245,6 +283,7 @@ class ResConfigSettings(models.TransientModel):
 
             self.account_peppol_proxy_state = 'not_verified'
 
+    @handle_demo
     def button_migrate_peppol_registration(self):
         """
         If the user is active, they need to request a migration key, generated on the IAP server.
@@ -261,6 +300,7 @@ class ResConfigSettings(models.TransientModel):
         response = self._call_peppol_proxy(endpoint='/api/peppol/1/migrate_peppol_registration')
         self.account_peppol_migration_key = response['migration_key']
 
+    @handle_demo
     def button_deregister_peppol_participant(self):
         """
         Deregister the edi user from Peppol network

--- a/addons/account_peppol/models/res_partner.py
+++ b/addons/account_peppol/models/res_partner.py
@@ -7,6 +7,7 @@ from hashlib import md5
 from urllib import parse
 
 from odoo import api, fields, models
+from odoo.addons.account_peppol.tools.demo_utils import handle_demo
 
 TIMEOUT = 10
 
@@ -51,6 +52,7 @@ class ResPartner(models.Model):
             else:
                 partner.account_peppol_verification_label = 'not_valid'
 
+    @handle_demo
     def button_account_peppol_check_partner_endpoint(self):
         """ A basic check for whether a participant is reachable at the given
         Peppol participant ID - peppol_eas:peppol_endpoint (ex: '9999:test')
