PR: https://github.com/odoo/odoo/pull/90161

From: 6e76d9847f163f789b0def622465aabd73be839d
From: Victor Feyens
Date: 2022-04-29 16:21:54

Structural Changes: 32
Total Changes: 293

[MOV] sale_management: split sale_order_template.py

closes odoo/odoo#90161

Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_management/models/__init__.py
+++ b/addons/sale_management/models/__init__.py
@@ -7,3 +7,5 @@ from . import sale_order
 from . import sale_order_line
 from . import sale_order_option
 from . import sale_order_template
+from . import sale_order_template_line
+from . import sale_order_template_option

--- a/addons/sale_management/models/sale_order_template.py
+++ b/addons/sale_management/models/sale_order_template.py
@@ -2,7 +2,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models, _
-from odoo.exceptions import UserError, ValidationError
+from odoo.exceptions import ValidationError
 
 
 class SaleOrderTemplate(models.Model):
@@ -124,143 +124,3 @@ class SaleOrderTemplate(models.Model):
             self.env['ir.translation'].create(data)
         else:
             existing_trans.write(data)
-
-
-class SaleOrderTemplateLine(models.Model):
-    _name = "sale.order.template.line"
-    _description = "Quotation Template Line"
-    _order = 'sale_order_template_id, sequence, id'
-
-    _sql_constraints = [
-        ('accountable_product_id_required',
-            "CHECK(display_type IS NOT NULL OR (product_id IS NOT NULL AND product_uom_id IS NOT NULL))",
-            "Missing required product and UoM on accountable sale quote line."),
-
-        ('non_accountable_fields_null',
-            "CHECK(display_type IS NULL OR (product_id IS NULL AND product_uom_qty = 0 AND product_uom_id IS NULL))",
-            "Forbidden product, unit price, quantity, and UoM on non-accountable sale quote line"),
-    ]
-
-    sale_order_template_id = fields.Many2one(
-        comodel_name='sale.order.template',
-        string='Quotation Template Reference',
-        index=True, required=True,
-        ondelete='cascade')
-    sequence = fields.Integer(
-        string="Sequence",
-        help="Gives the sequence order when displaying a list of sale quote lines.",
-        default=10)
-
-    company_id = fields.Many2one(
-        related='sale_order_template_id.company_id', store=True, index=True)
-
-    product_id = fields.Many2one(
-        comodel_name='product.product',
-        check_company=True,
-        domain="[('sale_ok', '=', True), ('company_id', 'in', [company_id, False])]")
-
-    name = fields.Text(
-        string="Description",
-        compute='_compute_name',
-        store=True, readonly=False, precompute=True,
-        required=True,
-        translate=True)
-
-    product_uom_id = fields.Many2one(
-        comodel_name='uom.uom',
-        string="Unit of Measure",
-        compute='_compute_product_uom_id',
-        store=True, readonly=False, precompute=True,
-        domain="[('category_id', '=', product_uom_category_id)]")
-    product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
-    product_uom_qty = fields.Float(
-        string='Quantity',
-        required=True,
-        digits='Product Unit of Measure',
-        default=1)
-
-    display_type = fields.Selection([
-        ('line_section', "Section"),
-        ('line_note', "Note")], default=False, help="Technical field for UX purpose.")
-
-    #=== COMPUTE METHODS ===#
-
-    @api.depends('product_id')
-    def _compute_name(self):
-        for option in self:
-            if not option.product_id:
-                continue
-            option.name = option.product_id.get_product_multiline_description_sale()
-
-    @api.depends('product_id')
-    def _compute_product_uom_id(self):
-        for option in self:
-            option.product_uom_id = option.product_id.uom_id
-
-    #=== CRUD METHODS ===#
-
-    @api.model_create_multi
-    def create(self, vals_list):
-        for vals in vals_list:
-            if vals.get('display_type', self.default_get(['display_type'])['display_type']):
-                vals.update(product_id=False, product_uom_qty=0, product_uom_id=False)
-        return super().create(vals_list)
-
-    def write(self, values):
-        if 'display_type' in values and self.filtered(lambda line: line.display_type != values.get('display_type')):
-            raise UserError(_("You cannot change the type of a sale quote line. Instead you should delete the current line and create a new line of the proper type."))
-        return super().write(values)
-
-
-class SaleOrderTemplateOption(models.Model):
-    _name = "sale.order.template.option"
-    _description = "Quotation Template Option"
-    _check_company_auto = True
-
-    sale_order_template_id = fields.Many2one(
-        comodel_name='sale.order.template',
-        string="Quotation Template Reference",
-        index=True, required=True,
-        ondelete='cascade')
-
-    company_id = fields.Many2one(
-        related='sale_order_template_id.company_id', store=True, index=True)
-
-    product_id = fields.Many2one(
-        comodel_name='product.product',
-        required=True, check_company=True,
-        domain="[('sale_ok', '=', True), ('company_id', 'in', [company_id, False])]")
-
-    name = fields.Text(
-        string="Description",
-        compute='_compute_name',
-        store=True, readonly=False, precompute=True,
-        required=True, translate=True)
-
-    uom_id = fields.Many2one(
-        comodel_name='uom.uom',
-        string="Unit of Measure",
-        compute='_compute_uom_id',
-        store=True, readonly=False,
-        required=True, precompute=True,
-        domain="[('category_id', '=', product_uom_category_id)]")
-    product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
-    quantity = fields.Float(
-        string="Quantity",
-        required=True,
-        digits='Product Unit of Measure',
-        default=1)
-
-    #=== COMPUTE METHODS ===#
-
-    @api.depends('product_id')
-    def _compute_name(self):
-        for option in self:
-            if not option.product_id:
-                continue
-            option.name = option.product_id.get_product_multiline_description_sale()
-
-    @api.depends('product_id')
-    def _compute_uom_id(self):
-        for option in self:
-            option.uom_id = option.product_id.uom_id

--- a/None
+++ b/addons/sale_management/models/sale_order_template_line.py
@@ -0,0 +1,91 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import UserError
+
+
+class SaleOrderTemplateLine(models.Model):
+    _name = "sale.order.template.line"
+    _description = "Quotation Template Line"
+    _order = 'sale_order_template_id, sequence, id'
+
+    _sql_constraints = [
+        ('accountable_product_id_required',
+            "CHECK(display_type IS NOT NULL OR (product_id IS NOT NULL AND product_uom_id IS NOT NULL))",
+            "Missing required product and UoM on accountable sale quote line."),
+
+        ('non_accountable_fields_null',
+            "CHECK(display_type IS NULL OR (product_id IS NULL AND product_uom_qty = 0 AND product_uom_id IS NULL))",
+            "Forbidden product, unit price, quantity, and UoM on non-accountable sale quote line"),
+    ]
+
+    sale_order_template_id = fields.Many2one(
+        comodel_name='sale.order.template',
+        string='Quotation Template Reference',
+        index=True, required=True,
+        ondelete='cascade')
+    sequence = fields.Integer(
+        string="Sequence",
+        help="Gives the sequence order when displaying a list of sale quote lines.",
+        default=10)
+
+    company_id = fields.Many2one(
+        related='sale_order_template_id.company_id', store=True, index=True)
+
+    product_id = fields.Many2one(
+        comodel_name='product.product',
+        check_company=True,
+        domain="[('sale_ok', '=', True), ('company_id', 'in', [company_id, False])]")
+
+    name = fields.Text(
+        string="Description",
+        compute='_compute_name',
+        store=True, readonly=False, precompute=True,
+        required=True,
+        translate=True)
+
+    product_uom_id = fields.Many2one(
+        comodel_name='uom.uom',
+        string="Unit of Measure",
+        compute='_compute_product_uom_id',
+        store=True, readonly=False, precompute=True,
+        domain="[('category_id', '=', product_uom_category_id)]")
+    product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
+    product_uom_qty = fields.Float(
+        string='Quantity',
+        required=True,
+        digits='Product Unit of Measure',
+        default=1)
+
+    display_type = fields.Selection([
+        ('line_section', "Section"),
+        ('line_note', "Note")], default=False, help="Technical field for UX purpose.")
+
+    #=== COMPUTE METHODS ===#
+
+    @api.depends('product_id')
+    def _compute_name(self):
+        for option in self:
+            if not option.product_id:
+                continue
+            option.name = option.product_id.get_product_multiline_description_sale()
+
+    @api.depends('product_id')
+    def _compute_product_uom_id(self):
+        for option in self:
+            option.product_uom_id = option.product_id.uom_id
+
+    #=== CRUD METHODS ===#
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        for vals in vals_list:
+            if vals.get('display_type', self.default_get(['display_type'])['display_type']):
+                vals.update(product_id=False, product_uom_qty=0, product_uom_id=False)
+        return super().create(vals_list)
+
+    def write(self, values):
+        if 'display_type' in values and self.filtered(lambda line: line.display_type != values.get('display_type')):
+            raise UserError(_("You cannot change the type of a sale quote line. Instead you should delete the current line and create a new line of the proper type."))
+        return super().write(values)

--- a/None
+++ b/addons/sale_management/models/sale_order_template_option.py
@@ -0,0 +1,58 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class SaleOrderTemplateOption(models.Model):
+    _name = "sale.order.template.option"
+    _description = "Quotation Template Option"
+    _check_company_auto = True
+
+    sale_order_template_id = fields.Many2one(
+        comodel_name='sale.order.template',
+        string="Quotation Template Reference",
+        index=True, required=True,
+        ondelete='cascade')
+
+    company_id = fields.Many2one(
+        related='sale_order_template_id.company_id', store=True, index=True)
+
+    product_id = fields.Many2one(
+        comodel_name='product.product',
+        required=True, check_company=True,
+        domain="[('sale_ok', '=', True), ('company_id', 'in', [company_id, False])]")
+
+    name = fields.Text(
+        string="Description",
+        compute='_compute_name',
+        store=True, readonly=False, precompute=True,
+        required=True, translate=True)
+
+    uom_id = fields.Many2one(
+        comodel_name='uom.uom',
+        string="Unit of Measure",
+        compute='_compute_uom_id',
+        store=True, readonly=False,
+        required=True, precompute=True,
+        domain="[('category_id', '=', product_uom_category_id)]")
+    product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
+    quantity = fields.Float(
+        string="Quantity",
+        required=True,
+        digits='Product Unit of Measure',
+        default=1)
+
+    #=== COMPUTE METHODS ===#
+
+    @api.depends('product_id')
+    def _compute_name(self):
+        for option in self:
+            if not option.product_id:
+                continue
+            option.name = option.product_id.get_product_multiline_description_sale()
+
+    @api.depends('product_id')
+    def _compute_uom_id(self):
+        for option in self:
+            option.uom_id = option.product_id.uom_id
