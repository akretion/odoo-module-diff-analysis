PR: https://github.com/odoo/odoo/pull/95744

From: 75e1d933445a10a7e1350be8fcf60fee646c9872
From: Jeremy Kersten
Date: 2022-08-10 12:43:02

Structural Changes: 8
Total Changes: 36

[IMP] google_calendar: rename google_cal[endar]_account_id

Rename from google_cal_account_id to google_calendar_account_id, to have
the complete 'service' name into the field and allow to use it from a
generic way in oauth2callback from google_account e.g.

task-2497212
pr-95744

closes odoo/odoo#95744

Related: odoo/upgrade#3673
Signed-off-by: Christophe Simonis <chs@odoo.com>

================================= pseudo patch: =================================

--- a/addons/google_calendar/models/google_credentials.py
+++ b/addons/google_calendar/models/google_credentials.py
@@ -17,7 +17,7 @@ class GoogleCredentials(models.Model):
     _name = 'google.calendar.credentials'
     _description = 'Google Calendar Account Data'
 
-    user_ids = fields.One2many('res.users', 'google_cal_account_id', required=True)
+    user_ids = fields.One2many('res.users', 'google_calendar_account_id', required=True)
     calendar_rtoken = fields.Char('Refresh Token', copy=False)
     calendar_token = fields.Char('User token', copy=False)
     calendar_token_validity = fields.Datetime('Token Validity', copy=False)

--- a/addons/google_calendar/models/res_users.py
+++ b/addons/google_calendar/models/res_users.py
@@ -14,32 +14,32 @@ _logger = logging.getLogger(__name__)
 class User(models.Model):
     _inherit = 'res.users'
 
-    google_cal_account_id = fields.Many2one('google.calendar.credentials')
-    google_calendar_rtoken = fields.Char(related='google_cal_account_id.calendar_rtoken', groups="base.group_system")
-    google_calendar_token = fields.Char(related='google_cal_account_id.calendar_token')
-    google_calendar_token_validity = fields.Datetime(related='google_cal_account_id.calendar_token_validity')
-    google_calendar_sync_token = fields.Char(related='google_cal_account_id.calendar_sync_token')
-    google_calendar_cal_id = fields.Char(related='google_cal_account_id.calendar_cal_id')
-    google_synchronization_stopped = fields.Boolean(related='google_cal_account_id.synchronization_stopped', readonly=False)
+    google_calendar_account_id = fields.Many2one('google.calendar.credentials')
+    google_calendar_rtoken = fields.Char(related='google_calendar_account_id.calendar_rtoken', groups="base.group_system")
+    google_calendar_token = fields.Char(related='google_calendar_account_id.calendar_token')
+    google_calendar_token_validity = fields.Datetime(related='google_calendar_account_id.calendar_token_validity')
+    google_calendar_sync_token = fields.Char(related='google_calendar_account_id.calendar_sync_token')
+    google_calendar_cal_id = fields.Char(related='google_calendar_account_id.calendar_cal_id')
+    google_synchronization_stopped = fields.Boolean(related='google_calendar_account_id.synchronization_stopped', readonly=False)
 
     _sql_constraints = [
-        ('google_token_uniq', 'unique (google_cal_account_id)', "The user has already a google account"),
+        ('google_token_uniq', 'unique (google_calendar_account_id)', "The user has already a google account"),
     ]
 
 
     @property
     def SELF_READABLE_FIELDS(self):
-        return super().SELF_READABLE_FIELDS + ['google_synchronization_stopped', 'google_cal_account_id']
+        return super().SELF_READABLE_FIELDS + ['google_synchronization_stopped', 'google_calendar_account_id']
 
     @property
     def SELF_WRITEABLE_FIELDS(self):
-        return super().SELF_WRITEABLE_FIELDS + ['google_synchronization_stopped', 'google_cal_account_id']
+        return super().SELF_WRITEABLE_FIELDS + ['google_synchronization_stopped', 'google_calendar_account_id']
 
     def _get_google_calendar_token(self):
         self.ensure_one()
-        if self.google_cal_account_id.calendar_rtoken and not self.google_cal_account_id._is_google_calendar_valid():
-            self.sudo().google_cal_account_id._refresh_google_calendar_token()
-        return self.google_cal_account_id.calendar_token
+        if self.google_calendar_account_id.calendar_rtoken and not self.google_calendar_account_id._is_google_calendar_valid():
+            self.sudo().google_calendar_account_id._refresh_google_calendar_token()
+        return self.google_calendar_account_id.calendar_token
 
     def _sync_google_calendar(self, calendar_service: GoogleCalendarService):
         self.ensure_one()
@@ -56,11 +56,11 @@ class User(models.Model):
         full_sync = not bool(self.google_calendar_sync_token)
         with google_calendar_token(self) as token:
             try:
-                events, next_sync_token, default_reminders = calendar_service.get_events(self.google_cal_account_id.calendar_sync_token, token=token)
+                events, next_sync_token, default_reminders = calendar_service.get_events(self.google_calendar_account_id.calendar_sync_token, token=token)
             except InvalidSyncToken:
                 events, next_sync_token, default_reminders = calendar_service.get_events(token=token)
                 full_sync = True
-        self.google_cal_account_id.calendar_sync_token = next_sync_token
+        self.google_calendar_account_id.calendar_sync_token = next_sync_token
 
         # Google -> Odoo
         events.clear_type_ambiguity(self.env)
@@ -99,8 +99,8 @@ class User(models.Model):
 
     def restart_google_synchronization(self):
         self.ensure_one()
-        if not self.google_cal_account_id:
-            self.google_cal_account_id = self.env['google.calendar.credentials'].sudo().create([{'user_ids': [Command.set(self.ids)]}])
+        if not self.google_calendar_account_id:
+            self.google_calendar_account_id = self.env['google.calendar.credentials'].sudo().create([{'user_ids': [Command.set(self.ids)]}])
         self.google_synchronization_stopped = False
         self.env['calendar.recurrence']._restart_google_sync()
         self.env['calendar.event']._restart_google_sync()
