PR: https://github.com/odoo/odoo/pull/

From: 84bb9c748db26656d3ecd062183afe5f042dc569
From: Thibault Delavall√©e
Date: 2019-12-05 15:21:28

Structural Changes: 5
Total Changes: 90

[REF] survey: remove unused or unnecessary fields to clean models

PURPOSE

As new features are about to land in survey, notably live interactions [1]
and new survey building [2] performing a pre cleaning is necessary. In this
PR we clean survey models by: removing unnecessary fields, cleaning some code
and finally renaming models.

SPECIFICATIONS: QUESTION FIELD ON SURVEY.SURVEY

On survey.survey, remove question field, unnecessary related on title.

Question model holds two fields for its title: ``title`` and ``question``.
Question is simply a related on title, making the two fields completely
redundant. It is mainly due to historical reasons, when updating models for
certifications and eLearning. In this commit we keep only title field and
remove the question related field as it adds unnecessary complexity to the
model.

SPECIFICATIONS: INPUT_TYPE FIELD ON SURVEY.USER_INPUT

On survey.user_input, remove input_type and its garbage collect.

``input_type`` field exists on user input model to tell whether answer has
been created through invite or through manual click on a survey page. It
has been added a long time ago when surveys were either open to everyone,
either closed and on invite only.

Since eLearning and certification surveys access mode on surveys has evolved.
Notably being able to distinguish invite from manual survey user input is not
necessary anymore. Indeed what is important is the way people can reach the
survey, not how they created their user input.

Invitation creates token and this can be used if people effectively want to
find invitation-related user inputs.

Since 09ea5c7d49d544927542130078ab6e3ad5b70584 manual entries still in draft are garbage collected.
Reason is still unclear as it is not obvious that tons of unnecessary entries
will be created. As this seems like unnecessary optimization this commit
removes that feature along with the input_type field.

SPECIFICATIONS: REPLACE URLS FIELDS BY METHODS ON SURVEY.{SURVEY, USER_INPUT}

On survey.{survey, user_input}, remove url fields replaced by methods

In this commit we remove some remaining of URL fields that are better found
using methods. Both survey and user input holds a "start" url field that is
replaced by a method call ``get_start_url`` on both survey (generic) and
user input (token specific) models. We also introduced a ``get_print_url``
method doing the same for the printable version of survey / user input.

SPECIFICATIONS: REMOVE CATEGORY FIELD ON SURVEY.SURVEY

On survey.survey, remove unused category field.

Survey model holds a ``category`` field whose purpose is to be able to somehow
categorize surveys according to their use. However using this field is not
easy as it is hidden and is a simple selection field. Module should add their
own key. Its sole use is in ``hr_recruitment_survey`` which is a niche module.
Let us clean models and lessen model complexity.

LINKS

[0] Related to Task ID 2061901 (survey models cleaning and preparation)
[1] Task ID 1972640 (live interactions)
[2] Task ID 2119587 (new frontend for building surveys)

PR #40765

================================= pseudo patch: =================================

--- a/addons/survey/models/__init__.py
+++ b/addons/survey/models/__init__.py
@@ -1,7 +1,6 @@
 # -*- encoding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import ir_autovacuum
 from . import survey_survey
 from . import survey_question
 from . import survey_user

--- a/addons/survey/models/ir_autovacuum.py
+++ b/None
@@ -1,13 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, models
-
-
-class AutoVacuum(models.AbstractModel):
-    _inherit = 'ir.autovacuum'
-
-    @api.model
-    def power_on(self, *args, **kwargs):
-        self.env['survey.user_input'].do_clean_emptys()
-        return super(AutoVacuum, self).power_on(*args, **kwargs)

--- a/addons/survey/models/survey_question.py
+++ b/addons/survey/models/survey_question.py
@@ -37,7 +37,7 @@ class SurveyQuestion(models.Model):
     """
     _name = 'survey.question'
     _description = 'Survey Question'
-    _rec_name = 'question'
+    _rec_name = 'title'
     _order = 'sequence,id'
 
     @api.model
@@ -49,7 +49,6 @@ class SurveyQuestion(models.Model):
 
     # question generic data
     title = fields.Char('Title', required=True, translate=True)
-    question = fields.Char('Question', related="title")
     description = fields.Html('Description', help="Use this field to add additional explanations about your question", translate=True)
     survey_id = fields.Many2one('survey.survey', string='Survey', ondelete='cascade')
     scoring_type = fields.Selection(related='survey_id.scoring_type', string='Scoring Type', readonly=True)

--- a/addons/survey/models/survey_survey.py
+++ b/addons/survey/models/survey_survey.py
@@ -3,10 +3,10 @@
 
 import random
 import uuid
+import werkzeug
 
 from collections import Counter, OrderedDict
 from itertools import product
-from werkzeug import urls
 
 from odoo import api, fields, models, _
 from odoo.exceptions import UserError
@@ -36,10 +36,6 @@ class Survey(models.Model):
         ('draft', 'Draft'), ('open', 'In Progress'), ('closed', 'Closed')
     ], string="Survey Stage", default='draft', required=True,
         group_expand='_read_group_states')
-    category = fields.Selection([
-        ('default', 'Generic Survey')], string='Category',
-        default='default', required=True,
-        help='Category is used to know in which context the survey is used. Various apps may define their own categories when they use survey like jobs recruitment or employee appraisal surveys.')
     # questions
     question_and_page_ids = fields.One2many('survey.question', 'survey_id', string='Sections and Questions', copy=True)
     page_ids = fields.One2many('survey.question', string='Pages', compute="_compute_page_and_question_ids")
@@ -65,7 +61,6 @@ class Survey(models.Model):
     users_login_required = fields.Boolean('Login Required', help="If checked, users have to login before answering even with a valid token.")
     users_can_go_back = fields.Boolean('Users can go back', help="If checked, users can go back to previous pages.")
     users_can_signup = fields.Boolean('Users can signup', compute='_compute_users_can_signup')
-    public_url = fields.Char("Public link", compute="_compute_survey_url")
     # statistics
     answer_count = fields.Integer("Registered", compute="_compute_survey_statistic")
     answer_done_count = fields.Integer("Attempts", compute="_compute_survey_statistic")
@@ -150,12 +145,6 @@ class Survey(models.Model):
         for survey in self:
             survey.update(stat.get(survey._origin.id, default_vals))
 
-    def _compute_survey_url(self):
-        """ Computes a public URL for the survey """
-        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')
-        for survey in self:
-            survey.public_url = urls.url_join(base_url, "survey/start/%s" % (survey.access_token))
-
     @api.depends('question_and_page_ids')
     def _compute_page_and_question_ids(self):
         for survey in self:
@@ -448,18 +437,6 @@ class Survey(models.Model):
     def action_close(self):
         self.write({'state': 'closed'})
 
-    def action_start_survey(self):
-        """ Open the website page with the survey form """
-        self.ensure_one()
-        token = self.env.context.get('survey_token')
-        trail = "?answer_token=%s" % token if token else ""
-        return {
-            'type': 'ir.actions.act_url',
-            'name': "Start Survey",
-            'target': 'self',
-            'url': self.public_url + trail
-        }
-
     def action_send_survey(self):
         """ Open a window to compose an email, pre-filled with the survey message """
         # Ensure that this survey has at least one page with at least one question.
@@ -486,16 +463,26 @@ class Survey(models.Model):
             'context': local_context,
         }
 
-    def action_print_survey(self):
+    def action_start_survey(self, answer=None):
+        """ Open the website page with the survey form """
+        self.ensure_one()
+        url = '%s?%s' % (self.get_start_url(), werkzeug.urls.url_encode({'answer_token': answer.token or None}))
+        return {
+            'type': 'ir.actions.act_url',
+            'name': "Start Survey",
+            'target': 'self',
+            'url': url,
+        }
+
+    def action_print_survey(self, answer=None):
         """ Open the website page with the survey printable view """
         self.ensure_one()
-        token = self.env.context.get('survey_token')
-        trail = "?answer_token=%s" % token if token else ""
+        url = '%s?%s' % (self.get_print_url(), werkzeug.urls.url_encode({'answer_token': answer.token or None}))
         return {
             'type': 'ir.actions.act_url',
             'name': "Print Survey",
             'target': 'self',
-            'url': '/survey/print/%s%s' % (self.access_token, trail)
+            'url': url
         }
 
     def action_result_survey(self):
@@ -555,6 +542,12 @@ class Survey(models.Model):
             'url': '/survey/%s/get_certification_preview' % (self.id)
         }
 
+    def get_start_url(self):
+        return 'survey/start/%s' % self.access_token
+
+    def get_print_url(self):
+        return 'survey/print/%s' % self.access_token
+
     # ------------------------------------------------------------
     # GRAPH / RESULTS
     # ------------------------------------------------------------
@@ -609,7 +602,7 @@ class Survey(models.Model):
                     labels = label
                 else:
                     labels = Label.browse([row_id, answer_id])
-                filter_display_data.append({'question_text': question.question,
+                filter_display_data.append({'question_text': question.title,
                                             'labels': labels.mapped('value')})
         return filter_display_data
 

--- a/addons/survey/models/survey_user.py
+++ b/addons/survey/models/survey_user.py
@@ -1,7 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-import datetime
 import logging
 import uuid
 
@@ -24,9 +23,6 @@ class SurveyUserInput(models.Model):
     scoring_type = fields.Selection(string="Scoring", related="survey_id.scoring_type")
     start_datetime = fields.Datetime('Start date and time', readonly=True)
     deadline = fields.Datetime('Deadline', help="Datetime until customer can open the survey and submit answers")
-    input_type = fields.Selection([
-        ('manually', 'Manual'), ('link', 'Invitation')],
-        string='Answer Type', default='manually', required=True, readonly=True)
     state = fields.Selection([
         ('new', 'Not started yet'),
         ('skip', 'Partially completed'),
@@ -113,16 +109,6 @@ class SurveyUserInput(models.Model):
 
                 user_input.attempt_number = attempt_number
 
-    @api.model
-    def do_clean_emptys(self):
-        """ Remove empty user inputs that have been created manually
-            (used as a cronjob declared in data/survey_cron.xml)
-        """
-        an_hour_ago = fields.Datetime.to_string(datetime.datetime.now() - datetime.timedelta(hours=1))
-        self.search([('input_type', '=', 'manually'),
-                     ('state', '=', 'new'),
-                     ('create_date', '<', an_hour_ago)]).unlink()
-
     def action_resend(self):
         partners = self.env['res.partner']
         emails = []
@@ -175,9 +161,13 @@ class SurveyUserInput(models.Model):
             if challenges:
                 Challenge._cron_update(ids=challenges.ids, commit=False)
 
-    def _get_survey_url(self):
+    def get_start_url(self):
+        self.ensure_one()
+        return '%s?answer_token=%s' % (self.survey_id.get_start_url(), self.token)
+
+    def get_print_url(self):
         self.ensure_one()
-        return '/survey/start/%s?answer_token=%s' % (self.survey_id.access_token, self.token)
+        return '%s?answer_token=%s' % (self.survey_id.get_print_url(), self.access_token)
 
 
 class SurveyUserInputLine(models.Model):
