PR: https://github.com/odoo/odoo/pull/116799

From: 169ea1ce0c37d0cfe250247130588727f5c3bf66
From: Tejas Modi
Date: 2023-06-20 17:08:57

Structural Changes: 3
Total Changes: 32

[IMP] stock: added/updated labels, actions and setting

In this commit:
================
- Added action to 'set to 0' to declare all uncounted quantities to
  0 and works like the 'set' action.
- Moved Unreserve, Scrap and Lock/Unlock buttons in action menu.
- Added Better tooltip for status and hide unnecessary status.
- Updated button and field labels.
- Changeed stat button forecast icon.
- Added Dropship setting.
- Added conflict filter in Inventory adjustment tree view.

TaskID - 3150983

closes odoo/odoo#116799

Related: odoo/enterprise#38872
Signed-off-by: Arnold Moyaux (arm) <arm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/res_config_settings.py
+++ b/addons/stock/models/res_config_settings.py
@@ -48,6 +48,7 @@ class ResConfigSettings(models.TransientModel):
     annual_inventory_month = fields.Selection(related='company_id.annual_inventory_month', readonly=False)
     annual_inventory_day = fields.Integer(related='company_id.annual_inventory_day', readonly=False)
     group_stock_reception_report = fields.Boolean("Reception Report", implied_group='stock.group_reception_report')
+    module_stock_dropshipping = fields.Boolean("Dropshipping")
 
     @api.onchange('group_stock_multi_locations')
     def _onchange_group_stock_multi_locations(self):

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -107,11 +107,11 @@ class StockMove(models.Model):
         ('done', 'Done'),
         ('cancel', 'Cancelled')], string='Status',
         copy=False, default='draft', index=True, readonly=True,
-        help="* New: When the stock move is created and not yet confirmed.\n"
-             "* Waiting Another Move: This state can be seen when a move is waiting for another one, for example in a chained flow.\n"
-             "* Waiting Availability: This state is reached when the procurement resolution is not straight forward. It may need the scheduler to run, a component to be manufactured...\n"
-             "* Available: When products are reserved, it is set to \'Available\'.\n"
-             "* Done: When the shipment is processed, the state is \'Done\'.")
+        help="* New: The stock move is created but not confirmed.\n"
+             "* Waiting Another Move: A linked stock move should be done before this one.\n"
+             "* Waiting Availability: The stock move is confirmed but the product can't be reserved.\n"
+             "* Available: The product of the stock move is reserved.\n"
+             "* Done: The product has been transferred and the transfer has been confirmed.")
 
     # used to record the product cost set by the user during a picking confirmation (when costing
     # method used is 'average price' or 'real'). Value given in company currency and in product uom.

--- a/addons/stock/models/stock_quant.py
+++ b/addons/stock/models/stock_quant.py
@@ -8,7 +8,7 @@ from ast import literal_eval
 from collections import defaultdict
 from psycopg2 import Error
 
-from odoo import _, api, fields, models
+from odoo import _, api, fields, models, SUPERUSER_ID
 from odoo.exceptions import UserError, ValidationError
 from odoo.osv import expression
 from odoo.tools import check_barcode_encoding, groupby
@@ -121,7 +121,7 @@ class StockQuant(models.Model):
         help="Next date the On Hand Quantity should be counted.")
     last_count_date = fields.Date(compute='_compute_last_count_date', help='Last time the Quantity was Updated')
     inventory_quantity_set = fields.Boolean(store=True, compute='_compute_inventory_quantity_set', readonly=False, default=False)
-    is_outdated = fields.Boolean('Quantity has been moved since last count', compute='_compute_is_outdated')
+    is_outdated = fields.Boolean('Quantity has been moved since last count', compute='_compute_is_outdated', search='_search_is_outdated')
     user_id = fields.Many2one(
         'res.users', 'Assigned To', help="User assigned to do product count.")
 
@@ -201,6 +201,11 @@ class StockQuant(models.Model):
             if quant.product_id and float_compare(quant.inventory_quantity - quant.inventory_diff_quantity, quant.quantity, precision_rounding=quant.product_uom_id.rounding) and quant.inventory_quantity_set:
                 quant.is_outdated = True
 
+    def _search_is_outdated(self, operator, value):
+        quant_ids = self.search([('inventory_quantity_set', '=', True)])
+        quant_ids = quant_ids.filtered(lambda quant: float_compare(quant.inventory_quantity - quant.inventory_diff_quantity, quant.quantity, precision_rounding=quant.product_uom_id.rounding)).ids
+        return [('id', 'in', quant_ids)]
+
     @api.depends('quantity')
     def _compute_inventory_quantity_auto_apply(self):
         for quant in self:
@@ -514,6 +519,10 @@ class StockQuant(models.Model):
         self.inventory_diff_quantity = 0
         self.inventory_quantity_set = False
 
+    def action_set_inventory_quantity_zero(self):
+        self.filtered(lambda l: not l.inventory_quantity).inventory_quantity = 0
+        self.user_id = self.env.user.id
+
     def action_warning_duplicated_sn(self):
         return {
             'name': _('Warning Duplicated SN'),
@@ -1075,13 +1084,17 @@ class StockQuant(models.Model):
         :return: dict with all values needed to create a new `stock.move` with its move line.
         """
         self.ensure_one()
-        if fields.Float.is_zero(qty, 0, precision_rounding=self.product_uom_id.rounding):
+        if self.env.context.get('inventory_name'):
+            name = self.env.context.get('inventory_name')
+        elif fields.Float.is_zero(qty, 0, precision_rounding=self.product_uom_id.rounding):
             name = _('Product Quantity Confirmed')
         else:
             name = _('Product Quantity Updated')
+        if self.user_id and self.user_id.id != SUPERUSER_ID:
+            name += f' ({self.user_id.display_name})'
 
         return {
-            'name': self.env.context.get('inventory_name') or name,
+            'name': name,
             'product_id': self.product_id.id,
             'product_uom': self.product_uom_id.id,
             'product_uom_qty': qty,
