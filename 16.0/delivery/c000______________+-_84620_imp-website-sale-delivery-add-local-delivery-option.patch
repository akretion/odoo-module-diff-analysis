PR: https://github.com/odoo/odoo/pull/84620

From: 22fa7f90e48f47e20f189a5e7e5ab573fc9d200d
From: Tiffany Chang (tic)
Date: 2022-06-29 12:44:19

Structural Changes: 5
Total Changes: 42

[IMP] {website_}sale, delivery: add local delivery option

This commit does a couple of small related improvements:

- adds new delivery options: "Local Delivery".
  We replace the existing "Normal Delivery Charges" with the new "Local
  Delivery" since it is now redundant.
- Originally a "Local Pickup" demo option was going to be added, but
  this appeared redundant with the "[On Site Pick]" added in
  odoo/odoo#87636 . Regardless, an additional `carrier_description`
  field has been added so users can include extra instructions (e.g.
  address to pick up from, when pickup can occur, etc) to sales orders/
  confirmation emails (emails only via ecommerce sales).
- adds option to filter based on zip prefix rather than the previous zip
  "range" option, which was too restrictive in some cases (e.g. in the
  UK where zips can have letters in them). Note that users can view/edit
  zip prefixes in menu under settings when debug mode is active. Note:
  - prefixes are ordered by name so its easier to read large numbers
    prefixes
  - prefixes are always capitalized to avoid duplicate prefixes that
    differ by case + avoid capitalizing all prefixes every time the
    `_match_address` logic is called

Task: 2706451
Upgrade PR: odoo/upgrade#3384

closes odoo/odoo#84620

Signed-off-by: Arnold Moyaux (arm) <arm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/delivery/models/__init__.py
+++ b/addons/delivery/models/__init__.py
@@ -3,6 +3,7 @@
 
 from . import delivery_carrier
 from . import delivery_grid
+from . import delivery_zip_prefix
 from . import product_template
 from . import sale_order
 from . import partner

--- a/addons/delivery/models/delivery_carrier.py
+++ b/addons/delivery/models/delivery_carrier.py
@@ -53,8 +53,12 @@ class DeliveryCarrier(models.Model):
 
     country_ids = fields.Many2many('res.country', 'delivery_carrier_country_rel', 'carrier_id', 'country_id', 'Countries')
     state_ids = fields.Many2many('res.country.state', 'delivery_carrier_state_rel', 'carrier_id', 'state_id', 'States')
-    zip_from = fields.Char('Zip From')
-    zip_to = fields.Char('Zip To')
+    zip_prefix_ids = fields.Many2many(
+        'delivery.zip.prefix', 'delivery_zip_prefix_rel', 'carrier_id', 'zip_prefix_id', 'Zip Prefixes')
+    carrier_description = fields.Text(
+        'Carrier Description', translate=True,
+        help="A description of the delivery method that you want to communicate to your customers on the Sales Order and sales confirmation email."
+             "E.g. instructions for customers to follow.")
 
     margin = fields.Float(help='This percentage will be added to the shipping price.')
     free_over = fields.Boolean('Free if order amount is above', help="If the order total amount (shipping excluded) is above or equal to this value, the customer benefits from a free shipping", default=False)
@@ -115,9 +119,7 @@ class DeliveryCarrier(models.Model):
             return False
         if self.state_ids and partner.state_id not in self.state_ids:
             return False
-        if self.zip_from and (partner.zip or '').upper() < self.zip_from.upper():
-            return False
-        if self.zip_to and (partner.zip or '').upper() > self.zip_to.upper():
+        if self.zip_prefix_ids and not partner.zip.upper().startswith(tuple(self.zip_prefix_ids.mapped('name'))):
             return False
         return True
 

--- a/None
+++ b/addons/delivery/models/delivery_zip_prefix.py
@@ -0,0 +1,29 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class DeliveryZipPrefix(models.Model):
+    """ Zip prefix that a delivery.carrier will deliver to. """
+    _name = 'delivery.zip.prefix'
+    _description = 'Delivery Zip Prefix'
+    _order = 'name, id'
+
+    name = fields.Char('Prefix', required=True)
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        for vals in vals_list:
+            # we cannot easily convert a list of prefix names into upper to compare with partner zips
+            # later on, so let's ensure they are always upper
+            vals['name'] = vals['name'].upper()
+        return super(DeliveryZipPrefix, self).create(vals_list)
+
+    def write(self, vals):
+        vals['name'] = vals['name'].upper()
+        return super().write(vals)
+
+    _sql_constraints = [
+        ('name_uniq', 'unique (name)', "Prefix already exists!"),
+    ]
