PR: https://github.com/odoo/odoo/pull/

From: fd4798195d0d2d2c72a779dbceca4a63205c6421
From: RÃ©my Baranx (bar)
Date: 2020-03-23 09:08:47

Structural Changes: 3
Total Changes: 28

[IMP] crm, sales: add crm tags on sale orders

As the crm.lead.tags model shall be used in CRM and/or Sales apps,
it has been moved to the sales_team module, which is a depedency
of the CRM and Sales apps.

As these tags becomes more generic than just "lead tags", the model
has been renamed from crm.lead.tags to crm.tags.

Tags on sale orders were already present but not visible. They are
now visible in the "Other Info" section, and optionally in sale order
tree views.

When a quotation is created from an opportunity (CRM app), existing tags
are populated from the opportunity to the sale order (Sales app).

Views and demo data of several modules have been updated accordingly.

Task ID 2191276

================================= pseudo patch: =================================

--- a/addons/crm/models/__init__.py
+++ b/addons/crm/models/__init__.py
@@ -4,7 +4,6 @@
 from . import res_users
 from . import calendar
 from . import crm_lead
-from . import crm_lead_tag
 from . import crm_lost_reason
 from . import crm_stage
 from . import crm_team

--- a/addons/crm/models/crm_lead.py
+++ b/addons/crm/models/crm_lead.py
@@ -98,7 +98,7 @@ class Lead(models.Model):
         ('grey', 'No next activity planned'), ('red', 'Next activity late'), ('green', 'Next activity is planned')],
         string='Kanban State', compute='_compute_kanban_state')
     tag_ids = fields.Many2many(
-        'crm.lead.tag', 'crm_lead_tag_rel', 'lead_id', 'tag_id', string='Tags',
+        'crm.tag', 'crm_tag_rel', 'lead_id', 'tag_id', string='Tags',
         help="Classify and analyze your lead/opportunity categories like: Training, Service")
     color = fields.Integer('Color Index', default=0)
     # Opportunity specific
@@ -1526,8 +1526,8 @@ class Lead(models.Model):
         # get all tag_ids won / lost count
         self.flush(['probability', 'active'])
         query = """select l.probability, l.active, t.id, count(l.probability) as count
-                    from crm_lead_tag_rel rel
-                    inner join crm_lead_tag t on rel.tag_id = t.id
+                    from crm_tag_rel rel
+                    inner join crm_tag t on rel.tag_id = t.id
                     inner join crm_lead l on l.id = rel.lead_id
                     where (l.probability = 0 or l.probability >= 100)
                     and l.create_date > %%s
@@ -1590,8 +1590,8 @@ class Lead(models.Model):
 
             query = """SELECT l.id as lead_id, t.id as tag_id
                         FROM crm_lead l
-                        LEFT JOIN crm_lead_tag_rel rel ON l.id = rel.lead_id
-                        LEFT JOIN crm_lead_tag t ON rel.tag_id = t.id
+                        LEFT JOIN crm_tag_rel rel ON l.id = rel.lead_id
+                        LEFT JOIN crm_tag t ON rel.tag_id = t.id
                         WHERE ((l.probability > 0 AND l.probability < 100) OR l.probability is null) AND l.active = True AND l.id in %s order by l.team_id asc"""
             self._cr.execute(query, [tuple(self.ids)])
             tag_results = self._cr.dictfetchall()

--- a/addons/crm/models/crm_lead_tag.py
+++ b/None
@@ -1,17 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-
-class Tag(models.Model):
-
-    _name = "crm.lead.tag"
-    _description = "Lead Tag"
-
-    name = fields.Char('Tag Name', required=True, translate=True)
-    color = fields.Integer('Color Index')
-
-    _sql_constraints = [
-        ('name_uniq', 'unique (name)', "Tag name already exists !"),
-    ]
