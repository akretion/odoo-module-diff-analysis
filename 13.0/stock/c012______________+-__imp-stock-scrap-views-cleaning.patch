PR: https://github.com/odoo/odoo/pull/

From: 1adee2bd8d2de88babb1e77c10099091662ccfc5
From: Arnaud Baes
Date: 2019-08-14 12:27:04

Structural Changes: 5
Total Changes: 8

[IMP] stock: scrap views cleaning

================================= pseudo patch: =================================

--- a/addons/stock/models/stock_scrap.py
+++ b/addons/stock/models/stock_scrap.py
@@ -8,6 +8,7 @@ from odoo.tools import float_compare
 
 class StockScrap(models.Model):
     _name = 'stock.scrap'
+    _inherit = ['mail.thread']
     _order = 'id desc'
     _description = 'Scrap'
 
@@ -46,7 +47,7 @@ class StockScrap(models.Model):
     move_id = fields.Many2one('stock.move', 'Scrap Move', readonly=True)
     picking_id = fields.Many2one('stock.picking', 'Picking', states={'done': [('readonly', True)]}, domain="[('company_id', '=', company_id)]")
     location_id = fields.Many2one(
-        'stock.location', 'Location', domain="[('usage', '=', 'internal'), ('company_id', 'in', [company_id, False])]",
+        'stock.location', 'Source Location', domain="[('usage', '=', 'internal'), ('company_id', 'in', [company_id, False])]",
         required=True, states={'done': [('readonly', True)]}, default=_get_default_location_id)
     scrap_location_id = fields.Many2one(
         'stock.location', 'Scrap Location', default=_get_default_scrap_location_id,
@@ -54,8 +55,8 @@ class StockScrap(models.Model):
     scrap_qty = fields.Float('Quantity', default=1.0, required=True, states={'done': [('readonly', True)]})
     state = fields.Selection([
         ('draft', 'Draft'),
-        ('done', 'Done')], string='Status', default="draft")
-    date_expected = fields.Datetime('Expected Date', default=fields.Datetime.now)
+        ('done', 'Done')], string='Status', default="draft", tracking=True)
+    date_done = fields.Datetime('Date')
 
     @api.onchange('picking_id')
     def _onchange_picking_id(self):
@@ -124,6 +125,7 @@ class StockScrap(models.Model):
             # master: replace context by cancel_backorder
             move.with_context(is_scrap=True)._action_done()
             scrap.write({'move_id': move.id, 'state': 'done'})
+            scrap.date_done = fields.Datetime.now()
         return True
 
     def action_get_stock_picking(self):
