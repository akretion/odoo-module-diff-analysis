PR: https://github.com/odoo/odoo/pull/

From: c0c72f027d33ac44c1cd65781e683af7e8736311
From: Yannick Tivisse
Date: 2018-11-06 15:18:06

Total Changes: 190

[ADD] hr_presence: New module to control employees presences

Purpose
=======

A lot of companies don't use the module hr.attendance but are faced
to employees distraction, they forget to record leaves.

In big companies, it is not easy to controle presence and
check if everyone is present in the office.

Specification
=============

1/ Review Human Resources menuitems

* Employees
* Contract
* Department
* Reports
    - Employee Presence
* Configuration
    - Settings
    - Employee
        - Tag
    - Contract
        - Types
        - Templates
    - Challenges
        - Challenges
        - Badges
        - Goal History

2/ Add option in hr settings to decide the company policy

[ ] Controle Presence of Employees
    [ ]  According the system login --> Based on the bus presence (Present if 'away' or 'online')
    [ ]  Following number of sent emails --> Based on the sent mail.message during the day
    [ ]  According to the IP address --> Based on the ip address when requesting a long polling, stored on a res.users.log

3/ Add an employee presence view

This view is only for the hr manager and the data is computed when the hr manager goes to it

Clicking on this menu item will generate all kanban of employees grouped by state (present, absent, to define)

On each employee cart, an action can be requested as:
* Send a sms to the employee
* Send an email to the employee
* Create a leave for the employee

4/ Use this email template to contact the employee

Dear %(employee_name)s,

Exception made if there was a mistake of ours, it seems that you are not at your office and there is not request of leaves from you.

Please, take appropriate measures in order to carry out this work absence.

Do not hesitate to contact your manager or the human resource department.

Best Regards,

================================= pseudo patch: =================================

--- a/None
+++ b/addons/hr_presence/models/__init__.py
@@ -0,0 +1,7 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from . import hr_employee
+from . import res_company
+from . import res_config_settings
+from . import res_users_log

--- a/None
+++ b/addons/hr_presence/models/hr_employee.py
@@ -0,0 +1,147 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import logging
+
+from odoo import fields, models, _
+from odoo.exceptions import UserError
+from odoo.fields import Datetime
+
+_logger = logging.getLogger(__name__)
+
+
+class ResCompany(models.Model):
+    _inherit = 'hr.employee'
+
+    hr_presence_state = fields.Selection([
+        ('present', 'Present'),
+        ('absent', 'Absent'),
+        ('to_define', 'To Define')], default='to_define', groups='hr.group_hr_manager')
+
+
+    def _action_open_presence_view(self):
+        # Compute the presence/absence for the employees on the same
+        # company than the HR/manager. Then opens the kanban view
+        # of the employees with an undefined presence/absence
+
+        _logger.info("Employees presence checked by: %s" % self.env.user.name)
+
+        company = self.env.user.company_id
+        if not company.hr_presence_last_compute_date or \
+                company.hr_presence_last_compute_date.day != Datetime.now().day:
+            self.env['hr.employee'].search([
+                ('department_id.company_id', '=', company.id)
+            ]).write({'hr_presence_state': 'to_define'})
+
+        employees = self.env['hr.employee'].search([
+            ('department_id.company_id', '=', company.id),
+            ('user_id', '!=', False),
+            ('hr_presence_state', '=', 'to_define')])
+
+        # Remove employees on holidays
+        leaves = self.env['hr.leave'].search([
+            ('state', '=', 'validate'),
+            ('date_from', '<=', Datetime.to_string(Datetime.now())),
+            ('date_to', '>=', Datetime.to_string(Datetime.now()))])
+        employees_on_holiday = leaves.mapped('employee_id')
+        employees_on_holiday.write({'hr_presence_state': 'absent'})
+        employees = employees - employees_on_holiday
+
+        # Check on system login
+        if self.env['ir.config_parameter'].sudo().get_param('hr_presence.hr_presence_control_login'):
+            online_employees = employees.filtered(lambda employee: employee.user_id.im_status in ['away', 'online'])
+            online_employees.write({'hr_presence_state': 'present'})
+            employees = employees - online_employees
+
+        # Check on IP
+        if self.env['ir.config_parameter'].sudo().get_param('hr_presence.hr_presence_control_ip'):
+            ip_list = company.hr_presence_control_ip_list
+            ip_list = ip_list.split(',') if ip_list else []
+            ip_employees = self.env['hr.employee']
+            for employee in employees:
+                employee_ips = self.env['res.users.log'].search([
+                    ('create_uid', '=', employee.user_id.id),
+                    ('ip', '!=', False),
+                    ('create_date', '>=', Datetime.to_string(Datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)))]
+                ).mapped('ip')
+                if any([ip in ip_list for ip in employee_ips]):
+                    ip_employees |= employee
+            ip_employees.write({'hr_presence_state': 'present'})
+            employees = employees - ip_employees
+
+        # Check on sent emails
+        if self.env['ir.config_parameter'].sudo().get_param('hr_presence.hr_presence_control_email'):
+            email_employees = self.env['hr.employee']
+            threshold = company.hr_presence_control_email_amount
+            for employee in employees:
+                sent_emails = self.env['mail.message'].search_count([
+                    ('author_id', '=', employee.user_id.partner_id.id),
+                    ('date', '>=', Datetime.to_string(Datetime.now().replace(hour=0, minute=0, second=0, microsecond=0))),
+                    ('date', '<=', Datetime.to_string(Datetime.now()))])
+                if sent_emails >= threshold:
+                    email_employees |= employee
+            email_employees.write({'hr_presence_state': 'present'})
+            employees = employees - email_employees
+
+        company.hr_presence_last_compute_date = Datetime.now()
+
+        return {
+            "type": "ir.actions.act_window",
+            "res_model": "hr.employee",
+            "views": [[self.env.ref('hr_presence.hr_employee_view_kanban').id, "kanban"], [False, "tree"], [False, "form"]],
+            'view_mode': 'kanban,tree,form',
+            "domain": [],
+            "name": "Employee's Presence to Define",
+            "context": {'search_default_group_hr_presence_state': 1},
+        }
+
+    def action_send_sms(self):
+        if not self.env.user.has_group('hr.group_hr_manager'):
+            raise UserError(_("You don't have the right to do this. Please contact an Administrator."))
+        if not self.mobile_phone:
+            raise UserError(_("There is no professional phone for this employee."))
+        body = _("""Exception made if there was a mistake of ours, it seems that you are not at your office and there is not request of leaves from you.
+Please, take appropriate measures in order to carry out this work absence.
+Do not hesitate to contact your manager or the human resource department.""")
+        return {
+            "type": "ir.actions.act_window",
+            "res_model": "sms.send_sms",
+            "view_mode": 'form',
+            "context": {
+                'active_id': self.env.context.get('active_id'),
+                'default_message': body,
+                'default_recipients': self.mobile_phone,
+            },
+            "name": "Send SMS",
+            "target": "new",
+        }
+
+    def action_send_mail(self):
+        if not self.env.user.has_group('hr.group_hr_manager'):
+            raise UserError(_("You don't have the right to do this. Please contact an Administrator."))
+        employee = self.env['hr.employee'].sudo().browse(self.env.context.get('active_id'))
+        if not employee.work_email:
+            raise UserError(_("There is no professional email address for this employee."))
+        template = self.env.ref('hr_presence.mail_template_presence', False)
+        compose_form = self.env.ref('mail.email_compose_message_wizard_form', False)
+        ctx = dict(
+            default_model='hr.employee',
+            default_res_id=employee.id,
+            default_use_template=bool(template),
+            default_template_id=template.id,
+            default_composition_mode='comment',
+            custom_layout='mail.mail_notification_light',
+            email_from=self.env.user.email,
+            email_to=employee.work_email,
+        )
+        return {
+            'name': _('Compose Email'),
+            'type': 'ir.actions.act_window',
+            'view_type': 'form',
+            'view_mode': 'form',
+            'res_model': 'mail.compose.message',
+            'views': [(compose_form.id, 'form')],
+            'view_id': compose_form.id,
+            'target': 'new',
+            'context': ctx,
+        }

--- a/None
+++ b/addons/hr_presence/models/res_company.py
@@ -0,0 +1,13 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class ResCompany(models.Model):
+    _inherit = 'res.company'
+
+
+    hr_presence_control_email_amount = fields.Integer(string="# emails to send")
+    hr_presence_control_ip_list = fields.Char(string="Valid IP addresses")
+    hr_presence_last_compute_date = fields.Datetime()

--- a/None
+++ b/addons/hr_presence/models/res_config_settings.py
@@ -0,0 +1,13 @@
+# -*- coding: utf-8 -*-
+
+from odoo import fields, models
+
+
+class ResConfigSettings(models.TransientModel):
+    _inherit = 'res.config.settings'
+
+    hr_presence_control_login = fields.Boolean(string="According to the system login (User status on chat)", config_parameter='hr_presence.hr_presence_control_login')
+    hr_presence_control_email = fields.Boolean(string="According to the amount of sent emails", config_parameter='hr_presence.hr_presence_control_email')
+    hr_presence_control_ip = fields.Boolean(string="According to the IP address", config_parameter='hr_presence.hr_presence_control_ip')
+    hr_presence_control_email_amount = fields.Integer(related="company_id.hr_presence_control_email_amount", readonly=False)
+    hr_presence_control_ip_list = fields.Char(related="company_id.hr_presence_control_ip_list", readonly=False)

--- a/None
+++ b/addons/hr_presence/models/res_users_log.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+
+from odoo import api, fields, models
+
+
+class ResUsersLog(models.Model):
+    _inherit = 'res.users.log'
+
+    create_uid = fields.Integer(index=True)
+    ip = fields.Char(string="IP Address")
