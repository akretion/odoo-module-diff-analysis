PR: https://github.com/odoo/odoo/pull/196567

From: c0bdb4fa2c61e460e5ff6ea53bd0bf86ce5e9cd6
From: tsm-odoo
Date: 2025-02-10 19:55:37

Breaking data model changes scores: del:2 + add:0, change matches:
-    channel_id = fields.Many2one(
-    from_livechat = fields.Boolean(compute="_compute_from_livechat", compute_sudo=True)

Total Changes: 46

[FIX] crm_livechat: simplify model

Remove useless field on crm.lead which is a huge model. No need to
add useless noise.

Remove useless groups. ACLs should be correctly implemented.

Remove useless code in tests.

follow up of task-4432728

closes odoo/odoo#196567

Related: odoo/enterprise#78602
Signed-off-by: SÃ©bastien Theys (seb) <seb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/crm_livechat/models/chatbot_script_step.py
+++ b/addons/crm_livechat/models/chatbot_script_step.py
@@ -31,7 +31,7 @@ class ChatbotScriptStep(models.Model):
         if msg := self._find_first_user_free_input(discuss_channel):
             name = html2plaintext(msg.body)[:100]
         return {
-            "channel_id": discuss_channel.id,
+            "origin_channel_id": discuss_channel.id,
             "company_id": self.crm_team_id.company_id.id,
             'description': description + discuss_channel._get_channel_history(),
             "name": name,

--- a/addons/crm_livechat/models/crm_lead.py
+++ b/addons/crm_livechat/models/crm_lead.py
@@ -1,23 +1,41 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
 from odoo import api, fields, models
+from odoo.exceptions import AccessError
 
 
 class CrmLead(models.Model):
     _inherit = "crm.lead"
 
-    channel_id = fields.Many2one(
+    origin_channel_id = fields.Many2one(
         "discuss.channel",
         "Live chat from which the lead was created",
         readonly=True,
-        groups="base.group_erp_manager",
         index="btree_not_null",
     )
-    from_livechat = fields.Boolean(compute="_compute_from_livechat", compute_sudo=True)
 
-    @api.depends("channel_id")
-    def _compute_from_livechat(self):
-        for lead in self:
-            lead.from_livechat = bool(lead.channel_id)
+    @api.model_create_multi
+    def create(self, vals_list):
+        origin_channel_ids = [
+            vals["origin_channel_id"] for vals in vals_list if vals.get("origin_channel_id")
+        ]
+        if not self.env["discuss.channel"].browse(origin_channel_ids).has_access("read"):
+            raise AccessError(
+                self.env._("You cannot create leads linked to channels you don't have access to.")
+            )
+        return super().create(vals_list)
+
+    def write(self, vals):
+        if origin_channel_id := vals.get("origin_channel_id"):
+            if not self.env["discuss.channel"].browse(origin_channel_id).has_access("read"):
+                raise AccessError(
+                    self.env._(
+                        "You cannot update a lead and link it to a channel you don't have access to."
+                    )
+                )
+        return super().write(vals)
 
     def action_open_livechat(self):
-        # sudo - discuss.channel: can read origin channel of the lead
-        self.env.user._bus_send_store(self.sudo().channel_id, extra_fields={"open_chat_window": True})
+        self.env.user._bus_send_store(
+            self.origin_channel_id, extra_fields={"open_chat_window": True}
+        )

--- a/addons/crm_livechat/models/discuss_channel.py
+++ b/addons/crm_livechat/models/discuss_channel.py
@@ -11,12 +11,12 @@ class DiscussChannel(models.Model):
 
     lead_ids = fields.One2many(
         "crm.lead",
-        "channel_id",
+        "origin_channel_id",
         string="Leads",
-        groups="base.group_erp_manager",
+        groups="sales_team.group_sale_salesman",
         help="The channel becomes accessible to sales users when leads are set.",
     )
-    has_crm_lead = fields.Boolean(compute="_compute_has_crm_lead", compute_sudo=True, store=True)
+    has_crm_lead = fields.Boolean(compute="_compute_has_crm_lead", store=True)
     _has_crm_lead_index = models.Index("(has_crm_lead) WHERE has_crm_lead IS TRUE")
 
     @api.depends("lead_ids")
@@ -60,7 +60,7 @@ class DiscussChannel(models.Model):
 
         utm_source = self.env.ref('crm_livechat.utm_source_livechat', raise_if_not_found=False)
         return self.env['crm.lead'].create({
-            "channel_id": self.id,
+            "origin_channel_id": self.id,
             'name': html2plaintext(key[5:]),
             'partner_id': customers[0].id if customers else False,
             'user_id': False,
