PR: https://github.com/odoo/odoo/pull/123237

From: 3fa87c8c479f2d4bfc58b181a0c49b77d76ff78c
From: Theo VINCENT (thvi)
Date: 2023-07-18 17:27:56
+    online_payment_provider_ids = fields.Many2many('payment.provider', string="Allowed Providers", domain="[('is_published', '=', True), ('state', 'in', ['enabled', 'test'])]")

Total Changes: 474

[ADD] pos_online_payment, *: add online payments

*: point_of_sale, pos_adyen, pos_hr, pos_mercury, pos_restaurant

Adds online payments in Point of Sale using the payment module.
The pos_online_payment module is meant to be used by shops for paying online instead of using a physical terminal and by restaurants for paying an order either from the paying station or in the self-order process (smartphone used to order and pay online).
The module depends only on point_of_sale (and account_payment to support online payments).
The online payments support for self-order will be added in another commit.
The feature can be used by configuring a special pos.payment.method for one or many pos.config.

Operation:
The frontend session user can enter one or several online payment method lines (with or without other payment methods).
When he validates the order, if the online payment amounts are valid, a popup with a QR code is displayed on the frontend screen and on the customer display. This QR code allows the customer to open the payment page to pay online for the order.

The amount to pay for an order on the payment portal is the remaining unpaid amount or a lower amount if several online payments lines are used. Therefore, at any time, the customer will be able to pay the amount of the order that is unpaid, without requiring a staff operation to update the amount to pay.

When an online payment is done for a POS order, the generated account.payment is linked to the POS order through a pos.payment that is created with the online payment method configured for the pos.config, and the POS order paid process is triggered (it is the responsibility of the server to finalize the validation of POS orders that have at least one online payment, and not the responsibility of the POS session web client). If for any reason, there is no longer any online payment method configured for the pos.config of the order, a new one can be created automatically and exceptionnaly used to link the done payment with the POS order. This guarantees that any online payment saved by the payment module will be linked to the POS order.

The session web client is notified of successful online payments through web socket communication, to make the cashier screen automatically and quickly react to payments.

If several online payments are used for a single POS order, they are processed one after each other.

Working principles:
 - The POS session web client is not allowed to save online payments on the server. Only the Odoo server, which handles the payment, can save online payments for a POS order.
 - The POS session is only responsible for saving the order (especially other payment methods) and the next online payment amount to pay (in case of several online payments) on the server before the online payments are made by the customer, and for displaying the online payment status and the link (QR code) to open the payment page.
That means that modifications that are made after the order is fully paid are not taken into account by the server.
 - Before validating an order, the POS session checks with the server if any online payment has been made for that POS order. If the user wasn't aware of one, the validation process is aborted, notifying him.
 - The sensitive online payments data is received by the frontend user with RPC to the server when validating an order, cancelling an online payment or receiving a notification through the POS bus (web socket communication).
This data is used to update the cashier data for the specific order.
 - No sensitive information is sent through the POS bus (web socket communication).
Indeed, the bus communication is only protected by the name of the channel, and there is no mecanism to prevent several attempts. Therefore, no sensitive information is sent through it, only a notification to invite the local browser to do a safe RPC to the server to check the new state of the order.
 - Online payments for a POS order cannot be modified or removed when they succeeded. Checks ensure to never allow an online payment to make the total paid amount greater than the total amount of the POS order.
 - If the frontend user clicks on the "Cancel" button of the online payment popup, the order can potentially still be paid online. Indeed, the order will be removed from the server only if it was added only for the online payment flow, and any order that is not paid can be paid on the online payment portal (if the customer has the web link).
This behavior ensures that in a shop, starting an online payment and then cancelling it doesn't prevent the user to close the POS session. And it ensures to don't delete a draft order that is used for other flows, like in a restaurant or when there are trusted POS configs.

Payment portal features:
 - The payment portal pages of a POS order are protected with its access_token.
 - If the amount of the order has changed when the customer clicks to pay, an error is fired to notify him and give him the choice to continue or abandon the payment.
 - An exit_route argument (an URL) can be passed to allow the customer to exit the payment portal at any time (with a button), which could be used for self-order flow.
 - A button to go back to the payment page is displayed when an error occurs during a payment transaction, which allows the customer to retry a payment without needing to scan again the QR code.
 - If the customer is not logged in in the payment portal (most frequent case), it is considered as the public user partner for the payment flow to don't give him privileged access to sensitive data like payment tokens.
 - The accounting process of online payments for POS orders is made in the same way that the pos.payment.method that have split_transactions to True.
 - The POS customer of a POS order has no link with the customer making an online payment for that POS order.
 - The payment portal is made using the pos.order id and not the pos_reference because the latter is not guaranteed to be unique.

Some tests have been written, especially one that simulates a whole online payment flow starting from nothing, creating an order, requesting an online payment, faking this online payment by doing web requests to the payment portal, then finally closing the POS session to check that there is no accounting issue.

The design of the payment portal is temporary.

closes odoo/odoo#123237

Task-id: 3276404
Related: odoo/enterprise#41776
Signed-off-by: Joseph Caburnay (jcb) <jcb@odoo.com>

================================= pseudo patch: =================================

--- a/None
+++ b/addons/pos_online_payment/models/__init__.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from . import pos_payment_method
+from . import pos_payment
+from . import account_payment
+from . import payment_transaction
+from . import pos_config
+from . import pos_order
+from . import pos_session

--- a/None
+++ b/addons/pos_online_payment/models/account_payment.py
@@ -0,0 +1,25 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import _, fields, models
+
+
+class AccountPayment(models.Model):
+    _inherit = 'account.payment'
+
+    pos_order_id = fields.Many2one('pos.order', string='POS Order', help='The Point of Sale order linked to this payment', readonly=True)
+
+    def action_view_pos_order(self):
+        """ Return the action for the view of the pos order linked to the payment.
+        """
+        self.ensure_one()
+
+        action = {
+            'name': _("POS Order"),
+            'type': 'ir.actions.act_window',
+            'res_model': 'pos.order',
+            'target': 'current',
+            'res_id': self.pos_order_id.id,
+            'view_mode': 'form'
+        }
+        return action

--- a/None
+++ b/addons/pos_online_payment/models/payment_transaction.py
@@ -0,0 +1,85 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import _, api, fields, models, tools
+from odoo.exceptions import ValidationError
+
+
+class PaymentTransaction(models.Model):
+    _inherit = 'payment.transaction'
+
+    pos_order_id = fields.Many2one('pos.order', string='POS Order', help='The Point of Sale order linked to the payment transaction', readonly=True)
+
+    @api.model
+    def _compute_reference_prefix(self, provider_code, separator, **values):
+        """ Override of payment to compute the reference prefix based on POS-specific values.
+
+        :return: The computed reference prefix if POS order id is found, the one of `super` otherwise
+        :rtype: str
+        """
+        pos_order_id = values.get('pos_order_id')
+        if pos_order_id:
+            pos_order = self.env['pos.order'].sudo().browse(pos_order_id).exists()
+            if pos_order:
+                return pos_order.pos_reference
+        return super()._compute_reference_prefix(provider_code, separator, **values)
+
+    def _set_authorized(self, state_message=None, **kwargs):
+        """ Override of payment to process POS online payments automatically. """
+        super()._set_authorized(state_message=state_message, **kwargs)
+        self._process_pos_online_payment()
+
+    def _reconcile_after_done(self):
+        """ Override of payment to process POS online payments automatically. """
+        super()._reconcile_after_done()
+        self._process_pos_online_payment()
+
+    def _process_pos_online_payment(self):
+        for tx in self:
+            if tx and tx.pos_order_id and tx.state in ('authorized', 'done') and not tx.payment_id.pos_order_id:
+                pos_order = tx.pos_order_id
+                if tools.float_compare(tx.amount, 0.0, precision_rounding=pos_order.currency_id.rounding) <= 0:
+                    raise ValidationError(_('The payment transaction (%d) has a negative amount.', tx.id))
+
+                if not tx.payment_id: # the payment could already have been created by account_payment module
+                    tx._create_payment()
+                if not tx.payment_id:
+                    raise ValidationError(_('The POS online payment (tx.id=%d) could not be saved correctly', tx.id))
+
+                payment_method = pos_order.online_payment_method_id
+                if not payment_method:
+                    pos_config = pos_order.config_id
+                    payment_method = self.env['pos.payment.method'].sudo()._get_or_create_online_payment_method(pos_config.company_id.id, pos_config.id)
+                    if not payment_method:
+                        raise ValidationError(_('The POS online payment (tx.id=%d) could not be saved correctly because the online payment method could not be found', tx.id))
+
+                pos_order.add_payment({
+                    'amount': tx.amount,
+                    'payment_date': tx.last_state_change,
+                    'payment_method_id': payment_method.id,
+                    'online_account_payment_id': tx.payment_id.id,
+                    'pos_order_id': pos_order.id,
+                })
+                tx.payment_id.update({
+                    'pos_payment_method_id': payment_method.id,
+                    'pos_order_id': pos_order.id,
+                    'pos_session_id': pos_order.session_id.id,
+                })
+                if pos_order.state == 'draft' and pos_order._is_pos_order_paid():
+                    pos_order._process_saved_order(False)
+                pos_order._send_online_payments_notification_via_bus()
+
+    def action_view_pos_order(self):
+        """ Return the action for the view of the pos order linked to the transaction.
+        """
+        self.ensure_one()
+
+        action = {
+            'name': _("POS Order"),
+            'type': 'ir.actions.act_window',
+            'res_model': 'pos.order',
+            'target': 'current',
+            'res_id': self.pos_order_id.id,
+            'view_mode': 'form'
+        }
+        return action

--- a/None
+++ b/addons/pos_online_payment/models/pos_config.py
@@ -0,0 +1,26 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models, api, _
+from odoo.exceptions import ValidationError
+
+
+class PosConfig(models.Model):
+    _inherit = 'pos.config'
+
+    @api.constrains('payment_method_ids')
+    def _check_online_payment_methods(self):
+        """ Checks the journal currency with _get_online_payment_providers(..., error_if_invalid=True)"""
+        for config in self:
+            opm_amount = 0
+            for pm in config.payment_method_ids:
+                if pm.is_online_payment:
+                    opm_amount += 1
+                    if opm_amount > 1:
+                        raise ValidationError(_("A POS config cannot have more than one online payment method."))
+                    if not pm._get_online_payment_providers(config.id, error_if_invalid=True):
+                        raise ValidationError(_("To use an online payment method in a POS config, it must have at least one published payment provider supporting the currency of that POS config."))
+
+    def _get_cashier_online_payment_method(self):
+        self.ensure_one()
+        return self.payment_method_ids.filtered('is_online_payment')[:1]

--- a/None
+++ b/addons/pos_online_payment/models/pos_order.py
@@ -0,0 +1,77 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models, fields, api, tools
+
+
+class PosOrder(models.Model):
+    _inherit = 'pos.order'
+
+    online_payment_method_id = fields.Many2one('pos.payment.method', compute="_compute_online_payment_method_id")
+    next_online_payment_amount = fields.Float(string='Next online payment amount to pay', states={'draft': [('readonly', False)]}, readonly=True, digits=0, required=False) # unlimited precision
+
+    @api.depends('config_id.payment_method_ids')
+    def _compute_online_payment_method_id(self):
+        for order in self:
+            order.online_payment_method_id = order.config_id._get_cashier_online_payment_method()
+
+    def get_amount_unpaid(self):
+        self.ensure_one()
+        return self.currency_id.round(self._get_rounded_amount(self.amount_total) - self.amount_paid)
+
+    def _clean_payment_lines(self):
+        self.ensure_one()
+        order_payments = self.env['pos.payment'].search(['&', ('pos_order_id', '=', self.id), ('online_account_payment_id', '=', False)])
+        order_payments.unlink()
+
+    def get_and_set_online_payments_data(self, next_online_payment_amount=False):
+        """ Allows to update the amount to pay for the next online payment and
+            get online payments already made and how much remains to be paid.
+            If next_online_payment_amount is different than False, updates the
+            next online payment amount, otherwise, the next online payment amount
+            is unchanged.
+            If next_online_payment_amount is 0 and the order has no successful
+            online payment, is in draft state, is not a restaurant order and the
+            pos.config has no trusted config, then the order is deleted from the
+            database, because it was probably added for the online payment flow.
+        """
+        self.ensure_one()
+        is_paid = self.state in ('paid', 'done', 'invoiced')
+        if is_paid:
+            return {
+                'id': self.id,
+                'paid_order': self._export_for_ui(self)
+            }
+
+        online_payments = self.sudo().env['pos.payment'].search_read(domain=['&', ('pos_order_id', '=', self.id), ('online_account_payment_id', '!=', False)], fields=['payment_method_id', 'amount'], load=False)
+        return_data = {
+            'id': self.id,
+            'online_payments': online_payments,
+            'amount_unpaid': self.get_amount_unpaid(),
+        }
+        if not isinstance(next_online_payment_amount, bool):
+            if tools.float_is_zero(next_online_payment_amount, precision_rounding=self.currency_id.rounding) and len(online_payments) == 0 and self.state == 'draft' and not self.config_id.module_pos_restaurant and len(self.config_id.trusted_config_ids) == 0:
+                self.sudo()._clean_payment_lines() # Needed to delete the order
+                self.sudo().unlink()
+                return_data['deleted'] = True
+            elif self._check_next_online_payment_amount(next_online_payment_amount):
+                self.next_online_payment_amount = next_online_payment_amount
+
+        return return_data
+
+    def _send_online_payments_notification_via_bus(self):
+        self.ensure_one()
+        # The bus communication is only protected by the name of the channel.
+        # Therefore, no sensitive information is sent through it, only a
+        # notification to invite the local browser to do a safe RPC to
+        # the server to check the new state of the order.
+        self.env['bus.bus']._sendone(self.session_id._get_bus_channel_name(), 'ONLINE_PAYMENTS_NOTIFICATION', {'id': self.id})
+
+    def _check_next_online_payment_amount(self, amount):
+        self.ensure_one()
+        return tools.float_compare(amount, 0.0, precision_rounding=self.currency_id.rounding) >= 0 and tools.float_compare(amount, self.get_amount_unpaid(), precision_rounding=self.currency_id.rounding) <= 0
+
+    def _get_checked_next_online_payment_amount(self):
+        self.ensure_one()
+        amount = self.next_online_payment_amount
+        return amount if self._check_next_online_payment_amount(amount) else False

--- a/None
+++ b/addons/pos_online_payment/models/pos_payment.py
@@ -0,0 +1,57 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import logging
+from odoo import api, fields, models
+from odoo.exceptions import UserError
+
+_logger = logging.getLogger(__name__)
+
+
+class PosPayment(models.Model):
+    _inherit = 'pos.payment'
+
+    online_account_payment_id = fields.Many2one('account.payment', string='Online accounting payment', readonly=True) # One2one
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        online_account_payments_by_pm = {}
+        for vals in vals_list:
+            pm_id = vals['payment_method_id']
+            if pm_id not in online_account_payments_by_pm:
+                online_account_payments_by_pm[pm_id] = set()
+            online_account_payments_by_pm[pm_id].add(vals.get('online_account_payment_id'))
+
+        opms_read_id = self.env['pos.payment.method'].search_read(['&', ('id', 'in', list(online_account_payments_by_pm.keys())), ('is_online_payment', '=', True)], ["id"])
+        opms_id = {opm_read_id['id'] for opm_read_id in opms_read_id}
+        online_account_payments_to_check_id = set()
+
+        for pm_id, oaps_id in online_account_payments_by_pm.items():
+            if pm_id in opms_id:
+                if None in oaps_id:
+                    raise UserError("Cannot create a POS online payment without an accounting payment.")
+                else:
+                    online_account_payments_to_check_id.update(oaps_id)
+            elif any(oaps_id):
+                raise UserError("Cannot create a POS payment with a not online payment method and an online accounting payment.")
+
+        if online_account_payments_to_check_id:
+            valid_oap_amount = self.env['account.payment'].search_count([('id', 'in', list(online_account_payments_to_check_id))])
+            if valid_oap_amount != len(online_account_payments_to_check_id):
+                raise UserError("Cannot create a POS online payment without an accounting payment.")
+
+        return super().create(vals_list)
+
+    def write(self, vals):
+        if vals.keys() & ('amount', 'payment_date', 'payment_method_id', 'online_account_payment_id', 'pos_order_id') and any(payment.online_account_payment_id or payment.payment_method_id.is_online_payment for payment in self):
+            raise UserError("Cannot edit a POS online payment essential data.")
+        return super().write(vals)
+
+    @api.constrains('payment_method_id')
+    def _check_payment_method_id(self):
+        bypass_check_payments = self.filtered('payment_method_id.is_online_payment')
+        if any(payment.payment_method_id != payment.pos_order_id.online_payment_method_id for payment in bypass_check_payments):
+            # An online payment must always be saved for the POS, even if the online payment method is no longer configured/allowed in the pos.config, because in any case it is saved by account_payment and payment modules.
+            _logger.warning("Allow to save a POS online payment with an unexpected online payment method")
+
+        super(PosPayment, self - bypass_check_payments)._check_payment_method_id()

--- a/None
+++ b/addons/pos_online_payment/models/pos_payment_method.py
@@ -0,0 +1,118 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
+
+
+class PosPaymentMethod(models.Model):
+    _inherit = "pos.payment.method"
+
+    is_online_payment = fields.Boolean(string="Online Payment", help="Use this payment method for online payments (payments made on a web page with online payment providers)", default=False)
+    online_payment_provider_ids = fields.Many2many('payment.provider', string="Allowed Providers", domain="[('is_published', '=', True), ('state', 'in', ['enabled', 'test'])]")
+    has_an_online_payment_provider = fields.Boolean(compute='_compute_has_an_online_payment_provider', readonly=True)
+    type = fields.Selection(selection_add=[('online', 'Online')])
+
+    @api.depends('is_online_payment')
+    def _compute_type(self):
+        opm = self.filtered('is_online_payment')
+        if opm:
+            opm.type = 'online'
+
+        super(PosPaymentMethod, self - opm)._compute_type()
+
+    def _get_online_payment_providers(self, pos_config_id=False, error_if_invalid=True):
+        self.ensure_one()
+        providers_sudo = self.sudo().online_payment_provider_ids
+        if not providers_sudo: # Empty = all published providers
+            providers_sudo = self.sudo().env['payment.provider'].search([('is_published', '=', True), ('state', 'in', ['enabled', 'test'])])
+
+        if not pos_config_id:
+            return providers_sudo
+
+        config_currency = self.sudo().env['pos.config'].browse(pos_config_id).currency_id
+        valid_providers = providers_sudo.filtered(lambda p: not p.journal_id.currency_id or p.journal_id.currency_id == config_currency)
+        if error_if_invalid and len(providers_sudo) != len(valid_providers):
+            raise ValidationError(_("All payment providers configured for an online payment method must use the same currency as the Sales Journal, or the company currency if that is not set, of the POS config."))
+        return valid_providers
+
+    @api.depends('is_online_payment', 'online_payment_provider_ids')
+    def _compute_has_an_online_payment_provider(self):
+        for pm in self:
+            if pm.is_online_payment:
+                pm.has_an_online_payment_provider = bool(pm._get_online_payment_providers())
+            else:
+                pm.has_an_online_payment_provider = False
+
+    def _is_write_forbidden(self, fields):
+        return super(PosPaymentMethod, self)._is_write_forbidden(fields - {'online_payment_provider_ids'})
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        for vals in vals_list:
+            if vals.get('is_online_payment', False):
+                self._force_online_payment_values(vals)
+        return super().create(vals_list)
+
+    def write(self, vals):
+        if 'is_online_payment' in vals:
+            if vals['is_online_payment']:
+                self._force_online_payment_values(vals)
+            return super().write(vals)
+
+        opm = self.filtered('is_online_payment')
+        not_opm = self - opm
+
+        res = True
+        if opm:
+            forced_vals = vals.copy()
+            self._force_online_payment_values(forced_vals, True)
+            res = super(PosPaymentMethod, opm).write(forced_vals) and res
+        if not_opm:
+            res = super(PosPaymentMethod, not_opm).write(vals) and res
+
+        return res
+
+    @staticmethod
+    def _force_online_payment_values(vals, if_present=False):
+        if 'type' in vals:
+            vals['type'] = 'online'
+
+        disabled_fields_name = ('split_transactions', 'receivable_account_id', 'outstanding_account_id', 'journal_id', 'is_cash_count', 'use_payment_terminal')
+        if if_present:
+            for name in disabled_fields_name:
+                if name in vals:
+                    vals[name] = False
+        else:
+            for name in disabled_fields_name:
+                vals[name] = False
+
+    def _get_payment_terminal_selection(self):
+        return super(PosPaymentMethod, self)._get_payment_terminal_selection() if not self.is_online_payment else []
+
+    @api.depends('type')
+    def _compute_hide_use_payment_terminal(self):
+        opm = self.filtered(lambda pm: pm.type == 'online')
+        if opm:
+            opm.hide_use_payment_terminal = True
+        super(PosPaymentMethod, self - opm)._compute_hide_use_payment_terminal()
+
+    @api.model
+    def _get_or_create_online_payment_method(self, company_id, pos_config_id):
+        """ Get the first online payment method compatible with the provided pos.config.
+            If there isn't any, try to find an existing one in the same company and return it without adding the pos.config to it.
+            If there is not, create a new one for the company and return it without adding the pos.config to it.
+        """
+        # Parameters are ids instead of a pos.config record because this method can be called from a web controller or internally
+        payment_method_id = self.env['pos.payment.method'].search([('is_online_payment', '=', True), ('company_id', '=', company_id), ('config_ids', 'in', pos_config_id)], limit=1).exists()
+        if not payment_method_id:
+            payment_method_id = self.env['pos.payment.method'].search([('is_online_payment', '=', True), ('company_id', '=', company_id)], limit=1).exists()
+            if not payment_method_id:
+                payment_method_id = self.env['pos.payment.method'].create({
+                    'name': 'Online Payment',
+                    'is_online_payment': True,
+                    'company_id': company_id,
+                })
+                if not payment_method_id:
+                    raise ValidationError('Could not create an online payment method (company_id=%d, pos_config_id=%d)' % (company_id, pos_config_id))
+        return payment_method_id

--- a/None
+++ b/addons/pos_online_payment/models/pos_session.py
@@ -0,0 +1,76 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from collections import defaultdict
+from odoo import models, tools, _
+from odoo.exceptions import UserError
+
+
+class PosSession(models.Model):
+    _inherit = 'pos.session'
+
+    def _loader_params_pos_payment_method(self):
+        result = super()._loader_params_pos_payment_method()
+        result['search_params']['fields'].append('is_online_payment')
+        return result
+
+    def _accumulate_amounts(self, data):
+        data = super()._accumulate_amounts(data)
+        amounts = lambda: {'amount': 0.0, 'amount_converted': 0.0}
+
+        split_receivables_online = defaultdict(amounts)
+        currency_rounding = self.currency_id.rounding
+        for order in self.order_ids:
+            for payment in order.payment_ids:
+                amount = payment.amount
+                if tools.float_is_zero(amount, precision_rounding=currency_rounding):
+                    continue
+                date = payment.payment_date
+                payment_method = payment.payment_method_id
+                payment_type = payment_method.type
+
+                if payment_type == 'online':
+                    split_receivables_online[payment] = self._update_amounts(split_receivables_online[payment], {'amount': amount}, date)
+
+        data.update({'split_receivables_online': split_receivables_online,})
+        return data
+
+    def _create_bank_payment_moves(self, data):
+        data = super()._create_bank_payment_moves(data)
+
+        split_receivables_online = data.get('split_receivables_online')
+        MoveLine = data.get('MoveLine')
+
+        online_payment_to_receivable_lines = {}
+
+        for payment, amounts in split_receivables_online.items():
+            split_receivable_line = MoveLine.create(self._get_split_receivable_op_vals(payment, amounts['amount'], amounts['amount_converted']))
+            account_payment = payment.online_account_payment_id
+            payment_receivable_line = account_payment.move_id.line_ids.filtered(lambda line: line.account_id == account_payment.destination_account_id)
+            online_payment_to_receivable_lines[payment] = split_receivable_line | payment_receivable_line
+
+        data['online_payment_to_receivable_lines'] = online_payment_to_receivable_lines
+        return data
+
+    def _get_split_receivable_op_vals(self, payment, amount, amount_converted):
+        partner = payment.online_account_payment_id.partner_id
+        accounting_partner = self.env["res.partner"]._find_accounting_partner(partner)
+        if not accounting_partner:
+            raise UserError(_("The partner of the POS online payment (id=%d) could not be found") % (payment.id))
+        partial_vals = {
+            'account_id': accounting_partner.property_account_receivable_id.id,
+            'move_id': self.move_id.id,
+            'partner_id': accounting_partner.id,
+            'name': '%s - %s (%s)' % (self.name, payment.payment_method_id.name, payment.online_account_payment_id.payment_method_line_id.payment_provider_id.name),
+        }
+        return self._debit_amounts(partial_vals, amount, amount_converted)
+
+    def _reconcile_account_move_lines(self, data):
+        data = super()._reconcile_account_move_lines(data)
+        online_payment_to_receivable_lines = data.get('online_payment_to_receivable_lines')
+
+        for payment, lines in online_payment_to_receivable_lines.items():
+            if payment.online_account_payment_id.partner_id.property_account_receivable_id.reconcile:
+                lines.filtered(lambda line: not line.reconciled).reconcile()
+
+        return data
