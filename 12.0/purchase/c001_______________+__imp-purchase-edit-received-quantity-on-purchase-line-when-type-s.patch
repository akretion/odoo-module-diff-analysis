PR: https://github.com/odoo/odoo/pull/

From: 2d3e6d7383aaa3c1589f220ab3a97c715d73e00a
From: Pierre Masereel
Date: 2017-11-08 14:28:07

Structural Changes: 3
Total Changes: 46

[IMP] purchase: edit received quantity on purchase_line when type service

When we purchase products of type services,the received quantity is
always set to the ordered quantity.

We want to be able to manually enter a received quantity on service
products to have a better trace of what have been received or not.

We show the picking stat button olnly if there are picking

We show the columns qty_received, qty_invoiced and invoice_status
depending on the parent state, and not depending on the context passed
in the menu item.

================================= pseudo patch: =================================

--- a/addons/purchase/models/purchase.py
+++ b/addons/purchase/models/purchase.py
@@ -550,25 +550,6 @@ class PurchaseOrderLine(models.Model):
                         qty -= inv_line.uom_id._compute_quantity(inv_line.quantity, line.product_uom)
             line.qty_invoiced = qty
 
-    @api.depends('order_id.state', 'move_ids.state', 'move_ids.product_uom_qty')
-    def _compute_qty_received(self):
-        for line in self:
-            if line.order_id.state not in ['purchase', 'done']:
-                line.qty_received = 0.0
-                continue
-            if line.product_id.type not in ['consu', 'product']:
-                line.qty_received = line.product_qty
-                continue
-            total = 0.0
-            for move in line.move_ids:
-                if move.state == 'done':
-                    if move.location_dest_id.usage == "supplier":
-                        if move.to_refund:
-                            total -= move.product_uom._compute_quantity(move.product_uom_qty, line.product_uom)
-                    else:
-                        total += move.product_uom._compute_quantity(move.product_uom_qty, line.product_uom)
-            line.qty_received = total
-
     @api.model
     def create(self, values):
         line = super(PurchaseOrderLine, self).create(values)
@@ -606,6 +587,7 @@ class PurchaseOrderLine(models.Model):
     product_image = fields.Binary(
         'Product Image', related="product_id.image",
         help="Non-stored related field to allow portal user to see the image of the product he has ordered")
+    product_type = fields.Selection(related='product_id.type')
     move_ids = fields.One2many('stock.move', 'purchase_line_id', string='Reservation', readonly=True, ondelete='set null', copy=False)
     price_unit = fields.Float(string='Unit Price', required=True, digits=dp.get_precision('Product Price'))
 
@@ -623,7 +605,7 @@ class PurchaseOrderLine(models.Model):
 
     # Replace by invoiced Qty
     qty_invoiced = fields.Float(compute='_compute_qty_invoiced', string="Billed Qty", digits=dp.get_precision('Product Unit of Measure'), store=True)
-    qty_received = fields.Float(compute='_compute_qty_received', string="Received Qty", digits=dp.get_precision('Product Unit of Measure'), store=True)
+    qty_received = fields.Float(string="Received Qty", digits=dp.get_precision('Product Unit of Measure'))
 
     partner_id = fields.Many2one('res.partner', related='order_id.partner_id', string='Partner', readonly=True, store=True)
     currency_id = fields.Many2one(related='order_id.currency_id', store=True, string='Currency', readonly=True)
@@ -632,6 +614,18 @@ class PurchaseOrderLine(models.Model):
     orderpoint_id = fields.Many2one('stock.warehouse.orderpoint', 'Orderpoint')
     move_dest_ids = fields.One2many('stock.move', 'created_purchase_line_id', 'Downstream Moves')
 
+    def _update_received_qty(self):
+        for line in self:
+            total = 0.0
+            for move in line.move_ids:
+                if move.state == 'done':
+                    if move.location_dest_id.usage == "supplier":
+                        if move.to_refund:
+                            total -= move.product_uom._compute_quantity(move.product_uom_qty, line.product_uom)
+                    else:
+                        total += move.product_uom._compute_quantity(move.product_uom_qty, line.product_uom)
+            line.qty_received = total
+
     @api.multi
     def _create_or_update_picking(self):
         for line in self:

--- a/addons/purchase/models/stock.py
+++ b/addons/purchase/models/stock.py
@@ -71,6 +71,18 @@ class StockMove(models.Model):
         vals['purchase_line_id'] = self.purchase_line_id.id
         return vals
 
+    def _action_done(self):
+        res = super(StockMove, self)._action_done()
+        self.mapped('purchase_line_id').sudo()._update_received_qty()
+        return res
+
+    def write(self, vals):
+        res = super(StockMove, self).write(vals)
+        if 'product_uom_qty' in vals:
+            self.filtered(lambda m: m.state == 'done' and m.purchase_line_id).mapped(
+                'purchase_line_id').sudo()._update_received_qty()
+        return res
+
 class StockWarehouse(models.Model):
     _inherit = 'stock.warehouse'
 
