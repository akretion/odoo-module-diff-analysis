PR: https://github.com/odoo/odoo/pull/75862

From: fa034b2a646d9bc761246db62f9e96d565671ce8
From: wan
Date: 2021-09-07 15:50:00

Structural Changes: 2
Total Changes: 39

[IMP] *: product back2basics 15.0

Rework the whole view, generally.

task-2605931

Part-of: odoo/odoo#75862

================================= pseudo patch: =================================

--- a/addons/sale_project/models/product.py
+++ b/addons/sale_project/models/product.py
@@ -8,12 +8,14 @@ from odoo.exceptions import ValidationError
 class ProductTemplate(models.Model):
     _inherit = 'product.template'
 
-    service_tracking = fields.Selection([
-        ('no', 'Don\'t create a task'),
-        ('task_global_project', 'Create a task in an existing project'),
-        ('task_in_project', 'Create a task in sales order\'s project'),
-        ('project_only', 'Create a new project but no task')],
-        string="Service Tracking", default="no",
+    service_tracking = fields.Selection(
+        selection=[
+            ('no', 'Nothing'),
+            ('task_global_project', 'Task'),
+            ('task_in_project', 'Project & Task'),
+            ('project_only', 'Project'),
+        ],
+        string="Create on Order", default="no",
         help="On Sales order confirmation, this product can generate a project and/or task. \
         From those, you can track the service you are selling.\n \
         'In sale order\'s project': Will use the sale order\'s configured project if defined or fallback to \
@@ -27,6 +29,31 @@ class ProductTemplate(models.Model):
         domain="[('company_id', '=', current_company_id)]",
         help='Select a billable project to be the skeleton of the new created project when selling the current product. Its stages and tasks will be duplicated.')
 
+    @api.depends('service_tracking', 'type')
+    def _compute_product_tooltip(self):
+        super()._compute_product_tooltip()
+        for record in self.filtered(lambda record: record.type == 'service'):
+            if record.service_tracking == 'no':
+                record.product_tooltip = _(
+                    "Invoice ordered quantities as soon as this service is sold."
+                )
+            elif record.service_tracking == 'task_global_project':
+                record.product_tooltip = _(
+                    "Invoice as soon as this service is sold, and create a task in an existing "
+                    "project to track the time spent."
+                )
+            elif record.service_tracking == 'task_in_project':
+                record.product_tooltip = _(
+                    "Invoice ordered quantities as soon as this service is sold, and create a "
+                    "project for the order with a task for each sales order line to track the time"
+                    " spent."
+                )
+            elif record.service_tracking == 'project_only':
+                record.product_tooltip = _(
+                    "Invoice ordered quantities as soon as this service is sold, and create an "
+                    "empty project for the order to track the time spent."
+                )
+
     @api.constrains('project_id', 'project_template_id')
     def _check_project_and_template(self):
         """ NOTE 'service_tracking' should be in decorator parameters but since ORM check constraints twice (one after setting
