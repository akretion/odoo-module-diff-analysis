PR: https://github.com/odoo/odoo/pull/99411

From: ccc1fa5d377fe13361f8a81bde90fb64bd90b420
From: Arnold Moyaux
Date: 2022-09-12 11:49:16

Structural Changes: 3
Total Changes: 45

[IMP] purchase_mrp: cost share for kit

Be able to define a cost share on kit's components. The purpose, define
a cost repartition closer to the reality.

If the cost share is not define, it will split by the number of lines.

Part-of: odoo/odoo#99411

================================= pseudo patch: =================================

--- a/addons/purchase_mrp/models/__init__.py
+++ b/addons/purchase_mrp/models/__init__.py
@@ -4,4 +4,5 @@
 from . import account_move
 from . import purchase
 from . import mrp_production
+from . import mrp_bom
 from . import stock_move

--- a/None
+++ b/addons/purchase_mrp/models/mrp_bom.py
@@ -0,0 +1,37 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models, _
+from odoo.exceptions import UserError
+
+
+class MrpBom(models.Model):
+    _inherit = 'mrp.bom'
+
+    def _check_bom_lines(self):
+        res = super()._check_bom_lines()
+        for bom in self:
+            if all(not bl.cost_share for bl in bom.bom_lines):
+                continue
+            if any(bl.cost_share < 0 for bl in bom.bom_lines):
+                raise UserError(_("Components cost share have to be positive or equals to zero."))
+            if sum(bom.bom_lines.mapped('cost_share')) != 100:
+                raise UserError(_("The total cost share for a BoM's component have to be 100"))
+        return res
+
+
+class MrpBomLine(models.Model):
+    _inherit = 'mrp.bom.line'
+
+    cost_share = fields.Float(
+        "Cost Share (%)", digits=(5, 2),  # decimal = 2 is important for rounding calculations!!
+        help="The percentage of the component repartition cost when purchasing a kit."
+             "The total of all components' cost have to be equal to 100.")
+
+    def _get_cost_share(self):
+        self.ensure_one()
+        if self.cost_share:
+            return fields.Float.round(self.cost_share / 100, 2)
+        bom = self.bom_id
+        bom_lines_without_cost_share = bom.bom_line_ids.filtered(lambda bl: not bl.cost_share)
+        return fields.Float.round(1 / len(bom_lines_without_cost_share), 2)

--- a/addons/purchase_mrp/models/stock_move.py
+++ b/addons/purchase_mrp/models/stock_move.py
@@ -16,6 +16,13 @@ class StockMove(models.Model):
             vals['purchase_line_id'] = self.purchase_line_id.id
         return vals
 
+    def _get_price_unit(self):
+        price_unit = super()._get_price_unit()
+        if self.product_id == self.purchase_line_id.product_id or not self.bom_line_id:
+            return price_unit
+        cost_share = self.bom_line_id._get_cost_share()
+        return price_unit * cost_share
+
     def _get_valuation_price_and_qty(self, related_aml, to_curr):
         valuation_price_unit_total, valuation_total_qty = super()._get_valuation_price_and_qty(related_aml, to_curr)
         boms = self.env['mrp.bom']._bom_find(related_aml.product_id, company_id=related_aml.company_id.id, bom_type='phantom')
