PR: https://github.com/odoo/odoo/pull/35737

From: abd73d61a20466cc61525557d8750e8d8fcc2aa7
From: Yannick Tivisse
Date: 2019-08-16 11:24:04

Structural Changes: 5.9
Total Changes: 80

[IMP] hr_holidays: Improve general UX (back2basics)

TaskID: 2053585

closes odoo/odoo#35737

Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/__init__.py
+++ b/addons/hr_holidays/models/__init__.py
@@ -7,7 +7,6 @@ from . import hr_department
 from . import hr_leave
 from . import hr_leave_allocation
 from . import hr_leave_type
-from . import mail_channel
 from . import mail_message_subtype
 from . import res_partner
 from . import res_users

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -126,7 +126,6 @@ class HolidaysRequest(models.Model):
         'hr.department', string='Department', readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
     notes = fields.Text('Reasons', readonly=True, states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
-    out_of_office_message = fields.Char(string='Chat Status')
     # duration
     date_from = fields.Datetime(
         'Start Date', readonly=True, index=True, copy=False, required=True,
@@ -263,11 +262,6 @@ class HolidaysRequest(models.Model):
         self.request_unit_custom = False
         self.state = 'confirm' if self.validation_type != 'no_validation' else 'draft'
 
-    @api.onchange('user_id')
-    def _onchange_user_id(self):
-        if not self.out_of_office_message:
-            self.out_of_office_message = self.user_id.out_of_office_message
-
     @api.onchange('request_date_from_period', 'request_hour_from', 'request_hour_to',
                   'request_date_from', 'request_date_to',
                   'employee_id')
@@ -630,9 +624,6 @@ class HolidaysRequest(models.Model):
                         pass
 
     def write(self, values):
-        # Allow an employee to always write his own out of office message
-        if len(self) == 1 and values.keys() == {'out_of_office_message'} and self.employee_id.user_id == self.env.user:
-            return super(HolidaysRequest, self.sudo()).write(values)
         is_officer = self.env.user.has_group('hr_holidays.group_hr_holidays_user')
 
         if not is_officer:

--- a/addons/hr_holidays/models/hr_leave_allocation.py
+++ b/addons/hr_holidays/models/hr_leave_allocation.py
@@ -111,8 +111,11 @@ class HolidaysAllocation(models.Model):
         'hr.employee.category', string='Employee Tag', readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
     # accrual configuration
-    accrual = fields.Boolean(
-        "Accrual", readonly=True,
+    allocation_type = fields.Selection(
+        [
+            ('regular', 'Regular Allocation'),
+            ('accrual', 'Accrual Allocation')
+        ], string="Allocation Type", default="regular", required=True, readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
     accrual_limit = fields.Integer('Balance limit', default=0, help="Maximum of allocation for accrual; 0 means no maximum.")
     number_per_interval = fields.Float("Number of unit per interval", readonly=True, states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, default=1)
@@ -150,7 +153,7 @@ class HolidaysAllocation(models.Model):
         """
         today = fields.Date.from_string(fields.Date.today())
 
-        holidays = self.search([('accrual', '=', True), ('state', '=', 'validate'), ('holiday_type', '=', 'employee'),
+        holidays = self.search([('allocation_type', '=', 'accrual'), ('state', '=', 'validate'), ('holiday_type', '=', 'employee'),
                                 '|', ('date_to', '=', False), ('date_to', '>', fields.Datetime.now()),
                                 '|', ('nextcall', '=', False), ('nextcall', '<=', today)])
 
@@ -298,7 +301,7 @@ class HolidaysAllocation(models.Model):
             if new_date_to < self.date_to:
                 self.date_to = new_date_to
 
-        if self.accrual:
+        if self.allocation_type == 'accrual':
             self.number_of_days = 0
 
             if self.holiday_status_id.request_unit == 'hour':
@@ -357,7 +360,7 @@ class HolidaysAllocation(models.Model):
     @api.model
     def create(self, values):
         """ Override to avoid automatic logging of creation """
-        if values.get('accrual', False):
+        if values.get('allocation_type', 'regular') == 'accrual':
             values['date_from'] = fields.Datetime.now()
         employee_id = values.get('employee_id', False)
         if not values.get('department_id'):
@@ -407,7 +410,7 @@ class HolidaysAllocation(models.Model):
             'number_of_days': self.number_of_days,
             'parent_id': self.id,
             'employee_id': employee.id,
-            'accrual': self.accrual,
+            'allocation_type': self.allocation_type,
             'date_to': self.date_to,
             'interval_unit': self.interval_unit,
             'interval_number': self.interval_number,
@@ -450,7 +453,6 @@ class HolidaysAllocation(models.Model):
         self.filtered(lambda hol: hol.validation_type == 'both').write({'state': 'validate1', 'first_approver_id': current_employee.id})
         self.filtered(lambda hol: not hol.validation_type == 'both').action_validate()
         self.activity_update()
-        return True
 
     def action_validate(self):
         current_employee = self.env['hr.employee'].search([('user_id', '=', self.env.uid)], limit=1)

--- a/addons/hr_holidays/models/hr_leave_type.py
+++ b/addons/hr_holidays/models/hr_leave_type.py
@@ -61,7 +61,7 @@ class HolidaysType(models.Model):
         compute='_compute_leaves', string='Remaining Time Off',
         help='Maximum Time Off Allowed - Time Off Already Taken')
     virtual_remaining_leaves = fields.Float(
-        compute='_compute_leaves', string='Virtual Remaining Time Off',
+        compute='_compute_leaves', search='_search_virtual_remaining_leaves' ,string='Virtual Remaining Time Off',
         help='Maximum Time Off Allowed - Time Off Already Taken - Time Off Waiting Approval')
     group_days_allocation = fields.Float(
         compute='_compute_group_days_allocation', string='Days Allocated')
@@ -154,6 +154,30 @@ class HolidaysType(models.Model):
 
         return [('id', 'in', valid_leave)]
 
+    def _search_virtual_remaining_leaves(self, operator, value):
+        value = float(value)
+        leave_types = self.env['hr.leave.type'].search([])
+        valid_leave_types = self.env['hr.leave.type']
+
+        for leave_type in leave_types:
+            if leave_type.allocation_type != 'no':
+                if operator == '>' and leave_type.virtual_remaining_leaves > value:
+                    valid_leave_types |= leave_type
+                elif operator == '<' and leave_type.virtual_remaining_leaves < value:
+                    valid_leave_types |= leave_type
+                elif operator == '>=' and leave_type.virtual_remaining_leaves >= value:
+                    valid_leave_types |= leave_type
+                elif operator == '<=' and leave_type.virtual_remaining_leaves <= value:
+                    valid_leave_types |= leave_type
+                elif operator == '=' and leave_type.virtual_remaining_leaves == value:
+                    valid_leave_types |= leave_type
+                elif operator == '!=' and leave_type.virtual_remaining_leaves != value:
+                    valid_leave_types |= leave_type
+            else:
+                valid_leave_types |= leave_type
+
+        return [('id', 'in', valid_leave_types.ids)]
+
     def get_days(self, employee_id):
         # need to use `dict` constructor to create a dict per id
         result = dict((id, dict(max_leaves=0, leaves_taken=0, remaining_leaves=0, virtual_remaining_leaves=0)) for id in self.ids)

--- a/addons/hr_holidays/models/mail_channel.py
+++ b/None
@@ -1,28 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, fields, models
-
-
-class Channel(models.Model):
-    _inherit = 'mail.channel'
-
-    def partner_info(self, all_partners, direct_partners):
-        partner_infos = super(Channel, self).partner_info(all_partners, direct_partners)
-        # only search for leave out_of_office_message if im_status is on leave
-        partners_on_leave = [partner_id for partner_id in direct_partners.ids if 'leave' in partner_infos[partner_id]['im_status']]
-        if partners_on_leave:
-            now = fields.Datetime.now()
-            self.env.cr.execute('''SELECT res_users.partner_id as partner_id, hr_leave.out_of_office_message as out_of_office_message, hr_leave.date_to as date_to
-                                FROM res_users
-                                JOIN hr_leave ON hr_leave.user_id = res_users.id
-                                AND hr_leave.state not in ('cancel', 'refuse')
-                                AND res_users.active = 't'
-                                AND hr_leave.date_from <= %s
-                                AND hr_leave.date_to >= %s
-                                AND res_users.partner_id in %s''', (now, now, tuple(partners_on_leave)))
-            out_of_office_infos = dict(((res['partner_id'], res) for res in self.env.cr.dictfetchall()))
-            for partner_id, out_of_office_info in out_of_office_infos.items():
-                partner_infos[partner_id]['out_of_office_date_end'] = out_of_office_info['date_to']
-                partner_infos[partner_id]['out_of_office_message'] = out_of_office_info['out_of_office_message']
-        return partner_infos
