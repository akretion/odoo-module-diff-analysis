PR: https://github.com/odoo/odoo/pull/

From: c0150b1a4d5abdb6d6e0386576f979fa58881f87
From: Ronak Baxi
Date: 2015-10-27 11:28:47

Breaking data model changes scores: del:2 + add:1, change matches:
+    member_ids = fields.One2many('res.users', 'sale_team_id', string='Team Members')
-    _inherit = 'res.partner'
-    _inherit = 'res.users'

Total Changes: 90

[MIG] sales_team: Migrated to new api

================================= pseudo patch: =================================

--- a/addons/sales_team/models/__init__.py
+++ b/addons/sales_team/models/__init__.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 import crm_team
-import res_config
+import res_partner
+import res_users

--- a/addons/sales_team/models/crm_team.py
+++ b/addons/sales_team/models/crm_team.py
@@ -1,67 +1,40 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from openerp.osv import fields, osv
+from odoo import api, fields, models
 
 
-class crm_team(osv.Model):
+class CrmTeam(models.Model):
     _name = "crm.team"
     _inherit = ['mail.thread', 'ir.needaction_mixin']
     _description = "Sales Team"
     _order = "name"
     _period_number = 5
 
-    def _get_default_team_id(self, cr, uid, context=None, user_id=None):
-        if context is None:
-            context = {}
-        if user_id is None:
-            user_id = uid
-        team_id = context.get('default_team_id')
+    @api.model
+    @api.returns('self', lambda value: value.id)
+    def _get_default_team_id(self, user_id=None):
+        team_id = self.env['crm.team'].browse(self.env.context.get('default_team_id'))
         if not team_id:
-            team_ids = self.search(cr, uid, ['|', ('user_id', '=', user_id), ('member_ids', 'in', user_id)], limit=1, context=context)
-            team_id = team_ids[0] if team_ids else False
-        if not team_id:
-            team_id = self.pool['ir.model.data'].xmlid_to_res_id(cr, uid, 'sales_team.team_sales_department')
+            if user_id is None:
+                user_id = self.env.uid
+            team_id = self.env['crm.team'].search(['|', ('user_id', '=', user_id), ('member_ids', 'in', [user_id])], limit=1) or self.env.ref('sales_team.team_sales_department')
         return team_id
 
-    _columns = {
-        'name': fields.char('Sales Team', size=64, required=True, translate=True),
-        'code': fields.char('Code', size=8),
-        'active': fields.boolean('Active', help="If the active field is set to "\
-                        "false, it will allow you to hide the sales team without removing it."),
-        'company_id': fields.many2one('res.company', 'Company'),
-        'user_id': fields.many2one('res.users', 'Team Leader'),
-        'member_ids': fields.one2many('res.users', 'sale_team_id', 'Team Members'),
-        'reply_to': fields.char('Reply-To', size=64, help="The email address put in the 'Reply-To' of all emails sent by Odoo about cases in this sales team"),
-        'working_hours': fields.float('Working Hours', digits=(16, 2)),
-        'color': fields.integer('Color Index'),
-    }
-
-    _defaults = {
-        'active': 1,
-        'company_id': lambda self, cr, uid, context: self.pool.get('res.company')._company_default_get(cr, uid, 'crm.team', context=context),
-    }
+    name = fields.Char('Sales Team', size=64, required=True, translate=True)
+    code = fields.Char(size=8)
+    active = fields.Boolean(help="If the active field is set to true, it will allow you to hide the sales team without removing it.", default=True)
+    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env['res.company']._company_default_get('crm.team'))
+    user_id = fields.Many2one('res.users', string='Team Leader')
+    member_ids = fields.One2many('res.users', 'sale_team_id', string='Team Members')
+    reply_to = fields.Char(string='Reply-To', size=64, help="The email address put in the 'Reply-To' of all emails sent by Odoo about cases in this sales team")
+    working_hours = fields.Float(digits=(16, 2))
+    color = fields.Integer(string='Color Index')
 
     _sql_constraints = [
         ('code_uniq', 'unique (code)', 'The code of the sales team must be unique !')
     ]
 
-    def create(self, cr, uid, values, context=None):
-        if context is None:
-            context = {}
-        context['mail_create_nosubscribe'] = True
-        return super(crm_team, self).create(cr, uid, values, context=context)
-
-
-class res_partner(osv.Model):
-    _inherit = 'res.partner'
-    _columns = {
-        'team_id': fields.many2one('crm.team', 'Sales Team', oldname='section_id'),
-    }
-
-class res_users(osv.Model):
-    _inherit = 'res.users'
-    _columns = {
-        'sale_team_id': fields.many2one('crm.team','Sales Team')
-    }
-
+    @api.model
+    def create(self, values):
+        return super(CrmTeam, self.with_context(mail_create_nosubscribe=True)).create(values)

--- a/None
+++ b/addons/sales_team/models/res_partner.py
@@ -0,0 +1,9 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class ResPartner(models.Model):
+    _inherit = 'res.partner'
+    team_id = fields.Many2one('crm.team', 'Sales Team')

--- a/None
+++ b/addons/sales_team/models/res_users.py
@@ -0,0 +1,9 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class ResUsers(models.Model):
+    _inherit = 'res.users'
+    sale_team_id = fields.Many2one('crm.team', 'Sales Team')
