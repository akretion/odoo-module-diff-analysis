PR: https://github.com/odoo/odoo/pull/

From: 70b9b7a7722db52061a29343c149bddd12a8dd20
From: Yannick Tivisse
Date: 2021-12-23 14:30:23

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = "sale.order.line"
-    _inherit = "sale.order.option"

Total Changes: 98

[IMP] sale_quotation_builder: Split files according to guidelines

================================= pseudo patch: =================================

--- a/addons/sale_quotation_builder/models/__init__.py
+++ b/addons/sale_quotation_builder/models/__init__.py
@@ -4,4 +4,6 @@
 from . import product_template
 from . import res_company
 from . import sale_order
+from . import sale_order_line
+from . import sale_order_option
 from . import sale_order_template

--- a/addons/sale_quotation_builder/models/sale_order.py
+++ b/addons/sale_quotation_builder/models/sale_order.py
@@ -29,46 +29,3 @@ class SaleOrder(models.Model):
         vals = super(SaleOrder, self)._compute_option_data_for_template_change(option)
         vals.update(website_description=option.website_description)
         return vals
-
-
-class SaleOrderLine(models.Model):
-    _inherit = "sale.order.line"
-
-    website_description = fields.Html('Website Description', sanitize=False, translate=html_translate, sanitize_form=False)
-
-    @api.model_create_multi
-    def create(self, vals_list):
-        vals_list = [self._inject_quotation_description(vals) for vals in vals_list]
-        return super().create(vals_list)
-
-    def write(self, values):
-        values = self._inject_quotation_description(values)
-        return super().write(values)
-
-    def _inject_quotation_description(self, values):
-        values = dict(values or {})
-        if not values.get('website_description') and values.get('product_id'):
-            product = self.env['product.product'].browse(values['product_id'])
-            values.update(website_description=product.quotation_description)
-        return values
-
-
-class SaleOrderOption(models.Model):
-    _inherit = "sale.order.option"
-
-    website_description = fields.Html(
-        'Website Description', sanitize_attributes=False, translate=html_translate,
-        compute='_compute_website_description', store=True, readonly=False, precompute=True)
-
-    @api.depends('product_id', 'uom_id')
-    def _compute_website_description(self):
-        for option in self:
-            if not option.product_id:
-                continue
-            product = option.product_id.with_context(lang=option.order_id.partner_id.lang)
-            option.website_description = product.quotation_description
-
-    def _get_values_to_add_to_order(self):
-        values = super(SaleOrderOption, self)._get_values_to_add_to_order()
-        values.update(website_description=self.website_description)
-        return values

--- a/None
+++ b/addons/sale_quotation_builder/models/sale_order_line.py
@@ -0,0 +1,27 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+from odoo.tools.translate import html_translate
+
+
+class SaleOrderLine(models.Model):
+    _inherit = "sale.order.line"
+
+    website_description = fields.Html('Website Description', sanitize=False, translate=html_translate, sanitize_form=False)
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        vals_list = [self._inject_quotation_description(vals) for vals in vals_list]
+        return super().create(vals_list)
+
+    def write(self, values):
+        values = self._inject_quotation_description(values)
+        return super().write(values)
+
+    def _inject_quotation_description(self, values):
+        values = dict(values or {})
+        if not values.get('website_description') and values.get('product_id'):
+            product = self.env['product.product'].browse(values['product_id'])
+            values.update(website_description=product.quotation_description)
+        return values

--- a/None
+++ b/addons/sale_quotation_builder/models/sale_order_option.py
@@ -0,0 +1,26 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+from odoo.tools.translate import html_translate
+
+
+class SaleOrderOption(models.Model):
+    _inherit = "sale.order.option"
+
+    website_description = fields.Html(
+        'Website Description', sanitize_attributes=False, translate=html_translate,
+        compute='_compute_website_description', store=True, readonly=False, precompute=True)
+
+    @api.depends('product_id', 'uom_id')
+    def _compute_website_description(self):
+        for option in self:
+            if not option.product_id:
+                continue
+            product = option.product_id.with_context(lang=option.order_id.partner_id.lang)
+            option.website_description = product.quotation_description
+
+    def _get_values_to_add_to_order(self):
+        values = super(SaleOrderOption, self)._get_values_to_add_to_order()
+        values.update(website_description=self.website_description)
+        return values
