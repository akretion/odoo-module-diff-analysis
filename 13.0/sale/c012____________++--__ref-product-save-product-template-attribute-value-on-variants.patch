PR: https://github.com/odoo/odoo/pull/

From: 22a11a6f4d0b08a56712fafd0f87a2e7bb5b00ec
From: SÃ©bastien Theys
Date: 2019-08-26 13:01:13

Structural Changes: 11
Total Changes: 64

[REF] product, *: save product.template.attribute.value on variants

* account, hr_expense, mrp, sale, sale_product_configurator, stock_account,
  website_sale, website_sale_comparison

Before this commit, the `product.attribute.value` were stored on the variants.
This required filtering of attribute lines to find the appropriate matching
`product.template.attribute.value` that were used in most of the business code,
such as when computing the `price_extra`.

This also prevented to have multiple attribute lines for the same attribute,
which is needed to handle use cases such as grape varieties for wine products.
This will be done in the following commit.

After this commit, the combination of `product.template.attribute.value` will be
directly stored on the product variant.

Other changes
=============

Add `combination_indices` on product, which allows to quickly find a variant
matching a combination (1 simple indexed equality query as opposed to 1 query
with as many joins as there are attribute lines), and to add an easy
SQL constraint to ensure active combination uniqueness.

Add active field on `product.template.attribute.line` and
`product.template.attribute.value`, with the same behavior as variants:

They become archived if they can't be unlinked. This allows to keep the database
consistent, such as archived variants correctly keeping all their values, sales
order lines keeping their custom and no_variant. This is done with the help of
`ondelete=restrict` on the corresponding m2m fields, and the `unlink` methods
falling back to archiving when `unlink` is restricted.

Part of task-1912579

PR: #32946

================================= pseudo patch: =================================

--- a/addons/sale/models/product_product.py
+++ b/addons/sale/models/product_product.py
@@ -86,10 +86,22 @@ class ProductTemplateAttributeValue(models.Model):
 
 class ProductAttributeCustomValue(models.Model):
     _name = "product.attribute.custom.value"
-    _rec_name = 'custom_value'
     _description = 'Product Attribute Custom Value'
-    _order = 'attribute_value_id, id'
-
-    attribute_value_id = fields.Many2one('product.attribute.value', string='Attribute Value')
-    sale_order_line_id = fields.Many2one('sale.order.line', string='Sale order line')
-    custom_value = fields.Char('Custom value')
+    _order = 'custom_product_template_attribute_value_id, id'
+
+    name = fields.Char("Name", compute='_compute_name')
+    custom_product_template_attribute_value_id = fields.Many2one('product.template.attribute.value', string="Attribute Value", required=True, ondelete='restrict')
+    sale_order_line_id = fields.Many2one('sale.order.line', string="Sales Order Line", required=True, ondelete='cascade')
+    custom_value = fields.Char("Custom Value")
+
+    @api.depends('custom_product_template_attribute_value_id.name', 'custom_value')
+    def _compute_name(self):
+        for record in self:
+            name = (record.custom_value or '').strip()
+            if record.custom_product_template_attribute_value_id.display_name:
+                name = "%s: %s" % (record.custom_product_template_attribute_value_id.display_name, name)
+            record.name = name
+
+    _sql_constraints = [
+        ('sol_custom_value_unique', 'unique(custom_product_template_attribute_value_id, sale_order_line_id)', "Only one Custom Value is allowed per Attribute Value per Sales Order Line.")
+    ]

--- a/addons/sale/models/product_template.py
+++ b/addons/sale/models/product_template.py
@@ -169,7 +169,7 @@ class ProductTemplate(models.Model):
         """
         self.ensure_one()
         # get the name before the change of context to benefit from prefetch
-        display_name = self.name
+        display_name = self.display_name
 
         display_image = True
         quantity = self.env.context.get('quantity', add_qty)
@@ -207,15 +207,16 @@ class ProductTemplate(models.Model):
             list_price = product.price_compute('list_price')[product.id]
             price = product.price if pricelist else list_price
             display_image = bool(product.image_1920)
+            display_name = product.display_name
         else:
             product_template = product_template.with_context(current_attributes_price_extra=[v.price_extra or 0.0 for v in combination])
             list_price = product_template.price_compute('list_price')[product_template.id]
             price = product_template.price if pricelist else list_price
             display_image = bool(product_template.image_1920)
 
-        filtered_combination = combination._without_no_variant_attributes()
-        if filtered_combination:
-            display_name = '%s (%s)' % (display_name, ', '.join(filtered_combination.mapped('name')))
+            combination_name = combination._get_combination_name()
+            if combination_name:
+                display_name = "%s (%s)" % (display_name, combination_name)
 
         if pricelist and pricelist.currency_id != product_template.currency_id:
             list_price = product_template.currency_id._convert(

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -1125,16 +1125,11 @@ class SaleOrderLine(models.Model):
     product_uom_qty = fields.Float(string='Quantity', digits='Product Unit of Measure', required=True, default=1.0)
     product_uom = fields.Many2one('uom.uom', string='Unit of Measure', domain="[('category_id', '=', product_uom_category_id)]")
     product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id', readonly=True)
-    product_custom_attribute_value_ids = fields.One2many('product.attribute.custom.value', 'sale_order_line_id', string='User entered custom product attribute values')
+    product_custom_attribute_value_ids = fields.One2many('product.attribute.custom.value', 'sale_order_line_id', string="Custom Values")
 
     # M2M holding the values of product.attribute with create_variant field set to 'no_variant'
     # It allows keeping track of the extra_price associated to those attribute values and add them to the SO line description
-    # Note: If the attributes are changed on the template, some or all records
-    # in `product_no_variant_attribute_value_ids` will be removed here, even
-    # from existing or locked sales order lines. Thus this field can only be
-    # relied on initially, but it cannot be used to recompute anything later
-    # because the result might be different then.
-    product_no_variant_attribute_value_ids = fields.Many2many('product.template.attribute.value', string='Product attribute values that do not create variants')
+    product_no_variant_attribute_value_ids = fields.Many2many('product.template.attribute.value', string="Extra Values", ondelete='restrict')
 
     qty_delivered_method = fields.Selection([
         ('manual', 'Manual'),
@@ -1380,15 +1375,15 @@ class SaleOrderLine(models.Model):
     def product_id_change(self):
         if not self.product_id:
             return
-
+        valid_values = self.product_id.product_tmpl_id.valid_product_template_attribute_line_ids.product_template_value_ids
         # remove the is_custom values that don't belong to this template
         for pacv in self.product_custom_attribute_value_ids:
-            if pacv.attribute_value_id not in self.product_id.product_tmpl_id.valid_product_attribute_value_ids:
+            if pacv.custom_product_template_attribute_value_id not in valid_values:
                 self.product_custom_attribute_value_ids -= pacv
 
         # remove the no_variant attributes that don't belong to this template
         for ptav in self.product_no_variant_attribute_value_ids:
-            if ptav.product_attribute_value_id not in self.product_id.product_tmpl_id.valid_product_attribute_value_ids:
+            if ptav._origin not in valid_values:
                 self.product_no_variant_attribute_value_ids -= ptav
 
         vals = {}
@@ -1585,10 +1580,6 @@ class SaleOrderLine(models.Model):
         itself is not sufficient to create the description: we need to add
         information about those special attributes and values.
 
-        See note about `product_no_variant_attribute_value_ids` above the field
-        definition: this method is not reliable to recompute the description at
-        a later time, it should only be used initially.
-
         :return: the description related to special variant attributes/values
         :rtype: string
         """
@@ -1597,19 +1588,15 @@ class SaleOrderLine(models.Model):
 
         name = "\n"
 
-        product_attribute_with_is_custom = self.product_custom_attribute_value_ids.mapped('attribute_value_id.attribute_id')
+        custom_values = self.product_custom_attribute_value_ids.custom_product_template_attribute_value_id
 
         # display the no_variant attributes, except those that are also
         # displayed by a custom (avoid duplicate)
-        for no_variant_attribute_value in self.product_no_variant_attribute_value_ids.filtered(
-            lambda ptav: ptav.attribute_id not in product_attribute_with_is_custom
-        ):
-            name += "\n" + no_variant_attribute_value.attribute_id.name + ': ' + no_variant_attribute_value.name
+        for ptav in (self.product_no_variant_attribute_value_ids - custom_values):
+            name += "\n" + ptav.display_name
 
         # display the is_custom values
         for pacv in self.product_custom_attribute_value_ids:
-            name += "\n" + pacv.attribute_value_id.attribute_id.name + \
-                ': ' + pacv.attribute_value_id.name + \
-                ': ' + (pacv.custom_value or '').strip()
+            name += "\n" + pacv.display_name
 
         return name
