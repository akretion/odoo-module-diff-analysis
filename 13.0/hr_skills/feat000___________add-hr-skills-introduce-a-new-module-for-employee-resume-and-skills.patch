PR: https://github.com/odoo/odoo/pull/

From: 8e149728305133c6c460695a8d3eb25afbdcd17b
From: Lucas Lefèvre
Date: 2019-02-14 15:28:55

Breaking data model changes score: 6, change matches:
+    resume_line_ids = fields.One2many('hr.resume.line', 'employee_id', string="Resumé lines")
+    employee_skill_ids = fields.One2many('hr.employee.skill', 'employee_id', string="Skills")
+    skill_ids = fields.One2many('hr.skill', 'skill_type_id', string="Skills", ondelete='cascade')
+    skill_level_ids = fields.One2many('hr.skill.level', 'skill_type_id', string="Levels", ondelete='cascade')
+    resume_line_ids = fields.One2many(related='employee_id.resume_line_ids', readonly=False)
+    employee_skill_ids = fields.One2many(related='employee_id.employee_skill_ids', readonly=False)

Total Changes: 141

[ADD] hr_skills: Introduce a new module for employee resumé and skills

Purpose
=======

Consultancy companies need resumé and skills of their consultants.
For big projects, they often need to send them to their customers.
These informations are also useful to statistics.

Specification
=============

New models
*---------

1/ `hr.resume.line.type`
Types of resumé lines. e.g. *Experience*, *Education*, *Hobbies*

2/ `hr.resume.line`
It is a line in the resumé of an employee.

3/ `hr.skill`
Name of a skill. e.g *French*, *Python*, *Piano*

4/ `hr.skill.type`
Skills can belongs to a particular type. A skill type has skill levels associated.
e.g. *Languages*, *Dev*, *Music*

5/ `hr.skill.level`
Levels available for a particular skill type. Each level has a label
and a progress (between 0 and 100) associated.
e.g. *Intermediary (20%)*, *Advanced (85%)*, *Expert (100%)*

6/ `hr.employee.skill`
These are skills which employees have. It links an employee with a particular skill
and level.
e.g. Mitchell has an *Intermediary* level in *Python*

Access Rights
*------------

Only a `hr_user` can create/edit `hr.resume.line.type`, `hr.skill`, `hr.skill.level`, `hr.skill.type`.
If employees are allowed to edit their infos (setting), they can also create/edit `hr.resume.line`,
`hr.employee.skill` for themselves.

UI
*-
Resumé lines are displayed, grouped by type, in a new 'Resumé' tab in the employee
form. Resumé lines can be reordered (handle widget)

Emloyee skills are displayed in the Resumé tab, grouped by skill type.

================================= pseudo patch: =================================

--- a/None
+++ b/addons/hr_skills/models/__init__.py
@@ -0,0 +1,6 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from . import hr_resume
+from . import hr_skills
+from . import res_users

--- a/None
+++ b/addons/hr_skills/models/hr_resume.py
@@ -0,0 +1,51 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class Employee(models.Model):
+    _inherit = 'hr.employee'
+
+    resume_line_ids = fields.One2many('hr.resume.line', 'employee_id', string="Resumé lines")
+    employee_skill_ids = fields.One2many('hr.employee.skill', 'employee_id', string="Skills")
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        res = super(Employee, self).create(vals_list)
+        resume_lines_values = []
+        for employee in res:
+            line_type = self.env.ref('hr_skills.resume_type_experience', raise_if_not_found=False)
+            resume_lines_values.append({
+                'employee_id': employee.id,
+                'name': employee.company_id.name,
+                'date_start': employee.create_date.date(),
+                'description': employee.job_title,
+                'line_type_id': line_type and line_type.id,
+            })
+        self.env['hr.resume.line'].create(resume_lines_values)
+        return res
+
+
+class ResumeLine(models.Model):
+    _name = 'hr.resume.line'
+    _description = "Resumé line of an employee"
+
+    employee_id = fields.Many2one('hr.employee', required=True, ondelete='cascade')
+    name = fields.Char(required=True)
+    date_start = fields.Date(required=True)
+    date_end = fields.Date()
+    description = fields.Text(string="Description")
+    line_type_id = fields.Many2one('hr.resume.line.type', string="Type")
+    sequence = fields.Integer(default=100)
+
+    _sql_constraints = [
+        ('date_check', "CHECK ((date_start <= date_end OR date_end = NULL))", "The start date must be anterior to the end date."),
+    ]
+
+
+class ResumeLineType(models.Model):
+    _name = 'hr.resume.line.type'
+    _description = "Type of a resumé line"
+
+    name = fields.Char(required=True)

--- a/None
+++ b/addons/hr_skills/models/hr_skills.py
@@ -0,0 +1,59 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
+
+
+class Skill(models.Model):
+    _name = 'hr.skill'
+    _description = "Skill"
+
+    name = fields.Char(required=True)
+    skill_type_id = fields.Many2one('hr.skill.type')
+
+
+class EmployeeSkill(models.Model):
+    _name = 'hr.employee.skill'
+    _description = "Skill level for an employee"
+
+    employee_id = fields.Many2one('hr.employee', required=True, ondelete='cascade')
+    skill_id = fields.Many2one('hr.skill', required=True)
+    skill_level_id = fields.Many2one('hr.skill.level', required=True)
+    skill_type_id = fields.Many2one('hr.skill.type', required=True)
+    level_progress = fields.Integer(related='skill_level_id.level_progress')
+
+    _sql_constraints = [
+        ('_unique_skill', 'unique (employee_id, skill_id)', _("Two levels for the same skill is not allowed")),
+    ]
+
+    @api.constrains('skill_id', 'skill_type_id')
+    def _check_skill_type(self):
+        for record in self:
+            if record.skill_id not in record.skill_type_id.skill_ids:
+                raise ValidationError(_("The skill %s and skill type %s doesn't match") % (record.skill_id.name, record.skill_type_id.name))
+
+    @api.constrains('skill_type_id', 'skill_level_id')
+    def _check_skill_level(self):
+        for record in self:
+            if record.skill_level_id not in record.skill_type_id.skill_level_ids:
+                raise ValidationError(_("The skill level %s is not valid for skill type: %s ") % (record.skill_level_id.name, record.skill_type_id.name))
+
+
+class SkillLevel(models.Model):
+    _name = 'hr.skill.level'
+    _description = "Skill Level"
+
+    skill_type_id = fields.Many2one('hr.skill.type')
+    name = fields.Char(required=True)
+    level_progress = fields.Integer(string="Progress", help="Progress from zero knowledge (0%) to fully mastered (100%).")
+    sequence = fields.Integer(default=100)
+
+
+class SkillType(models.Model):
+    _name = 'hr.skill.type'
+    _description = "Skill Type"
+
+    name = fields.Char(required=True)
+    skill_ids = fields.One2many('hr.skill', 'skill_type_id', string="Skills", ondelete='cascade')
+    skill_level_ids = fields.One2many('hr.skill.level', 'skill_type_id', string="Levels", ondelete='cascade')

--- a/None
+++ b/addons/hr_skills/models/res_users.py
@@ -0,0 +1,25 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+from odoo import fields, models
+
+
+class User(models.Model):
+    _inherit = ['res.users']
+
+    resume_line_ids = fields.One2many(related='employee_id.resume_line_ids', readonly=False)
+    employee_skill_ids = fields.One2many(related='employee_id.employee_skill_ids', readonly=False)
+
+    def __init__(self, pool, cr):
+        """ Override of __init__ to add access rights.
+            Access rights are disabled by default, but allowed
+            on some specific fields defined in self.SELF_{READ/WRITE}ABLE_FIELDS.
+        """
+        hr_skills_fields = [
+            'resume_line_ids',
+            'employee_skill_ids',
+        ]
+        init_res = super(User, self).__init__(pool, cr)
+        # duplicate list to avoid modifying the original reference
+        type(self).SELF_READABLE_FIELDS = type(self).SELF_READABLE_FIELDS + hr_skills_fields
+        type(self).SELF_WRITEABLE_FIELDS = type(self).SELF_WRITEABLE_FIELDS + hr_skills_fields
+        return init_res
