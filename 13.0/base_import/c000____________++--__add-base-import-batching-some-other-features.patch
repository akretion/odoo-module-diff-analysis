PR: https://github.com/odoo/odoo/pull/

From: f58368210c9c962c84cdcd2e2a799c5fc6183a13
From: Xavier Morel
Date: 2019-09-13 09:45:29

Structural Changes: 9
Total Changes: 73

[ADD] base_import: batching (& some other features)

various UI changes
------------------

* renamed "test import" button to "test"
* move relation fields thing to debug mode
* remove "Defer parent/child computation" option as it was deprecated
  / removed from the backend in
  80f1ac3599ee630e7556ff4fcf3eb192931eccd8, turns out this checkbox
  existed inactive for longer than it's been of any use (added in
  68cb2ade09206b0abb3f7c8dccb5d35a6499f802 on 2017-11-29, made
  non-operating on 2018-01-24, that's so sad)

batching
--------

* add support for batching imports (skip & limit parameters)
* modify client to use batched imports & properly adapt responses so
  it still looks like a single import for the client (more or less)
  e.g. update row numbers in error messages, etc...
* properly handle partial imports though
* disable usual loading throbber to have a single progress
  notification displayed continuously throughout all the batches: the
  normal throbber only shows after 3s of waiting for an RPC response,
  so it would keep flashing in and out (appear 3s into a batch's
  import then disappear at the end only to reappear 3s into the next
  batch's loading)

NOTE: the limit is row-wise. If a record straddles the limit (because
of nested O2M records), the record is imported in full and the "next
row" is whatever row follows the record. This means a limit of 10 can
lead to an import of 17 lines, and as the progress indicator is in
records# the increments can jump around.

Task 2059448

================================= pseudo patch: =================================

--- a/addons/base_import/models/base_import.py
+++ b/addons/base_import/models/base_import.py
@@ -600,6 +600,17 @@ class Import(models.TransientModel):
                 has_relational_match = any(len(match) > 1 for field, match in matches.items() if match)
                 advanced_mode = has_relational_header or has_relational_match
 
+            batch = False
+            batch_cutoff = options.get('limit')
+            if batch_cutoff:
+                if count > batch_cutoff:
+                    batch = len(preview) > batch_cutoff
+                else:
+                    batch = bool(next(
+                        itertools.islice(rows, batch_cutoff - count, None),
+                        None
+                    ))
+
             return {
                 'fields': fields,
                 'matches': matches or False,
@@ -609,6 +620,7 @@ class Import(models.TransientModel):
                 'options': options,
                 'advanced_mode': advanced_mode,
                 'debug': self.user_has_groups('base.group_no_one'),
+                'batch': batch,
             }
         except Exception as error:
             # Due to lazy generators, UnicodeDecodeError (for
@@ -662,7 +674,9 @@ class Import(models.TransientModel):
             if any(row)
         ]
 
-        return data, import_fields
+        # slicing needs to happen after filtering out empty rows as the
+        # data offsets from load are post-filtering
+        return data[options.get('skip'):], import_fields
 
     @api.model
     def _remove_currency_symbol(self, value):
@@ -882,7 +896,8 @@ class Import(models.TransientModel):
         _logger.info('importing %d rows...', len(data))
 
         name_create_enabled_fields = options.pop('name_create_enabled_fields', {})
-        model = self.env[self.res_model].with_context(import_file=True, name_create_enabled_fields=name_create_enabled_fields)
+        import_limit = options.pop('limit', None)
+        model = self.env[self.res_model].with_context(import_file=True, name_create_enabled_fields=name_create_enabled_fields, _import_limit=import_limit)
         import_result = model.load(import_fields, data)
         _logger.info('done')
 
@@ -920,10 +935,21 @@ class Import(models.TransientModel):
                         })
         if 'name' in import_fields:
             index_of_name = import_fields.index('name')
-            import_result['name'] = [x[index_of_name] for x in data]
+            skipped = options.get('skip', 0)
+            # pad front as data doesn't contain anythig for skipped lines
+            r = import_result['name'] = [''] * skipped
+            # only add names for the window being imported
+            r.extend(x[index_of_name] for x in data[:import_limit])
+            # pad back (though that's probably not useful)
+            r.extend([''] * (len(data) - (import_limit or 0)))
         else:
             import_result['name'] = []
 
+        skip = options.get('skip', 0)
+        # convert load's internal nextrow to the imported file's
+        if import_result['nextrow']: # don't update if nextrow = 0 (= no nextrow)
+            import_result['nextrow'] += skip
+
         return import_result
 
 _SEPARATORS = [' ', '/', '-', '']

--- a/addons/base_import/models/test_models.py
+++ b/addons/base_import/models/test_models.py
@@ -2,85 +2,86 @@
 from odoo import fields, models
 
 
-def name(suffix_name):
+def model(suffix_name):
     return 'base_import.tests.models.%s' % suffix_name
 
 
 class Char(models.Model):
-    _name = name('char')
+    _name = model('char')
     _description = 'Tests : Base Import Model, Character'
 
     value = fields.Char()
 class CharRequired(models.Model):
-    _name = name('char.required')
+    _name = model('char.required')
     _description = 'Tests : Base Import Model, Character required'
 
     value = fields.Char(required=True)
 
 class CharReadonly(models.Model):
-    _name = name('char.readonly')
+    _name = model('char.readonly')
     _description = 'Tests : Base Import Model, Character readonly'
 
     value = fields.Char(readonly=True)
 
 class CharStates(models.Model):
-    _name = name('char.states')
+    _name = model('char.states')
     _description = 'Tests : Base Import Model, Character states'
 
     value = fields.Char(readonly=True, states={'draft': [('readonly', False)]})
 
 class CharNoreadonly(models.Model):
-    _name = name('char.noreadonly')
+    _name = model('char.noreadonly')
     _description = 'Tests : Base Import Model, Character No readonly'
 
     value = fields.Char(readonly=True, states={'draft': [('invisible', True)]})
 
 class CharStillreadonly(models.Model):
-    _name = name('char.stillreadonly')
+    _name = model('char.stillreadonly')
     _description = 'Tests : Base Import Model, Character still readonly'
 
     value = fields.Char(readonly=True, states={'draft': [('readonly', True)]})
 
 # TODO: complex field (m2m, o2m, m2o)
 class M2o(models.Model):
-    _name = name('m2o')
+    _name = model('m2o')
     _description = 'Tests : Base Import Model, Many to One'
 
-    value = fields.Many2one(name('m2o.related'))
+    value = fields.Many2one(model('m2o.related'))
 
 class M2oRelated(models.Model):
-    _name = name('m2o.related')
+    _name = model('m2o.related')
     _description = 'Tests : Base Import Model, Many to One related'
 
     value = fields.Integer(default=42)
 
 class M2oRequired(models.Model):
-    _name = name('m2o.required')
+    _name = model('m2o.required')
     _description = 'Tests : Base Import Model, Many to One required'
 
-    value = fields.Many2one(name('m2o.required.related'), required=True)
+    value = fields.Many2one(model('m2o.required.related'), required=True)
 
 class M2oRequiredRelated(models.Model):
-    _name = name('m2o.required.related')
+    _name = model('m2o.required.related')
     _description = 'Tests : Base Import Model, Many to One required related'
 
     value = fields.Integer(default=42)
 
 class O2m(models.Model):
-    _name = name('o2m')
+    _name = model('o2m')
     _description = 'Tests : Base Import Model, One to Many'
 
-    value = fields.One2many(name('o2m.child'), 'parent_id')
+    name = fields.Char()
+    value = fields.One2many(model('o2m.child'), 'parent_id')
 
 class O2mChild(models.Model):
-    _name = name('o2m.child')
+    _name = model('o2m.child')
     _description = 'Tests : Base Import Model, One to Many child'
 
-    parent_id = fields.Many2one(name('o2m'))
+    parent_id = fields.Many2one(model('o2m'))
     value = fields.Integer()
 
 class PreviewModel(models.Model):
-    _name = name('preview')
+    _name = model('preview')
     _description = 'Tests : Base Import Model Preview'
 
     name = fields.Char('Name')
@@ -88,7 +89,7 @@ class PreviewModel(models.Model):
     othervalue = fields.Integer(string='Other Variable')
 
 class FloatModel(models.Model):
-    _name = name('float')
+    _name = model('float')
     _description = 'Tests: Base Import Model Float'
 
     value = fields.Float()
@@ -96,7 +97,7 @@ class FloatModel(models.Model):
     currency_id = fields.Many2one('res.currency')
 
 class ComplexModel(models.Model):
-    _name = name('complex')
+    _name = model('complex')
     _description = 'Tests: Base Import Model Complex'
 
     f = fields.Float()
