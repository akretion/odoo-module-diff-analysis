PR: https://github.com/odoo/odoo/pull/

From: 51e51055bf42a360838f9a22c61bc01b226301d1
From: Aur√©lien Warnon
Date: 2018-09-25 16:39:32

Breaking data model changes score: 1, change matches:
-    create_variant = fields.Boolean(default=True, help="Check this if you want to create multiple variants for this attribute.")

Total Changes: 87

[IMP] (website_)sale: Allow configuring variants creation on demand

Purpose
=======

Product attributes can be configured to create variants "on demand".
This means that product.templates having these attributes will only create product.product variant
when that combination is actually selected in a sale order/in the web shop.

Product attribute values are also improved to handle extra prices and exclusions
in all three modes ("never", "on demand", "always")

Specification
=============

Create variants on demand
- add a new mode to generate variants as they are added to the order/cart
  (needed for big # of combinations managed in the inventory and/or produced in mrp with specific boms)
- replace the boolean by a selection radio
  tooltip for this new field:
	Always:
	  Variants are generated straight away when
	  the attribute values are combined in the product configuration.
	Only when the product is added to a sales order:
	  Variants are generated once the combination is selected in the sales order.
	  This is advised when variants are customized on demand and manufactured as such in Odoo.
	Never:
	  Advised when variants are not needed in Odoo.
	  The selected values just show up in the description of sales order lines.
- ability to define attribute extra prices & exclude combinations in all variant modes
- if at least one attribute of the product in set to "on demand" mode, generate all the variants "on demand"

================================= pseudo patch: =================================

--- a/addons/product/models/product.py
+++ b/addons/product/models/product.py
@@ -293,7 +293,7 @@ class ProductProduct(models.Model):
             for value in product.attribute_value_ids:
                 if value.attribute_id in attributes:
                     raise ValidationError(_('Error! It is not allowed to choose more than one value for a given attribute.'))
-                if value.attribute_id.create_variant:
+                if value.attribute_id.create_variant == 'always':
                     attributes |= value.attribute_id
         return True
 
@@ -327,9 +327,10 @@ class ProductProduct(models.Model):
             # Check if product still exists, in case it has been unlinked by unlinking its template
             if not product.exists():
                 continue
-            # Check if the product is last product of this template
+            # Check if the product is last product of this template...
             other_products = self.search([('product_tmpl_id', '=', product.product_tmpl_id.id), ('id', '!=', product.id)])
-            if not other_products:
+            # ... and do not delete product template if it's configured to be created "on demand"
+            if not other_products and not product.product_tmpl_id.has_dynamic_attributes():
                 unlink_templates |= product.product_tmpl_id
             unlink_products |= product
         res = super(ProductProduct, unlink_products).unlink()
@@ -532,6 +533,11 @@ class ProductProduct(models.Model):
             prices[product.id] = product[price_type] or 0.0
             if price_type == 'list_price':
                 prices[product.id] += product.price_extra
+                # we need to add the price from the attributes that do not generate variants
+                # (see field product.attribute create_variant)
+                if self._context.get('no_variant_attributes_price_extra'):
+                    # we have a list of price_extra that comes from the attribute values, we need to sum all that
+                    prices[product.id] += sum(self._context.get('no_variant_attributes_price_extra'))
 
             if uom:
                 prices[product.id] = product.uom_id._compute_price(prices[product.id], uom)
@@ -584,6 +590,7 @@ class ProductProduct(models.Model):
         name = self.display_name
         if self.description_sale:
             name += '\n' + self.description_sale
+
         return name
 
 

--- a/addons/product/models/product_attribute.py
+++ b/addons/product/models/product_attribute.py
@@ -16,13 +16,19 @@ class ProductAttribute(models.Model):
     value_ids = fields.One2many('product.attribute.value', 'attribute_id', 'Values', copy=True)
     sequence = fields.Integer('Sequence', help="Determine the display order")
     attribute_line_ids = fields.One2many('product.attribute.line', 'attribute_id', 'Lines')
-    create_variant = fields.Boolean(default=True, help="Check this if you want to create multiple variants for this attribute.")
+    create_variant = fields.Selection([
+        ('never', 'Never'),
+        ('always', 'Always'),
+        ('dynamic', 'Only when the product is added to a sales order')],
+        default='always',
+        string="Create Variants",
+        help="Check this if you want to create multiple variants for this attribute.", required=True)
 
 
 class ProductAttributeValue(models.Model):
     _name = "product.attribute.value"
     _order = 'attribute_id, sequence, id'
-    _description = 'Product Attribute Value'
+    _description = 'Attribute Value'
 
     name = fields.Char(string='Value', required=True, translate=True)
     sequence = fields.Integer(string='Sequence', help="Determine the display order")
@@ -53,6 +59,7 @@ class ProductAttributeValue(models.Model):
 class ProductProductAttributeValue(models.Model):
     _name = "product.product.attribute.value"
     _order = 'sequence, attribute_id, id'
+    _description = 'Product Attribute Value'
 
     name = fields.Char('Value', related="product_attribute_value_id.name")
     product_attribute_value_id = fields.Many2one('product.attribute.value', string='Attribute Value', required=True, ondelete='cascade', index=True)
@@ -64,8 +71,7 @@ class ProductProductAttributeValue(models.Model):
         help="Price Extra: Extra price for the variant with this attribute value on sale price. eg. 200 price extra, 1000 + 200 = 1200.")
     exclude_for = fields.Many2many(
         'product.attribute.filter.line', string="Exclude for", relation="product_attribute_value_exclusion",
-        help="""A list of product and attribute values that you want to exclude for this product's attribute value.
-        Also applies on optional and accessory products.""")
+        help="Make this attribute value not compatible with other values of the product or some attribute values of optional and accessory products.")
 
     @api.multi
     def name_get(self):
@@ -76,11 +82,12 @@ class ProductProductAttributeValue(models.Model):
 
 class ProductAttributeFilterLine(models.Model):
     _name = "product.attribute.filter.line"
+    _description = 'Product Attribute Filter Line'
 
     product_tmpl_id = fields.Many2one('product.template', string='Product Template', ondelete='cascade', required=True)
     value_ids = fields.Many2many(
         'product.product.attribute.value', relation="product_attr_filter_line_value_ids_rel",
-        string='Attribute Values', domain="[('product_tmpl_id', '=', product_tmpl_id), ('attribute_id.create_variant', '=', True)]")
+        string='Attribute Values', domain="[('product_tmpl_id', '=', product_tmpl_id)]")
 
 
 class ProductAttributeLine(models.Model):

--- a/addons/product/models/product_template.py
+++ b/addons/product/models/product_template.py
@@ -2,6 +2,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 import itertools
+import operator
 import psycopg2
 
 from odoo.addons import decimal_precision as dp
@@ -9,6 +10,7 @@ from odoo.addons import decimal_precision as dp
 from odoo import api, fields, models, tools, _
 from odoo.exceptions import ValidationError, RedirectWarning, except_orm
 from odoo.tools import pycompat
+from odoo.exceptions import UserError
 
 
 class ProductTemplate(models.Model):
@@ -159,6 +161,15 @@ class ProductTemplate(models.Model):
 
     @api.multi
     def _compute_template_price(self):
+        prices = self._compute_template_price_no_inverse()
+        for template in self:
+            template.price = prices.get(template.id, 0.0)
+
+    @api.multi
+    def _compute_template_price_no_inverse(self):
+        """The _compute_template_price writes the 'list_price' field with an inverse method
+        This method allows computing the price without writing the 'list_price'
+        """
         prices = {}
         pricelist_id_or_name = self._context.get('pricelist')
         if pricelist_id_or_name:
@@ -179,8 +190,7 @@ class ProductTemplate(models.Model):
                 partners = [partner] * len(self)
                 prices = pricelist.get_products_price(self, quantities, partners)
 
-        for template in self:
-            template.price = prices.get(template.id, 0.0)
+        return prices
 
     @api.multi
     def _set_template_price(self):
@@ -403,6 +413,11 @@ class ProductTemplate(models.Model):
         prices = dict.fromkeys(self.ids, 0.0)
         for template in templates:
             prices[template.id] = template[price_type] or 0.0
+            # yes, there can be attribute values for product template if it's not a variant YET
+            # (see field product.attribute create_variant)
+            if price_type == 'list_price' and self._context.get('current_attributes_price_extra'):
+                # we have a list of price_extra that comes from the attribute values, we need to sum all that
+                prices[template.id] += sum(self._context.get('current_attributes_price_extra'))
 
             if uom:
                 prices[template.id] = template.uom_id._compute_price(prices[template.id], uom)
@@ -431,7 +446,7 @@ class ProductTemplate(models.Model):
         for tmpl_id in self.with_context(active_test=False):
             # adding an attribute with only one value should not recreate product
             # write this attribute on every product to make sure we don't lose them
-            variant_alone = tmpl_id.attribute_line_ids.filtered(lambda line: line.attribute_id.create_variant and len(line.value_ids) == 1).mapped('value_ids')
+            variant_alone = tmpl_id.attribute_line_ids.filtered(lambda line: line.attribute_id.create_variant == 'always' and len(line.value_ids) == 1).mapped('value_ids')
             for value_id in variant_alone:
                 updated_products = tmpl_id.product_variant_ids.filtered(lambda product: value_id.attribute_id not in product.mapped('attribute_value_ids.attribute_id'))
                 updated_products.write({'attribute_value_ids': [(4, value_id.id)]})
@@ -439,25 +454,31 @@ class ProductTemplate(models.Model):
             # iterator of n-uple of product.attribute.value *ids*
             variant_matrix = [
                 AttributeValues.browse(value_ids)
-                for value_ids in itertools.product(*(line.value_ids.ids for line in tmpl_id.attribute_line_ids if line.value_ids[:1].attribute_id.create_variant))
+                for value_ids in itertools.product(*(line.value_ids.ids for line in tmpl_id.attribute_line_ids if line.value_ids[:1].attribute_id.create_variant != 'never'))
             ]
 
             # get the value (id) sets of existing variants
-            existing_variants = {frozenset(variant.attribute_value_ids.filtered(lambda r: r.attribute_id.create_variant).ids) for variant in tmpl_id.product_variant_ids}
+            existing_variants = {frozenset(variant.attribute_value_ids.filtered(lambda r: r.attribute_id.create_variant != 'never').ids) for variant in tmpl_id.product_variant_ids}
             # -> for each value set, create a recordset of values to create a
             #    variant for if the value set isn't already a variant
             for value_ids in variant_matrix:
-                if set(value_ids.ids) not in existing_variants:
+                if set(value_ids.ids) not in existing_variants and not any(value_id.attribute_id.create_variant == 'dynamic' for value_id in value_ids):
                     variants_to_create.append({
                         'product_tmpl_id': tmpl_id.id,
                         'attribute_value_ids': [(6, 0, value_ids.ids)]
                     })
 
+            if len(variants_to_create) > 1000:
+                raise UserError(_("""
+                The number of variants to generate is too high.
+                You should either not generate variants for each combination or generate them on demand from the sales order.
+                To do so, open the form view of attributes and change the mode of *Create Variants*."""))
+
             # check product
             for product_id in tmpl_id.product_variant_ids:
-                if not product_id.active and product_id.attribute_value_ids.filtered(lambda r: r.attribute_id.create_variant) in variant_matrix:
+                if not product_id.active and product_id.attribute_value_ids.filtered(lambda r: r.attribute_id.create_variant != 'never') in variant_matrix:
                     variants_to_activate.append(product_id)
-                elif product_id.attribute_value_ids.filtered(lambda r: r.attribute_id.create_variant) not in variant_matrix:
+                elif product_id.attribute_value_ids.filtered(lambda r: r.attribute_id.create_variant != 'never') not in variant_matrix:
                     variants_to_unlink.append(product_id)
 
         if variants_to_activate:
@@ -479,6 +500,11 @@ class ProductTemplate(models.Model):
 
         return True
 
+    def has_dynamic_attributes(self):
+        return self.attribute_line_ids and \
+            any(create_variant == 'dynamic'
+            for create_variant in self.mapped('attribute_line_ids.value_ids.attribute_id.create_variant'))
+
     @api.multi
     def get_filtered_variants(self, reference_product=None):
         """
@@ -505,12 +531,13 @@ class ProductTemplate(models.Model):
             # CASE 1: The whole product is excluded when no attribute values are selected in the parent product
             # returns empty recordset of product.product if so. What is checked is:
             # If the product_attribute value doesn't belong to self (i.e. belongs to the reference product)
-            # and self is the excluded product template on the exclusion lines 
+            # and self is the excluded product template on the exclusion lines
             # and the exclusions is on the product without specified product attribute values (i.e. the whole product is excluded)
             if product_product_attribute_value.product_tmpl_id != self \
                     and self in product_product_attribute_value.exclude_for.mapped('product_tmpl_id') \
-                    and not product_product_attribute_value.exclude_for.filtered(
-                        lambda excluded_product_attribute_value: excluded_product_attribute_value.product_tmpl_id == self).value_ids:
+                    and any(not exclude_for.value_ids
+                            for exclude_for in product_product_attribute_value.exclude_for.filtered(
+                                lambda excluded_product_attribute_value: excluded_product_attribute_value.product_tmpl_id == self)):
                 return self.env['product.product']
 
             # CASE 2: Check if some of the product.product.attribute.value of the product are excluded
@@ -521,13 +548,13 @@ class ProductTemplate(models.Model):
                     lambda excluded_product_attribute_value: excluded_product_attribute_value.product_tmpl_id == self):
                 product_variants -= product_variants.filtered(
                     lambda variant:
-                    # 1/ Check the applicability of the exlusion
-                    # i.e: the restiction comes from the parent
+                    # 1/ Check the applicability of the exclusion
+                    # i.e: the restriction comes from the parent
                     # OR the restriction is on a product_attribute_value that this variant has, eg:
-                    # if the office chair with iron legs excludes the color white, we must check 
+                    # if the office chair with iron legs excludes the color white, we must check
                     # that this variant has iron legs to check the exclusion
                     (product_product_attribute_value.product_tmpl_id != self or product_product_attribute_value in variant.product_attribute_value_ids) and
-                    # 2/ Check the variant has one of the exluded attribute values
+                    # 2/ Check the variant has one of the excluded attribute values
                     any(attribute_value in excluded.value_ids for attribute_value in variant.product_attribute_value_ids))
 
         return product_variants
