PR: https://github.com/odoo/odoo/pull/116974

From: b69fa1b0641475e0c01ba1690f4949a1a267048d
From: Andro Gvivradze
Date: 2023-05-31 09:44:55

Structural Changes: 4
Total Changes: 28

[IMP] event[_booth]_sale: add ticket and booth in sale order template

This commit allows us to add the events on sales order templates, and then
configure them in the sales order quotations. Users will get an error when
trying to confirm a quotation if events are not configured, and they will
be able to configure said events by clicking on them.

Task-2988003

closes odoo/odoo#116974

Signed-off-by: Warnon Aur√©lien (awa) <awa@odoo.com>

================================= pseudo patch: =================================

--- a/addons/event_sale/models/__init__.py
+++ b/addons/event_sale/models/__init__.py
@@ -7,5 +7,3 @@ from . import event_ticket
 from . import product
 from . import sale_order
 from . import sale_order_line
-from . import sale_order_template_line
-from . import sale_order_template_option

--- a/addons/event_sale/models/sale_order.py
+++ b/addons/event_sale/models/sale_order.py
@@ -1,9 +1,9 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
 from odoo.osv import expression
 
-
 class SaleOrder(models.Model):
     _inherit = "sale.order"
 
@@ -24,6 +24,10 @@ class SaleOrder(models.Model):
         for so in self:
             if not any(line.product_type == 'event' for line in so.order_line):
                 continue
+            so_lines_missing_events = so.order_line.filtered(lambda line: line.product_type == 'event' and not line.event_id)
+            if so_lines_missing_events:
+                so_lines_descriptions = "".join([f"- {so_line_description.name} \n" for so_line_description in so_lines_missing_events])
+                raise ValidationError(_("Please make sure all your event related lines are configured before confirming this order: \n%s" % so_lines_descriptions))
             # confirm registration if it was free (otherwise it will be confirmed once invoice fully paid)
             so.order_line._update_registrations(confirm=so.amount_total == 0, cancel_to_draft=False)
             if len(self) == 1:

--- a/addons/event_sale/models/sale_order_line.py
+++ b/addons/event_sale/models/sale_order_line.py
@@ -103,6 +103,12 @@ class SaleOrderLine(models.Model):
         else:
             return super()._get_sale_order_line_multiline_description_sale()
 
+    def _use_template_name(self):
+        """ We do not want configured description to get rewritten by template default"""
+        if self.event_ticket_id:
+            return False
+        return super()._use_template_name()
+
     def _get_display_price(self):
         if self.event_ticket_id and self.event_id:
             event_ticket = self.event_ticket_id.with_context(

--- a/addons/event_sale/models/sale_order_template_line.py
+++ b/None
@@ -1,8 +0,0 @@
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-class SaleOrderTemplateLine(models.Model):
-    _inherit = "sale.order.template.line"
-
-    product_id = fields.Many2one(domain="[('sale_ok', '=', True), ('detailed_type', '!=', 'event'), ('company_id', 'in', [company_id, False])]")

--- a/addons/event_sale/models/sale_order_template_option.py
+++ b/None
@@ -1,6 +0,0 @@
-from odoo import fields, models
-
-class SaleOrderTemplateOption(models.Model):
-    _inherit = "sale.order.template.option"
-
-    product_id = fields.Many2one(domain="[('sale_ok', '=', True), ('detailed_type', '!=', 'event'), ('company_id', 'in', [company_id, False])]")
