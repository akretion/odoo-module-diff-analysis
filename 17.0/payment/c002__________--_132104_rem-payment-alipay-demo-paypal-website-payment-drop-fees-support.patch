PR: https://github.com/odoo/odoo/pull/132104

From: d5bee8b86f7f8b9e44bd221c5e5514455313853d
From: Antoine Vandevenne (anv)
Date: 2023-08-19 07:06:59

Breaking data model changes score: 7, change matches:
-    fees_active = fields.Boolean(string="Add Extra Fees")
-    fees_dom_fixed = fields.Monetary(
-    fees_dom_var = fields.Float(string="Variable domestic fees")
-    fees_int_fixed = fields.Monetary(
-    fees_int_var = fields.Float(string="Variable international fees")
-    support_fees = fields.Boolean(
-    fees = fields.Monetary(

Total Changes: 85

[REM] payment(_alipay,_demo,_paypal), website_payment: drop fees support

The "fees" or "extra fees" or "customer fees" feature was meant to make
customers pay for the processing fee charged by the payment provider
they choose to make their payment. The fee was also displayed on the
payment form to deter customers and encourage them to choose another,
cheaper, payment provider.

In practice, it didn't hold up because:
1. the provider's API must allow sending the fee as a separate amount,
   and PayPal was the only supported provider to do it;
2. charging extra fees is highly discouraged by providers, and forbidden
   in Europe;
3. the final fee amount depends on the customer, country, payment
   method, risk profile... rendering charging the actual fees amount
   infeasible;
4. most of the time, only one payment provider is enabled at a time,
   thus alienating customers who would have no other choice than paying
   the fee;

task-3358581

closes odoo/odoo#132104

Related: odoo/documentation#5517
Related: odoo/upgrade#5053
Signed-off-by: Antoine Vandevenne (anv) <anv@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment/models/payment_provider.py
+++ b/addons/payment/models/payment_provider.py
@@ -123,17 +123,6 @@ class PaymentProvider(models.Model):
         currency_field='main_currency_id',
     )
 
-    # Fees fields
-    fees_active = fields.Boolean(string="Add Extra Fees")
-    fees_dom_fixed = fields.Monetary(
-        string="Fixed domestic fees", currency_field='main_currency_id'
-    )
-    fees_dom_var = fields.Float(string="Variable domestic fees")
-    fees_int_fixed = fields.Monetary(
-        string="Fixed international fees", currency_field='main_currency_id'
-    )
-    fees_int_var = fields.Float(string="Variable international fees")
-
     # Message fields
     display_as = fields.Char(
         string="Displayed as", help="Description of the provider for customers",
@@ -177,9 +166,6 @@ class PaymentProvider(models.Model):
         selection=[('full_only', "Full Only"), ('partial', "Partial")],
         compute='_compute_feature_support_fields',
     )
-    support_fees = fields.Boolean(
-        string="Fees Supported", compute='_compute_feature_support_fields'
-    )
 
     # Kanban view fields
     image_128 = fields.Image(string="Image", max_width=128, max_height=128)
@@ -286,7 +272,6 @@ class PaymentProvider(models.Model):
 
         - `support_express_checkout`: Whether the "express checkout" feature is supported. `False`
           by default.
-        - `support_fees`: Whether the "extra fees" feature is supported. `False` by default.
         - `support_manual_capture`: Whether the "manual capture" feature is supported. `False` by
           default.
         - `support_refund`: Which type of the "refunds" feature is supported: `None`,
@@ -302,7 +287,6 @@ class PaymentProvider(models.Model):
         """
         self.update(dict.fromkeys((
             'support_express_checkout',
-            'support_fees',
             'support_manual_capture',
             'support_refund',
             'support_tokenization',
@@ -343,21 +327,6 @@ class PaymentProvider(models.Model):
                     }
                 }
 
-    #=== CONSTRAINT METHODS ===#
-
-    @api.constrains('fees_dom_var', 'fees_int_var')
-    def _check_fee_var_within_boundaries(self):
-        """ Check that variable fees are within realistic boundaries.
-
-        Variable fee values should always be positive and below 100% to respectively avoid negative
-        and infinite (division by zero) fee amounts.
-
-        :return None
-        """
-        for provider in self:
-            if any(not 0 <= fee < 1 for fee in (provider.fees_dom_var, provider.fees_int_var)):
-                raise ValidationError(_("Variable fees must always be positive and below 100%."))
-
     #=== CRUD METHODS ===#
 
     @api.model_create_multi
@@ -573,40 +542,6 @@ class PaymentProvider(models.Model):
         """
         return True
 
-    def _compute_fees(self, amount, currency, country):
-        """ Compute the transaction fees.
-
-        The computation is based on the fields `fees_dom_fixed`, `fees_dom_var`, `fees_int_fixed`
-        and `fees_int_var`, and is performed with the formula
-        :code:`fees = (amount * variable + fixed) / (1 - variable)` where the values of `fixed` and
-        `variable` are taken from either the domestic (`dom`) or international (`int`) fields,
-        depending on whether the country matches the company's country.
-
-        For a provider to base the computation on different variables, or to use a different
-        formula, it must override this method and return the resulting fees.
-
-        :param float amount: The amount to pay for the transaction.
-        :param recordset currency: The currency of the transaction, as a `res.currency` record.
-        :param recordset country: The customer country, as a `res.country` record.
-        :return: The computed fees.
-        :rtype: float
-        """
-        self.ensure_one()
-
-        fees = 0.0
-        if self.fees_active:
-            if country == self.company_id.country_id:
-                fixed = self.fees_dom_fixed
-                variable = self.fees_dom_var
-            else:
-                fixed = self.fees_int_fixed
-                variable = self.fees_int_var
-            fixed_converted = self.main_currency_id._convert(
-                fixed, currency, self.company_id, fields.Date.context_today(self)
-            )
-            fees = (amount * variable + fixed_converted) / (1 - variable)
-        return fees
-
     def _get_validation_amount(self):
         """ Return the amount to use for validation operations.
 

--- a/addons/payment/models/payment_transaction.py
+++ b/addons/payment/models/payment_transaction.py
@@ -45,9 +45,6 @@ class PaymentTransaction(models.Model):
         string="Amount", currency_field='currency_id', readonly=True, required=True)
     currency_id = fields.Many2one(
         string="Currency", comodel_name='res.currency', readonly=True, required=True)
-    fees = fields.Monetary(
-        string="Fees", currency_field='currency_id',
-        help="The fees amount; set by the system as it depends on the provider", readonly=True)
     token_id = fields.Many2one(
         string="Payment Token", comodel_name='payment.token', readonly=True,
         domain='[("provider_id", "=", "provider_id")]', ondelete='restrict')
@@ -187,15 +184,6 @@ class PaymentTransaction(models.Model):
                 'partner_phone': partner.phone,
             })
 
-            # Compute fees. For validation transactions, fees are zero.
-            if values.get('operation') == 'validation':
-                values['fees'] = 0
-            else:
-                currency = self.env['res.currency'].browse(values.get('currency_id')).exists()
-                values['fees'] = provider._compute_fees(
-                    values.get('amount', 0), currency, partner.country_id,
-                )
-
             # Include provider-specific create values
             values.update(self._get_specific_create_values(provider.code, values))
 
@@ -212,11 +200,11 @@ class PaymentTransaction(models.Model):
         # can lead to inconsistent string representation of the amounts sent to the providers.
         # E.g., tx.create(amount=1111.11) -> tx.amount == 1111.1100000000001
         # To ensure a proper string representation, we invalidate this request's cache values of the
-        # `amount` and `fees` fields for the created transactions. This forces the ORM to read the
-        # values from the DB where there were stored using `float_repr`, which produces a result
-        # consistent with the format expected by providers.
+        # `amount` field for the created transactions. This forces the ORM to read the values from
+        # the DB where there were stored using `float_repr`, which produces a result consistent with
+        # the format expected by providers.
         # E.g., tx.create(amount=1111.11) ; tx.invalidate_recordset() -> tx.amount == 1111.11
-        txs.invalidate_recordset(['amount', 'fees'])
+        txs.invalidate_recordset(['amount'])
 
         return txs
 
