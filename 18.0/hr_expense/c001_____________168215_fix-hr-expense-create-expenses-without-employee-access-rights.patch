PR: https://github.com/odoo/odoo/pull/168215

From: 87cca4a9ee64c890ccbd24e2d6766f9f8799a0c0
From: Nathaniel (naja)
Date: 2024-06-06 09:29:54

Breaking data model changes scores: del:1 + add:0, change matches:
-    filter_for_expense = fields.Boolean(store=False, search='_search_filter_for_expense', groups="hr.group_hr_user")

Total Changes: 53

[FIX] hr_expense: create expenses without employee access rights

Problem
*--
When creating/editing expenses, if the user doesn't have any access rights to
employee, a ValueError is thrown when clicking the employee field.

The Error happens because the model used for employees for users
without access is `hr.employee.public` instead of the usual
`hr.employee` and `hr.employee.public` does not define the
`filter_for_expense` field, which is used for searching / filtering
employees to set.

Fix
*--
`hr.employee` and `hr.employee.public` both inherit from
`hr.employee.base`, therefore we can put the search method,
into an `hr.expense` child model of `hr.employee.base`.

Note that (as far as I understand) this will not break stable because
the `filter_for_expense` field is `store=False`.

opw-3858951

closes odoo/odoo#168215

X-original-commit: 38997e2a2e7fdd9be2f59871f09cae9e996d5ee0
Signed-off-by: John Laterre (jol) <jol@odoo.com>
Signed-off-by: William Andr√© (wan) <wan@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_expense/models/hr_employee.py
+++ b/addons/hr_expense/models/hr_employee.py
@@ -3,6 +3,33 @@
 from odoo import fields, models, api
 
 
+class EmployeeBase(models.AbstractModel):
+    _inherit = 'hr.employee.base'
+
+    filter_for_expense = fields.Boolean(store=False, search='_search_filter_for_expense', groups="hr.group_hr_user")
+
+    def _search_filter_for_expense(self, operator, value):
+        assert operator == '=' and value, "Operation not supported"
+
+        res = [('id', '=', 0)]  # Nothing accepted by domain, by default
+        user = self.env.user
+        employee = user.employee_id
+        if user.has_groups('hr_expense.group_hr_expense_user') or user.has_groups('account.group_account_user'):
+            res = ['|', ('company_id', '=', False), ('company_id', 'child_of', self.env.company.root_id.id)]  # Then, domain accepts everything
+        elif user.has_groups('hr_expense.group_hr_expense_team_approver') and user.employee_ids:
+            res = [
+                '|', '|', '|',
+                ('department_id.manager_id', '=', employee.id),
+                ('parent_id', '=', employee.id),
+                ('id', '=', employee.id),
+                ('expense_manager_id', '=', user.id),
+                '|', ('company_id', '=', False), ('company_id', '=', employee.company_id.id),
+            ]
+        elif user.employee_id:
+            res = [('id', '=', employee.id), '|', ('company_id', '=', False), ('company_id', '=', employee.company_id.id)]
+        return res
+
+
 class Employee(models.Model):
     _inherit = 'hr.employee'
 
@@ -25,8 +52,6 @@ class Employee(models.Model):
              'If empty, the approval is done by an Administrator or Approver (determined in settings/users).',
     )
 
-    filter_for_expense = fields.Boolean(store=False, search='_search_filter_for_expense', groups="hr.group_hr_user")
-
     @api.depends('parent_id')
     def _compute_expense_manager(self):
         for employee in self:
@@ -41,30 +66,6 @@ class Employee(models.Model):
     def _get_user_m2o_to_empty_on_archived_employees(self):
         return super()._get_user_m2o_to_empty_on_archived_employees() + ['expense_manager_id']
 
-    def _search_filter_for_expense(self, operator, value):
-        assert operator == '='
-        assert value
-
-        res = [('id', '=', 0)]  # Nothing accepted by domain, by default
-        if (self.env.user.has_group('hr_expense.group_hr_expense_user')
-                or self.env.user.has_group('account.group_account_user')):
-            res = ['|', ('company_id', '=', False), ('company_id', 'child_of', self.env.company.root_id.id)]  # Then, domain accepts everything
-        elif self.env.user.has_group('hr_expense.group_hr_expense_team_approver') and self.env.user.employee_ids:
-            user = self.env.user
-            employee = self.env.user.employee_id
-            res = [
-                '|', '|', '|',
-                ('department_id.manager_id', '=', employee.id),
-                ('parent_id', '=', employee.id),
-                ('id', '=', employee.id),
-                ('expense_manager_id', '=', user.id),
-                '|', ('company_id', '=', False), ('company_id', '=', employee.company_id.id),
-            ]
-        elif self.env.user.employee_id:
-            employee = self.env.user.employee_id
-            res = [('id', '=', employee.id), '|', ('company_id', '=', False), ('company_id', '=', employee.company_id.id)]
-        return res
-
 
 class EmployeePublic(models.Model):
     _inherit = 'hr.employee.public'
