PR: https://github.com/odoo/odoo/pull/133392

From: e8878a8b4c6dcf7927b5ec0623646cf2f2be477d
From: Florian Charlier
Date: 2023-10-24 12:38:13

Structural Changes: 8
Total Changes: 25

[IMP] {mass_mailing_,}sms: delay sms deletion

Also impacts test_mail_sms.

Purpose: let a cron do delete records to end the
sending transaction sooner.

Removing the foreign key between sms_sms and mailing_trace
is necessary as traces may have to be updated due to
delivery reports.
This is why we do it here and not with notifications
because only traces will trigger updates of a possibly
massive number of records and repeated concurrent updates.

We also replace the now obsolete "sms_sms_X" prefix as there
are not many "sms_id" to distinguish from.

Task-2560666

Part-of: odoo/odoo#133392

================================= pseudo patch: =================================

--- a/addons/mass_mailing_sms/models/mailing_trace.py
+++ b/addons/mass_mailing_sms/models/mailing_trace.py
@@ -16,9 +16,9 @@ class MailingTrace(models.Model):
     trace_type = fields.Selection(selection_add=[
         ('sms', 'SMS')
     ], ondelete={'sms': 'set default'})
-    sms_sms_id = fields.Many2one('sms.sms', string='SMS', index='btree_not_null', ondelete='set null')
-    sms_sms_id_int = fields.Integer(
-        string='SMS ID (tech)',
+    sms_id = fields.Many2one('sms.sms', string='SMS', store=False, compute='_compute_sms_id')
+    sms_id_int = fields.Integer(
+        string='SMS ID',
         index='btree_not_null'
         # Integer because the related sms.sms can be deleted separately from its statistics.
         # However, the ID is needed for several action and controllers.
@@ -46,11 +46,21 @@ class MailingTrace(models.Model):
         ('sms_rejected', 'Rejected'),
     ])
 
+    @api.depends('sms_id_int', 'trace_type')
+    def _compute_sms_id(self):
+        self.sms_id = False
+        sms_traces = self.filtered(lambda t: t.trace_type == 'sms' and bool(t.sms_id_int))
+        if not sms_traces:
+            return
+        existing_sms_ids = self.env['sms.sms'].sudo().search([
+            ('id', 'in', sms_traces.mapped('sms_id_int')), ('to_delete', '!=', True)
+        ]).ids
+        for sms_trace in sms_traces.filtered(lambda n: n.sms_id_int in set(existing_sms_ids)):
+            sms_trace.sms_id = sms_trace.sms_id_int
+
     @api.model_create_multi
     def create(self, values_list):
         for values in values_list:
-            if 'sms_sms_id' in values:
-                values['sms_sms_id_int'] = values['sms_sms_id']
             if values.get('trace_type') == 'sms' and not values.get('sms_code'):
                 values['sms_code'] = self._get_random_code()
         return super(MailingTrace, self).create(values_list)

--- a/addons/mass_mailing_sms/models/sms_sms.py
+++ b/addons/mass_mailing_sms/models/sms_sms.py
@@ -10,7 +10,10 @@ class SmsSms(models.Model):
     _inherit = ['sms.sms']
 
     mailing_id = fields.Many2one('mailing.mailing', string='Mass Mailing')
-    mailing_trace_ids = fields.One2many('mailing.trace', 'sms_sms_id', string='Statistics')
+    # Linking to another field than the comodel id allows to use the ORM to create
+    # "linked" records (see _prepare_sms_values) without adding a foreign key.
+    # See commit message for why this is useful.
+    mailing_trace_ids = fields.One2many('mailing.trace', 'sms_id_int', string='Statistics')
 
     def _update_body_short_links(self):
         """ Override to tweak shortened URLs by adding statistics ids, allowing to
