PR: https://github.com/odoo/odoo/pull/66087

From: c61f32ecef4cb4240829e5ad38c0d4b444702ad1
From: Florian Gilbert
Date: 2021-03-01 09:10:45

Structural Changes: 6
Total Changes: 96

[IMP] account: Back 2 Basics improvements
Now when duplicating a bank or cash journal, the outstanding accounts are
the same as the original journal.

Added a compute method for payment_credit_account_id and payment_debit_account_id
to retrieve the default value from the company. These default accounts can be
changed in the settings.

Change UI for some settings (Default accounts).
Moving transfer_account_id into account module (from account_accountant).

Changing the tree view of account.journal:
  - Edit journal_group_ids: Optional show
  - Add currency_id: Optional hide
  - Add code: Optional show
  - Add default_account_id
  - Add payment_debit_account_id: Optional hide
  - Add payment_credit_account_id: Optional hide
  - Add active: Optional hide
  - Edit company_id: Optional hide

Task ID: #2451842

closes odoo/odoo#66087

Related: odoo/enterprise#16314
Signed-off-by: Laurent Smet <smetl@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_journal.py
+++ b/addons/account/models/account_journal.py
@@ -80,7 +80,8 @@ class AccountJournal(models.Model):
                "'|', ('user_type_id', '=', default_account_type), ('user_type_id', 'in', type_control_ids),"
                "('user_type_id.type', 'not in', ('receivable', 'payable'))]")
     payment_debit_account_id = fields.Many2one(
-        comodel_name='account.account', check_company=True, copy=False, ondelete='restrict',
+        comodel_name='account.account', check_company=True, ondelete='restrict',
+        compute='_compute_payment_debit_account_id', store=True, readonly=False,
         help="Incoming payments entries triggered by invoices/refunds will be posted on the Outstanding Receipts Account "
              "and displayed as blue lines in the bank reconciliation widget. During the reconciliation process, concerned "
              "transactions will be reconciled with entries on the Outstanding Receipts Account instead of the "
@@ -89,7 +90,8 @@ class AccountJournal(models.Model):
                              ('user_type_id.type', 'not in', ('receivable', 'payable')), \
                              '|', ('user_type_id', '=', %s), ('id', '=', default_account_id)]" % self.env.ref('account.data_account_type_current_assets').id)
     payment_credit_account_id = fields.Many2one(
-        comodel_name='account.account', check_company=True, copy=False, ondelete='restrict',
+        comodel_name='account.account', check_company=True, ondelete='restrict',
+        compute='_compute_payment_credit_account_id', store=True, readonly=False,
         help="Outgoing payments entries triggered by bills/credit notes will be posted on the Outstanding Payments Account "
              "and displayed as blue lines in the bank reconciliation widget. During the reconciliation process, concerned "
              "transactions will be reconciled with entries on the Outstanding Payments Account instead of the "
@@ -257,6 +259,30 @@ class AccountJournal(models.Model):
             else:
                 journal.suspense_account_id = False
 
+    @api.depends('company_id', 'type')
+    def _compute_payment_debit_account_id(self):
+        for journal in self:
+            if journal.type not in ('bank', 'cash'):
+                journal.payment_debit_account_id = False
+            elif journal.payment_debit_account_id:
+                journal.payment_debit_account_id = journal.payment_debit_account_id
+            elif journal.company_id.account_journal_payment_debit_account_id:
+                journal.payment_debit_account_id = journal.company_id.account_journal_payment_debit_account_id
+            else:
+                journal.payment_debit_account_id = False
+
+    @api.depends('company_id', 'type')
+    def _compute_payment_credit_account_id(self):
+        for journal in self:
+            if journal.type not in ('bank', 'cash'):
+                journal.payment_credit_account_id = False
+            elif journal.payment_credit_account_id:
+                journal.payment_credit_account_id = journal.payment_credit_account_id
+            elif journal.company_id.account_journal_payment_credit_account_id:
+                journal.payment_credit_account_id = journal.company_id.account_journal_payment_credit_account_id
+            else:
+                journal.payment_credit_account_id = False
+
     def _compute_alias_domain(self):
         alias_domain = self._default_alias_domain()
         for record in self:
@@ -491,7 +517,6 @@ class AccountJournal(models.Model):
 
         if journal_type in ('bank', 'cash'):
             has_liquidity_accounts = vals.get('default_account_id')
-            has_payment_accounts = vals.get('payment_debit_account_id') or vals.get('payment_credit_account_id')
             has_profit_account = vals.get('profit_account_id')
             has_loss_account = vals.get('loss_account_id')
 
@@ -514,21 +539,6 @@ class AccountJournal(models.Model):
                 default_account_code = self.env['account.account']._search_new_account_code(company, digits, liquidity_account_prefix)
                 default_account_vals = self._prepare_liquidity_account_vals(company, default_account_code, vals)
                 vals['default_account_id'] = self.env['account.account'].create(default_account_vals).id
-            if not has_payment_accounts:
-                vals['payment_debit_account_id'] = self.env['account.account'].create({
-                    'name': _("Outstanding Receipts"),
-                    'code': self.env['account.account']._search_new_account_code(company, digits, liquidity_account_prefix),
-                    'reconcile': True,
-                    'user_type_id': current_assets_type.id,
-                    'company_id': company.id,
-                }).id
-                vals['payment_credit_account_id'] = self.env['account.account'].create({
-                    'name': _("Outstanding Payments"),
-                    'code': self.env['account.account']._search_new_account_code(company, digits, liquidity_account_prefix),
-                    'reconcile': True,
-                    'user_type_id': current_assets_type.id,
-                    'company_id': company.id,
-                }).id
             if journal_type == 'cash' and not has_profit_account:
                 vals['profit_account_id'] = company.default_cash_difference_income_account_id.id
             if journal_type == 'cash' and not has_loss_account:

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -106,6 +106,8 @@ class AccountChartTemplate(models.Model):
     expense_currency_exchange_account_id = fields.Many2one('account.account.template',
         string="Loss Exchange Rate Account", domain=[('internal_type', '=', 'other'), ('deprecated', '=', False)])
     account_journal_suspense_account_id = fields.Many2one('account.account.template', string='Journal Suspense Account')
+    account_journal_payment_debit_account_id = fields.Many2one('account.account.template', string='Journal Outstanding Receipts Account')
+    account_journal_payment_credit_account_id = fields.Many2one('account.account.template', string='Journal Outstanding Payments Account')
     default_cash_difference_income_account_id = fields.Many2one('account.account.template', string="Cash Difference Income Account")
     default_cash_difference_expense_account_id = fields.Many2one('account.account.template', string="Cash Difference Expense Account")
     default_pos_receivable_account_id = fields.Many2one('account.account.template', string="PoS receivable account")
@@ -278,6 +280,25 @@ class AccountChartTemplate(models.Model):
         if not company.account_journal_suspense_account_id:
             company.account_journal_suspense_account_id = self._create_liquidity_journal_suspense_account(company, self.code_digits)
 
+        account_type_current_assets = self.env.ref('account.data_account_type_current_assets')
+        if not company.account_journal_payment_debit_account_id:
+            company.account_journal_payment_debit_account_id = self.env['account.account'].create({
+                'name': _("Outstanding Receipts"),
+                'code': self.env['account.account']._search_new_account_code(company, self.code_digits, company.bank_account_code_prefix or ''),
+                'reconcile': True,
+                'user_type_id': account_type_current_assets.id,
+                'company_id': company.id,
+            })
+
+        if not company.account_journal_payment_credit_account_id:
+            company.account_journal_payment_credit_account_id = self.env['account.account'].create({
+                'name': _("Outstanding Payments"),
+                'code': self.env['account.account']._search_new_account_code(company, self.code_digits, company.bank_account_code_prefix or ''),
+                'reconcile': True,
+                'user_type_id': account_type_current_assets.id,
+                'company_id': company.id,
+            })
+
         if not company.default_cash_difference_expense_account_id:
             company.default_cash_difference_expense_account_id = self.env['account.account'].create({
                 'name': _('Cash Difference Loss'),
@@ -619,6 +640,8 @@ class AccountChartTemplate(models.Model):
             'default_cash_difference_income_account_id': self.default_cash_difference_income_account_id.id,
             'default_cash_difference_expense_account_id': self.default_cash_difference_expense_account_id.id,
             'account_journal_suspense_account_id': self.account_journal_suspense_account_id.id,
+            'account_journal_payment_debit_account_id': self.account_journal_payment_debit_account_id.id,
+            'account_journal_payment_credit_account_id': self.account_journal_payment_credit_account_id.id,
             'account_cash_basis_base_account_id': self.property_cash_basis_base_account_id.id,
             'account_default_pos_receivable_account_id': self.default_pos_receivable_account_id.id,
             'income_currency_exchange_account_id': self.income_currency_exchange_account_id.id,

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -52,6 +52,8 @@ class ResCompany(models.Model):
     default_cash_difference_income_account_id = fields.Many2one('account.account', string="Cash Difference Income Account")
     default_cash_difference_expense_account_id = fields.Many2one('account.account', string="Cash Difference Expense Account")
     account_journal_suspense_account_id = fields.Many2one('account.account', string='Journal Suspense Account')
+    account_journal_payment_debit_account_id = fields.Many2one('account.account', string='Journal Outstanding Receipts Account')
+    account_journal_payment_credit_account_id = fields.Many2one('account.account', string='Journal Outstanding Payments Account')
     transfer_account_code_prefix = fields.Char(string='Prefix of the transfer accounts')
     account_sale_tax_id = fields.Many2one('account.tax', string="Default Sale Tax")
     account_purchase_tax_id = fields.Many2one('account.tax', string="Default Purchase Tax")

--- a/addons/account/models/res_config_settings.py
+++ b/addons/account/models/res_config_settings.py
@@ -38,6 +38,31 @@ class ResConfigSettings(models.TransientModel):
     purchase_tax_id = fields.Many2one('account.tax', string="Default Purchase Tax", related='company_id.account_purchase_tax_id', readonly=False)
     tax_calculation_rounding_method = fields.Selection(
         related='company_id.tax_calculation_rounding_method', string='Tax calculation rounding method', readonly=False)
+    account_journal_suspense_account_id = fields.Many2one(
+        comodel_name='account.account',
+        string='Suspense Account',
+        readonly=False,
+        related='company_id.account_journal_suspense_account_id',
+        domain=lambda self: "[('deprecated', '=', False), ('company_id', '=', company_id), ('user_type_id.type', 'not in', ('receivable', 'payable')), ('user_type_id', '=', %s)]" % self.env.ref('account.data_account_type_current_liabilities').id,
+        help='Account used as automatic counterpart to bank/cash transactions')
+    account_journal_payment_debit_account_id = fields.Many2one(
+        comodel_name='account.account',
+        string='Outstanding Receipts Account',
+        readonly=False,
+        related='company_id.account_journal_payment_debit_account_id',
+        domain=lambda self: "[('deprecated', '=', False), ('company_id', '=', company_id), ('user_type_id.type', 'not in', ('receivable', 'payable')), ('user_type_id', '=', %s)]" % self.env.ref('account.data_account_type_current_assets').id,
+        help='Account used as automatic counterpart account to payments received')
+    account_journal_payment_credit_account_id = fields.Many2one(
+        comodel_name='account.account',
+        string='Outstanding Payments Account',
+        readonly=False,
+        related='company_id.account_journal_payment_credit_account_id',
+        domain=lambda self: "[('deprecated', '=', False), ('company_id', '=', company_id), ('user_type_id.type', 'not in', ('receivable', 'payable')), ('user_type_id', '=', %s)]" % self.env.ref('account.data_account_type_current_assets').id,
+        help='Account used as automatic counterpart account to payments sent')
+    transfer_account_id = fields.Many2one('account.account', string="Internal Transfer Account",
+        related='company_id.transfer_account_id', readonly=False,
+        domain=lambda self: [('reconcile', '=', True), ('user_type_id.id', '=', self.env.ref('account.data_account_type_current_assets').id)],
+        help="Intermediary account used to transfer money from one bank/cash account to another bank/cash account")
     module_account_accountant = fields.Boolean(string='Accounting')
     group_analytic_accounting = fields.Boolean(string='Analytic Accounting',
         implied_group='analytic.group_analytic_accounting')
