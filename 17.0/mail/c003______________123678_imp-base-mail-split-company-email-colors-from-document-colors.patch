PR: https://github.com/odoo/odoo/pull/123678

From: 50762307e45737161050f6ea0973190599fa1813
From: Thibault Delavall√©e
Date: 2023-07-10 14:59:11

Breaking data model changes score: 2.4, change matches:
-    email_formatted = fields.Char(string="Formatted Email",
+    email_formatted = fields.Char(
-    primary_color = fields.Char(related='company_id.primary_color', string="Header Color", readonly=False)
-    secondary_color = fields.Char(related='company_id.secondary_color', string="Button Color", readonly=False)

Total Changes: 31

[IMP] base, mail: split company email colors from document colors

PURPOSE

Settings allow to change colors used in emails (primary and secondary colors).
Those are used for headers and buttons. They are currently shared with colors
used for base documents and reports layout: changing email colors change
documents colors, which is not expected nor clearly indicated.

SPECIFICATIONS

Split configuration: colors used in documents may differ from colors used in
emails. Duplicate color fields (primary and secondary). To ease setup when
updating documents colors, update mail colors accordingly. Inverse is not
true as we consider documents being the main configuration, and emails a
more fine-grain configuration.

Task-3346388

Part-of: odoo/odoo#123678

================================= pseudo patch: =================================

--- a/addons/mail/models/res_company.py
+++ b/addons/mail/models/res_company.py
@@ -12,8 +12,15 @@ class Company(models.Model):
     catchall_formatted = fields.Char(string="Catchall", compute="_compute_catchall")
     # the compute method is sudo'ed because it needs to access res.partner records
     # portal users cannot access those (but they should be able to read the company email address)
-    email_formatted = fields.Char(string="Formatted Email",
+    email_formatted = fields.Char(
+        string="Formatted Email",
         compute="_compute_email_formatted", compute_sudo=True)
+    email_primary_color = fields.Char(
+        "Email Header Color", compute="_compute_email_primary_color",
+        readonly=False, store=True)
+    email_secondary_color = fields.Char(
+        "Email Button Color", compute="_compute_email_secondary_color",
+        readonly=False, store=True)
 
     @api.depends('name')
     def _compute_catchall(self):
@@ -38,3 +45,21 @@ class Company(models.Model):
                 company.email_formatted = company.catchall_formatted
             else:
                 company.email_formatted = ''
+
+    @api.depends('primary_color')
+    def _compute_email_primary_color(self):
+        """ When updating documents layout colors, force usage of same colors
+        for emails as it is considered as base colors for all communication.
+        Inverse is not true, people may change email colors without changing
+        their overall layout. """
+        for company in self:
+            company.email_primary_color = company.primary_color or '#000000'
+
+    @api.depends('secondary_color')
+    def _compute_email_secondary_color(self):
+        """ When updating documents layout colors, force usage of same colors
+        for emails as it is considered as base colors for all communication.
+        Inverse is not true, people may change email colors without changing
+        their overall layout. """
+        for company in self:
+            company.email_secondary_color = company.secondary_color or '#875A7B'

--- a/addons/mail/models/res_config_settings.py
+++ b/addons/mail/models/res_config_settings.py
@@ -36,8 +36,8 @@ class ResConfigSettings(models.TransientModel):
         'Twilio Account Auth Token',
         config_parameter='mail.twilio_account_token',
     )
-    primary_color = fields.Char(related='company_id.primary_color', string="Header Color", readonly=False)
-    secondary_color = fields.Char(related='company_id.secondary_color', string="Button Color", readonly=False)
+    email_primary_color = fields.Char(related='company_id.email_primary_color', readonly=False)
+    email_secondary_color = fields.Char(related='company_id.email_secondary_color', readonly=False)
 
     tenor_api_key = fields.Char(
         'Tenor API key',
