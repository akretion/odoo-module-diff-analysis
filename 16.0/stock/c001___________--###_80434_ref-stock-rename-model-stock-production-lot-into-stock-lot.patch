PR: https://github.com/odoo/odoo/pull/80434

From: 6a23b9bcd6aea529eb339640e6231e1aa4c9e207
From: William Henrotin
Date: 2021-12-07 16:20:05

Structural Changes: 5
Total Changes: 464

[REF] *stock*: rename model `stock.production.lot` into `stock.lot`

Task: 2648449
Part-of: odoo/odoo#80434

================================= pseudo patch: =================================

--- a/addons/stock/models/__init__.py
+++ b/addons/stock/models/__init__.py
@@ -10,7 +10,7 @@ from . import stock_location
 from . import stock_move
 from . import stock_move_line
 from . import stock_orderpoint
-from . import stock_production_lot
+from . import stock_lot
 from . import stock_picking
 from . import stock_quant
 from . import stock_rule

--- a/addons/stock/models/product.py
+++ b/addons/stock/models/product.py
@@ -592,7 +592,7 @@ class Product(models.Model):
 
     def _filter_to_unlink(self):
         domain = [('product_id', 'in', self.ids)]
-        lines = self.env['stock.production.lot'].read_group(domain, ['product_id'], ['product_id'])
+        lines = self.env['stock.lot'].read_group(domain, ['product_id'], ['product_id'])
         linked_product_ids = [group['product_id'][0] for group in lines]
         return super(Product, self - self.browse(linked_product_ids))._filter_to_unlink()
 

--- a/addons/stock/models/stock_production_lot.py
+++ b/addons/stock/models/stock_lot.py
@@ -9,8 +9,8 @@ from odoo import _, api, fields, models
 from odoo.exceptions import UserError, ValidationError
 
 
-class ProductionLot(models.Model):
-    _name = 'stock.production.lot'
+class StockLot(models.Model):
+    _name = 'stock.lot'
     _inherit = ['mail.thread', 'mail.activity.mixin']
     _description = 'Lot/Serial'
     _check_company_auto = True
@@ -64,11 +64,11 @@ class ProductionLot(models.Model):
     def _get_next_serial(self, company, product):
         """Return the next serial number to be attributed to the product."""
         if product.tracking == "serial":
-            last_serial = self.env['stock.production.lot'].search(
+            last_serial = self.env['stock.lot'].search(
                 [('company_id', '=', company.id), ('product_id', '=', product.id)],
                 limit=1, order='id DESC')
             if last_serial:
-                return self.env['stock.production.lot'].generate_lot_names(last_serial.name, 2)[1]
+                return self.env['stock.lot'].generate_lot_names(last_serial.name, 2)[1]
         return False
 
     @api.constrains('name', 'product_id', 'company_id')
@@ -131,7 +131,7 @@ class ProductionLot(models.Model):
     @api.model_create_multi
     def create(self, vals_list):
         self._check_create()
-        return super(ProductionLot, self.with_context(mail_create_nosubscribe=True)).create(vals_list)
+        return super(StockLot, self.with_context(mail_create_nosubscribe=True)).create(vals_list)
 
     def write(self, vals):
         if 'company_id' in vals:
@@ -146,7 +146,7 @@ class ProductionLot(models.Model):
                     'if some stock moves have already been created with that number. '
                     'This would lead to inconsistencies in your stock.'
                 ))
-        return super(ProductionLot, self).write(vals)
+        return super().write(vals)
 
     def copy(self, default=None):
         if default is None:

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -171,7 +171,7 @@ class StockMove(models.Model):
     orderpoint_id = fields.Many2one('stock.warehouse.orderpoint', 'Original Reordering Rule', check_company=True, index=True)
     forecast_availability = fields.Float('Forecast Availability', compute='_compute_forecast_information', digits='Product Unit of Measure', compute_sudo=True)
     forecast_expected_date = fields.Datetime('Forecasted Expected date', compute='_compute_forecast_information', compute_sudo=True)
-    lot_ids = fields.Many2many('stock.production.lot', compute='_compute_lot_ids', inverse='_set_lot_ids', string='Serial Numbers', readonly=False)
+    lot_ids = fields.Many2many('stock.lot', compute='_compute_lot_ids', inverse='_set_lot_ids', string='Serial Numbers', readonly=False)
     reservation_date = fields.Date('Date to Reserve', compute='_compute_reservation_date', store=True,
         help="This is a technical field for calculating when a move should be reserved")
     product_packaging_id = fields.Many2one('product.packaging', 'Packaging', domain="[('product_id', '=', product_id)]", check_company=True)
@@ -657,7 +657,7 @@ class StockMove(models.Model):
             view = self.env.ref('stock.view_stock_move_nosuggest_operations')
 
         if self.product_id.tracking == "serial" and self.state == "assigned":
-            self.next_serial = self.env['stock.production.lot']._get_next_serial(self.company_id, self.product_id)
+            self.next_serial = self.env['stock.lot']._get_next_serial(self.company_id, self.product_id)
 
         return {
             'name': _('Detailed Operations'),
@@ -766,7 +766,7 @@ class StockMove(models.Model):
         `next_serial`) and create a move line for each generated `lot_name`.
         """
         self.ensure_one()
-        lot_names = self.env['stock.production.lot'].generate_lot_names(self.next_serial, next_serial_count or self.next_serial_count)
+        lot_names = self.env['stock.lot'].generate_lot_names(self.next_serial, next_serial_count or self.next_serial_count)
         move_lines_commands = self._generate_serial_move_line_commands(lot_names)
         self.write({'move_line_ids': move_lines_commands})
         return True
@@ -993,7 +993,7 @@ class StockMove(models.Model):
                     self.update({'move_line_ids': move_lines_commands})
                 else:
                     self.update({'move_line_nosuggest_ids': move_lines_commands})
-                existing_lots = self.env['stock.production.lot'].search([
+                existing_lots = self.env['stock.lot'].search([
                     ('company_id', '=', self.company_id.id),
                     ('product_id', '=', self.product_id.id),
                     ('name', 'in', split_lines),
@@ -1317,7 +1317,7 @@ class StockMove(models.Model):
         self.ensure_one()
 
         if not lot_id:
-            lot_id = self.env['stock.production.lot']
+            lot_id = self.env['stock.lot']
         if not package_id:
             package_id = self.env['stock.quant.package']
         if not owner_id:

--- a/addons/stock/models/stock_move_line.py
+++ b/addons/stock/models/stock_move_line.py
@@ -41,7 +41,7 @@ class StockMoveLine(models.Model):
         domain="[('location_id', '=', location_id)]")
     package_level_id = fields.Many2one('stock.package_level', 'Package Level', check_company=True)
     lot_id = fields.Many2one(
-        'stock.production.lot', 'Lot/Serial Number',
+        'stock.lot', 'Lot/Serial Number',
         domain="[('product_id', '=', product_id), ('company_id', '=', company_id)]", check_company=True)
     lot_name = fields.Char('Lot/Serial Number Name')
     result_package_id = fields.Many2one(
@@ -161,7 +161,7 @@ class StockMoveLine(models.Model):
                     if counter.get(self.lot_name) and counter[self.lot_name] > 1:
                         message = _('You cannot use the same serial number twice. Please correct the serial numbers encoded.')
                     elif not self.lot_id:
-                        lots = self.env['stock.production.lot'].search([('product_id', '=', self.product_id.id),
+                        lots = self.env['stock.lot'].search([('product_id', '=', self.product_id.id),
                                                                         ('name', '=', self.lot_name),
                                                                         ('company_id', '=', self.company_id.id)])
                         quants = lots.quant_ids.filtered(lambda q: q.quantity != 0 and q.location_id.usage in ['customer', 'internal', 'transit'])
@@ -312,7 +312,7 @@ class StockMoveLine(models.Model):
         triggers = [
             ('location_id', 'stock.location'),
             ('location_dest_id', 'stock.location'),
-            ('lot_id', 'stock.production.lot'),
+            ('lot_id', 'stock.lot'),
             ('package_id', 'stock.quant.package'),
             ('result_package_id', 'stock.quant.package'),
             ('owner_id', 'res.partner'),
@@ -520,7 +520,7 @@ class StockMoveLine(models.Model):
                             # the fly before assigning it to the move line if the user checked both
                             # `use_create_lots` and `use_existing_lots`.
                             if ml.lot_name and not ml.lot_id:
-                                lot = self.env['stock.production.lot'].search([
+                                lot = self.env['stock.lot'].search([
                                     ('company_id', '=', ml.company_id.id),
                                     ('product_id', '=', ml.product_id.id),
                                     ('name', '=', ml.lot_name),
@@ -625,7 +625,7 @@ class StockMoveLine(models.Model):
                 key_to_index[key] = len(lot_vals)
                 lot_vals.append(ml._prepare_new_lot_vals())
 
-        lots = self.env['stock.production.lot'].create(lot_vals)
+        lots = self.env['stock.lot'].create(lot_vals)
         for key, mls in key_to_mls.items():
             mls._assign_production_lot(lots[key_to_index[key]].with_prefetch(lots._ids))  # With prefetch to reconstruct the ones broke by accessing by index
 
@@ -645,7 +645,7 @@ class StockMoveLine(models.Model):
     def _log_message(self, record, move, template, vals):
         data = vals.copy()
         if 'lot_id' in vals and vals['lot_id'] != move.lot_id.id:
-            data['lot_name'] = self.env['stock.production.lot'].browse(vals.get('lot_id')).name
+            data['lot_name'] = self.env['stock.lot'].browse(vals.get('lot_id')).name
         if 'location_id' in vals:
             data['location_name'] = self.env['stock.location'].browse(vals.get('location_id')).name
         if 'location_dest_id' in vals:

--- a/addons/stock/models/stock_quant.py
+++ b/addons/stock/models/stock_quant.py
@@ -67,7 +67,7 @@ class StockQuant(models.Model):
         domain=lambda self: self._domain_location_id(),
         auto_join=True, ondelete='restrict', required=True, index=True, check_company=True)
     lot_id = fields.Many2one(
-        'stock.production.lot', 'Lot/Serial Number', index=True,
+        'stock.lot', 'Lot/Serial Number', index=True,
         ondelete='restrict', check_company=True,
         domain=lambda self: self._domain_lot_id())
     package_id = fields.Many2one(
@@ -185,7 +185,7 @@ class StockQuant(models.Model):
             # Create an empty quant or write on a similar one.
             product = self.env['product.product'].browse(vals['product_id'])
             location = self.env['stock.location'].browse(vals['location_id'])
-            lot_id = self.env['stock.production.lot'].browse(vals.get('lot_id'))
+            lot_id = self.env['stock.lot'].browse(vals.get('lot_id'))
             package_id = self.env['stock.quant.package'].browse(vals.get('package_id'))
             owner_id = self.env['res.partner'].browse(vals.get('owner_id'))
             quant = self._gather(product, location, lot_id=lot_id, package_id=package_id, owner_id=owner_id, strict=True)

--- a/addons/stock/models/stock_scrap.py
+++ b/addons/stock/models/stock_scrap.py
@@ -38,7 +38,7 @@ class StockScrap(models.Model):
     product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
     tracking = fields.Selection(string='Product Tracking', readonly=True, related="product_id.tracking")
     lot_id = fields.Many2one(
-        'stock.production.lot', 'Lot/Serial',
+        'stock.lot', 'Lot/Serial',
         states={'done': [('readonly', True)]}, domain="[('product_id', '=', product_id), ('company_id', '=', company_id)]", check_company=True)
     package_id = fields.Many2one(
         'stock.quant.package', 'Package',
