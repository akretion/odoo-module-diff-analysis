PR: https://github.com/odoo/odoo/pull/67537

From: e8a5af2e28a4724f86783746706cb59175f086bf
From: Sébastien Mottet (oms)
Date: 2021-04-02 13:04:03

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = 'ir.actions.todo'
-    website_theme_onboarding_done = fields.Boolean("Onboarding website theme step done",

Total Changes: 200

[IMP] website: configurator for automatic website generation

On website app  installation and on new website creation a configurator is launched.
The purpose of this configurator is to generate a website that meet the user's needs.

The configurator is composed of 4 steps:

1) Business description: the user is asked to describe its need with its website purpose (dropdown), its industry (autocomplete search) and its objective (dropdown).

2) Logo and palette selection: the user must select a color palette for its website. He can also upload its logo. In this case color palettes recommendations are generated based on the logo's colors.

3) Features selection: the user select the pages and applications he needs.

4) Theme selection: three themes are recommended to the user based on its industry. This screen display a preview of these three themes.

task-id: 2451965
ENT PR: odoo/enterprise#16949
UPG PR: odoo/upgrade#2316

closes odoo/odoo#67537

Signed-off-by: Sébastien Mottet <smottet@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/website/models/__init__.py
+++ b/addons/website/models/__init__.py
@@ -25,3 +25,4 @@ from . import res_lang
 from . import theme_models
 from . import website_visitor
 from . import website_snippet_filter
+from . import website_configurator_feature

--- a/addons/website/models/ir_actions.py
+++ b/addons/website/models/ir_actions.py
@@ -60,18 +60,3 @@ class ServerAction(models.Model):
         """
         res = super(ServerAction, self)._run_action_code_multi(eval_context)
         return eval_context.get('response', res)
-
-
-class IrActionsTodo(models.Model):
-    _name = 'ir.actions.todo'
-    _inherit = 'ir.actions.todo'
-
-    def action_launch(self):
-        res = super().action_launch()  # do ensure_one()
-
-        if self.id == self.env.ref('website.theme_install_todo').id:
-            # Pick a theme consume all ir.actions.todo by default (due to lower sequence).
-            # Once done, we re-enable the main ir.act.todo: open_menu
-            self.env.ref('base.open_menu').action_open()
-
-        return res

--- a/addons/website/models/res_company.py
+++ b/addons/website/models/res_company.py
@@ -22,19 +22,6 @@ class Company(models.Model):
         partner = self.sudo().partner_id
         return partner and partner.google_map_link(zoom) or None
 
-    def _compute_website_theme_onboarding_done(self):
-        """ The step is marked as done if one theme is installed. """
-        # we need the same domain as the existing action
-        action = self.env["ir.actions.actions"]._for_xml_id("website.theme_install_kanban_action")
-        domain = literal_eval(action['domain'])
-        domain.append(('state', '=', 'installed'))
-        installed_themes_count = self.env['ir.module.module'].sudo().search_count(domain)
-        for record in self:
-            record.website_theme_onboarding_done = (installed_themes_count > 0)
-
-    website_theme_onboarding_done = fields.Boolean("Onboarding website theme step done",
-                                                   compute='_compute_website_theme_onboarding_done')
-
     def _get_public_user(self):
         self.ensure_one()
         # We need sudo to be able to see public users from others companies too

--- a/addons/website/models/website.py
+++ b/addons/website/models/website.py
@@ -5,6 +5,7 @@ import base64
 import inspect
 import logging
 import hashlib
+import requests
 import re
 
 
@@ -16,11 +17,13 @@ from odoo import api, fields, models, tools
 from odoo.addons.http_routing.models.ir_http import slugify, _guess_mimetype, url_for
 from odoo.addons.website.models.ir_http import sitemap_qs2dom
 from odoo.addons.portal.controllers.portal import pager
+from odoo.addons.iap.tools import iap_tools
 from odoo.exceptions import UserError
 from odoo.http import request
 from odoo.modules.module import get_resource_path
 from odoo.osv.expression import FALSE_DOMAIN
 from odoo.tools.translate import _
+from odoo.tools import pycompat
 
 logger = logging.getLogger(__name__)
 
@@ -35,6 +38,7 @@ DEFAULT_CDN_FILTERS = [
     "^/website/image/",
 ]
 
+DEFAULT_ENDPOINT = 'https://website.api.odoo.com'
 
 class Website(models.Model):
 
@@ -63,6 +67,7 @@ class Website(models.Model):
     default_lang_id = fields.Many2one('res.lang', string="Default Language", default=_default_language, required=True)
     auto_redirect_lang = fields.Boolean('Autoredirect Language', default=True, help="Should users be redirected to their browser's language")
     cookies_bar = fields.Boolean('Cookies Bar', help="Display a customizable cookies bar on your website.")
+    configurator_done = fields.Boolean(help='True if configurator has been completed or ignored')
 
     def _default_social_facebook(self):
         return self.env.ref('base.main_company').social_facebook
@@ -241,10 +246,138 @@ class Website(models.Model):
         attachments_to_unlink.unlink()
         return super(Website, self).unlink()
 
-    def create_and_redirect_to_theme(self):
+    def create_and_redirect_configurator(self):
         self._force()
-        action = self.env.ref('website.theme_install_kanban_action')
-        return action.read()[0]
+        action = self.env['ir.actions.actions']._for_xml_id('website.start_configurator_act_url')
+        return action
+
+    # ----------------------------------------------------------
+    # Configurator
+    # ----------------------------------------------------------
+    def _website_api_rpc(self, route, params):
+        IrConfigParameter = self.env['ir.config_parameter'].sudo()
+        website_api_endpoint = IrConfigParameter.get_param('website.website_api_endpoint', DEFAULT_ENDPOINT)
+        endpoint = website_api_endpoint + route
+        return iap_tools.iap_jsonrpc(endpoint, params=params)
+
+    @api.model
+    def configurator_init(self):
+        r = dict()
+        company_id = self.get_current_website().company_id
+        r['features'] = self.env['website.configurator.feature'].search_read([], ['name', 'description', 'type', 'icon', 'website_types_preselection'])
+        r['logo'] = False
+        if company_id.logo and company_id.logo != company_id._get_logo():
+            r['logo'] = company_id.logo.decode('utf-8')
+        r['industries'] = self._website_api_rpc('/api/website/1/configurator/industries', {'lang': self.env.user.lang})['industries']
+        return r
+
+    @api.model
+    def configurator_recommended_themes(self, industry_name, palette):
+        domain = [('name', '=like', 'theme%'), ('name', 'not in', ['theme_default', 'theme_common'])]
+        client_themes = request.env['ir.module.module'].search(domain).mapped('name')
+        params = {
+            'industry_name': industry_name,
+            'palette': palette,
+            'client_themes': client_themes,
+        }
+        return self._website_api_rpc('/api/website/1/configurator/recommended_themes', params)
+
+    @api.model
+    def configurator_skip(self):
+        self.configurator_done = True
+
+    @api.model
+    def configurator_apply(self, **kwargs):
+        def set_colors(selected_palette):
+            url = '/website/static/src/scss/options/user_values.scss'
+            custo = {'color-palettes-name': "'%s'" % selected_palette}
+            self.env['web_editor.assets'].make_scss_customization(url, custo)
+
+        def set_features(selected_features):
+            feature_ids = self.env['website.configurator.feature'].browse(selected_features)
+            pages_views = {}
+            modules = self.env['ir.module.module']
+            for feature_id in feature_ids:
+                if feature_id.type == 'app' and feature_id.module_id and feature_id.module_id.state != 'installed':
+                    modules += feature_id.module_id
+                if feature_id.type == 'page' and feature_id.page_view_id:
+                    result = self.env['website'].new_page(name=feature_id.name, add_menu=True, template=feature_id.page_view_id.key)
+                    pages_views[feature_id.iap_page_code] = result['view_id']
+
+            modules._button_immediate_function(lambda self: self.button_install())
+            return pages_views
+
+        def configure_page(page_code, snippet_list, pages_views):
+            if page_code == 'homepage':
+                page_view_id = website.homepage_id.view_id
+            else:
+                page_view_id = self.env['ir.ui.view'].browse(pages_views[page_code])
+            rendered_snippets = []
+            for snippet in snippet_list:
+                try:
+                    view_id = self.env['website'].with_context(website_id=website.id).viewref(snippet)
+                    if view_id:
+                        rendered_snippet = pycompat.to_text(view_id._render())
+                        rendered_snippets.append(rendered_snippet)
+                except ValueError as e:
+                    logger.warning(e)
+            page_view_id.save(value=''.join(rendered_snippets), xpath="(//div[hasclass('oe_structure')])[last()]")
+
+        def set_images(images):
+            for image in images:
+                try:
+                    response = requests.get(image['url'], timeout=3)
+                    response.raise_for_status()
+                    self.env['ir.attachment'].create({
+                        'name': image['name'],
+                        'website_id': website.id,
+                        'key': image['name'],
+                        'type': 'binary',
+                        'raw': response.content,
+                    })
+                except requests.HTTPError:
+                    logger.warning("Failed to download image '%s'", image['url'])
+
+        website = self.get_current_website()
+
+        url = self.env['ir.module.module'].search([('name', '=', kwargs['theme_name'])]).button_choose_theme()
+
+        website.configurator_done = True
+
+        # Enable tour
+        tour_asset_id = self.env['ir.asset']._get_related_assets([('name', '=', 'website.configurator_tour')])
+        tour_asset_id.sudo().write({'active': True})
+
+        # logo was generated as base64 url
+        logo = kwargs.get('logo')
+        if logo:
+            website.logo = logo.split(',', 1)[1]
+
+        # palette
+        palette = kwargs.get('selected_palette')
+        if palette:
+            set_colors(palette)
+
+        # modules
+        pages_views = set_features(kwargs.get('selected_features'))
+
+        # Load suggestion from iap for selected pages
+        params = {
+            'theme': kwargs.get('theme_name'),
+            'industry': kwargs.get('industry'),
+            'pages': list(pages_views.keys()),
+        }
+        custom_resources = self._website_api_rpc('/api/website/1/configurator/custom_resources', params)
+
+        # Update pages
+        pages = custom_resources.get('pages', {})
+        for page_code, snippet_list in pages.items():
+            configure_page(page_code, snippet_list, pages_views)
+
+        images = custom_resources.get('images', [])
+        set_images(images)
+
+        return url
 
     # ----------------------------------------------------------
     # Page Management

--- a/None
+++ b/addons/website/models/website_configurator_feature.py
@@ -0,0 +1,32 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
+
+
+class WebsiteConfiguratorFeature(models.Model):
+
+    _name = 'website.configurator.feature'
+    _description = 'Website Configurator Feature'
+    _order = 'sequence'
+
+    sequence = fields.Integer()
+    name = fields.Char(translate=True)
+    description = fields.Char(translate=True)
+    icon = fields.Char()
+    iap_page_code = fields.Char(help='Page code used to tell IAP website_service for which page a snippet list should be generated')
+    website_types_preselection = fields.Char(help='Comma-separated list of website type for which this feature should be pre-selected')
+    type = fields.Selection([('page', "Page"), ('app', "App")], compute='_compute_type')
+    page_view_id = fields.Many2one('ir.ui.view', ondelete='cascade')
+    module_id = fields.Many2one('ir.module.module', ondelete='cascade')
+
+    @api.depends('module_id', 'page_view_id')
+    def _compute_type(self):
+        for record in self:
+            record.type = 'page' if record.page_view_id else 'app'
+
+    @api.constrains('module_id', 'page_view_id')
+    def _check_module_xor_page_view(self):
+        if bool(self.module_id) == bool(self.page_view_id):
+            raise ValidationError(_("One and only one of the two fields 'page_view_id' and 'module_id' should be set"))
