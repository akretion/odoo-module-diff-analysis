PR: https://github.com/odoo/odoo/pull/

From: f5dfe4727c086c7577da2aef12c2d3548ba938a3
From: Yannick Tivisse
Date: 2019-05-29 08:09:15

Structural Changes: 3
Total Changes: 60

[IMP] api.py: Rename company_id/company_ids into company/companies

The goal is to be coherent with the user property.

Actually, company_id and company_ids on the environment are no fields.

Calling env.company_id returns a browse record, not an id.

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/ir_actions_report.py
+++ b/odoo/addons/base/models/ir_actions_report.py
@@ -202,7 +202,7 @@ class IrActionsReport(models.Model):
 
     @api.model
     def get_paperformat(self):
-        return self.paperformat_id or self.env.company_id.paperformat_id
+        return self.paperformat_id or self.env.company.paperformat_id
 
     @api.model
     def _build_wkhtmltopdf_args(
@@ -760,7 +760,7 @@ class IrActionsReport(models.Model):
         :param report_name: Name of the template to generate an action for
         """
         discard_logo_check = self.env.context.get('discard_logo_check')
-        if (self.env.user._is_admin()) and ((not self.env.company_id.external_report_layout_id) or (not discard_logo_check and not self.env.company_id.logo)) and config:
+        if (self.env.user._is_admin()) and ((not self.env.company.external_report_layout_id) or (not discard_logo_check and not self.env.company.logo)) and config:
             template = self.env.ref('base.view_company_report_form_with_print') if self.env.context.get('from_transient_model', False) else self.env.ref('base.view_company_report_form')
             return {
                 'name': _('Choose Your Document Layout'),
@@ -768,7 +768,7 @@ class IrActionsReport(models.Model):
                 'context': {'default_report_name': self.report_name, 'discard_logo_check': True},
                 'view_type': 'form',
                 'view_mode': 'form',
-                'res_id': self.env.company_id.id,
+                'res_id': self.env.company.id,
                 'res_model': 'res.company',
                 'views': [(template.id, 'form')],
                 'view_id': template.id,

--- a/odoo/addons/base/models/ir_attachment.py
+++ b/odoo/addons/base/models/ir_attachment.py
@@ -282,7 +282,7 @@ class IrAttachment(models.Model):
     res_field = fields.Char('Resource Field', readonly=True)
     res_id = fields.Integer('Resource ID', readonly=True, help="The record id this is attached to.")
     company_id = fields.Many2one('res.company', string='Company', change_default=True,
-                                 default=lambda self: self.env.company_id)
+                                 default=lambda self: self.env.company)
     type = fields.Selection([('url', 'URL'), ('binary', 'File')],
                             string='Type', required=True, default='binary', change_default=True,
                             help="You can either upload a file from your computer or copy/paste an internet link to your file.")

--- a/odoo/addons/base/models/ir_default.py
+++ b/odoo/addons/base/models/ir_default.py
@@ -57,7 +57,7 @@ class IrDefault(models.Model):
         if user_id is True:
             user_id = self.env.uid
         if company_id is True:
-            company_id = self.env.company_id.id
+            company_id = self.env.company.id
 
         # check consistency of model_name, field_name, and value
         try:
@@ -107,7 +107,7 @@ class IrDefault(models.Model):
         if user_id is True:
             user_id = self.env.uid
         if company_id is True:
-            company_id = self.env.company_id.id
+            company_id = self.env.company.id
 
         field = self.env['ir.model.fields']._get(model_name, field_name)
         default = self.search([

--- a/odoo/addons/base/models/ir_module.py
+++ b/odoo/addons/base/models/ir_module.py
@@ -446,7 +446,7 @@ class Module(models.Model):
         # Otherwise, the SUPERUSER won't be aware of that and will try to
         # configure the CoA on his own company, which makes no sense.
         if request:
-            request.allowed_company_ids = self.env.company_ids.ids
+            request.allowed_company_ids = self.env.companies.ids
         return self._button_immediate_function(type(self).button_install)
 
     @assert_log_admin_access

--- a/odoo/addons/base/models/ir_property.py
+++ b/odoo/addons/base/models/ir_property.py
@@ -179,7 +179,7 @@ class Property(models.Model):
 
     # only cache Property.get(res_id=False) as that's
     # sub-optimally.
-    COMPANY_KEY = "self.env.context.get('force_company') or self.env.company_id.id"
+    COMPANY_KEY = "self.env.context.get('force_company') or self.env.company.id"
     @ormcache(COMPANY_KEY, 'name', 'model')
     def _get_default_property(self, name, model):
         prop = self._get_property(name, model, res_id=False)
@@ -203,7 +203,7 @@ class Property(models.Model):
         res = self._cr.fetchone()
         if not res:
             return None
-        company_id = self._context.get('force_company') or self.env.company_id.id
+        company_id = self._context.get('force_company') or self.env.company.id
         return [('fields_id', '=', res[0]), ('company_id', 'in', [company_id, False])]
 
     @api.model
@@ -219,7 +219,7 @@ class Property(models.Model):
         field_id = self.env['ir.model.fields']._get(model, name).id
         company_id = (
             self._context.get('force_company')
-            or self.env.company_id.id
+            or self.env.company.id
         )
 
         if field.type == 'many2one':
@@ -299,7 +299,7 @@ class Property(models.Model):
         # retrieve the properties corresponding to the given record ids
         self._cr.execute("SELECT id FROM ir_model_fields WHERE name=%s AND model=%s", (name, model))
         field_id = self._cr.fetchone()[0]
-        company_id = self.env.context.get('force_company') or self.env.company_id.id
+        company_id = self.env.context.get('force_company') or self.env.company.id
         refs = {('%s,%s' % (model, id)): id for id in values}
         props = self.search([
             ('fields_id', '=', field_id),

--- a/odoo/addons/base/models/ir_qweb_fields.py
+++ b/odoo/addons/base/models/ir_qweb_fields.py
@@ -420,7 +420,7 @@ class MonetaryConverter(models.AbstractModel):
             if company_id:
                 company = self.env['res.company'].browse(company_id)
             else:
-                company = self.env.company_id
+                company = self.env.company
             value = options['from_currency']._convert(value, display_currency, company, date)
 
         lang = self.user_lang()

--- a/odoo/addons/base/models/ir_rule.py
+++ b/odoo/addons/base/models/ir_rule.py
@@ -51,7 +51,7 @@ class IrRule(models.Model):
         return {
             'user': self.env.user,
             'time': time,
-            'company_ids': self.env.company_ids.ids,
+            'company_ids': self.env.companies.ids,
         }
 
     @api.depends('groups')

--- a/odoo/addons/base/models/ir_sequence.py
+++ b/odoo/addons/base/models/ir_sequence.py
@@ -136,7 +136,7 @@ class IrSequence(models.Model):
                              help="Odoo will automatically adds some '0' on the left of the "
                                   "'Next Number' to get the required padding size.")
     company_id = fields.Many2one('res.company', string='Company',
-                                 default=lambda s: s.env.company_id)
+                                 default=lambda s: s.env.company)
     use_date_range = fields.Boolean(string='Use subsequences per date_range')
     date_range_ids = fields.One2many('ir.sequence.date_range', 'sequence_id', string='Subsequences')
 
@@ -277,7 +277,7 @@ class IrSequence(models.Model):
         self.check_access_rights('read')
         force_company = self._context.get('force_company')
         if not force_company:
-            force_company = self.env.company_id.id
+            force_company = self.env.company.id
         seq_ids = self.search([('code', '=', sequence_code), ('company_id', 'in', [force_company, False])], order='company_id')
         if not seq_ids:
             _logger.debug("No ir.sequence has been found for code '%s'. Please make sure a sequence is set for current company." % sequence_code)

--- a/odoo/addons/base/models/ir_ui_view.py
+++ b/odoo/addons/base/models/ir_ui_view.py
@@ -1353,7 +1353,7 @@ actual arch.
         qcontext = dict(
             env=self.env,
             user_id=self.env["res.users"].browse(self.env.user.id),
-            res_company=self.env.company_id.sudo(),
+            res_company=self.env.company.sudo(),
             keep_query=keep_query,
             request=request,  # might be unbound if we're not in an httprequest context
             debug=request.debug if request else False,

--- a/odoo/addons/base/models/res_bank.py
+++ b/odoo/addons/base/models/res_bank.py
@@ -86,7 +86,7 @@ class ResPartnerBank(models.Model):
     bank_bic = fields.Char(related='bank_id.bic', readonly=False)
     sequence = fields.Integer(default=10)
     currency_id = fields.Many2one('res.currency', string='Currency')
-    company_id = fields.Many2one('res.company', 'Company', default=lambda self: self.env.company_id, ondelete='cascade')
+    company_id = fields.Many2one('res.company', 'Company', default=lambda self: self.env.company, ondelete='cascade')
     qr_code_valid = fields.Boolean(string="Has all required arguments", compute="_validate_qr_code_arguments")
 
     _sql_constraints = [

--- a/odoo/addons/base/models/res_company.py
+++ b/odoo/addons/base/models/res_company.py
@@ -201,7 +201,7 @@ class Company(models.Model):
             - Deprecated
         """
         _logger.warning(_("The method '_company_default_get' on res.company is deprecated and shouldn't be used anymore"))
-        return self.env.company_id
+        return self.env.company
 
     # deprecated, use clear_caches() instead
     def cache_restart(self):
@@ -278,7 +278,7 @@ class Company(models.Model):
     def action_open_base_onboarding_company(self):
         """ Onboarding step for company basic information. """
         action = self.env.ref('base.action_open_base_onboarding_company').read()[0]
-        action['res_id'] = self.env.company_id.id
+        action['res_id'] = self.env.company.id
         return action
 
     def set_onboarding_step_done(self, step_name):

--- a/odoo/addons/base/models/res_currency.py
+++ b/odoo/addons/base/models/res_currency.py
@@ -62,7 +62,7 @@ class Currency(models.Model):
     @api.depends('rate_ids.rate')
     def _compute_current_rate(self):
         date = self._context.get('date') or fields.Date.today()
-        company = self.env['res.company'].browse(self._context.get('company_id')) or self.env.company_id
+        company = self.env['res.company'].browse(self._context.get('company_id')) or self.env.company
         # the subquery selects the last rate before 'date' for the given currency/company
         currency_rates = self._get_rates(company, date)
         for currency in self:
@@ -209,14 +209,14 @@ class Currency(models.Model):
     def _compute(self, from_currency, to_currency, from_amount, round=True):
         _logger.warning('The `_compute` method is deprecated. Use `_convert` instead')
         date = self._context.get('date') or fields.Date.today()
-        company = self.env['res.company'].browse(self._context.get('company_id')) or self.env.company_id
+        company = self.env['res.company'].browse(self._context.get('company_id')) or self.env.company
         return from_currency._convert(from_amount, to_currency, company, date)
 
     @api.multi
     def compute(self, from_amount, to_currency, round=True):
         _logger.warning('The `compute` method is deprecated. Use `_convert` instead')
         date = self._context.get('date') or fields.Date.today()
-        company = self.env['res.company'].browse(self._context.get('company_id')) or self.env.company_id
+        company = self.env['res.company'].browse(self._context.get('company_id')) or self.env.company
         return self._convert(from_amount, to_currency, company, date)
 
     def _select_companies_rates(self):
@@ -247,7 +247,7 @@ class CurrencyRate(models.Model):
     rate = fields.Float(digits=(12, 6), default=1.0, help='The rate of the currency to the currency of rate 1')
     currency_id = fields.Many2one('res.currency', string='Currency', readonly=True)
     company_id = fields.Many2one('res.company', string='Company',
-                                 default=lambda self: self.env.company_id)
+                                 default=lambda self: self.env.company)
 
     _sql_constraints = [
         ('unique_name_per_day', 'unique (name,currency_id,company_id)', 'Only one currency rate per day allowed!'),

--- a/odoo/addons/base/models/res_lang.py
+++ b/odoo/addons/base/models/res_lang.py
@@ -175,7 +175,7 @@ class Lang(models.Model):
         if default_value is None:
             IrDefault.set('res.partner', 'lang', lang_code)
             # set language of main company, created directly by db bootstrap SQL
-            partner = self.env.company_id.partner_id
+            partner = self.env.company.partner_id
             if not partner.lang:
                 partner.write({'lang': lang_code})
         return True

--- a/odoo/addons/base/models/res_partner.py
+++ b/odoo/addons/base/models/res_partner.py
@@ -48,7 +48,7 @@ class FormatAddressMixin(models.AbstractModel):
 
     def _fields_view_get_address(self, arch):
         # consider the country of the user, not the country of the partner we want to display
-        address_view_id = self.env.company_id.country_id.address_view_id
+        address_view_id = self.env.company.country_id.address_view_id
         if address_view_id and not self._context.get('no_address_format'):
             #render the partner address accordingly to address_view_id
             doc = etree.fromstring(arch)
@@ -139,7 +139,7 @@ class Partner(models.Model):
         return self.env['res.partner.category'].browse(self._context.get('category_id'))
 
     def _default_company(self):
-        return self.env.company_id
+        return self.env.company
 
     def _split_street_with_params(self, street_raw, street_format):
         return {'street': street_raw}

--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -243,10 +243,10 @@ class Users(models.Model):
     # Special behavior for this field: res.company.search() will only return the companies
     # available to the current user (should be the user's companies?), when the user_preference
     # context is set.
-    company_id = fields.Many2one('res.company', string='Default Company', required=True, default=lambda self: self.env.company_id.id,
+    company_id = fields.Many2one('res.company', string='Default Company', required=True, default=lambda self: self.env.company.id,
         help='The default company for this user.', context={'user_preference': True})
     company_ids = fields.Many2many('res.company', 'res_company_users_rel', 'user_id', 'cid',
-        string='Companies', default=lambda self: self.env.company_id.ids)
+        string='Companies', default=lambda self: self.env.company.ids)
 
     # overridden inherited fields to bypass access rights, in case you have
     # access to the user but not its corresponding partner
@@ -783,7 +783,7 @@ class Users(models.Model):
 
     @api.model
     def get_company_currency_id(self):
-        return self.env.company_id.currency_id.id
+        return self.env.company.currency_id.id
 
     def _crypt_context(self):
         """ Passlib CryptContext instance used to encrypt and verify

--- a/odoo/addons/base/tests/test_ir_default.py
+++ b/odoo/addons/base/tests/test_ir_default.py
@@ -9,7 +9,7 @@ class TestIrDefault(TransactionCase):
 
     def test_defaults(self):
         """ check the mechanism of user-defined defaults """
-        companyA = self.env.company_id
+        companyA = self.env.company
         companyB = companyA.create({'name': 'CompanyB'})
         user1 = self.env.user
         user2 = user1.create({'name': 'u2', 'login': 'u2'})
