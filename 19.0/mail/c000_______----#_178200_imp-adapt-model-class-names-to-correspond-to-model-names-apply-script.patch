PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:20 + add:0, change matches:
-    _inherit = "ir.attachment"
-    _inherit = "mail.message"
-    _inherit = "res.groups"
-    _inherit = "res.partner"
-    _inherit = "res.users"
-    _inherit = 'ir.actions.act_window.view'
-    _inherit = 'ir.attachment'
-    _inherit = 'ir.config_parameter'
-    _inherit = 'ir.model'
-    _inherit = 'ir.model.fields'
-    _inherit = "ir.qweb"
-    _inherit = 'ir.ui.menu'
-    _inherit = 'ir.ui.view'
-    _inherit = 'mail.alias.mixin.optional'
-    _inherit = 'mail.render.mixin'
-    _inherit = "bus.listener.mixin"
-    _inherit = 'mail.thread'
-    _inherit = 'res.company'
-    _inherit = 'res.config.settings'
-    _inherit = 'res.users.settings'

Total Changes: 223

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/mail/models/bus_listener_mixin.py
+++ b/addons/mail/models/bus_listener_mixin.py
@@ -5,7 +5,7 @@ from odoo.addons.mail.tools.discuss import Store
 
 
 class BusListenerMixin(models.AbstractModel):
-    _inherit = "bus.listener.mixin"
+    _inherit = ["bus.listener.mixin"]
 
     def _bus_send_store(
         self, /, *args, notification_type="mail.record/insert", subchannel=None, **kwargs

--- a/addons/mail/models/discuss/bus_listener_mixin.py
+++ b/addons/mail/models/discuss/bus_listener_mixin.py
@@ -7,7 +7,7 @@ from odoo.addons.mail.tools.discuss import Store
 
 
 class BusListenerMixin(models.AbstractModel):
-    _inherit = "bus.listener.mixin"
+    _inherit = ["bus.listener.mixin"]
 
     def _bus_send_transient_message(self, channel, content):
         """Posts a fake message in the given ``channel``, only visible for ``self`` listeners."""

--- a/addons/mail/models/discuss/discuss_channel.py
+++ b/addons/mail/models/discuss/discuss_channel.py
@@ -24,9 +24,8 @@ group_avatar = '''<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 530.06 53
 </svg>'''
 
 
-class Channel(models.Model):
+class DiscussChannel(models.Model):
     _description = 'Discussion Channel'
-    _name = 'discuss.channel'
     _mail_flat_thread = False
     _mail_post_access = 'read'
     _inherit = ["mail.thread", "bus.listener.mixin"]
@@ -288,7 +287,7 @@ class Channel(models.Model):
             vals.pop('channel_partner_ids', False)
 
         # Create channel and alias
-        channels = super(Channel, self.with_context(mail_create_bypass_create_check=self.env['discuss.channel.member']._bypass_create_check, mail_create_nolog=True, mail_create_nosubscribe=True)).create(vals_list)
+        channels = super(DiscussChannel, self.with_context(mail_create_bypass_create_check=self.env['discuss.channel.member']._bypass_create_check, mail_create_nolog=True, mail_create_nosubscribe=True)).create(vals_list)
         # pop the mail_create_bypass_create_check key to avoid leaking it outside of create)
         channels = channels.with_context(mail_create_bypass_create_check=None)
         channels._subscribe_users_automatically()
@@ -693,7 +692,7 @@ class Channel(models.Model):
         # The current client code might be setting the key to True on sending
         # message but it is only useful when targeting customers in chatter.
         # This value should simply be set to False in channels no matter what.
-        return super(Channel, self.with_context(mail_create_nosubscribe=True, mail_post_autofollow=False)).message_post(message_type=message_type, **kwargs)
+        return super(DiscussChannel, self.with_context(mail_create_nosubscribe=True, mail_post_autofollow=False)).message_post(message_type=message_type, **kwargs)
 
     def _message_post_after_hook(self, message, msg_vals):
         """

--- a/addons/mail/models/discuss/discuss_channel_member.py
+++ b/addons/mail/models/discuss/discuss_channel_member.py
@@ -16,8 +16,7 @@ _logger = logging.getLogger(__name__)
 SFU_MODE_THRESHOLD = 3
 
 
-class ChannelMember(models.Model):
-    _name = "discuss.channel.member"
+class DiscussChannelMember(models.Model):
     _inherit = ["bus.listener.mixin"]
     _description = "Channel Member"
     _rec_names_search = ["channel_id", "partner_id", "guest_id"]

--- a/addons/mail/models/discuss/discuss_channel_rtc_session.py
+++ b/addons/mail/models/discuss/discuss_channel_rtc_session.py
@@ -13,8 +13,7 @@ from odoo.addons.mail.tools.discuss import Store
 _logger = logging.getLogger(__name__)
 
 
-class MailRtcSession(models.Model):
-    _name = 'discuss.channel.rtc.session'
+class DiscussChannelRtcSession(models.Model):
     _inherit = ["bus.listener.mixin"]
     _description = 'Mail RTC session'
     _rec_name = 'channel_member_id'

--- a/addons/mail/models/discuss/discuss_gif_favorite.py
+++ b/addons/mail/models/discuss/discuss_gif_favorite.py
@@ -3,8 +3,7 @@
 from odoo import fields, models
 
 
-class GifFavorite(models.Model):
-    _name = "discuss.gif.favorite"
+class DiscussGifFavorite(models.Model):
     _description = "Save favorite GIF from Tenor API"
 
     tenor_gif_id = fields.Char("GIF id from Tenor", required=True)

--- a/addons/mail/models/discuss/discuss_voice_metadata.py
+++ b/addons/mail/models/discuss/discuss_voice_metadata.py
@@ -4,7 +4,6 @@ from odoo import fields, models
 
 
 class DiscussVoiceMetadata(models.Model):
-    _name = "discuss.voice.metadata"
     _description = "Metadata for voice attachments"
 
     attachment_id = fields.Many2one(

--- a/addons/mail/models/discuss/ir_attachment.py
+++ b/addons/mail/models/discuss/ir_attachment.py
@@ -5,7 +5,7 @@ from odoo.addons.mail.tools.discuss import Store
 
 
 class IrAttachment(models.Model):
-    _inherit = "ir.attachment"
+    _inherit = ["ir.attachment"]
 
     voice_ids = fields.One2many("discuss.voice.metadata", "attachment_id")
 

--- a/addons/mail/models/discuss/ir_binary.py
+++ b/addons/mail/models/discuss/ir_binary.py
@@ -4,7 +4,7 @@ from odoo import models
 
 
 class IrBinary(models.AbstractModel):
-    _inherit = "ir.binary"
+    _inherit = ["ir.binary"]
 
     def _find_record_check_access(self, record, access_token, field):
         if record._name in ["res.partner", "mail.guest"] and field == "avatar_128":

--- a/addons/mail/models/discuss/ir_websocket.py
+++ b/addons/mail/models/discuss/ir_websocket.py
@@ -8,7 +8,7 @@ from odoo.addons.mail.tools.discuss import Store
 
 
 class IrWebsocket(models.AbstractModel):
-    _inherit = "ir.websocket"
+    _inherit = ["ir.websocket"]
 
     def _get_missed_presences_identity_domains(self, presence_channels):
         identity_domain = super()._get_missed_presences_identity_domains(presence_channels)

--- a/addons/mail/models/discuss/mail_guest.py
+++ b/addons/mail/models/discuss/mail_guest.py
@@ -41,7 +41,6 @@ def add_guest_to_context(func):
 
 
 class MailGuest(models.Model):
-    _name = 'mail.guest'
     _description = "Guest"
     _inherit = ["avatar.mixin", "bus.listener.mixin"]
     _avatar_name_field = "name"

--- a/addons/mail/models/discuss/mail_message.py
+++ b/addons/mail/models/discuss/mail_message.py
@@ -5,7 +5,7 @@ from odoo.addons.mail.tools.discuss import Store
 
 
 class MailMessage(models.Model):
-    _inherit = "mail.message"
+    _inherit = ["mail.message"]
 
     def _extras_to_store(self, store: Store, format_reply):
         super()._extras_to_store(store, format_reply=format_reply)

--- a/addons/mail/models/discuss/res_groups.py
+++ b/addons/mail/models/discuss/res_groups.py
@@ -4,7 +4,7 @@ from odoo import models
 
 
 class ResGroups(models.Model):
-    _inherit = "res.groups"
+    _inherit = ["res.groups"]
 
     def write(self, vals):
         res = super().write(vals)

--- a/addons/mail/models/discuss/res_partner.py
+++ b/addons/mail/models/discuss/res_partner.py
@@ -7,7 +7,7 @@ from odoo.addons.mail.tools.discuss import Store
 
 
 class ResPartner(models.Model):
-    _inherit = "res.partner"
+    _inherit = ["res.partner"]
 
     channel_ids = fields.Many2many(
         "discuss.channel",

--- a/addons/mail/models/discuss/res_users.py
+++ b/addons/mail/models/discuss/res_users.py
@@ -5,7 +5,7 @@ from odoo.addons.base.models.res_users import is_selection_groups
 
 
 class ResUsers(models.Model):
-    _inherit = "res.users"
+    _inherit = ["res.users"]
 
     @api.model_create_multi
     def create(self, vals_list):

--- a/addons/mail/models/fetchmail.py
+++ b/addons/mail/models/fetchmail.py
@@ -63,7 +63,6 @@ for name in POP3_ATTRIBUTES:
 class FetchmailServer(models.Model):
     """Incoming POP/IMAP mail server account"""
 
-    _name = 'fetchmail.server'
     _description = 'Incoming Mail Server'
     _order = 'priority'
 

--- a/addons/mail/models/ir_action_act_window.py
+++ b/addons/mail/models/ir_action_act_window.py
@@ -2,8 +2,8 @@
 from odoo import fields, models
 
 
-class ActWindowView(models.Model):
-    _inherit = 'ir.actions.act_window.view'
+class IrActionsAct_WindowView(models.Model):
+    _inherit = ['ir.actions.act_window.view']
 
     view_mode = fields.Selection(selection_add=[
         ('activity', 'Activity')

--- a/addons/mail/models/ir_actions_server.py
+++ b/addons/mail/models/ir_actions_server.py
@@ -7,9 +7,8 @@ from odoo import _, api, fields, models
 from odoo.exceptions import ValidationError
 
 
-class ServerActions(models.Model):
+class IrActionsServer(models.Model):
     """ Add mail.thread related options in server actions. """
-    _name = 'ir.actions.server'
     _description = 'Server Action'
     _inherit = ['ir.actions.server']
 
@@ -89,7 +88,7 @@ class ServerActions(models.Model):
             mail_models = self.env['ir.model'].search([('is_mail_thread', '=', True), ('transient', '=', False)])
             for action in mail_thread_based:
                 action.available_model_ids = mail_models.ids
-        super(ServerActions, self - mail_thread_based)._compute_available_model_ids()
+        super(IrActionsServer, self - mail_thread_based)._compute_available_model_ids()
 
     @api.depends('model_id', 'state')
     def _compute_template_id(self):
@@ -290,7 +289,7 @@ class ServerActions(models.Model):
         key set to False in the context. This way all notification emails linked
         to the currently executed action will be set in the queue instead of
         sent directly. This will avoid possible break in transactions. """
-        eval_context = super(ServerActions, self)._get_eval_context(action=action)
+        eval_context = super()._get_eval_context(action=action)
         ctx = dict(eval_context['env'].context)
         ctx['mail_notify_force_send'] = False
         eval_context['env'].context = ctx

--- a/addons/mail/models/ir_attachment.py
+++ b/addons/mail/models/ir_attachment.py
@@ -10,7 +10,7 @@ from odoo.addons.mail.tools.discuss import Store
 
 
 class IrAttachment(models.Model):
-    _inherit = 'ir.attachment'
+    _inherit = ['ir.attachment']
 
     def _check_attachments_access(self, attachment_tokens):
         """This method relies on access rules/rights and therefore it should not be called from a sudo env."""

--- a/addons/mail/models/ir_config_parameter.py
+++ b/addons/mail/models/ir_config_parameter.py
@@ -4,7 +4,7 @@
 from odoo import api, models
 
 
-class IrConfigParameter(models.Model):
+class IrConfig_Parameter(models.Model):
     # Override of config parameter to specifically handle the template
     # rendering group (de)activation through ICP.
 
@@ -75,7 +75,7 @@ class IrConfigParameter(models.Model):
     #     sfu_server_key': rtc server usage and configuration;
     #   * 'discuss.tenor_api_key', 'discuss.tenor_gif_limit' and 'discuss.
     #     tenor_content_filter' used for gif fetch service;
-    _inherit = 'ir.config_parameter'
+    _inherit = ['ir.config_parameter']
 
     @api.model
     def set_param(self, key, value):

--- a/addons/mail/models/ir_cron.py
+++ b/addons/mail/models/ir_cron.py
@@ -4,7 +4,7 @@ from odoo import models, SUPERUSER_ID
 
 
 class IrCron(models.AbstractModel):
-    _inherit = 'ir.cron'
+    _inherit = ['ir.cron']
 
     def _notify_admin(self, message):
         """ Send a notification to the admin users. """

--- a/addons/mail/models/ir_http.py
+++ b/addons/mail/models/ir_http.py
@@ -7,7 +7,7 @@ from odoo.addons.mail.tools.discuss import Store
 
 
 class IrHttp(models.AbstractModel):
-    _inherit = 'ir.http'
+    _inherit = ['ir.http']
 
     def session_info(self):
         """Override to add the current user data (partner or guest) if applicable."""

--- a/addons/mail/models/ir_mail_server.py
+++ b/addons/mail/models/ir_mail_server.py
@@ -4,8 +4,7 @@
 from odoo import api, fields, models
 
 
-class IrMailServer(models.Model):
-    _name = 'ir.mail_server'
+class IrMail_Server(models.Model):
     _inherit = ['ir.mail_server']
 
     mail_template_ids = fields.One2many(

--- a/addons/mail/models/ir_model.py
+++ b/addons/mail/models/ir_model.py
@@ -6,7 +6,7 @@ from odoo.exceptions import UserError
 
 
 class IrModel(models.Model):
-    _inherit = 'ir.model'
+    _inherit = ['ir.model']
     _order = 'is_mail_thread DESC, name ASC'
 
     is_mail_thread = fields.Boolean(

--- a/addons/mail/models/ir_model_fields.py
+++ b/addons/mail/models/ir_model_fields.py
@@ -5,8 +5,8 @@ from odoo import fields, models
 from odoo.tools import groupby
 
 
-class IrModelField(models.Model):
-    _inherit = 'ir.model.fields'
+class IrModelFields(models.Model):
+    _inherit = ['ir.model.fields']
 
     tracking = fields.Integer(
         string="Enable Ordered Tracking",
@@ -17,7 +17,7 @@ class IrModelField(models.Model):
         """ Tracking value can be either a boolean enabling tracking mechanism
         on field, either an integer giving the sequence. Default sequence is
         set to 100. """
-        vals = super(IrModelField, self)._reflect_field_params(field, model_id)
+        vals = super()._reflect_field_params(field, model_id)
         tracking = getattr(field, 'tracking', None)
         if tracking is True:
             tracking = 100
@@ -27,7 +27,7 @@ class IrModelField(models.Model):
         return vals
 
     def _instanciate_attrs(self, field_data):
-        attrs = super(IrModelField, self)._instanciate_attrs(field_data)
+        attrs = super()._instanciate_attrs(field_data)
         if attrs and field_data.get('tracking'):
             attrs['tracking'] = field_data['tracking']
         return attrs

--- a/addons/mail/models/ir_qweb.py
+++ b/addons/mail/models/ir_qweb.py
@@ -10,7 +10,7 @@ class IrQweb(models.AbstractModel):
     is allowed for the given model.
     """
 
-    _inherit = "ir.qweb"
+    _inherit = ["ir.qweb"]
 
     allowed_directives = (
         "out",

--- a/addons/mail/models/ir_ui_menu.py
+++ b/addons/mail/models/ir_ui_menu.py
@@ -7,7 +7,7 @@ from odoo.exceptions import AccessError
 
 
 class IrUiMenu(models.Model):
-    _inherit = 'ir.ui.menu'
+    _inherit = ['ir.ui.menu']
 
     @api.model
     def _get_best_backend_root_menu_id_for_model(self, res_model):

--- a/addons/mail/models/ir_ui_view.py
+++ b/addons/mail/models/ir_ui_view.py
@@ -2,8 +2,8 @@
 from odoo import fields, models
 
 
-class View(models.Model):
-    _inherit = 'ir.ui.view'
+class IrUiView(models.Model):
+    _inherit = ['ir.ui.view']
 
     type = fields.Selection(selection_add=[('activity', 'Activity')])
 

--- a/addons/mail/models/mail_activity.py
+++ b/addons/mail/models/mail_activity.py
@@ -23,7 +23,6 @@ class MailActivity(models.Model):
     that can be used in kanban view to display a status. Once done activities
     are unlinked and a message is posted. This message has a new activity_type_id
     field that indicates the activity linked to the message. """
-    _name = 'mail.activity'
     _description = 'Activity'
     _order = 'date_deadline ASC, id ASC'
     _rec_name = 'summary'

--- a/addons/mail/models/mail_activity_mixin.py
+++ b/addons/mail/models/mail_activity_mixin.py
@@ -36,7 +36,6 @@ class MailActivityMixin(models.AbstractModel):
        no automated activities will be generated, updated or unlinked, allowing
        to save computation and avoid generating unwanted activities;
     """
-    _name = 'mail.activity.mixin'
     _description = 'Activity Mixin'
 
     def _default_activity_type(self):

--- a/addons/mail/models/mail_activity_plan.py
+++ b/addons/mail/models/mail_activity_plan.py
@@ -5,7 +5,6 @@ from odoo import _, api, fields, models
 
 
 class MailActivityPlan(models.Model):
-    _name = 'mail.activity.plan'
     _description = 'Activity Plan'
     _order = 'id DESC'
 

--- a/addons/mail/models/mail_activity_plan_template.py
+++ b/addons/mail/models/mail_activity_plan_template.py
@@ -8,7 +8,6 @@ from odoo.exceptions import ValidationError
 
 
 class MailActivityPlanTemplate(models.Model):
-    _name = 'mail.activity.plan.template'
     _order = 'sequence,id'
     _description = 'Activity plan template'
     _rec_name = 'summary'

--- a/addons/mail/models/mail_activity_type.py
+++ b/addons/mail/models/mail_activity_type.py
@@ -6,12 +6,12 @@ from dateutil.relativedelta import relativedelta
 from odoo import api, fields, models, _
 from odoo.exceptions import UserError
 
+
 class MailActivityType(models.Model):
     """ Activity Types are used to categorize activities. Each type is a different
     kind of activity e.g. call, mail, meeting. An activity can be generic i.e.
     available for all models using activities; or specific to a model in which
     case res_model field should be used. """
-    _name = 'mail.activity.type'
     _description = 'Activity Type'
     _rec_name = 'name'
     _order = 'sequence, id'

--- a/addons/mail/models/mail_alias.py
+++ b/addons/mail/models/mail_alias.py
@@ -16,11 +16,11 @@ atext = r"[a-zA-Z0-9!#$%&'*+\-/=?^_`{|}~]"
 dot_atom_text = re.compile(r"^%s+(\.%s+)*$" % (atext, atext))
 
 
-class Alias(models.Model):
+class MailAlias(models.Model):
     """A Mail Alias is a mapping of an email address with a given Odoo Document
        model. It is used by Odoo's mail gateway when processing incoming emails
        sent to the system. If the recipient address (To) of the message matches
-       a Mail Alias, the message will be either processed following the rules
+       a Mail MailAlias, the message will be either processed following the rules
        of that alias. If the message is a reply it will be attached to the
        existing discussion on the corresponding record, otherwise a new
        record of the corresponding model will be created.
@@ -29,7 +29,6 @@ class Alias(models.Model):
        on the company's mail server, so that as soon as a new mail.alias is
        created, it becomes immediately usable and Odoo will accept email for it.
      """
-    _name = 'mail.alias'
     _description = "Email Aliases"
     _rec_name = 'alias_name'
     _rec_names_search = ['alias_name', 'alias_domain']

--- a/addons/mail/models/mail_alias_domain.py
+++ b/addons/mail/models/mail_alias_domain.py
@@ -5,14 +5,13 @@ from odoo import api, exceptions, fields, models, _
 from odoo.addons.mail.models.mail_alias import dot_atom_text
 
 
-class AliasDomain(models.Model):
+class MailAliasDomain(models.Model):
     """ Model alias domains, now company-specific. Alias domains are email
     domains used to receive emails through catchall and bounce aliases, as
     well as using mail.alias records to redirect email replies.
 
     This replaces ``mail.alias.domain`` configuration parameter use until v16.
     """
-    _name = 'mail.alias.domain'
     _description = "Email Domain"
     _order = 'sequence ASC, id ASC'
 

--- a/addons/mail/models/mail_alias_mixin.py
+++ b/addons/mail/models/mail_alias_mixin.py
@@ -8,11 +8,10 @@ from odoo import fields, models
 _logger = logging.getLogger(__name__)
 
 
-class AliasMixin(models.AbstractModel):
+class MailAliasMixin(models.AbstractModel):
     """ A mixin for models that inherits mail.alias to have a one-to-one relation
     between the model and its alias. """
-    _name = 'mail.alias.mixin'
-    _inherit = 'mail.alias.mixin.optional'
+    _inherit = ['mail.alias.mixin.optional']
     _inherits = {'mail.alias': 'alias_id'}
     _description = 'Email Aliases Mixin'
 

--- a/addons/mail/models/mail_alias_mixin_optional.py
+++ b/addons/mail/models/mail_alias_mixin_optional.py
@@ -8,13 +8,12 @@ from odoo import api, fields, models
 _logger = logging.getLogger(__name__)
 
 
-class AliasMixinOptional(models.AbstractModel):
+class MailAliasMixinOptional(models.AbstractModel):
     """ A mixin for models that handles underlying 'mail.alias' records to use
     the mail gateway. Field is not mandatory and its creation is done dynamically
     based on given 'alias_name', allowing to gradually populate the alias table
     without having void aliases as when used with an inherits-like implementation.
     """
-    _name = 'mail.alias.mixin.optional'
     _description = 'Email Aliases Mixin (light)'
     ALIAS_WRITEABLE_FIELDS = ['alias_domain_id', 'alias_name', 'alias_contact', 'alias_defaults', 'alias_bounced_content']
 

--- a/addons/mail/models/mail_blacklist.py
+++ b/addons/mail/models/mail_blacklist.py
@@ -5,9 +5,8 @@ from odoo import api, fields, models, tools, _
 from odoo.exceptions import UserError
 
 
-class MailBlackList(models.Model):
+class MailBlacklist(models.Model):
     """ Model of blacklisted email addresses to stop sending emails."""
-    _name = 'mail.blacklist'
     _inherit = ['mail.thread']
     _description = 'Mail Blacklist'
     _rec_name = 'email'
@@ -46,13 +45,13 @@ class MailBlackList(models.Model):
             to_create = [v for v in new_values if v['email'] not in bl_entries]
 
         # TODO DBE Fixme : reorder ids according to incoming ids.
-        results = super(MailBlackList, self).create(to_create)
+        results = super().create(to_create)
         return self.env['mail.blacklist'].browse(bl_entries.values()) | results
 
     def write(self, values):
         if 'email' in values:
             values['email'] = tools.email_normalize(values['email'])
-        return super(MailBlackList, self).write(values)
+        return super().write(values)
 
     def _search(self, domain, offset=0, limit=None, order=None):
         """ Override _search in order to grep search on email field and make it

--- a/addons/mail/models/mail_canned_response.py
+++ b/addons/mail/models/mail_canned_response.py
@@ -9,7 +9,6 @@ class MailCannedResponse(models.Model):
     Canned Response: content that will automatically replace the shortcut of your choosing. This content can still be adapted before sending your message.
     """
 
-    _name = "mail.canned.response"
     _description = "Canned Response"
     _order = "id desc"
     _rec_name = "source"

--- a/addons/mail/models/mail_composer_mixin.py
+++ b/addons/mail/models/mail_composer_mixin.py
@@ -16,8 +16,7 @@ class MailComposerMixin(models.AbstractModel):
     It is meant to evolve in a near future with upcoming support of qweb and fine
     grain control of rendering access.
     """
-    _name = 'mail.composer.mixin'
-    _inherit = 'mail.render.mixin'
+    _inherit = ['mail.render.mixin']
     _description = 'Mail Composer Mixin'
 
     # Content

--- a/addons/mail/models/mail_followers.py
+++ b/addons/mail/models/mail_followers.py
@@ -8,7 +8,7 @@ from odoo import api, fields, models, Command
 from odoo.addons.mail.tools.discuss import Store
 
 
-class Followers(models.Model):
+class MailFollowers(models.Model):
     """ mail_followers holds the data related to the follow mechanism inside
     Odoo. Partners can choose to follow documents (records) of any kind
     that inherits from mail.thread. Following documents allow to receive
@@ -17,7 +17,6 @@ class Followers(models.Model):
     :param: res_model: model of the followed objects
     :param: res_id: ID of resource (may be 0 for every objects)
     """
-    _name = 'mail.followers'
     _rec_name = 'partner_id'
     _log_access = False
     _description = 'Document Followers'
@@ -51,21 +50,21 @@ class Followers(models.Model):
 
     @api.model_create_multi
     def create(self, vals_list):
-        res = super(Followers, self).create(vals_list)
+        res = super().create(vals_list)
         res._invalidate_documents(vals_list)
         return res
 
     def write(self, vals):
         if 'res_model' in vals or 'res_id' in vals:
             self._invalidate_documents()
-        res = super(Followers, self).write(vals)
+        res = super().write(vals)
         if any(x in vals for x in ['res_model', 'res_id', 'partner_id']):
             self._invalidate_documents()
         return res
 
     def unlink(self):
         self._invalidate_documents()
-        return super(Followers, self).unlink()
+        return super().unlink()
 
     _sql_constraints = [
         ('mail_followers_res_partner_res_model_id_uniq', 'unique(res_model,res_id,partner_id)', 'Error, a partner cannot follow twice the same object.'),
@@ -334,7 +333,7 @@ class Followers(models.Model):
 
     def _get_subscription_data(self, doc_data, pids, include_pshare=False, include_active=False):
         """ Private method allowing to fetch follower data from several documents of a given model.
-        Followers can be filtered given partner IDs and channel IDs.
+        MailFollowers can be filtered given partner IDs and channel IDs.
 
         :param doc_data: list of pair (res_model, res_ids) that are the documents from which we
           want to have subscription data;

--- a/addons/mail/models/mail_gateway_allowed.py
+++ b/addons/mail/models/mail_gateway_allowed.py
@@ -19,7 +19,6 @@ class MailGatewayAllowed(models.Model):
     """
 
     _description = 'Mail Gateway Allowed'
-    _name = 'mail.gateway.allowed'
 
     email = fields.Char('Email Address', required=True)
     email_normalized = fields.Char(

--- a/addons/mail/models/mail_ice_server.py
+++ b/addons/mail/models/mail_ice_server.py
@@ -7,7 +7,6 @@ import requests
 
 
 class MailIceServer(models.Model):
-    _name = 'mail.ice.server'
     _description = 'ICE server'
 
     server_type = fields.Selection([('stun', 'stun:'), ('turn', 'turn:')], string='Type', required=True, default='stun')

--- a/addons/mail/models/mail_link_preview.py
+++ b/addons/mail/models/mail_link_preview.py
@@ -12,9 +12,8 @@ from odoo.addons.mail.tools.discuss import Store
 from odoo.addons.mail.tools.link_preview import get_link_preview_from_url
 
 
-class LinkPreview(models.Model):
-    _name = 'mail.link.preview'
-    _inherit = "bus.listener.mixin"
+class MailLinkPreview(models.Model):
+    _inherit = ["bus.listener.mixin"]
     _description = "Store link preview data"
 
     message_id = fields.Many2one('mail.message', string='Message', index=True, ondelete='cascade')

--- a/addons/mail/models/mail_mail.py
+++ b/addons/mail/models/mail_mail.py
@@ -25,7 +25,6 @@ _UNFOLLOW_REGEX = re.compile(r'<span id="mail_unfollow".*?<\/span>', re.DOTALL)
 class MailMail(models.Model):
     """ Model holding RFC2822 email messages to send. This model also provides
         facilities to queue and send new email messages.  """
-    _name = 'mail.mail'
     _description = 'Outgoing Mails'
     _inherits = {'mail.message': 'mail_message_id'}
     _order = 'id desc'

--- a/addons/mail/models/mail_message.py
+++ b/addons/mail/models/mail_message.py
@@ -18,7 +18,7 @@ _logger = logging.getLogger(__name__)
 _image_dataurl = re.compile(r'(data:image/[a-z]+?);base64,([a-z0-9+/\n]{3,}=*)\n*([\'"])(?: data-filename="([^"]*)")?', re.I)
 
 
-class Message(models.Model):
+class MailMessage(models.Model):
     """ Message model (from notifications to user input).
 
     Note:: State management / Error codes / Failure types summary
@@ -65,7 +65,6 @@ class Message(models.Model):
     See ``mailing.trace`` model in mass_mailing application for mailing trace
     information.
     """
-    _name = 'mail.message'
     _inherit = ["bus.listener.mixin"]
     _description = 'Message'
     _order = 'id desc'
@@ -73,7 +72,7 @@ class Message(models.Model):
 
     @api.model
     def default_get(self, fields):
-        res = super(Message, self).default_get(fields)
+        res = super().default_get(fields)
         missing_author = 'author_id' in fields and 'author_id' not in res
         missing_email_from = 'email_from' in fields and 'email_from' not in res
         if missing_author or missing_email_from:
@@ -634,7 +633,7 @@ class Message(models.Model):
             # delegate creation of tracking after the create as sudo to avoid access rights issues
             tracking_values_list.append(values.pop('tracking_value_ids', False))
 
-        messages = super(Message, self).create(values_list)
+        messages = super().create(values_list)
 
         # link back attachments to records, to filter out attachments linked to
         # the same records as the message (considered as ok if message is ok)
@@ -692,7 +691,7 @@ class Message(models.Model):
         """ Override to explicitely call check_access(), that is not called
             by the ORM. It instead directly fetches ir.rules and apply them. """
         self.check_access('read')
-        return super(Message, self).read(fields=fields, load=load)
+        return super().read(fields=fields, load=load)
 
     def fetch(self, field_names):
         # This freaky hack is aimed at reading data without the overhead of
@@ -709,7 +708,7 @@ class Message(models.Model):
             raise AccessError(_("Only administrators can modify 'model' and 'res_id' fields."))
         if record_changed or 'message_type' in vals:
             self._invalidate_documents()
-        res = super(Message, self).write(vals)
+        res = super().write(vals)
         if vals.get('attachment_ids'):
             for mail in self:
                 mail.attachment_ids.check(mode='read')
@@ -736,13 +735,13 @@ class Message(models.Model):
         # Notify front-end of messages deletion for partners having a user
         for partner, messages in messages_by_partner.items():
             partner._bus_send("mail.message/delete", {"message_ids": messages.ids})
-        return super(Message, self).unlink()
+        return super().unlink()
 
     def export_data(self, fields_to_export):
         if not self.env.is_admin():
             raise AccessError(_("Only administrators are allowed to export mail message"))
 
-        return super(Message, self).export_data(fields_to_export)
+        return super().export_data(fields_to_export)
 
     # ------------------------------------------------------
     # ACTIONS

--- a/addons/mail/models/mail_message_reaction.py
+++ b/addons/mail/models/mail_message_reaction.py
@@ -6,7 +6,6 @@ from odoo.addons.mail.tools.discuss import Store
 
 
 class MailMessageReaction(models.Model):
-    _name = 'mail.message.reaction'
     _description = 'Message Reaction'
     _order = 'id desc'
     _log_access = False

--- a/addons/mail/models/mail_message_schedule.py
+++ b/addons/mail/models/mail_message_schedule.py
@@ -19,7 +19,6 @@ class MailMessageSchedule(models.Model):
     exists on the <mail.mail> but it does not allow us to delay the sending
     of the <bus.bus> notifications.
     """
-    _name = 'mail.message.schedule'
     _description = 'Scheduled Messages'
     _order = 'scheduled_datetime DESC, id DESC'
     _rec_name = 'mail_message_id'

--- a/addons/mail/models/mail_message_subtype.py
+++ b/addons/mail/models/mail_message_subtype.py
@@ -8,7 +8,6 @@ class MailMessageSubtype(models.Model):
     """ Class holding subtype definition for messages. Subtypes allow to tune
         the follower subscription, allowing only some subtypes to be pushed
         on the Wall. """
-    _name = 'mail.message.subtype'
     _description = 'Message subtypes'
     _order = 'sequence, id'
 

--- a/addons/mail/models/mail_message_translation.py
+++ b/addons/mail/models/mail_message_translation.py
@@ -5,8 +5,7 @@ from dateutil.relativedelta import relativedelta
 from odoo import api, fields, models
 
 
-class MessageTranslation(models.Model):
-    _name = "mail.message.translation"
+class MailMessageTranslation(models.Model):
     _description = "Message Translation"
 
     message_id = fields.Many2one("mail.message", "Message", required=True, ondelete="cascade")

--- a/addons/mail/models/mail_notification.py
+++ b/addons/mail/models/mail_notification.py
@@ -9,7 +9,6 @@ from odoo.addons.mail.tools.discuss import Store
 
 
 class MailNotification(models.Model):
-    _name = 'mail.notification'
     _table = 'mail_notification'
     _rec_name = 'res_partner_id'
     _log_access = False

--- a/addons/mail/models/mail_push.py
+++ b/addons/mail/models/mail_push.py
@@ -12,7 +12,6 @@ _logger = logging.getLogger(__name__)
 
 
 class MailPush(models.Model):
-    _name = 'mail.push'
     _description = "Push Notifications"
 
     mail_push_device_id = fields.Many2one('mail.push.device', string='devices', required=True, ondelete="cascade")

--- a/addons/mail/models/mail_push_device.py
+++ b/addons/mail/models/mail_push_device.py
@@ -11,7 +11,6 @@ _logger = logger.getLogger(__name__)
 
 
 class MailPushDevice(models.Model):
-    _name = 'mail.push.device'
     _description = "Push Notification Device"
 
     partner_id = fields.Many2one(

--- a/addons/mail/models/mail_render_mixin.py
+++ b/addons/mail/models/mail_render_mixin.py
@@ -39,8 +39,8 @@ def format_time(env, time, tz=False, time_format='medium', lang_code=False):
     except babel.core.UnknownLocaleError:
         return time
 
+
 class MailRenderMixin(models.AbstractModel):
-    _name = 'mail.render.mixin'
     _description = 'Mail Render Mixin'
 
     # If True, we trust the value on the model for rendering

--- a/addons/mail/models/mail_scheduled_message.py
+++ b/addons/mail/models/mail_scheduled_message.py
@@ -13,7 +13,7 @@ import logging
 _logger = logging.getLogger(__name__)
 
 
-class ScheduledMessage(models.Model):
+class MailScheduledMessage(models.Model):
     """ Scheduled message model (holds post values generated by the composer to delay the
     posting of the message). Different from mail.message.schedule that posts the message but
     delays the notification process.
@@ -27,7 +27,6 @@ class ScheduledMessage(models.Model):
     have static notification parameters, but some will become dynamic when adding mass_mail support
     such as 'email_from' and 'force_email_lang'.
     """
-    _name = 'mail.scheduled.message'
     _description = 'Scheduled Message'
 
     # content
@@ -76,7 +75,7 @@ class ScheduledMessage(models.Model):
             self._check(vals)
 
         # clean context to prevent usage of default_model and default_res_id
-        scheduled_messages = super(ScheduledMessage, self.with_context(clean_context(self.env.context))).create(vals_list)
+        scheduled_messages = super(MailScheduledMessage, self.with_context(clean_context(self.env.context))).create(vals_list)
         # transfer attachments from composer to scheduled messages
         for scheduled_message in scheduled_messages:
             if attachments := scheduled_message.attachment_ids:

--- a/addons/mail/models/mail_template.py
+++ b/addons/mail/models/mail_template.py
@@ -16,7 +16,6 @@ _logger = logging.getLogger(__name__)
 
 class MailTemplate(models.Model):
     "Templates for sending email"
-    _name = "mail.template"
     _inherit = ['mail.render.mixin', 'template.reset.mixin']
     _description = 'Email Templates'
     _order = 'user_id,name,id'

--- a/addons/mail/models/mail_thread.py
+++ b/addons/mail/models/mail_thread.py
@@ -84,7 +84,6 @@ class MailThread(models.AbstractModel):
      - ``mail_notify_force_send``: if less than 50 email notifications to send,
        send them directly instead of using the queue; True by default
     '''
-    _name = 'mail.thread'
     _description = 'Email Thread'
     _mail_flat_thread = True  # flatten the discussion history
     _mail_post_access = 'write'  # access required on the document to post on it

--- a/addons/mail/models/mail_thread_blacklist.py
+++ b/addons/mail/models/mail_thread_blacklist.py
@@ -6,7 +6,7 @@ from odoo.exceptions import AccessError, UserError
 from odoo.tools import SQL
 
 
-class MailBlackListMixin(models.AbstractModel):
+class MailThreadBlacklist(models.AbstractModel):
     """ Mixin that is inherited by all model with opt out. This mixin stores a normalized
     email based on primary_email field.
 
@@ -26,7 +26,6 @@ class MailBlackListMixin(models.AbstractModel):
 
     Mail Thread capabilities are required for this mixin. """
 
-    _name = 'mail.thread.blacklist'
     _inherit = ['mail.thread']
     _description = 'Mail Blacklist mixin'
     _primary_email = 'email'
@@ -101,14 +100,14 @@ class MailBlackListMixin(models.AbstractModel):
     def _message_receive_bounce(self, email, partner):
         """ Override of mail.thread generic method. Purpose is to increment the
         bounce counter of the record. """
-        super(MailBlackListMixin, self)._message_receive_bounce(email, partner)
+        super()._message_receive_bounce(email, partner)
         for record in self:
             record.message_bounce = record.message_bounce + 1
 
     def _message_reset_bounce(self, email):
         """ Override of mail.thread generic method. Purpose is to reset the
         bounce counter of the record. """
-        super(MailBlackListMixin, self)._message_reset_bounce(email)
+        super()._message_reset_bounce(email)
         self.write({'message_bounce': 0})
 
     def mail_action_blacklist_remove(self):

--- a/addons/mail/models/mail_thread_cc.py
+++ b/addons/mail/models/mail_thread_cc.py
@@ -4,9 +4,8 @@
 from odoo import _, api, fields, models, tools
 
 
-class MailCCMixin(models.AbstractModel):
-    _name = 'mail.thread.cc'
-    _inherit = 'mail.thread'
+class MailThreadCc(models.AbstractModel):
+    _inherit = ['mail.thread']
     _description = 'Email CC management'
 
     email_cc = fields.Char('Email cc')
@@ -28,7 +27,7 @@ class MailCCMixin(models.AbstractModel):
             'email_cc': ", ".join(self._mail_cc_sanitized_raw_dict(msg_dict.get('cc')).values()),
         }
         cc_values.update(custom_values)
-        return super(MailCCMixin, self).message_new(msg_dict, cc_values)
+        return super().message_new(msg_dict, cc_values)
 
     def message_update(self, msg_dict, update_vals=None):
         '''Adds cc email to self.email_cc while trying to keep email as raw as possible but unique'''
@@ -41,7 +40,7 @@ class MailCCMixin(models.AbstractModel):
             new_cc.update(old_cc)
             cc_values['email_cc'] = ", ".join(new_cc.values())
         cc_values.update(update_vals)
-        return super(MailCCMixin, self).message_update(msg_dict, cc_values)
+        return super().message_update(msg_dict, cc_values)
 
     def _message_get_suggested_recipients(self):
         recipients = super()._message_get_suggested_recipients()

--- a/addons/mail/models/mail_thread_main_attachment.py
+++ b/addons/mail/models/mail_thread_main_attachment.py
@@ -5,11 +5,10 @@ from odoo import fields, models
 from odoo.addons.mail.tools.discuss import Store
 
 
-class MailMainAttachmentMixin(models.AbstractModel):
+class MailThreadMainAttachment(models.AbstractModel):
     """ Mixin that adds main attachment support to the MailThread class. """
 
-    _name = 'mail.thread.main.attachment'
-    _inherit = 'mail.thread'
+    _inherit = ['mail.thread']
     _description = 'Mail Main Attachment management'
 
     message_main_attachment_id = fields.Many2one(string="Main Attachment", comodel_name='ir.attachment', copy=False)

--- a/addons/mail/models/mail_tracking_duration_mixin.py
+++ b/addons/mail/models/mail_tracking_duration_mixin.py
@@ -4,7 +4,6 @@ from odoo import _, fields, models
 
 
 class MailTrackingDurationMixin(models.AbstractModel):
-    _name = "mail.tracking.duration.mixin"
     _description = "Mixin to compute the time a record has spent in each value a many2one field can take"
 
     duration_tracking = fields.Json(

--- a/addons/mail/models/mail_tracking_value.py
+++ b/addons/mail/models/mail_tracking_value.py
@@ -6,8 +6,7 @@ from datetime import datetime
 from odoo import api, fields, models
 
 
-class MailTracking(models.Model):
-    _name = 'mail.tracking.value'
+class MailTrackingValue(models.Model):
     _description = 'Mail Tracking Value'
     _rec_name = 'field_id'
     _order = 'id DESC'

--- a/addons/mail/models/models.py
+++ b/addons/mail/models/models.py
@@ -13,8 +13,11 @@ import logging
 
 _logger = logging.getLogger(__name__)
 
+
 class BaseModel(models.AbstractModel):
-    _inherit = 'base'
+    _name = "base"
+
+    _inherit = ['base']
 
     def _valid_field_parameter(self, field, name):
         # allow tracking on abstract models; see also 'mail.thread'

--- a/addons/mail/models/res_company.py
+++ b/addons/mail/models/res_company.py
@@ -4,9 +4,8 @@
 from odoo import api, models, fields, tools
 
 
-class Company(models.Model):
-    _name = 'res.company'
-    _inherit = 'res.company'
+class ResCompany(models.Model):
+    _inherit = ['res.company']
 
     def _default_alias_domain_id(self):
         return self.env['mail.alias.domain'].search([], limit=1)

--- a/addons/mail/models/res_config_settings.py
+++ b/addons/mail/models/res_config_settings.py
@@ -10,7 +10,7 @@ from odoo.exceptions import UserError
 class ResConfigSettings(models.TransientModel):
     """ Inherit the base settings to add a counter of failed email + configure
     the alias domain. """
-    _inherit = 'res.config.settings'
+    _inherit = ['res.config.settings']
 
     external_email_server_default = fields.Boolean(
         "Use Custom Email Servers",

--- a/addons/mail/models/res_partner.py
+++ b/addons/mail/models/res_partner.py
@@ -8,10 +8,10 @@ from odoo import _, api, fields, models, tools
 from odoo.osv import expression
 from odoo.addons.mail.tools.discuss import Store
 
-class Partner(models.Model):
+
+class ResPartner(models.Model):
     """ Update partner to add a field about notification preferences. Add a generic opt-out field that can be used
        to restrict usage of automatic email templates. """
-    _name = "res.partner"
     _inherit = ['res.partner', 'mail.activity.mixin', 'mail.thread.blacklist']
     _mail_flat_thread = False
 

--- a/addons/mail/models/res_users.py
+++ b/addons/mail/models/res_users.py
@@ -7,14 +7,13 @@ from odoo.tools import email_normalize
 from odoo.addons.mail.tools.discuss import Store
 
 
-class Users(models.Model):
+class ResUsers(models.Model):
     """ Update of res.users class
         - add a preference about sending emails about notifications
         - make a new user follow itself
         - add a welcome message
         - add suggestion preference
     """
-    _name = 'res.users'
     _inherit = ['res.users']
 
     notification_type = fields.Selection([
@@ -73,7 +72,7 @@ class Users(models.Model):
     @api.model_create_multi
     def create(self, vals_list):
 
-        users = super(Users, self).create(vals_list)
+        users = super().create(vals_list)
 
         # log a portal status change (manual tracking)
         log_portal_access = not self._context.get('mail_create_nolog') and not self._context.get('mail_notrack')
@@ -105,7 +104,7 @@ class Users(models.Model):
         if 'notification_type' in vals:
             user_notification_type_modified = self.filtered(lambda user: user.notification_type != vals['notification_type'])
 
-        write_res = super(Users, self).write(vals)
+        write_res = super().write(vals)
 
         # log a portal status change (manual tracking)
         if log_portal_access:
@@ -156,7 +155,7 @@ class Users(models.Model):
     def action_archive(self):
         activities_to_delete = self.env['mail.activity'].search([('user_id', 'in', self.ids)])
         activities_to_delete.unlink()
-        return super(Users, self).action_archive()
+        return super().action_archive()
 
     def _notify_security_setting_update(self, subject, content, mail_values=None, **kwargs):
         """ This method is meant to be called whenever a sensitive update is done on the user's account.
@@ -245,7 +244,7 @@ class Users(models.Model):
         else:
             users_to_blacklist = []
 
-        super(Users, self)._deactivate_portal_user(**post)
+        super()._deactivate_portal_user(**post)
 
         for user, user_email in users_to_blacklist:
             self.env['mail.blacklist']._add(

--- a/addons/mail/models/res_users_settings.py
+++ b/addons/mail/models/res_users_settings.py
@@ -4,7 +4,7 @@ from odoo import api, fields, models
 
 
 class ResUsersSettings(models.Model):
-    _inherit = 'res.users.settings'
+    _inherit = ['res.users.settings']
 
     is_discuss_sidebar_category_channel_open = fields.Boolean(string="Is discuss sidebar category channel open?", default=True)
     is_discuss_sidebar_category_chat_open = fields.Boolean(string="Is discuss sidebar category chat open?", default=True)

--- a/addons/mail/models/res_users_settings_volumes.py
+++ b/addons/mail/models/res_users_settings_volumes.py
@@ -6,7 +6,6 @@ from odoo import api, fields, models
 
 class ResUsersSettingsVolumes(models.Model):
     """ Represents the volume of the sound that the user of user_setting_id will receive from partner_id. """
-    _name = 'res.users.settings.volumes'
     _description = 'User Settings Volumes'
 
     user_setting_id = fields.Many2one('res.users.settings', required=True, ondelete='cascade', index=True)

--- a/addons/mail/models/template_reset_mixin.py
+++ b/addons/mail/models/template_reset_mixin.py
@@ -14,7 +14,6 @@ from odoo.tools.translate import TranslationImporter, get_po_paths
 
 
 class TemplateResetMixin(models.AbstractModel):
-    _name = "template.reset.mixin"
     _description = 'Template Reset Mixin'
 
     template_fs = fields.Char(

--- a/addons/mail/models/update.py
+++ b/addons/mail/models/update.py
@@ -15,8 +15,7 @@ from odoo.tools import config
 _logger = logging.getLogger(__name__)
 
 
-class PublisherWarrantyContract(AbstractModel):
-    _name = "publisher_warranty.contract"
+class Publisher_WarrantyContract(AbstractModel):
     _description = 'Publisher Warranty Contract'
 
     @api.model
