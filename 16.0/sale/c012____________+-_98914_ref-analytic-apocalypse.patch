PR: https://github.com/odoo/odoo/pull/98914

From: 7e3403068fc3fbc40182b3cfeb80e97a9300e8ff
From: gawa-odoo
Date: 2022-09-20 10:36:01

Structural Changes: 3
Total Changes: 105

[REF] *: Analytic Apocalypse

The goal of this commit is to get rid of the analytic tags as they were confusing, serving tag purposes as well as distribution on analytic accounts.

Everywhere analytic tags were used as a distribution have been replaced with a new widget that will dispatch distribution on analytic accounts. If there was an analytic account field next to the tags, it has been included in the distribution.

Analytic tags that were used simply as information tags have been removed.

To fill the new widget, there are now 2 kind of rules that will help fill and prefill it.
The first are applicability: previous groups have been removed, and have by replaced by plans. Each account is required to have a plan. These plans define when they are available in the widget: a default applicability per plan and applicability lines that can specify rules following the context of the widget.

The second one are distribution models, that will replace previous default rules but follow the same principles. The accounts (and so the plans) that will be given by the distribution model can override the applicability rules from before.

closes odoo/odoo#98914

Related: odoo/upgrade#3885
Related: odoo/enterprise#30743
Signed-off-by: William Andr√© (wan) <wan@odoo.com>
Co-authored-by: Habib (ayh) <ayh@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale/models/account_move_line.py
+++ b/addons/sale/models/account_move_line.py
@@ -21,26 +21,26 @@ class AccountMoveLine(models.Model):
         super(AccountMoveLine, self)._copy_data_extend_business_fields(values)
         values['sale_line_ids'] = [(6, None, self.sale_line_ids.ids)]
 
-    def _prepare_analytic_line(self):
-        """ Note: This method is called only on the move.line that having an analytic account, and
+    def _prepare_analytic_lines(self):
+        """ Note: This method is called only on the move.line that having an analytic distribution, and
             so that should create analytic entries.
         """
-        values_list = super(AccountMoveLine, self)._prepare_analytic_line()
+        values_list = super(AccountMoveLine, self)._prepare_analytic_lines()
 
         # filter the move lines that can be reinvoiced: a cost (negative amount) analytic line without SO line but with a product can be reinvoiced
         move_to_reinvoice = self.env['account.move.line']
-        for index, move_line in enumerate(self):
-            values = values_list[index]
-            if 'so_line' not in values:
-                if move_line._sale_can_be_reinvoice():
-                    move_to_reinvoice |= move_line
+        if len(values_list) > 0:
+            for index, move_line in enumerate(self):
+                values = values_list[index]
+                if 'so_line' not in values:
+                    if move_line._sale_can_be_reinvoice():
+                        move_to_reinvoice |= move_line
 
         # insert the sale line in the create values of the analytic entries
         if move_to_reinvoice:
             map_sale_line_per_move = move_to_reinvoice._sale_create_reinvoice_sale_line()
-
             for values in values_list:
-                sale_line = map_sale_line_per_move.get(values.get('move_id'))
+                sale_line = map_sale_line_per_move.get(values.get('move_line_id'))
                 if sale_line:
                     values['so_line'] = sale_line.id
 
@@ -133,23 +133,20 @@ class AccountMoveLine(models.Model):
         """ Get the mapping of move.line with the sale.order record on which its analytic entries should be reinvoiced
             :return a dict where key is the move line id, and value is sale.order record (or None).
         """
-        analytic_accounts = self.mapped('analytic_account_id')
-
-        # link the analytic account with its open SO by creating a map: {AA.id: sale.order}, if we find some analytic accounts
         mapping = {}
-        if analytic_accounts:  # first, search for the open sales order
-            sale_orders = self.env['sale.order'].search([('analytic_account_id', 'in', analytic_accounts.ids), ('state', '=', 'sale')], order='create_date DESC')
-            for sale_order in sale_orders:
-                mapping[sale_order.analytic_account_id.id] = sale_order
-
-            analytic_accounts_without_open_order = analytic_accounts.filtered(lambda account: not mapping.get(account.id))
-            if analytic_accounts_without_open_order:  # then, fill the blank with not open sales orders
-                sale_orders = self.env['sale.order'].search([('analytic_account_id', 'in', analytic_accounts_without_open_order.ids)], order='create_date DESC')
-            for sale_order in sale_orders:
-                mapping[sale_order.analytic_account_id.id] = sale_order
+        for move_line in self:
+            if move_line.analytic_distribution:
+                distribution_json = move_line.analytic_distribution
+                sale_order = self.env['sale.order'].search([('analytic_account_id', 'in', list(int(account_id) for account_id in distribution_json.keys())),
+                                                            ('state', '=', 'sale')], order='create_date ASC', limit=1)
+                if sale_order:
+                    mapping[move_line.id] = sale_order
+                else:
+                    sale_order = self.env['sale.order'].search([('analytic_account_id', 'in', list(int(account_id) for account_id in distribution_json.keys()))], order='create_date ASC', limit=1)
+                    mapping[move_line.id] = sale_order
 
         # map of AAL index with the SO on which it needs to be reinvoiced. Maybe be None if no SO found
-        return {move_line.id: mapping.get(move_line.analytic_account_id.id) for move_line in self}
+        return mapping
 
     def _sale_prepare_sale_line_values(self, order, price):
         """ Generate the sale.line creation value from the current move line """

--- a/addons/sale/models/sale_order.py
+++ b/addons/sale/models/sale_order.py
@@ -250,7 +250,6 @@ class SaleOrder(models.Model):
     analytic_account_id = fields.Many2one(
         comodel_name='account.analytic.account',
         string="Analytic Account",
-        compute='_compute_analytic_account_id', store=True, readonly=False,
         copy=False, check_company=True,  # Unrequired company
         states=READONLY_FIELD_STATES,
         domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
@@ -554,18 +553,6 @@ class SaleOrder(models.Model):
             else:
                 record.tax_country_id = record.company_id.account_fiscal_country_id
 
-    @api.depends('partner_id', 'date_order')
-    def _compute_analytic_account_id(self):
-        for order in self:
-            if not order.analytic_account_id:
-                default_analytic_account = order.env['account.analytic.default'].sudo().account_get(
-                    partner_id=order.partner_id.id,
-                    user_id=order.env.uid,
-                    date=order.date_order,
-                    company_id=order.company_id.id,
-                )
-                order.analytic_account_id = default_analytic_account.analytic_id
-
     @api.depends('company_id', 'partner_id', 'amount_total')
     def _compute_partner_credit_warning(self):
         for order in self:
@@ -1391,10 +1378,17 @@ class SaleOrder(models.Model):
         name = self.name
         if prefix:
             name = prefix + ": " + self.name
+        plan = self.env['account.analytic.plan'].search(['|', ('company_id', '=', self.company_id.id), ('company_id', '=', False)], limit=1)
+        if not plan:
+            plan = self.env['account.analytic.plan'].create({
+                'name': 'Default',
+                'company_id': self.company_id.id
+            })
         return {
             'name': name,
             'code': self.client_order_ref,
             'company_id': self.company_id.id,
+            'plan_id': plan.id,
             'partner_id': self.partner_id.id
         }
 

--- a/addons/sale/models/sale_order_line.py
+++ b/addons/sale/models/sale_order_line.py
@@ -13,6 +13,7 @@ from odoo.tools import float_is_zero, float_compare, float_round
 
 class SaleOrderLine(models.Model):
     _name = 'sale.order.line'
+    _inherit = 'analytic.mixin'
     _description = "Sales Order Line"
     _rec_names_search = ['name', 'order_id.name']
     _order = 'order_id, sequence, id'
@@ -217,11 +218,6 @@ class SaleOrderLine(models.Model):
         digits='Product Unit of Measure',
         store=True)
 
-    analytic_tag_ids = fields.Many2many(
-        comodel_name='account.analytic.tag',
-        string="Analytic Tags",
-        compute='_compute_analytic_tag_ids', store=True, readonly=False,
-        domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
     analytic_line_ids = fields.One2many(
         comodel_name='account.analytic.line', inverse_name='so_line',
         string="Analytic lines")
@@ -879,18 +875,19 @@ class SaleOrderLine(models.Model):
 
             line.untaxed_amount_to_invoice = amount_to_invoice
 
-    @api.depends('product_id', 'order_id.date_order', 'order_id.partner_id')
-    def _compute_analytic_tag_ids(self):
+    @api.depends('order_id.partner_id', 'product_id')
+    def _compute_analytic_distribution_stored_char(self):
         for line in self:
             if not line.display_type and line.state == 'draft':
-                default_analytic_account = line.env['account.analytic.default'].sudo().account_get(
-                    product_id=line.product_id.id,
-                    partner_id=line.order_id.partner_id.id,
-                    user_id=self.env.uid,
-                    date=line.order_id.date_order,
-                    company_id=line.company_id.id,
-                )
-                line.analytic_tag_ids = default_analytic_account.analytic_tag_ids
+                distribution = line.env['account.analytic.distribution.model']._get_distributionjson({
+                    "product_id": line.product_id.id,
+                    "product_categ_id": line.product_id.categ_id.id,
+                    "partner_id": line.order_id.partner_id.id,
+                    "partner_category_id": line.order_id.partner_id.category_id.ids,
+                    "company_id": line.company_id.id,
+                })
+                line.analytic_distribution_stored_char = distribution or line.analytic_distribution_stored_char
+                line._compute_analytic_distribution()
 
     @api.depends('product_id', 'state', 'qty_invoiced', 'qty_delivered')
     def _compute_product_updatable(self):
@@ -1000,7 +997,7 @@ class SaleOrderLine(models.Model):
     def _get_protected_fields(self):
         return [
             'product_id', 'name', 'price_unit', 'product_uom', 'product_uom_qty',
-            'tax_id', 'analytic_tag_ids'
+            'tax_id', 'analytic_distribution_stored_char'
         ]
 
     def _update_line_quantity(self, values):
@@ -1077,12 +1074,17 @@ class SaleOrderLine(models.Model):
             'discount': self.discount,
             'price_unit': self.price_unit,
             'tax_ids': [Command.set(self.tax_id.ids)],
-            'analytic_tag_ids': [Command.set(self.analytic_tag_ids.ids)],
+            'analytic_distribution': self.analytic_distribution,
             'sale_line_ids': [Command.link(self.id)],
             'is_downpayment': self.is_downpayment,
         }
-        if self.order_id.analytic_account_id:
-            res['analytic_account_id'] = self.order_id.analytic_account_id.id
+        analytic_account_id = self.order_id.analytic_account_id.id
+        if analytic_account_id:
+            res['analytic_distribution'] = res['analytic_distribution'] or {}
+            if self.analytic_distribution:
+                res['analytic_distribution'][analytic_account_id] = self.analytic_distribution.get(analytic_account_id, 0) + 100
+            else:
+                res['analytic_distribution'][analytic_account_id] = 100
         if optional_values:
             res.update(optional_values)
         if self.display_type:
