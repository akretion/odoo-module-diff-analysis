PR: https://github.com/odoo/odoo/pull/40473

From: e85faf398659a5beb0b1570a06af64dcf78dc1c8
From: Pierre Masereel
Date: 2019-11-22 12:34:43

Structural Changes: 2
Total Changes: 38

[IMP] base: add unique constraint on ir.property

There is no unique constraint on the properties to avoid having two
properties for the same field, company and res_id.

Having two properties for the same field, company and res_id, leads to
inconsistencies through the code, as reading a company-dependent field
nondeterministically returns one of the available property value.

So now, before creating a property, we have to check that there is not
already a value for the field, company and res_id and write or create
depending on if it is already exists.

The properties of specific records already satisfy the constraint thanks
to the implementation of company-dependent fields that use the method
`set_multi`.  We added a method `set_default` to set generic properties,
and its implementation does the right thing.  It also simplifies the
code to set such properties, by the way.

closes odoo/odoo#40473

Signed-off-by: Xavier Morel (xmo) <xmo@odoo.com>
Co-authored-by: Raphael Collet <rco@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/ir_property.py
+++ b/odoo/addons/base/models/ir_property.py
@@ -38,7 +38,7 @@ class Property(models.Model):
     name = fields.Char(index=True)
     res_id = fields.Char(string='Resource', index=True, help="If not set, acts as a default value for new resources",)
     company_id = fields.Many2one('res.company', string='Company', index=True)
-    fields_id = fields.Many2one('ir.model.fields', string='Field', ondelete='cascade', required=True, index=True)
+    fields_id = fields.Many2one('ir.model.fields', string='Field', ondelete='cascade', required=True)
     value_float = fields.Float()
     value_integer = fields.Integer()
     value_text = fields.Text()  # will contain (char, text)
@@ -60,6 +60,14 @@ class Property(models.Model):
                             default='many2one',
                             index=True)
 
+    def init(self):
+        # Ensure there is at most one active variant for each combination.
+        query = """
+            CREATE UNIQUE INDEX IF NOT EXISTS ir_property_unique_index
+            ON %s (fields_id, COALESCE(company_id, 0), COALESCE(res_id, ''))
+        """
+        self.env.cr.execute(query % self._table)
+
     def _update_values(self, values):
         if 'value' not in values:
             return values
@@ -167,6 +175,34 @@ class Property(models.Model):
             return fields.Date.to_string(fields.Datetime.from_string(self.value_datetime))
         return False
 
+    @api.model
+    def set_default(self, name, model, value, company=False):
+        """ Set the given field's generic value for the given company.
+
+        :param name: the field's name
+        :param model: the field's model name
+        :param value: the field's value
+        :param company: the company (record or id)
+        """
+        field_id = self.env['ir.model.fields']._get(model, name).id
+        company_id = int(company) if company else False
+        prop = self.search([
+            ('fields_id', '=', field_id),
+            ('company_id', '=', company_id),
+            ('res_id', '=', False),
+        ])
+        if prop:
+            prop.write({'value': value})
+        else:
+            self.create({
+                'fields_id': field_id,
+                'company_id': company_id,
+                'res_id': False,
+                'name': name,
+                'value': value,
+                'type': self.env[model]._fields[name].type,
+            })
+
     @api.model
     def get(self, name, model, res_id=False):
         if not res_id:
