PR: https://github.com/odoo/odoo/pull/124409

From: 4da8c6ebca024b31278a946aef55cc37f0210b33
From: William Henrotin
Date: 2023-09-20 10:02:05

Breaking data model changes score: 4, change matches:
-    display_clear_serial = fields.Boolean(compute='_compute_display_clear_serial')
-    move_ids_without_package = fields.One2many(
+    move_ids_without_package = fields.Many2many(

Total Changes: 113

[IMP] stock,mrp: detailed operation without RPCs

This commit replaces the opening of the stock moves detailed operation
wizard by the one2Many record preview. This means creating a move in a
picking is still done via a new line but the edition is done via the
`fa-list` button that open the record in the web client. The goal is to
reduce the RPCs call as much as possible. The stock move lines data are
stored in the stock move record until the picking save.

Additionally, this commit change a bit the immediate transfers flows.
The stock move show only initial demand (`product_uom_qty`) but the
column wording is still "Done". In the detailed operation view, the
stock move line `qty_done` is displayed as "Reserved".
At picking validation, the user is expected to enter the same quantity
in `product_uom_qty` and `quantity_done`. If `product_uom_qty` is equals
to 0, the done quantity is used as actual transfer quantity. If
`product_uom_qty` is different than 0 but small than the done quantity,
an error is raised.

Task: 3256447
Part-of: odoo/odoo#124409

================================= pseudo patch: =================================

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -132,7 +132,7 @@ class StockMove(models.Model):
         'Propagate cancel and split', default=True,
         help='If checked, when this move is cancelled, cancel the linked move too')
     delay_alert_date = fields.Datetime('Delay Alert Date', help='Process at this date to be on time', compute="_compute_delay_alert_date", store=True)
-    picking_type_id = fields.Many2one('stock.picking.type', 'Operation Type', compute='_compute_picking_type_id', store=True, check_company=True)
+    picking_type_id = fields.Many2one('stock.picking.type', 'Operation Type', compute='_compute_picking_type_id', store=True, readonly=False, check_company=True)
     is_inventory = fields.Boolean('Inventory')
     move_line_ids = fields.One2many('stock.move.line', 'move_id')
     move_line_nosuggest_ids = fields.One2many('stock.move.line', 'move_id', domain=['|', ('reserved_qty', '=', 0.0), ('qty_done', '!=', 0.0)])
@@ -173,7 +173,6 @@ class StockMove(models.Model):
     picking_type_entire_packs = fields.Boolean(related='picking_type_id.show_entire_packs', readonly=True)
     display_assign_serial = fields.Boolean(compute='_compute_display_assign_serial')
     display_import_lot = fields.Boolean(compute='_compute_display_assign_serial')
-    display_clear_serial = fields.Boolean(compute='_compute_display_clear_serial')
     next_serial = fields.Char('First SN')
     next_serial_count = fields.Integer('Number of SN')
     orderpoint_id = fields.Many2one('stock.warehouse.orderpoint', 'Original Reordering Rule', index=True)
@@ -185,6 +184,9 @@ class StockMove(models.Model):
     product_packaging_id = fields.Many2one('product.packaging', 'Packaging', domain="[('product_id', '=', product_id)]", check_company=True)
     from_immediate_transfer = fields.Boolean(related="picking_id.immediate_transfer")
     show_reserved = fields.Boolean(compute='_compute_show_reserved')
+    show_quant = fields.Boolean("Show Quant", compute="_compute_show_info")
+    show_lots_m2o = fields.Boolean("Show lot_id", compute="_compute_show_info")
+    show_lots_text = fields.Boolean("Show lot_name", compute="_compute_show_info")
 
     @api.depends('product_id')
     def _compute_product_uom(self):
@@ -197,16 +199,11 @@ class StockMove(models.Model):
             move.display_import_lot = (
                 move.has_tracking != 'none' and
                 move.picking_type_id.use_create_lots and
-                not move.origin_returned_move_id.id
+                not move.origin_returned_move_id.id and
+                move.state not in ('done', 'cancel')
             )
             move.display_assign_serial = move.has_tracking == 'serial' and move.display_import_lot
 
-    @api.depends('display_assign_serial', 'move_line_ids', 'move_line_nosuggest_ids')
-    def _compute_display_clear_serial(self):
-        self.display_clear_serial = False
-        for move in self:
-            move.display_clear_serial = move.display_assign_serial and move._get_move_lines()
-
     @api.depends('picking_id.priority')
     def _compute_priority(self):
         for move in self:
@@ -255,15 +252,16 @@ class StockMove(models.Model):
         for move in self:
             move.show_reserved_availability = not move.location_id.usage == 'supplier'
 
-    @api.depends('state', 'picking_id')
+    @api.depends('state', 'picking_id.is_locked', 'picking_id.immediate_transfer')
     def _compute_is_initial_demand_editable(self):
+        self.is_initial_demand_editable = False
         for move in self:
-            if not move.picking_id.immediate_transfer and move.state == 'draft':
+            if move.state == 'done' and move.picking_id.is_locked:
                 move.is_initial_demand_editable = True
-            elif not move.picking_id.is_locked and move.state != 'done' and move.picking_id:
+            elif move.state not in ('done', 'cancel') and move.picking_id.immediate_transfer:
+                move.is_initial_demand_editable = True
+            elif move.state == 'draft':
                 move.is_initial_demand_editable = True
-            else:
-                move.is_initial_demand_editable = False
 
     @api.depends('state', 'picking_id', 'product_id')
     def _compute_is_quantity_done_editable(self):
@@ -536,7 +534,7 @@ Please change the quantity done or the rounding precision of your unit of measur
                 else:
                     move_update.date_deadline = new_deadline
 
-    @api.depends('move_line_ids', 'move_line_ids.lot_id', 'move_line_ids.qty_done')
+    @api.depends('move_line_ids.lot_id', 'move_line_ids.qty_done')
     def _compute_lot_ids(self):
         domain_nosuggest = [('move_id', 'in', self.ids), ('lot_id', '!=', False), '|', ('qty_done', '!=', 0.0), ('reserved_qty', '=', 0.0)]
         domain_suggest = [('move_id', 'in', self.ids), ('lot_id', '!=', False), ('qty_done', '!=', 0.0)]
@@ -588,7 +586,7 @@ Please change the quantity done or the rounding precision of your unit of measur
                     move_line.qty_done = 1
             move.write({'move_line_ids': move_lines_commands})
 
-    @api.depends('picking_type_id', 'date', 'priority')
+    @api.depends('picking_type_id', 'date', 'priority', 'state')
     def _compute_reservation_date(self):
         for move in self:
             if move.picking_type_id.reservation_method == 'by_date' and move.state in ['draft', 'confirmed', 'waiting', 'partially_available']:
@@ -597,6 +595,20 @@ Please change the quantity done or the rounding precision of your unit of measur
                     days = move.picking_type_id.reservation_days_before_priority
                 move.reservation_date = fields.Date.to_date(move.date) - timedelta(days=days)
 
+    @api.depends('has_tracking', 'picking_type_id.use_create_lots', 'picking_type_id.use_existing_lots', 'state', 'origin_returned_move_id', 'product_id.detailed_type', 'picking_code')
+    def _compute_show_info(self):
+        for move in self:
+            move.show_quant = move.picking_code != 'incoming'\
+                           and move.product_id.detailed_type == 'product'
+            move.show_lots_m2o = not move.show_quant\
+                and move.has_tracking != 'none'\
+                and (move.picking_type_id.use_existing_lots or move.state == 'done' or move.origin_returned_move_id.id)
+            move.show_lots_text = move.has_tracking != 'none'\
+                and move.picking_type_id.use_create_lots\
+                and not move.picking_type_id.use_existing_lots \
+                and move.state != 'done' \
+                and not move.origin_returned_move_id.id
+
     @api.constrains('product_uom')
     def _check_uom(self):
         moves_error = self.filtered(lambda move: move.product_id.uom_id.category_id != move.product_uom.category_id)
@@ -643,7 +655,7 @@ Please change the quantity done or the rounding precision of your unit of measur
     @api.model_create_multi
     def create(self, vals_list):
         for vals in vals_list:
-            if vals.get('quantity_done') and 'lot_ids' in vals:
+            if (vals.get('quantity_done') or vals.get('move_line_ids')) and 'lot_ids' in vals:
                 vals.pop('lot_ids')
             picking_id = self.env['stock.picking'].browse(vals.get('picking_id'))
             if picking_id and picking_id.immediate_transfer and not vals.get('qty_done'):
@@ -787,14 +799,11 @@ Please change the quantity done or the rounding precision of your unit of measur
         # reserved move lines. We do this by displaying `move_line_nosuggest_ids`. We use
         # different views to display one field or another so that the webclient doesn't have to
         # fetch both.
-        if self.show_reserved:
-            view = self.env.ref('stock.view_stock_move_operations')
+        if self.from_immediate_transfer:
+            view = self.env.ref('stock.view_stock_move_operations_immediate')
         else:
-            view = self.env.ref('stock.view_stock_move_nosuggest_operations')
+            view = self.env.ref('stock.view_stock_move_operations')
 
-        if self.product_id.tracking == "serial" and self.state == "assigned":
-            self.next_serial = self.env['stock.lot']._get_next_serial(self.company_id, self.product_id)
-        quant_mode = self.picking_type_id.code != 'incoming' and self.product_id.detailed_type == 'product'
         return {
             'name': _('Detailed Operations'),
             'type': 'ir.actions.act_window',
@@ -806,13 +815,6 @@ Please change the quantity done or the rounding precision of your unit of measur
             'res_id': self.id,
             'context': dict(
                 self.env.context,
-                show_owner=not quant_mode,
-                show_quant=quant_mode,
-                show_lots_m2o=not quant_mode and self.has_tracking != 'none' and (self.picking_type_id.use_existing_lots or self.state == 'done' or self.origin_returned_move_id.id),  # able to create lots, whatever the value of ` use_create_lots`.
-                show_lots_text=self.has_tracking != 'none' and self.picking_type_id.use_create_lots and not self.picking_type_id.use_existing_lots and self.state != 'done' and not self.origin_returned_move_id.id,
-                show_destination_location=not quant_mode,
-                show_package=not quant_mode,
-                show_reserved_quantity=self.state != 'done' and quant_mode
             ),
         }
 
@@ -1820,7 +1822,7 @@ Please change the quantity done or the rounding precision of your unit of measur
             new_push_moves._action_confirm()
 
     def _action_done(self, cancel_backorder=False):
-        moves = self.filtered(lambda move: move.state == 'draft')._action_confirm()  # MRP allows scrapping draft moves
+        moves = self.filtered(lambda move: move.state == 'draft' or move.state == 'assigned' and move.from_immediate_transfer)._action_confirm()  # MRP allows scrapping draft moves
         moves = (self | moves).exists().filtered(lambda x: x.state not in ('done', 'cancel'))
         moves_ids_todo = OrderedSet()
 
@@ -1931,7 +1933,8 @@ Please change the quantity done or the rounding precision of your unit of measur
             # we restrict the split of a draft move because if not confirmed yet, it may be replaced by several other moves in
             # case of phantom bom (with mrp module). And we don't want to deal with this complexity by copying the product that will explode.
             raise UserError(_('You cannot split a draft move. It needs to be confirmed first.'))
-        if float_is_zero(qty, precision_rounding=self.product_id.uom_id.rounding) or self.product_qty <= qty:
+        # exclude immediate transfer in case we want to add a move line in a wave picking
+        if float_is_zero(qty, precision_rounding=self.product_id.uom_id.rounding) or self.product_qty <= qty and not self.from_immediate_transfer:
             return []
 
         decimal_precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
@@ -1957,7 +1960,7 @@ Please change the quantity done or the rounding precision of your unit of measur
         # Update the original `product_qty` of the move. Use the general product's decimal
         # precision and not the move's UOM to handle case where the `quantity_done` is not
         # compatible with the move's UOM.
-        new_product_qty = self.product_id.uom_id._compute_quantity(self.product_qty - qty, self.product_uom, round=False)
+        new_product_qty = self.product_id.uom_id._compute_quantity(max(0, self.product_qty - qty), self.product_uom, round=False)
         new_product_qty = float_round(new_product_qty, precision_digits=self.env['decimal.precision'].precision_get('Product Unit of Measure'))
         self.with_context(do_not_unreserve=True).write({'product_uom_qty': new_product_qty})
         return new_move_vals

--- a/addons/stock/models/stock_move_line.py
+++ b/addons/stock/models/stock_move_line.py
@@ -140,8 +140,7 @@ class StockMoveLine(models.Model):
                 if (record.move_id.product_qty - record.move_id.quantity_done):
                     record.qty_done = min(record.quant_id.available_quantity, max(record.move_id.product_qty - record.move_id.quantity_done, 0))
                 else:
-                    record.qty_done = record.quant_id.quantity
-
+                    record.qty_done = record.quant_id.available_quantity
 
     @api.constrains('lot_id', 'product_id')
     def _check_lot_product(self):
@@ -319,7 +318,10 @@ class StockMoveLine(models.Model):
                 moves = move_line.picking_id.move_ids.filtered(lambda x: x.product_id == move_line.product_id)
                 moves = sorted(moves, key=lambda m: m.quantity_done < m.product_qty, reverse=True)
                 if moves:
-                    move_line.move_id = moves[0].id
+                    move_line.write({
+                        'move_id': moves[0].id,
+                        'picking_id': moves[0].picking_id.id,
+                    })
                 else:
                     create_move(move_line)
             else:
@@ -352,11 +354,8 @@ class StockMoveLine(models.Model):
         moves_to_update = mls.filtered(
             lambda ml:
             ml.move_id and
-            ml.qty_done and (
-                ml.move_id.state == 'done' or (
-                    ml.move_id.picking_id and
-                    ml.move_id.picking_id.immediate_transfer
-                ))
+            ml.qty_done and
+            ml.move_id.state == 'done'
         ).move_id
         for move in moves_to_update:
             move.with_context(avoid_putaway_rules=True).product_uom_qty = move.quantity_done
@@ -512,7 +511,6 @@ class StockMoveLine(models.Model):
         # this is what move's `action_done` will do. So, we replicate the behavior here.
         if updates or 'qty_done' in vals:
             moves = self.filtered(lambda ml: ml.move_id.state == 'done').mapped('move_id')
-            moves |= self.filtered(lambda ml: ml.move_id.state not in ('done', 'cancel') and ml.move_id.picking_id.immediate_transfer).mapped('move_id')
             for move in moves:
                 move.product_uom_qty = move.quantity_done
             next_moves._do_unreserve()

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -405,8 +405,8 @@ class Picking(models.Model):
         compute="_compute_location_id", store=True, precompute=True, readonly=False,
         check_company=True, required=True)
     move_ids = fields.One2many('stock.move', 'picking_id', string="Stock Moves", copy=True)
-    move_ids_without_package = fields.One2many(
-        'stock.move', 'picking_id', string="Stock moves not in package", compute='_compute_move_without_package',
+    move_ids_without_package = fields.Many2many(
+        'stock.move', string="Stock moves not in package", compute='_compute_move_without_package',
         inverse='_set_move_without_package', compute_sudo=True)
     has_scrap_move = fields.Boolean(
         'Has Scrap Moves', compute='_has_scrap_move')
@@ -864,7 +864,7 @@ class Picking(models.Model):
             after_vals['partner_id'] = vals['partner_id']
         if after_vals:
             self.move_ids.filtered(lambda move: not move.scrapped).write(after_vals)
-        if vals.get('move_ids'):
+        if vals.get('move_ids') or vals.get('move_ids_without_package'):
             self._autoconfirm_picking()
 
         return res
@@ -1093,7 +1093,7 @@ class Picking(models.Model):
                 no_quantities_done_ids.add(picking.id)
             if all(float_is_zero(move_line.reserved_qty, precision_rounding=move_line.product_uom_id.rounding) for move_line in picking.move_line_ids):
                 no_reserved_quantities_ids.add(picking.id)
-        pickings_without_quantities = self.filtered(lambda p: p.id in no_quantities_done_ids and p.id in no_reserved_quantities_ids)
+        pickings_without_quantities = self.filtered(lambda p: p.id in no_quantities_done_ids and p.id in no_reserved_quantities_ids and not p.immediate_transfer)
 
         pickings_using_lots = self.filtered(lambda p: p.picking_type_id.use_create_lots or p.picking_type_id.use_existing_lots)
         if pickings_using_lots:
@@ -1190,6 +1190,18 @@ class Picking(models.Model):
             pickings_to_backorder = self._check_backorder()
             if pickings_to_backorder:
                 return pickings_to_backorder._action_generate_backorder_wizard(show_transfers=self._should_show_transfers())
+
+        message = ''
+        for move in self.move_ids:
+            if float_compare(move.quantity_done, move.product_uom_qty, precision_rounding=move.product_uom.rounding) > 0 \
+                    and not float_is_zero(move.product_uom_qty, precision_rounding=move.product_uom.rounding) \
+                    and move.from_immediate_transfer:
+                message += _('%(name)s has a quantity of %(initial_qty)s %(uom)s done, but %(done_qty)s %(uom)s reserved\n', name=move.product_id.display_name, initial_qty=move.product_uom_qty, done_qty=move.quantity_done, uom=move.product_uom.name)
+            if move.from_immediate_transfer and float_compare(move.product_qty, move.quantity_done, precision_rounding=move.product_uom.rounding) > 0:
+                move.quantity_done = move.product_qty
+        if message:
+            message = _('The product(s)\n') + message + _('Update quantities of those products.')
+            raise UserError(message)
         return True
 
     def _should_show_transfers(self):
@@ -1265,6 +1277,8 @@ class Picking(models.Model):
         immediate_pickings = self.browse()
         precision_digits = self.env['decimal.precision'].precision_get('Product Unit of Measure')
         for picking in self:
+            if picking.immediate_transfer:
+                continue
             if all(float_is_zero(move_line.qty_done, precision_digits=precision_digits) for move_line in picking.move_line_ids.filtered(lambda m: m.state not in ('done', 'cancel'))):
                 immediate_pickings |= picking
         return immediate_pickings

--- a/addons/stock/models/stock_quant.py
+++ b/addons/stock/models/stock_quant.py
@@ -545,11 +545,11 @@ class StockQuant(models.Model):
         """name that will be displayed in the detailed operation"""
         for record in self:
             name = [record.location_id.display_name]
-            if self.env.user.has_group('stock.group_production_lot') and record.lot_id:
+            if record.lot_id:
                 name.append(record.lot_id.name)
-            if self.env.user.has_group('stock.group_tracking_lot') and record.package_id:
+            if record.package_id:
                 name.append(record.package_id.name)
-            if self.env.user.has_group('stock.group_tracking_owner') and record.owner_id:
+            if record.owner_id:
                 name.append(record.owner_id.name)
             record.display_name = ' - '.join(name)
 
