PR: https://github.com/odoo/odoo/pull/147762

From: 1395065fe1283db957a99305bccc742483999485
From: David Monnom (moda)
Date: 2024-02-27 00:57:59

Breaking data model changes score: 3, change matches:
-    self_ordering_alternative_fp_id = fields.Many2one(
-    take_away = fields.Boolean(string="Take Away", default=False)
-    pos_self_ordering_alternative_fp_id = fields.Many2one(related="pos_config_id.self_ordering_alternative_fp_id", readonly=False)

Total Changes: 28

[IMP] point_of_sale,pos*: add takeaway button in PoS

Previously, the PoS restaurant did not have the option of creating
takeaway orders. Self Order added this possibility via a mobile or kiosk
but not in the main point-of-sale application.

This functionality has now been added, and it is now possible to
ctivate the takeaway in the pos_config. A button toggling the takeaway
will then be present in the PoS interface.

closes odoo/odoo#147762

Taskid: 3640824
Related: odoo/enterprise#57004
Related: odoo/upgrade#5481
Signed-off-by: Joseph Caburnay (jcb) <jcb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_self_order/models/pos_config.py
+++ b/addons/pos_self_order/models/pos_config.py
@@ -36,12 +36,7 @@ class PosConfig(models.Model):
         store=False,
     )
     self_ordering_url = fields.Char(compute="_compute_self_ordering_url")
-    self_ordering_takeaway = fields.Boolean("Takeaway")
-    self_ordering_alternative_fp_id = fields.Many2one(
-        'account.fiscal.position',
-        string='Alternative Fiscal Position',
-        help='This is useful for restaurants with onsite and take-away services that imply specific tax rates.',
-    )
+    self_ordering_takeaway = fields.Boolean("Self Takeaway")
     self_ordering_mode = fields.Selection(
         [("nothing", "Disable"), ("consultation", "QR menu"), ("mobile", "QR menu + Ordering"), ("kiosk", "Kiosk")],
         string="Self Ordering Mode",

--- a/addons/pos_self_order/models/pos_order.py
+++ b/addons/pos_self_order/models/pos_order.py
@@ -43,7 +43,6 @@ class PosOrder(models.Model):
     _inherit = "pos.order"
 
     table_stand_number = fields.Char(string="Table Stand Number")
-    take_away = fields.Boolean(string="Take Away", default=False)
 
     def _compute_tax_details(self):
         self.ensure_one()
@@ -67,17 +66,6 @@ class PosOrder(models.Model):
             merged_tax_details[tax_id]['base'] += tax_obj['base']
         return list(merged_tax_details.values())
 
-    @api.model
-    def create_from_ui(self, orders, draft=False):
-        for order in orders:
-            if order['data'].get('server_id'):
-                server_id = order['data'].get('server_id')
-                old_order = self.env['pos.order'].browse(server_id)
-                if old_order.take_away:
-                    order['data']['take_away'] = old_order.take_away
-
-        return super().create_from_ui(orders, draft)
-
     def _process_saved_order(self, draft):
         res = super()._process_saved_order(draft)
 
@@ -97,7 +85,7 @@ class PosOrder(models.Model):
     def _order_fields(self, ui_order):
         fields = super()._order_fields(ui_order)
         fields.update({
-            'take_away': ui_order.get('take_away'),
+            'takeaway': ui_order.get('takeaway'),
             'table_stand_number': ui_order.get('table_stand_number'),
         })
         return fields
@@ -120,7 +108,7 @@ class PosOrder(models.Model):
         return {
             "id": self.id,
             "pos_config_id": self.config_id.id,
-            "take_away": self.take_away,
+            "takeaway": self.takeaway,
             "pos_reference": self.pos_reference,
             "access_token": self.access_token,
             "table_stand_number": self.table_stand_number,

--- a/addons/pos_self_order/models/product_product.py
+++ b/addons/pos_self_order/models/product_product.py
@@ -150,13 +150,13 @@ class ProductProduct(models.Model):
         display_price_alternative = price
 
         taxes_default = pos_config.default_fiscal_position_id.map_tax(self.taxes_id)
-        taxes_alternative = pos_config.self_ordering_alternative_fp_id.map_tax(self.taxes_id)
+        taxes_alternative = pos_config.takeaway_fp_id.map_tax(self.taxes_id)
 
         price_unit_default = self._get_price_unit_after_fp(
             price, pos_config.currency_id, pos_config.default_fiscal_position_id
         )
         price_unit_alternative = self._get_price_unit_after_fp(
-            price, pos_config.currency_id, pos_config.self_ordering_alternative_fp_id
+            price, pos_config.currency_id, pos_config.takeaway_fp_id
         )
 
         all_prices_default = taxes_default.compute_all(

--- a/addons/pos_self_order/models/res_config_settings.py
+++ b/addons/pos_self_order/models/res_config_settings.py
@@ -16,7 +16,6 @@ class ResConfigSettings(models.TransientModel):
     pos_self_ordering_takeaway = fields.Boolean(related="pos_config_id.self_ordering_takeaway", readonly=False)
     pos_self_ordering_service_mode = fields.Selection(related="pos_config_id.self_ordering_service_mode", readonly=False, required=True)
     pos_self_ordering_mode = fields.Selection(related="pos_config_id.self_ordering_mode", readonly=False, required=True)
-    pos_self_ordering_alternative_fp_id = fields.Many2one(related="pos_config_id.self_ordering_alternative_fp_id", readonly=False)
     pos_self_ordering_default_language_id = fields.Many2one(related="pos_config_id.self_ordering_default_language_id", readonly=False)
     pos_self_ordering_available_language_ids = fields.Many2many(related="pos_config_id.self_ordering_available_language_ids", readonly=False)
     pos_self_ordering_image_home_ids = fields.Many2many(related="pos_config_id.self_ordering_image_home_ids", readonly=False)
