PR: https://github.com/odoo/odoo/pull/173248

From: 75fda76dba48ee2f9f65cfdbcb095dc8701a6d77
From: Tiffany Chang (tic)
Date: 2024-07-17 12:32:13

Breaking data model changes scores: del:7.400000000000002 + add:1, change matches:
-    _inherit = ['portal.mixin', 'product.catalog.mixin', 'mail.thread', 'mail.activity.mixin', 'account.order.mixin']
-    amount_untaxed = fields.Monetary(readonly=True, tracking=True)
+    amount_untaxed = fields.Monetary(string='Untaxed Amount', store=True, readonly=True, compute='_amount_all', tracking=True)
-    amount_to_invoice = fields.Monetary("Amount to be billed")
-    amount_invoiced = fields.Monetary("Amount already billed")
-    _inherit = ['analytic.mixin', 'account.order.line.mixin']
-    product_qty = fields.Float(string='Quantity', digits='Product Unit of Measure', required=True, precompute=True,
+    product_qty = fields.Float(string='Quantity', digits='Product Unit of Measure', required=True,
+    taxes_id = fields.Many2many('account.tax', string='Taxes', context={'active_test': False})
-    price_unit = fields.Float(compute='_compute_price_unit_and_date_planned_and_name', store=True, aggregator='avg')
+    price_unit = fields.Float(
-    price_subtotal = fields.Monetary(aggregator=None)
+    price_subtotal = fields.Monetary(compute='_compute_amount', string='Subtotal', aggregator=None, store=True)
-    company_id = fields.Many2one('res.company', related='order_id.company_id', string='Company', store=True, readonly=True, precompute=True)
+    company_id = fields.Many2one('res.company', related='order_id.company_id', string='Company', store=True, readonly=True)
-    qty_to_invoice = fields.Float(readonly=True)
+    qty_to_invoice = fields.Float(compute='_compute_qty_invoiced', string='To Invoice Quantity', store=True, readonly=True,
-    group_down_payment = fields.Boolean("Down Payments", implied_group="purchase.group_down_payment", help="Allow creating vendor bills for down payments on purchase orders")

Total Changes: 324

[REV] purchase, account, sale: add account.order(.line).mixin

Reverted because:

* Mixin added more complexity than simplification (i.e. more lines added
  than removed)
* Downpayment functionality for POs as is in this commit is not desired
* POs and SOs should be allowed to evolve independently of each other
  and this mixin restricts that

Because subsequent renaming was done on top of this mixin, we revert
those renamings as well to avoid painful conflicts

This reverts commit 0257fcb9cfef5bac3c267f2e85cdc04d3701c4f1.

Original task: 3600910

X-original-commit: 465da9d7e63157a312ea83b12b760520dfaf59e6
Part-of: odoo/odoo#173248
Related: odoo/enterprise#66702
Signed-off-by: Tiffany Chang (tic) <tic@odoo.com>

================================= pseudo patch: =================================

--- a/addons/purchase/models/account_invoice.py
+++ b/addons/purchase/models/account_invoice.py
@@ -65,7 +65,7 @@ class AccountMove(models.Model):
         po_lines = self.purchase_id.order_line - self.invoice_line_ids.mapped('purchase_line_id')
         for line in po_lines.filtered(lambda l: not l.display_type):
             self.invoice_line_ids += self.env['account.move.line'].new(
-                line._prepare_invoice_line(self)
+                line._prepare_account_move_line(self)
             )
 
         # Compute invoice_origin.
@@ -480,6 +480,3 @@ class AccountMoveLine(models.Model):
         # OVERRIDE to copy the 'purchase_line_id' field as well.
         super(AccountMoveLine, self)._copy_data_extend_business_fields(values)
         values['purchase_line_id'] = self.purchase_line_id.id
-
-    def _get_order_lines(self):
-        return self.purchase_line_id or super()._get_order_lines()

--- a/addons/purchase/models/purchase_order.py
+++ b/addons/purchase/models/purchase_order.py
@@ -17,11 +17,68 @@ from odoo.exceptions import UserError, ValidationError
 
 class PurchaseOrder(models.Model):
     _name = "purchase.order"
-    _inherit = ['portal.mixin', 'product.catalog.mixin', 'mail.thread', 'mail.activity.mixin', 'account.order.mixin']
+    _inherit = ['portal.mixin', 'product.catalog.mixin', 'mail.thread', 'mail.activity.mixin']
     _description = "Purchase Order"
     _rec_names_search = ['name', 'partner_ref']
     _order = 'priority desc, id desc'
 
+    @api.depends('order_line.price_total', 'currency_id')
+    def _amount_all(self):
+        for order in self:
+            order_lines = order.order_line.filtered(lambda x: not x.display_type)
+
+            if order.company_id.tax_calculation_rounding_method == 'round_globally':
+                tax_results = self.env['account.tax']._compute_taxes(
+                    [
+                        line._convert_to_tax_base_line_dict()
+                        for line in order_lines
+                    ],
+                    order.company_id,
+                )
+                totals = tax_results['totals']
+                amount_untaxed = totals.get(order.currency_id, {}).get('amount_untaxed', 0.0)
+                amount_tax = totals.get(order.currency_id, {}).get('amount_tax', 0.0)
+            else:
+                amount_untaxed = sum(order_lines.mapped('price_subtotal'))
+                amount_tax = sum(order_lines.mapped('price_tax'))
+
+            order.amount_untaxed = amount_untaxed
+            order.amount_tax = amount_tax
+            order.amount_total = order.amount_untaxed + order.amount_tax
+            order.amount_total_cc = order.amount_total / order.currency_rate
+
+    @api.depends('state', 'order_line.qty_to_invoice')
+    def _get_invoiced(self):
+        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
+        for order in self:
+            if order.state not in ('purchase', 'done'):
+                order.invoice_status = 'no'
+                continue
+
+            if any(
+                not float_is_zero(line.qty_to_invoice, precision_digits=precision)
+                for line in order.order_line.filtered(lambda l: not l.display_type)
+            ):
+                order.invoice_status = 'to invoice'
+            elif (
+                all(
+                    float_is_zero(line.qty_to_invoice, precision_digits=precision)
+                    for line in order.order_line.filtered(lambda l: not l.display_type)
+                )
+                and order.invoice_ids
+            ):
+                order.invoice_status = 'invoiced'
+            else:
+                order.invoice_status = 'no'
+
+    @api.depends('order_line.invoice_lines.move_id')
+    def _compute_invoice(self):
+        for order in self:
+            invoices = order.mapped('order_line.invoice_lines.move_id')
+            order.invoice_ids = invoices
+            order.invoice_count = len(invoices)
+
+    name = fields.Char('Order Reference', required=True, index='trigram', copy=False, default='New')
     priority = fields.Selection(
         [('0', 'Normal'), ('1', 'Urgent')], 'Priority', default='0', index=True)
     origin = fields.Char('Source Document', copy=False,
@@ -35,10 +92,12 @@ class PurchaseOrder(models.Model):
     date_order = fields.Datetime('Order Deadline', required=True, index=True, copy=False, default=fields.Datetime.now,
         help="Depicts the date within which the Quotation should be confirmed and converted into a purchase order.")
     date_approve = fields.Datetime('Confirmation Date', readonly=True, index=True, copy=False)
-    partner_id = fields.Many2one(string='Vendor', help="You can find a vendor by their Name, TIN, Email, or Internal Reference.")
+    partner_id = fields.Many2one('res.partner', string='Vendor', required=True, change_default=True, tracking=True, check_company=True, help="You can find a vendor by its Name, TIN, Email or Internal Reference.")
     dest_address_id = fields.Many2one('res.partner', check_company=True, string='Dropship Address',
         help="Put an address if you want to deliver directly from the vendor to the customer. "
              "Otherwise, keep empty to deliver to your own company.")
+    currency_id = fields.Many2one('res.currency', 'Currency', required=True,
+        default=lambda self: self.env.company.currency_id.id)
     state = fields.Selection([
         ('draft', 'RFQ'),
         ('sent', 'RFQ Sent'),
@@ -47,27 +106,28 @@ class PurchaseOrder(models.Model):
         ('done', 'Locked'),
         ('cancel', 'Cancelled')
     ], string='Status', readonly=True, index=True, copy=False, default='draft', tracking=True)
-    order_line = fields.One2many('purchase.order.line', 'order_id', string='Order Lines')
+    order_line = fields.One2many('purchase.order.line', 'order_id', string='Order Lines', copy=True)
     notes = fields.Html('Terms and Conditions')
 
     invoice_count = fields.Integer(compute="_compute_invoice", string='Bill Count', copy=False, default=0, store=True)
     invoice_ids = fields.Many2many('account.move', compute="_compute_invoice", string='Bills', copy=False, store=True)
-    invoice_status = fields.Selection(selection_add=[
+    invoice_status = fields.Selection([
         ('no', 'Nothing to Bill'),
         ('to invoice', 'Waiting Bills'),
         ('invoiced', 'Fully Billed'),
-    ], string='Billing Status', readonly=True, copy=False, default='no')
+    ], string='Billing Status', compute='_get_invoiced', store=True, readonly=True, copy=False, default='no')
     date_planned = fields.Datetime(
         string='Expected Arrival', index=True, copy=False, compute='_compute_date_planned', store=True, readonly=False,
         help="Delivery date promised by vendor. This date is used to determine expected arrival of products.")
     date_calendar_start = fields.Datetime(compute='_compute_date_calendar_start', readonly=True, store=True)
 
-    amount_untaxed = fields.Monetary(readonly=True, tracking=True)
+    amount_untaxed = fields.Monetary(string='Untaxed Amount', store=True, readonly=True, compute='_amount_all', tracking=True)
     tax_totals = fields.Binary(compute='_compute_tax_totals', exportable=False)
-    amount_total_cc = fields.Monetary(string="Company Total", store=True, readonly=True, compute="_compute_amounts", currency_field="company_currency_id")
-    amount_to_invoice = fields.Monetary("Amount to be billed")  # Only override the string
-    amount_invoiced = fields.Monetary("Amount already billed")  # Only override the string
+    amount_tax = fields.Monetary(string='Taxes', store=True, readonly=True, compute='_amount_all')
+    amount_total = fields.Monetary(string='Total', store=True, readonly=True, compute='_amount_all')
+    amount_total_cc = fields.Monetary(string="Company Total", store=True, readonly=True, compute="_amount_all", currency_field="company_currency_id")
 
+    fiscal_position_id = fields.Many2one('account.fiscal.position', string='Fiscal Position', domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
     tax_country_id = fields.Many2one(
         comodel_name='res.country',
         compute='_compute_tax_country_id',
@@ -77,12 +137,14 @@ class PurchaseOrder(models.Model):
     tax_calculation_rounding_method = fields.Selection(
         related='company_id.tax_calculation_rounding_method',
         string='Tax calculation rounding method', readonly=True)
+    payment_term_id = fields.Many2one('account.payment.term', 'Payment Terms', domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
     incoterm_id = fields.Many2one('account.incoterms', 'Incoterm', help="International Commercial Terms are a series of predefined commercial terms used in international transactions.")
 
     product_id = fields.Many2one('product.product', related='order_line.product_id', string='Product')
     user_id = fields.Many2one(
         'res.users', string='Buyer', index=True, tracking=True,
         default=lambda self: self.env.user, check_company=True)
+    company_id = fields.Many2one('res.company', 'Company', required=True, index=True, default=lambda self: self.env.company.id)
     company_currency_id = fields.Many2one(related="company_id.currency_id", string="Company Currency")
     country_code = fields.Char(related='company_id.account_fiscal_country_id.code', string="Country code")
     currency_rate = fields.Float("Currency Rate", compute='_compute_currency_rate', compute_sudo=True, store=True, readonly=True, help='Ratio between the purchase order currency and the company currency')
@@ -173,64 +235,6 @@ class PurchaseOrder(models.Model):
             else:
                 record.tax_country_id = record.company_id.account_fiscal_country_id
 
-    @api.depends('currency_rate')
-    def _compute_amounts(self):
-        super()._compute_amounts()
-        for order in self:
-            order.amount_total_cc = order.amount_total / order.currency_rate
-
-    def _compute_amount_to_invoice(self):
-        super()._compute_amount_to_invoice()
-        for order in self:
-            # If the invoice status is 'Fully Invoiced' force the amount to invoice to equal zero and return early.
-            if order.invoice_status == 'invoiced':
-                order.amount_to_invoice = 0.0
-                continue
-            order.amount_to_invoice = order.amount_total
-            for account_move in order.account_move_ids:
-                if account_move.state != 'posted':
-                    continue
-                amount_total = sum(account_move.line_ids.filtered(lambda x: order == x.purchase_order_id).mapped('price_total'))
-                invoice_amount_currency = account_move.currency_id._convert(
-                    amount_total * account_move.direction_sign * order._get_order_direction(),
-                    order.currency_id,
-                    account_move.company_id,
-                    account_move.date,
-                )
-                order.amount_to_invoice -= invoice_amount_currency
-
-    @api.depends('state', 'order_line.qty_to_invoice')
-    def _compute_invoice_status(self):
-        super()._compute_invoice_status()
-        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
-        for order in self:
-            if order.state not in ('purchase', 'done'):
-                order.invoice_status = 'no'
-                continue
-
-            if any(
-                not float_is_zero(line.qty_to_invoice, precision_digits=precision) and not line.is_downpayment
-                for line in order.order_line.filtered(lambda l: not l.display_type)
-            ):
-                order.invoice_status = 'to invoice'
-            elif (
-                all(
-                    float_is_zero(line.qty_to_invoice, precision_digits=precision)
-                    for line in order.order_line.filtered(lambda l: not l.display_type)
-                )
-                and order.order_line.invoice_lines.filtered(lambda aml: not aml.is_downpayment)
-            ):
-                order.invoice_status = 'invoiced'
-            else:
-                order.invoice_status = 'no'
-
-    @api.depends('order_line.invoice_lines.move_id')
-    def _compute_invoice(self):
-        for order in self:
-            invoices = order.mapped('order_line.invoice_lines.move_id')
-            order.invoice_ids = invoices
-            order.invoice_count = len(invoices)
-
     @api.onchange('date_planned')
     def onchange_date_planned(self):
         if self.date_planned:
@@ -560,24 +564,42 @@ class PurchaseOrder(models.Model):
                 # supplier info should be added regardless of the user access rights
                 line.product_id.product_tmpl_id.sudo().write(vals)
 
-    def action_create_invoice(self, skip_dialog_check=False):
+    def action_create_invoice(self):
         """Create the invoice associated to the PO.
         """
-
-        if self.env.user.has_group('purchase.group_down_payment') and not skip_dialog_check:
-            return {
-                'name': _('Create bills'),
-                'type': 'ir.actions.act_window',
-                'view_mode': 'form',
-                'res_model': 'purchase.advance.payment.wizard',
-                'target': 'new',
-            }
+        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
 
         # 1) Prepare invoice vals and clean-up the section lines
-        invoice_vals_list = self._generate_invoice_values()
+        invoice_vals_list = []
+        sequence = 10
+        for order in self:
+            if order.invoice_status != 'to invoice':
+                continue
+
+            order = order.with_company(order.company_id)
+            pending_section = None
+            # Invoice values.
+            invoice_vals = order._prepare_invoice()
+            # Invoice line values (keep only necessary sections).
+            for line in order.order_line:
+                if line.display_type == 'line_section':
+                    pending_section = line
+                    continue
+                if not float_is_zero(line.qty_to_invoice, precision_digits=precision):
+                    if pending_section:
+                        line_vals = pending_section._prepare_account_move_line()
+                        line_vals.update({'sequence': sequence})
+                        invoice_vals['invoice_line_ids'].append((0, 0, line_vals))
+                        sequence += 1
+                        pending_section = None
+                    line_vals = line._prepare_account_move_line()
+                    line_vals.update({'sequence': sequence})
+                    invoice_vals['invoice_line_ids'].append((0, 0, line_vals))
+                    sequence += 1
+            invoice_vals_list.append(invoice_vals)
 
         if not invoice_vals_list:
-            raise UserError(_('There are no invoiceable lines. If a product has a control policy based on received quantity, please make sure that a quantity has been received.'))
+            raise UserError(_('There is no invoiceable line. If a product has a control policy based on received quantity, please make sure that a quantity has been received.'))
 
         # 2) group by (company_id, partner_id, currency_id) for batch creation
         new_invoice_vals_list = []
@@ -613,9 +635,6 @@ class PurchaseOrder(models.Model):
         # is actually negative or not
         moves.filtered(lambda m: m.currency_id.round(m.amount_total) < 0).action_switch_move_type()
 
-        # If coming from the down payment wizard we just return the raw moves
-        if skip_dialog_check:
-            return moves
         return self.action_view_invoice(moves)
 
     def _prepare_invoice(self):
@@ -627,16 +646,20 @@ class PurchaseOrder(models.Model):
         partner_invoice = self.env['res.partner'].browse(self.partner_id.address_get(['invoice'])['invoice'])
         partner_bank_id = self.partner_id.commercial_partner_id.bank_ids.filtered_domain(['|', ('company_id', '=', False), ('company_id', '=', self.company_id.id)])[:1]
 
-        invoice_vals = super()._prepare_invoice()
-        invoice_vals.update({
+        invoice_vals = {
             'ref': self.partner_ref or '',
             'move_type': move_type,
             'narration': self.notes,
+            'currency_id': self.currency_id.id,
             'partner_id': partner_invoice.id,
             'fiscal_position_id': (self.fiscal_position_id or self.fiscal_position_id._get_fiscal_position(partner_invoice)).id,
             'payment_reference': self.partner_ref or '',
             'partner_bank_id': partner_bank_id.id,
-        })
+            'invoice_origin': self.name,
+            'invoice_payment_term_id': self.payment_term_id.id,
+            'invoice_line_ids': [],
+            'company_id': self.company_id.id,
+        }
         return invoice_vals
 
     def action_view_invoice(self, invoices=False):
@@ -1067,15 +1090,3 @@ class PurchaseOrder(models.Model):
 
     def _get_edi_builders(self):
         return []
-
-    def _create_new_order_line(self, values):
-        return self.env['purchase.order.line'].create(values)
-
-    def _is_locked(self):
-        return self.state == 'done'
-
-    def _create_invoices(self, grouped=False, final=False, date=None):
-        return self.action_create_invoice(True)
-
-    def _get_order_direction(self):
-        return 1

--- a/addons/purchase/models/purchase_order_line.py
+++ b/addons/purchase/models/purchase_order_line.py
@@ -5,35 +5,49 @@ from pytz import UTC
 import re
 
 from odoo import api, fields, models, _
-from odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT, get_lang, float_is_zero
+from odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT, get_lang
 from odoo.tools.float_utils import float_compare, float_round
 from odoo.exceptions import UserError
 
 
 class PurchaseOrderLine(models.Model):
     _name = 'purchase.order.line'
-    _inherit = ['analytic.mixin', 'account.order.line.mixin']
+    _inherit = 'analytic.mixin'
     _description = 'Purchase Order Line'
     _order = 'order_id, sequence, id'
 
+    name = fields.Text(
+        string='Description', required=True, compute='_compute_price_unit_and_date_planned_and_name', store=True, readonly=False)
     sequence = fields.Integer(string='Sequence', default=10)
-    product_qty = fields.Float(string='Quantity', digits='Product Unit of Measure', required=True, precompute=True,
-                               compute='_compute_product_qty', store=True, readonly=False, default=lambda self: self.product_uom_qty)
+    product_qty = fields.Float(string='Quantity', digits='Product Unit of Measure', required=True,
+                               compute='_compute_product_qty', store=True, readonly=False)
     product_uom_qty = fields.Float(string='Total Quantity', compute='_compute_product_uom_qty', store=True)
     date_planned = fields.Datetime(
         string='Expected Arrival', index=True,
         compute="_compute_price_unit_and_date_planned_and_name", readonly=False, store=True,
         help="Delivery date expected from vendor. This date respectively defaults to vendor pricelist lead time then today's date.")
+    discount = fields.Float(
+        string="Discount (%)",
+        compute='_compute_price_unit_and_date_planned_and_name',
+        digits='Discount',
+        store=True, readonly=False)
+    taxes_id = fields.Many2many('account.tax', string='Taxes', context={'active_test': False})
+    product_uom = fields.Many2one('uom.uom', string='Unit of Measure', domain="[('category_id', '=', product_uom_category_id)]")
     product_uom_category_id = fields.Many2one(related='product_id.uom_id.category_id')
-    product_id = fields.Many2one(domain=[('purchase_ok', '=', True)])
+    product_id = fields.Many2one('product.product', string='Product', domain=[('purchase_ok', '=', True)], change_default=True, index='btree_not_null')
     product_type = fields.Selection(related='product_id.type', readonly=True)
-    price_unit = fields.Float(compute='_compute_price_unit_and_date_planned_and_name', store=True, aggregator='avg')
+    price_unit = fields.Float(
+        string='Unit Price', required=True, digits='Product Price', aggregator='avg',
+        compute="_compute_price_unit_and_date_planned_and_name", readonly=False, store=True)
     price_unit_discounted = fields.Float('Unit Price (Discounted)', compute='_compute_price_unit_discounted')
 
-    price_subtotal = fields.Monetary(aggregator=None)
+    price_subtotal = fields.Monetary(compute='_compute_amount', string='Subtotal', aggregator=None, store=True)
+    price_total = fields.Monetary(compute='_compute_amount', string='Total', store=True)
+    price_tax = fields.Float(compute='_compute_amount', string='Tax', store=True)
+
     order_id = fields.Many2one('purchase.order', string='Order Reference', index=True, required=True, ondelete='cascade')
 
-    company_id = fields.Many2one('res.company', related='order_id.company_id', string='Company', store=True, readonly=True, precompute=True)
+    company_id = fields.Many2one('res.company', related='order_id.company_id', string='Company', store=True, readonly=True)
     state = fields.Selection(related='order_id.state', store=True)
 
     invoice_lines = fields.One2many('account.move.line', 'purchase_line_id', string="Bill Lines", readonly=True, copy=False)
@@ -47,32 +61,50 @@ class PurchaseOrderLine(models.Model):
              "  - Stock Moves: the quantity comes from confirmed pickings\n")
     qty_received = fields.Float("Received Qty", compute='_compute_qty_received', inverse='_inverse_qty_received', compute_sudo=True, store=True, digits='Product Unit of Measure')
     qty_received_manual = fields.Float("Manual Received Qty", digits='Product Unit of Measure', copy=False)
-    qty_to_invoice = fields.Float(readonly=True)
+    qty_to_invoice = fields.Float(compute='_compute_qty_invoiced', string='To Invoice Quantity', store=True, readonly=True,
+                                  digits='Product Unit of Measure')
 
     partner_id = fields.Many2one('res.partner', related='order_id.partner_id', string='Partner', readonly=True, store=True, index='btree_not_null')
+    currency_id = fields.Many2one(related='order_id.currency_id', store=True, string='Currency', readonly=True)
     date_order = fields.Datetime(related='order_id.date_order', string='Order Date', readonly=True)
     date_approve = fields.Datetime(related="order_id.date_approve", string='Confirmation Date', readonly=True)
     product_packaging_id = fields.Many2one('product.packaging', string='Packaging', domain="[('purchase', '=', True), ('product_id', '=', product_id)]", check_company=True,
-                                           compute="_compute_product_packaging_id", store=True, readonly=False, precompute=True)
-    product_packaging_qty = fields.Float('Packaging Quantity', compute="_compute_product_packaging_qty", store=True, readonly=False, precompute=True)
+                                           compute="_compute_product_packaging_id", store=True, readonly=False)
+    product_packaging_qty = fields.Float('Packaging Quantity', compute="_compute_product_packaging_qty", store=True, readonly=False)
     tax_calculation_rounding_method = fields.Selection(
         related='company_id.tax_calculation_rounding_method',
         string='Tax calculation rounding method', readonly=True)
+    display_type = fields.Selection([
+        ('line_section', "Section"),
+        ('line_note', "Note")], default=False, help="Technical field for UX purpose.")
 
     _sql_constraints = [
         ('accountable_required_fields',
-            "CHECK(display_type IS NOT NULL OR is_downpayment OR (product_id IS NOT NULL AND product_uom IS NOT NULL AND date_planned IS NOT NULL))",
+            "CHECK(display_type IS NOT NULL OR (product_id IS NOT NULL AND product_uom IS NOT NULL AND date_planned IS NOT NULL))",
             "Missing required fields on accountable purchase order line."),
         ('non_accountable_null_fields',
             "CHECK(display_type IS NULL OR (product_id IS NULL AND price_unit = 0 AND product_uom_qty = 0 AND product_uom IS NULL AND date_planned is NULL))",
             "Forbidden values on non-accountable purchase order line"),
     ]
 
-    @api.depends('product_qty')
+    @api.depends('product_qty', 'price_unit', 'taxes_id', 'discount')
     def _compute_amount(self):
-        super()._compute_amount()
+        for line in self:
+            tax_results = self.env['account.tax']._compute_taxes(
+                [line._convert_to_tax_base_line_dict()],
+                line.company_id,
+            )
+            totals = next(iter(tax_results['totals'].values()))
+            amount_untaxed = totals['amount_untaxed']
+            amount_tax = totals['amount_tax']
 
-    def _convert_to_tax_base_line_dict(self, **kwargs):
+            line.update({
+                'price_subtotal': amount_untaxed,
+                'price_tax': amount_tax,
+                'price_total': amount_untaxed + amount_tax,
+            })
+
+    def _convert_to_tax_base_line_dict(self):
         """ Convert the current record to a dictionary in order to use the generic taxes computation method
         defined on account.tax.
 
@@ -89,7 +121,6 @@ class PurchaseOrderLine(models.Model):
             quantity=self.product_qty,
             discount=self.discount,
             price_subtotal=self.price_subtotal,
-            **kwargs,
         )
 
     def _compute_tax_id(self):
@@ -108,6 +139,7 @@ class PurchaseOrderLine(models.Model):
     @api.depends('invoice_lines.move_id.state', 'invoice_lines.quantity', 'qty_received', 'product_uom_qty', 'order_id.state')
     def _compute_qty_invoiced(self):
         for line in self:
+            # compute qty_invoiced
             qty = 0.0
             for inv_line in line._get_invoice_lines():
                 if inv_line.move_id.state not in ['cancel'] or inv_line.move_id.payment_state == 'invoicing_legacy':
@@ -117,10 +149,7 @@ class PurchaseOrderLine(models.Model):
                         qty -= inv_line.product_uom_id._compute_quantity(inv_line.quantity, line.product_uom)
             line.qty_invoiced = qty
 
-    @api.depends('invoice_lines.move_id.state', 'invoice_lines.quantity', 'qty_received', 'product_uom_qty', 'order_id.state')
-    def _compute_qty_to_invoice(self):
-        super()._compute_qty_to_invoice()
-        for line in self:
+            # compute qty_to_invoice
             if line.order_id.state in ['purchase', 'done']:
                 if line.product_id.purchase_method == 'purchase':
                     line.qty_to_invoice = line.product_qty - line.qty_invoiced
@@ -129,6 +158,15 @@ class PurchaseOrderLine(models.Model):
             else:
                 line.qty_to_invoice = 0
 
+    def _get_invoice_lines(self):
+        self.ensure_one()
+        if self._context.get('accrual_entry_date'):
+            return self.invoice_lines.filtered(
+                lambda l: l.move_id.invoice_date and l.move_id.invoice_date <= self._context['accrual_entry_date']
+            )
+        else:
+            return self.invoice_lines
+
     @api.depends('product_id', 'product_id.type')
     def _compute_qty_received_method(self):
         for line in self:
@@ -160,15 +198,12 @@ class PurchaseOrderLine(models.Model):
     @api.model_create_multi
     def create(self, vals_list):
         for values in vals_list:
-            if values.get('display_type', False):
+            if values.get('display_type', self.default_get(['display_type'])['display_type']):
                 values.update(product_id=False, price_unit=0, product_uom_qty=0, product_uom=False, date_planned=False)
             else:
                 values.update(self._prepare_add_missing_fields(values))
 
         lines = super().create(vals_list)
-        if self.env.context.get('no_log_for_new_lines'):
-            return lines
-
         for line in lines:
             if line.product_id and line.order_id.state == 'purchase':
                 msg = _("Extra line with %s ", line.product_id.display_name)
@@ -200,7 +235,7 @@ class PurchaseOrderLine(models.Model):
     @api.ondelete(at_uninstall=False)
     def _unlink_except_purchase_or_done(self):
         for line in self:
-            if line.order_id.state in ['purchase', 'done'] and (line.account_move_line_ids or not line.is_downpayment) and not line.display_type:
+            if line.order_id.state in ['purchase', 'done']:
                 state_description = {state_desc[0]: state_desc[1] for state_desc in self._fields['state']._description_selection(self.env)}
                 raise UserError(_('Cannot delete a purchase order line which is in state “%s”.', state_description.get(line.state)))
 
@@ -342,14 +377,6 @@ class PurchaseOrderLine(models.Model):
                 product_ctx = {'seller_id': seller.id, 'lang': get_lang(line.env, line.partner_id.lang).code}
                 line.name = line._get_product_purchase_description(line.product_id.with_context(product_ctx))
 
-    def _compute_name(self):
-        super()._compute_name()
-        self._compute_price_unit_and_date_planned_and_name()
-
-    def _compute_discount(self):
-        super()._compute_discount()
-        self._compute_price_unit_and_date_planned_and_name()
-
     @api.depends('product_id', 'product_qty', 'product_uom')
     def _compute_product_packaging_id(self):
         for line in self:
@@ -525,10 +552,10 @@ class PurchaseOrderLine(models.Model):
 
         return name
 
-    def _prepare_invoice_line(self, move=False, **optional_values):
+    def _prepare_account_move_line(self, move=False):
+        self.ensure_one()
         aml_currency = move and move.currency_id or self.currency_id
         date = move and move.date or fields.Date.today()
-        res = super()._prepare_invoice_line(move, **optional_values)
 
         # Compatibility fix for creating invoices from a SO since the computation of the line name has been changed in the account module.
         # Has to be removed as soon as the new behavior for the line name has been implemented in the sale module.
@@ -539,16 +566,19 @@ class PurchaseOrderLine(models.Model):
             line_name = re.sub(r'(?<=\n) ', '', line_name)
             line_name = re.sub(r'P(\d+):(\s*)$', r'P\1', '%s: %s' % (self.order_id.name, line_name))
 
-        res.update({
+        res = {
+            'display_type': self.display_type or 'product',
             'name': line_name,
+            'product_id': self.product_id.id,
+            'product_uom_id': self.product_uom.id,
+            'quantity': self.qty_to_invoice,
+            'discount': self.discount,
             'price_unit': self.currency_id._convert(self.price_unit, aml_currency, self.company_id, date, round=False),
             'tax_ids': [(6, 0, self.taxes_id.ids)],
             'purchase_line_id': self.id,
-        })
+        }
         if self.analytic_distribution and not self.display_type:
             res['analytic_distribution'] = self.analytic_distribution
-        if optional_values:
-            res.update(optional_values)
         return res
 
     @api.model
@@ -642,10 +672,6 @@ class PurchaseOrderLine(models.Model):
                 company_id=line.company_id.id,
             )
 
-    def _has_valid_qty_to_invoice(self, final=False):
-        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
-        return not float_is_zero(self.qty_to_invoice, precision_digits=precision)
-
     def action_open_order(self):
         self.ensure_one()
         return {

--- a/addons/purchase/models/res_config_settings.py
+++ b/addons/purchase/models/res_config_settings.py
@@ -32,8 +32,6 @@ class ResConfigSettings(models.TransientModel):
     group_send_reminder = fields.Boolean("Receipt Reminder", implied_group='purchase.group_send_reminder', default=True,
         help="Allow automatically send email to remind your vendor the receipt date")
 
-    group_down_payment = fields.Boolean("Down Payments", implied_group="purchase.group_down_payment", help="Allow creating vendor bills for down payments on purchase orders")
-
     @api.onchange('use_po_lead')
     def _onchange_use_po_lead(self):
         if not self.use_po_lead:
