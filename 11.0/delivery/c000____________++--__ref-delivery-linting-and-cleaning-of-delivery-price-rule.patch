PR: https://github.com/odoo/odoo/pull/

From: f2c9b519a7a83e95d8f08a7650cea48ae953f3f6
From: Richard Mathot
Date: 2017-07-13 10:32:22

Structural Changes: 10
Total Changes: 15

[REF] delivery: linting and cleaning of delivery.price.rule

================================= pseudo patch: =================================

--- a/addons/delivery/models/delivery_price_rule.py
+++ b/addons/delivery/models/delivery_price_rule.py
@@ -8,10 +8,10 @@ from odoo.addons import decimal_precision as dp
 class PriceRule(models.Model):
     _name = "delivery.price.rule"
     _description = "Delivery Price Rules"
-    _order = 'sequence, list_price'
+    _order = 'sequence, list_price, id'
 
     @api.depends('variable', 'operator', 'max_value', 'list_base_price', 'list_price', 'variable_factor')
-    def _get_name(self):
+    def _compute_name(self):
         for rule in self:
             name = 'if %s %s %s then' % (rule.variable, rule.operator, rule.max_value)
             if rule.list_base_price and not rule.list_price:
@@ -22,13 +22,14 @@ class PriceRule(models.Model):
                 name = '%s fixed price %s and %s times %s Extra' % (name, rule.list_base_price, rule.list_price, rule.variable_factor)
             rule.name = name
 
-    name = fields.Char(compute='_get_name')
-    sequence = fields.Integer(required=True, help="Gives the sequence order when calculating delivery carrier.", default=10)
+    name = fields.Char(compute='_compute_name')
+    sequence = fields.Integer(required=True, default=10)
     carrier_id = fields.Many2one('delivery.carrier', 'Carrier', required=True, ondelete='cascade')
-    variable = fields.Selection([('weight', 'Weight'), ('volume', 'Volume'), ('wv', 'Weight * Volume'), ('price', 'Price'), ('quantity', 'Quantity')], 'Variable', required=True, default='weight')
-    operator = fields.Selection([('==', '='), ('<=', '<='), ('<', '<'), ('>=', '>='), ('>', '>')], 'Operator', required=True, default='<=')
+
+    variable = fields.Selection([('weight', 'Weight'), ('volume', 'Volume'), ('wv', 'Weight * Volume'), ('price', 'Price'), ('quantity', 'Quantity')], required=True, default='weight')
+    operator = fields.Selection([('==', '='), ('<=', '<='), ('<', '<'), ('>=', '>='), ('>', '>')], required=True, default='<=')
     max_value = fields.Float('Maximum Value', required=True)
-    variable_factor = fields.Selection([('weight', 'Weight'), ('volume', 'Volume'), ('wv', 'Weight * Volume'), ('price', 'Price'), ('quantity', 'Quantity')], 'Variable Factor', required=True, default='weight')
     list_base_price = fields.Float(string='Sale Base Price', digits=dp.get_precision('Product Price'), required=True, default=0.0)
     list_price = fields.Float('Sale Price', digits=dp.get_precision('Product Price'), required=True, default=0.0)
+    variable_factor = fields.Selection([('weight', 'Weight'), ('volume', 'Volume'), ('wv', 'Weight * Volume'), ('price', 'Price'), ('quantity', 'Quantity')], 'Variable Factor', required=True, default='weight')
     standard_price = fields.Float('Cost Price', digits=dp.get_precision('Product Price'), required=True, default=0.0)
