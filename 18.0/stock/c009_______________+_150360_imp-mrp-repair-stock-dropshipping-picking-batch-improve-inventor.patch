PR: https://github.com/odoo/odoo/pull/150360

From: 85812a936727ed136e79cfd3b31a6e3530bb0967
From: Pawe≈Ç Fertyk
Date: 2024-05-23 08:01:07

Structural Changes: 3
Total Changes: 59

[IMP] mrp,repair,stock{,_dropshipping,_picking_batch}: improve inventory dashboard

Task: 3647839

* rename button "N To Process" to "Open" if N == 0
* make cards in kanban view wider (3 columns instead of 5)
* change link to batches into a primary button (if present, "N To Process" becomes secondary)
* add link to operations = ready stock moves
* move links to waiting, late etc to the right, swap text and numbers
* add "favorite" flag to picking types (per user)
* rearrange links in kanban popup

Part-of: odoo/odoo#150360

================================= pseudo patch: =================================

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -13,14 +13,14 @@ from odoo.addons.stock.models.stock_move import PROCUREMENT_PRIORITIES
 from odoo.addons.web.controllers.utils import clean_action
 from odoo.exceptions import UserError, ValidationError
 from odoo.osv import expression
-from odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT, format_datetime, format_date, groupby
+from odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT, format_datetime, format_date, groupby, SQL
 from odoo.tools.float_utils import float_compare, float_is_zero, float_round
 
 
 class PickingType(models.Model):
     _name = "stock.picking.type"
     _description = "Picking Type"
-    _order = 'sequence, id'
+    _order = 'is_favorite desc, sequence, id'
     _rec_names_search = ['name', 'warehouse_id.name']
     _check_company_auto = True
 
@@ -125,6 +125,7 @@ class PickingType(models.Model):
     count_picking_waiting = fields.Integer(compute='_compute_picking_count')
     count_picking_late = fields.Integer(compute='_compute_picking_count')
     count_picking_backorders = fields.Integer(compute='_compute_picking_count')
+    count_move_ready = fields.Integer(compute='_compute_move_count')
     hide_reservation_method = fields.Boolean(compute='_compute_hide_reservation_method')
     barcode = fields.Char('Barcode', copy=False)
     company_id = fields.Many2one(
@@ -140,6 +141,13 @@ class PickingType(models.Model):
     show_picking_type = fields.Boolean(compute='_compute_show_picking_type')
 
     picking_properties_definition = fields.PropertiesDefinition("Picking Properties")
+    favorite_user_ids = fields.Many2many(
+        'res.users', 'picking_type_favorite_user_rel', 'picking_type_id', 'user_id',
+    )
+    is_favorite = fields.Boolean(
+        compute='_compute_is_favorite', inverse='_inverse_is_favorite', search='_search_is_favorite',
+        compute_sudo=True, string='Show Operation in Overview'
+    )
 
     @api.model_create_multi
     def create(self, vals_list):
@@ -191,6 +199,34 @@ class PickingType(models.Model):
                     })
         return super(PickingType, self).write(vals)
 
+    @api.model
+    def _search_is_favorite(self, operator, value):
+        if operator not in ['=', '!='] or not isinstance(value, bool):
+            raise NotImplementedError(_('Operation not supported'))
+        return [('favorite_user_ids', 'in' if (operator == '=') == value else 'in', self.env.uid)]
+
+    def _compute_is_favorite(self):
+        for picking_type in self:
+            picking_type.is_favorite = self.env.user in picking_type.favorite_user_ids
+
+    def _inverse_is_favorite(self):
+        sudoed_self = self.sudo()
+        to_fav = sudoed_self.filtered(
+            lambda picking_type: self.env.user not in picking_type.favorite_user_ids
+        )
+        to_fav.write({'favorite_user_ids': [(4, self.env.uid)]})
+        (sudoed_self - to_fav).write({'favorite_user_ids': [(3, self.env.uid)]})
+
+    def _order_field_to_sql(self, alias, field_name, direction, nulls, query):
+        if field_name == 'is_favorite':
+            sql_field = SQL(
+                "%s IN (SELECT picking_type_id FROM picking_type_favorite_user_rel WHERE user_id = %s)",
+                SQL.identifier(alias, 'id'), self.env.uid,
+            )
+            return SQL("%s %s %s", sql_field, direction, nulls)
+
+        return super()._order_field_to_sql(alias, field_name, direction, nulls, query)
+
     @api.depends('code')
     def _compute_hide_reservation_method(self):
         for rec in self:
@@ -213,6 +249,15 @@ class PickingType(models.Model):
             for record in self:
                 record[field_name] = count.get(record.id, 0)
 
+    def _compute_move_count(self):
+        data = self.env['stock.move']._read_group(
+            [('state', '=', 'assigned'), ('picking_type_id', 'in', self.ids)],
+            ['picking_type_id'], ['__count']
+        )
+        count = {picking_type.id: count for picking_type, count in data}
+        for record in self:
+            record['count_move_ready'] = count.get(record.id, 0)
+
     @api.depends('warehouse_id')
     def _compute_display_name(self):
         """ Display 'Warehouse_name: PickingType_name' """
@@ -343,9 +388,19 @@ class PickingType(models.Model):
     def get_action_picking_type_operations(self):
         return self._get_action('stock.action_get_picking_type_operations')
 
+    def get_action_picking_type_moves_analysis(self):
+        action = self.env["ir.actions.actions"]._for_xml_id('stock.stock_move_action')
+        action['domain'] = expression.AND([
+            action['domain'] or [], [('picking_type_id', '=', self.id)]
+        ])
+        return action
+
     def get_stock_picking_action_picking_type(self):
         return self._get_action('stock.stock_picking_action_picking_type')
 
+    def get_action_picking_type_ready_moves(self):
+        return self._get_action('stock.action_get_picking_type_ready_moves')
+
     @api.depends('code')
     def _compute_show_picking_type(self):
         for record in self:
