PR: https://github.com/odoo/odoo/pull/28939

From: a742279ad27f221326f8823f55ac6eaa2eb3856c
From: jem-odoo
Date: 2019-04-01 07:05:02

Breaking data model changes score: 1, change matches:
-    _inherit = "account.analytic.line"

Total Changes: 42

[REF] sale,sale_expense: clean and optimize reinvoice code

In the previous commit the analytic entries generation when posting a
move was optimized to be done in batch. The performance is break
when sale module is installed. Indeed, in case of reinvoicing a
analytic line, AAL creation will trigger a sale.line creation.

This mecanism is very inefficient because
1/ AAL creation and Sales line creation are not batched
2/ sale line creation is done after the AAL creation, and then linked
with a `write` operation. So one `create` and one `write` per AAL to
reinvoice.
3/ To determine on which Sales Order to reinvoice, many `search` can
be performed per AAL.

Also, this looks strange that AAL creation might result into a sales line
creation.

This commit changes this in order to optimize and clean the code:
* the account.move.line (that creates the AAL) will also create the
Sales lines
* SO lines creation will be done in batch
* minimize the number of `search` done during the process
* the SO line will be linked to the AAL by passing the SO line id in the
create values of AAL (no `write` operation one AAL and SOL are created).

This was the last part of legacy code of 'sale_analytic.py' that we need
to get rid of. There are still work to do, but I think now, the
business case handled here can now breathe and have a peacefull life.

Task-1911898

closes odoo/odoo#28939

Signed-off-by: JÃ©rome Maes (jem) <jem@openerp.com>

================================= pseudo patch: =================================

--- a/addons/sale_expense/models/__init__.py
+++ b/addons/sale_expense/models/__init__.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import analytic
 from . import hr_expense
 from . import sale_order
 from . import product_template
+from . import account_move

--- a/None
+++ b/addons/sale_expense/models/account_move.py
@@ -0,0 +1,24 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, models
+
+
+class AccountMoveLine(models.Model):
+    _inherit = 'account.move.line'
+
+    @api.multi
+    def _sale_determine_order(self):
+        """ For move lines created from expense, we override the normal behavior.
+            Note: if no SO but an AA is given on the expense, we will determine anyway the SO from the AA, using the same
+            mecanism as in Vendor Bills.
+        """
+        mapping_from_invoice = super(AccountMoveLine, self)._sale_determine_order()
+
+        mapping_from_expense = {}
+        for move_line in self.filtered(lambda move_line: move_line.expense_id):
+            if move_line.expense_id.sale_order_id:
+                mapping_from_expense[move_line.id] = move_line.expense_id.sale_order_id or None
+
+        mapping_from_invoice.update(mapping_from_expense)
+        return mapping_from_invoice

--- a/addons/sale_expense/models/analytic.py
+++ b/None
@@ -1,16 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, models
-
-
-class AccountAnalyticLine(models.Model):
-    _inherit = "account.analytic.line"
-
-    @api.multi
-    def _sale_determine_order(self):
-        mapping = super(AccountAnalyticLine, self)._sale_determine_order()
-        for analytic_line in self.sudo().filtered(lambda aal: not aal.so_line and aal.product_id and aal.product_id.expense_policy not in [False, 'no']):
-            if analytic_line.move_id.expense_id.sale_order_id:
-                mapping[analytic_line.id] = analytic_line.move_id.expense_id.sale_order_id
-        return mapping
