PR: https://github.com/odoo/odoo/pull/193685

From: 799ebc59aa635227b542696d8689688ceae00ce4
From: MÃ©lanie
Date: 2025-04-24 04:10:19

Breaking data model changes scores: del:3 + add:0, change matches:
-    show_on_dashboard = fields.Boolean(default=True, help="Non-visible allocations can still be selected when taking a leave, but will simply not be displayed on the leave dashboard.")
-    requires_allocation = fields.Selection([
-    employee_requests = fields.Selection([

Total Changes: 88

[IMP] * : Improve Time off type (UX and back)

* = hr_holidays{,_attendance,_contract}, hr_work_entry_holidays,
    l10n_fr_hr_holidays, microsoft_calendar, project_timesheet_holidays,
    test_discuss_full

Part-of: odoo/odoo#193685
Related: odoo/enterprise#77149
Related: odoo/upgrade#7185
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/hr_employee.py
+++ b/addons/hr_holidays/models/hr_employee.py
@@ -273,7 +273,7 @@ class HrEmployee(models.Model):
                         skip_excess = True
                         continue
 
-                    if leave_type.requires_allocation == 'yes':
+                    if leave_type.requires_allocation:
                         for allocation in sorted_leave_allocations:
                             # We don't want to include future leaves linked to accruals into the total count of available leaves.
                             # However, we'll need to check if those leaves take more than what will be accrued in total of those days
@@ -343,7 +343,7 @@ class HrEmployee(models.Model):
                         date_accrual_bonus += consumed_content[allocation]['accrual_bonus']
                         virtual_remaining += consumed_content[allocation]['virtual_remaining_leaves']
                     for leave in content['to_recheck_leaves']:
-                        additional_leaves_duration += leave.number_of_hours if leave_type.request_unit == 'hours' else leave.number_of_days
+                        additional_leaves_duration += leave.number_of_hours if leave_type.request_unit == 'hour' else leave.number_of_days
                     latest_remaining = virtual_remaining - date_accrual_bonus + latest_accrual_bonus
                     content['exceeding_duration'] = round(min(0, latest_remaining - additional_leaves_duration), 2)
 

--- a/addons/hr_holidays/models/hr_employee_base.py
+++ b/addons/hr_holidays/models/hr_employee_base.py
@@ -48,7 +48,7 @@ class HrEmployeeBase(models.AbstractModel):
         data = self.env['hr.leave.allocation']._read_group([
             ('employee_id', 'in', self.ids),
             ('holiday_status_id.active', '=', True),
-            ('holiday_status_id.requires_allocation', '=', 'yes'),
+            ('holiday_status_id.requires_allocation', '=', True),
             ('state', '=', 'validate'),
             ('date_from', '<=', current_date),
             '|',
@@ -69,7 +69,7 @@ class HrEmployeeBase(models.AbstractModel):
             employee_remaining_leaves = 0
             employee_max_leaves = 0
             for leave_type in leaves_taken[employee]:
-                if leave_type.requires_allocation == 'no' or not leave_type.show_on_dashboard:
+                if not leave_type.requires_allocation or leave_type.hide_on_dashboard:
                     continue
                 for allocation in leaves_taken[employee][leave_type]:
                     if allocation and allocation.date_from <= current_date\

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -80,7 +80,7 @@ class HrLeave(models.Model):
 
         lt = self.env['hr.leave.type']
         if self.env.context.get('holiday_status_display_name', True) and 'holiday_status_id' in fields_list and not defaults.get('holiday_status_id'):
-            domain = ['|', ('requires_allocation', '=', 'no'), ('has_valid_allocation', '=', True)]
+            domain = ['|', ('requires_allocation', '=', False), ('has_valid_allocation', '=', True)]
             if defaults.get('request_unit_hours'):
                 domain.append(('request_unit', '=', 'hour'))
             lt = self.env['hr.leave.type'].search(domain, limit=1, order='sequence')
@@ -142,7 +142,7 @@ class HrLeave(models.Model):
         required=True, readonly=False,
         domain="""[
             '|',
-                ('requires_allocation', '=', 'no'),
+                ('requires_allocation', '=', False),
                 ('has_valid_allocation', '=', True),
         ]""",
         tracking=True)
@@ -349,7 +349,7 @@ class HrLeave(models.Model):
     def _compute_from_employee_id(self):
         for holiday in self:
             holiday.manager_id = holiday.employee_id.parent_id.id
-            if holiday.holiday_status_id.requires_allocation == 'no':
+            if not holiday.holiday_status_id.requires_allocation:
                 continue
             if not holiday.employee_id:
                 holiday.holiday_status_id = False
@@ -638,7 +638,7 @@ Attempting to double-book your time off won't magically make your vacation 2x be
         for leave in self:
             sorted_leaves[(leave.holiday_status_id, leave.date_from.date())] |= leave
         for (leave_type, date_from), leaves in sorted_leaves.items():
-            if leave_type.requires_allocation == 'no':
+            if not leave_type.requires_allocation:
                 continue
             employees = leaves.employee_id
             leave_data = leave_type.get_allocation_data(employees, date_from)

--- a/addons/hr_holidays/models/hr_leave_allocation.py
+++ b/addons/hr_holidays/models/hr_leave_allocation.py
@@ -23,15 +23,15 @@ class HrLeaveAllocation(models.Model):
 
     def _default_holiday_status_id(self):
         if self.env.user.has_group('hr_holidays.group_hr_holidays_user'):
-            domain = [('has_valid_allocation', '=', True), ('requires_allocation', '=', 'yes')]
+            domain = [('has_valid_allocation', '=', True), ('requires_allocation', '=', True)]
         else:
-            domain = [('has_valid_allocation', '=', True), ('requires_allocation', '=', 'yes'), ('employee_requests', '=', 'yes')]
+            domain = [('has_valid_allocation', '=', True), ('requires_allocation', '=', True), ('employee_requests', '=', True)]
         return self.env['hr.leave.type'].search(domain, limit=1)
 
     def _domain_holiday_status_id(self):
         if self.env.user.has_group('hr_holidays.group_hr_holidays_user'):
-            return [('requires_allocation', '=', 'yes')]
-        return [('employee_requests', '=', 'yes')]
+            return [('requires_allocation', '=', True)]
+        return [('employee_requests', '=', True)]
 
     def _domain_employee_id(self):
         domain = [('company_id', 'in', self.env.companies.ids)]
@@ -756,7 +756,7 @@ class HrLeaveAllocation(models.Model):
 
     @api.ondelete(at_uninstall=False)
     def _unlink_if_no_leaves(self):
-        if any(allocation.holiday_status_id.requires_allocation == 'yes' and allocation.leaves_taken > 0 for allocation in self):
+        if any(allocation.holiday_status_id.requires_allocation and allocation.leaves_taken > 0 for allocation in self):
             raise UserError(_('You cannot delete an allocation request which has some validated leaves.'))
 
     def copy(self, default=None):

--- a/addons/hr_holidays/models/hr_leave_type.py
+++ b/addons/hr_holidays/models/hr_leave_type.py
@@ -12,6 +12,7 @@ from dateutil.relativedelta import relativedelta
 
 from odoo import api, fields, models
 from odoo.exceptions import UserError, ValidationError
+from odoo.fields import Domain
 from odoo.tools import format_date, frozendict
 from odoo.tools.translate import _
 from odoo.tools.float_utils import float_round
@@ -38,7 +39,7 @@ class HrLeaveType(models.Model):
     def _model_sorting_key(self, leave_type):
         remaining = leave_type.virtual_remaining_leaves > 0
         taken = leave_type.leaves_taken > 0
-        return -1 * leave_type.sequence, leave_type.employee_requests == 'no' and remaining, leave_type.employee_requests == 'yes' and remaining, taken
+        return -1 * leave_type.sequence, not leave_type.employee_requests and remaining, leave_type.employee_requests and remaining, taken
 
     name = fields.Char('Time Off Type', required=True, translate=True)
     sequence = fields.Integer(default=100,
@@ -48,7 +49,7 @@ class HrLeaveType(models.Model):
     icon_id = fields.Many2one('ir.attachment', string='Cover Image', domain="[('res_model', '=', 'hr.leave.type'), ('res_field', '=', 'icon_id')]")
     active = fields.Boolean('Active', default=True,
                             help="If the active field is set to false, it will allow you to hide the time off type without removing it.")
-    show_on_dashboard = fields.Boolean(default=True, help="Non-visible allocations can still be selected when taking a leave, but will simply not be displayed on the leave dashboard.")
+    hide_on_dashboard = fields.Boolean(default=False, string="Hide On Dashboard", help="Non-visible allocations can still be selected when taking a leave, but will simply not be displayed on the leave dashboard.")
 
     # employee specific computed data
     max_leaves = fields.Float(compute='_compute_leaves', string='Maximum Allowed', search='_search_max_leaves',
@@ -74,28 +75,22 @@ class HrLeaveType(models.Model):
                                  domain=lambda self: [('id', 'in', self.env.companies.country_id.ids)])
     country_code = fields.Char(related='country_id.code', depends=['country_id'], readonly=True)
     responsible_ids = fields.Many2many(
-        'res.users', 'hr_leave_type_res_users_rel', 'hr_leave_type_id', 'res_users_id', string='Notified Time Off Officer',
+        'res.users', 'hr_leave_type_res_users_rel', 'hr_leave_type_id', 'res_users_id', string='Notify HR',
         domain=lambda self: [('all_group_ids', 'in', self.env.ref('hr_holidays.group_hr_holidays_user').id),
                              ('share', '=', False),
                              ('company_ids', 'in', self.env.company.id)],
         help="Choose the Time Off Officers who will be notified to approve allocation or Time Off Request. If empty, nobody will be notified")
     leave_validation_type = fields.Selection([
-        ('no_validation', 'No Validation'),
+        ('no_validation', 'None needed'),
         ('hr', 'By Time Off Officer'),
         ('manager', "By Employee's Approver"),
         ('both', "By Employee's Approver and Time Off Officer")], default='hr', string='Time Off Validation')
-    requires_allocation = fields.Selection([
-        ('yes', 'Yes'),
-        ('no', 'No Limit')], default="yes", required=True, string='Requires allocation',
-        help="""Yes: Time off requests need to have a valid allocation.\n
-              No Limit: Time Off requests can be taken without any prior allocation.""")
-    employee_requests = fields.Selection([
-        ('yes', 'Extra Days Requests Allowed'),
-        ('no', 'Not Allowed')], default="no", required=True, string="Employee Requests",
-        help="""If allowed, Employees can create their own allocation requests, \
-            and their Approver can do so for assigned employees.""")
+    requires_allocation = fields.Boolean(default=True, required=True, string='Requires allocation')
+    employee_requests = fields.Boolean(default=False, required=True, string="Allow Employee Requests",
+        help="""Extra Days Requests Allowed: User can request an allocation for himself.\n
+        Not Allowed: User cannot request an allocation.""")
     allocation_validation_type = fields.Selection([
-        ('no_validation', 'No Validation'),
+        ('no_validation', 'None needed'),
         ('hr', 'By Time Off Officer'),
         ('manager', "By Employee's Approver"),
         ('both', "By Employee's Approver and Time Off Officer")], default='hr', string='Approval',
@@ -109,10 +104,10 @@ class HrLeaveType(models.Model):
                                  help="The distinction between working time (ex. Attendance) and absence (ex. Training) will be used in the computation of Accrual's plan rate.")
     request_unit = fields.Selection([
         ('day', 'Day'),
-        ('half_day', 'Half Day'),
+        ('half_day', 'Half-Day'),
         ('hour', 'Hours')], default='day', string='Take Time Off in', required=True)
     unpaid = fields.Boolean('Is Unpaid', default=False)
-    include_public_holidays_in_duration = fields.Boolean('Public Holiday Included', default=False, help="Public holidays should be counted in the leave duration when applying for leaves")
+    include_public_holidays_in_duration = fields.Boolean('Ignore Public Holidays', default=False, help="Public holidays should be counted in the leave duration when applying for leaves")
     leave_notif_subtype_id = fields.Many2one('mail.message.subtype', string='Time Off Notification Subtype', default=lambda self: self.env.ref('hr_holidays.mt_leave', raise_if_not_found=False))
     allocation_notif_subtype_id = fields.Many2one('mail.message.subtype', string='Allocation Notification Subtype', default=lambda self: self.env.ref('hr_holidays.mt_leave_allocation', raise_if_not_found=False))
     support_document = fields.Boolean(string='Supporting Document')
@@ -208,17 +203,22 @@ class HrLeaveType(models.Model):
         date_from = self._context.get('default_date_from', fields.Datetime.today())
         date_to = self._context.get('default_date_to', fields.Datetime.today())
         employee_id = self._context.get('default_employee_id', self._context.get('employee_id', self.env.user.employee_id.id))
-        for leave_type in self:
-            if leave_type.requires_allocation == 'yes':
-                allocations = self.env['hr.leave.allocation'].search([
-                    ('holiday_status_id', '=', leave_type.id),
-                    ('allocation_type', '=', 'accrual'),
-                    ('employee_id', '=', employee_id),
-                    ('date_from', '<=', date_from),
-                    '|',
+        allocation_by_leave_type = dict(self.env['hr.leave.allocation']._read_group(
+            domain=Domain([
+                ('holiday_status_id', 'in', self.filtered(lambda leave_type: leave_type.requires_allocation).ids),
+                ('allocation_type', '=', 'accrual'),
+                ('employee_id', '=', employee_id),
+                ('date_from', '<=', date_from),
+                '|',
                     ('date_to', '>=', date_to),
                     ('date_to', '=', False),
-                ])
+            ]),
+            groupby=['holiday_status_id'],
+            aggregates=['id:recordset'],
+        ))
+        for leave_type in self:
+            if leave_type.requires_allocation:
+                allocations = allocation_by_leave_type.get(leave_type.id, self.env['hr.leave.allocation'])
                 allowed_excess = leave_type.max_allowed_negative if leave_type.allows_negative else 0
                 allocations = allocations.filtered(lambda alloc:
                     alloc.allocation_type == 'accrual'
@@ -362,7 +362,7 @@ class HrLeaveType(models.Model):
     @api.depends('employee_requests')
     def _compute_allocation_validation_type(self):
         for leave_type in self:
-            if leave_type.employee_requests == 'no':
+            if not leave_type.employee_requests:
                 leave_type.allocation_validation_type = 'hr'
 
     def requested_display_name(self):
@@ -376,7 +376,7 @@ class HrLeaveType(models.Model):
             return super()._compute_display_name()
         for record in self:
             name = record.name
-            if record.requires_allocation == "yes" and not self._context.get("from_manager_leave_form"):
+            if record.requires_allocation and not self._context.get("from_manager_leave_form"):
                 remaining_time = float_round(record.virtual_remaining_leaves, precision_digits=2) or 0.0
                 maximum = float_round(record.max_leaves, precision_digits=2) or 0.0
 
@@ -473,7 +473,7 @@ class HrLeaveType(models.Model):
             ('company_id', '=', False),
         ]
         if not hidden_allocations:
-            domain.append(('show_on_dashboard', '=', True))
+            domain.append(('hide_on_dashboard', '=', False))
         leave_types = self.search(domain, order='id')
         employee = self.env['hr.employee']._get_contextual_employee()
         if employee:
@@ -492,7 +492,7 @@ class HrLeaveType(models.Model):
         allocations_leaves_consumed, extra_data = employees.with_context(
             ignored_leave_ids=self.env.context.get('ignored_leave_ids')
         )._get_consumed_leaves(self, target_date)
-        leave_type_requires_allocation = self.filtered(lambda lt: lt.requires_allocation == 'yes')
+        leave_type_requires_allocation = self.filtered(lambda lt: lt.requires_allocation)
 
         for employee in employees:
             for leave_type in leave_type_requires_allocation:

--- a/addons/hr_holidays/models/resource.py
+++ b/addons/hr_holidays/models/resource.py
@@ -70,7 +70,7 @@ class ResourceCalendarLeaves(models.Model):
         for previous_duration, leave, state in zip(previous_durations, leaves, previous_states):
             duration_difference = previous_duration - leave.number_of_days
             message = False
-            if duration_difference > 0 and leave.holiday_status_id.requires_allocation == 'yes':
+            if duration_difference > 0 and leave.holiday_status_id.requires_allocation:
                 message = _("Due to a change in global time offs, you have been granted %s day(s) back.", duration_difference)
             if leave.number_of_days > previous_duration\
                     and (not sick_time_status or leave.holiday_status_id not in sick_time_status):
