PR: https://github.com/odoo/odoo/pull/116005

From: 2a37a3d06fca721350e67b3709d17ed3fee65bdc
From: Julien Carion (juca)
Date: 2023-06-22 13:40:43

Structural Changes: 3
Total Changes: 62

[REF] web, base, mail: move res.users.settings from mail to base

This commit moves and adapt the res.users.settings model from mail to base and
and allows to access and modify its content with web's user service.
This allows to access user settings without needing the mail module.

closes odoo/odoo#116005

Related: odoo/enterprise#38360
Signed-off-by: MichaÃ«l Mattiello (mcm) <mcm@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/__init__.py
+++ b/odoo/addons/base/models/__init__.py
@@ -43,6 +43,7 @@ from . import res_config
 from . import res_currency
 from . import res_company
 from . import res_users
+from . import res_users_settings
 from . import res_users_deletion
 
 from . import decimal_precision

--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -326,6 +326,9 @@ class Users(models.Model):
          help="External user with limited access, created only for the purpose of sharing data.")
     companies_count = fields.Integer(compute='_compute_companies_count', string="Number of Companies")
     tz_offset = fields.Char(compute='_compute_tz_offset', string='Timezone offset', invisible=True)
+    res_users_settings_ids = fields.One2many('res.users.settings', 'user_id')
+    # Provide a target for relateds that is not a x2Many field.
+    res_users_settings_id = fields.Many2one('res.users.settings', string="Settings", compute='_compute_res_users_settings_id', search='_search_res_users_settings_id')
 
     # Special behavior for this field: res.company.search() will only return the companies
     # available to the current user (should be the user's companies?), when the user_preference
@@ -459,6 +462,15 @@ class Users(models.Model):
             user.rules_count = len(groups.rule_groups)
             user.groups_count = len(groups)
 
+    @api.depends('res_users_settings_ids')
+    def _compute_res_users_settings_id(self):
+        for user in self:
+            user.res_users_settings_id = user.res_users_settings_ids and user.res_users_settings_ids[0]
+
+    @api.model
+    def _search_res_users_settings_id(self, operator, operand):
+        return [('res_users_settings_ids', operator, operand)]
+
     @api.onchange('login')
     def on_change_login(self):
         if self.login and tools.single_email_re.match(self.login):

--- a/None
+++ b/odoo/addons/base/models/res_users_settings.py
@@ -0,0 +1,47 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class ResUsersSettings(models.Model):
+    _name = 'res.users.settings'
+    _description = 'User Settings'
+    _rec_name = 'user_id'
+
+    user_id = fields.Many2one('res.users', string="User", required=True, readonly=True, ondelete='cascade')
+
+    _sql_constraints = [
+        ('unique_user_id', 'UNIQUE(user_id)', 'One user should only have one user settings.')
+    ]
+
+    @api.model
+    def _find_or_create_for_user(self, user):
+        settings = user.sudo().res_users_settings_ids
+        if not settings:
+            settings = self.sudo().create({'user_id': user.id})
+        return settings
+
+    def _res_users_settings_format(self, fields_to_format=None):
+        self.ensure_one()
+        if not fields_to_format:
+            fields_to_format = [name for name, field in self._fields.items() if name == 'id' or not field.automatic]
+        res = self._format_settings(fields_to_format)
+        return res
+
+    def _format_settings(self, fields_to_format):
+        res = self._read_format(fnames=fields_to_format)[0]
+        if 'user_id' in fields_to_format:
+            res = self._read_format(fnames=fields_to_format)[0]
+            res['user_id'] = {'id': self.user_id.id}
+        return res
+
+    def set_res_users_settings(self, new_settings):
+        self.ensure_one()
+        changed_settings = {}
+        for setting in new_settings.keys():
+            if setting in self._fields and new_settings[setting] != self[setting]:
+                changed_settings[setting] = new_settings[setting]
+        self.write(changed_settings)
+        formated = self._res_users_settings_format([*changed_settings.keys(), 'id'])
+        return formated

--- a/odoo/addons/base/security/ir.model.access.csv
+++ b/odoo/addons/base/security/ir.model.access.csv
@@ -78,6 +78,8 @@
 "access_res_users_apikeys_description_employee","API key wizard employees","model_res_users_apikeys_description","group_user",1,0,1,0
 "access_res_users_apikeys_description_portal","API key wizard","model_res_users_apikeys_description","group_portal",1,0,1,0
 "access_res_users_apikeys_show_employee","API key result employees","model_res_users_apikeys_show","group_user",1,0,1,0
+access_res_users_settings_all,res.users.settings,model_res_users_settings,,0,0,0,0
+access_res_users_settings_user,res.users.settings,model_res_users_settings,group_user,1,1,1,1
 "access_ir_asset_group_system","ir_asset_group_system","model_ir_asset","group_system",1,1,1,1
 "access_ir_actions_group_system","ir_actions_group_system","model_ir_actions_actions","group_system",1,1,1,1
 "access_ir_actions_act_window_system","ir_actions_act_window_system","model_ir_actions_act_window","group_system",1,1,1,1
