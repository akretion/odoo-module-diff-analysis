PR: https://github.com/odoo/odoo/pull/75475

From: 24713b76b597345abcbf57925e9085b6e34fe187
From: Yannick Tivisse
Date: 2021-08-25 12:20:39

Structural Changes: 21
Total Changes: 132

[REV] fleet: Revert multiple fleet mechanism

I don't get why you don't get it...

Partial revert of the taskID: 2415309
Com PR: https://github.com/odoo/odoo/pull/70313
Ent PR: https://github.com/odoo/enterprise/pull/18114
Upg PR: https://github.com/odoo/upgrade/pull/2447

closes odoo/odoo#75475

Related: odoo/enterprise#20406
Related: odoo/upgrade#2765
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/fleet/models/__init__.py
+++ b/addons/fleet/models/__init__.py
@@ -2,8 +2,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from . import fleet_service_type
-from . import fleet_category
-from . import fleet_category_tag
 from . import fleet_vehicle
 from . import fleet_vehicle_assignation_log
 from . import fleet_vehicle_log_contract

--- a/addons/fleet/models/fleet_category.py
+++ b/None
@@ -1,90 +0,0 @@
-# -*- coding:utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import _, api, fields, models
-
-class FleetCategory(models.Model):
-    _name = 'fleet.category'
-    _description = 'Vehicle Fleet'
-
-    def _get_default_favorite_user_ids(self):
-        return [(6, 0, [self.env.uid])]
-
-    name = fields.Char()
-    active = fields.Boolean(default=True)
-    tag_ids = fields.Many2many('fleet.category.tag', string='Tags')
-    description = fields.Text()
-    manager_id = fields.Many2one(
-        'res.users', string='Fleet Manager',
-        default=lambda self: self.env.user,
-        domain=lambda self: [('groups_id', 'in', self.env.ref('fleet.fleet_group_manager').id)],
-    )
-
-    company_id = fields.Many2one(
-        'res.company', string='Company',
-        default=lambda self: self.env.company,
-    )
-    color = fields.Integer()
-
-    vehicle_ids = fields.One2many('fleet.vehicle', 'fleet_id', string='Vehicles')
-    car_count = fields.Integer(compute='_compute_vehicle_counts')
-    bike_count = fields.Integer(compute='_compute_vehicle_counts')
-
-    favorite_user_ids = fields.Many2many('res.users', default=_get_default_favorite_user_ids)
-    is_favorite = fields.Boolean(
-        compute='_compute_is_favorite', inverse='_inverse_is_favorite',
-        string='Add to favorite',
-        help='Whether this fleet is in your favorites or not.',
-    )
-
-    @api.depends('vehicle_ids')
-    def _compute_vehicle_counts(self):
-        for fleet in self:
-            car_ids = fleet.vehicle_ids.filtered(lambda v: v.model_id.vehicle_type == 'car')
-            fleet.car_count = len(car_ids)
-            bike_ids = fleet.vehicle_ids - car_ids
-            fleet.bike_count = len(bike_ids)
-
-    def _compute_is_favorite(self):
-        for fleet in self:
-            fleet.is_favorite = self.env.user in fleet.favorite_user_ids
-
-    def _inverse_is_favorite(self):
-        # We may not have write access
-        favorites = not_favorites = self.env['fleet.category'].sudo()
-        for category in self:
-            if self.env.user in category.favorite_user_ids:
-                favorites |= category
-            else:
-                not_favorites |= category
-
-        not_favorites.write({'favorite_user_ids': [(4, self.env.uid)]})
-        favorites.write({'favorite_user_ids': [(3, self.env.uid)]})
-
-    def toggle_active(self):
-        res = super().toggle_active()
-        archived = self.filtered(lambda c: not c.active)
-        for category in archived:
-            category.vehicle_ids.write({
-                'fleet_id': False,
-            })
-        return res
-
-    def action_view_vehicles(self):
-        self.ensure_one()
-        return {
-            'type': 'ir.actions.act_window',
-            'name': _('Fleet Vehicles'),
-            'res_model': 'fleet.vehicle',
-            'view_mode': 'tree,kanban,form',
-            'views': [[False, 'list'], [False, 'kanban'], [False, 'form']],
-            'domain': [('fleet_id', '=', self.id)],
-            'context': {'default_fleet_id': self.id},
-        }
-
-    def write(self, vals):
-        # directly compute is_favorite to dodge allow write access right
-        if 'is_favorite' in vals:
-            vals.pop('is_favorite')
-            self._fields['is_favorite'].determine_inverse(self)
-        return super().write(vals) if vals else True

--- a/addons/fleet/models/fleet_category_tag.py
+++ b/None
@@ -1,15 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-class FleetCategoryTag(models.Model):
-    _name = 'fleet.category.tag'
-    _description = 'Vehicle Fleet Category'
-
-    _sql_constraints = [
-        ('unique_name', 'UNIQUE(name)', 'Name must be unique.'),
-    ]
-
-    name = fields.Char()
-    color = fields.Integer()

--- a/addons/fleet/models/fleet_vehicle.py
+++ b/addons/fleet/models/fleet_vehicle.py
@@ -29,19 +29,14 @@ class FleetVehicle(models.Model):
     name = fields.Char(compute="_compute_vehicle_name", store=True)
     description = fields.Html("Vehicle Description", help="Add a note about this vehicle")
     active = fields.Boolean('Active', default=True, tracking=True)
-    fleet_id = fields.Many2one('fleet.category', string='Fleet')
     manager_id = fields.Many2one(
-        'res.users', 'Manager',
+        'res.users', 'Fleet Manager',
         compute='_compute_manager_id', store=True, readonly=False,
         domain=lambda self: [('groups_id', 'in', self.env.ref('fleet.fleet_group_manager').id)],
     )
-    #Company should always be the same as fleet_id, but since we do have a case where fleet_id is null
-    # and we want the vehicle to be company bound we need to store it aswell, fleet_id.company_id is not editable
     company_id = fields.Many2one(
         'res.company', 'Company',
-        compute='_compute_company_id',
         default=lambda self: self.env.company,
-        store=True,
     )
     currency_id = fields.Many2one('res.currency', related='company_id.currency_id')
     country_id = fields.Many2one('res.country', related='company_id.country_id')
@@ -50,8 +45,8 @@ class FleetVehicle(models.Model):
         help='License plate number of the vehicle (i = plate number for a car)')
     vin_sn = fields.Char('Chassis Number', help='Unique number written on the vehicle motor (VIN/SN number)', copy=False)
     trailer_hook = fields.Boolean(default=False, string='Trailer Hitch', compute='_compute_model_fields', store=True, readonly=False)
-    driver_id = fields.Many2one('res.partner', 'Driver', tracking=True, help='Driver of the vehicle', copy=False)
-    future_driver_id = fields.Many2one('res.partner', 'Future Driver', tracking=True, help='Next Driver of the vehicle', copy=False, domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
+    driver_id = fields.Many2one('res.partner', 'Driver', tracking=True, help='Driver address of the vehicle', copy=False)
+    future_driver_id = fields.Many2one('res.partner', 'Future Driver', tracking=True, help='Next Driver Address of the vehicle', copy=False, domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
     model_id = fields.Many2one('fleet.vehicle.model', 'Model',
         tracking=True, required=True, help='Model of the vehicle')
 
@@ -115,18 +110,6 @@ class FleetVehicle(models.Model):
     electric_assistance = fields.Boolean(compute='_compute_model_fields', store=True, readonly=False)
     frame_size = fields.Float()
 
-    @api.depends('fleet_id')
-    def _compute_manager_id(self):
-        for record in self:
-            record.manager_id = record.fleet_id.manager_id
-
-    @api.depends('fleet_id')
-    def _compute_company_id(self):
-        for record in self:
-            # Retain company when fleet is unset
-            if record.fleet_id:
-                record.company_id = record.fleet_id.company_id
-
     @api.depends('model_id')
     def _compute_model_fields(self):
         '''

--- a/addons/fleet/models/fleet_vehicle_log_contract.py
+++ b/addons/fleet/models/fleet_vehicle_log_contract.py
@@ -35,7 +35,7 @@ class FleetVehicleLogContract(models.Model):
         help='Date when the coverage of the contract expirates (by default, one year after begin date)')
     days_left = fields.Integer(compute='_compute_days_left', string='Warning Date')
     insurer_id = fields.Many2one('res.partner', 'Vendor')
-    purchaser_id = fields.Many2one(related='vehicle_id.driver_id', string='Current Driver')
+    purchaser_id = fields.Many2one(related='vehicle_id.driver_id', string='Driver')
     ins_ref = fields.Char('Reference', size=64, copy=False)
     state = fields.Selection(
         [('futur', 'Incoming'),
