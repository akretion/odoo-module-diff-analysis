PR: https://github.com/odoo/odoo/pull/

From: ffee5a914b3944214089728ee114fd4f54d597ca
From: Kevin Baptiste
Date: 2021-03-30 07:25:51

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = 'payment.acquirer'
-    _inherit = 'payment.transaction'

Total Changes: 363

[REF] payment_payulatam: migrate PayULatam to the new payment API

See the merge commit for more details.

task-2333038

================================= pseudo patch: =================================

--- a/addons/payment_payulatam/models/__init__.py
+++ b/addons/payment_payulatam/models/__init__.py
@@ -1,4 +1,4 @@
-# -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment
+from . import payment_acquirer
+from . import payment_transaction

--- a/addons/payment_payulatam/models/payment.py
+++ b/None
@@ -1,143 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-import logging
-import uuid
-
-from hashlib import md5
-from werkzeug import urls
-
-from odoo import api, fields, models, _
-from odoo.addons.payment.models.payment_acquirer import ValidationError
-from odoo.tools.float_utils import float_compare
-
-
-_logger = logging.getLogger(__name__)
-
-
-class PaymentAcquirerPayulatam(models.Model):
-    _inherit = 'payment.acquirer'
-
-    provider = fields.Selection(selection_add=[
-        ('payulatam', 'PayU Latam')
-    ], ondelete={'payulatam': 'set default'})
-    payulatam_merchant_id = fields.Char(string="PayU Latam Merchant ID", required_if_provider='payulatam', groups='base.group_user')
-    payulatam_account_id = fields.Char(string="PayU Latam Account ID", required_if_provider='payulatam', groups='base.group_user')
-    payulatam_api_key = fields.Char(string="PayU Latam API Key", required_if_provider='payulatam', groups='base.group_user')
-
-    def _get_payulatam_urls(self, environment):
-        """ PayUlatam URLs"""
-        if environment == 'prod':
-            return 'https://checkout.payulatam.com/ppp-web-gateway-payu/'
-        return 'https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/'
-
-    def _payulatam_generate_sign(self, inout, values):
-        if inout not in ('in', 'out'):
-            raise Exception("Type must be 'in' or 'out'")
-
-        if inout == 'in':
-            data_string = ('~').join((self.payulatam_api_key, self.payulatam_merchant_id, values['referenceCode'],
-                                      str(values['amount']), values['currency']))
-        else:
-            data_string = ('~').join((self.payulatam_api_key, self.payulatam_merchant_id, values['referenceCode'],
-                                      str(float(values.get('TX_VALUE'))), values['currency'], values.get('transactionState')))
-        return md5(data_string.encode('utf-8')).hexdigest()
-
-    def payulatam_form_generate_values(self, values):
-        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')
-        tx = self.env['payment.transaction'].search([('reference', '=', values.get('reference'))])
-        # payulatam will not allow any payment twise even if payment was failed last time.
-        # so, replace reference code if payment is not done or pending.
-        if tx.state not in ['done', 'pending']:
-            tx.reference = str(uuid.uuid4())
-        payulatam_values = dict(
-            values,
-            merchantId=self.payulatam_merchant_id,
-            accountId=self.payulatam_account_id,
-            description=values.get('reference'),
-            referenceCode=tx.reference,
-            amount=values['amount'],
-            tax='0',  # This is the transaction VAT. If VAT zero is sent the system, 19% will be applied automatically. It can contain two decimals. Eg 19000.00. In the where you do not charge VAT, it should should be set as 0.
-            taxReturnBase='0',
-            currency=values['currency'].name,
-            buyerEmail=values['partner_email'],
-            responseUrl=urls.url_join(base_url, '/payment/payulatam/response'),
-        )
-        payulatam_values['signature'] = self._payulatam_generate_sign("in", payulatam_values)
-        return payulatam_values
-
-    def payulatam_get_form_action_url(self):
-        self.ensure_one()
-        environment = 'prod' if self.state == 'enabled' else 'test'
-        return self._get_payulatam_urls(environment)
-
-
-class PaymentTransactionPayulatam(models.Model):
-    _inherit = 'payment.transaction'
-
-    @api.model
-    def _payulatam_form_get_tx_from_data(self, data):
-        """ Given a data dict coming from payulatam, verify it and find the related
-        transaction record. """
-        reference, txnid, sign = data.get('referenceCode'), data.get('transactionId'), data.get('signature')
-        if not reference or not txnid or not sign:
-            raise ValidationError(_('PayU Latam: received data with missing reference (%s) or transaction id (%s) or sign (%s)') % (reference, txnid, sign))
-
-        transaction = self.search([('reference', '=', reference)])
-
-        if not transaction:
-            error_msg = (_('PayU Latam: received data for reference %s; no order found') % (reference))
-            raise ValidationError(error_msg)
-        elif len(transaction) > 1:
-            error_msg = (_('PayU Latam: received data for reference %s; multiple orders found') % (reference))
-            raise ValidationError(error_msg)
-
-        # verify shasign
-        sign_check = transaction.acquirer_id._payulatam_generate_sign('out', data)
-        if sign_check.upper() != sign.upper():
-            raise ValidationError(('PayU Latam: invalid sign, received %s, computed %s, for data %s') % (sign, sign_check, data))
-        return transaction
-
-    def _payulatam_form_get_invalid_parameters(self, data):
-        invalid_parameters = []
-
-        if self.acquirer_reference and data.get('transactionId') != self.acquirer_reference:
-            invalid_parameters.append(('Reference code', data.get('transactionId'), self.acquirer_reference))
-        if float_compare(float(data.get('TX_VALUE', '0.0')), self.amount, 2) != 0:
-            invalid_parameters.append(('Amount', data.get('TX_VALUE'), '%.2f' % self.amount))
-        if data.get('merchantId') != self.acquirer_id.payulatam_merchant_id:
-            invalid_parameters.append(('Merchant Id', data.get('merchantId'), self.acquirer_id.payulatam_merchant_id))
-        return invalid_parameters
-
-    def _payulatam_form_validate(self, data):
-        self.ensure_one()
-
-        status = data.get('lapTransactionState') or data.find('transactionResponse').find('state').text
-        res = {
-            'acquirer_reference': data.get('transactionId') or data.find('transactionResponse').find('transactionId').text,
-            'state_message': data.get('message') or ""
-        }
-
-        if status == 'APPROVED':
-            _logger.info('Validated PayU Latam payment for tx %s: set as done' % (self.reference))
-            res.update(state='done', date=fields.Datetime.now())
-            self._set_transaction_done()
-            self.write(res)
-            self.execute_callback()
-            return True
-        elif status == 'PENDING':
-            _logger.info('Received notification for PayU Latam payment %s: set as pending' % (self.reference))
-            res.update(state='pending')
-            self._set_transaction_pending()
-            return self.write(res)
-        elif status in ['EXPIRED', 'DECLINED']:
-            _logger.info('Received notification for PayU Latam payment %s: set as Cancel' % (self.reference))
-            res.update(state='cancel')
-            self._set_transaction_cancel()
-            return self.write(res)
-        else:
-            error = 'Received unrecognized status for PayU Latam payment %s: %s, set as error' % (self.reference, status)
-            _logger.info(error)
-            res.update(state='cancel', state_message=error)
-            self._set_transaction_cancel()
-            return self.write(res)

--- a/None
+++ b/addons/payment_payulatam/models/payment_acquirer.py
@@ -0,0 +1,68 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from hashlib import md5
+
+from odoo import api, fields, models
+from odoo.tools.float_utils import float_repr
+
+SUPPORTED_CURRENCIES = ('ARS', 'BRL', 'CLP', 'COP', 'MXN', 'PEN', 'USD')
+
+
+class PaymentAcquirer(models.Model):
+    _inherit = 'payment.acquirer'
+
+    provider = fields.Selection(
+        selection_add=[('payulatam', 'PayU Latam')], ondelete={'payulatam': 'set default'})
+    payulatam_merchant_id = fields.Char(
+        string="PayU Latam Merchant ID",
+        help="The ID solely used to identify the account with PayULatam",
+        required_if_provider='payulatam')
+    payulatam_account_id = fields.Char(
+        string="PayU Latam Account ID",
+        help="The ID solely used to identify the country-dependent shop with PayULatam",
+        required_if_provider='payulatam')
+    payulatam_api_key = fields.Char(
+        string="PayU Latam API Key", required_if_provider='payulatam',
+        groups='base.group_system')
+
+    @api.model
+    def _get_compatible_acquirers(self, *args, currency_id=None, **kwargs):
+        """ Override of payment to unlist PayU Latam acquirers for unsupported currencies. """
+        acquirers = super()._get_compatible_acquirers(*args, currency_id=currency_id, **kwargs)
+
+        currency = self.env['res.currency'].browse(currency_id).exists()
+        if currency and currency.name not in SUPPORTED_CURRENCIES:
+            acquirers = acquirers.filtered(lambda a: a.provider != 'payulatam')
+
+        return acquirers
+
+    def _payulatam_generate_sign(self, values, incoming=True):
+        """ Generate the signature for incoming or outgoing communications.
+
+        :param dict values: The values used to generate the signature
+        :param bool incoming: Whether the signature must be generated for an incoming (PayU Latam to
+                              Odoo) or outgoing (Odoo to PayU Latam) communication.
+        :return: The signature
+        :rtype: str
+        """
+        if incoming:
+            data_string = '~'.join([
+                self.payulatam_api_key,
+                self.payulatam_merchant_id,
+                values['referenceCode'],
+                # Observation from the sandbox: PayU Latam is using a rounded value to generate
+                # their signature despite saying otherwise in the doc:
+                # http://developers.payulatam.com/en/web_checkout/integration.html
+                float_repr(float(values.get('TX_VALUE')), 1),
+                values['currency'],
+                values.get('transactionState'),
+            ])
+        else:
+            data_string = '~'.join([
+                self.payulatam_api_key,
+                self.payulatam_merchant_id,
+                values['referenceCode'],
+                float_repr(float(values['amount']), 1),
+                values['currency'],
+            ])
+        return md5(data_string.encode('utf-8')).hexdigest()

--- a/None
+++ b/addons/payment_payulatam/models/payment_transaction.py
@@ -0,0 +1,148 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import logging
+
+from werkzeug import urls
+
+from odoo import _, api, models
+from odoo.exceptions import ValidationError
+from odoo.tools.float_utils import float_repr
+
+from odoo.addons.payment import utils as payment_utils
+from odoo.addons.payment_payulatam.controllers.main import PayuLatamController
+
+_logger = logging.getLogger(__name__)
+
+
+class PaymentTransaction(models.Model):
+    _inherit = 'payment.transaction'
+
+    @api.model
+    def _compute_reference(self, provider, prefix=None, separator='-', **kwargs):
+        """ Override of payment to ensure that PayU Latam requirements for references are satisfied.
+
+        PayU Latam requirements for transaction are as follows:
+        - References must be unique at provider level for a given merchant account.
+          This is satisfied by singularizing the prefix with the current datetime. If two
+          transactions are created simultaneously, `_compute_reference` ensures the uniqueness of
+          references by suffixing a sequence number.
+
+        :param str provider: The provider of the acquirer handling the transaction
+        :param str prefix: The custom prefix used to compute the full reference
+        :param str separator: The custom separator used to separate the prefix from the suffix
+        :return: The unique reference for the transaction
+        :rtype: str
+        """
+        if provider == 'payulatam':
+            prefix = payment_utils.singularize_reference_prefix(prefix=prefix, separator=separator)
+        return super()._compute_reference(provider, prefix=prefix, separator=separator, **kwargs)
+
+    def _get_specific_rendering_values(self, processing_values):
+        """ Override of payment to return Payulatam-specific rendering values.
+
+        Note: self.ensure_one() from `_get_processing_values`
+
+        :param dict processing_values: The generic and specific processing values of the transaction
+        :return: The dict of acquirer-specific processing values
+        :rtype: dict
+        """
+        res = super()._get_specific_rendering_values(processing_values)
+        if self.provider != 'payulatam':
+            return res
+
+        api_url = 'https://checkout.payulatam.com/ppp-web-gateway-payu/' \
+            if self.acquirer_id.state == 'enabled' \
+            else 'https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/'
+        payulatam_values = {
+            'merchantId': self.acquirer_id.payulatam_merchant_id,
+            'referenceCode': self.reference,
+            'description': self.reference,
+            'amount': float_repr(processing_values['amount'], self.currency_id.decimal_places or 2),
+            'tax': 0,
+            'taxReturnBase': 0,
+            'currency': self.currency_id.name,
+            'accountId': self.acquirer_id.payulatam_account_id,
+            'buyerFullName': self.partner_name,
+            'buyerEmail': self.partner_email,
+            'responseUrl': urls.url_join(self.get_base_url(), PayuLatamController._return_url),
+            'api_url': api_url,
+        }
+        if self.acquirer_id.state != 'enabled':
+            payulatam_values['test'] = 1
+        payulatam_values['signature'] = self.acquirer_id._payulatam_generate_sign(
+            payulatam_values, incoming=False
+        )
+        return payulatam_values
+
+    @api.model
+    def _get_tx_from_feedback_data(self, provider, data):
+        """ Override of payment to find the transaction based on Payulatam data.
+
+        :param str provider: The provider of the acquirer that handled the transaction
+        :param dict data: The feedback data sent by the provider
+        :return: The transaction if found
+        :rtype: recordset of `payment.transaction`
+        :raise: ValidationError if inconsistent data were received
+        :raise: ValidationError if the data match no transaction
+        :raise: ValidationError if the signature can not be verified
+        """
+        tx = super()._get_tx_from_feedback_data(provider, data)
+        if provider != 'payulatam':
+            return tx
+
+        reference = data.get('referenceCode')
+        sign = data.get('signature')
+        if not reference or not sign:
+            raise ValidationError(
+                "PayU Latam: " + _(
+                    "Received data with missing reference (%(ref)s) or sign (%(sign)s).",
+                    ref=reference, sign=sign
+                )
+            )
+
+        tx = self.search([('reference', '=', reference), ('provider', '=', 'payulatam')])
+        if not tx:
+            raise ValidationError(
+                "PayU Latam: " + _("No transaction found matching reference %s.", reference)
+            )
+
+        # Verify signature
+        sign_check = tx.acquirer_id._payulatam_generate_sign(data, incoming=True)
+        if sign_check != sign:
+            raise ValidationError(
+                "PayU Latam: " + _(
+                    "Invalid sign: received %(sign)s, computed %(check)s.",
+                    sign=sign, check=sign_check
+                )
+            )
+
+        return tx
+
+    def _process_feedback_data(self, data):
+        """ Override of payment to process the transaction based on Payulatam data.
+
+        Note: self.ensure_one()
+
+        :param dict data: The feedback data sent by the provider
+        :return: None
+        """
+        super()._process_feedback_data(data)
+        if self.provider != 'payulatam':
+            return
+
+        self.acquirer_reference = data.get('transactionId')
+
+        status = data.get('lapTransactionState')
+        state_message = data.get('message')
+        if status == 'PENDING':
+            self._set_pending(state_message=state_message)
+        elif status == 'APPROVED':
+            self._set_done(state_message=state_message)
+        elif status in ('EXPIRED', 'DECLINED'):
+            self._set_canceled(state_message=state_message)
+        else:
+            _logger.warning(
+                "received unrecognized payment state %s for transaction with reference %s",
+                status, self.reference
+            )
+            self._set_error("PayU Latam: " + _("Invalid payment status."))
