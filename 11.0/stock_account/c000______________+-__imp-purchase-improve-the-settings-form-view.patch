PR: https://github.com/odoo/odoo/pull/

From: 31cb715787930ea346db80336b1b95a9fcb793b6
From: Mansi Gandhi
Date: 2017-01-06 15:30:37

Structural Changes: 4
Total Changes: 34

[IMP] purchase*: Improve the settings form view

================================= pseudo patch: =================================

--- a/addons/stock_account/models/stock_config_settings.py
+++ b/addons/stock_account/models/stock_config_settings.py
@@ -7,22 +7,22 @@ from odoo import api, fields, models
 class StockConfigSettings(models.TransientModel):
     _inherit = 'stock.config.settings'
 
-    group_stock_inventory_valuation = fields.Selection([
-        (0, "Periodic inventory valuation (recommended)"),
-        (1, 'Perpetual inventory valuation (stock move generates accounting entries)')],
-        "Inventory Valuation", implied_group='stock_account.group_inventory_valuation',
-        help="""Allows to configure inventory valuations on products and product categories.""")
-    module_stock_landed_costs = fields.Selection([
-        (0, 'No landed costs'),
-        (1, 'Include landed costs in product costing computation')], "Landed Costs",
-        help="""Install the module that allows to affect landed costs on pickings, and split them onto the different products.""")
+    group_stock_inventory_valuation = fields.Boolean("Perpetual Valuation", implied_group='stock_account.group_inventory_valuation',
+        help="Perpetual valuation allows to get up-to-date books whenever products are transferred. It is only tailored for big companies where such a need matters. It requires extra configuration and testing to make sure accounting is impacted the right way for every kind of stock move. \n This must be set on product categories. The Periodic mode is applied by default (i.e. manual accounting entries at the end of the fiscal year). This last mode is recommended for starters and small/medium-size companies.")
+    module_stock_landed_costs = fields.Boolean("Landed Costs",
+        help="Affect landed costs on receipt operations and split them among products to update their cost price.")
 
-    @api.multi
-    def set_property_valuation_on_product_category(self):
-        data = {0: 'manual_periodic', 1: 'real_time'}
-        return self.env['ir.values'].set_default('product.category', 'property_valuation', data[self.group_stock_inventory_valuation])
+    @api.model
+    def get_default_property_valuation(self, fields):
+        category = self.env['ir.values'].get_default('product.category', 'property_valuation')
+        return {
+            'group_stock_inventory_valuation': True if category == 'real_time' else False
+        }
 
-    @api.onchange('module_stock_landed_costs')
-    def onchange_landed_costs(self):
-        if self.module_stock_landed_costs:
-            self.group_stock_inventory_valuation = 1
+    @api.multi
+    def set_default_property_valuation(self):
+        if self.group_stock_inventory_valuation:
+            data = 'real_time'
+        else:
+            data = 'manual_periodic'
+        return self.env['ir.values'].set_default('product.category', 'property_valuation', data)
