PR: https://github.com/odoo/odoo/pull/44109

From: c6e52e9037f2029a66b9415efb21a4b017204ddc
From: RÃ©my Voet (ryv)
Date: 2020-03-04 16:07:47

Breaking data model changes score: 5, change matches:
-    amount_total = fields.Float(
-    price_unit = fields.Float('Cost', digits='Product Price', required=True)
-    former_cost = fields.Float(
-    additional_landed_cost = fields.Float(
-    final_cost = fields.Float(

Total Changes: 89

[IMP] stock_landed_costs(_mrp): allow to choose mrp production in landed costs

When we create a landed cost, we can now apply it on a
manufacturing order instead of a picking. Also, change
some Float fields in Monetary ones and add the currency_id
field in views.

task-2123752

closes odoo/odoo#44109

Related: odoo/upgrade#822
Signed-off-by: Simon Lejeune (sle) <sle@openerp.com>

================================= pseudo patch: =================================

--- a/addons/stock_landed_costs/models/stock_landed_cost.py
+++ b/addons/stock_landed_costs/models/stock_landed_cost.py
@@ -17,7 +17,7 @@ SPLIT_METHOD = [
 ]
 
 
-class LandedCost(models.Model):
+class StockLandedCost(models.Model):
     _name = 'stock.landed.cost'
     _description = 'Stock Landed Cost'
     _inherit = ['mail.thread', 'mail.activity.mixin']
@@ -42,6 +42,10 @@ class LandedCost(models.Model):
     date = fields.Date(
         'Date', default=fields.Date.context_today,
         copy=False, required=True, states={'done': [('readonly', True)]}, tracking=True)
+    target_model = fields.Selection(
+        [('picking', 'Transfers')], string="Apply On",
+        required=True, default='picking',
+        copy=False, states={'done': [('readonly', True)]})
     picking_ids = fields.Many2many(
         'stock.picking', string='Transfers',
         copy=False, states={'done': [('readonly', True)]})
@@ -54,7 +58,7 @@ class LandedCost(models.Model):
         states={'done': [('readonly', True)]})
     description = fields.Text(
         'Item Description', states={'done': [('readonly', True)]})
-    amount_total = fields.Float(
+    amount_total = fields.Monetary(
         'Total', compute='_compute_total_amount',
         digits=0, store=True, tracking=True)
     state = fields.Selection([
@@ -92,20 +96,25 @@ class LandedCost(models.Model):
         for cost in self:
             cost.allowed_picking_ids = valued_picking_ids_per_company[cost.company_id.id]
 
+    @api.onchange('target_model')
+    def _onchange_target_model(self):
+        if self.target_model != 'picking':
+            self.picking_ids = False
+
     @api.model
     def create(self, vals):
         if vals.get('name', _('New')) == _('New'):
             vals['name'] = self.env['ir.sequence'].next_by_code('stock.landed.cost')
-        return super(LandedCost, self).create(vals)
+        return super().create(vals)
 
     def unlink(self):
         self.button_cancel()
-        return super(LandedCost, self).unlink()
+        return super().unlink()
 
     def _track_subtype(self, init_values):
         if 'state' in init_values and self.state == 'done':
             return self.env.ref('stock_landed_costs.mt_stock_landed_cost_open')
-        return super(LandedCost, self)._track_subtype(init_values)
+        return super()._track_subtype(init_values)
 
     def button_cancel(self):
         if any(cost.state == 'done' for cost in self):
@@ -114,10 +123,7 @@ class LandedCost(models.Model):
         return self.write({'state': 'cancel'})
 
     def button_validate(self):
-        if any(cost.state != 'draft' for cost in self):
-            raise UserError(_('Only draft landed costs can be validated'))
-        if not all(cost.picking_ids for cost in self):
-            raise UserError(_('Please define the transfers on which those additional costs should apply.'))
+        self._check_can_validate()
         cost_without_adjusment_lines = self.filtered(lambda c: not c.valuation_adjustment_lines)
         if cost_without_adjusment_lines:
             cost_without_adjusment_lines.compute_landed_cost()
@@ -180,29 +186,14 @@ class LandedCost(models.Model):
                     accounts = product.product_tmpl_id.get_product_accounts()
                     input_account = accounts['stock_input']
                     all_amls.filtered(lambda aml: aml.account_id == input_account and not aml.full_reconcile_id).reconcile()
-        return True
-
-    def _check_sum(self):
-        """ Check if each cost line its valuation lines sum to the correct amount
-        and if the overall total amount is correct also """
-        prec_digits = self.env.company.currency_id.decimal_places
-        for landed_cost in self:
-            total_amount = sum(landed_cost.valuation_adjustment_lines.mapped('additional_landed_cost'))
-            if not tools.float_is_zero(total_amount - landed_cost.amount_total, precision_digits=prec_digits):
-                return False
 
-            val_to_cost_lines = defaultdict(lambda: 0.0)
-            for val_line in landed_cost.valuation_adjustment_lines:
-                val_to_cost_lines[val_line.cost_line_id] += val_line.additional_landed_cost
-            if any(not tools.float_is_zero(cost_line.price_unit - val_amount, precision_digits=prec_digits)
-                   for cost_line, val_amount in val_to_cost_lines.items()):
-                return False
         return True
 
     def get_valuation_lines(self):
+        self.ensure_one()
         lines = []
 
-        for move in self.mapped('picking_ids').mapped('move_lines'):
+        for move in self._get_targeted_move_ids():
             # it doesn't make sense to make a landed cost for a product that isn't set as being valuated in real time at real cost
             if move.product_id.valuation != 'real_time' or move.product_id.cost_method not in ('fifo', 'average') or move.state == 'cancel':
                 continue
@@ -216,8 +207,9 @@ class LandedCost(models.Model):
             }
             lines.append(vals)
 
-        if not lines and self.mapped('picking_ids'):
-            raise UserError(_("You cannot apply landed costs on the chosen transfer(s). Landed costs can only be applied for products with automated inventory valuation and FIFO or average costing method."))
+        if not lines:
+            target_model_descriptions = dict(self._fields['target_model']._description_selection(self.env))
+            raise UserError(_("You cannot apply landed costs on the chosen %s(s). Landed costs can only be applied for products with automated inventory valuation and FIFO or average costing method.") % target_model_descriptions[self.target_model])
         return lines
 
     def compute_landed_cost(self):
@@ -226,7 +218,7 @@ class LandedCost(models.Model):
 
         digits = self.env['decimal.precision'].precision_get('Product Price')
         towrite_dict = {}
-        for cost in self.filtered(lambda cost: cost.picking_ids):
+        for cost in self.filtered(lambda cost: cost._get_targeted_move_ids()):
             total_qty = 0.0
             total_cost = 0.0
             total_weight = 0.0
@@ -289,8 +281,36 @@ class LandedCost(models.Model):
         action = self.env.ref('stock_account.stock_valuation_layer_action').read()[0]
         return dict(action, domain=domain)
 
+    def _get_targeted_move_ids(self):
+        return self.picking_ids.move_lines
+
+    def _check_can_validate(self):
+        if any(cost.state != 'draft' for cost in self):
+            raise UserError(_('Only draft landed costs can be validated'))
+        for cost in self:
+            if not cost._get_targeted_move_ids():
+                target_model_descriptions = dict(self._fields['target_model']._description_selection(self.env))
+                raise UserError(_('Please define %s on which those additional costs should apply.') % target_model_descriptions[cost.target_model])
+
+    def _check_sum(self):
+        """ Check if each cost line its valuation lines sum to the correct amount
+        and if the overall total amount is correct also """
+        prec_digits = self.env.company.currency_id.decimal_places
+        for landed_cost in self:
+            total_amount = sum(landed_cost.valuation_adjustment_lines.mapped('additional_landed_cost'))
+            if not tools.float_is_zero(total_amount - landed_cost.amount_total, precision_digits=prec_digits):
+                return False
+
+            val_to_cost_lines = defaultdict(lambda: 0.0)
+            for val_line in landed_cost.valuation_adjustment_lines:
+                val_to_cost_lines[val_line.cost_line_id] += val_line.additional_landed_cost
+            if any(not tools.float_is_zero(cost_line.price_unit - val_amount, precision_digits=prec_digits)
+                   for cost_line, val_amount in val_to_cost_lines.items()):
+                return False
+        return True
+
 
-class LandedCostLine(models.Model):
+class StockLandedCostLine(models.Model):
     _name = 'stock.landed.cost.lines'
     _description = 'Stock Landed Cost Line'
 
@@ -299,7 +319,7 @@ class LandedCostLine(models.Model):
         'stock.landed.cost', 'Landed Cost',
         required=True, ondelete='cascade')
     product_id = fields.Many2one('product.product', 'Product', required=True)
-    price_unit = fields.Float('Cost', digits='Product Price', required=True)
+    price_unit = fields.Monetary('Cost', digits='Product Price', required=True)
     split_method = fields.Selection(
         SPLIT_METHOD,
         string='Split Method',
@@ -310,6 +330,7 @@ class LandedCostLine(models.Model):
              "By Weight : Cost will be divided depending on its weight.\n"
              "By Volume : Cost will be divided depending on its volume.")
     account_id = fields.Many2one('account.account', 'Account', domain=[('deprecated', '=', False)])
+    currency_id = fields.Many2one('res.currency', related='cost_id.currency_id')
 
     @api.onchange('product_id')
     def onchange_product_id(self):
@@ -343,12 +364,12 @@ class AdjustmentLines(models.Model):
         digits='Stock Weight')
     volume = fields.Float(
         'Volume', default=1.0, digits='Volume')
-    former_cost = fields.Float(
+    former_cost = fields.Monetary(
         'Original Value', digits='Product Price')
-    additional_landed_cost = fields.Float(
+    additional_landed_cost = fields.Monetary(
         'Additional Landed Cost',
         digits='Product Price')
-    final_cost = fields.Float(
+    final_cost = fields.Monetary(
         'New Value', compute='_compute_final_cost',
         digits=0, store=True)
     currency_id = fields.Many2one('res.currency', related='cost_id.company_id.currency_id')
