PR: https://github.com/odoo/odoo/pull/110737

From: 234db70d861a7bc9c6620f9ef6a24dbe98eabb98
From: RÃ©my Voet (ryv)
Date: 2023-04-19 19:58:27

Structural Changes: 1
Total Changes: 62

[IMP] *: Use the new API of `_read_group` for backend use

Part-of: odoo/odoo#110737

================================= pseudo patch: =================================

--- a/addons/event_sale/models/event_event.py
+++ b/addons/event_sale/models/event_event.py
@@ -31,50 +31,22 @@ class Event(models.Model):
         have to do one conversion per sale.order (and a sale.order is created every time
         we sell a single event ticket). """
         date_now = fields.Datetime.now()
-        sale_price_by_event = {}
-        if self.ids:
-            event_subtotals = self.env['sale.order.line']._read_group(
-                [('event_id', 'in', self.ids),
-                 ('price_subtotal', '!=', 0)],
-                ['event_id', 'currency_id', 'price_subtotal:sum'],
-                ['event_id', 'currency_id'],
-                lazy=False
+        event_subtotals = self.env['sale.order.line']._read_group(
+            [('event_id', 'in', self.ids),
+                ('price_subtotal', '!=', 0)],
+            ['event_id', 'currency_id'],
+            ['price_subtotal:sum'],
+        )
+
+        self.sale_price_subtotal = 0
+        for event, currency, sum_price_subtotal in event_subtotals:
+            event.sale_price_subtotal += event.currency_id._convert(
+                sum_price_subtotal,
+                currency,
+                event.company_id,
+                date_now,
             )
 
-            company_by_event = {
-                event._origin.id or event.id: event.company_id
-                for event in self
-            }
-
-            currency_by_event = {
-                event._origin.id or event.id: event.currency_id
-                for event in self
-            }
-
-            currency_by_id = {
-                currency.id: currency
-                for currency in self.env['res.currency'].browse(
-                    [event_subtotal['currency_id'][0] for event_subtotal in event_subtotals]
-                )
-            }
-
-            for event_subtotal in event_subtotals:
-                price_subtotal = event_subtotal['price_subtotal']
-                event_id = event_subtotal['event_id'][0]
-                currency_id = event_subtotal['currency_id'][0]
-                sale_price = currency_by_event[event_id]._convert(
-                    price_subtotal,
-                    currency_by_id[currency_id],
-                    company_by_event[event_id],
-                    date_now)
-                if event_id in sale_price_by_event:
-                    sale_price_by_event[event_id] += sale_price
-                else:
-                    sale_price_by_event[event_id] = sale_price
-
-        for event in self:
-            event.sale_price_subtotal = sale_price_by_event.get(event._origin.id or event.id, 0)
-
     def action_view_linked_orders(self):
         """ Redirects to the orders linked to the current events """
         sale_order_action = self.env["ir.actions.actions"]._for_xml_id("sale.action_orders")

--- a/addons/event_sale/models/sale_order.py
+++ b/addons/event_sale/models/sale_order.py
@@ -44,12 +44,10 @@ class SaleOrder(models.Model):
         sale_orders_data = self.env['event.registration']._read_group(
             [('sale_order_id', 'in', self.ids),
              ('state', '!=', 'cancel')],
-            ['sale_order_id'], ['sale_order_id']
+            ['sale_order_id'], ['__count'],
         )
         attendee_count_data = {
-            sale_order_data['sale_order_id'][0]:
-            sale_order_data['sale_order_id_count']
-            for sale_order_data in sale_orders_data
+            sale_order.id: count for sale_order, count in sale_orders_data
         }
         for sale_order in self:
             sale_order.attendee_count = attendee_count_data.get(sale_order.id, 0)
