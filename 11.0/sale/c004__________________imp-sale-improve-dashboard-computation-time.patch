PR: https://github.com/odoo/odoo/pull/

From: bcc1efac485e00e01c93026c3d00704fb2f513cf
From: Denis Vermylen
Date: 2017-02-10 18:15:35

Structural Changes: 2
Total Changes: 46

[IMP] sale*: improve dashboard computation time

This commit improves crm.team compute methods and adds auto_join on:
payment.transaction: field sale_order_id
sale.order: field order_line

Also move the dashboard_graph_type field in invisible in the kanban view to
avoid triggering the computation of the graph when it's not needed.

DO NOT FORWARD-PORT: a different patch will be made for the master branch

================================= pseudo patch: =================================

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -125,7 +125,7 @@ class SaleOrder(models.Model):
     project_id = fields.Many2one('account.analytic.account', 'Analytic Account', readonly=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, help="The analytic account related to a sales order.", copy=False)
     related_project_id = fields.Many2one('account.analytic.account', inverse='_inverse_project_id', related='project_id', string='Analytic Account', help="The analytic account related to a sales order.")
 
-    order_line = fields.One2many('sale.order.line', 'order_id', string='Order Lines', states={'cancel': [('readonly', True)], 'done': [('readonly', True)]}, copy=True)
+    order_line = fields.One2many('sale.order.line', 'order_id', string='Order Lines', states={'cancel': [('readonly', True)], 'done': [('readonly', True)]}, copy=True, auto_join=True)
 
     invoice_count = fields.Integer(string='# of Invoices', compute='_get_invoiced', readonly=True)
     invoice_ids = fields.Many2many("account.invoice", string='Invoices', compute="_get_invoiced", readonly=True, copy=False)

--- a/addons/sale/models/sales_team.py
+++ b/addons/sale/models/sales_team.py
@@ -37,34 +37,36 @@ class CrmTeam(models.Model):
     ])
 
     def _compute_quotations_to_invoice(self):
-        amounts = self.env['sale.report'].read_group([
-            ('team_id', 'in', self.filtered(lambda team: team.team_type != 'website').ids),
-            ('state', 'in', ['draft', 'sent']),
-        ], ['price_total', 'team_id', 'name'], ['team_id', 'name'], lazy=False)
-        for rec in amounts:
-            self.browse(rec['team_id'][0]).quotations_amount += rec['price_total']
-            self.browse(rec['team_id'][0]).quotations_count += 1
+        non_website_teams = self.filtered(lambda team: team.team_type != 'website')
+        if non_website_teams:
+            quotation_data = self.env['sale.report'].read_group([
+                ('team_id', 'in', non_website_teams.ids),
+                ('state', 'in', ['draft', 'sent']),
+            ], ['price_total', 'team_id', 'name'], ['team_id', 'name'], lazy=False)
+            for datum in quotation_data:
+                self.browse(datum['team_id'][0]).quotations_amount += datum['price_total']
+                self.browse(datum['team_id'][0]).quotations_count += 1
 
     @api.multi
     def _compute_sales_to_invoice(self):
-        amounts = self.env['sale.report'].read_group([
+        sale_order_data = self.env['sale.order'].read_group([
             ('team_id', 'in', self.ids),
-            ('qty_to_invoice', '>', 0),
-        ], ['team_id', 'name'], ['team_id', 'name'], lazy=False)
-        for rec in amounts:
-            self.browse(rec['team_id'][0]).sales_to_invoice_count += 1
+            ('order_line.qty_to_invoice', '>', 0),
+        ], ['team_id'], ['team_id'])
+        for datum in sale_order_data:
+            self.browse(datum['team_id'][0]).invoiced = datum['team_id_count']
 
     @api.multi
     def _compute_invoiced(self):
-        for team in self:
-            invoices = self.env['account.invoice'].search([
-                ('state', 'in', ['open', 'paid']),
-                ('team_id', '=', team.id),
-                ('date', '<=', date.today()),
-                ('date', '>=', date.today().replace(day=1)),
-                ('type', 'in', ['out_invoice', 'out_refund']),
-            ])
-            team.invoiced = sum(invoices.mapped('amount_untaxed_signed'))
+        invoice_data = self.env['account.invoice'].read_group([
+            ('state', 'in', ['open', 'paid']),
+            ('team_id', 'in', self.ids),
+            ('date', '<=', date.today()),
+            ('date', '>=', date.today().replace(day=1)),
+            ('type', 'in', ['out_invoice', 'out_refund']),
+        ], ['amount_untaxed_signed', 'team_id'], ['team_id'])
+        for datum in invoice_data:
+            self.browse(datum['team_id'][0]).invoiced = datum['amount_untaxed_signed']
 
     def _graph_date_column(self):
         if self.dashboard_graph_model in ['sales', 'invoices']:
