PR: https://github.com/odoo/odoo/pull/

From: 7978d4ba0f093c4b5400dbb1776ff5c0416e203b
From: Yannick Tivisse
Date: 2018-09-10 12:23:42

Breaking data model changes score: 7, change matches:
-    group_base_user = fields.Selection(
-    group_administration_user = fields.Selection(
-    has_group_multi_company = fields.Boolean(
-    has_group_multi_currency = fields.Boolean(
-    has_group_no_one = fields.Boolean(
-    has_group_partner_manager = fields.Boolean(
-    has_group_private_addresses = fields.Boolean(

Total Changes: 31

Revert "[IMP] *: Define groups on res.users models"

This reverts commit 99f497b390e680629dce3a7e2e282ada74ee9884.

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -222,36 +222,6 @@ class Users(models.Model):
     name = fields.Char(related='partner_id.name', inherited=True)
     email = fields.Char(related='partner_id.email', inherited=True)
 
-    group_base_user = fields.Selection(
-        selection=lambda self: self._get_group_selection('base.module_category_user_type'),
-        string="User type", compute='_compute_groups_id', inverse='_inverse_groups_id',
-        category_xml_id='base.module_category_user_type')
-
-    group_administration_user = fields.Selection(
-        selection=lambda self: self._get_group_selection('base.module_category_administration'),
-        string="Administration", compute='_compute_groups_id', inverse='_inverse_groups_id',
-        category_xml_id='base.module_category_administration')
-
-    has_group_multi_company = fields.Boolean(
-        'Multi Companies', compute='_compute_groups_id', inverse='_inverse_groups_id',
-        group_xml_id='base.group_multi_company')
-
-    has_group_multi_currency = fields.Boolean(
-        'Multi Currencies', compute='_compute_groups_id', inverse='_inverse_groups_id',
-        group_xml_id='base.group_multi_currency')
-
-    has_group_no_one = fields.Boolean(
-        'Technical Features', compute='_compute_groups_id', inverse='_inverse_groups_id',
-        group_xml_id='base.group_no_one')
-
-    has_group_partner_manager = fields.Boolean(
-        'Contact Creation', compute='_compute_groups_id', inverse='_inverse_groups_id',
-        group_xml_id='base.group_partner_manager')
-
-    has_group_private_addresses = fields.Boolean(
-        'Access to Private Addresses', compute='_compute_groups_id', inverse='_inverse_groups_id',
-        group_xml_id='base.group_private_addresses')
-
     _sql_constraints = [
         ('login_key', 'UNIQUE (login)',  'You can not have two users with the same login !')
     ]
@@ -751,7 +721,6 @@ class GroupsImplied(models.Model):
     @api.multi
     def write(self, values):
         res = super(GroupsImplied, self).write(values)
-
         if values.get('users') or values.get('implied_ids'):
             # add all implied groups (to all users of each group)
             for group in self:
