PR: https://github.com/odoo/odoo/pull/185912

From: 46adf760a3a33e48d34fe99c565a8c6c1194fb65
From: Audric Onockx (auon)
Date: 2024-12-19 04:24:26

Breaking data model changes scores: del:1 + add:0, change matches:
-    show_display_in_project = fields.Boolean(compute='_compute_show_display_in_project')

Total Changes: 44

[IMP] project: replace `display_in_project` field with filter

After exploring all the possibilities,
this field, represented in the form view with an "eye-icon",
was the simplest way of asking the user whether they wanted to display
the subtask in the multi-views.

There's still an issue with that though:
Generally, the user will either want to see all subtask all the time,
or none never. So, in one of those cases, they'll have to toggle
the same boolean field each time you create a record,
which makes no sense.

Solution: we hide them all by default, and create a "filter"
that shows them all. If the user is of the former type (see all),
they'll toggle that filter by default, and life's good.

This filter will be hidden if the current action is
"My Tasks" (context key "my_tasks" i/o "not all_task"
which was always falsy).

task-4295713

Part-of: odoo/odoo#185912
Related: odoo/enterprise#73124
Related: odoo/upgrade#6811
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/project_project.py
+++ b/addons/project/models/project_project.py
@@ -405,18 +405,11 @@ class ProjectProject(models.Model):
         defaults = self._map_tasks_default_values(project)
         new_tasks = tasks.with_context(copy_project=True).copy(defaults)
         all_subtasks = new_tasks._get_all_subtasks()
-        project.write({'tasks': [Command.set(new_tasks.ids)]})
-        subtasks_not_displayed = all_subtasks.filtered(
-            lambda task: not task.display_in_project
-        )
         all_subtasks.filtered(
             lambda child: child.project_id == self
         ).write({
             'project_id': project.id
         })
-        subtasks_not_displayed.write({
-            'display_in_project': False
-        })
         return True
 
     def copy_data(self, default=None):

--- a/addons/project/models/project_task.py
+++ b/addons/project/models/project_task.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 import re
@@ -182,9 +181,7 @@ class ProjectTask(models.Model):
 
     project_id = fields.Many2one('project.project', string='Project', domain="['|', ('company_id', '=', False), ('company_id', '=?',  company_id)]",
                                  compute="_compute_project_id", store=True, precompute=True, recursive=True, readonly=False, index=True, tracking=True, change_default=True)
-    display_in_project = fields.Boolean(compute='_compute_display_in_project', store=True, readonly=False, export_string_translation=False)
-    # Technical field to display the 'Display in Project' button in the form view, depending on the project
-    show_display_in_project = fields.Boolean(compute='_compute_show_display_in_project')
+    display_in_project = fields.Boolean(compute='_compute_display_in_project', store=True, export_string_translation=False)
     task_properties = fields.Properties('Properties', definition='project_id.task_properties_definition', copy=True)
     allocated_hours = fields.Float("Allocated Time", tracking=True)
     subtask_allocated_hours = fields.Float("Sub-tasks Allocated Time", compute='_compute_subtask_allocated_hours', export_string_translation=False,
@@ -344,27 +341,12 @@ class ProjectTask(models.Model):
             if not task.display_in_project and task.parent_id and task.parent_id.project_id != task.project_id:
                 task.project_id = task.parent_id.project_id
 
-    @api.onchange('parent_id')
-    def _onchange_parent_id(self):
-        if self.display_in_project:
-            return
-        if not self.parent_id:
-            self.display_in_project = True
-        elif self.project_id != self.parent_id.project_id:
-            self.project_id = self.parent_id.project_id
-
-    @api.depends('project_id')
+    @api.depends('project_id', 'parent_id')
     def _compute_display_in_project(self):
-        self.filtered(
-            lambda t: not t.display_in_project and (
-                not t.project_id or t.project_id != t.parent_id.project_id
+        for record in self:
+            record.display_in_project = record.project_id and (
+                not record.parent_id or record.project_id != record.parent_id.project_id
             )
-        ).display_in_project = True
-
-    @api.depends('project_id', 'parent_id')
-    def _compute_show_display_in_project(self):
-        for task in self:
-            task.show_display_in_project = bool(task.parent_id) and task.project_id == task.parent_id.project_id
 
     @api.depends('stage_id', 'depend_on_ids.state', 'project_id.allow_task_dependencies')
     def _compute_state(self):
@@ -1356,6 +1338,15 @@ class ProjectTask(models.Model):
                 task.recurrence_id.unlink()
         return super().unlink()
 
+    def _where_calc(self, domain, active_test=True):
+        """ Tasks views don't show the sub-tasks / ('display_in_project', '=', True).
+            The pseudo-filter "Show Sub-tasks" adds the key 'show_subtasks' in the context.
+            In that case, we pop the leaf from the domain.
+        """
+        if self.env.context.get('show_subtasks'):
+            domain = filter_domain_leaf(domain, lambda field: field != 'display_in_project')
+        return super()._where_calc(domain, active_test)
+
     def update_date_end(self, stage_id):
         project_task_type = self.env['project.task.type'].browse(stage_id)
         if project_task_type.fold:
