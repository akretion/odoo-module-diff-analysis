PR: https://github.com/odoo/odoo/pull/96149

From: bffc5dc658524dc8c5e21e1b7d619a1b78f4054e
From: hiroh-odoo
Date: 2022-09-08 15:31:45

Structural Changes: 1
Total Changes: 36

[IMP] project,sale(_purchase,_timesheet): improve generic UX for project

Purpose of this PR to improve generic usage of project app.

So in this commit done the following changes:
 - move the the filter 'tasks_due_today' and 'late_milestone' above the
  'late' filter.
 - change label for 'remaining_hours_on_so' according to timesheet uom.
 - add placeholder in milestone wizard
 - make remaining_hour field colour red when it's value < 0.
 - added filter in project_sharing_view search view 'overtime',
   'remaining_hours_percentage','tasks_due_today','late_milestone',
   'open_tasks','closed_tasks','closed_last_7_days','closed_last_30_days'.
 - added optional field in project_sharing_view sub-task list view
   'subtask_effective_hours', 'total_hours_spent','priority','remaining_hours_so'.
 - added optional field in portal tree view 'timesheet_uom','progress','priority',
   'portal_user_names','remaining_hours_so'.
 - re-arrange quick search options in search view options in portal view.
 - make the 'subcontract service' field company dependent and add
   fa-building icon on form view.

task-2889829

closes odoo/odoo#96149

Related: odoo/enterprise#29563
Related: odoo/upgrade#3712
Signed-off-by: Laurent Stukkens (ltu) <ltu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_purchase/models/product_template.py
+++ b/addons/sale_purchase/models/product_template.py
@@ -9,23 +9,29 @@ class ProductTemplate(models.Model):
     _inherit = 'product.template'
 
     service_to_purchase = fields.Boolean(
-        "Subcontract Service",
-        compute='_compute_service_to_purchase', store=True, readonly=False,
+        "Subcontract Service", company_dependent=True,
         help="If ticked, each time you sell this product through a SO, a RfQ is automatically created to buy the product. Tip: don't forget to set a vendor on the product.")
 
-    _sql_constraints = [
-        ('service_to_purchase', "CHECK((type != 'service' AND service_to_purchase != true) or (type = 'service'))", 'Product that is not a service can not create RFQ.'),
-    ]
-
-    @api.constrains('service_to_purchase', 'seller_ids')
+    @api.constrains('service_to_purchase', 'seller_ids', 'type')
     def _check_service_to_purchase(self):
         for template in self:
-            if template.service_to_purchase and not template.seller_ids:
-                raise ValidationError(_(
-                    "Please define the vendor from whom you would like to purchase this service automatically."))
+            if template.service_to_purchase:
+                if template.type != 'service':
+                    raise ValidationError(_("Product that is not a service can not create RFQ."))
+                template._check_vendor_for_service_to_purchase(template.seller_ids)
 
-    @api.depends('type', 'expense_policy')
-    def _compute_service_to_purchase(self):
-        for template in self:
-            if template.type != 'service' or template.expense_policy != 'no':
-                template.service_to_purchase = False
+    @api.model_create_multi
+    def create(self, vals_list):
+        for vals in vals_list:
+            if vals.get('service_to_purchase'):
+                self._check_vendor_for_service_to_purchase(vals.get('seller_ids'))
+        return super().create(vals_list)
+
+    def _check_vendor_for_service_to_purchase(self, sellers):
+        if not sellers:
+            raise ValidationError(_("Please define the vendor from whom you would like to purchase this service automatically."))
+
+    @api.onchange('type', 'expense_policy')
+    def _onchange_service_to_purchase(self):
+        products_template = self.filtered(lambda p: p.type != 'service' or p.expense_policy != 'no')
+        products_template.service_to_purchase = False
