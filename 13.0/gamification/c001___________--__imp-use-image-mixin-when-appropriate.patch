PR: https://github.com/odoo/odoo/pull/

From: 1e9772889ba6969961aab0e87fd018494d6b15bb
From: SÃ©bastien Theys
Date: 2019-08-02 16:47:58

Breaking data model changes score: 7, change matches:
-    _inherit = ['mail.thread']
-    image = fields.Binary("Image", help="This field holds the image used for the badge.")
-    image_128 = fields.Binary(
-    image_64 = fields.Binary(
-    image = fields.Binary('Rank Icon')
-    image_128 = fields.Binary(
-    image_64 = fields.Binary(

Total Changes: 42

[IMP] *: use image.mixin when appropriate

The following models are already using big images, or they might need big images
in the future:

- partner
- hr employee
- shop category
- lunch product
- gamification badge and karma rank

PR: #34925

================================= pseudo patch: =================================

--- a/addons/gamification/models/badge.py
+++ b/addons/gamification/models/badge.py
@@ -4,7 +4,7 @@
 import logging
 from datetime import date
 
-from odoo import api, tools, fields, models, _, exceptions
+from odoo import api, fields, models, _, exceptions
 
 _logger = logging.getLogger(__name__)
 
@@ -65,22 +65,11 @@ class GamificationBadge(models.Model):
 
     _name = 'gamification.badge'
     _description = 'Gamification Badge'
-    _inherit = ['mail.thread']
+    _inherit = ['mail.thread', 'image.mixin']
 
     name = fields.Char('Badge', required=True, translate=True)
     active = fields.Boolean('Active', default=True)
     description = fields.Text('Description', translate=True)
-    image = fields.Binary("Image", help="This field holds the image used for the badge.")
-    image_128 = fields.Binary(
-        "Medium-sized badge image",
-        help="Medium-sized image of the badge. It is automatically "
-             "resized as a 128x128px image, with aspect ratio preserved. "
-             "Use this field in form views or some kanban views.")
-    image_64 = fields.Binary(
-        "Small-sized badge image",
-        help="Small-sized image of the badge. It is automatically "
-             "resized as a 64x64px image, with aspect ratio preserved. "
-             "Use this field anywhere a small image is required.")
     level = fields.Selection([
         ('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold')],
         string='Forum Badge Level', default='bronze')
@@ -137,16 +126,6 @@ class GamificationBadge(models.Model):
         "Remaining Sending Allowed", compute='_remaining_sending_calc',
         help="If a maximum is set")
 
-    @api.model_create_multi
-    def create(self, values_list):
-        for vals in values_list:
-            tools.image_resize_images(vals)
-        return super(GamificationBadge, self).create(values_list)
-
-    def write(self, vals):
-        tools.image_resize_images(vals)
-        return super(GamificationBadge, self).write(vals)
-
     @api.depends('owner_ids')
     def _get_owners_info(self):
         """Return:

--- a/addons/gamification/models/gamification_karma_rank.py
+++ b/addons/gamification/models/gamification_karma_rank.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
-from odoo import api, tools, fields, models, exceptions, http
+from odoo import api, fields, models, exceptions
 from odoo.tools.translate import html_translate
 
 
@@ -24,6 +24,7 @@ class Http(models.AbstractModel):
 class KarmaRank(models.Model):
     _name = 'gamification.karma.rank'
     _description = 'Rank based on karma'
+    _inherit = 'image.mixin'
     _order = 'karma_min'
 
     name = fields.Text(string='Rank Name', translate=True, required=True)
@@ -33,22 +34,9 @@ class KarmaRank(models.Model):
         help="Motivational phrase to reach this rank")
     karma_min = fields.Integer(string='Required Karma', help='Minimum karma needed to reach this rank')
     user_ids = fields.One2many('res.users', 'rank_id', string='Users', help="Users having this rank")
-    image = fields.Binary('Rank Icon')
-    image_128 = fields.Binary(
-        "Medium-sized rank icon",
-        help="Medium-sized icon of the rank. It is automatically "
-             "resized as a 128x128px image, with aspect ratio preserved. "
-             "Use this field in form views or some kanban views.")
-    image_64 = fields.Binary(
-        "Small-sized rank icon",
-        help="Small-sized icon of the rank. It is automatically "
-             "resized as a 64x64px image, with aspect ratio preserved. "
-             "Use this field anywhere a small image is required.")
 
     @api.model_create_multi
     def create(self, values_list):
-        for vals in values_list:
-            tools.image_resize_images(vals)
         res = super(KarmaRank, self).create(values_list)
         users = self.env['res.users'].sudo().search([('karma', '>', 0)])
         users._recompute_rank()
@@ -60,7 +48,6 @@ class KarmaRank(models.Model):
             low = min(vals['karma_min'], self.karma_min)
             high = max(vals['karma_min'], self.karma_min)
 
-        tools.image_resize_images(vals)
         res = super(KarmaRank, self).write(vals)
 
         if 'karma_min' in vals:
