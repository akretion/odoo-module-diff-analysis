PR: https://github.com/odoo/odoo/pull/163014

From: 112c68a07b817e5e9a6c01e34a0fe7238b2eaa07
From: Thomas Becquevort (thbe)
Date: 2024-05-06 14:11:01

Structural Changes: 3
Total Changes: 32

[IMP] *: Better invoicing, taxes and company/report config

*: account, l10n_be, web

This commit serves the purpose of enhancing the invoicing UX and UI.

This is done by various improvements making the invoicing clearer and easier.

Invoices:

The UI has been lightened by removing the ID of the invoice in the view's name,
by not displaying the preview button when on a draft invoice, by hiding the
payment reference when in a customer invoice and by adding a placeholder to the
invoice date field which previously would stay blank.
The width of certain columns which were previously using default values have
been set to specific values to waste as little space as possible.

Mobile version of Invoices:

The description field is directly after the product.

Tax Configurator:

Just as for the invoices, the UI has been lightened. For the tax configurator,
the description was moved from general settings to advanced, the tax
computation possible values have been renamed and the tax scope has a new
default value.

Tax List View:

The column "Label on Invoices" has been removed and the Description is now an
HTML field allowing the user to format his text.

Tax Kanban View:

The taxes have a kanban view showing the Tax, its type and its description.

Company Configurator:

The company configurator has been ligthened by removing the notebook. The name
is now the first field just above the address. The logo has been removed from
the configurator and the Discard button is now a Skip button that makes the
user directly go to the printing part without going in the report config.

In the Report Configurator, the "Box, Bold, Stripped" button have been removed.
The default colors are the invoice colors instead of black and grey. The DL PDF
button is centered and the Discard button has also become a Skip button.

In addition to all of that, the commit also modifies the tests related to these
behavior to make sure the new an proper one is the one tested.

task-3642419

Part-of: odoo/odoo#163014

================================= pseudo patch: =================================

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -3935,10 +3935,7 @@ class AccountMove(models.Model):
                 'entry': _('Draft Entry'),
             }[self.move_type]
             name += ' '
-        if not self.name or self.name == '/':
-            if self.id:
-                name += '(* %s)' % str(self.id)
-        else:
+        if self.name and self.name != '/':
             name += self.name
             if self.env.context.get('input_full_display_name'):
                 if self.partner_id:

--- a/addons/account/models/account_tax.py
+++ b/addons/account/models/account_tax.py
@@ -5,6 +5,7 @@ from odoo.exceptions import UserError, ValidationError
 from odoo.tools import frozendict, groupby, split_every
 from odoo.tools.float_utils import float_round
 from odoo.tools.misc import clean_context, formatLang
+from odoo.tools.translate import html_translate
 
 from collections import defaultdict
 from markupsafe import Markup
@@ -100,14 +101,14 @@ class AccountTax(models.Model):
         help="Determines where the tax is selectable. Note: 'None' means a tax can't be used by itself, however it can still be used in a group. 'adjustment' is used to perform tax adjustment.")
     tax_scope = fields.Selection([('service', 'Services'), ('consu', 'Goods')], string="Tax Scope", help="Restrict the use of taxes to a type of product.")
     amount_type = fields.Selection(default='percent', string="Tax Computation", required=True, tracking=True,
-        selection=[('group', 'Group of Taxes'), ('fixed', 'Fixed'), ('percent', 'Percentage of Price'), ('division', 'Percentage of Price Tax Included')],
+        selection=[('group', 'Group of Taxes'), ('fixed', 'Fixed'), ('percent', 'Percentage'), ('division', 'Percentage Tax Included')],
         help="""
     - Group of Taxes: The tax is a set of sub taxes.
     - Fixed: The tax amount stays the same whatever the price.
-    - Percentage of Price: The tax amount is a % of the price:
+    - Percentage: The tax amount is a % of the price:
         e.g 100 * (1 + 10%) = 110 (not price included)
         e.g 110 / (1 + 10%) = 100 (price included)
-    - Percentage of Price Tax Included: The tax amount is a division of the price:
+    - Percentage Tax Included: The tax amount is a division of the price:
         e.g 180 / (1 - 10%) = 200 (not price included)
         e.g 200 * (1 - 10%) = 180 (price included)
         """)
@@ -120,7 +121,7 @@ class AccountTax(models.Model):
     sequence = fields.Integer(required=True, default=1,
         help="The sequence field is used to define order in which the tax lines are applied.")
     amount = fields.Float(required=True, digits=(16, 4), default=0.0, tracking=True)
-    description = fields.Char(string='Description', translate=True)
+    description = fields.Html(string='Description', translate=html_translate)
     invoice_label = fields.Char(string='Label on Invoices', translate=True)
     price_include = fields.Boolean(string='Included in Price', default=False, tracking=True,
         help="Check this if the price you use on the product and invoices includes this tax.")
@@ -552,15 +553,15 @@ class AccountTax(models.Model):
         type_tax_use = dict(self._fields['type_tax_use']._description_selection(self.env))
         tax_scope = dict(self._fields['tax_scope']._description_selection(self.env))
         for record in self:
-            name = record.name
-            if self._context.get('append_type_to_tax_name'):
-                name += ' (%s)' % type_tax_use.get(record.type_tax_use)
-            if record.tax_scope:
-                name += ' (%s)' % tax_scope.get(record.tax_scope)
-            if len(self.env.companies) > 1 and self.env.context.get('params', {}).get('model') == 'product.template':
-                name += ' (%s)' % record.company_id.display_name
-            if record.country_id != record.company_id._accessible_branches()[:1].account_fiscal_country_id:
-                name += ' (%s)' % record.country_code
+            if name := record.name:
+                if self._context.get('append_type_to_tax_name'):
+                    name += ' (%s)' % type_tax_use.get(record.type_tax_use)
+                if record.tax_scope:
+                    name += ' (%s)' % tax_scope.get(record.tax_scope)
+                if len(self.env.companies) > 1 and self.env.context.get('params', {}).get('model') == 'product.template':
+                    name += ' (%s)' % record.company_id.display_name
+                if record.country_id != record.company_id.account_fiscal_country_id:
+                    name += ' (%s)' % record.country_code
             record.display_name = name
 
     @api.onchange('amount')
