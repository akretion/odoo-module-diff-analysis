PR: https://github.com/odoo/odoo/pull/133560

From: 0903ef7bb2117623cf6cbbd2375f56ca91babe6a
From: Romeo Fragomeli
Date: 2023-09-11 16:32:30

Breaking data model changes score: 0, change matches:

Total Changes: 405

[MOV] *: move all PWA to community

In this commit, we moved all features related to the PWA and the PWA
itself to the community.

This includes:
* PWA
* Web Push Notification
* VCARD

Note from original commits:
===========================

PWA (part 1)
------------
This commit adds a ServiceWorker to complement the WebManifest to
complete the setup of the backend as a Progressive Web App.

More precisely, it adds the route, registration and the most basic
ServiceWorker to allow the backend to be recognized as an installable
PWA.

References:
- https://web.dev/install-criteria/
- https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Installable_PWAs
- https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers

Task ID: 3063485

PWA (part 2)
------------
This commit adds a WebManifest as a first step toward setuping the
backend as a Progressive Web App.

In a nutshell:
- the web app's name is configurable through a config parameter
  (available in the Settings, in debug); defaulting to "Odoo".
- the web app's icon has been revamped to accommodate the required sizes;
  also its design matches the one from the Android app.
- "theme-color" is used to color part of the browser/system UI to match
  Enterprise brand color; also supports the dark mode.

References:
- https://web.dev/learn/pwa/web-app-manifest/
- https://web.dev/install-criteria/
- https://developer.mozilla.org/en-US/docs/Web/Manifest

Task ID: 3063485

PWA shortcuts
-------------
The main goal of this commit is like we did inside the `Android Odoo
Mobile App`, allowing users to have some Odoo application shortcuts.
We added the following apps in the key `shortcuts` on `web.manifest` in
these orders: `Discuss`, `CRM`, `Project`, `To-Do` (old `Notes`).

Links:
- https://w3c.github.io/manifest/#shortcuts-member
- https://developer.mozilla.org/en-US/docs/Web/Manifest/shortcuts

Task ID: 3123607

Offline mode
------------
This commit introduces a way to notify the user that he's "offline"
(aka. cannot reach its Odoo server) and that Odoo doesn't work in a
graceful way in this circumstance.

To do so, the Service-Worker will return the response of the
´web/offline´ route, which is cached at its setup.

Note: this screen is only show when launched while "offline" and fails
to load the requested page. It does not "interrupt" the WebClient to
show this screen when the connection drops off (cf. not a replacement
for the existing notification).

Task ID: 3203639

WebPush
-------

WebPush allows sending data to the user browser/app(PWA) even when
tab/app is closed. Web push is a "constant" link between the
ServiceWorker of browser/app and a WebPush server.

Note that each browser has its own custom WebPush server.
e.g.:
Chrome: https://fcm.googleapis.com/
Firefox: https://updates.push.services.mozilla.com/
Safari: https://web.push.apple.com/
Edge: https://wns2-ln2p.notify.windows.com/
WebPush introduces some cryptographic notion to ensure some the
reliability of the data sent:

VAPID: "Voluntary Application Server Identification" is the standard
used to generate the public and the private to sign the message
between the browser and the WebPush server
JWT: "JSON Web Token" is the standard used to sign the payload to the
WebPush server
ECE: "Encrypted Content-Encoding" is the standard used by WebPush to
encrypt the data of the payload to avoid sending RAW data
outside trusted network.
Simplified steps how to WebPush works:

The Javascript code of a web page subscribes to the WebPush server
(using the VAPID key generated at mail_entreprise install).
The WebPush server replay with a subscription (and some other info
like the unique URL endpoint per subscription where to send a
notification)
The application (odoo-bin in our case) sends a post request to the
WebPush server using the specific URL endpoint of the user (using JWT
and ECE).
The WebPush server sends back to the browser the encrypted payload.
The browser decrypts the payload and sends it to the ServiceWorker
linked to the subscription.
Here is a Sequence diagram of all interactions to process a web push
notification.
In Odoo, we use WebPush to send Notification to the user.

This commit aims to have a parity with the Android/iOS Mobile App at
the notification level.

Notes:

There are some ways to encrypt (ECE) the message for WebPush:

AESGCM128: this is a draft
AESGCM: very well documented
AES128GCM: RFC8188 Standard encoding
We implement only the RFC one as it is the only one implemented in all
major updated browsers (Chrome, Firefox, Safari, Edge, ...)
You need to allow the desktop "Notification" and "Push" inside your
browser. For iOS Devices, it only works on iOS 16.4+ and it's requiring
Odoo to first be added to the Home Screen. It's delivered silently,
meaning no sound, vibration, haptics or screen wake.

Note:
Notifications are sent directly if there are less than five
notifications, otherwise we use a cron triggered immediately.
Also, we have changed the value of the "QueryCount" as mail_enterprise
executes a new query to search the devices associated with the partner.

We have added a "try/except" for any Exception before the
push_to_end_point method as we want to avoid blocking a normal flow
just for a not mandatory push notification if something happens during
the push to the endpoint.
See: odoo/enterprise@d0ae70103dd1c169debe8fcb0918f80310c85e42

Links:
https://www.rfc-editor.org/rfc/rfc8030
https://www.rfc-editor.org/rfc/rfc8188
https://www.rfc-editor.org/rfc/rfc8291
https://www.rfc-editor.org/rfc/rfc8292
https://w3c.github.io/push-api/index.html
https://autopush.readthedocs.io/en/latest/http.html
https://web.dev/push-notifications-web-push-protocol/
https://github.com/web-push-libs/encrypted-content-encoding
https://github.com/web-push-libs/pywebpush
https://github.com/web-push-libs/vapid
https://caniuse.com/push-api
Task ID: 3123678

VCARD
-----
In the process of replacing the native methods exposed in the mobile
apps, this commit implements the download of a vCard containing a
partner's information.

By using this standard format, both regular web users and mobile ones
are now able to save the partner's details to use them with their usual
address book software.

On a mobile device, the actual import of those informations is delegated
to the operating system.

References:
- https://datatracker.ietf.org/doc/html/rfc6350
- https://en.wikipedia.org/wiki/VCard
- https://github.com/eventable/vobject#vcards

Task ID: 2583916

===========
End of note
===========

Task ID: 3478014

closes odoo/odoo#133560

Related: odoo/enterprise#46530
Related: odoo/upgrade#5086
Signed-off-by: Adrien Dieudonné (adr) <adr@odoo.com>
Co-authored-by: Romeo Fragomeli <rfr@odoo.com>
Co-authored-by: Romain Estievenart <res@odoo.com>
Co-authored-by: Pierre Paridans <app@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/__init__.py
+++ b/addons/mail/models/__init__.py
@@ -57,6 +57,8 @@ from . import res_company
 from . import res_config_settings
 from . import res_users
 from . import update
+from . import web_push
+from . import partner_devices
 
 # after mail specifically as discuss module depends on mail
 from . import discuss

--- a/addons/mail/models/discuss/discuss_channel.py
+++ b/addons/mail/models/discuss/discuss_channel.py
@@ -591,6 +591,8 @@ class Channel(models.Model):
                     'last_interest_dt': member.last_interest_dt,
                 }])
         self.env['bus.bus'].sudo()._sendmany(bus_notifications)
+        if self.is_chat or self.channel_type == 'group':
+            self._notify_thread_by_web_push(message, rdata, msg_vals, **kwargs)
         return rdata
 
     def _message_receive_bounce(self, email, partner):
@@ -1296,3 +1298,41 @@ class Channel(models.Model):
             msg = _("Users in this channel: %(members)s %(dots)s and you.", members=", ".join(members), dots=dots)
 
         self._send_transient_message(self.env.user.partner_id, msg)
+
+    def _notify_thread_by_web_push(self, message, recipients_data, msg_vals=False, **kwargs):
+        """ Specifically handle channel members. """
+        chat_channels = self.filtered(lambda channel: channel.channel_type == 'chat')
+        if chat_channels:
+            # modify rdata only for calling super. Do not deep copy as we only
+            # add data into list but we do not modify item content
+            channel_rdata = recipients_data.copy()
+            channel_rdata += [
+                {'id': partner.id,
+                 'share': partner.partner_share,
+                 'active': partner.active,
+                 'notif': 'web_push',
+                 'type': 'customer',
+                 'groups': [],
+                 }
+                for partner in chat_channels.mapped("channel_partner_ids")
+            ]
+        else:
+            channel_rdata = recipients_data
+
+        return super()._notify_thread_by_web_push(message, channel_rdata, msg_vals=msg_vals, **kwargs)
+
+    def _notify_by_web_push_prepare_payload(self, message, msg_vals=False):
+        payload = super()._notify_by_web_push_prepare_payload(message, msg_vals=msg_vals)
+        payload['options']['data']['action'] = 'mail.action_discuss'
+        record_name = msg_vals.get('record_name') if msg_vals and 'record_name' in msg_vals else message.record_name
+        if self.channel_type == 'chat':
+            author_id = [msg_vals.get('author_id')] if 'author_id' in msg_vals else message.author_id.ids
+            payload['title'] = self.env['res.partner'].browse(author_id).name
+            payload['options']['icon'] = '/discuss/channel/%d/partner/%d/avatar_128' % (message.res_id, author_id[0])
+        elif self.channel_type == 'channel':
+            author_id = [msg_vals.get('author_id')] if 'author_id' in msg_vals else message.author_id.ids
+            author_name = self.env['res.partner'].browse(author_id).name
+            payload['title'] = "#%s - %s" % (record_name, author_name)
+        else:
+            payload['title'] = "#%s" % (record_name)
+        return payload

--- a/addons/mail/models/mail_thread.py
+++ b/addons/mail/models/mail_thread.py
@@ -31,6 +31,11 @@ from odoo.osv import expression
 from odoo.tools import is_html_empty, html_escape, html2plaintext, parse_contact_from_email
 from odoo.tools.misc import clean_context, split_every
 
+from requests import Session
+from ..web_push import push_to_end_point, DeviceUnreachableError
+
+MAX_DIRECT_PUSH = 5
+
 _logger = logging.getLogger(__name__)
 
 
@@ -2961,6 +2966,7 @@ class MailThread(models.AbstractModel):
             self._notify_thread_by_inbox(message, recipients_data, msg_vals=msg_vals, **kwargs)
             self._notify_thread_by_email(message, recipients_data, msg_vals=msg_vals, **kwargs)
 
+        self._notify_thread_by_web_push(message, recipients_data, msg_vals, **kwargs)
         return recipients_data
 
     def _notify_thread_by_inbox(self, message, recipients_data, msg_vals=False, **kwargs):
@@ -4179,3 +4185,205 @@ class MailThread(models.AbstractModel):
         if 'suggestedRecipients' in request_list:
             res['suggestedRecipients'] = self._message_get_suggested_recipients()[self.id]
         return res
+
+    def _extract_partner_ids_for_notifications(self, message, msg_vals, recipients_data):
+        notif_pids = []
+        no_inbox_pids = []
+        for recipient in recipients_data:
+            if recipient['active']:
+                notif_pids.append(recipient['id'])
+                if recipient['notif'] != 'inbox':
+                    no_inbox_pids.append(recipient['id'])
+
+        if not notif_pids:
+            return []
+
+        msg_sudo = message.sudo()
+        msg_type = msg_vals.get('message_type') or msg_sudo.message_type
+        author_id = [msg_vals.get('author_id')] if 'author_id' in msg_vals else msg_sudo.author_id.ids
+        # never send to author and to people outside Odoo (email), except comments
+        pids = set()
+        if msg_type == 'comment':
+            pids = set(notif_pids) - set(author_id)
+        elif msg_type in ('notification', 'user_notification', 'email'):
+            pids = (set(notif_pids) - set(author_id) - set(no_inbox_pids))
+        return list(pids)
+
+    def _truncate_payload(self, payload):
+        """
+        Check the payload limit of 4096 bytes to avoid 413 error return code.
+        If the payload is too big, we trunc the body value.
+        :param dict payload: Current payload to trunc
+        :return: The truncate payload;
+        """
+        payload_length = len(str(payload).encode())
+        body = payload['options']['body']
+        body_length = len(body)
+        if payload_length > 4096:
+            body_max_length = 4096 - payload_length - body_length
+            payload['options']['body'] = body.encode()[:body_max_length].decode(errors="ignore")
+        return payload
+
+    def _notify_thread_by_web_push(self, message, recipients_data, msg_vals=False, **kwargs):
+        """ Method to send cloud notifications for every mention of a partner
+        and every direct message. We have to take into account the risk of
+        duplicated notifications in case of a mention in a channel of `chat` type.
+
+        :param message: ``mail.message`` record to notify;
+        :param recipients_data: list of recipients information (based on res.partner
+          records), formatted like
+            [{'active': partner.active;
+              'id': id of the res.partner being recipient to notify;
+              'groups': res.group IDs if linked to a user;
+              'notif': 'inbox', 'email', 'sms' (SMS App);
+              'share': partner.partner_share;
+              'type': 'customer', 'portal', 'user;'
+             }, {...}].
+          See ``MailThread._notify_get_recipients``;
+        :param msg_vals: dictionary of values used to create the message. If given it
+          may be used to access values related to ``message`` without accessing it
+          directly. It lessens query count in some optimized use cases by avoiding
+          access message content in db;
+        """
+
+        msg_vals = dict(msg_vals or {})
+        partner_ids = self._extract_partner_ids_for_notifications(message, msg_vals, recipients_data)
+        if not partner_ids:
+            return
+
+        partner_devices_sudo = self.env['mail.partner.device'].sudo()
+        devices = partner_devices_sudo.search([
+            ('partner_id', 'in', partner_ids)
+        ])
+        if not devices:
+            return
+
+        ir_parameter_sudo = self.env['ir.config_parameter'].sudo()
+        vapid_private_key = ir_parameter_sudo.get_param('mail.web_push_vapid_private_key')
+        vapid_public_key = ir_parameter_sudo.get_param('mail.web_push_vapid_public_key')
+        if not vapid_private_key or not vapid_public_key:
+            _logger.warning("Missing web push vapid keys !")
+            return
+
+        payload = self._notify_by_web_push_prepare_payload(message, msg_vals=msg_vals)
+        payload = self._truncate_payload(payload)
+        if len(devices) < MAX_DIRECT_PUSH:
+            session = Session()
+            devices_to_unlink = set()
+            for device in devices:
+                try:
+                    push_to_end_point(
+                        base_url=self.get_base_url(),
+                        device={
+                            'id': device.id,
+                            'endpoint': device.endpoint,
+                            'keys': device.keys
+                        },
+                        payload=json.dumps(payload),
+                        vapid_private_key=vapid_private_key,
+                        vapid_public_key=vapid_public_key,
+                        session=session,
+                    )
+                except DeviceUnreachableError:
+                    devices_to_unlink.add(device.id)
+                except Exception as e:  # pylint: disable=broad-except
+                    # Avoid blocking the whole request just for a notification
+                    _logger.error('An error occurred while contacting the endpoint: %s', e)
+
+            # clean up obsolete devices
+            if devices_to_unlink:
+                devices_list = list(devices_to_unlink)
+                self.env['mail.partner.device'].sudo().browse(devices_list).unlink()
+
+        else:
+            self.env['mail.notification.web.push'].sudo().create([{
+                'user_device': device.id,
+                'payload': json.dumps(payload),
+            } for device in devices])
+            self.env.ref('mail.ir_cron_web_push_notification')._trigger()
+
+    def _notify_by_web_push_prepare_payload(self, message, msg_vals=False):
+        """ Returns dictionary containing message information for a browser device.
+        This info will be delivered to a browser device via its recorded endpoint.
+        REM: It is having a limit of 4000 bytes (4kb)
+        """
+        if msg_vals:
+            author_id = [msg_vals.get('author_id')]
+            author_name = self.env['res.partner'].browse(author_id).name
+            model = msg_vals.get('model')
+            title = msg_vals.get('record_name') or msg_vals.get('subject')
+            res_id = msg_vals.get('res_id')
+            body = msg_vals.get('body')
+            if not model and body:
+                model, res_id = self._extract_model_and_id(msg_vals)
+        else:
+            author_id = [message.author_id.ids]
+            author_name = self.env['res.partner'].browse(author_id).name
+            model = message.model
+            title = message.record_name or message.subject
+            res_id = message.res_id
+            body = message.body
+
+        icon = '/web/static/img/odoo-icon-192x192.png'
+
+        if author_name:
+            title = "%s: %s" % (author_name, title)
+            icon = "/web/image/res.users/%d/avatar_128" % author_id[0]
+
+        payload = {
+            'title': title,
+            'options': {
+                'icon': icon,
+                'data': {
+                    'model': model if model else '',
+                    'res_id': res_id if res_id else '',
+                }
+            }
+        }
+        payload['options']['body'] = tools.html2plaintext(body)
+        payload['options']['body'] += self._generate_tracking_message(message)
+
+        return payload
+
+    @api.model
+    def _extract_model_and_id(self, msg_vals):
+        """
+        Return the model and the id when is present in a link (HTML)
+
+        :param msg_vals: see :meth:`._notify_thread_by_web_push`
+
+        :return: a dict empty if no matches and a dict with these keys if match : model and res_id
+        """
+        regex = r"<a.+model=(?P<model>[\w.]+).+res_id=(?P<id>\d+).+>[\s\w\/\\.]+<\/a>"
+        matches = re.finditer(regex, msg_vals['body'])
+
+        for match in matches:
+            return match['model'], match['id']
+        return None, None
+
+    @api.model
+    def _generate_tracking_message(self, message, return_line='\n'):
+        """
+        Format the tracking values like in the chatter
+        :param message: current mail.message record
+        :param return_line: type of return line
+        :return: a string with the new text if there is one or more tracking value
+        """
+        tracking_message = ''
+        if message.subtype_id and message.subtype_id.description:
+            tracking_message = return_line + message.subtype_id.description + return_line
+
+        for value in message.sudo().tracking_value_ids.filtered(lambda tracking: not tracking.field_groups):
+            if value.field_type == 'boolean':
+                old_value = str(bool(value.old_value_integer))
+                new_value = str(bool(value.new_value_integer))
+            else:
+                old_value = value.old_value_char if value.old_value_char else str(value.old_value_integer)
+                new_value = value.new_value_char if value.new_value_char else str(value.new_value_integer)
+
+            tracking_message += value.field_desc + ': ' + old_value
+            if old_value != new_value:
+                tracking_message += ' → ' + new_value
+            tracking_message += return_line
+
+        return tracking_message

--- a/None
+++ b/addons/mail/models/partner_devices.py
@@ -0,0 +1,88 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+import json
+import logging as logger
+
+from odoo import api, fields, models
+from ..web_push import generate_web_push_vapid_key
+
+_logger = logger.getLogger(__name__)
+
+
+class InvalidVapidError(Exception):
+    pass
+
+
+class PartnerDevice(models.Model):
+    _name = 'mail.partner.device'
+    _description = 'Partner Web Push Device'
+
+    partner_id = fields.Many2one('res.partner', string='Partner', index=True, required=True,
+                                 default=lambda self: self.env.user.partner_id)
+    endpoint = fields.Char(string='Browser endpoint', required=True)
+    keys = fields.Char(string='Browser keys', required=True,
+                       help=("It's refer to browser keys used by the notification: \n"
+                             "- p256dh: It's the subscription public key generated by the browser. The browser will \n"
+                             "          keep the private key secret and use it for decrypting the payload\n"
+                             "- auth: The auth value should be treated as a secret and not shared outside of Odoo"))
+    expiration_time = fields.Datetime(string='Expiration Token Date')
+
+    _sql_constraints = [('endpoint_unique', 'unique(endpoint)', 'The endpoint must be unique !')]
+
+    @api.model
+    def get_web_push_vapid_public_key(self):
+        ir_params_sudo = self.env['ir.config_parameter'].sudo()
+        public_key = 'mail.web_push_vapid_public_key'
+        public_key_value = ir_params_sudo.get_param(public_key)
+        # Regenerate new Keys if public key not present
+        if not public_key_value:
+            self.sudo().search([]).unlink()  # Reset all devices (ServiceWorker)
+            private_key_value, public_key_value = generate_web_push_vapid_key()
+            ir_params_sudo.set_param('mail.web_push_vapid_private_key', private_key_value)
+            ir_params_sudo.set_param(public_key, public_key_value)
+            _logger.info("WebPush: missing public key, new VAPID keys generated")
+        return public_key_value
+
+    @api.model
+    def register_devices(self, **kw):
+        sw_vapid_public_key = kw.get('vapid_public_key')
+        valid_sub = self._verify_vapid_public_key(sw_vapid_public_key)
+        if not valid_sub:
+            raise InvalidVapidError("Invalid VAPID public key")
+        endpoint = kw.get('endpoint')
+        browser_keys = kw.get('keys')
+        if not endpoint or not browser_keys:
+            return
+        search_endpoint = kw.get('previousEndpoint', endpoint)
+        user_device = self.sudo().search([('endpoint', '=', search_endpoint)])
+        if user_device:
+            if user_device.partner_id is not self.env.user.partner_id:
+                user_device.write({
+                    'endpoint': endpoint,
+                    'expiration_time': kw.get('expirationTime'),
+                    'keys': json.dumps(browser_keys),
+                    'partner_id': self.env.user.partner_id,
+                })
+        else:
+            self.sudo().create([{
+                'endpoint': endpoint,
+                'expiration_time': kw.get('expirationTime'),
+                'keys': json.dumps(browser_keys),
+                'partner_id': self.env.user.partner_id.id,
+            }])
+
+    @api.model
+    def unregister_devices(self, **kw):
+        endpoint = kw.get('endpoint')
+        if not endpoint:
+            return
+        user_device = self.sudo().search([
+            ('endpoint', '=', endpoint)
+        ])
+        if user_device:
+            user_device.unlink()
+
+    def _verify_vapid_public_key(self, sw_public_key):
+        ir_params_sudo = self.env['ir.config_parameter'].sudo()
+        db_public_key = ir_params_sudo.get_param('mail.web_push_vapid_public_key')
+        return db_public_key == sw_public_key

--- a/None
+++ b/addons/mail/models/web_push.py
@@ -0,0 +1,67 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+import logging
+from requests import Session
+
+from ..web_push import push_to_end_point, DeviceUnreachableError
+
+from odoo import api, fields, models
+
+_logger = logging.getLogger(__name__)
+
+
+class WebPush(models.Model):
+    _name = 'mail.notification.web.push'
+    _description = 'Cron data used for web push notification'
+
+    user_device = fields.Many2one('mail.partner.device', string='devices', required=True, ondelete="cascade")
+    payload = fields.Text()
+
+    @api.model
+    def _push_notification_to_endpoint(self, batch_size=50):
+        """Send to web browser endpoint computed notification"""
+        web_push_notifications_sudo = self.sudo().search_fetch([], ['user_device', 'payload'], limit=batch_size)
+        if not web_push_notifications_sudo:
+            return
+
+        ir_parameter_sudo = self.env['ir.config_parameter'].sudo()
+        vapid_private_key = ir_parameter_sudo.get_param('mail.web_push_vapid_private_key')
+        vapid_public_key = ir_parameter_sudo.get_param('mail.web_push_vapid_public_key')
+        if not vapid_private_key or not vapid_public_key:
+            return
+
+        session = Session()
+        devices_to_unlink = set()
+
+        # process send notif
+        devices = web_push_notifications_sudo.user_device.grouped('id')
+        for web_push_notification_sudo in web_push_notifications_sudo:
+            device = devices.get(web_push_notification_sudo.user_device.id)
+            if device.id in devices_to_unlink:
+                continue
+            try:
+                push_to_end_point(
+                    base_url=self.get_base_url(),
+                    device={
+                        'id': device.id,
+                        'endpoint': device.endpoint,
+                        'keys': device.keys
+                    },
+                    payload=web_push_notification_sudo.payload,
+                    vapid_private_key=vapid_private_key,
+                    vapid_public_key=vapid_public_key,
+                    session=session,
+                )
+            except DeviceUnreachableError:
+                devices_to_unlink.add(device.id)
+
+        # clean up notif
+        web_push_notifications_sudo.unlink()
+
+        # clean up obsolete devices
+        if devices_to_unlink:
+            self.env['mail.partner.device'].sudo().browse(devices_to_unlink).unlink()
+
+        # restart the cron if needed
+        if self.search_count([]) > 0:
+            self.env.ref('mail.ir_cron_web_push_notification')._trigger()
