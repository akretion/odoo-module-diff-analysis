PR: https://github.com/odoo/odoo/pull/

From: 3b5d6da5c16e15477181a845672f4988419beeee
From: Yannick Tivisse
Date: 2016-08-25 14:06:44

Structural Changes: 6
Total Changes: 27

[FIX] hr_expense: Solve several usability issues on the flow

Review the subtypes
===================

- Add a subtype for the paid expenses
- Correct subtypes wording

Prevent expense report for several employees
============================================

- Can add lines from every employee, leading to account issues (payable / receivable)
  Raise an error if you try to report several expenses for different employees

Don't track onchanges on journal_id
===================================

- Expense Sheet, click on Post Journal Entries: you have 2 produced messages, and
  one is strange (Journal Entry: * 1 ?)

Remove useless message on chatter
=================================

- Remove the message to say that the expense report has been validated by ...
  It's redundant as the visibility tracker already logs this change

Remove unused method
====================

- 'refuse_expense_sheets' is declared but never used

Log a link to the payment on chatter
====================================

Expense Sheet, click on Register Payment: you have a message containing the
payment name (SUPP.OUT/2016/0001). Add a link to the form view.

Expense duplication
===================

Do not copy 'sheet_id' on duplication. It's wrong and has as secondary effect
to duplicate the state too.

Expense Report tree view
========================

Display correctly the widget monetary

================================= pseudo patch: =================================

--- a/addons/hr_expense/models/hr_expense.py
+++ b/addons/hr_expense/models/hr_expense.py
@@ -33,13 +33,14 @@ class HrExpense(models.Model):
     description = fields.Text()
     payment_mode = fields.Selection([("own_account", "Employee (to reimburse)"), ("company_account", "Company")], default='own_account', states={'done': [('readonly', True)], 'post': [('readonly', True)]}, string="Payment By")
     attachment_number = fields.Integer(compute='_compute_attachment_number', string='Number of Attachments')
-    state = fields.Selection([('draft', 'To Report'),
-                              ('reported', 'Reported'),
-                              ('done', 'Posted'),
-                              ('refused', 'Refused')
-        ], compute='_compute_state', default="draft", string='Status', index=True, readonly=True, copy=False, required=True, store=True,
+    state = fields.Selection([
+        ('draft', 'To Report'),
+        ('reported', 'Reported'),
+        ('done', 'Posted'),
+        ('refused', 'Refused')
+        ], compute='_compute_state', string='Status', copy=False, default="draft", index=True, readonly=True, required=True, store=True,
         help="Status of the expense.")
-    sheet_id = fields.Many2one('hr.expense.sheet', string="Expense Report", readonly=True)
+    sheet_id = fields.Many2one('hr.expense.sheet', string="Expense Report", readonly=True, copy=False)
     reference = fields.Char(string="Bill Reference")
 
     @api.depends('sheet_id', 'sheet_id.account_move_id', 'sheet_id.state')
@@ -100,6 +101,8 @@ class HrExpense(models.Model):
     def submit_expenses(self):
         if any(expense.state != 'draft' for expense in self):
             raise UserError(_("You cannot report twice the same line!"))
+        if len(self.mapped('employee_id')) != 1:
+            raise UserError(_("You cannot report expenses for different employees in the same report!"))
         return {
             'type': 'ir.actions.act_window',
             'view_mode': 'form',
@@ -368,7 +371,7 @@ class HrExpenseSheet(models.Model):
         help="The journal used when the expense is done.")
     bank_journal_id = fields.Many2one('account.journal', string='Bank Journal', states={'done': [('readonly', True)], 'post': [('readonly', True)]}, default=lambda self: self.env['account.journal'].search([('type', 'in', ['case', 'bank'])], limit=1), help="The payment method used when the expense is paid by the company.")
     accounting_date = fields.Date(string="Accounting Date")
-    account_move_id = fields.Many2one('account.move', string='Journal Entry', copy=False, track_visibility="onchange")
+    account_move_id = fields.Many2one('account.move', string='Journal Entry', copy=False)
     department_id = fields.Many2one('hr.department', string='Department', states={'post': [('readonly', True)], 'done': [('readonly', True)]})
 
     @api.multi
@@ -409,6 +412,8 @@ class HrExpenseSheet(models.Model):
             return 'hr_expense.mt_expense_confirmed'
         elif 'state' in init_values and self.state == 'cancel':
             return 'hr_expense.mt_expense_refused'
+        elif 'state' in init_values and self.state == 'done':
+            return 'hr_expense.mt_expense_paid'
         return super(HrExpenseSheet, self)._track_subtype(init_values)
 
     def _add_followers(self):
@@ -461,16 +466,8 @@ class HrExpenseSheet(models.Model):
 
     @api.multi
     def approve_expense_sheets(self):
-        self.message_post(body=_("The expense has been validated by %s") % (self.env.user.name))
         self.write({'state': 'approve', 'responsible_id': self.env.user.id})
 
-    @api.multi
-    def refuse_expense_sheets(self, reason):
-        self.write({'state': 'cancel'})
-        for sheet in self:
-            body = (_("Your Expense %s has been refused.<br/><ul class=o_timeline_tracking_value_list><li>Reason<span> : </span><span class=o_timeline_tracking_value>%s</span></li></ul>") % (sheet.name, reason))
-            sheet.message_post(body=body)
-
     @api.multi
     def paid_expense_sheets(self):
         self.write({'state': 'done'})
