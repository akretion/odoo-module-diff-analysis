PR: https://github.com/odoo/odoo/pull/151357

From: 4aa4b0f5022838dff7068724f3d9265b20487e20
From: Kamran Poladov
Date: 2024-03-18 14:11:32

Structural Changes: 2
Total Changes: 96

[IMP] mrp: add product catalog to bill of materials

Product catalog is made accessible from BoM Components and Byproducts sections.

An extra 'child_model' argument is introduced and being passed across the entire product
catalog flow in order to differentiate between Components and Byproducts sections.

Task: 3640422
Part-of: odoo/odoo#151357
Co-authored-by: William Henrotin <12071695+Whenrow@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_bom.py
+++ b/addons/mrp/models/mrp_bom.py
@@ -14,7 +14,7 @@ class MrpBom(models.Model):
     """ Defines bills of material for a product or a product template """
     _name = 'mrp.bom'
     _description = 'Bill of Material'
-    _inherit = ['mail.thread']
+    _inherit = ['mail.thread', 'product.catalog.mixin']
     _rec_name = 'product_tmpl_id'
     _rec_names_search = ['product_tmpl_id', 'code']
     _order = "sequence, id"
@@ -432,6 +432,46 @@ class MrpBom(models.Model):
             if productions:
                 productions.is_outdated_bom = True
 
+    # -------------------------------------------------------------------------
+    # CATALOG
+    # -------------------------------------------------------------------------
+
+    def _default_order_line_values(self, child_field=False):
+        default_data = super()._default_order_line_values(child_field)
+        new_default_data = self[child_field]._get_product_catalog_lines_data(default=True)
+
+        return {**default_data, **new_default_data}
+
+    def _get_product_catalog_order_data(self, products, **kwargs):
+        return {product.id: self._get_product_price_and_data(product) for product in products}
+
+    def _get_product_price_and_data(self, product):
+        self.ensure_one()
+        return {'price': product.standard_price}
+
+    def _get_product_catalog_record_lines(self, product_ids, child_field=False, **kwargs):
+        if not child_field:
+            return {}
+        lines = self[child_field].filtered(lambda line: line.product_id.id in product_ids)
+        return lines.grouped('product_id')
+
+    def _update_order_line_info(self, product_id, quantity, child_field=False, **kwargs):
+        if not child_field:
+            return 0
+        entity = self[child_field].filtered(lambda line: line.product_id.id == product_id)
+        if entity:
+            if quantity != 0:
+                entity.product_qty = quantity
+            else:
+                entity.unlink()
+        elif quantity > 0:
+            command = Command.create({
+                'product_qty': quantity,
+                'product_id': product_id,
+            })
+            self.write({child_field: [command]})
+
+        return self.env['product.product'].browse(product_id).standard_price
 
 class MrpBomLine(models.Model):
     _name = 'mrp.bom.line'
@@ -583,6 +623,33 @@ class MrpBomLine(models.Model):
             'context': "{'default_res_model': '%s','default_res_id': %d, 'default_company_id': %s}" % ('product.product', self.product_id.id, self.company_id.id)
         }
 
+    # -------------------------------------------------------------------------
+    # CATALOG
+    # -------------------------------------------------------------------------
+
+    def action_add_from_catalog(self):
+        bom = self.env['mrp.bom'].browse(self.env.context.get('order_id'))
+        return bom.with_context(child_field='bom_line_ids').action_add_from_catalog()
+
+    def _get_product_catalog_lines_data(self, default=False, **kwargs):
+        if self and not default:
+            self.product_id.ensure_one()
+            return {
+                **self[0].bom_id._get_product_price_and_data(self[0].product_id),
+                'quantity': sum(
+                    self.mapped(
+                        lambda line: line.product_uom_id._compute_quantity(
+                            qty=line.product_qty,
+                            to_unit=line.product_uom_id,
+                        )
+                    )
+                ),
+                'readOnly': len(self) > 1,
+            }
+        return {
+            'quantity': 0,
+        }
+
 
 class MrpByProduct(models.Model):
     _name = 'mrp.bom.byproduct'
@@ -630,3 +697,30 @@ class MrpByProduct(models.Model):
         if product._name == 'product.template':
             return False
         return not product._match_all_variant_values(self.bom_product_template_attribute_value_ids)
+
+    # -------------------------------------------------------------------------
+    # CATALOG
+    # -------------------------------------------------------------------------
+
+    def action_add_from_catalog(self):
+        bom = self.env['mrp.bom'].browse(self.env.context.get('order_id'))
+        return bom.with_context(child_field='byproduct_ids').action_add_from_catalog()
+
+    def _get_product_catalog_lines_data(self, default=False, **kwargs):
+        if self and not default:
+            self.product_id.ensure_one()
+            return {
+                **self[0].bom_id._get_product_price_and_data(self[0].product_id),
+                'quantity': sum(
+                    self.mapped(
+                        lambda line: line.product_uom_id._compute_quantity(
+                            qty=line.product_qty,
+                            to_unit=line.product_uom_id,
+                        )
+                    )
+                ),
+                'readOnly': len(self) > 1
+            }
+        return {
+            'quantity': 0,
+        }
