PR: https://github.com/odoo/odoo/pull/

From: d7af45bb03d83ffedffeaacc89fd7265134629d9
From: Thibault DelavallÃ©e
Date: 2016-04-29 10:18:36

Structural Changes: 34
Total Changes: 390

[MIGR] stock: barcode, settings, planner and res_*

Those models are migrated to new API. No change is performed to code
structure or functional structure. Some code cleaning may be performed when
migrating to simplify the code. Other files may be updated due to the move
towards the new API.

================================= pseudo patch: =================================

--- a/addons/stock/models/barcode.py
+++ b/addons/stock/models/barcode.py
@@ -1,15 +1,14 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import models
-from odoo.tools.translate import _
+from odoo import models, _
 
 
-class barcode_rule(models.Model):
+class BarcodeRule(models.Model):
     _inherit = 'barcode.rule'
 
     def _get_type_selection(self):
-        types = set(super(barcode_rule, self)._get_type_selection())
+        types = set(super(BarcodeRule, self)._get_type_selection())
         types.update([
             ('weight', _('Weighted Product')),
             ('location', _('Location')),

--- a/addons/stock/models/res_company.py
+++ b/addons/stock/models/res_company.py
@@ -1,45 +1,36 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from openerp.osv import fields, osv
-from openerp.tools.translate import _
+from odoo import api, fields, models, _
 
-class res_company(osv.osv):
+
+class Company(models.Model):
     _inherit = "res.company"
-    _columns = {
-        'propagation_minimum_delta': fields.integer('Minimum Delta for Propagation of a Date Change on moves linked together'),
-        'internal_transit_location_id': fields.many2one('stock.location', 'Internal Transit Location', help="Technical field used for resupply routes between warehouses that belong to this company", on_delete="restrict"),
-    }
 
-    def create_transit_location(self, cr, uid, company_id, company_name, context=None):
+    propagation_minimum_delta = fields.Integer('Minimum Delta for Propagation of a Date Change on moves linked together', default=1)
+    internal_transit_location_id = fields.Many2one(
+        'stock.location', 'Internal Transit Location', on_delete="restrict",
+        help="Technical field used for resupply routes between warehouses that belong to this company")
+
+    @api.one
+    def create_transit_location(self):
         '''Create a transit location with company_id being the given company_id. This is needed
            in case of resuply routes between warehouses belonging to the same company, because
            we don't want to create accounting entries at that time.
         '''
-        data_obj = self.pool.get('ir.model.data')
-        try:
-            parent_loc = data_obj.get_object_reference(cr, uid, 'stock', 'stock_location_locations')[1]
-        except:
-            parent_loc = False
-        location_vals = {
-            'name': _('%s: Transit Location') % company_name,
+        # TDE FIXME: called in data - should be done in init ??
+        parent_location = self.env.ref('stock.stock_location_locations', raise_if_not_found=False)
+        location = self.env['stock.location'].create({
+            'name': _('%s: Transit Location') % self.name,
             'usage': 'transit',
-            'company_id': company_id,
-            'location_id': parent_loc,
-        }
-        location_id = self.pool.get('stock.location').create(cr, uid, location_vals, context=context)
-        self.write(cr, uid, [company_id], {'internal_transit_location_id': location_id}, context=context)
-
-    def create(self, cr, uid, vals, context=None):
-        company_id = super(res_company, self).create(cr, uid, vals, context=context)
-        self.pool['stock.warehouse'].create(cr, uid, {
-            'name': vals['name'],
-            'code': vals['name'][:5],
-            'company_id': company_id,
-        }, context=context)
-        self.create_transit_location(cr, uid, company_id, vals['name'], context=context)
-        return company_id
+            'company_id': self.id,
+            'location_id': parent_location and parent_location.id or False,
+        })
+        self.write({'internal_transit_location_id': location.id})
 
-    _defaults = {
-        'propagation_minimum_delta': 1,
-    }
+    @api.model
+    def create(self, vals):
+        company = super(Company, self).create(vals)
+        self.env['stock.warehouse'].create({'name': company.name, 'code': company.name[:5], 'company_id': company.id})
+        company.create_transit_location()
+        return company

--- a/addons/stock/models/res_partner.py
+++ b/addons/stock/models/res_partner.py
@@ -1,26 +1,19 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from openerp.osv import fields, osv
-from openerp.addons.base.res.res_partner import WARNING_MESSAGE, WARNING_HELP
+from odoo import fields, models
+from odoo.addons.base.res.res_partner import WARNING_MESSAGE, WARNING_HELP
 
-class res_partner(osv.osv):
+
+class Partner(models.Model):
     _inherit = 'res.partner'
-    _columns = {
-        'property_stock_customer': fields.property(
-          type='many2one',
-          relation='stock.location',
-          string="Customer Location",
-          help="This stock location will be used, instead of the default one, as the destination location for goods you send to this partner"),
-        'property_stock_supplier': fields.property(
-          type='many2one',
-          relation='stock.location',
-          string="Vendor Location",
-          help="This stock location will be used, instead of the default one, as the source location for goods you receive from the current partner"),
-        'picking_warn' : fields.selection(WARNING_MESSAGE, 'Stock Picking', help=WARNING_HELP, required=True),
-        'picking_warn_msg' : fields.text('Message for Stock Picking'),
-    }
 
-    _defaults = {
-        'picking_warn': 'no-message',
-    }
+    property_stock_customer = fields.Many2one(
+        'stock.location', string="Customer Location", company_dependent=True,
+        help="This stock location will be used, instead of the default one, as the destination location for goods you send to this partner")
+    property_stock_supplier = fields.Many2one(
+        'stock.location', string="Vendor Location", company_dependent=True,
+        help="This stock location will be used, instead of the default one, as the source location for goods you receive from the current partner")
+    picking_warn = fields.Selection(WARNING_MESSAGE, 'Stock Picking', help=WARNING_HELP, default='no-message', required=True)
+    # TDE FIXME: expand this message / help
+    picking_warn_msg = fields.Text('Message for Stock Picking')

--- a/addons/stock/models/stock_config_settings.py
+++ b/addons/stock/models/stock_config_settings.py
@@ -1,164 +1,148 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from openerp.osv import fields, osv
+from odoo import api, fields, models
 
-class stock_config_settings(osv.osv_memory):
+
+class StockSettings(models.TransientModel):
     _name = 'stock.config.settings'
     _inherit = 'res.config.settings'
 
-    def set_group_stock_multi_locations(self, cr, uid, ids, context=None):
-        """
-            If we are not in multiple locations,
-            we can deactivate the internal picking types of the warehouses.
-            That way, they won't appear in the dashboard.
-        """
-        for obj in self.browse(cr, uid, ids, context=context):
-            wh_obj = self.pool['stock.warehouse']
-            whs = wh_obj.search(cr, uid, [], context=context)
-            warehouses = wh_obj.browse(cr, uid, whs, context=context)
-            if obj.group_stock_multi_locations:
-                # Check inactive picking types and of warehouses make them active (by warehouse)
-                inttypes = [x.int_type_id.id for x in warehouses if not x.int_type_id.active]
-                if inttypes:
-                    self.pool['stock.picking.type'].write(cr, uid, inttypes, {'active': True}, context=context)
-            else:
-                # Check active internal picking types of warehouses and make them inactive
-                inttypes = [x.int_type_id.id for x in warehouses if x.int_type_id.active and x.reception_steps == 'one_step' and x.delivery_steps == 'ship_only']
-                if inttypes:
-                    self.pool['stock.picking.type'].write(cr, uid, inttypes, {'active': False}, context=context)
-        return True
-
-    def default_get(self, cr, uid, fields, context=None):
-        res = super(stock_config_settings, self).default_get(cr, uid, fields, context=context)
+    @api.model
+    def default_get(self, fields):
+        res = super(StockSettings, self).default_get(fields)
         if 'warehouse_and_location_usage_level' in fields or not fields:
             res['warehouse_and_location_usage_level'] = int(res.get('group_stock_multi_locations', False)) + int(res.get('group_stock_multi_warehouses', False))
         return res
 
-    def onchange_warehouse_and_location_usage_level(self, cr, uid, ids, level, context=None):
-        return {'value': {
-            'group_stock_multi_locations': level > 0,
-            'group_stock_multi_warehouses': level > 1,
-        }}
+    group_product_variant = fields.Selection([
+        (0, "No variants on products"),
+        (1, 'Products can have several attributes, defining variants (Example: size, color,...)')
+        ], "Product Variants",
+        implied_group='product.group_product_variant',
+        help='Work with product variant allows you to define some variant of the same products, an ease the product management in the ecommerce for example')
+    company_id = fields.Many2one(
+        'res.company', 'Company',
+        default=lambda self: self.env.user.company_id, required=True)
+    module_procurement_jit = fields.Selection([
+        (1, 'Reserve products immediately after the sale order confirmation'),
+        (0, 'Reserve products manually or based on automatic scheduler')
+        ], "Procurements",
+        help="""Allows you to automatically reserve the available
+        products when confirming a sale order.
+            This installs the module procurement_jit.""")
+    module_claim_from_delivery = fields.Selection([
+        (0, 'Do not manage claims'),
+        (1, 'Allow claims on deliveries')
+        ], "Claims",
+        help='Adds a Claim link to the delivery order.\n'
+             '-This installs the module claim_from_delivery.')
+    module_product_expiry = fields.Selection([
+        (0, 'Do not use Expiration Date on serial numbers'),
+        (1, 'Define Expiration Date on serial numbers')
+        ], "Expiration Dates",
+        help="""Track different dates on products and serial numbers.
+                The following dates can be tracked:
+                - end of life
+                - best before date
+                - removal date
+                - alert date.
+                This installs the module product_expiry.""")
+    group_uom = fields.Selection([
+        (0, 'Products have only one unit of measure (easier)'),
+        (1, 'Some products may be sold/purchased in different units of measure (advanced)')
+        ], "Units of Measure",
+        implied_group='product.group_uom',
+        help="""Allows you to select and maintain different units of measure for products.""")
+    group_stock_packaging = fields.Selection([
+        (0, 'Do not manage packaging'),
+        (1, 'Manage available packaging options per products')
+        ], "Packaging Methods",
+        implied_group='product.group_stock_packaging',
+        help="""Allows you to create and manage your packaging dimensions and types you want to be maintained in your system.""")
+    group_stock_production_lot = fields.Selection([
+        (0, 'Do not track individual product items'),
+        (1, 'Track lots or serial numbers')
+        ], "Lots and Serial Numbers",
+        implied_group='stock.group_production_lot',
+        help="""This allows you to assign a lot (or serial number) to the pickings and moves.  This can make it possible to know which production lot was sent to a certain client, ...""")
+    group_stock_tracking_lot = fields.Selection([
+        (0, 'Do not manage packaging'),
+        (1, 'Record packages used on packing: pallets, boxes, ...')
+        ], "Packages",
+        implied_group='stock.group_tracking_lot',
+        help="""This allows to manipulate packages.  You can put something in, take something from a package, but also move entire packages and put them even in another package.  """)
+    group_stock_tracking_owner = fields.Selection([
+        (0, 'All products in your warehouse belong to your company'),
+        (1, 'Manage consignee stocks (advanced)')
+        ], "Product Owners",
+        implied_group='stock.group_tracking_owner',
+        help="""This way you can receive products attributed to a certain owner. """)
+    group_stock_adv_location = fields.Selection([
+        (0, 'No automatic routing of products'),
+        (1, 'Advanced routing of products using rules')
+        ], "Routes",
+        implied_group='stock.group_adv_location',
+        help="""This option supplements the warehouse application by effectively implementing Push and Pull inventory flows through Routes.""")
+    group_warning = fields.Selection([
+        (0, 'All the partners can be used in pickings'),
+        (1, 'An informative or blocking warning can be set on a partner')
+        ], "Warning", implied_group='stock.group_warning')
+    decimal_precision = fields.Integer('Decimal precision on weight', help="As an example, a decimal precision of 2 will allow weights like: 9.99 kg, whereas a decimal precision of 4 will allow weights like:  0.0231 kg.")
+    propagation_minimum_delta = fields.Integer("Minimum days to trigger a propagation of date change in pushed/pull flows.", related='company_id.propagation_minimum_delta')
+    module_stock_dropshipping = fields.Selection([
+        (0, 'Suppliers always deliver to your warehouse(s)'),
+        (1, "Allow suppliers to deliver directly to your customers")
+        ], "Dropshipping",
+        help='\nCreates the dropship route and add more complex tests\n'
+             '-This installs the module stock_dropshipping.')
+    module_stock_picking_wave = fields.Selection([
+        (0, 'Manage pickings one at a time'),
+        (1, 'Manage picking in batch per worker')
+        ], "Picking Waves",
+        help='Install the picking wave module which will help you grouping your pickings and processing them in batch')
+    module_stock_calendar = fields.Selection([
+        (0, 'Set lead times in calendar days (easy)'),
+        (1, "Adapt lead times using the suppliers' open days calendars (advanced)")
+        ], "Minimum Stock Rules",
+        help='This allows you to handle minimum stock rules differently by the possibility to take into account the purchase and delivery calendars \n-This installs the module stock_calendar.')
+    module_stock_barcode = fields.Boolean("Barcode scanner support")
+    module_delivery_dhl = fields.Boolean("DHL integration")
+    module_delivery_fedex = fields.Boolean("Fedex integration")
+    module_delivery_temando = fields.Boolean("Temando integration")
+    module_delivery_ups = fields.Boolean("UPS integration")
+    module_delivery_usps = fields.Boolean("USPS integration")
+    # Warehouse and location usage_level
+    warehouse_and_location_usage_level = fields.Selection([
+        (0, 'Manage only 1 Warehouse with only 1 stock location'),
+        (1, 'Manage only 1 Warehouse, composed by several stock locations'),
+        (2, 'Manage several Warehouses, each one composed by several stock locations')
+        ], "Warehouses and Locations usage level")
+    group_stock_multi_locations = fields.Boolean('Manage several stock locations', implied_group='stock.group_stock_multi_locations')
+    group_stock_multi_warehouses = fields.Boolean('Manage several warehouses', implied_group='stock.group_stock_multi_warehouses')
 
-    _columns = {
-        'group_product_variant': fields.selection([
-            (0, "No variants on products"),
-            (1, 'Products can have several attributes, defining variants (Example: size, color,...)')
-            ], "Product Variants",
-            help='Work with product variant allows you to define some variant of the same products, an ease the product management in the ecommerce for example',
-            implied_group='product.group_product_variant'),
-        'company_id': fields.many2one('res.company', 'Company', required=True),
-        'module_procurement_jit': fields.selection([
-            (1, 'Reserve products immediately after the sale order confirmation'),
-            (0, 'Reserve products manually or based on automatic scheduler')
-            ], "Procurements",
-            help="""Allows you to automatically reserve the available
-            products when confirming a sale order.
-                This installs the module procurement_jit."""),
-        'module_claim_from_delivery': fields.selection([
-            (0, 'Do not manage claims'),
-            (1, 'Allow claims on deliveries')
-            ], "Claims",
-            help='Adds a Claim link to the delivery order.\n'
-                 '-This installs the module claim_from_delivery.'),
-        'module_product_expiry': fields.selection([
-            (0, 'Do not use Expiration Date on serial numbers'),
-            (1, 'Define Expiration Date on serial numbers')
-            ], "Expiration Dates",
-            help="""Track different dates on products and serial numbers.
-                    The following dates can be tracked:
-                    - end of life
-                    - best before date
-                    - removal date
-                    - alert date.
-                    This installs the module product_expiry."""),
-        'group_uom': fields.selection([
-            (0, 'Products have only one unit of measure (easier)'),
-            (1, 'Some products may be sold/purchased in different units of measure (advanced)')
-            ], "Units of Measure",
-            implied_group='product.group_uom',
-            help="""Allows you to select and maintain different units of measure for products."""),
-        'group_stock_packaging': fields.selection([
-            (0, 'Do not manage packaging'),
-            (1, 'Manage available packaging options per products')
-            ], "Packaging Methods",
-            implied_group='product.group_stock_packaging',
-            help="""Allows you to create and manage your packaging dimensions and types you want to be maintained in your system."""),
-        'group_stock_production_lot': fields.selection([
-            (0, 'Do not track individual product items'),
-            (1, 'Track lots or serial numbers')
-            ], "Lots and Serial Numbers",
-            implied_group='stock.group_production_lot',
-            help="""This allows you to assign a lot (or serial number) to the pickings and moves.  This can make it possible to know which production lot was sent to a certain client, ..."""),
-        'group_stock_tracking_lot': fields.selection([
-            (0, 'Do not manage packaging'),
-            (1, 'Record packages used on packing: pallets, boxes, ...')
-            ], "Packages",
-            implied_group='stock.group_tracking_lot',
-            help="""This allows to manipulate packages.  You can put something in, take something from a package, but also move entire packages and put them even in another package.  """),
-        'group_warning': fields.selection([
-            (0, 'All the partners can be used in pickings'),
-            (1, 'An informative or blocking warning can be set on a partner')
-            ], "Warning", implied_group='stock.group_warning'),
+    @api.onchange('warehouse_and_location_usage_level')
+    def onchange_warehouse_and_location_usage_level(self):
+        self.group_stock_multi_locations = self.warehouse_and_location_usage_level > 0
+        self.group_stock_multi_warehouses = self.warehouse_and_location_usage_level > 1
 
-        'group_stock_tracking_owner': fields.selection([
-            (0, 'All products in your warehouse belong to your company'),
-            (1, 'Manage consignee stocks (advanced)')
-            ], "Product Owners",
-            implied_group='stock.group_tracking_owner',
-            help="""This way you can receive products attributed to a certain owner. """),
-        'group_stock_adv_location': fields.selection([
-            (0, 'No automatic routing of products'),
-            (1, 'Advanced routing of products using rules')
-            ], "Routes",
-            implied_group='stock.group_adv_location',
-            help="""This option supplements the warehouse application by effectively implementing Push and Pull inventory flows through Routes."""),
-        'decimal_precision': fields.integer('Decimal precision on weight', help="As an example, a decimal precision of 2 will allow weights like: 9.99 kg, whereas a decimal precision of 4 will allow weights like:  0.0231 kg."),
-        'propagation_minimum_delta': fields.related('company_id', 'propagation_minimum_delta', type='integer', string="Minimum days to trigger a propagation of date change in pushed/pull flows."),
-        'module_stock_dropshipping': fields.selection([
-            (0, 'Suppliers always deliver to your warehouse(s)'),
-            (1, "Allow suppliers to deliver directly to your customers")
-            ], "Dropshipping",
-            help='\nCreates the dropship route and add more complex tests\n'
-                 '-This installs the module stock_dropshipping.'),
-        'module_stock_picking_wave': fields.selection([
-            (0, 'Manage pickings one at a time'),
-            (1, 'Manage picking in batch per worker')
-            ], "Picking Waves",
-            help='Install the picking wave module which will help you grouping your pickings and processing them in batch'),
-        'module_stock_calendar': fields.selection([
-            (0, 'Set lead times in calendar days (easy)'),
-            (1, "Adapt lead times using the suppliers' open days calendars (advanced)")
-            ], "Minimum Stock Rules",
-            help='This allows you to handle minimum stock rules differently by the possibility to take into account the purchase and delivery calendars \n-This installs the module stock_calendar.'),
-        'module_stock_barcode': fields.boolean("Barcode scanner support"),
-        'module_delivery_dhl': fields.boolean("DHL integration"),
-        'module_delivery_fedex': fields.boolean("Fedex integration"),
-        'module_delivery_temando': fields.boolean("Temando integration"),
-        'module_delivery_ups': fields.boolean("UPS integration"),
-        'module_delivery_usps': fields.boolean("USPS integration"),
-        # Warehouse and location usage_level : 
-        'warehouse_and_location_usage_level': fields.selection([
-            (0, 'Manage only 1 Warehouse with only 1 stock location'),
-            (1, 'Manage only 1 Warehouse, composed by several stock locations'),
-            (2, 'Manage several Warehouses, each one composed by several stock locations')
-            ], "Warehouses and Locations usage level"),
-        'group_stock_multi_locations': fields.boolean('Manage several stock locations',
-            implied_group='stock.group_stock_multi_locations'),
-        'group_stock_multi_warehouses': fields.boolean('Manage several warehouses',
-            implied_group='stock.group_stock_multi_warehouses'),
-    }
+    @api.onchange('group_stock_adv_location')
+    def onchange_adv_location(self):
+        if self.group_stock_adv_location:
+            self.warehouse_and_location_usage_level = 1
 
-    def onchange_adv_location(self, cr, uid, ids, group_stock_adv_location, context=None):
-        if group_stock_adv_location:
-            return {'value': {'warehouse_and_location_usage_level': 1}}
-        return {}
-
-    def _default_company(self, cr, uid, context=None):
-        user = self.pool.get('res.users').browse(cr, uid, uid, context=context)
-        return user.company_id.id
-
-    _defaults = {
-        'company_id': _default_company,
-    }
+    @api.multi
+    def set_group_stock_multi_locations(self):
+        """ If we are not in multiple locations, we can deactivate the internal
+        picking types of the warehouses. That way, they won't appear in the dashboard. """
+        for config in self:
+            warehouses = self.env['stock.warehouse'].search([])
+            if config.group_stock_multi_locations:
+                # Check inactive picking types and of warehouses make them active (by warehouse)
+                picking_types = warehouses.mapped('int_type_id').filtered(lambda self: not self.active)
+                picking_types.write({'active': True})
+            else:
+                # Check active internal picking types of warehouses and make them inactive
+                picking_types = warehouses.mapped('int_type_id').filtered(lambda self: self.active and self.reception_steps == 'one_step' and self.delivery_steps == 'ship_only')
+                picking_types.write({'active': False})
+        return True

--- a/addons/stock/models/web_planner.py
+++ b/addons/stock/models/web_planner.py
@@ -1,17 +1,12 @@
 # -*- coding: utf-8 -*-
-from openerp import models
 
+from odoo import models
 
-class PlannerInventory(models.Model):
 
+class PlannerInventory(models.Model):
     _inherit = 'web.planner'
 
     def _get_planner_application(self):
         planner = super(PlannerInventory, self)._get_planner_application()
         planner.append(['planner_inventory', 'Inventory Planner'])
         return planner
-
-    def _prepare_planner_inventory_data(self):
-        # TDE note: void method kept (stable version), probably to remove in master
-        return {
-        }
