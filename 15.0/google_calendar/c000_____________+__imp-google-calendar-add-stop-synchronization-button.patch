PR: https://github.com/odoo/odoo/pull/

From: 6acdcb6fd88bbcc650bf025bd50e93debf8f724d
From: Aur√©lien (avd)
Date: 2020-12-10 09:23:10

Structural Changes: 2
Total Changes: 41

[IMP] google_calendar: add stop synchronization button

Add the possibility to stop/restart the synchronization with
Google Calendar.

Change the calendar event popover of the calendar view to
display an 'Archive' button if the event was synced at least
one.

Add some tests for the new stop/restart features.

================================= pseudo patch: =================================

--- a/addons/google_calendar/models/calendar.py
+++ b/addons/google_calendar/models/calendar.py
@@ -33,6 +33,12 @@ class Meeting(models.Model):
         return {'name', 'description', 'allday', 'start', 'date_end', 'stop',
                 'attendee_ids', 'alarm_ids', 'location', 'privacy', 'active'}
 
+    @api.model
+    def _restart_google_sync(self):
+        self.env['calendar.event'].search(self._get_sync_domain()).write({
+            'need_sync': True,
+        })
+
     @api.model_create_multi
     def create(self, vals_list):
         return super().create([

--- a/addons/google_calendar/models/calendar_recurrence_rule.py
+++ b/addons/google_calendar/models/calendar_recurrence_rule.py
@@ -79,6 +79,12 @@ class RecurrenceRule(models.Model):
     def _get_google_synced_fields(self):
         return {'rrule'}
 
+    @api.model
+    def _restart_google_sync(self):
+        self.env['calendar.recurrence'].search(self._get_sync_domain()).write({
+            'need_sync': True,
+        })
+
     @api.model
     def _sync_google2odoo(self, *args, **kwargs):
         synced_recurrences = super()._sync_google2odoo(*args, **kwargs)

--- a/addons/google_calendar/models/google_sync.py
+++ b/addons/google_calendar/models/google_sync.py
@@ -72,7 +72,7 @@ class GoogleSync(models.AbstractModel):
         if 'google_id' in vals:
             self._from_google_ids.clear_cache(self)
         synced_fields = self._get_google_synced_fields()
-        if 'need_sync' not in vals and vals.keys() & synced_fields:
+        if 'need_sync' not in vals and vals.keys() & synced_fields and not self.env.user.google_synchronization_stopped:
             vals['need_sync'] = True
 
         result = super().write(vals)
@@ -86,6 +86,9 @@ class GoogleSync(models.AbstractModel):
     def create(self, vals_list):
         if any(vals.get('google_id') for vals in vals_list):
             self._from_google_ids.clear_cache(self)
+        if self.env.user.google_synchronization_stopped:
+            for vals in vals_list:
+                vals.update({'need_sync': False})
         records = super().create(vals_list)
 
         google_service = GoogleCalendarService(self.env['google.service'])
@@ -244,3 +247,10 @@ class GoogleSync(models.AbstractModel):
         marks the record to be re-synchronized.
         """
         raise NotImplementedError()
+
+    @api.model
+    def _restart_google_sync(self):
+        """ Turns on the google synchronization for all the events of
+        a given user.
+        """
+        raise NotImplementedError()

--- a/addons/google_calendar/models/res_users.py
+++ b/addons/google_calendar/models/res_users.py
@@ -23,7 +23,8 @@ class User(models.Model):
     google_calendar_token_validity = fields.Datetime('Token Validity', copy=False)
     google_calendar_sync_token = fields.Char('Next Sync Token', copy=False)
     google_calendar_cal_id = fields.Char('Calendar ID', copy=False, help='Last Calendar ID who has been synchronized. If it is changed, we remove all links between GoogleID and Odoo Google Internal ID')
-
+    google_synchronization_stopped = fields.Boolean('Google Synchronization stopped', copy=False)
+    
     def _set_auth_tokens(self, access_token, refresh_token, ttl):
         self.write({
             'google_calendar_rtoken': refresh_token,
@@ -79,6 +80,8 @@ class User(models.Model):
 
     def _sync_google_calendar(self, calendar_service: GoogleCalendarService):
         self.ensure_one()
+        if self.google_synchronization_stopped:
+            return False
         full_sync = not bool(self.google_calendar_sync_token)
         with google_calendar_token(self) as token:
             try:
@@ -106,7 +109,7 @@ class User(models.Model):
     @api.model
     def _sync_all_google_calendar(self):
         """ Cron job """
-        users = self.env['res.users'].search([('google_calendar_rtoken', '!=', False)])
+        users = self.env['res.users'].search([('google_calendar_rtoken', '!=', False), ('google_synchronization_stopped', '=', False)])
         google = GoogleCalendarService(self.env['google.service'])
         for user in users:
             _logger.info("Calendar Synchro - Starting synchronization for %s", user)
@@ -114,3 +117,13 @@ class User(models.Model):
                 user.with_user(user).sudo()._sync_google_calendar(google)
             except Exception as e:
                 _logger.exception("[%s] Calendar Synchro - Exception : %s !", user, exception_to_unicode(e))
+
+    def stop_google_synchronization(self):
+        self.ensure_one()
+        self.sudo().google_synchronization_stopped = True
+
+    def restart_google_synchronization(self):
+        self.ensure_one()
+        self.sudo().google_synchronization_stopped = False
+        self.env['calendar.recurrence']._restart_google_sync()
+        self.env['calendar.event']._restart_google_sync()
