PR: https://github.com/odoo/odoo/pull/

From: 3db0fd7cf364e0801605337bac974818a9b1e274
From: Jeremy Kersten
Date: 2016-09-06 11:59:35

Structural Changes: 1
Total Changes: 58

[IMP] product: make property_product_pricelit dynamic for res partner

Now the porperty product pricelist is computed automatically.

Based on the res_country of the res_partner, and the pricelist available
for this country.

It is always possible to force another value (property) that the computed.

================================= pseudo patch: =================================

--- a/addons/product/models/product_pricelist.py
+++ b/addons/product/models/product_pricelist.py
@@ -287,6 +287,33 @@ class Pricelist(models.Model):
         """ Mono pricelist, multi product - return price per product """
         return pricelist.get_products_price(zip(**products_by_qty_by_partner))
 
+    def _get_partner_pricelist(self, partner_id, company_id=None):
+        """ Retrieve the applicable pricelist for a given partner in a given company.
+
+            :param company_id: if passed, used for looking up properties,
+             instead of current user's company
+        """
+        Partner = self.env['res.partner']
+        Property = self.env['ir.property'].with_context(force_company=company_id or self.env.user.company_id.id)
+
+        p = Partner.browse(partner_id)
+        pl = Property.get('property_product_pricelist', Partner._name, '%s,%s' % (Partner._name, p.id))
+
+        if not pl:
+            if p.country_id.code:
+                pls = self.env['product.pricelist'].search([('country_group_ids.country_ids.code', '=', p.country_id.code)], limit=1)
+                pl = pls and pls[0].id
+
+        if not pl:
+            pl = Property.get('property_product_pricelist', 'res.partner').id
+
+        if not pl:
+            # search pl where no country
+            pls = self.env['product.pricelist'].search([('country_group_ids', '=', False)], limit=1)
+            pl = pls and pls[0].id
+
+        return pl
+
 
 class ResCountryGroup(models.Model):
     _inherit = 'res.country.group'
@@ -427,3 +454,4 @@ class PricelistItem(models.Model):
                 'price_min_margin': 0.0,
                 'price_max_margin': 0.0,
             })
+

--- a/addons/product/models/res_partner.py
+++ b/addons/product/models/res_partner.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import fields, models
+from odoo import fields, models, api
 
 
 class Partner(models.Model):
@@ -9,8 +9,34 @@ class Partner(models.Model):
     _inherit = 'res.partner'
 
     property_product_pricelist = fields.Many2one(
-        'product.pricelist', 'Sale Pricelist', company_dependent=True,
+        'product.pricelist', 'Sale Pricelist', compute='_compute_product_pricelist',
+        inverse="_inverse_product_pricelist", company_dependent=False,  # NOT A REAL PROPERTY
         help="This pricelist will be used, instead of the default one, for sales to the current partner")
 
+    @api.multi
+    @api.depends('country_id')
+    def _compute_product_pricelist(self):
+        for p in self:
+            if not isinstance(p.id, models.NewId):  # if not onchange
+                p.property_product_pricelist = self.env['product.pricelist']._get_partner_pricelist(p.id)
+
+    @api.one
+    def _inverse_product_pricelist(self):
+        pls = self.env['product.pricelist'].search(
+            [('country_group_ids.country_ids.code', '=', self.country_id and self.country_id.code or False)],
+            limit=1
+        )
+        default_for_country = pls and pls[0]
+        actual = self.env['ir.property'].get('property_product_pricelist', 'res.partner', 'res.partner,%s' % self.id)
+
+        # update at each change country, and so erase old pricelist
+        if self.property_product_pricelist or (actual and default_for_country and default_for_country.id != actual.id):
+            self.env['ir.property'].set_multi(
+                'property_product_pricelist',
+                self._name,
+                {self.id: self.property_product_pricelist or default_for_country.id},
+                default_value=default_for_country.id
+            )
+
     def _commercial_fields(self):
         return super(Partner, self)._commercial_fields() + ['property_product_pricelist']
