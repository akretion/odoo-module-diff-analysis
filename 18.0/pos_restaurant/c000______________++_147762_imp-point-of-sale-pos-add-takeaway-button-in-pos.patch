PR: https://github.com/odoo/odoo/pull/147762

From: 1395065fe1283db957a99305bccc742483999485
From: David Monnom (moda)
Date: 2024-02-27 00:57:59

Structural Changes: 5
Total Changes: 13

[IMP] point_of_sale,pos*: add takeaway button in PoS

Previously, the PoS restaurant did not have the option of creating
takeaway orders. Self Order added this possibility via a mobile or kiosk
but not in the main point-of-sale application.

This functionality has now been added, and it is now possible to
ctivate the takeaway in the pos_config. A button toggling the takeaway
will then be present in the PoS interface.

closes odoo/odoo#147762

Taskid: 3640824
Related: odoo/enterprise#57004
Related: odoo/upgrade#5481
Signed-off-by: Joseph Caburnay (jcb) <jcb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_restaurant/models/pos_config.py
+++ b/addons/pos_restaurant/models/pos_config.py
@@ -16,6 +16,12 @@ class PosConfig(models.Model):
     set_tip_after_payment = fields.Boolean('Set Tip After Payment', help="Adjust the amount authorized by payment terminals to add a tip after the customers left or at the end of the day.")
     module_pos_restaurant = fields.Boolean(default=True)
     module_pos_restaurant_appointment = fields.Boolean("Table Booking")
+    takeaway = fields.Boolean("Takeaway", help="Allow to create orders for takeaway customers.")
+    takeaway_fp_id = fields.Many2one(
+        'account.fiscal.position',
+        string='Alternative Fiscal Position',
+        help='This is useful for restaurants with onsite and take-away services that imply specific tax rates.',
+    )
 
     def get_tables_order_count_and_printing_changes(self):
         self.ensure_one()

--- a/addons/pos_restaurant/models/pos_order.py
+++ b/addons/pos_restaurant/models/pos_order.py
@@ -16,6 +16,7 @@ class PosOrder(models.Model):
 
     table_id = fields.Many2one('restaurant.table', string='Table', help='The table where this order was served', index='btree_not_null', readonly=True)
     customer_count = fields.Integer(string='Guests', help='The amount of customers that have been served by this order.', readonly=True)
+    takeaway = fields.Boolean(string="Take Away", default=False)
 
     @api.model
     def remove_from_ui(self, server_ids):
@@ -84,12 +85,14 @@ class PosOrder(models.Model):
         order_fields = super(PosOrder, self)._order_fields(ui_order)
         order_fields['table_id'] = ui_order.get('table_id', False)
         order_fields['customer_count'] = ui_order.get('customer_count', 0)
+        order_fields['takeaway'] = ui_order.get('takeaway', False)
         return order_fields
 
     def _export_for_ui(self, order):
         result = super(PosOrder, self)._export_for_ui(order)
         result['table_id'] = order.table_id.id
         result['customer_count'] = order.customer_count
+        result['takeaway'] = order.takeaway
         return result
 
     @api.model

--- a/addons/pos_restaurant/models/pos_session.py
+++ b/addons/pos_restaurant/models/pos_session.py
@@ -3,6 +3,7 @@
 
 from odoo import models, Command, api
 from odoo.tools import convert
+from odoo.osv.expression import OR
 import json
 
 class PosSession(models.Model):
@@ -25,6 +26,7 @@ class PosSession(models.Model):
                     ],
                 }
             })
+            params['account.fiscal.position']['domain'] = OR([params['account.fiscal.position']['domain'], [('id', '=', self.config_id.takeaway_fp_id.id)]])
 
         return params
 

--- a/addons/pos_restaurant/models/res_config_settings.py
+++ b/addons/pos_restaurant/models/res_config_settings.py
@@ -12,6 +12,8 @@ class ResConfigSettings(models.TransientModel):
     pos_iface_splitbill = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False)
     pos_set_tip_after_payment = fields.Boolean(compute='_compute_pos_set_tip_after_payment', store=True, readonly=False)
     pos_module_pos_restaurant_appointment = fields.Boolean(related="pos_config_id.module_pos_restaurant_appointment", readonly=False)
+    pos_takeaway = fields.Boolean(related="pos_config_id.takeaway", readonly=False)
+    pos_takeaway_fp_id = fields.Many2one(related="pos_config_id.takeaway_fp_id", readonly=False)
 
     @api.depends('pos_module_pos_restaurant', 'pos_config_id')
     def _compute_pos_module_pos_restaurant(self):
