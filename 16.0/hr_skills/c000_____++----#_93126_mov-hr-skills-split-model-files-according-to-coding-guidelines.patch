PR: https://github.com/odoo/odoo/pull/93126

From: 16ee5235e0a5805c65c71bab2c89a4603ed690b8
From: Yannick Tivisse
Date: 2022-06-09 13:26:22

Breaking data model changes scores: del:24 + add:6, change matches:
+    resume_line_ids = fields.One2many('hr.resume.line', 'employee_id', string="Resumé lines")
+    employee_skill_ids = fields.One2many('hr.employee.skill', 'employee_id', string="Skills")
+    resume_line_ids = fields.One2many('hr.resume.line', 'employee_id', string="Resumé lines")
+    employee_skill_ids = fields.One2many('hr.employee.skill', 'employee_id', string="Skills")
-    _inherit = 'hr.employee'
-    resume_line_ids = fields.One2many('hr.resume.line', 'employee_id', string="Resumé lines")
-    employee_skill_ids = fields.One2many('hr.employee.skill', 'employee_id', string="Skills")
-    _inherit = 'hr.employee.public'
-    resume_line_ids = fields.One2many('hr.resume.line', 'employee_id', string="Resumé lines")
-    employee_skill_ids = fields.One2many('hr.employee.skill', 'employee_id', string="Skills")
+    skill_ids = fields.One2many('hr.skill', 'skill_type_id', string="Skills")
+    skill_level_ids = fields.One2many('hr.skill.level', 'skill_type_id', string="Levels")
-    employee_id = fields.Many2one('hr.employee', required=True, ondelete='cascade')
-    skill_id = fields.Many2one('hr.skill', compute='_compute_skill_id', store=True, domain="[('skill_type_id', '=', skill_type_id)]", readonly=False, required=True)
-    skill_level_id = fields.Many2one('hr.skill.level', compute='_compute_skill_level_id', domain="[('skill_type_id', '=', skill_type_id)]", store=True, readonly=False, required=True)
-    skill_type_id = fields.Many2one('hr.skill.type', required=True)
-    level_progress = fields.Integer(related='skill_level_id.level_progress')
-    skill_type_id = fields.Many2one('hr.skill.type', ondelete='cascade')
-    name = fields.Char(required=True)
-    level_progress = fields.Integer(string="Progress", help="Progress from zero knowledge (0%) to fully mastered (100%).")
-    default_level = fields.Boolean(help="If checked, this level will be the default one selected when choosing this skill.")
-    name = fields.Char(required=True)
-    skill_ids = fields.One2many('hr.skill', 'skill_type_id', string="Skills")
-    skill_level_ids = fields.One2many('hr.skill.level', 'skill_type_id', string="Levels")

Total Changes: 393

[MOV] hr_skills: Split model files according to coding guidelines

Part-of: odoo/odoo#93126

================================= pseudo patch: =================================

--- a/addons/hr_skills/models/__init__.py
+++ b/addons/hr_skills/models/__init__.py
@@ -1,6 +1,12 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import hr_resume
+from . import hr_employee
+from . import hr_employee_public
+from . import hr_resume_line
+from . import hr_resume_line_type
 from . import hr_skills
+from . import hr_employee_skill
+from . import hr_skill_level
+from . import hr_skill_type
 from . import res_users

--- a/None
+++ b/addons/hr_skills/models/hr_employee.py
@@ -0,0 +1,29 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class Employee(models.Model):
+    _inherit = 'hr.employee'
+
+    resume_line_ids = fields.One2many('hr.resume.line', 'employee_id', string="Resumé lines")
+    employee_skill_ids = fields.One2many('hr.employee.skill', 'employee_id', string="Skills")
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        res = super(Employee, self).create(vals_list)
+        if self.env.context.get('salary_simulation'):
+            return res
+        resume_lines_values = []
+        for employee in res:
+            line_type = self.env.ref('hr_skills.resume_type_experience', raise_if_not_found=False)
+            resume_lines_values.append({
+                'employee_id': employee.id,
+                'name': employee.company_id.name or '',
+                'date_start': employee.create_date.date(),
+                'description': employee.job_title or '',
+                'line_type_id': line_type and line_type.id,
+            })
+        self.env['hr.resume.line'].create(resume_lines_values)
+        return res

--- a/None
+++ b/addons/hr_skills/models/hr_employee_public.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class EmployeePublic(models.Model):
+    _inherit = 'hr.employee.public'
+
+    resume_line_ids = fields.One2many('hr.resume.line', 'employee_id', string="Resumé lines")
+    employee_skill_ids = fields.One2many('hr.employee.skill', 'employee_id', string="Skills")

--- a/None
+++ b/addons/hr_skills/models/hr_employee_skill.py
@@ -0,0 +1,49 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
+
+
+class EmployeeSkill(models.Model):
+    _name = 'hr.employee.skill'
+    _description = "Skill level for an employee"
+    _rec_name = 'skill_id'
+    _order = "skill_level_id"
+
+    employee_id = fields.Many2one('hr.employee', required=True, ondelete='cascade')
+    skill_id = fields.Many2one('hr.skill', compute='_compute_skill_id', store=True, domain="[('skill_type_id', '=', skill_type_id)]", readonly=False, required=True)
+    skill_level_id = fields.Many2one('hr.skill.level', compute='_compute_skill_level_id', domain="[('skill_type_id', '=', skill_type_id)]", store=True, readonly=False, required=True)
+    skill_type_id = fields.Many2one('hr.skill.type', required=True)
+    level_progress = fields.Integer(related='skill_level_id.level_progress')
+
+    _sql_constraints = [
+        ('_unique_skill', 'unique (employee_id, skill_id)', "Two levels for the same skill is not allowed"),
+    ]
+
+    @api.constrains('skill_id', 'skill_type_id')
+    def _check_skill_type(self):
+        for record in self:
+            if record.skill_id not in record.skill_type_id.skill_ids:
+                raise ValidationError(_("The skill %(name)s and skill type %(type)s doesn't match", name=record.skill_id.name, type=record.skill_type_id.name))
+
+    @api.constrains('skill_type_id', 'skill_level_id')
+    def _check_skill_level(self):
+        for record in self:
+            if record.skill_level_id not in record.skill_type_id.skill_level_ids:
+                raise ValidationError(_("The skill level %(level)s is not valid for skill type: %(type)s", level=record.skill_level_id.name, type=record.skill_type_id.name))
+
+    @api.depends('skill_type_id')
+    def _compute_skill_id(self):
+        for record in self:
+            if record.skill_id.skill_type_id != record.skill_type_id:
+                record.skill_id = False
+
+    @api.depends('skill_id')
+    def _compute_skill_level_id(self):
+        for record in self:
+            if not record.skill_id:
+                record.skill_level_id = False
+            else:
+                skill_levels = record.skill_type_id.skill_level_ids
+                record.skill_level_id = skill_levels.filtered('default_level') or skill_levels[0] if skill_levels else False

--- a/addons/hr_skills/models/hr_resume.py
+++ b/None
@@ -1,65 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, fields, models
-
-
-class Employee(models.Model):
-    _inherit = 'hr.employee'
-
-    resume_line_ids = fields.One2many('hr.resume.line', 'employee_id', string="Resumé lines")
-    employee_skill_ids = fields.One2many('hr.employee.skill', 'employee_id', string="Skills")
-
-    @api.model_create_multi
-    def create(self, vals_list):
-        res = super(Employee, self).create(vals_list)
-        if self.env.context.get('salary_simulation'):
-            return res
-        resume_lines_values = []
-        for employee in res:
-            line_type = self.env.ref('hr_skills.resume_type_experience', raise_if_not_found=False)
-            resume_lines_values.append({
-                'employee_id': employee.id,
-                'name': employee.company_id.name or '',
-                'date_start': employee.create_date.date(),
-                'description': employee.job_title or '',
-                'line_type_id': line_type and line_type.id,
-            })
-        self.env['hr.resume.line'].create(resume_lines_values)
-        return res
-
-
-class EmployeePublic(models.Model):
-    _inherit = 'hr.employee.public'
-
-    resume_line_ids = fields.One2many('hr.resume.line', 'employee_id', string="Resumé lines")
-    employee_skill_ids = fields.One2many('hr.employee.skill', 'employee_id', string="Skills")
-
-
-class ResumeLine(models.Model):
-    _name = 'hr.resume.line'
-    _description = "Resumé line of an employee"
-    _order = "line_type_id, date_end desc, date_start desc"
-
-    employee_id = fields.Many2one('hr.employee', required=True, ondelete='cascade')
-    name = fields.Char(required=True)
-    date_start = fields.Date(required=True)
-    date_end = fields.Date()
-    description = fields.Text(string="Description")
-    line_type_id = fields.Many2one('hr.resume.line.type', string="Type")
-
-    # Used to apply specific template on a line
-    display_type = fields.Selection([('classic', 'Classic')], string="Display Type", default='classic')
-
-    _sql_constraints = [
-        ('date_check', "CHECK ((date_start <= date_end OR date_end = NULL))", "The start date must be anterior to the end date."),
-    ]
-
-
-class ResumeLineType(models.Model):
-    _name = 'hr.resume.line.type'
-    _description = "Type of a resumé line"
-    _order = "sequence"
-
-    name = fields.Char(required=True)
-    sequence = fields.Integer('Sequence', default=10)

--- a/None
+++ b/addons/hr_skills/models/hr_resume_line.py
@@ -0,0 +1,33 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class ResumeLine(models.Model):
+    _name = 'hr.resume.line'
+    _description = "Resumé line of an employee"
+    _order = "line_type_id, date_end desc, date_start desc"
+
+    employee_id = fields.Many2one('hr.employee', required=True, ondelete='cascade')
+    name = fields.Char(required=True)
+    date_start = fields.Date(required=True)
+    date_end = fields.Date()
+    description = fields.Text(string="Description")
+    line_type_id = fields.Many2one('hr.resume.line.type', string="Type")
+
+    # Used to apply specific template on a line
+    display_type = fields.Selection([('classic', 'Classic')], string="Display Type", default='classic')
+
+    _sql_constraints = [
+        ('date_check', "CHECK ((date_start <= date_end OR date_end = NULL))", "The start date must be anterior to the end date."),
+    ]
+
+
+class ResumeLineType(models.Model):
+    _name = 'hr.resume.line.type'
+    _description = "Type of a resumé line"
+    _order = "sequence"
+
+    name = fields.Char(required=True)
+    sequence = fields.Integer('Sequence', default=10)

--- a/None
+++ b/addons/hr_skills/models/hr_resume_line_type.py
@@ -0,0 +1,13 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class ResumeLineType(models.Model):
+    _name = 'hr.resume.line.type'
+    _description = "Type of a resumé line"
+    _order = "sequence"
+
+    name = fields.Char(required=True)
+    sequence = fields.Integer('Sequence', default=10)

--- a/None
+++ b/addons/hr_skills/models/hr_skill_level.py
@@ -0,0 +1,52 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
+
+
+class SkillLevel(models.Model):
+    _name = 'hr.skill.level'
+    _description = "Skill Level"
+    _order = "level_progress desc"
+
+    skill_type_id = fields.Many2one('hr.skill.type', ondelete='cascade')
+    name = fields.Char(required=True)
+    level_progress = fields.Integer(string="Progress", help="Progress from zero knowledge (0%) to fully mastered (100%).")
+    default_level = fields.Boolean(help="If checked, this level will be the default one selected when choosing this skill.")
+
+    _sql_constraints = [
+        ('check_level_progress', 'CHECK(level_progress BETWEEN 0 AND 100)', "Progress should be a number between 0 and 100."),
+    ]
+
+    def name_get(self):
+        if not self._context.get('from_skill_level_dropdown'):
+            return super().name_get()
+        return [(record.id, f"{record.name} ({record.level_progress}%)") for record in self]
+
+    def create(self, vals_list):
+        levels = super().create(vals_list)
+        levels.skill_type_id._set_default_level()
+        return levels
+
+    def write(self, values):
+        levels = super().write(values)
+        self.skill_type_id._set_default_level()
+        return levels
+
+    def unlink(self):
+        skill_types = self.skill_type_id
+        res = super().unlink()
+        skill_types._set_default_level()
+        return res
+
+    @api.constrains('default_level', 'skill_type_id')
+    def _constrains_default_level(self):
+        for skill_type in set(self.mapped('skill_type_id')):
+            if len(skill_type.skill_level_ids.filtered('default_level')) > 1:
+                raise ValidationError(_('Only one default level is allowed per skill type.'))
+
+    def action_set_default(self):
+        self.ensure_one()
+        self.skill_type_id.skill_level_ids.with_context(no_skill_level_check=True).default_level = False
+        self.default_level = True

--- a/None
+++ b/addons/hr_skills/models/hr_skill_type.py
@@ -0,0 +1,22 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class SkillType(models.Model):
+    _name = 'hr.skill.type'
+    _description = "Skill Type"
+    _order = "name"
+
+    name = fields.Char(required=True)
+    skill_ids = fields.One2many('hr.skill', 'skill_type_id', string="Skills")
+    skill_level_ids = fields.One2many('hr.skill.level', 'skill_type_id', string="Levels")
+
+    def _set_default_level(self):
+        if self.env.context.get('no_skill_level_check'):
+            return
+
+        for types in self:
+            if not types.skill_level_ids.filtered('default_level'):
+                types.skill_level_ids[:1].default_level = True

--- a/addons/hr_skills/models/hr_skills.py
+++ b/addons/hr_skills/models/hr_skills.py
@@ -1,8 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models, _
-from odoo.exceptions import ValidationError
+from odoo import fields, models
 
 
 class Skill(models.Model):
@@ -18,111 +17,3 @@ class Skill(models.Model):
         if not self._context.get('from_skill_dropdown'):
             return super().name_get()
         return [(record.id, f"{record.name} ({record.skill_type_id.name})") for record in self]
-
-
-class EmployeeSkill(models.Model):
-    _name = 'hr.employee.skill'
-    _description = "Skill level for an employee"
-    _rec_name = 'skill_id'
-    _order = "skill_level_id"
-
-    employee_id = fields.Many2one('hr.employee', required=True, ondelete='cascade')
-    skill_id = fields.Many2one('hr.skill', compute='_compute_skill_id', store=True, domain="[('skill_type_id', '=', skill_type_id)]", readonly=False, required=True)
-    skill_level_id = fields.Many2one('hr.skill.level', compute='_compute_skill_level_id', domain="[('skill_type_id', '=', skill_type_id)]", store=True, readonly=False, required=True)
-    skill_type_id = fields.Many2one('hr.skill.type', required=True)
-    level_progress = fields.Integer(related='skill_level_id.level_progress')
-
-    _sql_constraints = [
-        ('_unique_skill', 'unique (employee_id, skill_id)', "Two levels for the same skill is not allowed"),
-    ]
-
-    @api.constrains('skill_id', 'skill_type_id')
-    def _check_skill_type(self):
-        for record in self:
-            if record.skill_id not in record.skill_type_id.skill_ids:
-                raise ValidationError(_("The skill %(name)s and skill type %(type)s doesn't match", name=record.skill_id.name, type=record.skill_type_id.name))
-
-    @api.constrains('skill_type_id', 'skill_level_id')
-    def _check_skill_level(self):
-        for record in self:
-            if record.skill_level_id not in record.skill_type_id.skill_level_ids:
-                raise ValidationError(_("The skill level %(level)s is not valid for skill type: %(type)s", level=record.skill_level_id.name, type=record.skill_type_id.name))
-
-    @api.depends('skill_type_id')
-    def _compute_skill_id(self):
-        for record in self:
-            if record.skill_id.skill_type_id != record.skill_type_id:
-                record.skill_id = False
-
-    @api.depends('skill_id')
-    def _compute_skill_level_id(self):
-        for record in self:
-            if not record.skill_id:
-                record.skill_level_id = False
-            else:
-                skill_levels = record.skill_type_id.skill_level_ids
-                record.skill_level_id = skill_levels.filtered('default_level') or skill_levels[0] if skill_levels else False
-
-
-class SkillLevel(models.Model):
-    _name = 'hr.skill.level'
-    _description = "Skill Level"
-    _order = "level_progress desc"
-
-    skill_type_id = fields.Many2one('hr.skill.type', ondelete='cascade')
-    name = fields.Char(required=True)
-    level_progress = fields.Integer(string="Progress", help="Progress from zero knowledge (0%) to fully mastered (100%).")
-    default_level = fields.Boolean(help="If checked, this level will be the default one selected when choosing this skill.")
-
-    _sql_constraints = [
-        ('check_level_progress', 'CHECK(level_progress BETWEEN 0 AND 100)', "Progress should be a number between 0 and 100."),
-    ]
-
-    def name_get(self):
-        if not self._context.get('from_skill_level_dropdown'):
-            return super().name_get()
-        return [(record.id, f"{record.name} ({record.level_progress}%)") for record in self]
-
-    def create(self, vals_list):
-        levels = super().create(vals_list)
-        levels.skill_type_id._set_default_level()
-        return levels
-
-    def write(self, values):
-        levels = super().write(values)
-        self.skill_type_id._set_default_level()
-        return levels
-
-    def unlink(self):
-        skill_types = self.skill_type_id
-        res = super().unlink()
-        skill_types._set_default_level()
-        return res
-
-    @api.constrains('default_level', 'skill_type_id')
-    def _constrains_default_level(self):
-        for skill_type in set(self.mapped('skill_type_id')):
-            if len(skill_type.skill_level_ids.filtered('default_level')) > 1:
-                raise ValidationError(_('Only one default level is allowed per skill type.'))
-
-    def action_set_default(self):
-        self.ensure_one()
-        self.skill_type_id.skill_level_ids.with_context(no_skill_level_check=True).default_level = False
-        self.default_level = True
-
-class SkillType(models.Model):
-    _name = 'hr.skill.type'
-    _description = "Skill Type"
-    _order = "name"
-
-    name = fields.Char(required=True)
-    skill_ids = fields.One2many('hr.skill', 'skill_type_id', string="Skills")
-    skill_level_ids = fields.One2many('hr.skill.level', 'skill_type_id', string="Levels")
-
-    def _set_default_level(self):
-        if self.env.context.get('no_skill_level_check'):
-            return
-
-        for types in self:
-            if not types.skill_level_ids.filtered('default_level'):
-                types.skill_level_ids[:1].default_level = True
