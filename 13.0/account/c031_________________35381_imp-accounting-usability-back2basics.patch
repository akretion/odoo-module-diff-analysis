PR: https://github.com/odoo/odoo/pull/35381

From: 9bc4a19d74185a066b7ac870b02fd1836c4392b6
From: Florian Gilbert
Date: 2019-08-21 19:07:26

Structural Changes: 2
Total Changes: 57

[IMP] accounting : Usability back2basics.

task #2041848

closes odoo/odoo#35381

Signed-off-by: Quentin De Paoli (qdp) <qdp@openerp.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account.py
+++ b/addons/account/models/account.py
@@ -345,10 +345,13 @@ class AccountAccount(models.Model):
         self.reconcile = self.internal_type in ('receivable', 'payable')
         if self.internal_type == 'liquidity':
             self.reconcile = False
-
-        if self.internal_group == 'off_balance':
+        elif self.internal_group == 'off_balance':
             self.reconcile = False
             self.tax_ids = False
+        elif self.internal_group == 'income' and not self.tax_ids:
+            self.tax_ids = self.company_id.account_sale_tax_id
+        elif self.internal_group == 'expense' and not self.tax_ids:
+            self.tax_ids = self.company_id.account_purchase_tax_id
 
     @api.onchange('code')
     def onchange_code(self):

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -79,8 +79,7 @@ class AccountMove(models.Model):
     date = fields.Date(string='Date', required=True, index=True, readonly=True,
         states={'draft': [('readonly', False)]},
         default=fields.Date.context_today)
-    ref = fields.Char(string='Reference', copy=False, readonly=True,
-        states={'draft': [('readonly', False)]})
+    ref = fields.Char(string='Reference', copy=False)
     narration = fields.Text(string='Internal Note')
     state = fields.Selection(selection=[
             ('draft', 'Unposted'),
@@ -934,7 +933,6 @@ class AccountMove(models.Model):
                 sign = -1
             else:
                 sign = 1
-
             move.amount_untaxed = sign * (total_untaxed_currency if len(currencies) == 1 else total_untaxed)
             move.amount_tax = sign * (total_tax_currency if len(currencies) == 1 else total_tax)
             move.amount_total = sign * (total_currency if len(currencies) == 1 else total)
@@ -1122,6 +1120,7 @@ class AccountMove(models.Model):
                         'id': line.id,
                         'position': currency_id.position,
                         'digits': [69, move.currency_id.decimal_places],
+                        'payment_date': fields.Date.to_string(line.date), 
                     })
                 info['title'] = type_payment
                 move.invoice_outstanding_credits_debits_widget = json.dumps(info)
@@ -1853,7 +1852,7 @@ class AccountMove(models.Model):
                     raise UserError(_("The field 'Vendor' is required, please complete it to validate the Vendor Bill."))
 
             if move.is_invoice(include_receipts=True) and float_compare(move.amount_total, 0.0, precision_rounding=move.currency_id.rounding) < 0:
-                raise UserError(_("You cannot validate an invoice with a negative total amount. You should create a credit note instead."))
+                raise UserError(_("You cannot validate an invoice with a negative total amount. You should create a credit note instead. Use the action menu to transform it into a credit note or refund."))
 
             # Handle case when the invoice_date is not set. In that case, the invoice_date is set at today and then,
             # lines are recomputed accordingly.
@@ -2013,6 +2012,29 @@ class AccountMove(models.Model):
             .with_context(active_ids=self.ids, active_model='account.move', active_id=self.id)\
             .action_register_payment()
 
+    def action_switch_invoice_into_refund_credit_note(self):
+        if any(move.type not in ('in_invoice', 'out_invoice') for move in self):
+            raise ValidationError(_("This action isn't available for this document."))
+        
+        for move in self:
+            move.type = move.type.replace('invoice', 'refund')       
+            reversed_move = move._reverse_move_vals({}, False)
+            new_invoice_line_ids = []
+            for cmd, virtualid, line_vals in reversed_move['line_ids']:
+                if not line_vals['exclude_from_invoice_tab']:
+                    new_invoice_line_ids.append((0, 0,line_vals))
+            if move.amount_total < 0:
+                # Inverse all invoice_line_ids
+                for cmd, virtualid, line_vals in new_invoice_line_ids:
+                    line_vals.update({
+                        'quantity' : -line_vals['quantity'],
+                        'amount_currency' : -line_vals['amount_currency'],
+                        'debit' : line_vals['credit'],
+                        'credit' : line_vals['debit']
+                    })
+            move.write({'invoice_line_ids' : [(5, 0, 0)]})
+            move.write({'invoice_line_ids' : new_invoice_line_ids})
+
     def _get_report_base_filename(self):
         if any(not move.is_invoice() for move in self):
             raise UserError(_("Only invoices could be printed."))
@@ -2318,9 +2340,7 @@ class AccountMoveLine(models.Model):
             elif self.account_id.tax_ids:
                 tax_ids = self.account_id.tax_ids
             else:
-                tax_ids = self.env['account.tax']
-            if not tax_ids and not self.exclude_from_invoice_tab:
-                tax_ids = self.move_id.company_id.account_sale_tax_id
+                tax_ids = None
         elif self.move_id.is_purchase_document(include_receipts=True):
             # In invoice.
             if self.product_id.supplier_taxes_id:
@@ -2328,14 +2348,12 @@ class AccountMoveLine(models.Model):
             elif self.account_id.tax_ids:
                 tax_ids = self.account_id.tax_ids
             else:
-                tax_ids = self.env['account.tax']
-            if not tax_ids and not self.exclude_from_invoice_tab:
-                tax_ids = self.move_id.company_id.account_purchase_tax_id
+                tax_ids = None
         else:
             # Miscellaneous operation.
             tax_ids = self.account_id.tax_ids
 
-        if self.company_id:
+        if self.company_id and tax_ids:
             tax_ids = tax_ids.filtered(lambda tax: tax.company_id == self.company_id)
 
         fiscal_position = self.move_id.fiscal_position_id

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -173,7 +173,7 @@ class AccountChartTemplate(models.Model):
         # Ensure everything is translated to the company's language, not the user's one.
         self = self.with_context(lang=company.partner_id.lang, company=company)
         if not self.env.is_admin():
-            raise AccessError(_("Only administrators can load a charf of accounts"))
+            raise AccessError(_("Only administrators can load a chart of accounts"))
 
         existing_accounts = self.env['account.account'].search([('company_id', '=', company.id)])
         if existing_accounts:
@@ -648,7 +648,15 @@ class AccountChartTemplate(models.Model):
         account_tmpl_obj = self.env['account.account.template']
         acc_template = account_tmpl_obj.search([('nocreate', '!=', True), ('chart_template_id', '=', self.id)], order='id')
         template_vals = []
+        all_parents = self._get_chart_parent_ids()
+        sale_tax = self.env['account.tax.template'].search([('type_tax_use', '=', 'sale'), ('chart_template_id', 'in', all_parents)], limit=1)
+        purchase_tax = self.env['account.tax.template'].search([('type_tax_use', '=', 'purchase'), ('chart_template_id', 'in', all_parents)], limit=1)
         for account_template in acc_template:
+            # Adding a tax by default on each income or expense account.
+            if account_template.user_type_id.internal_group == 'income':
+                account_template.tax_ids = sale_tax
+            elif account_template.user_type_id.internal_group == 'expense':
+                account_template.tax_ids = purchase_tax
             code_main = account_template.code and len(account_template.code) or 0
             code_acc = account_template.code or ''
             if code_main > 0 and code_main <= code_digits:
