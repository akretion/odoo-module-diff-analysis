PR: https://github.com/odoo/odoo/pull/

From: 9568b1525b62d3056c735e83c1b53e324fb9b2d9
From: Akash Bhavsar
Date: 2017-09-07 15:55:57

Structural Changes: 6
Total Changes: 89

[IMP] mail, calendar: integrate meeting activities with calendar

This commit improves the use of mail activities by allowing their
integration with the calendar. Activity types now have a category
field that can be used to trigger some specific behavior. First
specific behavior is to have activity types of meeting category.
Creating activities of this type trigger a jump to the calendar to
schedule the meeting. Meeting activities and calender events are
linked to be able to easily navigate through the document, its activities
and its meetings.

Configuration is done using a category on activity types instead of some
hardcoded "meeting" activity to avoid issues with master data and to be
able to choose which activity type should trigger this behavior.

================================= pseudo patch: =================================

--- a/addons/calendar/models/__init__.py
+++ b/addons/calendar/models/__init__.py
@@ -6,3 +6,4 @@ from . import ir_http
 from . import res_partner
 from . import mail_message
 from . import calendar
+from . import mail_activity

--- a/addons/calendar/models/calendar.py
+++ b/addons/calendar/models/calendar.py
@@ -530,7 +530,8 @@ class Meeting(models.Model):
 
     @api.model
     def default_get(self, fields):
-        if self.env.context.get('default_res_model'):  # super default_model='crm.lead' for easier use in adddons
+        # super default_model='crm.lead' for easier use in adddons
+        if self.env.context.get('default_res_model') and not self.env.context.get('default_res_model_id'):
             self = self.with_context(
                 default_res_model_id=self.env['ir.model'].sudo().search([
                     ('model', '=', self.env.context['default_res_model'])
@@ -735,6 +736,7 @@ class Meeting(models.Model):
     res_id = fields.Integer('Document ID')
     res_model_id = fields.Many2one('ir.model', 'Document Model', ondelete='cascade')
     res_model = fields.Char('Document Model Name', related='res_model_id.model', readonly=True, store=True)
+    activity_ids = fields.One2many('mail.activity', 'calendar_event_id', string='Activities')
 
     # RECURRENCE FIELD
     rrule = fields.Char('Recurrent Rule', compute='_compute_rrule', inverse='_inverse_rrule', store=True)
@@ -1394,6 +1396,9 @@ class Meeting(models.Model):
         # compute duration, only if start and stop are modified
         if not 'duration' in values and 'start' in values and 'stop' in values:
             values['duration'] = self._get_duration(values['start'], values['stop'])
+
+        self._sync_activities(values)
+
         # process events one by one
         for meeting in self:
             # special write of complex IDS
@@ -1462,7 +1467,27 @@ class Meeting(models.Model):
         if not 'duration' in values:
             values['duration'] = self._get_duration(values['start'], values['stop'])
 
+        # created from calendar: try to create an activity on the related record
+        if not values.get('activity_ids'):
+            defaults = self.default_get(['activity_ids', 'res_model_id', 'res_id', 'user_id'])
+            res_model_id = values.get('res_model_id', defaults.get('res_model_id'))
+            res_id = values.get('res_id', defaults.get('res_id'))
+            user_id = values.get('user_id', defaults.get('user_id'))
+            if not defaults.get('activity_ids') and res_model_id and res_id:
+                if hasattr(self.env[self.env['ir.model'].sudo().browse(res_model_id).model], 'activity_ids'):
+                    meeting_activity_type = self.env['mail.activity.type'].search([('category', '=', 'meeting')], limit=1)
+                    if meeting_activity_type:
+                        activity_vals = {
+                            'res_model_id': res_model_id,
+                            'res_id': res_id,
+                            'activity_type_id': meeting_activity_type.id,
+                        }
+                        if user_id:
+                            activity_vals['user_id'] = user_id
+                        values['activity_ids'] = [(0, 0, activity_vals)]
+
         meeting = super(Meeting, self).create(values)
+        meeting._sync_activities(values)
 
         final_date = meeting._get_recurrency_end_date()
         # `dont_notify=True` in context to prevent multiple notify_next_alarm
@@ -1622,3 +1647,18 @@ class Meeting(models.Model):
         self.ensure_one()
         default = default or {}
         return super(Meeting, self.browse(calendar_id2real_id(self.id))).copy(default)
+
+    def _sync_activities(self, values):
+        # update activities
+        if self.mapped('activity_ids'):
+            activity_values = {}
+            if values.get('name'):
+                activity_values['summary'] = values['name']
+            if values.get('description'):
+                activity_values['note'] = values['description']
+            if values.get('start'):
+                activity_values['date_deadline'] = fields.Datetime.from_string(values['start']).date()
+            if values.get('user_id'):
+                activity_values['user_id'] = values['user_id']
+            if activity_values.keys():
+                self.mapped('activity_ids').write(activity_values)

--- a/None
+++ b/addons/calendar/models/mail_activity.py
@@ -0,0 +1,46 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, models, fields, tools, _
+
+
+class MailActivityType(models.Model):
+    _inherit = "mail.activity.type"
+
+    category = fields.Selection(selection_add=[('meeting', 'Meeting')])
+
+
+class MailActivity(models.Model):
+    _inherit = "mail.activity"
+
+    calendar_event_id = fields.Many2one('calendar.event', string="Calendar Meeting", ondelete='cascade')
+
+    @api.multi
+    def action_create_calendar_event(self):
+        self.ensure_one()
+        action = self.env.ref('calendar.action_calendar_event').read()[0]
+        action['context'] = {
+            'default_activity_type_id': self.activity_type_id.id,
+            'default_res_id': self.env.context.get('default_res_id'),
+            'default_res_model': self.env.context.get('default_res_model'),
+            'default_name': self.summary,
+            'default_description': self.note and tools.html2plaintext(self.note) or '',
+            'default_activity_ids': [(6, 0, self.ids)],
+        }
+        return action
+
+    def action_feedback(self, feedback=False):
+        events = self.mapped('calendar_event_id')
+        res = super(MailActivity, self).action_feedback(feedback)
+        if feedback:
+            for event in events:
+                description = event.description
+                description = '%s\n%s%s' % (description or '', _("Feedback: "), feedback)
+                event.write({'description': description})
+        return res
+
+    def unlink_w_meeting(self):
+        events = self.mapped('calendar_event_id')
+        res = self.unlink()
+        events.unlink()
+        return res
