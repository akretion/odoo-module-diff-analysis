PR: https://github.com/odoo/odoo/pull/186624

From: a89655f732598d71fc496229ed7f2b42d1624e6f
From: Demesmaeker
Date: 2025-01-08 19:38:01

Breaking data model changes scores: del:2.3999999999999995 + add:0, change matches:
-    currency_id = fields.Many2one('res.currency', "Currency", compute='_compute_currency_id',
+    currency_id = fields.Many2one(
-    total_order_count = fields.Integer("Total Order Count", compute='_compute_total_order_count')
+    total_order_count = fields.Integer(
-    mail_template_id = fields.Many2one('mail.template', compute='_compute_mail_template_id', inverse='_inverse_mail_template_id', string="Email template", readonly=False)
+    mail_template_id = fields.Many2one(
-    available_on = fields.Boolean("Available On", store=False,
+    available_on = fields.Boolean(
-    all_discount_product_ids = fields.Many2many('product.product', compute='_compute_all_discount_product_ids')
+    all_discount_product_ids = fields.Many2many(
-    reward_product_uom_id = fields.Many2one('uom.uom', compute='_compute_reward_product_uom_id')
+    reward_product_uom_id = fields.Many2one(

Total Changes: 296

[CLN] {sale_}loyalty: sort and clean fields attributes

closes odoo/odoo#186624

Signed-off-by: Morgane Demesmaeker <edm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/loyalty/models/loyalty_card.py
+++ b/addons/loyalty/models/loyalty_card.py
@@ -25,17 +25,21 @@ class LoyaltyCard(models.Model):
         for card in self:
             card.display_name = f"{card.program_id.name}: {card.code}"
 
-    program_id = fields.Many2one('loyalty.program', ondelete='restrict', default=lambda self: self.env.context.get('active_id', None))
+    program_id = fields.Many2one(
+        comodel_name='loyalty.program',
+        ondelete='restrict',
+        default=lambda self: self.env.context.get('active_id', None),
+    )
     program_type = fields.Selection(related='program_id.program_type')
     company_id = fields.Many2one(related='program_id.company_id', store=True)
     currency_id = fields.Many2one(related='program_id.currency_id')
     # Reserved for this partner if non-empty
-    partner_id = fields.Many2one('res.partner', index=True)
+    partner_id = fields.Many2one(comodel_name='res.partner', index=True)
     points = fields.Float(tracking=True)
     point_name = fields.Char(related='program_id.portal_point_name', readonly=True)
     points_display = fields.Char(compute='_compute_points_display')
 
-    code = fields.Char(default=lambda self: self._generate_code(), required=True)
+    code = fields.Char(required=True, default=lambda self: self._generate_code())
     expiration_date = fields.Date()
 
     use_count = fields.Integer(compute='_compute_use_count')

--- a/addons/loyalty/models/loyalty_mail.py
+++ b/addons/loyalty/models/loyalty_mail.py
@@ -12,10 +12,20 @@ class LoyaltyMail(models.Model):
     _description = "Loyalty Communication"
 
     active = fields.Boolean(default=True)
-    program_id = fields.Many2one('loyalty.program', required=True, ondelete='cascade')
-    trigger = fields.Selection([
-        ('create', "At Creation"),
-        ('points_reach', "When Reaching")], string='When', required=True
+    program_id = fields.Many2one(comodel_name='loyalty.program', ondelete='cascade', required=True)
+    trigger = fields.Selection(
+        string="When",
+        selection=[
+            ('create', "At Creation"),
+            ('points_reach', "When Reaching")
+        ],
+        required=True,
     )
     points = fields.Float()
-    mail_template_id = fields.Many2one('mail.template', string="Email Template", required=True, domain=[('model', '=', 'loyalty.card')], ondelete='cascade')
+    mail_template_id = fields.Many2one(
+        string="Email Template",
+        comodel_name='mail.template',
+        ondelete='cascade',
+        domain=[('model', '=', 'loyalty.card')],
+        required=True,
+    )

--- a/addons/loyalty/models/loyalty_program.py
+++ b/addons/loyalty/models/loyalty_program.py
@@ -24,12 +24,21 @@ class LoyaltyProgram(models.Model):
                 defaults.update({k: v for k, v in default_values.items() if k in fields_list})
         return defaults
 
-    name = fields.Char("Program Name", required=True, translate=True)
+    name = fields.Char(string="Program Name", translate=True, required=True)
     active = fields.Boolean(default=True)
     sequence = fields.Integer(copy=False)
-    company_id = fields.Many2one('res.company', "Company", default=lambda self: self.env.company)
-    currency_id = fields.Many2one('res.currency', "Currency", compute='_compute_currency_id',
-        readonly=False, required=True, store=True, precompute=True)
+    company_id = fields.Many2one(
+        string="Company", comodel_name='res.company', default=lambda self: self.env.company
+    )
+    currency_id = fields.Many2one(
+        string="Currency",
+        comodel_name='res.currency',
+        compute='_compute_currency_id',
+        precompute=True,
+        store=True,
+        readonly=False,
+        required=True,
+    )
     currency_symbol = fields.Char(related='currency_id.symbol')
     pricelist_ids = fields.Many2many(
         string="Pricelist",
@@ -38,33 +47,64 @@ class LoyaltyProgram(models.Model):
         domain="[('currency_id', '=', currency_id)]",
     )
 
-    total_order_count = fields.Integer("Total Order Count", compute='_compute_total_order_count')
+    total_order_count = fields.Integer(
+        string="Total Order Count", compute='_compute_total_order_count'
+    )
 
-    rule_ids = fields.One2many('loyalty.rule', 'program_id', "Conditional rules", copy=True,
-         compute='_compute_from_program_type', readonly=False, store=True)
-    reward_ids = fields.One2many('loyalty.reward', 'program_id', "Rewards", copy=True,
-         compute='_compute_from_program_type', readonly=False, store=True)
-    communication_plan_ids = fields.One2many('loyalty.mail', 'program_id', copy=True,
-         compute='_compute_from_program_type', readonly=False, store=True)
+    rule_ids = fields.One2many(
+        string="Conditional rules",
+        comodel_name='loyalty.rule',
+        inverse_name='program_id',
+        compute='_compute_from_program_type',
+        store=True,
+        readonly=False,
+        copy=True,
+    )
+    reward_ids = fields.One2many(
+        string="Rewards",
+        comodel_name='loyalty.reward',
+        inverse_name='program_id',
+        compute='_compute_from_program_type',
+        store=True,
+        readonly=False,
+        copy=True,
+    )
+    communication_plan_ids = fields.One2many(
+        comodel_name='loyalty.mail',
+        inverse_name='program_id',
+        compute='_compute_from_program_type',
+        store=True,
+        readonly=False,
+        copy=True,
+    )
 
     # These fields are used for the simplified view of gift_card and ewallet
-    mail_template_id = fields.Many2one('mail.template', compute='_compute_mail_template_id', inverse='_inverse_mail_template_id', string="Email template", readonly=False)
+    mail_template_id = fields.Many2one(
+        string="Email template",
+        comodel_name='mail.template',
+        compute='_compute_mail_template_id',
+        inverse='_inverse_mail_template_id',
+        readonly=False,
+    )
     trigger_product_ids = fields.Many2many(related='rule_ids.product_ids', readonly=False)
 
-    coupon_ids = fields.One2many('loyalty.card', 'program_id')
+    coupon_ids = fields.One2many(comodel_name='loyalty.card', inverse_name='program_id')
     coupon_count = fields.Integer(compute='_compute_coupon_count')
-    coupon_count_display = fields.Char(compute='_compute_coupon_count_display', string="Items")
-
-    program_type = fields.Selection([
-        ('coupons', "Coupons"),
-        ('gift_card', "Gift Card"),
-        ('loyalty', "Loyalty Cards"),
-        ('promotion', "Promotions"),
-        ('ewallet', "eWallet"),
-        ('promo_code', "Discount Code"),
-        ('buy_x_get_y', "Buy X Get Y"),
-        ('next_order_coupons', "Next Order Coupons")],
-        default='promotion', required=True,
+    coupon_count_display = fields.Char(string="Items", compute='_compute_coupon_count_display')
+
+    program_type = fields.Selection(
+        selection=[
+            ('coupons', "Coupons"),
+            ('gift_card', "Gift Card"),
+            ('loyalty', "Loyalty Cards"),
+            ('promotion', "Promotions"),
+            ('ewallet', "eWallet"),
+            ('promo_code', "Discount Code"),
+            ('buy_x_get_y', "Buy X Get Y"),
+            ('next_order_coupons', "Next Order Coupons"),
+        ],
+        required=True,
+        default='promotion',
     )
     date_from = fields.Date(
         string="Start Date",
@@ -80,43 +120,58 @@ class LoyaltyProgram(models.Model):
     # current: if the order gives enough points on that order, the reward may directly be claimed, points lost otherwise
     # future: if the order gives enough points on that order, a coupon is generated for a next order
     # both: points are accumulated on the coupon to claim rewards, the reward may directly be claimed
-    applies_on = fields.Selection([
-        ('current', "Current order"),
-        ('future', "Future orders"),
-        ('both', "Current & Future orders")], default='current', required=True,
-         compute='_compute_from_program_type', readonly=False, store=True,
+    applies_on = fields.Selection(
+        selection=[
+            ('current', "Current order"),
+            ('future', "Future orders"),
+            ('both', "Current & Future orders"),
+        ],
+        compute='_compute_from_program_type',
+        store=True,
+        readonly=False,
+        required=True,
+        default='current',
     )
-    trigger = fields.Selection([
-        ('auto', "Automatic"),
-        ('with_code', "Use a code")],
-        compute='_compute_from_program_type', readonly=False, store=True,
+    trigger = fields.Selection(
         help="""
         Automatic: Customers will be eligible for a reward automatically in their cart.
         Use a code: Customers will be eligible for a reward if they enter a code.
-        """
+        """,
+        selection=[('auto', "Automatic"), ('with_code', "Use a code")],
+        compute='_compute_from_program_type',
+        store=True,
+        readonly=False,
     )
-    portal_visible = fields.Boolean(default=False,
+    portal_visible = fields.Boolean(
         help="""
-        Show in web portal, PoS customer ticket, eCommerce checkout, the number of points available and used by reward.
-        """)
-    portal_point_name = fields.Char(default='Points', translate=True,
-         compute='_compute_portal_point_name', readonly=False, store=True)
+        Show in web portal, PoS customer ticket, eCommerce checkout, the number of points available
+         and used by reward.
+        """,
+        default=False,
+    )
+    portal_point_name = fields.Char(
+        translate=True,
+        compute='_compute_portal_point_name',
+        store=True,
+        readonly=False,
+        default='Points',
+    )
     is_nominative = fields.Boolean(compute='_compute_is_nominative')
     is_payment_program = fields.Boolean(compute='_compute_is_payment_program')
 
     payment_program_discount_product_id = fields.Many2one(
-        'product.product',
         string="Discount Product",
+        help="Product used in the sales order to apply the discount.",
+        comodel_name='product.product',
         compute='_compute_payment_program_discount_product_id',
         readonly=True,
-        help="Product used in the sales order to apply the discount."
     )
 
     # Technical field used for a label
-    available_on = fields.Boolean("Available On", store=False,
-        help="""
-        Manage where your program should be available for use.
-        """
+    available_on = fields.Boolean(
+        string="Available On",
+        help="Manage where your program should be available for use.",
+        store=False,
     )
 
     _check_max_usage = models.Constraint(

--- a/addons/loyalty/models/loyalty_reward.py
+++ b/addons/loyalty/models/loyalty_reward.py
@@ -45,7 +45,7 @@ class LoyaltyReward(models.Model):
             reward.display_name = f"{reward.program_id.name} - {reward.description}"
 
     active = fields.Boolean(default=True)
-    program_id = fields.Many2one('loyalty.program', required=True, ondelete='cascade')
+    program_id = fields.Many2one(comodel_name='loyalty.program', ondelete='cascade', required=True)
     program_type = fields.Selection(related='program_id.program_type')
     # Stored for security rules
     company_id = fields.Many2one(related='program_id.company_id', store=True)
@@ -60,31 +60,54 @@ class LoyaltyReward(models.Model):
         required=True,
     )
 
-    reward_type = fields.Selection([
-        ('product', "Free Product"),
-        ('discount', "Discount")],
-        default='discount', required=True,
+    reward_type = fields.Selection(
+        selection=[
+            ('product', "Free Product"),
+            ('discount', "Discount"),
+        ],
+        required=True,
+        default='discount',
     )
     user_has_debug = fields.Boolean(compute='_compute_user_has_debug')
 
     # Discount rewards
-    discount = fields.Float("Discount", default=10)
-    discount_mode = fields.Selection(selection=_get_discount_mode_select, required=True, default='percent')
-    discount_applicability = fields.Selection([
-        ('order', "Order"),
-        ('cheapest', "Cheapest Product"),
-        ('specific', "Specific Products")], default='order',
+    discount = fields.Float(string="Discount", default=10)
+    discount_mode = fields.Selection(
+        selection=_get_discount_mode_select, required=True, default='percent'
+    )
+    discount_applicability = fields.Selection(
+        selection=[
+            ('order', "Order"),
+            ('cheapest', "Cheapest Product"),
+            ('specific', "Specific Products"),
+        ],
+        default='order',
     )
     discount_product_domain = fields.Char(default="[]")
-    discount_product_ids = fields.Many2many('product.product', string="Discounted Products")
-    discount_product_category_id = fields.Many2one('product.category', string="Discounted Prod. Categories")
-    discount_product_tag_id = fields.Many2one('product.tag', string="Discounted Prod. Tag")
-    all_discount_product_ids = fields.Many2many('product.product', compute='_compute_all_discount_product_ids')
+    discount_product_ids = fields.Many2many(
+        string="Discounted Products", comodel_name='product.product'
+    )
+    discount_product_category_id = fields.Many2one(
+        string="Discounted Prod. Categories", comodel_name='product.category'
+    )
+    discount_product_tag_id = fields.Many2one(
+        string="Discounted Prod. Tag", comodel_name='product.tag'
+    )
+    all_discount_product_ids = fields.Many2many(
+        comodel_name='product.product', compute='_compute_all_discount_product_ids'
+    )
     reward_product_domain = fields.Char(compute='_compute_reward_product_domain', store=False)
-    discount_max_amount = fields.Monetary("Max Discount", 'currency_id',
-        help="This is the max amount this reward may discount, leave to 0 for no limit.")
-    discount_line_product_id = fields.Many2one('product.product', copy=False, ondelete='restrict',
-        help="Product used in the sales order to apply the discount. Each reward has its own product for reporting purpose")
+    discount_max_amount = fields.Monetary(
+        string="Max Discount",
+        help="This is the max amount this reward may discount, leave to 0 for no limit.",
+    )
+    discount_line_product_id = fields.Many2one(
+        help="Product used in the sales order to apply the discount. Each reward has its own"
+             " product for reporting purpose",
+        comodel_name='product.product',
+        ondelete='restrict',
+        copy=False,
+    )
     is_global_discount = fields.Boolean(compute='_compute_is_global_discount')
     tax_ids = fields.Many2many(
         string="Taxes",
@@ -95,18 +118,23 @@ class LoyaltyReward(models.Model):
 
     # Product rewards
     reward_product_id = fields.Many2one(
-        'product.product', string="Product", domain=[('type', '!=', 'combo')]
+        string="Product", comodel_name='product.product', domain=[('type', '!=', 'combo')]
     )
-    reward_product_tag_id = fields.Many2one('product.tag', string="Product Tag")
+    reward_product_tag_id = fields.Many2one(string="Product Tag", comodel_name='product.tag')
     multi_product = fields.Boolean(compute='_compute_multi_product')
     reward_product_ids = fields.Many2many(
-        'product.product', string="Reward Products", compute='_compute_multi_product',
+        string="Reward Products",
+        help="These are the products that can be claimed with this rule.",
+        comodel_name='product.product',
+        compute='_compute_multi_product',
         search='_search_reward_product_ids',
-        help="These are the products that can be claimed with this rule.")
+    )
     reward_product_qty = fields.Integer(default=1)
-    reward_product_uom_id = fields.Many2one('uom.uom', compute='_compute_reward_product_uom_id')
+    reward_product_uom_id = fields.Many2one(
+        comodel_name='uom.uom', compute='_compute_reward_product_uom_id'
+    )
 
-    required_points = fields.Float("Points needed", default=1)
+    required_points = fields.Float(string="Points needed", default=1)
     point_name = fields.Char(related='program_id.portal_point_name', readonly=True)
     clear_wallet = fields.Boolean(default=False)
 

--- a/addons/loyalty/models/loyalty_rule.py
+++ b/addons/loyalty/models/loyalty_rule.py
@@ -37,7 +37,7 @@ class LoyaltyRule(models.Model):
         ]
 
     active = fields.Boolean(default=True)
-    program_id = fields.Many2one('loyalty.program', required=True, ondelete='cascade')
+    program_id = fields.Many2one(comodel_name='loyalty.program', ondelete='cascade', required=True)
     program_type = fields.Selection(related='program_id.program_type')
     # Stored for security rules
     company_id = fields.Many2one(related='program_id.company_id', store=True)
@@ -47,32 +47,43 @@ class LoyaltyRule(models.Model):
     user_has_debug = fields.Boolean(compute='_compute_user_has_debug')
     product_domain = fields.Char(default="[]")
 
-    product_ids = fields.Many2many('product.product', string="Products")
-    product_category_id = fields.Many2one('product.category', string="Categories")
-    product_tag_id = fields.Many2one('product.tag', string="Product Tag")
+    product_ids = fields.Many2many(string="Products", comodel_name='product.product')
+    product_category_id = fields.Many2one(string="Categories", comodel_name='product.category')
+    product_tag_id = fields.Many2one(string="Product Tag", comodel_name='product.tag')
 
-    reward_point_amount = fields.Float(default=1, string="Reward")
+    reward_point_amount = fields.Float(string="Reward", default=1)
     # Only used for program_id.applies_on == 'future'
-    reward_point_split = fields.Boolean(string="Split per unit", default=False,
-        help="Whether to separate reward coupons per matched unit, only applies to 'future' programs and trigger mode per money spent or unit paid..")
+    reward_point_split = fields.Boolean(
+        string="Split per unit",
+        help="Whether to separate reward coupons per matched unit, only applies to 'future' programs and trigger mode per money spent or unit paid...",
+        default=False,
+    )
     reward_point_name = fields.Char(related='program_id.portal_point_name', readonly=True)
-    reward_point_mode = fields.Selection(selection=_get_reward_point_mode_selection, required=True, default='order')
+    reward_point_mode = fields.Selection(
+        selection=_get_reward_point_mode_selection, required=True, default='order'
+    )
 
-    minimum_qty = fields.Integer("Minimum Quantity", default=1)
-    minimum_amount = fields.Monetary("Minimum Purchase", 'currency_id')
+    minimum_qty = fields.Integer(string="Minimum Quantity", default=1)
+    minimum_amount = fields.Monetary(string="Minimum Purchase")
     minimum_amount_tax_mode = fields.Selection(
         selection=[
             ('incl', "tax included"),
             ('excl', "tax excluded"),
         ],
-        default='incl',
         required=True,
+        default='incl',
     )
 
-    mode = fields.Selection([
-        ('auto', "Automatic"),
-        ('with_code', "With a promotion code"),
-    ], string="Application", compute='_compute_mode', store=True, readonly=False)
+    mode = fields.Selection(
+        string="Application",
+        selection=[
+            ('auto', "Automatic"),
+            ('with_code', "With a promotion code"),
+        ],
+        compute='_compute_mode',
+        store=True,
+        readonly=False,
+    )
     code = fields.Char(string="Discount code", compute='_compute_code', store=True, readonly=False)
 
     _reward_point_amount_positive = models.Constraint(
