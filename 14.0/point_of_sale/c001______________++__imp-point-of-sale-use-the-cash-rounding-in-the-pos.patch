PR: https://github.com/odoo/odoo/pull/

From: 42425996e36d9cb1fc1391402cf6d00df4aea019
From: Robin Heinz
Date: 2019-12-03 14:20:31

Structural Changes: 4
Total Changes: 64

[IMP] point_of_sale: Use the cash rounding in the pos

Because of the law of the 1st december 2019, we can't pay with 1 or 2 cents anymore.
We have to round the total price to the 0.05 unit.
If the customer pay without rounding values, it triggers an error.
Before the order is finalized, we add a line with a product rounding to round the total amount.

Task-id: 2035010
X-original-commit: 58477e5503a18cc98fe686f8857233063eb26f4c

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/pos_config.py
+++ b/addons/point_of_sale/models/pos_config.py
@@ -214,6 +214,9 @@ class PosConfig(models.Model):
     company_has_template = fields.Boolean(string="Company has chart of accounts", compute="_compute_company_has_template")
     current_user_id = fields.Many2one('res.users', string='Current Session Responsible', compute='_compute_current_session_user')
     other_devices = fields.Boolean(string="Other Devices", help="Connect devices to your PoS without an IoT Box.")
+    rounding_method = fields.Many2one('account.cash.rounding', string="Cash rounding")
+    cash_rounding = fields.Boolean(string="Cash Rounding")
+    only_round_cash_method = fields.Boolean(string="Only apply rounding on cash")
 
     @api.depends('use_pricelist', 'available_pricelist_ids')
     def _compute_allowed_pricelist_ids(self):
@@ -307,6 +310,11 @@ class PosConfig(models.Model):
         if open_session:
             raise ValidationError(_("You are not allowed to change the cash control status while a session is already opened."))
 
+    @api.constrains('rounding_method')
+    def _check_rounding_method_strategy(self):
+        if self.cash_rounding and self.rounding_method.strategy != 'add_invoice_line':
+            raise ValidationError(_("Cash rounding strategy must be: 'Add a rounding line'"))
+
     @api.constrains('company_id', 'journal_id')
     def _check_company_journal(self):
         if self.journal_id and self.journal_id.company_id.id != self.company_id.id:

--- a/addons/point_of_sale/models/pos_order.py
+++ b/addons/point_of_sale/models/pos_order.py
@@ -8,8 +8,8 @@ import psycopg2
 import pytz
 
 from odoo import api, fields, models, tools, _
-from odoo.tools import float_is_zero
-from odoo.exceptions import UserError
+from odoo.tools import float_is_zero, float_round
+from odoo.exceptions import ValidationError, UserError
 from odoo.http import request
 from odoo.osv.expression import AND
 import base64
@@ -271,7 +271,6 @@ class PosOrder(models.Model):
         for order in self:
             order.currency_rate = self.env['res.currency']._get_conversion_rate(order.company_id.currency_id, order.currency_id, order.company_id, order.date_order)
 
-
     @api.onchange('payment_ids', 'lines')
     def _onchange_amount_all(self):
         for order in self:
@@ -358,8 +357,15 @@ class PosOrder(models.Model):
 
     def action_pos_order_paid(self):
         self.ensure_one()
-        if not float_is_zero(self.amount_total - self.amount_paid, precision_rounding=self.currency_id.rounding):
+
+        if not self.config_id.cash_rounding:
+            total = self.amount_total
+        else:
+            total = float_round(self.amount_total, precision_rounding=self.config_id.rounding_method.rounding, rounding_method=self.config_id.rounding_method.rounding_method)
+
+        if not float_is_zero(total - self.amount_paid, precision_rounding=self.currency_id.rounding):
             raise UserError(_("Order %s is not fully paid.") % self.name)
+
         self.write({'state': 'paid'})
         return True
 
@@ -389,6 +395,7 @@ class PosOrder(models.Model):
                 'invoice_date': order.date_order.date(),
                 'fiscal_position_id': order.fiscal_position_id.id,
                 'invoice_line_ids': [(0, None, order._prepare_invoice_line(line)) for line in order.lines],
+                'invoice_cash_rounding_id': order.config_id.rounding_method.id if order.config_id.cash_rounding else False
             }
             new_move = moves.sudo()\
                             .with_company(order.company_id)\
@@ -824,3 +831,13 @@ class ReportSaleDetails(models.AbstractModel):
         configs = self.env['pos.config'].browse(data['config_ids'])
         data.update(self.get_sale_details(data['date_start'], data['date_stop'], configs))
         return data
+
+    class AccountCashRounding(models.Model):
+        _inherit = 'account.cash.rounding'
+
+        @api.constrains('rounding', 'rounding_method', 'strategy')
+        def _check_session_state(self):
+            open_session = self.env['pos.session'].search([('config_id.rounding_method', '=', self.id), ('state', '!=', 'closed')])
+            if open_session:
+                raise ValidationError(
+                    _("You are not allowed to change the cash rounding configuration while a pos session using it is already opened."))

--- a/addons/point_of_sale/models/pos_session.py
+++ b/addons/point_of_sale/models/pos_session.py
@@ -6,7 +6,7 @@ from datetime import timedelta
 
 from odoo import api, fields, models, _
 from odoo.exceptions import UserError, ValidationError
-from odoo.tools import float_is_zero
+from odoo.tools import float_is_zero, float_compare
 
 
 class PosSession(models.Model):
@@ -375,6 +375,7 @@ class PosSession(models.Model):
         taxes = defaultdict(tax_amounts)
         stock_expense = defaultdict(amounts)
         stock_output = defaultdict(amounts)
+        rounding_difference = {'amount': 0.0, 'amount_converted': 0.0}
         # Track the receivable lines of the invoiced orders' account moves for reconciliation
         # These receivable lines are reconciled to the corresponding invoice receivable lines
         # of this session's move_id.
@@ -400,7 +401,10 @@ class PosSession(models.Model):
             if order.is_invoiced:
                 # Combine invoice receivable lines
                 key = order.partner_id.property_account_receivable_id.id
-                invoice_receivables[key] = self._update_amounts(invoice_receivables[key], {'amount': order.amount_total}, order.date_order)
+                if self.config_id.cash_rounding:
+                    invoice_receivables[key] = self._update_amounts(invoice_receivables[key], {'amount': order.amount_paid}, order.date_order)
+                else:
+                    invoice_receivables[key] = self._update_amounts(invoice_receivables[key], {'amount': order.amount_total}, order.date_order)
                 # side loop to gather receivable lines by account for reconciliation
                 for move_line in order.account_move.line_ids.filtered(lambda aml: aml.account_id.internal_type == 'receivable'):
                     order_account_move_receivable_lines[move_line.account_id.id] |= move_line
@@ -447,6 +451,10 @@ class PosSession(models.Model):
                         stock_expense[exp_key] = self._update_amounts(stock_expense[exp_key], {'amount': amount}, move.picking_id.date)
                         stock_output[out_key] = self._update_amounts(stock_output[out_key], {'amount': amount}, move.picking_id.date)
 
+                if self.config_id.cash_rounding:
+                    diff = order.amount_paid - order.amount_total
+                    rounding_difference = self._update_amounts(rounding_difference, {'amount': diff}, order.date_order)
+
         if self.company_id.anglo_saxon_accounting:
             global_session_pickings = self.picking_ids.filtered(lambda p: not p.pos_order_id)
             if global_session_pickings:
@@ -480,6 +488,10 @@ class PosSession(models.Model):
                 'Please set corresponding tax account in each repartition line of the following taxes: \n%s'
             ) % ', '.join(tax_names_no_account)
             raise UserError(error_message)
+        rounding_vals = []
+
+        if not float_is_zero(rounding_difference['amount'], precision_rounding=self.currency_id.rounding) or not float_is_zero(rounding_difference['amount_converted'], precision_rounding=self.currency_id.rounding):
+            rounding_vals = [self._get_rounding_difference_vals(rounding_difference['amount'], rounding_difference['amount_converted'])]
 
         MoveLine.create(
             tax_vals
@@ -487,6 +499,7 @@ class PosSession(models.Model):
             + [self._get_stock_expense_vals(key, amounts['amount'], amounts['amount_converted']) for key, amounts in stock_expense.items()]
             + [self._get_split_receivable_vals(key, amounts['amount'], amounts['amount_converted']) for key, amounts in split_receivables.items()]
             + [self._get_combine_receivable_vals(key, amounts['amount'], amounts['amount_converted']) for key, amounts in combine_receivables.items()]
+            + rounding_vals
         )
 
         ## SECTION: Create cash statement lines and cash move lines
@@ -603,6 +616,20 @@ class PosSession(models.Model):
             'taxes': taxes,
         }
 
+    def _get_rounding_difference_vals(self, amount, amount_converted):
+        if self.config_id.cash_rounding:
+            partial_args = {
+                'name': 'Rounding line',
+                'move_id': self.move_id.id,
+            }
+            if float_compare(0.0, amount, precision_rounding=self.currency_id.rounding) > 0:    # loss
+                partial_args['account_id'] = self.config_id.rounding_method.loss_account_id.id
+                return self._debit_amounts(partial_args, -amount, -amount_converted)
+
+            if float_compare(0.0, amount, precision_rounding=self.currency_id.rounding) < 0:   # profit
+                partial_args['account_id'] = self.config_id.rounding_method.profit_account_id.id
+                return self._credit_amounts(partial_args, amount, amount_converted)
+
     def _get_split_receivable_vals(self, payment, amount, amount_converted):
         partial_vals = {
             'account_id': payment.payment_method_id.receivable_account_id.id,
