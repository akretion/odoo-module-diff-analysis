PR: https://github.com/odoo/odoo/pull/189701

From: 704a5a19499469e5a14461bb81d33c832ce00d70
From: Julien Alardot (jual)
Date: 2025-02-14 19:09:48

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = "hr.expense.sheet"
-    sale_order_count = fields.Integer(compute='_compute_sale_order_count')

Total Changes: 112

[IMP] *expense*: Bye Bye reports

Most of the time, expenses are created as "standalone"s and forcing
the use of an expense report is adding frustrating unnecessary steps.

A simplification was decided and the model hr.expense.sheet is removed,
giving all of its remaining important logic to the `hr.expense`.

In addition, approval flow was simplified with the implementation of
an auto-validation process, where submitting an expense also approves it
when no expense manager is set on the employee.

See task for more details.

closes odoo/odoo#189701

Task-id: 4481615
Related: odoo/enterprise#75507
Related: odoo/upgrade#6990
Signed-off-by: Olivier Colson (oco) <oco@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_expense/models/__init__.py
+++ b/addons/sale_expense/models/__init__.py
@@ -3,7 +3,6 @@
 from . import account_move
 from . import account_move_line
 from . import hr_expense
-from . import hr_expense_sheet
 from . import hr_expense_split
 from . import product_template
 from . import sale_order

--- a/addons/sale_expense/models/account_move.py
+++ b/addons/sale_expense/models/account_move.py
@@ -8,15 +8,15 @@ class AccountMove(models.Model):
 
     def _reverse_moves(self, default_values_list=None, cancel=False):
         # EXTENDS sale
-        self.expense_sheet_id._sale_expense_reset_sol_quantities()
+        self.expense_ids._sale_expense_reset_sol_quantities()
         return super()._reverse_moves(default_values_list, cancel)
 
     def button_draft(self):
         # EXTENDS sale
-        self.expense_sheet_id._sale_expense_reset_sol_quantities()
+        self.expense_ids._sale_expense_reset_sol_quantities()
         return super().button_draft()
 
     def unlink(self):
         # EXTENDS sale
-        self.expense_sheet_id._sale_expense_reset_sol_quantities()
+        self.expense_ids._sale_expense_reset_sol_quantities()
         return super().unlink()

--- a/addons/sale_expense/models/hr_expense.py
+++ b/addons/sale_expense/models/hr_expense.py
@@ -1,6 +1,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models
+from odoo import Command, api, fields, models
 
 
 class HrExpense(models.Model):
@@ -45,9 +45,47 @@ class HrExpense(models.Model):
         to_reset.invalidate_recordset(['analytic_distribution'])
         self.env.add_to_compute(self._fields['analytic_distribution'], to_reset)
 
+    def _sale_expense_reset_sol_quantities(self):
+        """
+        Resets the quantity of a SOL created by a reinvoiced expense to 0 when the expense or its move is reset to an unfinished state
+
+        Note: Resetting the qty_delivered will raise if the product is a storable product and sale_stock is installed,
+              but it's fine as it doesn't make much sense to have a stored product in an expense.
+        """
+        self.check_access('write')
+        # If we can edit the expense, we may not be able to edit the sol without sudoing.
+        self.sudo().sale_order_line_id.write({
+            'qty_delivered': 0.0,
+            'product_uom_qty': 0.0,
+            'expense_ids': [Command.clear()],
+        })
+
     def _get_split_values(self):
         # EXTENDS hr_expense
         vals = super()._get_split_values()
         for split_value in vals:
             split_value['sale_order_id'] = self.sale_order_id.id
         return vals
+
+    def action_post(self):
+        # EXTENDS hr_expense
+        # When posting expense, we need the analytic entries to be generated, because reinvoicing uses analytic accounts.
+        # We then ensure the proper analytic acocunt is given in the distribution and if not,
+        # we create an account and set the distribution to it.
+        for expense in self:
+            if expense.sale_order_id and not expense.analytic_distribution:
+                analytic_account = self.env['account.analytic.account'].create(expense.sale_order_id._prepare_analytic_account_data())
+                expense.analytic_distribution = {analytic_account.id: 100}
+        return super().action_post()
+
+    def action_open_sale_order(self):
+        self.ensure_one()
+        return {
+            'type': 'ir.actions.act_window',
+            'res_model': 'sale.order',
+            'views': [(self.env.ref("sale.view_order_form").id, 'form')],
+            'view_mode': 'form',
+            'target': 'current',
+            'name': self.sale_order_id.display_name,
+            'res_id': self.sale_order_id.id,
+        }

--- a/addons/sale_expense/models/hr_expense_sheet.py
+++ b/None
@@ -1,63 +0,0 @@
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-from odoo import fields, models, _, Command
-
-
-class HrExpenseSheet(models.Model):
-    _inherit = "hr.expense.sheet"
-
-    sale_order_count = fields.Integer(compute='_compute_sale_order_count')
-
-    def _compute_sale_order_count(self):
-        for sheet in self:
-            sheet.sale_order_count = len(sheet.expense_line_ids.sale_order_id)
-
-    def _sale_expense_reset_sol_quantities(self):
-        """
-        Resets the quantity of a SOL created by a reinvoiced expense to 0 when the expense or its move is reset to an unfinished state
-
-        Note: Resetting the qty_delivered will raise if the product is a storable product and sale_stock is installed,
-              but it's fine as it doesn't make much sense to have a stored product in an expense.
-        """
-        self.check_access('write')
-        # If we can edit the sheet, we may not be able to edit the sol without sudoing.
-        self.sudo().expense_line_ids.sale_order_line_id.write({
-            'qty_delivered': 0.0,
-            'product_uom_qty': 0.0,
-            'expense_ids': [Command.clear()],
-        })
-
-    def action_reset_expense_sheets(self):
-        super().action_reset_expense_sheets()
-        self.sudo()._sale_expense_reset_sol_quantities()
-
-    def action_open_sale_orders(self):
-        self.ensure_one()
-        if self.sale_order_count == 1:
-            return {
-                'type': 'ir.actions.act_window',
-                'res_model': 'sale.order',
-                'views': [(self.env.ref("sale.view_order_form").id, 'form')],
-                'view_mode': 'form',
-                'target': 'current',
-                'name': self.expense_line_ids.sale_order_id.display_name,
-                'res_id': self.expense_line_ids.sale_order_id.id,
-            }
-        return {
-            'type': 'ir.actions.act_window',
-            'res_model': 'sale.order',
-            'views': [(self.env.ref('sale.view_order_tree').id, 'list'), (self.env.ref("sale.view_order_form").id, 'form')],
-            'view_mode': 'list,form',
-            'target': 'current',
-            'name': _('Reinvoiced Sales Orders'),
-            'domain': [('id', 'in', self.expense_line_ids.sale_order_id.ids)],
-        }
-
-    def _do_create_moves(self):
-        """ When posting expense, we need the analytic entries to be generated, so a AA is required to reinvoice.
-            We then ensure a AA is given in the distribution and if not, we create a AA et set the distribution to it.
-        """
-        for expense in self.expense_line_ids:
-            if expense.sale_order_id and not expense.analytic_distribution:
-                analytic_account = self.env['account.analytic.account'].create(expense.sale_order_id._prepare_analytic_account_data())
-                expense.analytic_distribution = {analytic_account.id: 100}
-        return super()._do_create_moves()

--- a/addons/sale_expense/models/sale_order.py
+++ b/addons/sale_expense/models/sale_order.py
@@ -11,7 +11,7 @@ class SaleOrder(models.Model):
         comodel_name='hr.expense',
         inverse_name='sale_order_id',
         string='Expenses',
-        domain=[('state', '=', 'done')],
+        domain=[('state', 'in', ('posted', 'in_payment', 'paid'))],
         readonly=True,
     )
     expense_count = fields.Integer("# of Expenses", compute='_compute_expense_count', compute_sudo=True)
