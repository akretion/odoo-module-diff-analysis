PR: https://github.com/odoo/odoo/pull/197440

From: d73b99c3f6ff7581fe4ed1e3eb89840dc7d55ffd
From: dhka-odoo
Date: 2025-04-04 17:53:40

Breaking data model changes scores: del:5.600000000000001 + add:0, change matches:
-    trailer_hook = fields.Boolean(default=False, string='Trailer Hitch', compute='_compute_model_fields', store=True, readonly=False)
+    trailer_hook = fields.Boolean(default=False, string='Trailer Hitch',
-    seats = fields.Integer('Seats Number', help='Number of seats of the vehicle', compute='_compute_model_fields', store=True, readonly=False)
-    model_year = fields.Char('Model Year', help='Year of the model', compute='_compute_model_fields', store=True, readonly=False)
-    doors = fields.Integer('Doors Number', help='Number of doors of the vehicle', compute='_compute_model_fields', store=True, readonly=False)
+    seats = fields.Integer('Seating Capacity', help='Number of seats of the vehicle',
+    doors = fields.Integer('Number of Doors', help='Number of doors of the vehicle',
-    power = fields.Integer('Power', help='Power in kW of the vehicle', compute='_compute_model_fields', store=True, readonly=False)
-    co2 = fields.Float('CO2 Emissions', help='CO2 emissions of the vehicle', compute='_compute_model_fields', store=True, readonly=False, tracking=True, aggregator=None)
+    power = fields.Float('Power', help='Power in kW of the vehicle',
+    co2 = fields.Float('CO₂ Emissions', help='CO2 emissions of the vehicle', compute='_compute_model_fields',
-    model_year = fields.Integer(tracking=True)
-    seats = fields.Integer(string='Seats Number', tracking=True)
-    doors = fields.Integer(string='Doors Number', tracking=True)
-    trailer_hook = fields.Boolean(default=False, string='Trailer Hitch', tracking=True)
+    seats = fields.Integer(string='Seating Capacity', tracking=True)
+    doors = fields.Integer(string='Number of Doors', tracking=True,
+    trailer_hook = fields.Boolean(default=False, string='Trailer Hitch', tracking=True,
-    power = fields.Integer('Power', tracking=True)
+    power = fields.Float('Power', tracking=True)

Total Changes: 98

[IMP] fleet: vehicle model configuration revamp

Revamped fleet vehicle model configuration:

* Added tooltips for fields such as trailer hitch, number of doors, and emission standards.
* Introduced new fields for color and drive type in vehicle model.
* Enabled selection of CO2 emission units between g/km and g/mi.
* Enabled selection of range units between km and mi.
* Changed model year to a selection field.

These changes also apply to the fleet model.

Task-4442672

closes odoo/odoo#197440

Related: odoo/enterprise#79156
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/fleet/models/fleet_vehicle.py
+++ b/addons/fleet/models/fleet_vehicle.py
@@ -1,8 +1,8 @@
-# -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from collections import defaultdict
 from dateutil.relativedelta import relativedelta
+from datetime import datetime
 
 from odoo import api, fields, models, _
 from odoo.exceptions import UserError
@@ -13,10 +13,10 @@ from odoo.osv import expression
 #Some fields don't have the exact same name
 MODEL_FIELDS_TO_VEHICLE = {
     'transmission': 'transmission', 'model_year': 'model_year', 'electric_assistance': 'electric_assistance',
-    'color': 'color', 'seats': 'seats', 'doors': 'doors', 'trailer_hook': 'trailer_hook',
-    'default_co2': 'co2', 'co2_standard': 'co2_standard', 'default_fuel_type': 'fuel_type',
-    'power': 'power', 'horsepower': 'horsepower', 'horsepower_tax': 'horsepower_tax', 'category_id': 'category_id',
-    'vehicle_range': 'vehicle_range', 'power_unit': 'power_unit'
+    'color': 'color', 'seats': 'seats', 'doors': 'doors', 'trailer_hook': 'trailer_hook', 'default_co2': 'co2',
+    'co2_standard': 'co2_standard', 'default_fuel_type': 'fuel_type', 'power': 'power', 'horsepower': 'horsepower',
+    'horsepower_tax': 'horsepower_tax', 'category_id': 'category_id', 'vehicle_range': 'vehicle_range',
+    'power_unit': 'power_unit', 'range_unit': 'range_unit',
 }
 
 
@@ -31,6 +31,10 @@ class FleetVehicle(models.Model):
         state = self.env.ref('fleet.fleet_vehicle_state_new_request', raise_if_not_found=False)
         return state if state and state.id else False
 
+    def _get_year_selection(self):
+        current_year = datetime.now().year
+        return [(str(i), i) for i in range(1970, current_year + 1)]
+
     name = fields.Char(compute="_compute_vehicle_name", store=True)
     description = fields.Html("Vehicle Description")
     active = fields.Boolean('Active', default=True, tracking=True)
@@ -48,7 +52,10 @@ class FleetVehicle(models.Model):
     license_plate = fields.Char(tracking=True,
         help='License plate number of the vehicle (i = plate number for a car)')
     vin_sn = fields.Char('Chassis Number', help='Unique number written on the vehicle motor (VIN/SN number)', tracking=True, copy=False)
-    trailer_hook = fields.Boolean(default=False, string='Trailer Hitch', compute='_compute_model_fields', store=True, readonly=False)
+    trailer_hook = fields.Boolean(default=False, string='Trailer Hitch',
+        compute='_compute_model_fields', store=True, readonly=False,
+        help="A trailer hitch is a device attached to a vehicle's chassis for towing purposes, \
+            such as pulling trailers, boats, or other vehicles.")
     driver_id = fields.Many2one('res.partner', 'Driver', tracking=True, help='Driver address of the vehicle', copy=False)
     future_driver_id = fields.Many2one('res.partner', 'Future Driver', tracking=True, help='Next Driver Address of the vehicle', copy=False, check_company=True)
     model_id = fields.Many2one('fleet.vehicle.model', 'Model',
@@ -74,9 +81,12 @@ class FleetVehicle(models.Model):
         tracking=True,
         help='Current state of the vehicle', ondelete="set null")
     location = fields.Char(help='Location of the vehicle (garage, ...)')
-    seats = fields.Integer('Seats Number', help='Number of seats of the vehicle', compute='_compute_model_fields', store=True, readonly=False)
-    model_year = fields.Char('Model Year', help='Year of the model', compute='_compute_model_fields', store=True, readonly=False)
-    doors = fields.Integer('Doors Number', help='Number of doors of the vehicle', compute='_compute_model_fields', store=True, readonly=False)
+    seats = fields.Integer('Seating Capacity', help='Number of seats of the vehicle',
+        compute='_compute_model_fields', store=True, readonly=False)
+    model_year = fields.Selection(selection='_get_year_selection', string='Model Year',
+        help='Year of the model', compute='_compute_model_fields', store=True, readonly=False)
+    doors = fields.Integer('Number of Doors', help='Number of doors of the vehicle',
+        compute='_compute_model_fields', store=True, readonly=False)
     tag_ids = fields.Many2many('fleet.vehicle.tag', 'fleet_vehicle_vehicle_tag_rel', 'vehicle_tag_id', 'tag_id', 'Tags', copy=False)
     odometer = fields.Float(compute='_get_odometer', inverse='_set_odometer', string='Last Odometer',
         help='Odometer measure of the vehicle at the moment of this log')
@@ -92,11 +102,17 @@ class FleetVehicle(models.Model):
         ('power', 'kW'),
         ('horsepower', 'Horsepower')
         ], 'Power Unit', default='power', required=True)
-    horsepower = fields.Integer(compute='_compute_model_fields', store=True, readonly=False)
+    horsepower = fields.Float(compute='_compute_model_fields', store=True, readonly=False)
     horsepower_tax = fields.Float('Horsepower Taxation', compute='_compute_model_fields', store=True, readonly=False)
-    power = fields.Integer('Power', help='Power in kW of the vehicle', compute='_compute_model_fields', store=True, readonly=False)
-    co2 = fields.Float('CO2 Emissions', help='CO2 emissions of the vehicle', compute='_compute_model_fields', store=True, readonly=False, tracking=True, aggregator=None)
-    co2_standard = fields.Char('CO2 Standard', compute='_compute_model_fields', store=True, readonly=False)
+    power = fields.Float('Power', help='Power in kW of the vehicle',
+        compute='_compute_model_fields', store=True, readonly=False)
+    co2 = fields.Float('CO₂ Emissions', help='CO2 emissions of the vehicle', compute='_compute_model_fields',
+        store=True, readonly=False, tracking=True, aggregator=None)
+    co2_emission_unit = fields.Selection([('g/km', 'g/km'), ('g/mi', 'g/mi')], compute='_compute_co2_emission_unit',
+        store=True, default="g/km", required=True)
+    co2_standard = fields.Char('Emission Standard', compute='_compute_model_fields', store=True, readonly=False,
+        help="Emission Standard specifies the regulatory test procedure \
+            or guideline under which a vehicle's emissions are measured.")
     category_id = fields.Many2one('fleet.vehicle.model.category', 'Category', compute='_compute_model_fields', store=True, readonly=False)
     image_128 = fields.Image(related='model_id.image_128', readonly=True)
     contract_renewal_due_soon = fields.Boolean(compute='_compute_contract_reminder', search='_search_contract_renewal_due_soon',
@@ -125,6 +141,8 @@ class FleetVehicle(models.Model):
     ], compute='_compute_service_activity')
     vehicle_properties = fields.Properties('Properties', definition='model_id.vehicle_properties_definition', copy=True)
     vehicle_range = fields.Integer(string="Range")
+    range_unit = fields.Selection([('km', 'km'), ('mi', 'mi')],
+        compute='_compute_model_fields', store=True, readonly=False, default="km", required=True)
 
     @api.depends('log_services')
     def _compute_service_activity(self):
@@ -153,6 +171,14 @@ class FleetVehicle(models.Model):
         for record in self:
             record.name = (record.model_id.brand_id.name or '') + '/' + (record.model_id.name or '') + '/' + (record.license_plate or _('No Plate'))
 
+    @api.depends('range_unit')
+    def _compute_co2_emission_unit(self):
+        for record in self:
+            if record.range_unit == 'km':
+                record.co2_emission_unit = 'g/km'
+            else:
+                record.co2_emission_unit = 'g/mi'
+
     def _get_odometer(self):
         FleetVehicalOdometer = self.env['fleet.vehicle.odometer']
         for record in self:

--- a/addons/fleet/models/fleet_vehicle_model.py
+++ b/addons/fleet/models/fleet_vehicle_model.py
@@ -1,6 +1,7 @@
-# -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from datetime import datetime
+
 from odoo import _, api, fields, models
 from odoo.osv import expression
 
@@ -24,6 +25,10 @@ class FleetVehicleModel(models.Model):
     _description = 'Model of a vehicle'
     _order = 'name asc'
 
+    def _get_year_selection(self):
+        current_year = datetime.now().year
+        return [(str(i), i) for i in range(1970, current_year + 1)]
+
     name = fields.Char('Model name', required=True, tracking=True)
     brand_id = fields.Many2one('fleet.vehicle.model.brand', 'Manufacturer', required=True, tracking=True, index='btree_not_null')
     category_id = fields.Many2one('fleet.vehicle.model.category', 'Category', tracking=True)
@@ -33,24 +38,37 @@ class FleetVehicleModel(models.Model):
     vehicle_type = fields.Selection([('car', 'Car'), ('bike', 'Bike')], default='car', required=True, tracking=True)
     transmission = fields.Selection([('manual', 'Manual'), ('automatic', 'Automatic')], 'Transmission', tracking=True)
     vehicle_count = fields.Integer(compute='_compute_vehicle_count', search='_search_vehicle_count')
-    model_year = fields.Integer(tracking=True)
+    model_year = fields.Selection(selection='_get_year_selection', tracking=True)
     color = fields.Char(tracking=True)
-    seats = fields.Integer(string='Seats Number', tracking=True)
-    doors = fields.Integer(string='Doors Number', tracking=True)
-    trailer_hook = fields.Boolean(default=False, string='Trailer Hitch', tracking=True)
-    default_co2 = fields.Float('CO2 Emissions', tracking=True)
-    co2_standard = fields.Char(tracking=True)
+    seats = fields.Integer(string='Seating Capacity', tracking=True)
+    doors = fields.Integer(string='Number of Doors', tracking=True,
+        help="Specifies the total number of doors, including the truck and hatch doors, if applicable.")
+    trailer_hook = fields.Boolean(default=False, string='Trailer Hitch', tracking=True,
+        help="A trailer hitch is a device attached to a vehicle's chassis for towing purposes,\
+            such as pulling trailers, boats, or other vehicles.")
+    default_co2 = fields.Float('CO₂ Emissions', tracking=True)
+    co2_emission_unit = fields.Selection([('g/km', 'g/km'), ('g/mi', 'g/mi')], compute='_compute_co2_emission_unit', required=True)
+    co2_standard = fields.Char(string="Emission Standard", tracking=True,
+        help='''Emission Standard specifies the regulatory test procedure or \
+            guideline under which a vehicle's emissions are measured.''')
     default_fuel_type = fields.Selection(FUEL_TYPES, 'Fuel Type', default='electric', tracking=True)
-    power = fields.Integer('Power', tracking=True)
-    horsepower = fields.Integer(tracking=True)
+    power = fields.Float('Power', tracking=True)
+    horsepower = fields.Float(tracking=True)
     horsepower_tax = fields.Float('Horsepower Taxation', tracking=True)
     electric_assistance = fields.Boolean(default=False, tracking=True)
     power_unit = fields.Selection([
         ('power', 'kW'),
-        ('horsepower', 'Horsepower')
+        ('horsepower', 'Horsepower (hp)')
         ], 'Power Unit', default='power', required=True)
     vehicle_properties_definition = fields.PropertiesDefinition('Vehicle Properties')
     vehicle_range = fields.Integer(string="Range")
+    range_unit = fields.Selection([('km', 'km'), ('mi', 'mi')], default="km", required=True)
+    drive_type = fields.Selection([
+        ('fwd', 'Front-Wheel Drive (FWD)'),
+        ('awd', 'All-Wheel Drive (AWD)'),
+        ('rwd', 'Rear-Wheel Drive (RWD)'),
+        ('4wd', 'Four-Wheel Drive (4WD)'),
+    ])
 
     @api.model
     def _search_display_name(self, operator, value):
@@ -74,6 +92,14 @@ class FleetVehicleModel(models.Model):
         for model in self:
             model.vehicle_count = count_by_model.get(model.id, 0)
 
+    @api.depends('range_unit')
+    def _compute_co2_emission_unit(self):
+        for record in self:
+            if record.range_unit == 'km':
+                record.co2_emission_unit = 'g/km'
+            else:
+                record.co2_emission_unit = 'g/mi'
+
     @api.model
     def _search_vehicle_count(self, operator, value):
         fleet_models = self.env['fleet.vehicle.model'].search_fetch([], ['vehicle_count'])
