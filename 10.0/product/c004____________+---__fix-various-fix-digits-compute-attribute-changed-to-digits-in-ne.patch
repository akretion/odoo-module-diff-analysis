PR: https://github.com/odoo/odoo/pull/

From: 665d1ec146adc142d63a3b714210b5876c598366
From: Thibault Delavall√©e
Date: 2016-08-09 09:03:12

Structural Changes: 13
Total Changes: 38

[FIX] various: fix digits_compute attribute changed to digits in new API

================================= pseudo patch: =================================

--- a/addons/product/models/product.py
+++ b/addons/product/models/product.py
@@ -97,7 +97,7 @@ class ProductPriceHistory(models.Model):
     company_id = fields.Many2one('res.company', default=_get_default_company_id, required=True)
     product_id = fields.Many2one('product.product', 'Product', ondelete='cascade', required=True)
     datetime = fields.Datetime('Date', default=fields.Datetime.now())
-    cost = fields.Float('Cost', digits_compute=dp.get_precision('Product Price'))
+    cost = fields.Float('Cost', digits=dp.get_precision('Product Price'))
 
 
 class ProductProduct(models.Model):
@@ -109,14 +109,14 @@ class ProductProduct(models.Model):
 
     price = fields.Float(
         'Price', compute='_compute_product_price',
-        digits_compute=dp.get_precision('Product Price'), inverse='_set_product_price')
+        digits=dp.get_precision('Product Price'), inverse='_set_product_price')
     price_extra = fields.Float(
         'Variant Price Extra', compute='_compute_product_price_extra',
-        digits_compute=dp.get_precision('Product Price'),
+        digits=dp.get_precision('Product Price'),
         help="This is the sum of the extra price of all attributes")
     lst_price = fields.Float(
         'Sale Price', compute='_compute_product_lst_price',
-        digits_compute=dp.get_precision('Product Price'), inverse='_set_product_price')
+        digits=dp.get_precision('Product Price'), inverse='_set_product_price')
 
     default_code = fields.Char('Internal Reference', index=True)
     code = fields.Char('Internal Reference', compute='_compute_product_code')
@@ -150,13 +150,13 @@ class ProductProduct(models.Model):
 
     standard_price = fields.Float(
         'Cost', company_dependent=True,
-        digits_compute=dp.get_precision('Product Price'),
+        digits=dp.get_precision('Product Price'),
         groups="base.group_user",
         help="Cost of the product template used for standard stock valuation in accounting and used as a base price on purchase orders. "
              "Expressed in the default unit of measure of the product.")
     volume = fields.Float('Volume', help="The volume in m3.")
     weight = fields.Float(
-        'Weight', digits_compute=dp.get_precision('Stock Weight'),
+        'Weight', digits=dp.get_precision('Stock Weight'),
         help="The weight of the contents in Kg, not including any packaging, etc.")
 
     pricelist_item_ids = fields.Many2many(
@@ -589,7 +589,7 @@ class SuppliferInfo(models.Model):
         'Minimal Quantity', default=0.0, required=True,
         help="The minimal quantity to purchase from this vendor, expressed in the vendor Product Unit of Measure if not any, in the default unit of measure of the product otherwise.")
     price = fields.Float(
-        'Price', default=0.0, digits_compute=dp.get_precision('Product Price'),
+        'Price', default=0.0, digits=dp.get_precision('Product Price'),
         required=True, help="The price to purchase a product")
     company_id = fields.Many2one(
         'res.company', 'Company',

--- a/addons/product/models/product_attribute.py
+++ b/addons/product/models/product_attribute.py
@@ -27,7 +27,7 @@ class ProductAttributevalue(models.Model):
     product_ids = fields.Many2many('product.product', id1='att_id', id2='prod_id', string='Variants', readonly=True)
     price_extra = fields.Float(
         'Attribute Price Extra', compute='_compute_price_extra', inverse='_set_price_extra',
-        default=0.0, digits_compute=dp.get_precision('Product Price'),
+        default=0.0, digits=dp.get_precision('Product Price'),
         help="Price Extra: Extra price for the variant with this attribute value on sale price. eg. 200 price extra, 1000 + 200 = 1200.")
     price_ids = fields.One2many('product.attribute.price', 'value_id', 'Attribute Prices', readonly=True)
 
@@ -79,7 +79,7 @@ class ProductAttributePrice(models.Model):
 
     product_tmpl_id = fields.Many2one('product.template', 'Product Template', ondelete='cascade', required=True)
     value_id = fields.Many2one('product.attribute.value', 'Product Attribute Value', ondelete='cascade', required=True)
-    price_extra = fields.Float('Price Extra', digits_compute=dp.get_precision('Product Price'))
+    price_extra = fields.Float('Price Extra', digits=dp.get_precision('Product Price'))
 
 
 class ProductAttributeLine(models.Model):

--- a/addons/product/models/product_pricelist.py
+++ b/addons/product/models/product_pricelist.py
@@ -325,19 +325,19 @@ class PricelistItem(models.Model):
     base_pricelist_id = fields.Many2one('product.pricelist', 'Other Pricelist')
     pricelist_id = fields.Many2one('product.pricelist', 'Pricelist', index=True, ondelete='cascade')
     price_surcharge = fields.Float(
-        'Price Surcharge', digits_compute=dp.get_precision('Product Price'),
+        'Price Surcharge', digits=dp.get_precision('Product Price'),
         help='Specify the fixed amount to add or substract(if negative) to the amount calculated with the discount.')
     price_discount = fields.Float('Price Discount', default=0, digits=(16, 2))
     price_round = fields.Float(
-        'Price Rounding', digits_compute=dp.get_precision('Product Price'),
+        'Price Rounding', digits=dp.get_precision('Product Price'),
         help="Sets the price so that it is a multiple of this value.\n"
              "Rounding is applied after the discount and before the surcharge.\n"
              "To have prices that end in 9.99, set rounding 10, surcharge -0.01")
     price_min_margin = fields.Float(
-        'Min. Price Margin', digits_compute=dp.get_precision('Product Price'),
+        'Min. Price Margin', digits=dp.get_precision('Product Price'),
         help='Specify the minimum amount of margin over the base price.')
     price_max_margin = fields.Float(
-        'Max. Price Margin', digits_compute=dp.get_precision('Product Price'),
+        'Max. Price Margin', digits=dp.get_precision('Product Price'),
         help='Specify the maximum amount of margin over the base price.')
     company_id = fields.Many2one(
         'res.company', 'Company',
@@ -351,7 +351,7 @@ class PricelistItem(models.Model):
         ('fixed', 'Fix Price'),
         ('percentage', 'Percentage (discount)'),
         ('formula', 'Formula')], index=True, default='fixed')
-    fixed_price = fields.Float('Fixed Price', digits_compute=dp.get_precision('Product Price'))
+    fixed_price = fields.Float('Fixed Price', digits=dp.get_precision('Product Price'))
     percent_price = fields.Float('Percentage Price')
     # functional fields used for usability purposes
     name = fields.Char(

--- a/addons/product/models/product_template.py
+++ b/addons/product/models/product_template.py
@@ -59,25 +59,25 @@ class ProductTemplate(models.Model):
     # price fields
     price = fields.Float(
         'Price', compute='_compute_template_price', inverse='_set_template_price',
-        digits_compute=dp.get_precision('Product Price'))
+        digits=dp.get_precision('Product Price'))
     list_price = fields.Float(
         'Sale Price', default=1.0,
-        digits_compute=dp.get_precision('Product Price'),
+        digits=dp.get_precision('Product Price'),
         help="Base price to compute the customer price. Sometimes called the catalog price.")
     lst_price = fields.Float(
         'Public Price', related='list_price',
-        digits_compute=dp.get_precision('Product Price'))
+        digits=dp.get_precision('Product Price'))
     standard_price = fields.Float(
         'Cost', compute='_compute_standard_price',
         inverse='_set_standard_price', search='_search_standard_price',
-        digits_compute=dp.get_precision('Product Price'), groups="base.group_user",
+        digits=dp.get_precision('Product Price'), groups="base.group_user",
         help="Cost of the product, in the default unit of measure of the product.")
 
     volume = fields.Float(
         'Volume', compute='_compute_volume', inverse='_set_volume',
         help="The volume in m3.", store=True)
     weight = fields.Float(
-        'Weight', compute='_compute_weight', digits_compute=dp.get_precision('Stock Weight'),
+        'Weight', compute='_compute_weight', digits=dp.get_precision('Stock Weight'),
         inverse='_set_weight', store=True,
         help="The weight of the contents in Kg, not including any packaging, etc.")
 
