PR: https://github.com/odoo/odoo/pull/

From: beaa30a3d1843de43a45f419bfbc1bfa7613a920
From: Laurent Smet
Date: 2019-06-28 11:52:55

Breaking data model changes score: 5, change matches:
-    _inherit = ['account.invoice', 'utm.mixin']
-    _inherit = 'account.invoice.line'
-    sale_line_ids = fields.Many2many(
+    sale_line_ids = fields.Many2many(

Total Changes: 436

[IMP/REF] accounting-pocalypse yeaaahh

This commit merges the following models
 * account.invoice and account.move
 * account.invoice.line and account.move.line
 * account.voucher and account.move
 * account.voucher.line and account.move.line

It was the opportunity for a big cleanup of the code, so it also restructures the whole account module, its different models/fields, the tests etc. for a better world and a better code readability.

==== Rationale ====
The rationale of this huge change is that we want journal entries / invoices to be easily edited, and changes reflected in the other model. It's a HUGE feature and very strategic for the fiduciary companies. For example, changing the account of a journal entry needs to be automatically reflected on the related invoice.

The same reasoning applies to sale/purchase vouchers.

==== Changes made in features =====
When creating an invoice, you are now creating a journal entry directly.
--> The object account.invoice no longer exists.
In the same fashion when creating an invoice line, you're now adding journal items directly in the journal entry representing the invoice. If this invoice line has some tax, it may create additional journal items as well.
--> The models account.invoice.line & account.invoice.tax no longer exist

Identically, when creating a sale/purchase receipt with its lines, you are now creating a journal entry directly and there's no more usability difference between encoding a receipt or an invoice.
--> The object account.voucher no longer exists.
--> The object account.voucher.line no longer exists.
--> The whole account_voucher module no longer exists.

Positive side-effects coming from these changes are
* draft invoices/bills/sale or purchase receipts now create a draft accounting entry. Validate these objects now simply post its journal entry. That means that draft invoices/bills/sale or purchase receipt can straightforwardly be included in reporting or budgets.
* opening a journal entry in form view will now always open the correct view: if it's a sale/purchase journal entry we will have a customer invoice/vendor bill view or a sale/purchase receipt view, whatever the menu we're coming from.
* code & business logic simplification. It is also condensed in a single place instead of being partially duplicated on invoices, vouchers and journal entries.

There should be no feature loss, except the one allowing to group multiple journal items together based on the same product during the invoice validation.

==== Changes made in models =====
* account.invoice: model removed. Instead, now use account.move with following mapping

field (account.invoice) 		field (account.move)
-----------------------			--------------------
name 					invoice_payment_ref
number 					name
reference 				ref
comment 				narration
user_id 				invoice_user_id
amount_					total_company_signed amount_total_signed
residual 				amount_residual
state 					state + invoice_payment_state 		/!\ selection changed
date_invoice 				invoice_date
date_due 				invoice_date_due
sent 					invoice_sent
origin 					invoice_origin
payment_term_id 			invoice_payment_term_id
partner_bank_id 			invoice_partner_bank_id
incoterm_id 				invoice_incoterm_id
vendor_bill_id 				invoice_vendor_bill_id
source_email 				invoice_source_email
vendor_display_name 			invoice_vendor_display_name
invoice_icon 				invoice_vendor_icon
cash_rounding_id 			invoice_cash_rounding_id
sequence_number_next 			invoice_sequence_number_next
sequence_number_next_prefix 		invoice_sequence_number_next_prefix

'invoices' subset of account.move can be accessed by using the selection field 'type' or one of the many helpers like is_invoice()

* account.move: now has a valid state 'cancel' that has to be excluded from all business logic
* account.move: field 'amount' renamed into 'amount_total'
* account.move: field 'reverse_entry_id' renamed into 'reversed_entry_id'
* account.move.line: now has a field 'display_type' that has to be excluded from all business logic, in order to support invoice layouting
* account.invoice.line: model removed. Instead, now use account.move.line with following mapping

field (account.invoice.line) 		field (account.move.line)
----------------------------		-------------------------
invoice_id 				move_id
uom_id 					product_uom_id
invoice_line_tax_ids 			tax_ids
account_analytic_id 			analytic_account_id

'invoice lines' subset of all account.move.line from a journal entry can be accessed by using the boolean field 'exclude_from_invoice_tab'

* account.invoice.tax: model removed. Instead, now use account.move.line with following mapping

field (account.invoice.tax) 		field (account.move.line)
---------------------------		-------------------------
invoice_id 				move_id
account_analytic_id 			analytic_account_id
amount 					price_unit
base 					tax_base_amount

'tax lines' subset of all account.move.line from a journal entry can be accessed by using the relational field 'tax_line_id'

* account.invoice.confirm: model removed. Instead, now use the 'post()' function of account.move
* account.invoice.refund: model removed. Instead, now use account.move.reversal to reverse the entries with the same options as we had for invoices
* account.voucher: model removed. Instead, now use account.move of type in ['out_receipt', 'in_receipt]
* account.voucher.line: model removed. Instead, now use account.move.line

==== Changes made in functions ====
* on account.move, method _run_post_draft_to_post() renamed into _autopost_draft_entries()
* on account.move, method action_account_invoice_payment() renamed into action_invoice_register_payment()
* on account.move, method action_invoice_reconcile_to_check() renamed into action_open_matching_suspense_moves()
* on account.move, method _get_domain_edition_mode_available() renamed into _get_domain_matching_supsense_moves()
* on account.move, method _get_intrastat_country_id() renamed into _get_invoice_intrastat_country_id()
* on account.move.line, method _get_domain_for_edition_mode() renamed into _get_suspense_moves_domain()
* in account.bank.statement, contextual key 'edition_mode' renamed into 'suspense_moves_mode'

Was task 1917430

================================= pseudo patch: =================================

--- a/addons/sale/models/account_invoice.py
+++ b/addons/sale/models/account_invoice.py
@@ -4,15 +4,15 @@
 from odoo import api, fields, models, _
 
 
-class AccountInvoice(models.Model):
-    _name = 'account.invoice'
-    _inherit = ['account.invoice', 'utm.mixin']
+class AccountMove(models.Model):
+    _name = 'account.move'
+    _inherit = ['account.move', 'utm.mixin']
 
     @api.model
-    def _get_default_team(self):
+    def _get_invoice_default_sale_team(self):
         return self.env['crm.team']._get_default_team_id()
 
-    team_id = fields.Many2one('crm.team', string='Sales Team', default=_get_default_team, oldname='section_id')
+    team_id = fields.Many2one('crm.team', string='Sales Team', default=_get_invoice_default_sale_team)
     partner_shipping_id = fields.Many2one(
         'res.partner',
         string='Delivery Address',
@@ -25,98 +25,75 @@ class AccountInvoice(models.Model):
         """
         Trigger the change of fiscal position when the shipping address is modified.
         """
-        fiscal_position = self.env['account.fiscal.position'].get_fiscal_position(self.partner_id.id, self.partner_shipping_id.id)
+        delivery_partner_id = self._get_invoice_delivery_partner_id()
+        fiscal_position = self.env['account.fiscal.position'].get_fiscal_position(
+            self.partner_id.id, delivery_id=delivery_partner_id)
+
         if fiscal_position:
             self.fiscal_position_id = fiscal_position
 
     @api.multi
     def unlink(self):
-        downpayment_lines = self.mapped('invoice_line_ids.sale_line_ids').filtered(lambda line: line.is_downpayment)
-        res = super(AccountInvoice, self).unlink()
+        downpayment_lines = self.mapped('line_ids.sale_line_ids').filtered(lambda line: line.is_downpayment)
+        res = super(AccountMove, self).unlink()
         if downpayment_lines:
             downpayment_lines.unlink()
         return res
 
-    @api.onchange('partner_id', 'company_id')
-    def _onchange_delivery_address(self):
+    @api.onchange('partner_id')
+    def _onchange_partner_id(self):
+        # OVERRIDE
+        res = super(AccountMove, self)._onchange_partner_id()
+
+        # Recompute 'partner_shipping_id' based on 'partner_id'.
         addr = self.partner_id.address_get(['delivery'])
         self.partner_shipping_id = addr and addr.get('delivery')
-        inv_type = self.type or self.env.context.get('type', 'out_invoice')
-        if inv_type == 'out_invoice':
-            company = self.company_id or self.env.company
-            self.comment = company.with_context(lang=self.partner_id.lang).invoice_terms or (self._origin.company_id == company and self.comment)
 
-    @api.multi
-    def _prepare_refund(self, invoice, date_invoice=None, date=None, description=None, journal_id=None):
-        values = super(AccountInvoice, self)._prepare_refund(invoice, date_invoice, date, description, journal_id)
-        values.update({'campaign_id': invoice.campaign_id.id,
-                       'medium_id': invoice.medium_id.id,
-                       'source_id': invoice.source_id.id})
-        return values
+        # Recompute 'narration' based on 'company.invoice_terms'.
+        if self.type == 'out_invoice':
+            self.narration = self.company_id.with_context(lang=self.partner_id.lang).invoice_terms
+
+        return res
 
     @api.multi
-    def action_invoice_open(self):
+    def post(self):
         # OVERRIDE
         # Auto-reconcile the invoice with payments coming from transactions.
         # It's useful when you have a "paid" sale order (using a payment transaction) and you invoice it later.
-        res = super(AccountInvoice, self).action_invoice_open()
-
-        if not self:
-            return res
+        res = super(AccountMove, self).post()
 
-        for invoice in self:
+        for invoice in self.filtered(lambda move: move.is_invoice()):
             payments = invoice.mapped('transaction_ids.payment_id')
             move_lines = payments.mapped('move_line_ids').filtered(lambda line: not line.reconciled and line.credit > 0.0)
             for line in move_lines:
-                invoice.assign_outstanding_credit(line.id)
+                invoice.js_assign_outstanding_line(line.id)
         return res
 
     @api.multi
     def action_invoice_paid(self):
-        res = super(AccountInvoice, self).action_invoice_paid()
+        # OVERRIDE
+        res = super(AccountMove, self).action_invoice_paid()
         todo = set()
-        for invoice in self:
+        for invoice in self.filtered(lambda move: move.is_invoice()):
             for line in invoice.invoice_line_ids:
                 for sale_line in line.sale_line_ids:
-                    todo.add((sale_line.order_id, invoice.number))
+                    todo.add((sale_line.order_id, invoice.name))
         for (order, name) in todo:
-            order.message_post(body=_("Invoice %s paid") % (name))
+            order.message_post(body=_("Invoice %s paid") % name)
         return res
 
-    @api.model
-    def _refund_cleanup_lines(self, lines):
-        """ This override will link Sale line to all its invoice lines (direct invoice, refund create from invoice, ...)
-            in order to have the invoiced quantity taking invoice (in/out) into account in its computation everytime,
-            whatever the refund policy (create, cancel or modify).
-        """
-        result = super(AccountInvoice, self)._refund_cleanup_lines(lines)
-        if lines._name == 'account.invoice.line':  # avoid side effects as lines can be taxes ....
-            for i, line in enumerate(lines):
-                for name, field in line._fields.items():
-                    if name == 'sale_line_ids':
-                        result[i][2][name] = [(4, line_id) for line_id in line[name].ids]
-        return result
-
     @api.multi
-    def get_delivery_partner_id(self):
+    def _get_invoice_delivery_partner_id(self):
+        # OVERRIDE
         self.ensure_one()
-        return self.partner_shipping_id.id or super(AccountInvoice, self).get_delivery_partner_id()
-
-    def _get_refund_common_fields(self):
-        return super(AccountInvoice, self)._get_refund_common_fields() + ['team_id', 'partner_shipping_id']
-
-    def _get_intrastat_country_id(self):
-        if self.type in ['out_invoice', 'out_refund']:
-            return self.partner_shipping_id.country_id.id or super(AccountInvoice, self)._get_intrastat_country_id()
-        return super(AccountInvoice, self)._get_intrastat_country_id()
-
+        return self.partner_shipping_id.id or super(AccountMove, self)._get_invoice_delivery_partner_id()
 
-class AccountInvoiceLine(models.Model):
-    _inherit = 'account.invoice.line'
-    _order = 'invoice_id, sequence, id'
-
-    sale_line_ids = fields.Many2many(
-        'sale.order.line',
-        'sale_order_line_invoice_rel',
-        'invoice_line_id', 'order_line_id',
-        string='Sales Order Lines', readonly=True, copy=False)
+    @api.multi
+    def _get_invoice_intrastat_country_id(self):
+        # OVERRIDE
+        self.ensure_one()
+        if self.is_sale_document():
+            intrastat_country_id = self.partner_shipping_id.country_id.id
+        else:
+            intrastat_country_id = super(AccountMove, self)._get_invoice_intrastat_country_id()
+        return intrastat_country_id

--- a/addons/sale/models/account_move.py
+++ b/addons/sale/models/account_move.py
@@ -9,6 +9,18 @@ from odoo.tools import float_compare, float_is_zero
 class AccountMoveLine(models.Model):
     _inherit = 'account.move.line'
 
+    sale_line_ids = fields.Many2many(
+        'sale.order.line',
+        'sale_order_line_invoice_rel',
+        'invoice_line_id', 'order_line_id',
+        string='Sales Order Lines', readonly=True, copy=False)
+
+    @api.multi
+    def _copy_data_extend_business_fields(self, values):
+        # OVERRIDE to copy the 'sale_line_ids' field as well.
+        super(AccountMoveLine, self)._copy_data_extend_business_fields(values)
+        values['sale_line_ids'] = [(6, None, self.sale_line_ids.ids)]
+
     @api.multi
     def _prepare_analytic_line(self):
         """ Note: This method is called only on the move.line that having an analytic account, and

--- a/addons/sale/models/payment.py
+++ b/addons/sale/models/payment.py
@@ -118,7 +118,7 @@ class PaymentTransaction(models.Model):
                 trans = trans.with_context(**ctx_company)
                 trans.sale_order_ids._force_lines_to_invoice_policy_order()
                 invoices = trans.sale_order_ids._create_invoices()
-                trans.invoice_ids = [(6, 0, invoices)]
+                trans.invoice_ids = [(6, 0, invoices.ids)]
 
     @api.model
     def _compute_reference_prefix(self, values):

--- a/addons/sale/models/res_config_settings.py
+++ b/addons/sale/models/res_config_settings.py
@@ -68,7 +68,7 @@ class ResConfigSettings(models.TransientModel):
                                             "This mode is advised if you issue the final invoice at the order and not after the delivery.",
                                        config_parameter='sale.automatic_invoice')
     template_id = fields.Many2one('mail.template', 'Email Template',
-                                  domain="[('model', '=', 'account.invoice')]",
+                                  domain="[('model', '=', 'account.move')]",
                                   config_parameter='sale.default_email_template',
                                   default=lambda self: self.env.ref('account.email_template_edi_invoice', False))
     confirmation_template_id = fields.Many2one('mail.template', string='Confirmation Email',

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -1,4 +1,4 @@
-# -*- coding: utf-8 -*-
+7# -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from datetime import datetime, timedelta
@@ -70,7 +70,7 @@ class SaleOrder(models.Model):
         deposit_product_id = self.env['sale.advance.payment.inv']._default_product_id()
         line_invoice_status_all = [(d['order_id'][0], d['invoice_status']) for d in self.env['sale.order.line'].read_group([('order_id', 'in', self.ids), ('product_id', '!=', deposit_product_id.id)], ['order_id', 'invoice_status'], ['order_id', 'invoice_status'], lazy=False)]
         for order in self:
-            invoice_ids = order.order_line.mapped('invoice_lines.invoice_id').filtered(lambda r: r.type in ['out_invoice', 'out_refund'])
+            invoice_ids = order.order_line.mapped('invoice_lines.move_id').filtered(lambda r: r.type in ['out_invoice', 'out_refund'])
 
 
             line_invoice_status = [d[1] for d in line_invoice_status_all if d[0] == order.id]
@@ -157,7 +157,7 @@ class SaleOrder(models.Model):
     order_line = fields.One2many('sale.order.line', 'order_id', string='Order Lines', states={'cancel': [('readonly', True)], 'done': [('readonly', True)]}, copy=True, auto_join=True)
 
     invoice_count = fields.Integer(string='Invoice Count', compute='_get_invoiced', readonly=True)
-    invoice_ids = fields.Many2many("account.invoice", string='Invoices', compute="_get_invoiced", readonly=True, copy=False)
+    invoice_ids = fields.Many2many("account.move", string='Invoices', compute="_get_invoiced", readonly=True, copy=False)
     invoice_status = fields.Selection([
         ('upselling', 'Upselling Opportunity'),
         ('invoiced', 'Fully Invoiced'),
@@ -449,28 +449,28 @@ class SaleOrder(models.Model):
         a clean extension chain).
         """
         self.ensure_one()
-        journal_id = self.env['account.invoice'].default_get(['journal_id'])['journal_id']
-        if not journal_id:
-            raise UserError(_('Please define an accounting sales journal for this company.'))
+        journal = self.env['account.move'].with_context(force_company=self.company_id.id, default_type='out_invoice')._get_default_journal()
+        if not journal:
+                raise UserError(_('Please define an accounting sales journal for the company %s (%s).') % (self.company_id.name, self.company_id.id))
+
         invoice_vals = {
-            'name': self.client_order_ref or '',
-            'origin': self.name,
+            'ref': self.client_order_ref or '',
             'type': 'out_invoice',
-            'account_id': self.partner_invoice_id.property_account_receivable_id.id,
-            'partner_id': self.partner_invoice_id.id,
-            'partner_shipping_id': self.partner_shipping_id.id,
-            'journal_id': journal_id,
+            'narration': self.note,
             'currency_id': self.pricelist_id.currency_id.id,
-            'comment': self.note,
-            'payment_term_id': self.payment_term_id.id,
-            'fiscal_position_id': self.fiscal_position_id.id or self.partner_invoice_id.property_account_position_id.id,
-            'company_id': self.company_id.id,
             'campaign_id': self.campaign_id.id,
             'medium_id': self.medium_id.id,
             'source_id': self.source_id.id,
-            'user_id': self.user_id and self.user_id.id,
+            'invoice_user_id': self.user_id and self.user_id.id,
             'team_id': self.team_id.id,
+            'partner_id': self.partner_invoice_id.id,
+            'partner_shipping_id': self.partner_shipping_id.id,
+            'fiscal_position_id': self.fiscal_position_id.id or self.partner_invoice_id.property_account_position_id.id,
+            'invoice_origin': self.name,
+            'invoice_payment_term_id': self.payment_term_id.id,
+            'invoice_payment_ref': self.reference,
             'transaction_ids': [(6, 0, self.transaction_ids.ids)],
+            'invoice_line_ids': [],
         }
         return invoice_vals
 
@@ -484,12 +484,12 @@ class SaleOrder(models.Model):
     @api.multi
     def action_view_invoice(self):
         invoices = self.mapped('invoice_ids')
-        action = self.env.ref('account.action_invoice_tree1').read()[0]
+        action = self.env.ref('account.action_move_out_invoice_type').read()[0]
         if len(invoices) > 1:
             action['domain'] = [('id', 'in', invoices.ids)]
         elif len(invoices) == 1:
-            action['views'] = [(self.env.ref('account.invoice_form').id, 'form')]
-            action['res_id'] = invoices.ids[0]
+            action['views'] = [(self.env.ref('account.view_move_form').id, 'form')]
+            action['res_id'] = invoices.id
         else:
             action = {'type': 'ir.actions.act_window_close'}
         return action
@@ -503,104 +503,86 @@ class SaleOrder(models.Model):
         :param final: if True, refunds will be generated if necessary
         :returns: list of created invoices
         """
-        inv_obj = self.env['account.invoice']
         precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
-        invoices = {}
-        references = {}
-        invoices_origin = {}
-        invoices_name = {}
-
-        # Keep track of the sequences of the lines
-        # To keep lines under their section
-        inv_line_sequence = 0
-        for order in self:
-            group_key = order.id if grouped else (order.partner_invoice_id.id, order.currency_id.id)
 
-            # We only want to create sections that have at least one invoiceable line
+        # 1) Create invoices.
+        invoice_vals_list = []
+        for order in self:
             pending_section = None
 
-            # Create lines in batch to avoid performance problems
-            line_vals_list = []
-            # sequence is the natural order of order_lines
+            # Invoice values.
+            invoice_vals = order._prepare_invoice()
+
+            # Invoice line values (keep only necessary sections).
             for line in order.order_line:
                 if line.display_type == 'line_section':
                     pending_section = line
                     continue
                 if float_is_zero(line.qty_to_invoice, precision_digits=precision):
                     continue
-                if group_key not in invoices:
-                    inv_data = order._prepare_invoice()
-                    invoice = inv_obj.create(inv_data)
-                    references[invoice] = order
-                    invoices[group_key] = invoice
-                    invoices_origin[group_key] = [invoice.origin]
-                    invoices_name[group_key] = [invoice.name]
-                elif group_key in invoices:
-                    if order.name not in invoices_origin[group_key]:
-                        invoices_origin[group_key].append(order.name)
-                    if order.client_order_ref and order.client_order_ref not in invoices_name[group_key]:
-                        invoices_name[group_key].append(order.client_order_ref)
-
                 if line.qty_to_invoice > 0 or (line.qty_to_invoice < 0 and final):
                     if pending_section:
-                        section_invoice = pending_section.invoice_line_create_vals(
-                            invoices[group_key].id,
-                            pending_section.qty_to_invoice
-                        )
-                        inv_line_sequence += 1
-                        section_invoice[0]['sequence'] = inv_line_sequence
-                        line_vals_list.extend(section_invoice)
+                        invoice_vals.append((0, 0, pending_section._prepare_invoice_line()))
                         pending_section = None
+                invoice_vals['invoice_line_ids'].append((0, 0, line._prepare_invoice_line()))
 
-                    inv_line_sequence += 1
-                    inv_line = line.invoice_line_create_vals(
-                        invoices[group_key].id, line.qty_to_invoice
-                    )
-                    inv_line[0]['sequence'] = inv_line_sequence
-                    line_vals_list.extend(inv_line)
-
-            if references.get(invoices.get(group_key)):
-                if order not in references[invoices[group_key]]:
-                    references[invoices[group_key]] |= order
-
-            self.env['account.invoice.line'].create(line_vals_list)
-
-        for group_key in invoices:
-            invoices[group_key].write({'name': ', '.join(invoices_name[group_key]),
-                                       'origin': ', '.join(invoices_origin[group_key])})
-            sale_orders = references[invoices[group_key]]
-            if len(sale_orders) == 1:
-                invoices[group_key].reference = sale_orders.reference
+            if not invoice_vals['invoice_line_ids']:
+                raise UserError(_('There is no invoiceable line. If a product has a Delivered quantities invoicing policy, please make sure that a quantity has been delivered.'))
 
-        if not invoices:
-            raise UserError(_('There is no invoiceable line. If a product has a Delivered quantities invoicing policy, please make sure that a quantity has been delivered.'))
+            invoice_vals_list.append(invoice_vals)
 
-        for invoice in invoices.values():
-            invoice.compute_taxes()
-            if not invoice.invoice_line_ids:
-                raise UserError(_('There is no invoiceable line. If a product has a Delivered quantities invoicing policy, please make sure that a quantity has been delivered.'))
-            # If invoice is negative, do a refund invoice instead
-            if invoice.amount_total < 0:
-                invoice.type = 'out_refund'
-                for line in invoice.invoice_line_ids:
-                    line.quantity = -line.quantity
-            # Use additional field helper function (for account extensions)
-            for line in invoice.invoice_line_ids:
-                line._set_additional_fields()
-            # Necessary to force computation of taxes. In account_invoice, they are triggered
-            # by onchanges, which are not triggered when doing a create.
-            invoice.compute_taxes()
-            # Idem for partner
-            so_payment_term_id = invoice.payment_term_id.id
-            fp_invoice = invoice.fiscal_position_id
-            invoice._onchange_partner_id()
-            invoice.fiscal_position_id = fp_invoice
-            # To keep the payment terms set on the SO
-            invoice.payment_term_id = so_payment_term_id
-            invoice.message_post_with_view('mail.message_origin_link',
-                values={'self': invoice, 'origin': references[invoice]},
-                subtype_id=self.env.ref('mail.mt_note').id)
-        return [inv.id for inv in invoices.values()]
+        if not invoice_vals_list:
+            raise UserError(_(
+                'There is no invoiceable line. If a product has a Delivered quantities invoicing policy, please make sure that a quantity has been delivered.'))
+
+        # 2) Manage 'grouped' parameter: group by (partner_id, currency_id).
+        if grouped:
+            new_invoice_vals_list = []
+            for invoices in groupby(invoice_vals_list, key=lambda x: (x.partner_id.id, x.currency_id.id)):
+                origins = set()
+                payment_refs = set()
+                refs = set()
+                ref_invoice_vals = None
+                for invoice_vals in invoices:
+                    if not ref_invoice_vals:
+                        ref_invoice_vals = invoice_vals
+                    else:
+                        ref_invoice_vals['invoice_line_ids'] += invoice_vals['invoice_line_ids']
+                    origins.add(invoice_vals['invoice_origin'])
+                    payment_refs.add(invoice_vals['invoice_payment_ref'])
+                    refs.add(invoice_vals['ref'])
+                ref_invoice_vals.update({
+                    'ref': ', '.join(refs),
+                    'invoice_origin': ', '.join(origins),
+                    'invoice_payment_ref': len(payment_refs) == 1 and payment_refs.pop() or False,
+                })
+                new_invoice_vals_list.append(ref_invoice_vals)
+            invoice_vals_list = new_invoice_vals_list
+
+        # 3) Manage 'final' parameter: transform out_invoice to out_refund if negative.
+        out_invoice_vals_list = []
+        refund_invoice_vals_list = []
+        if final:
+            for invoice_vals in invoice_vals_list:
+                if sum(l[2]['quantity'] * l[2]['price_unit'] for l in invoice_vals['invoice_line_ids']) < 0:
+                    for l in invoice_vals['invoice_line_ids']:
+                        l[2]['quantity'] = -l[2]['quantity']
+                    invoice_vals['type'] = 'out_refund'
+                    refund_invoice_vals_list.append(invoice_vals)
+                else:
+                    out_invoice_vals_list.append(invoice_vals)
+        else:
+            out_invoice_vals_list = invoice_vals_list
+
+        # Create invoices.
+        moves = self.env['account.move'].with_context(default_type='out_invoice').create(out_invoice_vals_list)
+        moves += self.env['account.move'].with_context(default_type='out_refund').create(refund_invoice_vals_list)
+        for move in moves:
+            move.message_post_with_view('mail.message_origin_link',
+                values={'self': move, 'origin': move.line_ids.mapped('sale_line_ids.order_id')},
+                subtype_id=self.env.ref('mail.mt_note').id
+            )
+        return moves
 
     @api.multi
     def action_draft(self):
@@ -994,7 +976,7 @@ class SaleOrderLine(models.Model):
             else:
                 line.qty_to_invoice = 0
 
-    @api.depends('invoice_lines.invoice_id.state', 'invoice_lines.quantity')
+    @api.depends('invoice_lines.move_id.state', 'invoice_lines.quantity')
     def _get_invoice_qty(self):
         """
         Compute the quantity invoiced. If case of a refund, the quantity invoiced is decreased. Note
@@ -1005,11 +987,11 @@ class SaleOrderLine(models.Model):
         for line in self:
             qty_invoiced = 0.0
             for invoice_line in line.invoice_lines:
-                if invoice_line.invoice_id.state != 'cancel':
-                    if invoice_line.invoice_id.type == 'out_invoice':
-                        qty_invoiced += invoice_line.uom_id._compute_quantity(invoice_line.quantity, line.product_uom)
-                    elif invoice_line.invoice_id.type == 'out_refund':
-                        qty_invoiced -= invoice_line.uom_id._compute_quantity(invoice_line.quantity, line.product_uom)
+                if invoice_line.move_id.state != 'cancel':
+                    if invoice_line.move_id.type == 'out_invoice':
+                        qty_invoiced += invoice_line.product_uom_id._compute_quantity(invoice_line.quantity, line.product_uom)
+                    elif invoice_line.move_id.type == 'out_refund':
+                        qty_invoiced -= invoice_line.product_uom_id._compute_quantity(invoice_line.quantity, line.product_uom)
             line.qty_invoiced = qty_invoiced
 
     @api.depends('price_unit', 'discount')
@@ -1123,7 +1105,7 @@ class SaleOrderLine(models.Model):
     name = fields.Text(string='Description', required=True)
     sequence = fields.Integer(string='Sequence', default=10)
 
-    invoice_lines = fields.Many2many('account.invoice.line', 'sale_order_line_invoice_rel', 'order_line_id', 'invoice_line_id', string='Invoice Lines', copy=False)
+    invoice_lines = fields.Many2many('account.move.line', 'sale_order_line_invoice_rel', 'order_line_id', 'invoice_line_id', string='Invoice Lines', copy=False)
     invoice_status = fields.Selection([
         ('upselling', 'Upselling Opportunity'),
         ('invoiced', 'Fully Invoiced'),
@@ -1295,7 +1277,7 @@ class SaleOrderLine(models.Model):
             else:
                 line.qty_delivered_manual = 0.0
 
-    @api.depends('invoice_lines', 'invoice_lines.price_total', 'invoice_lines.invoice_id.state', 'invoice_lines.invoice_id.type')
+    @api.depends('invoice_lines', 'invoice_lines.price_total', 'invoice_lines.move_id.state', 'invoice_lines.move_id.type')
     def _compute_untaxed_amount_invoiced(self):
         """ Compute the untaxed amount already invoiced from the sale order line, taking the refund attached
             the so line into account. This amount is computed as
@@ -1307,11 +1289,11 @@ class SaleOrderLine(models.Model):
         for line in self:
             amount_invoiced = 0.0
             for invoice_line in line.invoice_lines:
-                if invoice_line.invoice_id.state in ['open', 'in_payment', 'paid']:
-                    invoice_date = invoice_line.invoice_id.date_invoice or fields.Date.today()
-                    if invoice_line.invoice_id.type == 'out_invoice':
+                if invoice_line.move_id.state == 'posted':
+                    invoice_date = invoice_line.move_id.invoice_date or fields.Date.today()
+                    if invoice_line.move_id.type == 'out_invoice':
                         amount_invoiced += invoice_line.currency_id._convert(invoice_line.price_subtotal, line.currency_id, line.company_id, invoice_date)
-                    elif invoice_line.invoice_id.type == 'out_refund':
+                    elif invoice_line.move_id.type == 'out_refund':
                         amount_invoiced -= invoice_line.currency_id._convert(invoice_line.price_subtotal, line.currency_id, line.company_id, invoice_date)
             line.untaxed_amount_invoiced = amount_invoiced
 
@@ -1342,72 +1324,27 @@ class SaleOrderLine(models.Model):
             line.untaxed_amount_to_invoice = amount_to_invoice
 
     @api.multi
-    def _prepare_invoice_line(self, qty):
+    def _prepare_invoice_line(self):
         """
         Prepare the dict of values to create the new invoice line for a sales order line.
 
         :param qty: float quantity to invoice
         """
         self.ensure_one()
-        res = {}
-        account = self.product_id.property_account_income_id or self.product_id.categ_id.property_account_income_categ_id
-
-        if not account and self.product_id:
-            raise UserError(_('Please define income account for this product: "%s" (id:%d) - or for its category: "%s".') %
-                (self.product_id.name, self.product_id.id, self.product_id.categ_id.name))
-
-        fpos = self.order_id.fiscal_position_id or self.order_id.partner_id.property_account_position_id
-        if fpos and account:
-            account = fpos.map_account(account)
-
-        res = {
-            'name': self.name,
+        return {
+            'display_type': self.display_type,
             'sequence': self.sequence,
-            'origin': self.order_id.name,
-            'account_id': account.id,
-            'price_unit': self.price_unit,
-            'quantity': qty,
+            'name': self.name,
+            'product_id': self.product_id.id,
+            'product_uom_id': self.product_uom.id,
+            'quantity': self.qty_to_invoice,
             'discount': self.discount,
-            'uom_id': self.product_uom.id,
-            'product_id': self.product_id.id or False,
-            'invoice_line_tax_ids': [(6, 0, self.tax_id.ids)],
-            'account_analytic_id': self.order_id.analytic_account_id.id,
+            'price_unit': self.price_unit,
+            'tax_ids': [(6, 0, self.tax_id.ids)],
+            'analytic_account_id': self.order_id.analytic_account_id.id,
             'analytic_tag_ids': [(6, 0, self.analytic_tag_ids.ids)],
-            'display_type': self.display_type,
+            'sale_line_ids': [(4, self.id)],
         }
-        return res
-
-    @api.multi
-    def invoice_line_create(self, invoice_id, qty):
-        """ Create an invoice line. The quantity to invoice can be positive (invoice) or negative (refund).
-
-            .. deprecated:: 12.0
-                Replaced by :func:`invoice_line_create_vals` which can be used for creating
-                `account.invoice.line` records in batch
-
-            :param invoice_id: integer
-            :param qty: float quantity to invoice
-            :returns recordset of account.invoice.line created
-        """
-        return self.env['account.invoice.line'].create(
-            self.invoice_line_create_vals(invoice_id, qty))
-
-    def invoice_line_create_vals(self, invoice_id, qty):
-        """ Create an invoice line. The quantity to invoice can be positive (invoice) or negative
-            (refund).
-
-            :param invoice_id: integer
-            :param qty: float quantity to invoice
-            :returns list of dict containing creation values for account.invoice.line records
-        """
-        vals_list = []
-        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
-        for line in self:
-            if not float_is_zero(qty, precision_digits=precision) or not line.product_id:
-                vals = line._prepare_invoice_line(qty=qty)
-                vals.update({'invoice_id': invoice_id, 'sale_line_ids': [(6, 0, [line.id])]})
-                vals_list.append(vals)
-        return vals_list
 
     @api.multi
     def _prepare_procurement_values(self, group_id=False):

--- a/addons/sale/models/sales_team.py
+++ b/addons/sale/models/sales_team.py
@@ -65,16 +65,32 @@ class CrmTeam(models.Model):
 
     @api.multi
     def _compute_invoiced(self):
-        invoice_data = self.env['account.invoice'].read_group([
-            ('state', 'in', ['open', 'in_payment', 'paid']),
-            ('team_id', 'in', self.ids),
-            ('date', '<=', date.today()),
-            ('date', '>=', date.today().replace(day=1)),
-            ('type', 'in', ['out_invoice', 'out_refund']),
-        ], ['amount_untaxed_signed', 'team_id'], ['team_id'])
-        data_map = { datum['team_id'][0]: datum['amount_untaxed_signed'] for datum in invoice_data}
+        if not self:
+            return
+
+        query = '''
+            SELECT
+                move.team_id         AS team_id,
+                SUM(line.balance)    AS amount_untaxed_signed
+            FROM account_move move
+            LEFT JOIN account_move_line line ON line.move_id = move.id
+            INNER JOIN account_account_type account_type ON account_type.id = line.user_type_id 
+            WHERE move.type IN ('out_invoice', 'out_refund', 'in_invoice', 'in_refund')
+            AND move.invoice_payment_state IN ('in_payment', 'paid')
+            AND move.state = 'posted'
+            AND move.team_id IN %s
+            AND move.date BETWEEN %s AND %s
+            AND line.tax_line_id IS NULL
+            AND line.display_type IS NULL
+            AND account_type.type NOT IN ('receivable', 'payable')
+        '''
+        today = fields.Date.today()
+        params = [tuple(self.ids), fields.Date.to_string(today), fields.Date.to_string(today.replace(day=1))]
+        self._cr.execute(query, params)
+
+        data_map = dict((v[0], v[1]) for v in self._cr.fetchall())
         for team in self:
-            team.invoiced = data_map.get(team.id,0.0)
+            team.invoiced = data_map.get(team.id, 0.0)
     
     def _graph_get_model(self):
         if self._context.get('in_sales_app'):
