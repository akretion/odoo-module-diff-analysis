PR: https://github.com/odoo/odoo/pull/203327

From: ec115df5a61eddb36b8f77f3c423726cafdf4ae4
From: Maximilien (malb)
Date: 2025-04-24 01:50:07

Breaking data model changes scores: del:34 + add:1, change matches:
+    reconciled_lines_ids = fields.Many2many(
-    model_id = fields.Many2one(comodel_name='account.reconcile.model', readonly=True, required=True, index=True, ondelete='cascade')
-    company_id = fields.Many2one(related='model_id.company_id')
-    payment_ref_regex = fields.Char(string="Find Text in Label")
-    narration_regex = fields.Char(string="Find Text in Notes")
-    allow_payment_tolerance = fields.Boolean(related='model_id.allow_payment_tolerance')
-    payment_tolerance_param = fields.Float(related='model_id.payment_tolerance_param')
-    rule_type = fields.Selection(related='model_id.rule_type')
-    journal_id = fields.Many2one(
-    rule_type = fields.Selection(selection=[
-    auto_reconcile = fields.Boolean(string='Auto-validate', tracking=True,
-    to_check = fields.Boolean(string='To Check', default=False, help='This matching rule is used when the user is not certain of all the information of the counterpart.')
-    matching_order = fields.Selection(
-    counterpart_type = fields.Selection(
-    journal_id = fields.Many2one(
-    match_text_location_label = fields.Boolean(
-    match_text_location_note = fields.Boolean(
-    match_text_location_reference = fields.Boolean(
-    match_transaction_details = fields.Selection(selection=[
-    match_transaction_details_param = fields.Char(string='Transaction Details Parameter', tracking=True)
-    match_note = fields.Selection(selection=[
-    match_note_param = fields.Char(string='Note Parameter', tracking=True)
-    match_same_currency = fields.Boolean(string='Same Currency', default=True, tracking=True,
-    allow_payment_tolerance = fields.Boolean(
-    payment_tolerance_param = fields.Float(
-    payment_tolerance_type = fields.Selection(
-    match_partner = fields.Boolean(string='Partner is Set', tracking=True,
-    match_partner_category_ids = fields.Many2many('res.partner.category', string='Categories',
-    partner_mapping_line_ids = fields.One2many(string="Partner Mapping Lines",
-    past_months_limit = fields.Integer(
-    decimal_separator = fields.Char(
-    show_decimal_separator = fields.Boolean(compute='_compute_show_decimal_separator')
-    number_entries = fields.Integer(string='Number of entries related to this model', compute='_compute_number_entries')

Total Changes: 350

[IMP] account, account_accountant: new bank reconciliation widget

This commit introduces a revamped kanban view to process the bank statement
lines and reconcile them with existing invoices/bills, or help the users to
create the correct journal entry.

RATIONALE:
The previous reconciliation widget was not really user friendly, and was bloated
 with a lot of advance features for niche use cases.

IMPLEMENTATION DETAILS:
* account.reconcile.model
  - rule_type: writeoff_suggestion and invoice_matching entirely removed. Those
    features are now directly hardcoded, users can't modify the sequence or
    tweak the invoice matching algorithm anymore. We belief this was way too
    advance and that people modifying the existing rules (and default behaviour)
    would more likely break something rather than help the processing of their
    statement lines
  - partner mapping: although it's not possible anymore to do it on the partner
    categories, it's still possible to define a partner mapping by creating an
    account.reconcile.model with match_label & match_label_param, and a single
    counter part item with the partner_id set and no account_id
  - deleted fields: rule_type, matching_order, match_note, match_note_param,
    match_transaction_details, match_transaction_details_param,
    match_text_location_label, match_text_location_note,
    match_text_location_reference, match_same_currency,
    match_partner_category_ids, match_partner, past_months_limit,
    decimal_separator, show_decimal_separator, partner_mapping_line_ids
    (+class), allow_payment_tolerance, payment_tolerance_type,
    payment_tolerance_param, counterpart _type, journal_id, number_entries
  - field auto_reconcile changed name & type (was boolean): it's replaced with
    the selection field 'trigger'
  - to_check boolean: would now be implemented with next_activity_type that you
    can set on the account.reconcile.model

* account.bank.statement.line
  - Revamp of the whole javascript with a clear subdivision into
    multiple components. We used a Kanban view that we completely override for
    our needs which are that each kanban record will display the information of
    a bank statement line (belonging to a journal) that we can unfold to show
    more information. When unfolding the bank statement line the user will have
    access to different buttons allowing him to directly modify the move behind
    the bank statement line (adding new line, delete some, editing them, ...)
  - The old bank rec widget was using two python file bank.rec.widget and
    bank.rec.widget.line that were temporary models to display a representation
    of the move before being validated and once it was validated the move was
    changed. Those two classes were removed.
    We now change directly the move because we want an auto validation. It means
    that everytime a new line is added a reconciliation process is done.
  - To link the move line of the bank statement line with the move line chosen
    in the reconcile search view and also to trigger the reconciliation
    process, we used a manyToMany field compute non stored with an inverse.
    Everytime the field is written on, the reconciliation plan will be
    triggered. It allows to have a link between reconciled entries without the
    need of a stored field since we benefit from the partial reconcile table.
  - Delete: bank.rec.widget, bank.rec.widget.line, views linked to
    bank_rec_widget that are not used anymore

Co-authored by: malb <malb@odoo.com>
Co-authored by: qdp <qdp@odoo.com>

task-4603207

Part-of: odoo/odoo#203327
Related: odoo/enterprise#80787
Related: odoo/upgrade#7508
Signed-off-by: Quentin De Paoli (qdp) <qdp@odoo.com>
Co-authored-by: flg <flg@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_bank_statement_line.py
+++ b/addons/account/models/account_bank_statement_line.py
@@ -68,7 +68,7 @@ class AccountBankStatementLine(models.Model):
 
     # This field is used to record the third party name when importing bank statement in electronic format,
     # when the partner doesn't exist yet in the database (or cannot be found).
-    partner_name = fields.Char()
+    partner_name = fields.Char(index='btree_not_null')
 
     # Transaction type is used in electronic format, when the type of transaction is available in the imported file.
     transaction_type = fields.Char()

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -5147,7 +5147,14 @@ class AccountMove(models.Model):
                 validation_msgs.add(_("A line of this move is using a deprecated account, you cannot post it."))
 
             # If the field autocheck_on_post is set, we want the checked field on the move to be checked
-            move.checked = move.journal_id.autocheck_on_post
+            if move.journal_id.autocheck_on_post:
+                move.checked = move.journal_id.autocheck_on_post
+            else:
+                move.sudo().activity_schedule(
+                    activity_type_id=self.env.ref('mail.mail_activity_data_todo').id,
+                    summary=_('To check'),
+                    user_id=move.invoice_user_id.name,
+                )
 
         if validation_msgs:
             msg = "\n".join([line for line in validation_msgs])

--- a/addons/account/models/account_move_line.py
+++ b/addons/account/models/account_move_line.py
@@ -275,6 +275,10 @@ class AccountMoveLine(models.Model):
         readonly=True,
         help='Credit journal items that are matched with this journal item.',
     )
+    reconciled_lines_ids = fields.Many2many(
+        comodel_name='account.move.line',
+        compute='_compute_reconciled_lines_ids', inverse='_inverse_reconciled_lines_ids',
+    )
     matching_number = fields.Char(
         string="Matching #",
         copy=False,
@@ -1072,6 +1076,11 @@ class AccountMoveLine(models.Model):
         for line in self:
             line.payment_date = line.discount_date if line.discount_date and date.today() <= line.discount_date else line.date_maturity
 
+    @api.depends('matched_debit_ids', 'matched_credit_ids')
+    def _compute_reconciled_lines_ids(self):
+        for line in self:
+            line.reconciled_lines_ids = line.matched_debit_ids.debit_move_id + line.matched_credit_ids.credit_move_id
+
     def _search_payment_date(self, operator, value):
         if operator == 'in':
             # recursive call with operator '='
@@ -1179,6 +1188,12 @@ class AccountMoveLine(models.Model):
             and not line.product_id.taxes_id.filtered(lambda tax: tax.company_id == line.company_id)
         ))
 
+    def _inverse_reconciled_lines_ids(self):
+        self._reconcile_plan([
+            line + line.reconciled_lines_ids
+            for line in self
+        ])
+
     # -------------------------------------------------------------------------
     # CONSTRAINT METHODS
     # -------------------------------------------------------------------------
@@ -2620,6 +2635,7 @@ class AccountMoveLine(models.Model):
                     'currency_id': line.currency_id.id,
                     'partner_id': line.partner_id.id,
                     'sequence': sequence,
+                    'reconciled_lines_ids': [Command.set(line.ids)],
                 },
                 {
                     'name': _('Currency exchange rate difference'),
@@ -2682,16 +2698,8 @@ class AccountMoveLine(models.Model):
                 ))
 
         # ==== Create the moves ====
-        exchange_moves = self.env['account.move'].create(exchange_move_values_list)
-
-        # ==== Reconcile ====
-        reconciliation_plan = []
-        for exchange_move, exchange_diff_values in zip(exchange_moves, exchange_diff_values_list):
-            for source_line, sequence in exchange_diff_values['to_reconcile']:
-                exchange_diff_line = exchange_move.line_ids[sequence]
-                reconciliation_plan.append((source_line + exchange_diff_line))
-
-        self.with_context(no_exchange_difference=True)._reconcile_plan(reconciliation_plan)
+        exchange_moves = self.env['account.move'].with_context(no_exchange_difference=True).create(exchange_move_values_list)
+        # The reconciliation of exchange moves is now dealt thanks to the reconciled_lines_ids field
 
         # ==== See if the exchange moves need to be posted or not ====
         exchange_moves_to_post = self.env['account.move']
@@ -3045,6 +3053,24 @@ class AccountMoveLine(models.Model):
     def _check_edi_line_tax_required(self):
         return self.product_id.type != 'combo'
 
+    def _get_aml_values(self, **kwargs):
+        self.ensure_one()
+        return {
+            'name': self.name,
+            'account_id': self.account_id.id,
+            'currency_id': self.currency_id.id,
+            'amount_currency': self.amount_currency,
+            'balance': self.balance,
+            'reconcile_model_id': self.reconcile_model_id.id,
+            'analytic_distribution': self.analytic_distribution,
+            'tax_repartition_line_id': self.tax_repartition_line_id.id,
+            'tax_ids': [Command.set(self.tax_ids.ids)],
+            'tax_tag_ids': [Command.set(self.tax_tag_ids.ids)],
+            'group_tax_id': self.group_tax_id.id,
+            'partner_id': self.partner_id.id,
+            **kwargs,
+        }
+
     # -------------------------------------------------------------------------
     # PUBLIC ACTIONS
     # -------------------------------------------------------------------------

--- a/addons/account/models/account_reconcile_model.py
+++ b/addons/account/models/account_reconcile_model.py
@@ -2,35 +2,7 @@
 import re
 
 from odoo import api, fields, models, _
-from odoo.exceptions import UserError, ValidationError
-
-
-class AccountReconcileModelPartnerMapping(models.Model):
-    _name = 'account.reconcile.model.partner.mapping'
-    _description = 'Partner mapping for reconciliation models'
-    _check_company_auto = True
-
-    model_id = fields.Many2one(comodel_name='account.reconcile.model', readonly=True, required=True, index=True, ondelete='cascade')
-    company_id = fields.Many2one(related='model_id.company_id')
-    partner_id = fields.Many2one(comodel_name='res.partner', string="Partner", required=True, ondelete='cascade', check_company=True)
-    payment_ref_regex = fields.Char(string="Find Text in Label")
-    narration_regex = fields.Char(string="Find Text in Notes")
-
-    @api.constrains('narration_regex', 'payment_ref_regex')
-    def validate_regex(self):
-        for record in self:
-            if not (record.narration_regex or record.payment_ref_regex):
-                raise ValidationError(_("Please set at least one of the match texts to create a partner mapping."))
-            current_regex = None
-            try:
-                if record.payment_ref_regex:
-                    current_regex = record.payment_ref_regex
-                    re.compile(record.payment_ref_regex)
-                if record.narration_regex:
-                    current_regex = record.narration_regex
-                    re.compile(record.narration_regex)
-            except re.error:
-                raise ValidationError(_("The following regular expression is invalid to create a partner mapping: %s", current_regex))
+from odoo.exceptions import UserError
 
 
 class AccountReconcileModelLine(models.Model):
@@ -41,19 +13,15 @@ class AccountReconcileModelLine(models.Model):
     _check_company_auto = True
 
     model_id = fields.Many2one('account.reconcile.model', readonly=True, index='btree_not_null', ondelete='cascade')
-    allow_payment_tolerance = fields.Boolean(related='model_id.allow_payment_tolerance')
-    payment_tolerance_param = fields.Float(related='model_id.payment_tolerance_param')
-    rule_type = fields.Selection(related='model_id.rule_type')
     company_id = fields.Many2one(related='model_id.company_id', store=True)
     sequence = fields.Integer(required=True, default=10)
     account_id = fields.Many2one('account.account', string='Account', ondelete='cascade',
         domain="[('deprecated', '=', False), ('account_type', '!=', 'off_balance')]", check_company=True)
-
-    # This field is ignored in a bank statement reconciliation.
-    journal_id = fields.Many2one(
-        related='model_id.journal_id',
+    partner_id = fields.Many2one(
+        comodel_name='res.partner',
+        string='Partner',
     )
-    label = fields.Char(string='Journal Item Label', translate=True)
+    label = fields.Char(string='Label', translate=True)
     amount_type = fields.Selection(
         selection=[
             ('fixed', 'Fixed'),
@@ -63,12 +31,8 @@ class AccountReconcileModelLine(models.Model):
             ('from_transaction_details', 'From Transaction Details'),
         ],
         required=True,
-        store=True,
-        precompute=True,
-        compute='_compute_amount_type',
-        readonly=False,
+        default='percentage',
     )
-
     # technical shortcut to parse the amount to a float
     amount = fields.Float(string="Float Amount", compute='_compute_float_amount', store=True)
     amount_string = fields.Char(string="Amount", default='100', required=True, help="""Value for the amount of the writeoff line
@@ -80,9 +44,6 @@ class AccountReconcileModelLine(models.Model):
         string="Taxes",
         ondelete='restrict',
         check_company=True,
-        compute='_compute_tax_ids',
-        readonly=False,
-        store=True,
     )
 
     @api.onchange('amount_type')
@@ -101,29 +62,6 @@ class AccountReconcileModelLine(models.Model):
             except ValueError:
                 record.amount = 0
 
-    @api.depends('rule_type', 'model_id.counterpart_type')
-    def _compute_amount_type(self):
-        for line in self:
-            if line.rule_type == 'writeoff_button' and line.model_id.counterpart_type in ('sale', 'purchase'):
-                line.amount_type = line.amount_type or 'percentage_st_line'
-            else:
-                line.amount_type = line.amount_type or 'percentage'
-
-    @api.depends('model_id.counterpart_type', 'rule_type', 'account_id', 'company_id', 'company_id.account_purchase_tax_id')
-    def _compute_tax_ids(self):
-        for line in self:
-            if line.rule_type == 'writeoff_button' and line.model_id.counterpart_type in ('sale', 'purchase'):
-                line.tax_ids = line.tax_ids.filtered(lambda x: x.type_tax_use == line.model_id.counterpart_type)
-                if not line.tax_ids:
-                    line.tax_ids = line.account_id.tax_ids.filtered(lambda x: x.type_tax_use == line.model_id.counterpart_type)
-                if not line.tax_ids:
-                    if line.model_id.counterpart_type == 'purchase' and line.company_id.account_purchase_tax_id:
-                        line.tax_ids = line.company_id.account_purchase_tax_id
-                    elif line.model_id.counterpart_type == 'sale' and line.company_id.account_sale_tax_id:
-                        line.tax_ids = line.company_id.account_sale_tax_id
-            else:
-                line.tax_ids = line.tax_ids
-
     @api.constrains('amount_string')
     def _validate_amount(self):
         for record in self:
@@ -160,59 +98,24 @@ class AccountReconcileModel(models.Model):
         comodel_name='res.company',
         string='Company', required=True, readonly=True,
         default=lambda self: self.env.company)
-    rule_type = fields.Selection(selection=[
-        ('writeoff_button', 'Button to generate counterpart entry'),
-        ('writeoff_suggestion', 'Rule to suggest counterpart entry'),
-        ('invoice_matching', 'Match invoices & payments'),
-    ], string='Type', default='writeoff_button', required=True, tracking=True)
-    auto_reconcile = fields.Boolean(string='Auto-validate', tracking=True,
+
+    trigger = fields.Selection([('manual', 'Manual'), ('auto_reconcile', 'Automated')], default='manual', required=True, tracking=True,
         help='Validate the statement line automatically (reconciliation based on your rule).')
-    to_check = fields.Boolean(string='To Check', default=False, help='This matching rule is used when the user is not certain of all the information of the counterpart.')
-    matching_order = fields.Selection(
-        selection=[
-            ('old_first', 'Oldest first'),
-            ('new_first', 'Newest first'),
-        ],
-        required=True,
-        default='old_first',
-        tracking=True,
-    )
-    counterpart_type = fields.Selection(
-        selection=[
-            ('general', 'Journal Entry'),
-            ('sale', 'Customer Invoices'),
-            ('purchase', 'Vendor Bills'),
-        ],
-        string="Counterpart Type",
-        default='general',
-    )
-    journal_id = fields.Many2one(
-        comodel_name='account.journal',
-        string="Journal",
-        help="The journal in which the counterpart entry will be created.",
-        check_company=True,
-        store=True,
-        readonly=False,
-        compute='_compute_journal_id',
-    )
+    next_activity_type_id = fields.Many2one(
+        comodel_name='mail.activity.type',
+        string='Next Activity')
 
     # ===== Conditions =====
-    match_text_location_label = fields.Boolean(
-        default=True,
-        help="Search in the Statement's Label to find the Invoice/Payment's reference",
-        tracking=True,
-    )
-    match_text_location_note = fields.Boolean(
-        default=False,
-        help="Search in the Statement's Note to find the Invoice/Payment's reference",
-        tracking=True,
+    can_be_proposed = fields.Boolean(
+        compute='_compute_can_be_proposed', store=True,
+        copy=False,
     )
-    match_text_location_reference = fields.Boolean(
-        default=False,
-        help="Search in the Statement's Reference to find the Invoice/Payment's reference",
-        tracking=True,
+    mapped_partner_id = fields.Many2one(
+        comodel_name='res.partner',
+        compute='_compute_partner_mapping', store=True,
+        copy=False,
     )
-    match_journal_ids = fields.Many2many('account.journal', string='Journals Availability',
+    match_journal_ids = fields.Many2many('account.journal', string='Journals',
         domain="[('type', 'in', ('bank', 'cash', 'credit'))]",
         check_company=True,
         help='The reconciliation model will only be available from the selected journals.')
@@ -228,81 +131,32 @@ class AccountReconcileModel(models.Model):
         ('contains', 'Contains'),
         ('not_contains', 'Not Contains'),
         ('match_regex', 'Match Regex'),
-    ], string='Label', tracking=True, help='''The reconciliation model will only be applied when the label:
-        * Contains: The proposition label must contains this string (case insensitive).
+    ], string='Label', tracking=True, help='''The reconciliation model will only be applied when either the statement line label or transaction details matches the following:
+        * Contains: The statement line must contains this string (case insensitive).
         * Not Contains: Negation of "Contains".
         * Match Regex: Define your own regular expression.''')
     match_label_param = fields.Char(string='Label Parameter', tracking=True)
-    match_transaction_details = fields.Selection(selection=[
-        ('contains', 'Contains'),
-        ('not_contains', 'Not Contains'),
-        ('match_regex', 'Match Regex'),
-    ], string='Transaction details', tracking=True, help='''The reconciliation model will only be applied when the transaction details:
-            * Contains: The proposition label must contains this string (case insensitive).
-            * Not Contains: Negation of "Contains".
-            * Match Regex: Define your own regular expression. (Care that it's a jsonfield)''')
-    match_transaction_details_param = fields.Char(string='Transaction Details Parameter', tracking=True)
-    match_note = fields.Selection(selection=[
-        ('contains', 'Contains'),
-        ('not_contains', 'Not Contains'),
-        ('match_regex', 'Match Regex'),
-    ], string='Note', tracking=True, help='''The reconciliation model will only be applied when the note:
-        * Contains: The proposition note must contains this string (case insensitive).
-        * Not Contains: Negation of "Contains".
-        * Match Regex: Define your own regular expression.''')
-    match_note_param = fields.Char(string='Note Parameter', tracking=True)
-    match_same_currency = fields.Boolean(string='Same Currency', default=True, tracking=True,
-        help='Restrict to propositions having the same currency as the statement line.')
-    allow_payment_tolerance = fields.Boolean(
-        string="Payment Tolerance",
-        default=True,
-        tracking=True,
-        help="Difference accepted in case of underpayment.",
-    )
-    payment_tolerance_param = fields.Float(
-        string="Gap",
-        compute='_compute_payment_tolerance_param',
-        readonly=False,
-        store=True,
-        tracking=True,
-        help="The sum of total residual amount propositions matches the statement line amount under this amount/percentage.",
-    )
-    payment_tolerance_type = fields.Selection(
-        selection=[('percentage', "in percentage"), ('fixed_amount', "in amount")],
-        default='percentage',
-        required=True,
-        tracking=True,
-        help="The sum of total residual amount propositions and the statement line amount allowed gap type.",
-    )
-    match_partner = fields.Boolean(string='Partner is Set', tracking=True,
-        help='The reconciliation model will only be applied when a customer/vendor is set.')
     match_partner_ids = fields.Many2many('res.partner', string='Partners',
         help='The reconciliation model will only be applied to the selected customers/vendors.')
-    match_partner_category_ids = fields.Many2many('res.partner.category', string='Categories',
-        help='The reconciliation model will only be applied to the selected customer/vendor categories.')
 
     line_ids = fields.One2many('account.reconcile.model.line', 'model_id', copy=True)
-    partner_mapping_line_ids = fields.One2many(string="Partner Mapping Lines",
-                                               comodel_name='account.reconcile.model.partner.mapping',
-                                               inverse_name='model_id',
-                                               help="The mapping uses regular expressions.\n"
-                                                    "- To Match the text at the beginning of the line (in label or notes), simply fill in your text.\n"
-                                                    "- To Match the text anywhere (in label or notes), put your text between .*\n"
-                                                    "  e.g: .*N°48748 abc123.*")
-    past_months_limit = fields.Integer(
-        string="Search Months Limit",
-        default=18,
-        tracking=True,
-        help="Number of months in the past to consider entries from when applying this model.",
-    )
-    decimal_separator = fields.Char(
-        default=lambda self: self.env['res.lang']._get_data(code=self.env.user.lang).decimal_point,
-        tracking=True,
-        help="Every character that is nor a digit nor this separator will be removed from the matching string",
-    )
-    # used to decide if we should show the decimal separator for the regex matching field
-    show_decimal_separator = fields.Boolean(compute='_compute_show_decimal_separator')
-    number_entries = fields.Integer(string='Number of entries related to this model', compute='_compute_number_entries')
+
+    @api.depends('mapped_partner_id', 'match_label', 'match_partner_ids', 'trigger')
+    def _compute_can_be_proposed(self):
+        for model in self:
+            model.can_be_proposed = not model.mapped_partner_id and (model.match_label or model.match_partner_ids or model.trigger == 'auto_reconcile')
+
+    @api.depends('match_label', 'line_ids.partner_id', 'line_ids.account_id')
+    def _compute_partner_mapping(self):
+        for model in self:
+            is_partner_mapping = model.match_label and len(model.line_ids) == 1 and model.line_ids[0].partner_id and not model.line_ids[0].account_id
+            model.mapped_partner_id = is_partner_mapping and model.line_ids[0].partner_id.id
+
+    def action_set_manual(self):
+        self.trigger = 'manual'
+
+    def action_set_auto_reconcile(self):
+        self.trigger = 'auto_reconcile'
 
     def action_reconcile_stat(self):
         self.ensure_one()
@@ -319,42 +173,6 @@ class AccountReconcileModel(models.Model):
         })
         return action
 
-    def _compute_number_entries(self):
-        data = self.env['account.move.line']._read_group([('reconcile_model_id', 'in', self.ids)], ['reconcile_model_id'], ['__count'])
-        mapped_data = {reconcile_model.id: count for reconcile_model, count in data}
-        for model in self:
-            model.number_entries = mapped_data.get(model.id, 0)
-
-    @api.depends('line_ids.amount_type')
-    def _compute_show_decimal_separator(self):
-        for record in self:
-            record.show_decimal_separator = any(l.amount_type in {'regex', 'from_transaction_details'} for l in record.line_ids)
-
-    @api.depends('payment_tolerance_param', 'payment_tolerance_type')
-    def _compute_payment_tolerance_param(self):
-        for record in self:
-            if record.payment_tolerance_type == 'percentage':
-                record.payment_tolerance_param = min(100.0, max(0.0, record.payment_tolerance_param))
-            else:
-                record.payment_tolerance_param = max(0.0, record.payment_tolerance_param)
-
-    @api.depends('counterpart_type')
-    def _compute_journal_id(self):
-        for record in self:
-            if record.journal_id.type != record.counterpart_type:
-                record.journal_id = None
-            else:
-                record.journal_id = record.journal_id
-
-    @api.constrains('allow_payment_tolerance', 'payment_tolerance_param', 'payment_tolerance_type')
-    def _check_payment_tolerance_param(self):
-        for record in self:
-            if record.allow_payment_tolerance:
-                if record.payment_tolerance_type == 'percentage' and not 0 <= record.payment_tolerance_param <= 100:
-                    raise ValidationError(_("A payment tolerance defined as a percentage should always be between 0 and 100"))
-                elif record.payment_tolerance_type == 'fixed_amount' and record.payment_tolerance_param < 0:
-                    raise ValidationError(_("A payment tolerance defined as an amount should always be higher than 0"))
-
     def copy_data(self, default=None):
         default = dict(default or {})
         vals_list = super().copy_data(default)

--- a/addons/account/models/account_tax.py
+++ b/addons/account/models/account_tax.py
@@ -1390,7 +1390,7 @@ class AccountTax(models.Model):
         could be updated, the ones to be created and the ones to be deleted.
         We can't use directly an account.move.line because this is also used by
         - expense (to create the journal entry)
-        - the bank reconciliation widget (to generate the bank.rec.widget.line corresponding to tax lines)
+        - the bank reconciliation widget
         All fields in this list are the same as the corresponding fields defined in account.move.line.
 
         The mechanism is the same as '_prepare_base_line_for_taxes_computation'.

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -1097,41 +1097,8 @@ class AccountChartTemplate(models.AbstractModel):
     @template(model='account.reconcile.model')
     def _get_account_reconcile_model(self, template_code):
         return {
-            "reconcile_perfect_match": {
-                "name": _('Invoices/Bills Perfect Match'),
-                "sequence": 1,
-                "rule_type": 'invoice_matching',
-                "auto_reconcile": True,
-                "match_same_currency": True,
-                "allow_payment_tolerance": True,
-                "payment_tolerance_type": 'percentage',
-                "payment_tolerance_param": 0,
-                "match_partner": True,
-            },
-            "reconcile_partial_underpaid": {
-                "name": _('Invoices/Bills Partial Match if Underpaid'),
-                "sequence": 2,
-                "rule_type": 'invoice_matching',
-                "auto_reconcile": False,
-                "match_same_currency": True,
-                "allow_payment_tolerance": False,
-                "match_partner": True,
-            },
-            "reconcile_bill": {
-                "name": 'Create Bill',
-                "sequence": 5,
-                "rule_type": 'writeoff_button',
-                'counterpart_type': 'purchase',
-                'line_ids': [
-                    Command.create({
-                        'amount_type': 'percentage_st_line',
-                        'amount_string': '100',
-                    }),
-                ],
-            },
             'internal_transfer_reco': {
                 'name': _('Internal Transfers'),
-                'rule_type': 'writeoff_button',
                 'line_ids': [
                     Command.create({
                         'amount_type': 'percentage',
