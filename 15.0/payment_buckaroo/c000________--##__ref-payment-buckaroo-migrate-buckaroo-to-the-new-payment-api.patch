PR: https://github.com/odoo/odoo/pull/

From: 356c93a42dc5a7e5aa902fafa18cddea23dd16a6
From: Barad Mahendrasinh
Date: 2021-03-30 07:25:51

Breaking data model changes scores: del:4 + add:0, change matches:
-    _inherit = 'payment.acquirer'
-    brq_websitekey = fields.Char('WebsiteKey', required_if_provider='buckaroo', groups='base.group_user')
-    brq_secretkey = fields.Char('SecretKey', required_if_provider='buckaroo', groups='base.group_user')
-    _inherit = 'payment.transaction'

Total Changes: 406

[REF] payment_buckaroo: migrate Buckaroo to the new payment API

See the merge commit for more details.

task-2333032

================================= pseudo patch: =================================

--- a/addons/payment_buckaroo/models/__init__.py
+++ b/addons/payment_buckaroo/models/__init__.py
@@ -1,3 +1,4 @@
-# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment
+from . import payment_acquirer
+from . import payment_transaction

--- a/addons/payment_buckaroo/models/payment.py
+++ b/None
@@ -1,192 +0,0 @@
-# coding: utf-8
-from hashlib import sha1
-import logging
-
-from werkzeug import urls
-
-from odoo import api, fields, models, _
-from odoo.addons.payment.models.payment_acquirer import ValidationError
-from odoo.addons.payment_buckaroo.controllers.main import BuckarooController
-
-from odoo.tools.float_utils import float_compare
-
-_logger = logging.getLogger(__name__)
-
-
-def normalize_keys_upper(data):
-    """Set all keys of a dictionnary to uppercase
-
-    Buckaroo parameters names are case insensitive
-    convert everything to upper case to be able to easily detected the presence
-    of a parameter by checking the uppercase key only
-    """
-    return {key.upper(): val for key, val in data.items()}
-
-
-class AcquirerBuckaroo(models.Model):
-    _inherit = 'payment.acquirer'
-
-    provider = fields.Selection(selection_add=[
-        ('buckaroo', 'Buckaroo')
-    ], ondelete={'buckaroo': 'set default'})
-    brq_websitekey = fields.Char('WebsiteKey', required_if_provider='buckaroo', groups='base.group_user')
-    brq_secretkey = fields.Char('SecretKey', required_if_provider='buckaroo', groups='base.group_user')
-
-    def _get_buckaroo_urls(self, environment):
-        """ Buckaroo URLs
-        """
-        if environment == 'prod':
-            return {
-                'buckaroo_form_url': 'https://checkout.buckaroo.nl/html/',
-            }
-        else:
-            return {
-                'buckaroo_form_url': 'https://testcheckout.buckaroo.nl/html/',
-            }
-
-    def _buckaroo_generate_digital_sign(self, inout, values):
-        """ Generate the shasign for incoming or outgoing communications.
-
-        :param browse acquirer: the payment.acquirer browse record. It should
-                                have a shakey in shaky out
-        :param string inout: 'in' (odoo contacting buckaroo) or 'out' (buckaroo
-                             contacting odoo).
-        :param dict values: transaction values
-
-        :return string: shasign
-        """
-        assert inout in ('in', 'out')
-        assert self.provider == 'buckaroo'
-
-        keys = "add_returndata Brq_amount Brq_culture Brq_currency Brq_invoicenumber Brq_return Brq_returncancel Brq_returnerror Brq_returnreject brq_test Brq_websitekey".split()
-
-        def get_value(key):
-            if values.get(key):
-                return values[key]
-            return ''
-
-        values = dict(values or {})
-
-        if inout == 'out':
-            for key in list(values):
-                # case insensitive keys
-                if key.upper() == 'BRQ_SIGNATURE':
-                    del values[key]
-                    break
-
-            items = sorted(values.items(), key=lambda pair: pair[0].lower())
-            sign = ''.join('%s=%s' % (k, urls.url_unquote_plus(v)) for k, v in items)
-        else:
-            sign = ''.join('%s=%s' % (k, get_value(k)) for k in keys)
-        # Add the pre-shared secret key at the end of the signature
-        sign = sign + self.brq_secretkey
-        shasign = sha1(sign.encode('utf-8')).hexdigest()
-        return shasign
-
-    def buckaroo_form_generate_values(self, values):
-        base_url = self.get_base_url()
-        buckaroo_tx_values = dict(values)
-        buckaroo_tx_values.update({
-            'Brq_websitekey': self.brq_websitekey,
-            'Brq_amount': values['amount'],
-            'Brq_currency': values['currency'] and values['currency'].name or '',
-            'Brq_invoicenumber': values['reference'],
-            'brq_test': True if self.state == 'test' else False,
-            'Brq_return': urls.url_join(base_url, BuckarooController._return_url),
-            'Brq_returncancel': urls.url_join(base_url, BuckarooController._cancel_url),
-            'Brq_returnerror': urls.url_join(base_url, BuckarooController._exception_url),
-            'Brq_returnreject': urls.url_join(base_url, BuckarooController._reject_url),
-            'Brq_culture': (values.get('partner_lang') or 'en_US').replace('_', '-'),
-            'add_returndata': buckaroo_tx_values.pop('return_url', '') or '',
-        })
-        buckaroo_tx_values['Brq_signature'] = self._buckaroo_generate_digital_sign('in', buckaroo_tx_values)
-        return buckaroo_tx_values
-
-    def buckaroo_get_form_action_url(self):
-        self.ensure_one()
-        environment = 'prod' if self.state == 'enabled' else 'test'
-        return self._get_buckaroo_urls(environment)['buckaroo_form_url']
-
-
-class TxBuckaroo(models.Model):
-    _inherit = 'payment.transaction'
-
-    # buckaroo status
-    _buckaroo_valid_tx_status = [190]
-    _buckaroo_pending_tx_status = [790, 791, 792, 793]
-    _buckaroo_cancel_tx_status = [890, 891]
-    _buckaroo_error_tx_status = [490, 491, 492]
-    _buckaroo_reject_tx_status = [690]
-
-    # --------------------------------------------------
-    # FORM RELATED METHODS
-    # --------------------------------------------------
-
-    @api.model
-    def _buckaroo_form_get_tx_from_data(self, data):
-        """ Given a data dict coming from buckaroo, verify it and find the related
-        transaction record. """
-        origin_data = dict(data)
-        data = normalize_keys_upper(data)
-        reference, pay_id, shasign = data.get('BRQ_INVOICENUMBER'), data.get('BRQ_PAYMENT'), data.get('BRQ_SIGNATURE')
-        if not reference or not pay_id or not shasign:
-            error_msg = _('Buckaroo: received data with missing reference (%s) or pay_id (%s) or shasign (%s)') % (reference, pay_id, shasign)
-            _logger.info(error_msg)
-            raise ValidationError(error_msg)
-
-        tx = self.search([('reference', '=', reference)])
-        if not tx or len(tx) > 1:
-            error_msg = _('Buckaroo: received data for reference %s') % (reference)
-            if not tx:
-                error_msg += _('; no order found')
-            else:
-                error_msg += _('; multiple order found')
-            _logger.info(error_msg)
-            raise ValidationError(error_msg)
-
-        # verify shasign
-        shasign_check = tx.acquirer_id._buckaroo_generate_digital_sign('out', origin_data)
-        if shasign_check.upper() != shasign.upper():
-            error_msg = _('Buckaroo: invalid shasign, received %s, computed %s, for data %s') % (shasign, shasign_check, data)
-            _logger.info(error_msg)
-            raise ValidationError(error_msg)
-
-        return tx
-
-    def _buckaroo_form_get_invalid_parameters(self, data):
-        invalid_parameters = []
-        data = normalize_keys_upper(data)
-        if self.acquirer_reference and data.get('BRQ_TRANSACTIONS') != self.acquirer_reference:
-            invalid_parameters.append(('Transaction Id', data.get('BRQ_TRANSACTIONS'), self.acquirer_reference))
-        # check what is buyed
-        if float_compare(float(data.get('BRQ_AMOUNT', '0.0')), self.amount, 2) != 0:
-            invalid_parameters.append(('Amount', data.get('BRQ_AMOUNT'), '%.2f' % self.amount))
-        if data.get('BRQ_CURRENCY') != self.currency_id.name:
-            invalid_parameters.append(('Currency', data.get('BRQ_CURRENCY'), self.currency_id.name))
-
-        return invalid_parameters
-
-    def _buckaroo_form_validate(self, data):
-        data = normalize_keys_upper(data)
-        status_code = int(data.get('BRQ_STATUSCODE', '0'))
-        if status_code in self._buckaroo_valid_tx_status:
-            self.write({'acquirer_reference': data.get('BRQ_TRANSACTIONS')})
-            self._set_transaction_done()
-            return True
-        elif status_code in self._buckaroo_pending_tx_status:
-            self.write({'acquirer_reference': data.get('BRQ_TRANSACTIONS')})
-            self._set_transaction_pending()
-            return True
-        elif status_code in self._buckaroo_cancel_tx_status:
-            self.write({'acquirer_reference': data.get('BRQ_TRANSACTIONS')})
-            self._set_transaction_cancel()
-            return True
-        else:
-            error = 'Buckaroo: feedback error'
-            _logger.info(error)
-            self.write({
-                'state_message': error,
-                'acquirer_reference': data.get('BRQ_TRANSACTIONS'),
-            })
-            self._set_transaction_cancel()
-            return False

--- a/None
+++ b/addons/payment_buckaroo/models/payment_acquirer.py
@@ -0,0 +1,65 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from hashlib import sha1
+
+from werkzeug import urls
+
+from odoo import fields, models
+
+
+class PaymentAcquirer(models.Model):
+    _inherit = 'payment.acquirer'
+
+    provider = fields.Selection(
+        selection_add=[('buckaroo', "Buckaroo")], ondelete={'buckaroo': 'set default'})
+    buckaroo_website_key = fields.Char(
+        string="Website Key", help="The key solely used to identify the website with Buckaroo",
+        required_if_provider='buckaroo')
+    buckaroo_secret_key = fields.Char(
+        string="Buckaroo Secret Key", required_if_provider='buckaroo', groups='base.group_system')
+
+    def _buckaroo_get_api_url(self):
+        """ Return the API URL according to the state.
+
+        Note: self.ensure_one()
+
+        :return: The API URL
+        :rtype: str
+        """
+        self.ensure_one()
+        if self.state == 'enabled':
+            return 'https://checkout.buckaroo.nl/html/'
+        else:
+            return 'https://testcheckout.buckaroo.nl/html/'
+
+    def _buckaroo_generate_digital_sign(self, values, incoming=True):
+        """ Generate the shasign for incoming or outgoing communications.
+
+        :param dict values: The values used to generate the signature
+        :param bool incoming: Whether the signature must be generate for an incoming (Buckaroo to
+                              Odoo) or outgoing (Odoo to Buckaroo) communication.
+        :return: The shasign
+        :rtype: str
+        """
+        if incoming:
+            # Remove the signature from the values used to check the signature
+            for key in values.keys():
+                if key.upper() == 'BRQ_SIGNATURE':  # Keys are case-insensitive
+                    del values[key]
+                    break
+            # Incoming communication values must be URL-decoded before checking the signature
+            items = [(k, urls.url_unquote_plus(v)) for k, v in values.items()]
+        else:
+            # Only use items whose key starts with 'add_', 'brq_', or 'cust_' (case insensitive)
+            items = [
+                (k, v) for k, v in values.items()
+                if any(k.upper().startswith(key_prefix) for key_prefix in ('ADD_', 'BRQ_', 'CUST_'))
+            ]
+        # Sort parameters by upper-cased key name
+        sorted_items = sorted(items, key=lambda pair: pair[0].upper())
+        # Build the signing string by concatenating all parameters
+        sign_string = ''.join(f'{k}={v or ""}' for k, v in sorted_items)
+        # Append the pre-shared secret key to the signing string
+        sign_string += self.buckaroo_secret_key
+        # Calculate the SHA-1 hash over the signing string
+        return sha1(sign_string.encode('utf-8')).hexdigest()

--- a/None
+++ b/addons/payment_buckaroo/models/payment_transaction.py
@@ -0,0 +1,144 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import logging
+
+from werkzeug import urls
+
+from odoo import _, api, models
+from odoo.exceptions import ValidationError
+
+from odoo.addons.payment_buckaroo.controllers.main import BuckarooController
+
+_logger = logging.getLogger(__name__)
+
+
+def _normalize_dataset(data):
+    """ Set all keys of a dictionary to uppercase.
+
+    As Buckaroo parameters names are case insensitive, we can convert everything to upper case to
+    easily detected the presence of a parameter by checking the uppercase key only.
+
+    :param dict data: The dictionary whose keys must be set to uppercase
+    :return: A copy of the original data with all keys set to uppercase
+    :rtype: dict
+    """
+    return {key.upper(): val for key, val in data.items()}
+
+
+class PaymentTransaction(models.Model):
+    _inherit = 'payment.transaction'
+
+    # Buckaroo status codes
+    _pending_tx_status = [790, 791, 792, 793]
+    _valid_tx_status = [190]
+    _cancel_tx_status = [890, 891]
+
+    def _get_specific_rendering_values(self, processing_values):
+        """ Override of payment to return Buckaroo-specific rendering values.
+
+        Note: self.ensure_one() from `_get_processing_values`
+
+        :param dict processing_values: The generic and specific processing values of the transaction
+        :return: The dict of acquirer-specific processing values
+        :rtype: dict
+        """
+        res = super()._get_specific_rendering_values(processing_values)
+        if self.provider != 'buckaroo':
+            return res
+
+        return_url = urls.url_join(self.acquirer_id._get_base_url(), BuckarooController._return_url)
+        rendering_values = {
+            'api_url': self.acquirer_id._buckaroo_get_api_url(),
+            'Brq_websitekey': self.acquirer_id.buckaroo_website_key,
+            'Brq_amount': self.amount,
+            'Brq_currency': self.currency_id.name,
+            'Brq_invoicenumber': self.reference,
+            # Include all 4 URL keys despite they share the same value as they are part of the sig.
+            'Brq_return': return_url,
+            'Brq_returncancel': return_url,
+            'Brq_returnerror': return_url,
+            'Brq_returnreject': return_url,
+        }
+        if self.partner_lang:
+            rendering_values['Brq_culture'] = self.partner_lang.replace('_', '-')
+        rendering_values['Brq_signature'] = self.acquirer_id._buckaroo_generate_digital_sign(
+            rendering_values, incoming=False
+        )
+        return rendering_values
+
+    @api.model
+    def _get_tx_from_feedback_data(self, provider, data):
+        """ Override of payment to find the transaction based on Buckaroo data.
+
+        :param str provider: The provider of the acquirer that handled the transaction
+        :param dict data: The feedback data sent by the provider
+        :return: The transaction if found
+        :rtype: recordset of `payment.transaction`
+        :raise: ValidationError if inconsistent data were received
+        :raise: ValidationError if the data match no transaction
+        :raise: ValidationError if the signature can not be verified
+        """
+        tx = super()._get_tx_from_feedback_data(provider, data)
+        if provider != 'buckaroo':
+            return tx
+
+        normalized_data = _normalize_dataset(data)
+        reference = normalized_data.get('BRQ_INVOICENUMBER')
+        shasign = normalized_data.get('BRQ_SIGNATURE')
+        if not reference or not shasign:
+            raise ValidationError(
+                "Buckaroo: " + _(
+                    "Received data with missing reference (%(ref)s) or shasign (%(sign))",
+                    ref=reference, sign=shasign
+                )
+            )
+
+        tx = self.search([('reference', '=', reference), ('provider', '=', 'buckaroo')])
+        if not tx:
+            raise ValidationError(
+                "Buckaroo: " + _("No transaction found matching reference %s.", reference)
+            )
+
+        # Verify signature
+        shasign_check = tx.acquirer_id._buckaroo_generate_digital_sign(data, incoming=True)
+        if shasign_check != shasign:
+            raise ValidationError(
+                "Buckaroo: " + _(
+                    "Invalid shasign: received %(sign)s, computed %(check)s",
+                    sign=shasign, check=shasign_check
+                )
+            )
+
+        return tx
+
+    def _process_feedback_data(self, data):
+        """ Override of payment to process the transaction based on Buckaroo data.
+
+        Note: self.ensure_one()
+
+        :param dict data: The feedback data sent by the provider
+        :return: None
+        :raise: ValidationError if inconsistent data were received
+        """
+        super()._process_feedback_data(data)
+        if self.provider != 'buckaroo':
+            return
+
+        normalized_data = _normalize_dataset(data)
+        transaction_keys = normalized_data.get('BRQ_TRANSACTIONS')
+        if not transaction_keys:
+            raise ValidationError("Buckaroo: " + _("Received data with missing transaction keys"))
+        # BRQ_TRANSACTIONS can hold multiple, comma-separated, tx keys. In practice, it holds only
+        # one reference. So we split for semantic correctness and keep the first transaction key.
+        self.acquirer_reference = transaction_keys.split(',')[0]
+
+        status_code = int(normalized_data.get('BRQ_STATUSCODE') or 0)
+        if status_code in self._pending_tx_status:
+            self._set_pending()
+        elif status_code in self._valid_tx_status:
+            self._set_done()
+        elif status_code in self._cancel_tx_status:
+            self._set_canceled()
+        else:
+            _logger.warning("Buckaroo: received unknown status code: %s", status_code)
+            self._set_error("Buckaroo: " + _("Unknown status code: %s", status_code))
