PR: https://github.com/odoo/odoo/pull/87857

From: d348bed1ad9d3d16b295f013f015706be6c07820
From: Romain Derie
Date: 2022-06-07 14:31:20

Structural Changes: 8
Total Changes: 364

[IMP] website, *: use upsert to improve visitor perf

* im_livechat, test_event_full, website_blog, website_crm,
  website_event, website_event_track, website_event_track_quiz,
  webite_livechat, website_sale

There is 6 main changes in this commit:

1. Using raw SQL Upsert instead of the ORM methods. While raw SQL should
generally be avoided, it makes sense for such a low level behavior which
is impacting every flows.
Indeed, tracking visitors is a generic behavior done on all pages and
controllers. It is important to optimize it to reduce processing time
and SQL Queries.
Benchmark of that change alone:
> Rendering a tracked page improves from ~19.5ms to ~17ms (using `ab`
  with 1000 loop) and the requests involved in the tracking process are
  reduced from 8 SQL Queries to 3:
  - 1 request to upsert the visitor
  - 1 request to fetch the visitor data
  - 1 request to add the tracking record

2. Adding in that upsert query the `visitor.track` insert, creating both
records in one go, bringing the query count from 3 to 2.

3. Refactoring of the `parent_id` behavior that was introduced in stable
with [1]. The purpose was to keep track of multiple visitor linked to a
same user to merge the tracking together. Especially useful for tracking
a same visitor on different devices (when logged in).
Only one visitor was kept as active, others would be archived and their
tracks would be set/moved to the main partner.
Removing those duplicate visitor was not possible because those archived
duplicated visitor were holding the devices notification push token.
Since [2], those token were moved to their own table, all related to the
main visitor.
We can then now safely remove those duplicate visitors after merging
their track to the main visitor. Thus, the `parent_id` field is no more
useful. Removing it removes a layer of complexity.
Note that thanks to this part, the `active` field can also be removed.

4. Deeper functionnal change, inspired from Plausible: The access_token
is no more stored in a cookie but is the result of a hashing method
based on <IP Adress, User Agent>.
The reason behind that change is that, in an upcoming refactoring,
sessions won't be stored anymore unless absolutely needed (login, add to
cart..). It will also ship a no cookies policy, trying to get rid of all
cookies.
This change is bringing some functional changes:
- Since the IP is included in the hash to generate the token, it means
  that:
  A. If an anonymous user switch IP (eg from 4G to wifi), it is
     considered as a new visitor.
  B. If 2 anonymous users with the exact same user agent (same browser,
     same browser version, same exact os or phone) are on the same IP,
     those will be considered as the same visitor.
- Since the request host is not included in the hash, it means that
  visiting a DB from 2 differents URLs (domain and/or ip) on the same
  device and same browser will result in a shared visitor.
  It shouldn't imply any issue as this is A. not wrong and B. mostly
  used for tests.
As all this is only related to non logged in user, it shouldn't be a
real issue as anonymous visitors are not supposed to be meant to be
business critical, even if we use them for "a bit more" than simple
analytics data.

5. The access_token is now replaced by the partner_id once the user logs
in, so:
- We don't need to either search on the partner_id field or the
access_token field (depending if the user is logged in or not), we can
only use the access_token row/field to do both.
- On logout, everything works out of the box as the access_token will be
regenerated since there is no partner_id anymore.
- On login, if an access_token matches the user's partner_id, that
visitor is returned.
If there is no such token, a new visitor is created for that partner_id.
In both 2 cases, tracks are moved to that visitor and the anonymous
visitor is removed.
- We can remove the code that was in charge of checking if the
access_token / visitor cookie was wrong (coming from another user eg,
different user login on same device). Indeed, such collision is not
possible anymore as the access_token automatically match the logged in
user.
- We can remove the code that was in charge of checking if the
access_token / visitor cookie was wrong (coming from a logged in user
while the current visitor is not loggedin). Such collision is not
possible anymore as the access_token is (re)generated as an anonymous
token (hash) when not logged in.

6. There is no more check to prevent a track to be created if there was
already a track for that URL in the last 30 minutes.
While this can easily be re-introduced (one CTE on the upsert), it was
adding ~100ms (from ~20 to ~110ms) to the request on a big database as
Odoo where there is ~100 millions tracks and ~100 millions visitors.
It has been validated that it was not a real issue as it is not
fundamentally wrong. If a visitor visited 20 times a product or a
specific page in that short amount of time, you might want to know that
because the user is most likely interested by it.

Changes (1+2), 3, (4+5) and 6 are all independant from each other and
could have existed on their own.

[1]: https://github.com/odoo/odoo/commit/c6b8a44b970a46dcd87a4e2cb1ad52fa340b209f
[2]: https://github.com/odoo/enterprise/pull/16781/commits/f75090fe8b42484e89e933976e8441d2f5eb9415

task-2867045

closes odoo/odoo#87857

Related: odoo/enterprise#28004
Related: odoo/upgrade#3566
Signed-off-by: Romain Derie (rde) <rde@odoo.com>

================================= pseudo patch: =================================

--- a/addons/website/models/ir_http.py
+++ b/addons/website/models/ir_http.py
@@ -148,7 +148,7 @@ class Http(models.AbstractModel):
 
         view = template and request.env['website'].get_template(template)
         if view and view.track:
-            request.env['website.visitor']._handle_webpage_dispatch(response, website_page)
+            request.env['website.visitor']._handle_webpage_dispatch(website_page)
 
         return False
 

--- a/addons/website/models/res_users.py
+++ b/addons/website/models/res_users.py
@@ -2,7 +2,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 import logging
 
-from odoo import api, fields, models, tools, _
+from odoo import api, fields, models, _
 from odoo.exceptions import ValidationError
 from odoo.http import request
 
@@ -69,32 +69,27 @@ class ResUsers(models.Model):
     @classmethod
     def authenticate(cls, db, login, password, user_agent_env):
         """ Override to link the logged in user's res.partner to website.visitor.
-        If both a request-based visitor and a user-based visitor exist we try
-        to update them (have same partner_id), and move sub records to the main
-        visitor (user one). Purpose is to try to keep a main visitor with as
-        much sub-records (tracked pages, leads, ...) as possible. """
+        If a visitor already exists for that user, assign it data from the
+        current anonymous visitor (if exists).
+        Purpose is to try to aggregate as much sub-records (tracked pages,
+        leads, ...) as possible. """
+        visitor_pre_authenticate_sudo = None
+        if request and request.env:
+            visitor_pre_authenticate_sudo = request.env['website.visitor']._get_visitor_from_request()
         uid = super(ResUsers, cls).authenticate(db, login, password, user_agent_env)
-        if uid:
+        if uid and visitor_pre_authenticate_sudo:
             with cls.pool.cursor() as cr:
                 env = api.Environment(cr, uid, {})
-                visitor_sudo = env['website.visitor']._get_visitor_from_request()
-                if visitor_sudo:
-                    user_partner = env.user.partner_id
-                    other_user_visitor_sudo = env['website.visitor'].with_context(active_test=False).sudo().search(
-                        [('partner_id', '=', user_partner.id), ('id', '!=', visitor_sudo.id)],
-                        order='last_connection_datetime DESC',
-                    )  # current 13.3 state: 1 result max as unique visitor / partner
-                    if other_user_visitor_sudo:
-                        visitor_main = other_user_visitor_sudo[0]
-                        other_visitors = other_user_visitor_sudo[1:]  # normally void
-                        (visitor_sudo + other_visitors)._link_to_visitor(visitor_main)
-                        visitor_main.name = user_partner.name
-                        visitor_main.active = True
-                        visitor_main._update_visitor_last_visit()
-                    else:
-                        if visitor_sudo.partner_id != user_partner:
-                            visitor_sudo._link_to_partner(
-                                user_partner,
-                                update_values={'partner_id': user_partner.id})
-                        visitor_sudo._update_visitor_last_visit()
+                user_partner = env.user.partner_id
+                visitor_current_user_sudo = env['website.visitor'].sudo().search([
+                    ('partner_id', '=', user_partner.id)
+                ], limit=1)
+                if visitor_current_user_sudo:
+                    # A visitor exists for the logged in user, link public
+                    # visitor records to it.
+                    visitor_pre_authenticate_sudo._merge_visitor(visitor_current_user_sudo)
+                    visitor_current_user_sudo._update_visitor_last_visit()
+                else:
+                    visitor_pre_authenticate_sudo.access_token = user_partner.id
+                    visitor_pre_authenticate_sudo._update_visitor_last_visit()
         return uid

--- a/addons/website/models/website_visitor.py
+++ b/addons/website/models/website_visitor.py
@@ -2,7 +2,9 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from datetime import datetime, timedelta
-import uuid
+from psycopg2 import sql
+
+import hashlib
 import pytz
 
 from odoo import fields, models, api, _
@@ -28,14 +30,29 @@ class WebsiteTrack(models.Model):
 class WebsiteVisitor(models.Model):
     _name = 'website.visitor'
     _description = 'Website Visitor'
-    _order = 'last_connection_datetime DESC'
+    _order = 'id DESC'
+
+    def _get_access_token(self):
+        """ Either the user's partner.id or a hash. """
+        if not request:
+            raise ValueError("Visitors can only be created through the frontend.")
 
-    name = fields.Char('Name')
-    access_token = fields.Char(required=True, default=lambda x: uuid.uuid4().hex, copy=False, groups='website.group_website_publisher')
-    active = fields.Boolean('Active', default=True)
+        if not self.env.user._is_public():
+            return self.env.user.partner_id.id
+
+        msg = repr((
+            request.httprequest.remote_addr,
+            request.httprequest.environ.get('HTTP_USER_AGENT'),
+            request.session.sid,
+        )).encode('utf-8')
+        # Keep same length (32) as before, it will ease the migration without
+        # any real downside
+        return hashlib.sha1(msg).hexdigest()[:32]
+
+    name = fields.Char('Name', related='partner_id.name')
+    access_token = fields.Char(required=True, default=_get_access_token, copy=False)
     website_id = fields.Many2one('website', "Website", readonly=True)
-    partner_id = fields.Many2one('res.partner', string="Contact", help="Partner of the last logged in user.", index='btree_not_null')
-    parent_id = fields.Many2one('website.visitor', string="Parent", ondelete='set null', index='btree_not_null', help="Main identity")
+    partner_id = fields.Many2one('res.partner', string="Contact", help="Partner of the last logged in user.", compute='_compute_partner_id', store=True, index='btree_not_null')
     partner_image = fields.Binary(related='partner_id.image_1920')
 
     # localisation and info
@@ -62,19 +79,27 @@ class WebsiteVisitor(models.Model):
 
     _sql_constraints = [
         ('access_token_unique', 'unique(access_token)', 'Access token should be unique.'),
-        ('partner_uniq', 'unique(partner_id)', 'A partner is linked to only one visitor.'),
     ]
 
-    @api.depends('name')
+    @api.depends('partner_id')
     def name_get(self):
         res = []
         for record in self:
             res.append((
                 record.id,
-                record.name or _('Website Visitor #%s', record.id)
+                record.partner_id.name or _('Website Visitor #%s', record.id)
             ))
         return res
 
+    @api.depends('access_token')
+    def _compute_partner_id(self):
+        # The browse in the loop is fine, there is no SQL Query on partner here
+        for visitor in self:
+            # If the access_token is not a 32 length hexa string, it means that
+            # the visitor is linked to a logged in user, in which case its
+            # partner_id is used instead as the token.
+            visitor.partner_id = len(visitor.access_token) != 32 and self.env['res.partner'].browse([visitor.access_token])
+
     @api.depends('partner_id.email_normalized', 'partner_id.mobile', 'partner_id.phone')
     def _compute_email_phone(self):
         results = self.env['res.partner'].search_read(
@@ -118,9 +143,10 @@ class WebsiteVisitor(models.Model):
 
     @api.depends('website_track_ids.page_id')
     def _compute_last_visited_page_id(self):
-        results = self.env['website.track']._read_group([('visitor_id', 'in', self.ids)],
-                                                       ['visitor_id', 'page_id', 'visit_datetime:max'],
-                                                       ['visitor_id', 'page_id'], lazy=False)
+        results = self.env['website.track']._read_group(
+            [('visitor_id', 'in', self.ids)],
+            ['visitor_id', 'page_id', 'visit_datetime:max'],
+            ['visitor_id', 'page_id'], lazy=False)
         mapped_data = {result['visitor_id'][0]: result['page_id'][0] for result in results if result['page_id']}
         for visitor in self:
             visitor.last_visited_page_id = mapped_data.get(visitor.id, False)
@@ -166,88 +192,115 @@ class WebsiteVisitor(models.Model):
             'context': compose_ctx,
         }
 
-    def _get_visitor_from_request(self, force_create=False):
-        """ Return the visitor as sudo from the request if there is a
-        visitor_uuid cookie.
+    def _upsert_visitor(self, access_token, force_track_values=None):
+        """ Based on the given `access_token`, either create or return the
+        related visitor if exists, through a single raw SQL UPSERT Query.
 
-        When fetching visitor, now that duplicates are linked to a main visitor
-        instead of unlinked, you may have more collisions issues with cookie
-        being set (after a de-connection for example).
+        It will also create a tracking record if requested, in the same query.
 
-        The visitor associated to a partner in case of public user is not taken
-        into account, it is considered as desynchronized cookie.
-        In addition, we also discard if the visitor has a main visitor whose
-        partner is set (aka wrong after logout partner). """
+        :param access_token: token to be used to upsert the visitor
+        :param force_track_values: an optional dict to create a track at the
+            same time.
+        :return: a tuple containing the visitor id and the upsert result (either
+            `inserted` or `updated).
+        """
+        country_code = request.geoip.get('country_code')
+        country_id = request.env['res.country'].sudo().search([
+            ('code', '=', country_code)
+        ], limit=1).id if country_code else None
+        create_values = {
+            'access_token': access_token,
+            'lang_id': request.lang.id,
+            'country_id': country_id,
+            'website_id': request.website.id,
+            'timezone': self._get_visitor_timezone() or None,
+            'write_uid': self.env.uid,
+            'create_uid': self.env.uid,
+            # If the access_token is not a 32 length hexa string, it means that the
+            # visitor is linked to a logged in user, in which case its partner_id is
+            # used instead as the token.
+            'partner_id': None if len(str(access_token)) == 32 else access_token,
+        }
+
+        query = """
+            INSERT INTO website_visitor (
+                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
+                country_id, website_id, timezone, write_uid, create_uid, write_date, create_date)
+            VALUES (
+                %(partner_id)s, %(access_token)s, now() at time zone 'UTC', 1, %(lang_id)s,
+                %(country_id)s, %(website_id)s, %(timezone)s, %(create_uid)s, %(write_uid)s,
+                now() at time zone 'UTC', now() at time zone 'UTC')
+            ON CONFLICT (access_token)
+            DO UPDATE SET
+                last_connection_datetime=excluded.last_connection_datetime,
+                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
+                                    THEN website_visitor.visit_count + 1
+                                    ELSE website_visitor.visit_count
+                                END
+            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
+        """
+
+        if force_track_values:
+            create_values['url'] = force_track_values['url']
+            create_values['page_id'] = force_track_values.get('page_id')
+            query = sql.SQL("""
+                WITH visitor AS (
+                    {query}, %(url)s AS url, %(page_id)s AS page_id
+                ), track AS (
+                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
+                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
+                )
+                SELECT id, upsert from visitor;
+            """).format(query=sql.SQL(query))
+
+        self.env.cr.execute(query, create_values)
+        return self.env.cr.fetchone()
+
+    def _get_visitor_from_request(self, force_create=False, force_track_values=None):
+        """ Return the visitor as sudo from the request.
+
+        :param bool force_create: force a visitor creation if no visitor exists
+        :param force_track_values: an optional dict to create a track at the
+            same time.
+        :return: the website visitor if exists or forced, empty recordset
+                 otherwise.
+        """
 
         # This function can be called in json with mobile app.
         # In case of mobile app, no uid is set on the jsonRequest env.
         # In case of multi db, _env is None on request, and request.env unbound.
         if not (request and request.env and request.env.uid):
             return None
+
         Visitor = self.env['website.visitor'].sudo()
         visitor = Visitor
-        access_token = request.httprequest.cookies.get('visitor_uuid')
-        if access_token:
-            visitor = Visitor.with_context(active_test=False).search([('access_token', '=', access_token)])
-            # Prefetch access_token and other fields. Since access_token has a restricted group and we access
-            # a non restricted field (partner_id) first it is not fetched and will require an additional query to be retrieved.
-            visitor.access_token
+        access_token = self._get_access_token()
 
-        if not self.env.user._is_public():
-            partner_id = self.env.user.partner_id
-            if not visitor or visitor.partner_id and visitor.partner_id != partner_id:
-                # Partner and no cookie or wrong cookie
-                visitor = Visitor.with_context(active_test=False).search([('partner_id', '=', partner_id.id)])
-        elif visitor and visitor.partner_id:
-            # Cookie associated to a Partner
-            visitor = Visitor
-
-        # also check that visitor parent partner is not different from user's one
-        # (indicates duplicate due to invalid or wrong cookie)
-        if visitor and visitor.parent_id.partner_id:
-            if self.env.user._is_public():
-                visitor = self.env['website.visitor'].sudo()
-            elif not visitor.partner_id:
-                visitor = self.env['website.visitor'].sudo().with_context(active_test=False).search(
-                    [('partner_id', '=', self.env.user.partner_id.id)]
-                )
+        if force_create:
+            visitor_id, _ = self._upsert_visitor(access_token, force_track_values)
+            visitor = Visitor.browse(visitor_id)
+        else:
+            visitor = Visitor.search([('access_token', '=', access_token)])
 
-        if visitor and not visitor.timezone:
+        if not force_create and visitor and not visitor.timezone:
             tz = self._get_visitor_timezone()
             if tz:
                 visitor._update_visitor_timezone(tz)
 
-        if not visitor and force_create:
-            visitor = self._create_visitor()
-
         return visitor
 
-    def _handle_webpage_dispatch(self, response, website_page):
-        # get visitor. Done here to avoid having to do it multiple times in case of override.
-        visitor_sudo = self._get_visitor_from_request(force_create=True)
-        if request.httprequest.cookies.get('visitor_uuid', '') != visitor_sudo.access_token:
-            expiration_date = datetime.now() + timedelta(days=365)
-            response.set_cookie('visitor_uuid', visitor_sudo.access_token, expires=expiration_date)
-        self._handle_website_page_visit(website_page, visitor_sudo)
-
-    def _handle_website_page_visit(self, website_page, visitor_sudo):
-        """ Called on dispatch. This will create a website.visitor if the http request object
-        is a tracked website page or a tracked view. Only on tracked elements to avoid having
-        too much operations done on every page or other http requests.
-        Note: The side effect is that the last_connection_datetime is updated ONLY on tracked elements."""
+    def _handle_webpage_dispatch(self, website_page):
+        """ Create a website.visitor if the http request object is a tracked
+        website.page or a tracked ir.ui.view.
+        Since this method is only called on tracked elements, the
+        last_connection_datetime might not be accurate as the visitor could have
+        been visiting only untracked page during his last visit."""
+
         url = request.httprequest.url
-        website_track_values = {
-            'url': url,
-            'visit_datetime': datetime.now(),
-        }
+        website_track_values = {'url': url}
         if website_page:
             website_track_values['page_id'] = website_page.id
-            domain = [('page_id', '=', website_page.id)]
-        else:
-            domain = [('url', '=', url)]
-        visitor_sudo._add_tracking(domain, website_track_values)
-        if visitor_sudo.lang_id.id != request.lang.id:
-            visitor_sudo.write({'lang_id': request.lang.id})
+        self._get_visitor_from_request(force_create=True, force_track_values=website_track_values)
 
     def _add_tracking(self, domain, website_track_values):
         """ Add the track and update the visitor"""
@@ -258,76 +311,44 @@ class WebsiteVisitor(models.Model):
             self.env['website.track'].create(website_track_values)
         self._update_visitor_last_visit()
 
-    def _create_visitor(self):
-        """ Create a visitor. Tracking is added after the visitor has been created."""
-        country_code = request.geoip.get('country_code')
-        country_id = request.env['res.country'].sudo().search([('code', '=', country_code)], limit=1).id if country_code else False
-        vals = {
-            'lang_id': request.lang.id,
-            'country_id': country_id,
-            'website_id': request.website.id,
-        }
+    def _merge_visitor(self, target):
+        """ Merge an anonymous visitor data to a partner visitor then unlink
+        that anonymous visitor.
+        Purpose is to try to aggregate as much sub-records (tracked pages,
+        leads, ...) as possible.
+        It is especially useful to aggregate data from the same user on
+        different devices.
 
-        tz = self._get_visitor_timezone()
-        if tz:
-            vals['timezone'] = tz
+        This method is meant to be overridden for other modules to merge their
+        own anonymous visitor data to the partner visitor before unlink.
 
-        if not self.env.user._is_public():
-            vals['partner_id'] = self.env.user.partner_id.id
-            vals['name'] = self.env.user.partner_id.name
-        return self.sudo().create(vals)
-
-    def _link_to_partner(self, partner, update_values=None):
-        """ Link visitors to a partner. This method is meant to be overridden in
-        order to propagate, if necessary, partner information to sub records.
-
-        :param partner: partner used to link sub records;
-        :param update_values: optional values to update visitors to link;
-        """
-        vals = {'name': partner.name}
-        if update_values:
-            vals.update(update_values)
-        self.write(vals)
-
-    def _link_to_visitor(self, target):
-        """ Link visitors to target visitors, because they are linked to the
-        same identity. Purpose is mainly to propagate partner identity to sub
-        records to ease database update and decide what to do with "duplicated".
-        This method is meant to be overridden in order to implement some specific
-        behavior linked to sub records of duplicate management.
+        This method is only called after the user logs in.
 
         :param target: main visitor, target of link process;
         """
-        # Link sub records of self to target partner
-        if target.partner_id:
-            self._link_to_partner(target.partner_id)
-        # Link sub records of self to target visitor
-        self.website_track_ids.write({'visitor_id': target.id})
-
-        # Archive current record and set its parent visitor
-        self.partner_id = False
-        self.parent_id = target.id
-        self.active = False
-
-        return target
+        if not target.partner_id:
+            raise ValueError("The `target` visitor should be linked to a partner.")
+        self.website_track_ids.visitor_id = target.id
+        self.unlink()
 
     def _cron_unlink_old_visitors(self):
-        """ Unlink inactive visitors (see '_inactive_visitors_domain' for details).
+        """ Unlink inactive visitors (see '_inactive_visitors_domain' for
+        details).
 
-        Visitors were previously archived but we came to the conclusion that archived visitors
-        have very little value and bloat the database for no reason. """
+        Visitors were previously archived but we came to the conclusion that
+        archived visitors have very little value and bloat the database for no
+        reason. """
 
-        inactive_visitors = self.env['website.visitor'].sudo() \
-            .with_context(active_test=False) \
-            .search(self._inactive_visitors_domain())
-        inactive_visitors.unlink()
+        self.env['website.visitor'].sudo().search(self._inactive_visitors_domain()).unlink()
 
     def _inactive_visitors_domain(self):
-        """ This method defines the domain of visitors that can be cleaned. By default visitors
-        not linked to any partner and not active for 'website.visitor.live.days' days (default being 60)
-        are considered as inactive.
+        """ This method defines the domain of visitors that can be cleaned. By
+        default visitors not linked to any partner and not active for
+        'website.visitor.live.days' days (default being 60) are considered as
+        inactive.
 
-        This method is meant to be overridden by sub-modules to further refine inactivity conditions. """
+        This method is meant to be overridden by sub-modules to further refine
+        inactivity conditions. """
 
         delay_days = int(self.env['ir.config_parameter'].sudo().get_param('website.visitor.live.days', 60))
         deadline = datetime.now() - timedelta(days=delay_days)
@@ -346,24 +367,18 @@ class WebsiteVisitor(models.Model):
         self.env.cr.execute(query, (timezone, self.id))
 
     def _update_visitor_last_visit(self):
-        """ We need to do this part here to avoid concurrent updates error. """
-        try:
-            with self.env.cr.savepoint():
-                query_lock = "SELECT * FROM website_visitor where id = %s FOR NO KEY UPDATE NOWAIT"
-                self.env.cr.execute(query_lock, (self.id,), log_exceptions=False)
-
-                date_now = datetime.now()
-                query = "UPDATE website_visitor SET "
-                if self.last_connection_datetime < (date_now - timedelta(hours=8)):
-                    query += "visit_count = visit_count + 1,"
-                query += """
-                    active = True,
-                    last_connection_datetime = %s
-                    WHERE id = %s
-                """
-                self.env.cr.execute(query, (date_now, self.id), log_exceptions=False)
-        except Exception:
-            pass
+        date_now = datetime.now()
+        query = "UPDATE website_visitor SET "
+        if self.last_connection_datetime < (date_now - timedelta(hours=8)):
+            query += "visit_count = visit_count + 1,"
+        query += """
+            last_connection_datetime = %s
+            WHERE id IN (
+                SELECT id FROM website_visitor WHERE id = %s
+                FOR NO KEY UPDATE SKIP LOCKED
+            )
+        """
+        self.env.cr.execute(query, (date_now, self.id), log_exceptions=False)
 
     def _get_visitor_timezone(self):
         tz = request.httprequest.cookies.get('tz') if request else None
