PR: https://github.com/odoo/odoo/pull/

From: 960360afe478a8f7b9c456721b5591154952a37d
From: Raphael Collet
Date: 2018-08-06 12:37:19

Structural Changes: 4
Total Changes: 15

[REF] *: use native date/datetime for Date/Datetime fields

From this commit onwards, Date fields will return datetime.date objects and Datetime fields will return datetime.datetime objects, this implies a number of things that are clearly explained both in the ORM API for master.

This commit also introduces a number of helper functions for dates and datetimes that are exposed in tools.date_utils and fields.Date[time], explained in the documentation as well.

Task-ID: 47189

================================= pseudo patch: =================================

--- a/addons/fleet/models/fleet_vehicle.py
+++ b/addons/fleet/models/fleet_vehicle.py
@@ -299,9 +299,9 @@ class FleetVehicleOdometer(models.Model):
         for record in self:
             name = record.vehicle_id.name
             if not name:
-                name = record.date
+                name = str(record.date)
             elif record.date:
-                name += ' / ' + record.date
+                name += ' / ' + str(record.date)
             record.name = name
 
     @api.onchange('vehicle_id')

--- a/addons/fleet/models/fleet_vehicle_cost.py
+++ b/addons/fleet/models/fleet_vehicle_cost.py
@@ -145,7 +145,7 @@ class FleetVehicleLogContract(models.Model):
             if record.cost_subtype_id.name:
                 name += ' / ' + record.cost_subtype_id.name
             if record.date:
-                name += ' / ' + record.date
+                name += ' / ' + str(record.date)
             record.name = name
 
     @api.depends('expiration_date', 'state')
@@ -231,7 +231,7 @@ class FleetVehicleLogContract(models.Model):
             if not contract.start_date or contract.cost_frequency == 'no':
                 continue
             found = False
-            last_cost_date = contract.start_date
+            startdate = contract.start_date
             if contract.generated_cost_ids:
                 last_autogenerated_cost = VehicleCost.search([
                     ('contract_id', '=', contract.id),
@@ -239,12 +239,11 @@ class FleetVehicleLogContract(models.Model):
                 ], offset=0, limit=1, order='date desc')
                 if last_autogenerated_cost:
                     found = True
-                    last_cost_date = last_autogenerated_cost.date
-            startdate = fields.Date.from_string(last_cost_date)
+                    startdate = last_autogenerated_cost.date.date()
             if found:
                 startdate += deltas.get(contract.cost_frequency)
-            today = fields.Date.from_string(fields.Date.context_today(self))
-            while (startdate <= today) & (startdate <= fields.Date.from_string(contract.expiration_date)):
+            today = fields.Date.context_today(self)
+            while (startdate <= today) & (startdate <= contract.expiration_date):
                 data = {
                     'amount': contract.cost_generated,
                     'date': fields.Date.context_today(self),
