PR: https://github.com/odoo/odoo/pull/

From: 7fb9c8129606538b004dea4e6ad071eabf6c6fb1
From: YOGRAJ TANDEL
Date: 2021-03-26 12:25:44

Structural Changes: 31
Total Changes: 48

[IMP] calendar,lunch: change field names

with this commit we changes field names for week days like su, mo, tu etc. to
sun, mon, tue and so on in calendar module, this is going to be used in
task 2317795 where we developed recurrency module for recurrency mixin.

Also with this commit we change field names of weekdays in lunch module to have
same name as we have in calendar and project module so that we can easily use
custom widget "web_weekly_recurrence" instead of defining boolean field in xml
for each day.

task-2335399

Co-authored-by: Mohammed Shekha <msh@odoo.com>

================================= pseudo patch: =================================

--- a/addons/lunch/models/lunch_alert.py
+++ b/addons/lunch/models/lunch_alert.py
@@ -12,7 +12,7 @@ from textwrap import dedent
 from odoo.addons.base.models.res_partner import _tz_get
 
 _logger = logging.getLogger(__name__)
-WEEKDAY_TO_NAME = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
+WEEKDAY_TO_NAME = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
 CRON_DEPENDS = {'name', 'active', 'mode', 'until', 'notification_time', 'notification_moment', 'tz'}
 
 
@@ -42,13 +42,13 @@ class LunchAlert(models.Model):
     cron_id = fields.Many2one('ir.cron', ondelete='cascade', required=True, readonly=True)
 
     until = fields.Date('Show Until')
-    recurrency_monday = fields.Boolean('Monday', default=True)
-    recurrency_tuesday = fields.Boolean('Tuesday', default=True)
-    recurrency_wednesday = fields.Boolean('Wednesday', default=True)
-    recurrency_thursday = fields.Boolean('Thursday', default=True)
-    recurrency_friday = fields.Boolean('Friday', default=True)
-    recurrency_saturday = fields.Boolean('Saturday', default=True)
-    recurrency_sunday = fields.Boolean('Sunday', default=True)
+    mon = fields.Boolean(default=True)
+    tue = fields.Boolean(default=True)
+    wed = fields.Boolean(default=True)
+    thu = fields.Boolean(default=True)
+    fri = fields.Boolean(default=True)
+    sat = fields.Boolean(default=True)
+    sun = fields.Boolean(default=True)
 
     available_today = fields.Boolean('Is Displayed Today',
                                      compute='_compute_available_today', search='_search_available_today')
@@ -63,12 +63,10 @@ class LunchAlert(models.Model):
             'Notification time must be between 0 and 12')
     ]
 
-    @api.depends('recurrency_monday', 'recurrency_tuesday', 'recurrency_wednesday',
-                 'recurrency_thursday', 'recurrency_friday', 'recurrency_saturday',
-                 'recurrency_sunday')
+    @api.depends('mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun')
     def _compute_available_today(self):
         today = fields.Date.context_today(self)
-        fieldname = 'recurrency_%s' % (WEEKDAY_TO_NAME[today.weekday()])
+        fieldname = WEEKDAY_TO_NAME[today.weekday()]
 
         for alert in self:
             alert.available_today = alert.until > today if alert.until else True and alert[fieldname]
@@ -79,7 +77,7 @@ class LunchAlert(models.Model):
 
         searching_for_true = (operator == '=' and value) or (operator == '!=' and not value)
         today = fields.Date.context_today(self)
-        fieldname = 'recurrency_%s' % (WEEKDAY_TO_NAME[today.weekday()])
+        fieldname = WEEKDAY_TO_NAME[today.weekday()]
 
         return expression.AND([
             [(fieldname, operator, value)],

--- a/addons/lunch/models/lunch_supplier.py
+++ b/addons/lunch/models/lunch_supplier.py
@@ -13,7 +13,7 @@ from odoo.tools import float_round
 from odoo.addons.base.models.res_partner import _tz_get
 
 
-WEEKDAY_TO_NAME = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
+WEEKDAY_TO_NAME = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
 CRON_DEPENDS = {'name', 'active', 'send_by', 'automatic_email_time', 'moment', 'tz'}
 
 def float_to_time(hours, moment='am', tz=None):
@@ -62,13 +62,13 @@ class LunchSupplier(models.Model):
     automatic_email_time = fields.Float('Order Time', default=12.0, required=True)
     cron_id = fields.Many2one('ir.cron', ondelete='cascade', required=True, readonly=True)
 
-    recurrency_monday = fields.Boolean('Monday', default=True)
-    recurrency_tuesday = fields.Boolean('Tuesday', default=True)
-    recurrency_wednesday = fields.Boolean('Wednesday', default=True)
-    recurrency_thursday = fields.Boolean('Thursday', default=True)
-    recurrency_friday = fields.Boolean('Friday', default=True)
-    recurrency_saturday = fields.Boolean('Saturday')
-    recurrency_sunday = fields.Boolean('Sunday')
+    mon = fields.Boolean(default=True)
+    tue = fields.Boolean(default=True)
+    wed = fields.Boolean(default=True)
+    thu = fields.Boolean(default=True)
+    fri = fields.Boolean(default=True)
+    sat = fields.Boolean()
+    sun = fields.Boolean()
 
     recurrency_end_date = fields.Date('Until', help="This field is used in order to ")
 
@@ -206,9 +206,7 @@ class LunchSupplier(models.Model):
 
         orders.action_confirm()
 
-    @api.depends('recurrency_end_date', 'recurrency_monday', 'recurrency_tuesday',
-                 'recurrency_wednesday', 'recurrency_thursday', 'recurrency_friday',
-                 'recurrency_saturday', 'recurrency_sunday')
+    @api.depends('recurrency_end_date', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun')
     def _compute_available_today(self):
         now = fields.Datetime.now().replace(tzinfo=pytz.UTC)
 
@@ -218,7 +216,7 @@ class LunchSupplier(models.Model):
             if supplier.recurrency_end_date and now.date() >= supplier.recurrency_end_date:
                 supplier.available_today = False
             else:
-                fieldname = 'recurrency_%s' % (WEEKDAY_TO_NAME[now.weekday()])
+                fieldname = WEEKDAY_TO_NAME[now.weekday()]
                 supplier.available_today = supplier[fieldname]
 
     def _search_available_today(self, operator, value):
@@ -228,7 +226,7 @@ class LunchSupplier(models.Model):
         searching_for_true = (operator == '=' and value) or (operator == '!=' and not value)
 
         now = fields.Datetime.now().replace(tzinfo=pytz.UTC).astimezone(pytz.timezone(self.env.user.tz or 'UTC'))
-        fieldname = 'recurrency_%s' % (WEEKDAY_TO_NAME[now.weekday()])
+        fieldname = WEEKDAY_TO_NAME[now.weekday()]
 
         recurrency_domain = expression.OR([
             [('recurrency_end_date', '=', False)],
