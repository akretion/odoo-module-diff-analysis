PR: https://github.com/odoo/odoo/pull/179354

From: 34a50e83e654017520c0add727215bd7b528ae19
From: Gorash
Date: 2025-02-15 17:39:11

Breaking data model changes scores: del:5.4 + add:5, change matches:
-    all_user_ids = fields.Many2many('res.users', related='user_ids', depends_context=['active_test'], string='Users and implied users')
+    all_user_ids = fields.Many2many('res.users', compute='_compute_all_user_ids', search='_search_all_user_ids', string='Users and implied users')
+    implied_ids = fields.Many2many('res.groups', 'res_groups_implied_rel', 'gid', 'hid',
+    all_implied_ids = fields.Many2many('res.groups', string='Transitively Implied Groups', recursive=True,
+    implied_by_ids = fields.Many2many('res.groups', 'res_groups_implied_rel', 'hid', 'gid',
+    all_implied_by_ids = fields.Many2many('res.groups', string='Transitively Implying Groups', recursive=True,
+    disjoint_ids = fields.Many2many('res.groups', string='Disjoint Groups',
-    _inherit = 'res.groups'
-    implied_ids = fields.Many2many('res.groups', 'res_groups_implied_rel', 'gid', 'hid',
-    trans_implied_ids = fields.Many2many('res.groups', string='Transitively inherits',

Total Changes: 336

[IMP] base: don't add a user to all its implied groups anymore

From this point on, the fields 'all_group_ids' and 'all_user_ids' use
the reflexive transitive closure of implied groups.

Models:
```
<res.groups>:
  implied_ids        = Many2many <res.groups> Users of this group are also implicitly part of these groups (db table 'res_groups_implied_rel')
  all_implied_ids    = Many2many <res.groups> Reflexive transitive closure of 'implied_ids'
  implied_by_ids     = Many2many <res.groups> Inverse relation of 'implied_ids'
  all_implied_by_ids = Many2many <res.groups> Reflexive transitive closure of 'implied_by_ids'

  user_ids           = Many2many <res.users>  Users with this group (db table: 'res_groups_users_rel')
  all_user_ids       = Many2many <res.users>  Users and implied users

<res.users>:
  group_ids          = Many2many <res.groups> Group added directly to this user (db table: 'res_groups_users_rel')
  all_group_ids      = Many2many <res.groups> Groups and implied groups
```

Concept:
```
The groups involved are to be interpreted as sets.
Thus we can define groups that we will call for example N, Z... such as mathematical sets.
        ┌──────────────────────────────────────────┐
        │ C  ┌──────────────────────────┐          │
        │    │ R  ┌───────────────────┐ │ ┌──────┐ |   "C"
        │    │    │ Q  ┌────────────┐ │ │ │ I    | |   "I" implied "C"
        │    │    │    │ Z  ┌─────┐ │ │ │ │      | |   "R" implied "C"
        │    │    │    │    │ N   │ │ │ │ │      │ │   "Q" implied "R"
        │    │    │    │    └─────┘ │ │ │ │      │ │   "R\Q" implied "R"
        │    │    │    └────────────┘ │ │ │      │ │   "Z" implied "Q"
        │    │    └───────────────────┘ │ │      │ │   "N" implied "Z"
        │    │      ┌───────────────┐   │ │      │ │
        │    │      │ R\Q           │   │ │      │ │
        │    │      └───────────────┘   │ └──────┘ │
        │    └──────────────────────────┘          │
        └──────────────────────────────────────────┘
    For example:
    * A manager group will imply a user group: all managers are users (like Z imply C);
    * A group "computer developer employee" will imply that he is an employee group, a user
      group, that he has access to the timesheet user group.... "computer developer employee"
      is therefore a set of users in the intersection of these groups. These users will
      therefore have all the rights of these groups in addition to their own access rights.
```

XML data example:
```xml
<record model="res.groups" id="group_system">
    <field name="name">Settings</field>
    <field name="implied_ids" eval="[Command.link(ref('group_erp_manager')), Command.link(ref('group_sanitize_override'))]"/>
    <field name="user_ids" eval="[Command.link(ref('base.user_root')), Command.link(ref('base.user_admin'))]"/>
</record>
```
```xml
<record model="res.groups" id="group_no_one">
    <field name="name">Technical Features</field>
    <field name="implied_by_ids" eval="[Command.link(ref('group_user')), Command.link(ref('group_system'))]"/>
</record>

or

<record model="res.groups" id="group_no_one">
    <field name="name">Technical Features</field>
</record>
<record id="group_user">
    <field name="implied_ids" eval="[Command.link(ref('group_no_one'))]"/>
</record>
<record id="group_system">
    <field name="implied_ids" eval="[Command.link(ref('group_no_one'))]"/>
</record>
```

PY example:
```py
group_helpdesk = self.env.ref('helpdesk.group_helpdesk_user')
group_export = self.env.ref('base.group_allow_export')
group_portal = self.env.ref('base.group_portal')

user_portal_helpdesck = self.env['res.users'].search([('all_group_ids', 'in', group_helpdesk.id), ('all_group_ids', 'in', group_portal.id)])

user_portal_helpdesck.group_ids += group_export

user_export = group_export.all_user_ids

user_has_export = group_export.user_ids

```

Part-of: odoo/odoo#179354
Related: odoo/enterprise#74122
Related: odoo/upgrade#6841
Related: odoo/upgrade-util#169
Signed-off-by: Raphael Collet <rco@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/res_config.py
+++ b/odoo/addons/base/models/res_config.py
@@ -272,7 +272,7 @@ class ResConfigSettings(models.TransientModel):
 
         # groups: which groups are implied by the group Employee
         for name, groups, implied_group in classified['group']:
-            res[name] = all(implied_group in group.implied_ids for group in groups)
+            res[name] = all(implied_group in group.all_implied_ids for group in groups)
             if self._fields[name].type == 'selection':
                 res[name] = str(int(res[name]))     # True, False -> '1', '0'
 

--- a/odoo/addons/base/models/res_groups.py
+++ b/odoo/addons/base/models/res_groups.py
@@ -1,14 +1,8 @@
-
 from odoo import api, fields, models, tools, _, Command
 from odoo.exceptions import UserError, ValidationError
+from odoo.fields import Domain
 from odoo.osv import expression
 from odoo.tools import SetDefinitions
-from odoo.tools.misc import OrderedSet
-
-
-#
-# Functions for manipulating boolean and selection pseudo-fields
-#
 
 class ResGroups(models.Model):
     _name = 'res.groups'
@@ -18,7 +12,7 @@ class ResGroups(models.Model):
 
     name = fields.Char(required=True, translate=True)
     user_ids = fields.Many2many('res.users', 'res_groups_users_rel', 'gid', 'uid', help='Users explicitly in this group')
-    all_user_ids = fields.Many2many('res.users', related='user_ids', depends_context=['active_test'], string='Users and implied users')
+    all_user_ids = fields.Many2many('res.users', compute='_compute_all_user_ids', search='_search_all_user_ids', string='Users and implied users')
 
     model_access = fields.One2many('ir.model.access', 'group_id', string='Access Controls', copy=True)
     rule_groups = fields.Many2many('ir.rule', 'rule_group_rel',
@@ -39,9 +33,68 @@ class ResGroups(models.Model):
         'The api key duration cannot be a negative value.',
     )
 
+    """ The groups involved are to be interpreted as sets.
+    Thus we can define groups that we will call for example N, Z... such as mathematical sets.
+        ┌──────────────────────────────────────────┐
+        │ C  ┌──────────────────────────┐          │
+        │    │ R  ┌───────────────────┐ │ ┌──────┐ |   "C"
+        │    │    │ Q  ┌────────────┐ │ │ │ I    | |   "I" implied "C"
+        │    │    │    │ Z  ┌─────┐ │ │ │ │      | |   "R" implied "C"
+        │    │    │    │    │ N   │ │ │ │ │      │ │   "Q" implied "R"
+        │    │    │    │    └─────┘ │ │ │ │      │ │   "P" implied "R"
+        │    │    │    └────────────┘ │ │ │      │ │   "Z" implied "Q"
+        │    │    └───────────────────┘ │ │      │ │   "N" implied "Z"
+        │    │      ┌───────────────┐   │ │      │ │
+        │    │      │ P             │   │ │      │ │
+        │    │      └───────────────┘   │ └──────┘ │
+        │    └──────────────────────────┘          │
+        └──────────────────────────────────────────┘
+    For example:
+    * A manager group will imply a user group: all managers are users (like Z imply C);
+    * A group "computer developer employee" will imply that he is an employee group, a user
+      group, that he has access to the timesheet user group.... "computer developer employee"
+      is therefore a set of users in the intersection of these groups. These users will
+      therefore have all the rights of these groups in addition to their own access rights.
+    """
+    implied_ids = fields.Many2many('res.groups', 'res_groups_implied_rel', 'gid', 'hid',
+        string='Implied Groups', help='Users of this group are also implicitly part of those groups')
+    all_implied_ids = fields.Many2many('res.groups', string='Transitively Implied Groups', recursive=True,
+        compute='_compute_all_implied_ids', compute_sudo=True, search='_search_all_implied_ids')
+    implied_by_ids = fields.Many2many('res.groups', 'res_groups_implied_rel', 'hid', 'gid',
+        string='Implying Groups', help="Users in those groups are implicitly part of this group.")
+    all_implied_by_ids = fields.Many2many('res.groups', string='Transitively Implying Groups', recursive=True,
+        compute='_compute_all_implied_by_ids', compute_sudo=True, search='_search_all_implied_by_ids')
+    disjoint_ids = fields.Many2many('res.groups', string='Disjoint Groups',
+        help="A user may not belong to this group and one of those.  For instance, users may not be portal users and internal users.",
+        compute='_compute_disjoint_ids')
+
+    @api.constrains('implied_ids', 'implied_by_ids')
+    def _check_disjoint_groups(self):
+        # check for users that might have two exclusive groups
+        self.env.registry.clear_cache('groups')
+        self.all_implied_by_ids._check_user_disjoint_groups()
+
     @api.constrains('user_ids')
-    def _check_one_user_type(self):
-        self.user_ids._check_one_user_type()
+    def _check_user_disjoint_groups(self):
+        # Here we should check all the users in any group of 'self':
+        #
+        #   self.user_ids._check_disjoint_groups()
+        #
+        # But that wouldn't scale at all for large groups, like more than 10K
+        # users.  So instead we search for such a nasty user.
+        gids = self._get_user_type_groups().ids
+        domain = (
+            Domain('active', '=', True)
+            & Domain('group_ids', 'in', self.ids)
+            & Domain.OR(
+                Domain('all_group_ids', 'in', [gids[index]])
+                & Domain('all_group_ids', 'in', gids[index+1:])
+                for index in range(0, len(gids) - 1)
+            )
+        )
+        user = self.env['res.users'].search(domain, order='id', limit=1)
+        if user:
+            user._check_disjoint_groups()  # raises a ValidationError
 
     @api.ondelete(at_uninstall=False)
     def _unlink_except_settings_group(self):
@@ -108,12 +161,20 @@ class ResGroups(models.Model):
         if 'name' in vals:
             if vals['name'].startswith('-'):
                 raise UserError(_('The name of the group can not start with "-"'))
+
         # invalidate caches before updating groups, since the recomputation of
         # field 'share' depends on method has_group()
         # DLE P139
         if self.ids:
             self.env['ir.model.access'].call_cache_clearing_methods()
-        return super().write(vals)
+
+        res = super().write(vals)
+
+        if 'implied_ids' in vals or 'implied_by_ids' in vals:
+            # Invalidate the cache of groups and their relationships
+            self.env.registry.clear_cache('groups')
+
+        return res
 
     def _ensure_xml_id(self):
         """Return the groups external identifiers, creating the external identifier for groups missing one"""
@@ -135,89 +196,72 @@ class ResGroups(models.Model):
 
         return result
 
-#
-# Implied groups
-#
-# Extension of res.groups and res.users with a relation for "implied" or
-# "inherited" groups.  Once a user belongs to a group, it automatically belongs
-# to the implied groups (transitively).
-#
+    @api.depends('all_implied_by_ids.user_ids')
+    def _compute_all_user_ids(self):
+        for group in self.with_context(active_test=False):
+            group.all_user_ids = group.all_implied_by_ids.user_ids
 
-# pylint: disable=E0102
-class ResGroups(models.Model):  # noqa: F811
-    _inherit = 'res.groups'
+    def _search_all_user_ids(self, operator, value):
+        return [('all_implied_by_ids.user_ids', operator, value)]
 
-    implied_ids = fields.Many2many('res.groups', 'res_groups_implied_rel', 'gid', 'hid',
-        string='Inherits', help='Users of this group automatically inherit those groups')
-    trans_implied_ids = fields.Many2many('res.groups', string='Transitively inherits',
-        compute='_compute_trans_implied', recursive=True)
-
-    @api.depends('implied_ids.trans_implied_ids')
-    def _compute_trans_implied(self):
-        # Compute the transitive closure recursively. Note that the performance
-        # is good, because the record cache behaves as a memo (the field is
-        # never computed twice on a given group.)
+    @api.depends('implied_ids.all_implied_ids')
+    def _compute_all_implied_ids(self):
+        """ Compute the reflexive transitive closure of implied_ids. """
+        group_definitions = self._get_group_definitions()
+        for g in self:
+            g.all_implied_ids = g.ids + group_definitions.get_superset_ids(g.ids)
+
+    def _search_all_implied_ids(self, operator, value):
+        """ Compute the search on the reflexive transitive closure of implied_ids. """
+        if operator not in ('in', 'not in') or not isinstance(value, (int, list, tuple)):
+            raise NotImplementedError
+        if isinstance(value, int):
+            value = [value]
+        group_definitions = self._get_group_definitions()
+        ids = [*value, *group_definitions.get_subset_ids(value)]
+        return [('id', operator, ids)]
+
+    @api.depends('implied_by_ids.all_implied_by_ids')
+    def _compute_all_implied_by_ids(self):
+        """ Compute the reflexive transitive closure of implied_by_ids. """
+        group_definitions = self._get_group_definitions()
         for g in self:
-            g.trans_implied_ids = g.implied_ids | g.implied_ids.trans_implied_ids
+            g.all_implied_by_ids = g.ids + group_definitions.get_subset_ids(g.ids)
+
+    def _search_all_implied_by_ids(self, operator, value):
+        """ Compute the search on the reflexive transitive closure of implied_by_ids. """
+        assert isinstance(value, (int, list, tuple))
+
+        if isinstance(value, int):
+            value = [value]
+        group_definitions = self._get_group_definitions()
+        ids = [*value, *group_definitions.get_superset_ids(value)]
+
+        return [('id', operator, ids)]
+
+    def _get_user_type_groups(self):
+        """ Return the (disjoint) user type groups (employee, portal, public). """
+        group_ids = [
+            gid
+            for xid in ('base.group_user', 'base.group_portal', 'base.group_public')
+            if (gid := self.env['ir.model.data']._xmlid_to_res_id(xid, raise_if_not_found=False))
+        ]
+        return self.sudo().browse(group_ids)
+
+    def _compute_disjoint_ids(self):
+        user_type_groups = self._get_user_type_groups()
+        for group in self:
+            if group in user_type_groups:
+                group.disjoint_ids = user_type_groups - group
+            else:
+                group.disjoint_ids = False
 
     @api.model_create_multi
     def create(self, vals_list):
-        user_ids_list = [vals.pop('user_ids', None) for vals in vals_list]
         groups = super().create(vals_list)
-        for group, user_ids in zip(groups, user_ids_list):
-            if user_ids:
-                # delegate addition of users to add implied groups
-                group.write({'user_ids': user_ids})
         self.env.registry.clear_cache('groups')
         return groups
 
-    def write(self, values):
-        res = super().write(values)
-        if values.get('user_ids') or values.get('implied_ids'):
-            # add all implied groups (to all users of each group)
-            updated_group_ids = OrderedSet()
-            updated_user_ids = OrderedSet()
-            for group in self:
-                self._cr.execute("""
-                    WITH RECURSIVE group_imply(gid, hid) AS (
-                        SELECT gid, hid
-                          FROM res_groups_implied_rel
-                         UNION
-                        SELECT i.gid, r.hid
-                          FROM res_groups_implied_rel r
-                          JOIN group_imply i ON (i.hid = r.gid)
-                    )
-                    INSERT INTO res_groups_users_rel (gid, uid)
-                         SELECT i.hid, r.uid
-                           FROM group_imply i, res_groups_users_rel r
-                          WHERE r.gid = i.gid
-                            AND i.gid = %(gid)s
-                         EXCEPT
-                         SELECT r.gid, r.uid
-                           FROM res_groups_users_rel r
-                           JOIN group_imply i ON (r.gid = i.hid)
-                          WHERE i.gid = %(gid)s
-                    RETURNING gid, uid
-                """, dict(gid=group.id))
-                updated = self.env.cr.fetchall()
-                gids, uids = zip(*updated) if updated else ([], [])
-                updated_group_ids.update(gids)
-                updated_user_ids.update(uids)
-            # notify the ORM about the updated users and groups
-            updated_groups = self.env['res.groups'].browse(updated_group_ids)
-            updated_groups.invalidate_recordset(['user_ids'])
-            updated_groups.modified(['user_ids'])
-            updated_users = self.env['res.users'].browse(updated_user_ids)
-            updated_users.invalidate_recordset(['group_ids'])
-            updated_users.modified(['group_ids'])
-            # explicitly check constraints
-            updated_groups._validate_fields(['user_ids'])
-            updated_users._validate_fields(['group_ids'])
-            self._check_one_user_type()
-        if 'implied_ids' in values:
-            self.env.registry.clear_cache('groups')
-        return res
-
     def unlink(self):
         res = super().unlink()
         self.env.registry.clear_cache('groups')
@@ -227,27 +271,15 @@ class ResGroups(models.Model):  # noqa: F811
         """ Add the given group to the groups implied by the current group
         :param implied_group: the implied group to add
         """
-        groups = self.filtered(lambda g: implied_group not in g.implied_ids)
+        groups = self.filtered(lambda g: implied_group not in g.all_implied_ids)
         groups.write({'implied_ids': [Command.link(implied_group.id)]})
 
     def _remove_group(self, implied_group):
         """ Remove the given group from the implied groups of the current group
         :param implied_group: the implied group to remove
         """
-        groups = self.filtered(lambda g: implied_group in g.implied_ids)
-        if groups:
-            groups.write({'implied_ids': [Command.unlink(implied_group.id)]})
-            # if user belongs to implied_group thanks to another group, don't remove him
-            # this avoids readding the template user and triggering the mechanism at 121cd0d6084cb28
-            users_to_unlink = [
-                user
-                for user in groups.with_context(active_test=False).user_ids
-                if implied_group not in (user.group_ids - implied_group).trans_implied_ids
-            ]
-            if users_to_unlink:
-                # do not remove inactive users (e.g. default)
-                implied_group.with_context(active_test=False).write(
-                    {'user_ids': [Command.unlink(user.id) for user in users_to_unlink]})
+        groups = self.all_implied_ids.filtered(lambda g: implied_group in g.implied_ids)
+        groups.write({'implied_ids': [Command.unlink(implied_group.id)]})
 
     @api.model
     @tools.ormcache(cache='groups')
@@ -259,14 +291,8 @@ class ResGroups(models.Model):  # noqa: F811
             group.id: {
                 'ref': id_to_ref[group.id] or str(group.id),
                 'supersets': group.implied_ids.ids,
+                'disjoints': group.disjoint_ids.ids,
             }
             for group in groups
         }
-        # determine exclusive groups (will be disjoint for the set expression)
-        user_types_category_id = self.env['ir.model.data']._xmlid_to_res_id('base.module_category_user_type', raise_if_not_found=False)
-        if user_types_category_id:
-            user_type_ids = self.sudo().search([('category_id', '=', user_types_category_id)]).ids
-            for user_type_id in user_type_ids:
-                data[user_type_id]['disjoints'] = set(user_type_ids) - {user_type_id}
-
         return SetDefinitions(data)

--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
+from __future__ import annotations
 
 import binascii
 import contextlib
@@ -11,7 +12,6 @@ import json
 import logging
 import os
 import time
-from collections import defaultdict
 from functools import wraps
 from hashlib import sha256
 from itertools import chain
@@ -27,6 +27,7 @@ from odoo.http import request, DEFAULT_LANG
 from odoo.osv import expression
 from odoo.tools import is_html_empty, frozendict, lazy_property, SQL
 
+
 _logger = logging.getLogger(__name__)
 
 class CryptContext:
@@ -240,7 +241,8 @@ class ResUsers(models.Model):
     phone = fields.Char(related='partner_id.phone', inherited=True, readonly=False)
 
     group_ids = fields.Many2many('res.groups', 'res_groups_users_rel', 'uid', 'gid', string='Groups', default=lambda s: s._default_groups(), help="Groups explicitly assigned to the user")
-    all_group_ids = fields.Many2many('res.groups', related='group_ids', string="Groups and implied groups")
+    all_group_ids = fields.Many2many('res.groups', string="Groups and implied groups",
+        compute='_compute_all_group_ids', compute_sudo=True, search='_search_all_group_ids')
 
     accesses_count = fields.Integer('# Access Rights', help='Number of access rights that apply to the current user',
                                     compute='_compute_accesses_count', compute_sudo=True)
@@ -385,6 +387,14 @@ class ResUsers(models.Model):
             else:
                 user.password = user.new_password
 
+    @api.depends('group_ids.all_implied_ids')
+    def _compute_all_group_ids(self):
+        for user in self:
+            user.all_group_ids = user.group_ids.all_implied_ids
+
+    def _search_all_group_ids(self, operator, value):
+        return [('group_ids.all_implied_ids', operator, value)]
+
     @api.depends('name')
     def _compute_signature(self):
         for user in self.filtered(lambda user: user.name and is_html_empty(user.signature)):
@@ -467,39 +477,19 @@ class ResUsers(models.Model):
                     )
 
     @api.constrains('group_ids')
-
-    def _check_one_user_type(self):
+    def _check_disjoint_groups(self):
         """We check that no users are both portal and users (same with public).
            This could typically happen because of implied groups.
         """
-        user_types_category = self.env.ref('base.module_category_user_type', raise_if_not_found=False)
-        user_types_groups = self.env['res.groups'].search(
-            [('category_id', '=', user_types_category.id)]) if user_types_category else False
-        if user_types_groups:  # needed at install
-            if self._has_multiple_groups(user_types_groups.ids):
-                raise ValidationError(_('The user cannot have more than one user types.'))
-
-    def _has_multiple_groups(self, group_ids):
-        """The method is not fast if the list of ids is very long;
-           so we rather check all users than limit to the size of the group
-        :param group_ids: list of group ids
-        :return: boolean: is there at least a user in at least 2 of the provided groups
-        """
-        if not group_ids:
-            return False
-        if len(self.ids) == 1:
-            user_condition = SQL(" AND r.uid = %s", self.id)
-        else:
-            # default; we check ALL users (actually pretty efficient)
-            user_condition = SQL()
-        return bool(self.env.execute_query(SQL("""
-        SELECT r.uid
-        FROM res_groups_users_rel r
-        WHERE r.gid IN %s %s
-        GROUP BY r.uid
-        HAVING COUNT(r.gid) > 1
-        LIMIT 1
-        """, tuple(group_ids), user_condition)))
+        user_type_groups = self.env['res.groups']._get_user_type_groups()
+        for user in self:
+            disjoint_groups = user.all_group_ids & user_type_groups
+            if len(disjoint_groups) > 1:
+                raise ValidationError(_(
+                    "User %(user)s cannot be at the same time in exclusive groups %(groups)s.",
+                    user=repr(user.name),
+                    groups=", ".join(repr(g.display_name) for g in disjoint_groups),
+                ))
 
     def onchange(self, values, field_names, fields_spec):
         # Hacky fix to access fields in `SELF_READABLE_FIELDS` in the onchange logic.
@@ -524,14 +514,6 @@ class ResUsers(models.Model):
 
     @api.model_create_multi
     def create(self, vals_list):
-        for values in vals_list:
-            if 'group_ids' in values:
-                # complete 'group_ids' with implied groups
-                user = self.new(values)
-                gs = user.group_ids._origin
-                gs = gs | gs.trans_implied_ids
-                values['group_ids'] = self._fields['group_ids'].convert_to_write(gs, user)
-
         users = super().create(vals_list)
         setting_vals = []
         for user in users:
@@ -611,25 +593,9 @@ class ResUsers(models.Model):
                 if env.user in self:
                     lazy_property.reset_all(env)
 
-        if 'group_ids' in values:
-            # Do not use `_is_internal` as it relies on the ormcache which is not yet invalidated
-            internal_group_id = self.env['ir.model.data']._xmlid_to_res_id("base.group_user")
-            demoted_users = users_before.filtered(lambda u: internal_group_id not in u.group_ids.ids)
-            if demoted_users:
-                # demoted users are restricted to the assigned groups only
-                vals = {'group_ids': [Command.clear()] + values['group_ids']}
-                super(ResUsers, demoted_users).write(vals)
-            # add implied groups for all users (in batches)
-            users_batch = defaultdict(self.browse)
-            for user in self:
-                users_batch[user.group_ids] += user
-            for groups, users in users_batch.items():
-                gs = set(concat(g.trans_implied_ids for g in groups))
-                vals = {'group_ids': [Command.link(g.id) for g in gs]}
-                super(ResUsers, users).write(vals)
+        if 'group_ids' in values and self.ids:
             # clear caches linked to the users
-            if self.ids:
-                self.env['ir.model.access'].call_cache_clearing_methods()
+            self.env['ir.model.access'].call_cache_clearing_methods()
 
         # per-method / per-model caches have been removed so the various
         # clear_cache/clear_caches methods pretty much just end up calling

--- a/odoo/addons/base/models/res_users_view.py
+++ b/odoo/addons/base/models/res_users_view.py
@@ -264,7 +264,7 @@ class ResGroups(models.Model):
             if app.xml_id == 'base.module_category_user_type':
                 return (app, 'selection', gs.sorted('id'), category_name)
             # determine sequence order: a group appears after its implied groups
-            order = {g: len(g.trans_implied_ids & gs) for g in gs}
+            order = {g: len(g.all_implied_ids & gs) for g in gs}
             # We want a selection for Accounting too. Auditor and Invoice are both
             # children of Accountant, but the two of them make a full accountant
             # so it makes no sense to have checkboxes.
@@ -339,10 +339,11 @@ class UsersView(models.Model):
         :return: string to display in a warning
         """
         # Current groups of the user
-        current_groups = user.group_ids.filtered('trans_implied_ids')
+        current_groups = user.group_ids.filtered('implied_ids')
         current_groups_by_category = defaultdict(lambda: self.env['res.groups'])
-        for group in current_groups:
-            current_groups_by_category[group.category_id] |= group.trans_implied_ids.filtered(lambda grp: grp.category_id == group.category_id)
+        for group in current_groups.all_implied_ids:
+            in_category = group.all_implied_ids.filtered(lambda g: g.category_id == group.category_id)
+            current_groups_by_category[group.category_id] |= in_category - group
 
         missing_groups = {}
         # We don't want to show warning for "Technical" and "Extra Rights" groups
@@ -391,8 +392,7 @@ class UsersView(models.Model):
                 values1[key] = val
 
         if 'group_ids' not in values and (add or rem):
-            added = self.env['res.groups'].sudo().browse(add)
-            added |= added.mapped('trans_implied_ids')
+            added = self.env['res.groups'].sudo().browse(add).all_implied_ids
             added_ids = added._ids
             # remove group ids in `rem` and add group ids in `add`
             # do not remove groups that are added by implied
@@ -477,7 +477,7 @@ class UsersView(models.Model):
             elif is_selection_groups(f):
                 # determine selection groups, in order
                 sel_groups = self.env['res.groups'].sudo().browse(get_selection_groups(f))
-                sel_order = {g: len(g.trans_implied_ids & sel_groups) for g in sel_groups}
+                sel_order = {g: len(g.all_implied_ids & sel_groups) for g in sel_groups}
                 sel_groups = sel_groups.sorted(key=sel_order.get)
                 # determine which ones are in gids
                 selected = [gid for gid in sel_groups.ids if gid in gids]
