PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:4 + add:0, change matches:
-    _inherit = 'gamification.badge'
-    _inherit = 'gamification.challenge'
-    _inherit = 'res.partner'
-    _inherit = 'survey.survey'

Total Changes: 36

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/survey/models/badge.py
+++ b/addons/survey/models/badge.py
@@ -5,7 +5,7 @@ from odoo import api, fields, models
 
 
 class GamificationBadge(models.Model):
-    _inherit = 'gamification.badge'
+    _inherit = ['gamification.badge']
 
     survey_ids = fields.One2many('survey.survey', 'certification_badge_id', 'Survey Ids')
     survey_id = fields.Many2one('survey.survey', 'Survey', compute='_compute_survey_id', store=True)

--- a/addons/survey/models/challenge.py
+++ b/addons/survey/models/challenge.py
@@ -4,8 +4,8 @@
 from odoo import models, fields
 
 
-class Challenge(models.Model):
-    _inherit = 'gamification.challenge'
+class GamificationChallenge(models.Model):
+    _inherit = ['gamification.challenge']
 
     challenge_category = fields.Selection(selection_add=[
         ('certification', 'Certifications')

--- a/addons/survey/models/res_partner.py
+++ b/addons/survey/models/res_partner.py
@@ -5,7 +5,7 @@ from odoo import api, fields, models
 
 
 class ResPartner(models.Model):
-    _inherit = 'res.partner'
+    _inherit = ['res.partner']
 
     certifications_count = fields.Integer('Certifications Count', compute='_compute_certifications_count')
     certifications_company_count = fields.Integer('Company Certifications Count', compute='_compute_certifications_company_count')

--- a/addons/survey/models/survey_question.py
+++ b/addons/survey/models/survey_question.py
@@ -42,7 +42,6 @@ class SurveyQuestion(models.Model):
 
         That makes the use and display of these information at view and controller levels easier to understand.
     """
-    _name = 'survey.question'
     _description = 'Survey Question'
     _rec_name = 'title'
     _order = 'sequence,id'
@@ -781,6 +780,7 @@ class SurveyQuestion(models.Model):
 
         return correct_answers
 
+
 class SurveyQuestionAnswer(models.Model):
     """ A preconfigured answer for a question. This model stores values used
     for
@@ -790,7 +790,6 @@ class SurveyQuestionAnswer(models.Model):
       * matrix: row and column values;
 
     """
-    _name = 'survey.question.answer'
     _rec_name = 'value'
     _rec_names_search = ['question_id.title', 'value']
     _order = 'question_id, sequence, id'

--- a/addons/survey/models/survey_survey.py
+++ b/addons/survey/models/survey_survey.py
@@ -13,10 +13,9 @@ from odoo.osv import expression
 from odoo.tools import is_html_empty
 
 
-class Survey(models.Model):
+class SurveySurvey(models.Model):
     """ Settings for a multi-page/multi-question survey. Each survey can have one or more attached pages
     and each page can display one or more questions. """
-    _name = 'survey.survey'
     _description = 'Survey'
     _order = 'create_date DESC'
     _rec_name = 'title'
@@ -441,7 +440,7 @@ class Survey(models.Model):
 
     @api.model_create_multi
     def create(self, vals_list):
-        surveys = super(Survey, self).create(vals_list)
+        surveys = super().create(vals_list)
         for survey_sudo in surveys.filtered(lambda survey: survey.certification_give_badge).sudo():
             survey_sudo._create_certification_badge_trigger()
         return surveys
@@ -454,7 +453,7 @@ class Survey(models.Model):
             or speed_limit is not None and s.session_speed_rating_time_limit != speed_limit
         ))
 
-        result = super(Survey, self).write(vals)
+        result = super().write(vals)
         if 'certification_give_badge' in vals:
             return self.sudo()._handle_certification_badges(vals)
 
@@ -498,7 +497,7 @@ class Survey(models.Model):
         return [dict(vals, title=self.env._("%s (copy)", survey.title)) for survey, vals in zip(self, vals_list)]
 
     def toggle_active(self):
-        super(Survey, self).toggle_active()
+        super().toggle_active()
         activated = self.filtered(lambda survey: survey.active)
         activated.certification_badge_id.action_unarchive()
         (self - activated).certification_badge_id.action_archive()

--- a/addons/survey/models/survey_survey_template.py
+++ b/addons/survey/models/survey_survey_template.py
@@ -6,7 +6,7 @@ import ast
 from odoo import api, models, _
 
 
-class SurveyTemplate(models.Model):
+class SurveySurvey(models.Model):
     """This model defines additional actions on the 'survey.survey' model that
        can be used to load a survey sample. The model defines a sample for each
        survey type:
@@ -16,7 +16,7 @@ class SurveyTemplate(models.Model):
        (4) custom: An empty survey
     """
 
-    _inherit = 'survey.survey'
+    _inherit = ['survey.survey']
 
     @api.model
     def action_load_sample_survey(self):

--- a/addons/survey/models/survey_user_input.py
+++ b/addons/survey/models/survey_user_input.py
@@ -14,9 +14,8 @@ from odoo.tools import float_is_zero
 _logger = logging.getLogger(__name__)
 
 
-class SurveyUserInput(models.Model):
+class SurveyUser_Input(models.Model):
     """ Metadata for a set of one user's answers to a particular survey """
-    _name = "survey.user_input"
     _description = "Survey User Input"
     _rec_name = "survey_id"
     _order = "create_date desc"
@@ -169,7 +168,7 @@ class SurveyUserInput(models.Model):
                 suvey_id = vals.get('survey_id', self.env.context.get('default_survey_id'))
                 survey = self.env['survey.survey'].browse(suvey_id)
                 vals['predefined_question_ids'] = [(6, 0, survey._prepare_user_input_predefined_questions().ids)]
-        return super(SurveyUserInput, self).create(vals_list)
+        return super().create(vals_list)
 
     # ------------------------------------------------------------
     # ACTIONS / BUSINESS
@@ -701,8 +700,7 @@ class SurveyUserInput(models.Model):
             user_input.message_post(author_id=author_id, body=body, subtype_xmlid='survey.mt_survey_user_input_completed')
 
 
-class SurveyUserInputLine(models.Model):
-    _name = 'survey.user_input.line'
+class SurveyUser_InputLine(models.Model):
     _description = 'Survey User Input Line'
     _rec_name = 'user_input_id'
     _order = 'question_sequence, id'
@@ -791,7 +789,7 @@ class SurveyUserInputLine(models.Model):
             if not vals.get('answer_score'):
                 score_vals = self._get_answer_score_values(vals)
                 vals.update(score_vals)
-        return super(SurveyUserInputLine, self).create(vals_list)
+        return super().create(vals_list)
 
     def write(self, vals):
         res = True
@@ -806,7 +804,7 @@ class SurveyUserInputLine(models.Model):
             if not vals_copy.get('answer_score'):
                 score_vals = self._get_answer_score_values(getter_params, compute_speed_score=False)
                 vals_copy.update(score_vals)
-            res = super(SurveyUserInputLine, line).write(vals_copy) and res
+            res = super(SurveyUser_InputLine, line).write(vals_copy) and res
         return res
 
     def _get_answer_matching_domain(self):
