PR: https://github.com/odoo/odoo/pull/72039

From: 6eaa4a2ae3b12b244f4c4277ef9cbc172f492f0a
From: Arnold Moyaux
Date: 2021-06-29 07:41:12

Structural Changes: 3
Total Changes: 62

[IMP] (purchase_)stock: suppliers information in replenishment

Infobox to help the user with the replenishment. Allow those actions:
- See the different supplier with their lead time, price and quantity
- Be able to select a supplier and set it on the orderpoint
‚Åª See the last delivery by mmonth for the product
- Last purchase date for each supplier

Technicaly it use a wizard and a fields char with JSON used by
a widget to display a static template. Also it creates directly
the wizard in backend instead of just let the view manage the new
object since we need a button on a one2many and if the records do
not have an id, it's not possilbe to use it.

closes odoo/odoo#72039

Task: 2519761
Related: odoo/upgrade#2596
Signed-off-by: Arnold Moyaux <amoyaux@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/purchase_stock/models/product.py
+++ b/addons/purchase_stock/models/product.py
@@ -69,3 +69,49 @@ class ProductProduct(models.Model):
             qty_by_product_location[(product.id, location.id)] += product_qty
             qty_by_product_wh[(product.id, location.warehouse_id.id)] += product_qty
         return qty_by_product_location, qty_by_product_wh
+
+
+class SupplierInfo(models.Model):
+    _inherit = 'product.supplierinfo'
+
+    last_purchase_date = fields.Date('Last Purchase', compute='_compute_last_purchase_date')
+    show_set_supplier_button = fields.Boolean(
+        'Show Set Supplier Button', compute='_compute_show_set_supplier_button')
+
+    def _compute_last_purchase_date(self):
+        self.last_purchase_date = False
+        purchases = self.env['purchase.order'].search([
+            ('state', 'in', ('purchase', 'done')),
+            ('order_line.product_id', 'in',
+             self.product_tmpl_id.product_variant_ids.ids),
+            ('partner_id', 'in', self.name.ids),
+        ], order='date_order')
+        for supplier in self:
+            products = supplier.product_tmpl_id.product_variant_ids
+            for purchase in purchases:
+                if purchase.partner_id != supplier.name:
+                    continue
+                if not (products & purchase.order_line.product_id):
+                    continue
+                supplier.last_purchase_date = purchase.date_order
+                break
+
+    def _compute_show_set_supplier_button(self):
+        self.show_set_supplier_button = True
+        orderpoint_id = self.env.context.get('default_orderpoint_id')
+        orderpoint = self.env['stock.warehouse.orderpoint'].browse(orderpoint_id)
+        if orderpoint_id:
+            self.filtered(
+                lambda s: s.id == orderpoint.supplier_id.id
+            ).show_set_supplier_button = False
+
+    def action_set_supplier(self):
+        self.ensure_one()
+        orderpoint_id = self.env.context.get('orderpoint_id')
+        orderpoint = self.env['stock.warehouse.orderpoint'].browse(orderpoint_id)
+        if not orderpoint:
+            return
+        orderpoint.route_id = self.env['stock.rule'].search([('action', '=', 'buy')], limit=1).route_id.id
+        orderpoint.supplier_id = self
+        if orderpoint.qty_to_order < self.min_qty:
+            orderpoint.qty_to_order = self.min_qty

--- a/addons/purchase_stock/models/stock.py
+++ b/addons/purchase_stock/models/stock.py
@@ -193,6 +193,10 @@ class Orderpoint(models.Model):
         """ Extend to add more depends values """
         return super()._compute_qty()
 
+    @api.depends('supplier_id')
+    def _compute_lead_days(self):
+        return super()._compute_lead_days()
+
     @api.depends('route_id')
     def _compute_show_suppplier(self):
         buy_route = []
@@ -216,6 +220,12 @@ class Orderpoint(models.Model):
 
         return result
 
+    def _get_lead_days_values(self):
+        values = super()._get_lead_days_values()
+        if self.supplier_id:
+            values['supplierinfo'] = self.supplier_id
+        return values
+
     def _get_replenishment_order_notification(self):
         self.ensure_one()
         order = self.env['purchase.order.line'].search([

--- a/addons/purchase_stock/models/stock_rule.py
+++ b/addons/purchase_stock/models/stock_rule.py
@@ -141,16 +141,16 @@ class StockRule(models.Model):
                         procurement.values, po))
             self.env['purchase.order.line'].sudo().create(po_line_values)
 
-    def _get_lead_days(self, product):
+    def _get_lead_days(self, product, **values):
         """Add the company security lead time, days to purchase and the supplier
         delay to the cumulative delay and cumulative description. The days to
         purchase and company lead time are always displayed for onboarding
         purpose in order to indicate that those options are available.
         """
-        delay, delay_description = super()._get_lead_days(product)
+        delay, delay_description = super()._get_lead_days(product, **values)
         bypass_delay_description = self.env.context.get('bypass_delay_description')
         buy_rule = self.filtered(lambda r: r.action == 'buy')
-        seller = product.with_company(buy_rule.company_id)._select_seller()
+        seller = 'supplierinfo' in values and values['supplierinfo'] or product.with_company(buy_rule.company_id)._select_seller()
         if not buy_rule or not seller:
             return delay, delay_description
         buy_rule.ensure_one()
