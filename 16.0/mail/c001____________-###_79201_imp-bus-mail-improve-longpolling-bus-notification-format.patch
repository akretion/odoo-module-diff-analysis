PR: https://github.com/odoo/odoo/pull/79201

From: 1afcc9c368dc70519a18cefe169bb0f526d89e46
From: Didier (did)
Date: 2021-10-29 16:05:23

Structural Changes: 3
Total Changes: 432

[IMP] bus, mail, *: improve longpolling bus notification format

* = auth_signup, calendar, im_livechat, snailmail_account, survey, test_mail,
    web_editor, website_crm_iap_reveal, website_livechat

The aim of this PR is to improve/fix various flaws and limitation of the current
API, to make it easier to use and more efficient.

Notification are now defined with 3 distinct parts:

- the channel determines which client(s) should receive it
- the type determines how it should be handled
- the payload determines any extra information helpful for handling it

Channel
=======

Business code
-------------

- Record channel is introduced for ease of subscribing to and sending
  notifications to specific partners, channels, documents, ...
- String channel is still supported (but it is converted internally to the tuple
  channel).
- Tuple channel is still supported without any change (but should be avoided
  whenever possible due to its complex syntax).

The channel is no longer sent to the client. When the channel was used for
business purpose, the information it contained has been moved into either the
new type, or the payload itself.

Technical note
--------------

All channels are now internally converted to the tuple (db, ...) channel, which
is necessary for the platform code (saas/sh).

Internally, the bus.bus table is not changed, type and payload are grouped
together into what was (and still is) called message.

Type
====

Type is introduced to uniformize the way notifications are sent and handled.
All existing notifications already had some kind of manually-built type in them.
This is now officially supported at the bus API.

In client code this will allow (to be done in future commits) to register one
handler per specific type, instead of having to iterate and to filter all
received notifications on every handler.

Payload
=======

Payload (ex message) did not change, it can still be anything depending on
business needs.

Few adaptations:
- When the type was included on the payload, the type has been moved to the new
  type parameter.
- When the channel was used in business code, its data has been copied into the
  payload.

task-1891151

closes odoo/odoo#79201

X-original-commit: 543af27c7d6836ffac9e80ff8490b6ddbd849221
Related: odoo/enterprise#21998
Signed-off-by: SÃ©bastien Theys (seb) <seb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/ir_attachment.py
+++ b/addons/mail/models/ir_attachment.py
@@ -38,12 +38,9 @@ class IrAttachment(models.Model):
 
     def _delete_and_notify(self):
         for attachment in self:
-            if attachment.res_model == 'mail.channel':
-                self.env['bus.bus'].sendone((self._cr.dbname, 'mail.channel', attachment.res_id), {
-                    'type': 'mail.attachment_delete',
-                    'payload': {
-                        'id': attachment.id,
-                    },
+            if attachment.res_model == 'mail.channel' and attachment.res_id:
+                self.env['bus.bus']._sendone(self.env['mail.channel'].browse(attachment.res_id), 'ir.attachment/delete', {
+                    'id': attachment.id,
                 })
         self.unlink()
 

--- a/addons/mail/models/mail_activity.py
+++ b/addons/mail/models/mail_activity.py
@@ -283,9 +283,7 @@ class MailActivity(models.Model):
 
             self.env[activity.res_model].browse(activity.res_id).message_subscribe(partner_ids=[partner_id])
             if activity.date_deadline <= fields.Date.today():
-                self.env['bus.bus'].sendone(
-                    (self._cr.dbname, 'res.partner', activity.user_id.partner_id.id),
-                    {'type': 'activity_updated', 'activity_created': True})
+                self.env['bus.bus']._sendone(activity.user_id.partner_id, 'mail.activity/updated', {'activity_created': True})
         return activities
 
     def read(self, fields=None, load='_classic_read'):
@@ -314,23 +312,17 @@ class MailActivity(models.Model):
             for activity in user_changes:
                 self.env[activity.res_model].browse(activity.res_id).message_subscribe(partner_ids=[activity.user_id.partner_id.id])
                 if activity.date_deadline <= fields.Date.today():
-                    self.env['bus.bus'].sendone(
-                        (self._cr.dbname, 'res.partner', activity.user_id.partner_id.id),
-                        {'type': 'activity_updated', 'activity_created': True})
+                    self.env['bus.bus']._sendone(activity.user_id.partner_id, 'mail.activity/updated', {'activity_created': True})
             for activity in user_changes:
                 if activity.date_deadline <= fields.Date.today():
                     for partner in pre_responsibles:
-                        self.env['bus.bus'].sendone(
-                            (self._cr.dbname, 'res.partner', partner.id),
-                            {'type': 'activity_updated', 'activity_deleted': True})
+                        self.env['bus.bus']._sendone(partner, 'mail.activity/updated', {'activity_deleted': True})
         return res
 
     def unlink(self):
         for activity in self:
             if activity.date_deadline <= fields.Date.today():
-                self.env['bus.bus'].sendone(
-                    (self._cr.dbname, 'res.partner', activity.user_id.partner_id.id),
-                    {'type': 'activity_updated', 'activity_deleted': True})
+                self.env['bus.bus']._sendone(activity.user_id.partner_id, 'mail.activity/updated', {'activity_deleted': True})
         return super(MailActivity, self).unlink()
 
     @api.model

--- a/addons/mail/models/mail_channel.py
+++ b/addons/mail/models/mail_channel.py
@@ -10,6 +10,7 @@ from odoo import _, api, fields, models, tools, Command
 from odoo.addons.base.models.avatar_mixin import get_hsl_from_seed
 from odoo.exceptions import UserError, ValidationError
 from odoo.osv import expression
+from odoo.tools import html_escape
 from odoo.tools.misc import DEFAULT_SERVER_DATETIME_FORMAT
 
 _logger = logging.getLogger(__name__)
@@ -233,14 +234,11 @@ class Channel(models.Model):
         if 'image_128' in vals:
             notifications = []
             for channel in self:
-                notifications.append([(self._cr.dbname, 'mail.channel', channel.id), {
-                    'type': 'mail.channel_update',
-                    'payload': {
-                        'id': channel.id,
-                        'avatarCacheKey': channel._get_avatar_cache_key(),
-                    },
+                notifications.append([channel, 'mail.channel/insert', {
+                    'id': channel.id,
+                    'avatarCacheKey': channel._get_avatar_cache_key(),
                 }])
-            self.env['bus.bus'].sendmany(notifications)
+            self.env['bus.bus']._sendmany(notifications)
         return result
 
     def init(self):
@@ -276,22 +274,19 @@ class Channel(models.Model):
         self.message_unsubscribe(partner.ids)
         if partner not in self.with_context(active_test=False).channel_partner_ids:
             return True
-        channel_info = self.channel_info('unsubscribe')[0]  # must be computed before leaving the channel (access rights)
+        channel_info = self.channel_info()[0]  # must be computed before leaving the channel (access rights)
         result = self.write({'channel_partner_ids': [Command.unlink(partner.id)]})
         # side effect of unsubscribe that wasn't taken into account because
         # channel_info is called before actually unpinning the channel
         channel_info['is_pinned'] = False
-        self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', partner.id), channel_info)
+        self.env['bus.bus']._sendone(partner, 'mail.channel/leave', channel_info)
         notification = _('<div class="o_mail_notification">left the channel</div>')
         # post 'channel left' message as root since the partner just unsubscribed from the channel
         self.sudo().message_post(body=notification, subtype_xmlid="mail.mt_comment", author_id=partner.id)
-        self.env['bus.bus'].sendone((self._cr.dbname, 'mail.channel', self.id), {
-            'type': 'mail.channel_update',
-            'payload': {
-                'id': self.id,
-                'memberCount': self.member_count,
-                'members': [('insert-and-unlink', {'id': partner.id})],
-            },
+        self.env['bus.bus']._sendone(self, 'mail.channel/insert', {
+            'id': self.id,
+            'memberCount': self.member_count,
+            'members': [('insert-and-unlink', {'id': partner.id})],
         })
         return result
 
@@ -329,12 +324,9 @@ class Channel(models.Model):
                 user = channel_partner.partner_id.user_ids[0] if channel_partner.partner_id.user_ids else self.env['res.users']
                 # notify invited members through the bus
                 if user:
-                    self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', channel_partner.partner_id.id), {
-                        'type': 'mail.channel_joined',
-                        'payload': {
-                            'channel': channel_partner.channel_id.with_user(user).with_context(allowed_company_ids=user.company_ids.ids).sudo().channel_info()[0],
-                            'invited_by_user_id': self.env.user.id,
-                        },
+                    self.env['bus.bus']._sendone(channel_partner.partner_id, 'mail.channel/joined', {
+                        'channel': channel_partner.channel_id.with_user(user).with_context(allowed_company_ids=user.company_ids.ids).sudo().channel_info()[0],
+                        'invited_by_user_id': self.env.user.id,
                     })
                 # notify existing members with a new message in the channel
                 if channel_partner.partner_id == self.env.user.partner_id:
@@ -357,14 +349,11 @@ class Channel(models.Model):
                     'id': channel_partner.guest_id.id,
                     'name': channel_partner.guest_id.name,
                 })
-            self.env['bus.bus'].sendone((self._cr.dbname, 'mail.channel', channel.id), {
-                'type': 'mail.channel_update',
-                'payload': {
-                    'id': channel.id,
-                    'guestMembers': [('insert', guest_members_data)],
-                    'memberCount': channel.member_count,
-                    'members': [('insert', members_data)],
-                },
+            self.env['bus.bus']._sendone(channel, 'mail.channel/insert', {
+                'id': channel.id,
+                'guestMembers': [('insert', guest_members_data)],
+                'memberCount': channel.member_count,
+                'members': [('insert', members_data)],
             })
         if invite_to_rtc_call:
             if self.env.user._is_public() and 'guest' in self.env.context:
@@ -435,28 +424,22 @@ class Channel(models.Model):
             member.rtc_inviting_session_id = False
             if member.partner_id:
                 invited_partners |= member.partner_id
-                target = (self._cr.dbname, 'res.partner', member.partner_id.id)
+                target = member.partner_id
             else:
                 invited_guests |= member.guest_id
-                target = (self._cr.dbname, 'mail.guest', member.guest_id.id)
-            invitation_notifications.append((target, {
-                'type': 'mail.channel_update',
-                'payload': {
-                    'id': self.id,
-                    'rtcInvitingSession': [('unlink',)],
-                },
+                target = member.guest_id
+            invitation_notifications.append((target, 'mail.channel/insert', {
+                'id': self.id,
+                'rtcInvitingSession': [('unlink',)],
             }))
-        self.env['bus.bus'].sendmany(invitation_notifications)
+        self.env['bus.bus']._sendmany(invitation_notifications)
         channel_data = {'id': self.id}
         if invited_guests:
             channel_data['invitedGuests'] = [('insert-and-unlink', [{'id': guest.id} for guest in invited_guests])]
         if invited_partners:
             channel_data['invitedPartners'] = [('insert-and-unlink', [{'id': partner.id} for partner in invited_partners])]
         if invited_partners or invited_guests:
-            self.env['bus.bus'].sendone((self._cr.dbname, 'mail.channel', self.id), {
-                'type': 'mail.channel_update',
-                'payload': channel_data,
-            })
+            self.env['bus.bus']._sendone(self, 'mail.channel/insert', channel_data)
         return channel_data
 
     # ------------------------------------------------------------
@@ -567,21 +550,17 @@ class Channel(models.Model):
 
         message_format_values = message.message_format()[0]
         bus_notifications = self._channel_message_notifications(message, message_format_values)
-        self.env['bus.bus'].sudo().sendmany(bus_notifications)
+        self.env['bus.bus'].sudo()._sendmany(bus_notifications)
         # Last interest is updated for a chat when posting a message.
         # So a notification is needed to update UI.
         if self.is_chat or self.channel_type == 'group':
             notifications = []
             for channel_partners in self.channel_last_seen_partner_ids.filtered('partner_id'):
-                notif = {
-                    'type': 'mail.channel_last_interest_dt_changed',
-                    'payload': {
-                        'id': self.id,
-                        'last_interest_dt': channel_partners.last_interest_dt,
-                    }
-                }
-                notifications.append([(self._cr.dbname, 'res.partner', channel_partners.partner_id.id), notif])
-            self.env['bus.bus'].sendmany(notifications)
+                notifications.append([channel_partners.partner_id, 'mail.channel/last_interest_dt_changed', {
+                    'id': self.id,
+                    'last_interest_dt': channel_partners.last_interest_dt,
+                }])
+            self.env['bus.bus']._sendmany(notifications)
         return rdata
 
     def _message_receive_bounce(self, email, partner):
@@ -601,7 +580,7 @@ class Channel(models.Model):
 
     @api.returns('mail.message', lambda value: value.id)
     def message_post(self, *, message_type='notification', **kwargs):
-        self.filtered(lambda channel: channel.is_chat).mapped('channel_last_seen_partner_ids').sudo().write({
+        self.filtered(lambda channel: channel.is_chat or channel.channel_type == 'group').mapped('channel_last_seen_partner_ids').sudo().write({
             'is_pinned': True,
             'last_interest_dt': fields.Datetime.now(),
         })
@@ -630,13 +609,10 @@ class Channel(models.Model):
 
     def _message_update_content_after_hook(self, message):
         self.ensure_one()
-        self.env['bus.bus'].sendone((self._cr.dbname, 'mail.channel', self.id), {
-            'type': 'mail.message_update',
-            'payload': {
-                'id': message.id,
-                'body': message.body,
-                'attachments': [('insert-and-replace', message.attachment_ids._attachment_format(commands=True))],
-            },
+        self.env['bus.bus']._sendone(self, 'mail.message/insert', {
+            'id': message.id,
+            'body': message.body,
+            'attachments': [('insert-and-replace', message.attachment_ids._attachment_format(commands=True))],
         })
         return super()._message_update_content_after_hook(message=message)
 
@@ -649,18 +625,15 @@ class Channel(models.Model):
             guests = []
             partners = [('insert', {'id': self.env.user.partner_id.id})]
         reactions = self.env['mail.message.reaction'].sudo().search([('message_id', '=', message.id), ('content', '=', content)])
-        self.env['bus.bus'].sendone((self._cr.dbname, 'mail.channel', self.id), {
-            'type': 'mail.message_update',
-            'payload': {
-                'id': message.id,
-                'messageReactionGroups': [('insert' if len(reactions) > 0 else 'insert-and-unlink', {
-                    'messageId': message.id,
-                    'content': content,
-                    'count': len(reactions),
-                    'guests': guests,
-                    'partners': partners,
-                })],
-            },
+        self.env['bus.bus']._sendone(self, 'mail.message/insert', {
+            'id': message.id,
+            'messageReactionGroups': [('insert' if len(reactions) > 0 else 'insert-and-unlink', {
+                'messageId': message.id,
+                'content': content,
+                'count': len(reactions),
+                'guests': guests,
+                'partners': partners,
+            })],
         })
         return super()._message_add_reaction_after_hook(message=message, content=content)
 
@@ -673,18 +646,15 @@ class Channel(models.Model):
             guests = []
             partners = [('insert-and-unlink', {'id': self.env.user.partner_id.id})]
         reactions = self.env['mail.message.reaction'].sudo().search([('message_id', '=', message.id), ('content', '=', content)])
-        self.env['bus.bus'].sendone((self._cr.dbname, 'mail.channel', self.id), {
-            'type': 'mail.message_update',
-            'payload': {
-                'id': message.id,
-                'messageReactionGroups': [('insert' if len(reactions) > 0 else 'insert-and-unlink', {
-                    'messageId': message.id,
-                    'content': content,
-                    'count': len(reactions),
-                    'guests': guests,
-                    'partners': partners,
-                })],
-            },
+        self.env['bus.bus']._sendone(self, 'mail.message/insert', {
+            'id': message.id,
+            'messageReactionGroups': [('insert' if len(reactions) > 0 else 'insert-and-unlink', {
+                'messageId': message.id,
+                'content': content,
+                'count': len(reactions),
+                'guests': guests,
+                'partners': partners,
+            })],
         })
         return super()._message_remove_reaction_after_hook(message=message, content=content)
 
@@ -703,7 +673,7 @@ class Channel(models.Model):
             :param partner_ids : the partner to notify
         """
         notifications = self._channel_channel_notifications(partner_ids)
-        self.env['bus.bus'].sendmany(notifications)
+        self.env['bus.bus']._sendmany(notifications)
 
     def _channel_channel_notifications(self, partner_ids):
         """ Generate the bus notifications of current channel for the given partner ids
@@ -718,7 +688,7 @@ class Channel(models.Model):
                     allowed_company_ids=user_id.company_ids.ids
                 )
                 for channel_info in user_channels.channel_info():
-                    notifications.append([(self._cr.dbname, 'res.partner', partner.id), channel_info])
+                    notifications.append((partner, 'mail.channel/legacy_insert', channel_info))
         return notifications
 
     def _channel_message_notifications(self, message, message_format=False):
@@ -729,10 +699,14 @@ class Channel(models.Model):
         message_format = message_format or message.message_format()[0]
         notifications = []
         for channel in self:
-            notifications.append([(self._cr.dbname, 'mail.channel', channel.id), dict(message_format)])
+            payload = {
+                'id': channel.id,
+                'message': dict(message_format),
+            }
+            notifications.append((channel, 'mail.channel/new_message', payload))
             # add uuid to allow anonymous to listen
             if channel.public == 'public':
-                notifications.append([channel.uuid, dict(message_format)])
+                notifications.append((channel.uuid, 'mail.channel/new_message', payload))
         return notifications
 
     # ------------------------------------------------------------
@@ -745,7 +719,7 @@ class Channel(models.Model):
     #   - when a message is posted on a channel (to the channel, using _notify() method)
     # ------------------------------------------------------------
 
-    def channel_info(self, extra_info=False):
+    def channel_info(self):
         """ Get the informations header for the current channels
             :returns a list of channels values
             :rtype : list(dict)
@@ -770,8 +744,6 @@ class Channel(models.Model):
                 'group_based_subscription': bool(channel.group_ids),
                 'create_uid': channel.create_uid.id,
             }
-            if extra_info:
-                info['info'] = extra_info
             # add last message preview (only used in mobile)
             info['last_message_id'] = channel_last_message_ids.get(channel.id, False)
             # listeners of the channel
@@ -884,13 +856,6 @@ class Channel(models.Model):
             channel._broadcast(partners_to)
         return channel.channel_info()[0]
 
-    @api.model
-    def channel_get_and_minimize(self, partners_to):
-        channel = self.channel_get(partners_to)
-        if channel:
-            self.channel_minimize(channel['uuid'])
-        return channel
-
     @api.model
     def channel_fold(self, uuid, state=None):
         """ Update the fold_state of the given session. In order to syncronize web browser
@@ -914,18 +879,10 @@ class Channel(models.Model):
                 vals['is_minimized'] = is_minimized
             if vals:
                 session_state.write(vals)
-            self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', self.env.user.partner_id.id), session_state.channel_id.channel_info()[0])
-
-    @api.model
-    def channel_minimize(self, uuid, minimized=True):
-        values = {
-            'fold_state': minimized and 'open' or 'closed',
-            'is_minimized': minimized
-        }
-        domain = [('partner_id', '=', self.env.user.partner_id.id), ('channel_id.uuid', '=', uuid)]
-        channel_partners = self.env['mail.channel.partner'].search(domain, limit=1)
-        channel_partners.write(values)
-        self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', self.env.user.partner_id.id), channel_partners.channel_id.channel_info()[0])
+            self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.channel/insert', {
+                'id': session_state.channel_id.channel_info()[0]['id'],
+                'serverFoldState': state,
+            })
 
     @api.model
     def channel_pin(self, uuid, pinned=False):
@@ -938,9 +895,12 @@ class Channel(models.Model):
         self.ensure_one()
         channel_partners = self.env['mail.channel.partner'].search(
             [('partner_id', '=', self.env.user.partner_id.id), ('channel_id', '=', self.id), ('is_pinned', '!=', pinned)])
-        self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', self.env.user.partner_id.id), self.channel_info('unsubscribe' if not pinned else False)[0])
         if channel_partners:
             channel_partners.write({'is_pinned': pinned})
+        if not pinned:
+            self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.channel/unpin', {'id': self.id})
+        else:
+            self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.channel/legacy_insert', self.channel_info()[0])
 
     def _channel_seen(self, last_message_id=None):
         """
@@ -958,15 +918,12 @@ class Channel(models.Model):
             return
         self._set_last_seen_message(last_message)
         data = {
-            'info': 'channel_seen',
+            'channel_id': self.id,
             'last_message_id': last_message.id,
             'partner_id': self.env.user.partner_id.id,
         }
-        if self.channel_type == 'chat':
-            self.env['bus.bus'].sendmany([[(self._cr.dbname, 'mail.channel', self.id), data]])
-        else:
-            data['channel_id'] = self.id
-            self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', self.env.user.partner_id.id), data)
+        target = self if self.channel_type == 'chat' else self.env.user.partner_id
+        self.env['bus.bus']._sendone(target, 'mail.channel.partner/seen', data)
         return last_message.id
 
     def _set_last_seen_message(self, last_message):
@@ -1005,40 +962,36 @@ class Channel(models.Model):
             channel_partner.write({
                 'fetched_message_id': last_message_id,
             })
-            data = {
+            self.env['bus.bus']._sendone(channel, 'mail.channel.partner/fetched', {
+                'channel_id': channel.id,
                 'id': channel_partner.id,
-                'info': 'channel_fetched',
                 'last_message_id': last_message_id,
                 'partner_id': self.env.user.partner_id.id,
-            }
-            self.env['bus.bus'].sendmany([[(self._cr.dbname, 'mail.channel', channel.id), data]])
+            })
 
     def channel_set_custom_name(self, name):
         self.ensure_one()
         channel_partner = self.env['mail.channel.partner'].search([('partner_id', '=', self.env.user.partner_id.id), ('channel_id', '=', self.id)])
         channel_partner.write({'custom_channel_name': name})
-        self._broadcast(self.env.user.partner_id.ids)
+        self.env['bus.bus']._sendone(channel_partner.partner_id, 'mail.channel/insert', {
+            'id': self.id,
+            'custom_channel_name': name,
+        })
 
     def channel_rename(self, name):
         self.ensure_one()
         self.write({'name': name})
-        self.env['bus.bus'].sendone((self._cr.dbname, 'mail.channel', self.id), {
-            'type': 'mail.channel_rename',
-            'payload': {
-                'id': self.id,
-                'name': name
-            },
+        self.env['bus.bus']._sendone(self, 'mail.channel/insert', {
+            'id': self.id,
+            'name': name,
         })
 
     def channel_change_description(self, description):
         self.ensure_one()
         self.write({'description': description})
-        self.env['bus.bus'].sendone((self._cr.dbname, 'mail.channel', self.id), {
-            'type': 'mail.channel_description_change',
-            'payload': {
-                'id': self.id,
-                'description': description
-            },
+        self.env['bus.bus']._sendone(self, 'mail.channel/insert', {
+            'id': self.id,
+            'description': description
         })
 
     def notify_typing(self, is_typing):
@@ -1048,14 +1001,14 @@ class Channel(models.Model):
         notifications = []
         for channel in self:
             data = {
-                'info': 'typing_status',
+                'channel_id': channel.id,
                 'is_typing': is_typing,
                 'partner_id': self.env.user.partner_id.id,
                 'partner_name': self.env.user.partner_id.name,
             }
-            notifications.append([(self._cr.dbname, 'mail.channel', channel.id), data]) # notify backend users
-            notifications.append([channel.uuid, data]) # notify frontend users
-        self.env['bus.bus'].sendmany(notifications)
+            notifications.append([channel, 'mail.channel.partner/typing_status', data])  # notify backend users
+            notifications.append([channel.uuid, 'mail.channel.partner/typing_status', data])  # notify frontend users
+        self.env['bus.bus']._sendmany(notifications)
 
     @api.model
     def channel_search_to_join(self, name=None, domain=None):
@@ -1097,8 +1050,8 @@ class Channel(models.Model):
         })
         notification = _('<div class="o_mail_notification">created <a href="#" class="o_channel_redirect" data-oe-id="%s">#%s</a></div>', new_channel.id, new_channel.name)
         new_channel.message_post(body=notification, message_type="notification", subtype_xmlid="mail.mt_comment")
-        channel_info = new_channel.channel_info('creation')[0]
-        self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', self.env.user.partner_id.id), channel_info)
+        channel_info = new_channel.channel_info()[0]
+        self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.channel/legacy_insert', channel_info)
         return channel_info
 
     @api.model
@@ -1190,15 +1143,14 @@ class Channel(models.Model):
 
     def _send_transient_message(self, partner_to, content):
         """ Notifies partner_to that a message (not stored in DB) has been
-            written in this channel """
-        self.env['bus.bus'].sendone(
-            (self._cr.dbname, 'res.partner', partner_to.id),
-            {'body': "<span class='o_mail_notification'>" + content + "</span>",
-             'info': 'transient_message',
-             'model': self._name,
-             'res_id': self.id,
-            }
-        )
+            written in this channel.
+            `content` is HTML, dynamic parts should be escaped by the caller.
+        """
+        self.env['bus.bus']._sendone(partner_to, 'mail.channel/transient_message', {
+            'body': "<span class='o_mail_notification'>" + content + "</span>",
+            'model': self._name,
+            'res_id': self.id,
+        })
 
     def execute_command_help(self, **kwargs):
         partner = self.env.user.partner_id
@@ -1209,7 +1161,7 @@ class Channel(models.Model):
         else:
             all_channel_partners = self.env['mail.channel.partner'].with_context(active_test=False)
             channel_partners = all_channel_partners.search([('partner_id', '!=', partner.id), ('channel_id', '=', self.id)])
-            msg = _("You are in a private conversation with <b>@%s</b>.", channel_partners[0].partner_id.name if channel_partners else _('Anonymous'))
+            msg = _("You are in a private conversation with <b>@%s</b>.", html_escape(channel_partners[0].partner_id.name if channel_partners else _('Anonymous')))
         msg += self._execute_command_help_message_extra()
 
         self._send_transient_message(partner, msg)
@@ -1230,7 +1182,7 @@ class Channel(models.Model):
     def execute_command_who(self, **kwargs):
         partner = self.env.user.partner_id
         members = [
-            '<a href="#" data-oe-id='+str(p.id)+' data-oe-model="res.partner">@'+p.name+'</a>'
+            f'<a href="#" data-oe-id={str(p.id)} data-oe-model="res.partner">@{html_escape(p.name)}</a>'
             for p in self.channel_partner_ids[:30] if p != partner
         ]
         if len(members) == 0:

--- a/addons/mail/models/mail_channel_partner.py
+++ b/addons/mail/models/mail_channel_partner.py
@@ -179,26 +179,20 @@ class ChannelPartner(models.Model):
             member.rtc_inviting_session_id = self.rtc_session_ids.id
             if member.partner_id:
                 invited_partners |= member.partner_id
-                target = (self._cr.dbname, 'res.partner', member.partner_id.id)
+                target = member.partner_id
             else:
                 invited_guests |= member.guest_id
-                target = (self._cr.dbname, 'mail.guest', member.guest_id.id)
-            invitation_notifications.append((target, {
-                'type': 'mail.channel_update',
-                'payload': {
-                    'id': self.channel_id.id,
-                    'rtcInvitingSession': [('insert', self.rtc_session_ids._mail_rtc_session_format())],
-                },
+                target = member.guest_id
+            invitation_notifications.append((target, 'mail.channel/insert', {
+                'id': self.channel_id.id,
+                'rtcInvitingSession': [('insert', self.rtc_session_ids._mail_rtc_session_format())],
             }))
-        self.env['bus.bus'].sendmany(invitation_notifications)
+        self.env['bus.bus']._sendmany(invitation_notifications)
         if invited_guests or invited_partners:
             channel_data = {'id': self.channel_id.id}
             if invited_guests:
                 channel_data['invitedGuests'] = [('insert', [{'id': guest.id, 'name': guest.name} for guest in invited_guests])]
             if invited_partners:
                 channel_data['invitedPartners'] = [('insert', [{'id': partner.id, 'name': partner.name} for partner in invited_partners])]
-            self.env['bus.bus'].sendone((self._cr.dbname, 'mail.channel', self.channel_id.id), {
-                'type': 'mail.channel_update',
-                'payload': channel_data,
-            })
+            self.env['bus.bus']._sendone(self.channel_id, 'mail.channel/insert', channel_data)
         return invited_partners, invited_guests

--- a/addons/mail/models/mail_channel_rtc_session.py
+++ b/addons/mail/models/mail_channel_rtc_session.py
@@ -31,12 +31,9 @@ class MailRtcSession(models.Model):
     @api.model_create_multi
     def create(self, vals_list):
         rtc_sessions = super().create(vals_list)
-        self.env['bus.bus'].sendmany([((self._cr.dbname, 'mail.channel', channel.id), {
-            'type': 'rtc_sessions_update',
-            'payload': {
-                'id': channel.id,
-                'rtcSessions': [('insert', sessions_data)],
-            },
+        self.env['bus.bus']._sendmany([(channel, 'mail.channel/rtc_sessions_update', {
+            'id': channel.id,
+            'rtcSessions': [('insert', sessions_data)],
         }) for channel, sessions_data in rtc_sessions._mail_rtc_session_format_by_channel().items()])
         return rtc_sessions
 
@@ -48,25 +45,14 @@ class MailRtcSession(models.Model):
                 # Note: invitation depends on field `rtc_inviting_session_id` so the cancel must be
                 # done before the delete to be able to know who was invited.
                 channel._rtc_cancel_invitations()
-        notifications = [((self._cr.dbname, 'mail.channel', channel.id), {
-            'type': 'rtc_sessions_update',
-            'payload': {
-                'id': channel.id,
-                'rtcSessions': [('insert-and-unlink', [{'id': session_data['id']} for session_data in sessions_data])],
-            },
+        notifications = [(channel, 'mail.channel/rtc_sessions_update', {
+            'id': channel.id,
+            'rtcSessions': [('insert-and-unlink', [{'id': session_data['id']} for session_data in sessions_data])],
         }) for channel, sessions_data in self._mail_rtc_session_format_by_channel().items()]
         for rtc_session in self:
-            model_name, record_id = ('mail.guest', rtc_session.guest_id.id) if rtc_session.guest_id else ('res.partner', rtc_session.partner_id.id)
-            notifications.append([
-                (self._cr.dbname, model_name, record_id),
-                {
-                    'type': 'rtc_session_ended',
-                    'payload': {
-                        'sessionId': rtc_session.id,
-                    },
-                },
-            ])
-        self.env['bus.bus'].sendmany(notifications)
+            target = rtc_session.guest_id or rtc_session.partner_id
+            notifications.append((target, 'mail.channel.rtc.session/ended', {'sessionId': rtc_session.id}))
+        self.env['bus.bus']._sendmany(notifications)
         return super().unlink()
 
     def _update_and_broadcast(self, values):
@@ -76,10 +62,7 @@ class MailRtcSession(models.Model):
         valid_values = {'is_screen_sharing_on', 'is_camera_on', 'is_muted', 'is_deaf'}
         self.write({key: values[key] for key in valid_values if key in valid_values})
         session_data = self._mail_rtc_session_format()
-        self.env['bus.bus'].sendone((self._cr.dbname, 'mail.channel', self.channel_id.id), {
-            'type': 'mail.rtc_session_update',
-            'payload': session_data,
-        })
+        self.env['bus.bus']._sendone(self.channel_id, 'mail.channel.rtc.session/insert', session_data)
 
     @api.autovacuum
     def _gc_inactive_sessions(self):
@@ -108,12 +91,9 @@ class MailRtcSession(models.Model):
         payload_by_target = defaultdict(lambda: {'sender': self.id, 'notifications': []})
         for target_session_ids, content in notifications:
             for target_session in self.env['mail.channel.rtc.session'].browse(target_session_ids).exists():
-                model, record_id = ('mail.guest', target_session.guest_id.id) if target_session.guest_id else ('res.partner', target_session.partner_id.id)
-                payload_by_target[(self._cr.dbname, model, record_id)]['notifications'].append(content)
-        return self.env['bus.bus'].sendmany([(target, {
-            'type': 'rtc_peer_notification',
-            'payload': payload,
-        }) for target, payload in payload_by_target.items()])
+                target = target_session.guest_id or target_session.partner_id
+                payload_by_target[target]['notifications'].append(content)
+        return self.env['bus.bus']._sendmany([(target, 'mail.channel.rtc.session/peer_notification', payload) for target, payload in payload_by_target.items()])
 
     def _mail_rtc_session_format(self, complete_info=True):
         self.ensure_one()

--- a/addons/mail/models/mail_guest.py
+++ b/addons/mail/models/mail_guest.py
@@ -57,16 +57,13 @@ class MailGuest(models.Model):
         if len(name) > 512:
             raise UserError(_("Guest's name is too long."))
         self.name = name
-        message = {
-            'type': 'mail.guest_update',
-            'payload': {
-                'id': self.id,
-                'name': self.name,
-            },
+        guest_data = {
+            'id': self.id,
+            'name': self.name
         }
-        bus_notifs = [((self._cr.dbname, 'mail.channel', channel.id), message) for channel in self.channel_ids]
-        bus_notifs.append(((self._cr.dbname, 'mail.guest', self.id), message))
-        self.env['bus.bus'].sendmany(bus_notifs)
+        bus_notifs = [(channel, 'mail.guest/insert', guest_data) for channel in self.channel_ids]
+        bus_notifs.append((self, 'mail.guest/insert', guest_data))
+        self.env['bus.bus']._sendmany(bus_notifs)
 
     def _update_timezone(self, timezone):
         query = """

--- a/addons/mail/models/mail_message.py
+++ b/addons/mail/models/mail_message.py
@@ -698,9 +698,8 @@ class Message(models.Model):
         # not really efficient method: it does one db request for the
         # search, and one for each message in the result set is_read to True in the
         # current notifications from the relation.
-        partner_id = self.env.user.partner_id.id
         notif_domain = [
-            ('res_partner_id', '=', partner_id),
+            ('res_partner_id', '=', self.env.user.partner_id.id),
             ('is_read', '=', False)]
         if domain:
             messages = self.search(domain)
@@ -712,8 +711,10 @@ class Message(models.Model):
 
         ids = [n['mail_message_id'] for n in notifications.read(['mail_message_id'])]
 
-        notification = {'type': 'mark_as_read', 'message_ids': [id[0] for id in ids], 'needaction_inbox_counter': self.env.user.partner_id._get_needaction_count()}
-        self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', partner_id), notification)
+        self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.message/mark_as_read', {
+            'message_ids': [id[0] for id in ids],
+            'needaction_inbox_counter': self.env.user.partner_id._get_needaction_count(),
+        })
 
         return ids
 
@@ -732,13 +733,10 @@ class Message(models.Model):
         notifications.write({'is_read': True})
 
         # notifies changes in messages through the bus.
-        self.env['bus.bus'].sendone(
-            (self._cr.dbname, 'res.partner', partner_id.id),
-            {'type': 'mark_as_read',
-             'message_ids': notifications.mapped('mail_message_id').ids,
-             'needaction_inbox_counter': self.env.user.partner_id._get_needaction_count(),
-            }
-        )
+        self.env['bus.bus']._sendone(partner_id, 'mail.message/mark_as_read', {
+            'message_ids': notifications.mail_message_id.ids,
+            'needaction_inbox_counter': self.env.user.partner_id._get_needaction_count(),
+        })
 
     @api.model
     def unstar_all(self):
@@ -749,8 +747,10 @@ class Message(models.Model):
         starred_messages.write({'starred_partner_ids': [Command.unlink(partner_id)]})
 
         ids = [m.id for m in starred_messages]
-        notification = {'type': 'toggle_star', 'message_ids': ids, 'starred': False}
-        self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', self.env.user.partner_id.id), notification)
+        self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.message/toggle_star', {
+            'message_ids': ids,
+            'starred': False,
+        })
 
     def toggle_message_starred(self):
         """ Toggle messages as (un)starred. Technically, the notifications related
@@ -764,8 +764,10 @@ class Message(models.Model):
         else:
             self.sudo().write({'starred_partner_ids': [Command.unlink(self.env.user.partner_id.id)]})
 
-        notification = {'type': 'toggle_star', 'message_ids': [self.id], 'starred': starred}
-        self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', self.env.user.partner_id.id), notification)
+        self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.message/toggle_star', {
+            'message_ids': [self.id],
+            'starred': starred,
+        })
 
     def _message_add_reaction(self, content):
         self.ensure_one()
@@ -1026,11 +1028,11 @@ class Message(models.Model):
                 messages_per_partner[self.env.user.partner_id] |= message
             if message.author_id and not any(user._is_public() for user in message.author_id.with_context(active_test=False).user_ids):
                 messages_per_partner[message.author_id] |= message
-        updates = [[
-            (self._cr.dbname, 'res.partner', partner.id),
-            {'type': 'message_notification_update', 'elements': messages._message_notification_format()}
-        ] for partner, messages in messages_per_partner.items()]
-        self.env['bus.bus'].sendmany(updates)
+        updates = [
+            (partner, 'mail.message/notification_update', {'elements': messages._message_notification_format()})
+            for partner, messages in messages_per_partner.items()
+        ]
+        self.env['bus.bus']._sendmany(updates)
 
     # ------------------------------------------------------
     # TOOLS

--- a/addons/mail/models/mail_thread.py
+++ b/addons/mail/models/mail_thread.py
@@ -2116,10 +2116,8 @@ class MailThread(models.AbstractModel):
 
             message_format_values = message.message_format()[0]
             for partner_id in inbox_pids:
-                bus_notifications.append([(self._cr.dbname, 'ir.needaction', partner_id), dict(message_format_values)])
-
-        if bus_notifications:
-            self.env['bus.bus'].sudo().sendmany(bus_notifications)
+                bus_notifications.append((self.env['res.partner'].browse(partner_id), 'mail.message/inbox', dict(message_format_values)))
+        self.env['bus.bus'].sudo()._sendmany(bus_notifications)
 
     def _notify_record_by_email(self, message, recipients_data, msg_vals=False,
                                 model_description=False, mail_auto_delete=True, check_existing=False,

--- a/addons/mail/models/res_users_settings.py
+++ b/addons/mail/models/res_users_settings.py
@@ -45,10 +45,7 @@ class ResUsersSettings(models.Model):
             if setting in self._fields and new_settings[setting] != self[setting]:
                 changed_settings[setting] = new_settings[setting]
         self.write(changed_settings)
-        self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', self.user_id.partner_id.id), {
-            'type': 'res.users_settings_changed',
-            'payload': changed_settings,
-        })
+        self.env['bus.bus']._sendone(self.user_id.partner_id, 'res.users.settings/changed', changed_settings)
 
     def set_volume_setting(self, partner_id, volume):
         self.ensure_one()
@@ -61,13 +58,10 @@ class ResUsersSettings(models.Model):
                 'partner_id': partner_id,
                 'volume': volume,
             }])
-        notification = {
-            'type': 'res_users_settings_volumes_update',
-            'payload': {
-                'volumeSettings': [('insert', {
-                    'id': volume_setting.id,
-                    'volume': volume_setting.volume,
-                })],
-            }
-        }
-        self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', self.user_id.partner_id.id), notification)
+        self.env['bus.bus']._sendone(self.user_id.partner_id, 'res.users.settings/volumes_update', {
+            'volumeSettings': [('insert', {
+                'id': volume_setting.id,
+                'partner': [('insert-and-replace', {'id': partner_id})],
+                'volume': volume_setting.volume,
+            })],
+        })
