PR: https://github.com/odoo/odoo/pull/158014

From: 3945f59af178df7ad8e0ba7cceeb4f707a3a12b6
From: Thomas Becquevort (thbe)
Date: 2024-05-23 04:06:18

Structural Changes: 1
Total Changes: 92

[IMP] account: Amounts to Settle changes

This commit consists in multiple changes done to the Amounts to Settle view or
to the ways to reach it in order to adapt its purpose.

The dashboard behavior has been modified. While it previously lead only to
credit notes and bills. It now also allows the user to reach the invoices
and refunds.

The batching of group payments has been modified. If possible, when registering
a group payment on the Amounts to Settle view, the group will be automatically
batched by default.

A new Reconcile button next to the Register Payment one has been added.

Since the view now shows ingoing and outgoing moves for sales and for purchases
journals, the Sales and Purchases fitlers have been replaced by the Invoices,
Credit Notes, Bills and Refunds filters.

The menuitems in the Customers and the Vendors drop-down to reach the Amounts
to Settle view have been removed.

A new "Early Discount" filter on the Amounts to Settle view allows the user to
see which payments are currently benefiting from an early discount.

Each instances of "Due Date" showing up have been replaced by "Next Payment
Date"

task-3640027

closes odoo/odoo#158014

Related: odoo/enterprise#58832
Related: odoo/upgrade#6036
Signed-off-by: Olivier Colson (oco) <oco@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_journal_dashboard.py
+++ b/addons/account/models/account_journal_dashboard.py
@@ -487,42 +487,42 @@ class account_journal(models.Model):
         payment_field_list = [
             "account_move_line.journal_id",
             "account_move_line.move_id",
-            "-account_move_line.amount_residual AS amount_total_company",
+            "ABS(account_move_line.amount_residual) AS amount_total_company",
         ]
         # DRAFTS
-        query, params = sale_purchase_journals._get_draft_bills_query().select(*bills_field_list)
+        query, params = sale_purchase_journals._get_draft_sales_purchases_query().select(*bills_field_list)
         self.env.cr.execute(query, params)
         query_results_drafts = group_by_journal(self.env.cr.dictfetchall())
 
         # WAITING BILLS AND PAYMENTS
         query_results_to_pay = {}
         if purchase_journals:
-            query, params = purchase_journals._get_open_payments_query().select(*payment_field_list)
+            query, params = purchase_journals._get_open_purchases_query().select(*payment_field_list)
             self.env.cr.execute(query, params)
-            query_results_payments_to_pay = group_by_journal(self.env.cr.dictfetchall())
+            query_results_purchases_to_pay = group_by_journal(self.env.cr.dictfetchall())
             for journal in purchase_journals:
-                query_results_to_pay[journal.id] = query_results_payments_to_pay[journal.id]
+                query_results_to_pay[journal.id] = query_results_purchases_to_pay[journal.id]
         if sale_journals:
-            query, params = sale_journals._get_open_bills_to_pay_query().select(*bills_field_list)
+            query, params = sale_journals._get_open_sales_query().select(*payment_field_list)
             self.env.cr.execute(query, params)
-            query_results_bills_to_pay = group_by_journal(self.env.cr.dictfetchall())
+            query_results_sales_to_pay = group_by_journal(self.env.cr.dictfetchall())
             for journal in sale_journals:
-                query_results_to_pay[journal.id] = query_results_bills_to_pay[journal.id]
+                query_results_to_pay[journal.id] = query_results_sales_to_pay[journal.id]
 
         # LATE BILLS AND PAYMENTS
         late_query_results = {}
         if purchase_journals:
-            query, params = purchase_journals._get_late_payment_query().select(*payment_field_list)
+            query, params = purchase_journals._get_late_purchases_query().select(*payment_field_list)
             self.env.cr.execute(query, params)
-            late_payments_query_results = group_by_journal(self.env.cr.dictfetchall())
+            query_results_late_purchases = group_by_journal(self.env.cr.dictfetchall())
             for journal in purchase_journals:
-                late_query_results[journal.id] = late_payments_query_results[journal.id]
+                late_query_results[journal.id] = query_results_late_purchases[journal.id]
         if sale_journals:
-            query, params = sale_journals._get_late_bills_query().select(*bills_field_list)
+            query, params = sale_journals._get_late_sales_query().select(*payment_field_list)
             self.env.cr.execute(query, params)
-            late_bills_query_results = group_by_journal(self.env.cr.dictfetchall())
+            query_results_late_sales = group_by_journal(self.env.cr.dictfetchall())
             for journal in sale_journals:
-                late_query_results[journal.id] = late_bills_query_results[journal.id]
+                late_query_results[journal.id] = query_results_late_sales[journal.id]
 
         to_check_vals = {
             journal.id: (amount_total_signed_sum, count)
@@ -606,54 +606,54 @@ class account_journal(models.Model):
                 'to_check_balance': currency.format(amount_total_signed_sum),
             })
 
-    def _get_open_bills_to_pay_query(self):
+    def _get_draft_sales_purchases_query(self):
         return self.env['account.move']._where_calc([
             *self.env['account.move']._check_company_domain(self.env.companies),
             ('journal_id', 'in', self.ids),
-            ('state', '=', 'posted'),
-            ('payment_state', 'in', ('not_paid', 'partial')),
+            ('state', '=', 'draft'),
             ('move_type', 'in', self.env['account.move'].get_invoice_types(include_receipts=True)),
         ])
 
-    def _get_draft_bills_query(self):
-        return self.env['account.move']._where_calc([
-            *self.env['account.move']._check_company_domain(self.env.companies),
+    def _get_open_sales_query(self):
+        return self.env['account.move.line']._where_calc([
+            *self.env['account.move.line']._check_company_domain(self.env.companies),
             ('journal_id', 'in', self.ids),
-            ('state', '=', 'draft'),
-            ('payment_state', 'in', ('not_paid', 'partial')),
-            ('move_type', 'in', self.env['account.move'].get_invoice_types(include_receipts=True)),
+            ('move_id.payment_state', 'in', ('not_paid', 'partial')),
+            ('account_type', '=', 'asset_receivable'),
+            ('move_id.move_type', '=', 'out_invoice'),
+            ('parent_state', '=', 'posted'),
         ])
 
-    def _get_late_bills_query(self):
-        return self.env['account.move']._where_calc([
-            *self.env['account.move']._check_company_domain(self.env.companies),
+    def _get_late_sales_query(self):
+        return self.env['account.move.line']._where_calc([
+            *self.env['account.move.line']._check_company_domain(self.env.companies),
             ('journal_id', 'in', self.ids),
-            ('invoice_date_due', '<', fields.Date.context_today(self)),
-            ('state', '=', 'posted'),
-            ('payment_state', 'in', ('not_paid', 'partial')),
-            ('move_type', 'in', self.env['account.move'].get_invoice_types(include_receipts=True)),
+            ('move_id.payment_state', 'in', ('not_paid', 'partial')),
+            ('account_type', '=', 'asset_receivable'),
+            ('date_maturity', '<', fields.Date.context_today(self)),
+            ('move_id.move_type', '=', 'out_invoice'),
+            ('parent_state', '=', 'posted'),
         ])
 
-    def _get_open_payments_query(self):
+    def _get_open_purchases_query(self):
         return self.env['account.move.line']._where_calc([
             *self.env['account.move.line']._check_company_domain(self.env.companies),
             ('journal_id', 'in', self.ids),
             ('move_id.payment_state', 'in', ('not_paid', 'partial')),
-            ('date_maturity', '!=', False),
-            ('amount_residual', '<', 0),
+            ('account_type', '=', 'liability_payable'),
+            ('move_id.move_type', '=', 'in_invoice'),
             ('parent_state', '=', 'posted'),
-            ('journal_id.type', '=', 'purchase'),
         ])
 
-    def _get_late_payment_query(self):
+    def _get_late_purchases_query(self):
         return self.env['account.move.line']._where_calc([
             *self.env['account.move.line']._check_company_domain(self.env.companies),
             ('journal_id', 'in', self.ids),
             ('move_id.payment_state', 'in', ('not_paid', 'partial')),
+            ('account_type', '=', 'liability_payable'),
             ('date_maturity', '<', fields.Date.context_today(self)),
-            ('amount_residual', '<', 0),
+            ('move_id.move_type', '=', 'in_invoice'),
             ('parent_state', '=', 'posted'),
-            ('journal_id.type', '=', 'purchase'),
         ])
 
     def _count_results_and_sum_amounts(self, results_dict, target_currency):

--- a/addons/account/models/account_move_line.py
+++ b/addons/account/models/account_move_line.py
@@ -402,7 +402,7 @@ class AccountMoveLine(models.Model):
     # === Payment Fields === #
     # payment_date is the closest date to the date the aml was created between discount_date and date_maturity.
     payment_date = fields.Date(
-        string='Payment Date',
+        string='Next Payment Date',
         compute='_compute_payment_date',
         search='_search_payment_date',
     )
@@ -1164,19 +1164,25 @@ class AccountMoveLine(models.Model):
                 '&', ('discount_date', '=', False), ('date_maturity', operator, value),
             ]
 
-    def action_register_payment(self):
+    def action_payment_items_register_payment(self):
+        return self.action_register_payment({'force_group_payment': True})
+
+    def action_register_payment(self, ctx=None):
         ''' Open the account.payment.register wizard to pay the selected journal items.
         :return: An action opening the account.payment.register wizard.
         '''
+        context = {
+            'active_model': 'account.move.line',
+            'active_ids': self.ids,
+        }
+        if ctx:
+            context.update(ctx)
         return {
             'name': _('Register Payment'),
             'res_model': 'account.payment.register',
             'view_mode': 'form',
             'views': [[False, 'form']],
-            'context': {
-                'active_model': 'account.move.line',
-                'active_ids': self.ids,
-            },
+            'context': context,
             'target': 'new',
             'type': 'ir.actions.act_window',
         }
