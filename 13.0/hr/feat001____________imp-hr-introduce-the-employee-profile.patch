PR: https://github.com/odoo/odoo/pull/

From: d77ce4c2a92c1da48150e4e84b714dd93f64847d
From: Lucas LefÃ¨vre
Date: 2019-02-14 15:28:54

Breaking data model changes score: 1, change matches:
+    category_ids = fields.Many2many(related='employee_id.category_ids', string="Employee Tags", readonly=False, related_sudo=False)

Total Changes: 243

[IMP] hr_*: introduce the employee profile

General Purpose
===============

We want an 'Employee profile' gathering every data about an employee.
The main form view is modified to become this employee profile.
A user can also see his own profile through the Preferences menu.
The new profile replaces the current Preferences view if the hr module is installed
and the current user is linked to an employee.

A user should be able to see and edit his own profile.

*Problem*:
Many fields on hr.employee are protected by groups="hr.group_hr_user".
Therefore, a regular user cannot see or edit those fields.

This protection must be bypassed to allow read/write access
to the regular user's own data.
A similar mechanism already exists for res.users (for Preferences)

The better (least worst) solution found is to reuse this mechanism by adding related fields on res.users.

Pros:
- Don't change security access on hr.employee
- Don't implement yet another custom security layer, risking to add new security breaches
- A lot of fields are added by other modules on hr.employee.
  It would have required to integrate them with the custom security layer.
- Fields added by other modules on the user's preferences view (normal view, not the profile)
  are automatically included in the employee's profile view.
- Allow the hr.employee form view to be different than the user profile accessible
  through the Preferences menu.
  E.g. add custom buttons only relevant to the logged in user such as "Request a leave".
Cons:
- Each field from hr.employee that you want to appear on its profile
  must be added as a related field on res.users
- Those related fields must be added to user's preferences view (duplicate views)
- They also must be added to SELF_[READABLE | WRITABLE]_FIELDS

Note:
When the front-end loads the views it gets the list of available fields
for the user (according to its access rights). Later, when the front-end wants to
populate the view with data, it only asks to read those available fields.
However, in this case, we want the user to be able to read/write its own data,
even if they are protected by groups (groups are kept on the related fields on res.users).
The front-end need to be made  aware of those fields by sending all field definitions.

hr_attendance
=============

This commit integrate attendance in the new employee profile.
It also adds a stat button to this employee profile showing
the number of hours worked last month.

Remove the boolean computed field 'manual_attendance'.
This field is just a shortcut to add/remove the employee's user
in the "Manual Attendance" group.
The checkbox is confusing on the employee's form and this should
be done through the normal group management screens.

hr_presence
===========

Display the presence status on the employee kanban template.
The status is a colored chip which can be green (present),
orange (to define) or red (absent).

Currently, the presence status is only computed when accessing
the report view. As this commits displays it on the employee kanban,
it should be updated more frequently.
The state should not be updated every time the kanban view is loaded
since the computation is a bit heavy. Instead: add a cron to update
status every 15 minutes.
-> The status is accurate on the report view (status is still updated
   when loading the view)
-> The status in accurate at 15 minutes on the kanban view

[ADD] hr_attendance_presence
============================

Bridge module between hr_attendance and hr_presence.

This commit integrates hr_presence module in the employee
profile and adds the presence status on the employee kanban view.
But hr_attendance adds at the same place a similar status icon for
checkin/checkout.
This bridge module makes the status from hr_presence invisible as
hr_attendance should be the main presence control mechanism.

Also, this commit adds the ability (through a new setting option)
for hr_presence to take into account checkin/checkout to determine
the presence status.

l10n_be_hr_payroll
==================
integration with employee profile

================================= pseudo patch: =================================

--- a/addons/hr/models/hr.py
+++ b/addons/hr/models/hr.py
@@ -6,7 +6,7 @@ import base64
 import logging
 from werkzeug import url_encode
 
-from odoo import api, fields, models
+from odoo import api, fields, models, SUPERUSER_ID
 from odoo import tools, _
 from odoo.exceptions import ValidationError, AccessError
 from odoo.modules.module import get_module_resource
@@ -110,61 +110,63 @@ class Employee(models.Model):
 
     # resource and user
     # required on the resource, make sure required="True" set in the view
-    name = fields.Char(related='resource_id.name', store=True, oldname='name_related', readonly=False)
+    name = fields.Char(related='resource_id.name', store=True, oldname='name_related', readonly=False, tracking=True)
     user_id = fields.Many2one('res.users', 'User', related='resource_id.user_id', store=True, readonly=False)
+    user_partner_id = fields.Many2one(related='user_id.partner_id', related_sudo=False, string="User's partner")
     active = fields.Boolean('Active', related='resource_id.active', default=True, store=True, readonly=False)
     # private partner
     address_home_id = fields.Many2one(
         'res.partner', 'Private Address', help='Enter here the private address of the employee, not the one linked to your company.',
-        groups="hr.group_hr_user")
+        groups="hr.group_hr_user", tracking=True)
     is_address_home_a_company = fields.Boolean(
         'The employee adress has a company linked',
         compute='_compute_is_address_home_a_company',
     )
     country_id = fields.Many2one(
-        'res.country', 'Nationality (Country)', groups="hr.group_hr_user")
+        'res.country', 'Nationality (Country)', groups="hr.group_hr_user", tracking=True)
     gender = fields.Selection([
         ('male', 'Male'),
         ('female', 'Female'),
         ('other', 'Other')
-    ], groups="hr.group_hr_user", default="male")
+    ], groups="hr.group_hr_user", default="male", tracking=True)
     marital = fields.Selection([
         ('single', 'Single'),
         ('married', 'Married'),
         ('cohabitant', 'Legal Cohabitant'),
         ('widower', 'Widower'),
         ('divorced', 'Divorced')
-    ], string='Marital Status', groups="hr.group_hr_user", default='single')
-    spouse_complete_name = fields.Char(string="Spouse Complete Name", groups="hr.group_hr_user")
-    spouse_birthdate = fields.Date(string="Spouse Birthdate", groups="hr.group_hr_user")
-    children = fields.Integer(string='Number of Children', groups="hr.group_hr_user")
-    place_of_birth = fields.Char('Place of Birth', groups="hr.group_hr_user")
-    country_of_birth = fields.Many2one('res.country', string="Country of Birth", groups="hr.group_hr_user")
-    birthday = fields.Date('Date of Birth', groups="hr.group_hr_user")
-    ssnid = fields.Char('SSN No', help='Social Security Number', groups="hr.group_hr_user")
-    sinid = fields.Char('SIN No', help='Social Insurance Number', groups="hr.group_hr_user")
-    identification_id = fields.Char(string='Identification No', groups="hr.group_hr_user")
-    passport_id = fields.Char('Passport No', groups="hr.group_hr_user")
+    ], string='Marital Status', groups="hr.group_hr_user", default='single', tracking=True)
+    spouse_complete_name = fields.Char(string="Spouse Complete Name", groups="hr.group_hr_user", tracking=True)
+    spouse_birthdate = fields.Date(string="Spouse Birthdate", groups="hr.group_hr_user", tracking=True)
+    children = fields.Integer(string='Number of Children', groups="hr.group_hr_user", tracking=True)
+    place_of_birth = fields.Char('Place of Birth', groups="hr.group_hr_user", tracking=True)
+    country_of_birth = fields.Many2one('res.country', string="Country of Birth", groups="hr.group_hr_user", tracking=True)
+    birthday = fields.Date('Date of Birth', groups="hr.group_hr_user", tracking=True)
+    ssnid = fields.Char('SSN No', help='Social Security Number', groups="hr.group_hr_user", tracking=True)
+    sinid = fields.Char('SIN No', help='Social Insurance Number', groups="hr.group_hr_user", tracking=True)
+    identification_id = fields.Char(string='Identification No', groups="hr.group_hr_user", tracking=True)
+    passport_id = fields.Char('Passport No', groups="hr.group_hr_user", tracking=True)
     bank_account_id = fields.Many2one(
         'res.partner.bank', 'Bank Account Number',
         domain="[('partner_id', '=', address_home_id)]",
         groups="hr.group_hr_user",
+        tracking=True,
         help='Employee bank salary account')
-    permit_no = fields.Char('Work Permit No', groups="hr.group_hr_user")
-    visa_no = fields.Char('Visa No', groups="hr.group_hr_user")
-    visa_expire = fields.Date('Visa Expire Date', groups="hr.group_hr_user")
-    additional_note = fields.Text(string='Additional Note', groups="hr.group_hr_user")
+    permit_no = fields.Char('Work Permit No', groups="hr.group_hr_user", tracking=True)
+    visa_no = fields.Char('Visa No', groups="hr.group_hr_user", tracking=True)
+    visa_expire = fields.Date('Visa Expire Date', groups="hr.group_hr_user", tracking=True)
+    additional_note = fields.Text(string='Additional Note', groups="hr.group_hr_user", tracking=True)
     certificate = fields.Selection([
         ('bachelor', 'Bachelor'),
         ('master', 'Master'),
         ('other', 'Other'),
-    ], 'Certificate Level', default='master', groups="hr.group_hr_user")
-    study_field = fields.Char("Field of Study", placeholder='Computer Science', groups="hr.group_hr_user")
-    study_school = fields.Char("School", groups="hr.group_hr_user")
-    emergency_contact = fields.Char("Emergency Contact", groups="hr.group_hr_user")
-    emergency_phone = fields.Char("Emergency Phone", groups="hr.group_hr_user")
-    km_home_work = fields.Integer(string="Km home-work", groups="hr.group_hr_user")
-    google_drive_link = fields.Char(string="Employee Documents", groups="hr.group_hr_user")
+    ], 'Certificate Level', default='master', groups="hr.group_hr_user", tracking=True)
+    study_field = fields.Char("Field of Study", placeholder='Computer Science', groups="hr.group_hr_user", tracking=True)
+    study_school = fields.Char("School", groups="hr.group_hr_user", tracking=True)
+    emergency_contact = fields.Char("Emergency Contact", groups="hr.group_hr_user", tracking=True)
+    emergency_phone = fields.Char("Emergency Phone", groups="hr.group_hr_user", tracking=True)
+    km_home_work = fields.Integer(string="Km home-work", groups="hr.group_hr_user", tracking=True)
+    google_drive_link = fields.Char(string="Employee Documents", groups="hr.group_hr_user", tracking=True)
     job_title = fields.Char("Job Title")
 
     # image: all image fields are base64 encoded and PIL-supported
@@ -186,6 +188,7 @@ class Employee(models.Model):
         'res.partner', 'Work Address')
     work_phone = fields.Char('Work Phone')
     mobile_phone = fields.Char('Work Mobile')
+    phone = fields.Char(related='address_home_id.phone', related_sudo=False, string="Private Phone", groups="hr.group_hr_user")
     work_email = fields.Char('Work Email')
     work_location = fields.Char('Work Location')
     # employee in company
@@ -210,7 +213,10 @@ class Employee(models.Model):
     ], string="Departure Reason")
     departure_description = fields.Text(string="Additional Information")
 
-    _sql_constraints = [('barcode_uniq', 'unique (barcode)', "The Badge ID must be unique, this one is already assigned to another employee.")]
+    _sql_constraints = [
+        ('barcode_uniq', 'unique (barcode)', "The Badge ID must be unique, this one is already assigned to another employee."),
+        ('user_uniq', 'unique (user_id, company_id)', "A user cannot be linked to multiple employees in the same company.")
+    ]
 
     @api.constrains('pin')
     def _verify_pin(self):
@@ -341,6 +347,27 @@ class Employee(models.Model):
             'template': '/hr/static/xls/hr_employee.xls'
         }]
 
+    def _post_author(self):
+        """
+        When a user updates his own employee's data, all operations are performed
+        by super user. However, tracking messages should not be posted as OdooBot
+        but as the actual user.
+        This method is used in the overrides of `_message_log` and `message_post`
+        to post messages as the correct user.
+        """
+        real_user = self.env.context.get('binary_field_real_user')
+        if self.env.user.id == SUPERUSER_ID and real_user:
+            self = self.sudo(real_user)
+        return self
+
+    def _message_log(self, body='', subject=False, message_type='notification', **kwargs):
+        return super(Employee, self._post_author()).message_post(body=body, subject=subject, message_type=message_type, **kwargs)
+
+    @api.multi
+    @api.returns('mail.message', lambda value: value.id)
+    def message_post(self, **kwargs):
+        return super(Employee, self._post_author()).message_post(**kwargs)
+
 
 class Department(models.Model):
     _name = "hr.department"

--- a/addons/hr/models/res_config_settings.py
+++ b/addons/hr/models/res_config_settings.py
@@ -14,3 +14,4 @@ class ResConfigSettings(models.TransientModel):
     hr_presence_control_login = fields.Boolean(string="According to the system login (User status on chat)", config_parameter='hr.hr_presence_control_login')
     hr_presence_control_email = fields.Boolean(string="According to the amount of sent emails", config_parameter='hr.hr_presence_control_email')
     hr_presence_control_ip = fields.Boolean(string="According to the IP address", config_parameter='hr.hr_presence_control_ip')
+    hr_employee_self_edit = fields.Boolean(string="Employee Edition", config_parameter='hr.hr_employee_self_edit')

--- a/addons/hr/models/res_partner.py
+++ b/addons/hr/models/res_partner.py
@@ -22,3 +22,17 @@ class Partner(models.Model):
             return suggestions
         except AccessError:
             return suggestions
+
+    @api.multi
+    def name_get(self):
+        """ Override to allow an employee to see its private address in his profile.
+            This avoids to relax access rules on `res.parter` and to add an `ir.rule`.
+            (advantage in both security and performance).
+            Use a try/except instead of systematically checking to minimize the impact on performance.
+            """
+        try:
+            return super(Partner, self).name_get()
+        except AccessError as e:
+            if len(self) == 1 and self in self.env.user.employee_ids.mapped('address_home_id'):
+                return super(Partner, self.sudo()).name_get()
+            raise e

--- a/addons/hr/models/res_users.py
+++ b/addons/hr/models/res_users.py
@@ -1,21 +1,160 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, models, fields
+from odoo import api, models, fields, _
+from odoo.exceptions import AccessError
 
 
 class User(models.Model):
     _inherit = ['res.users']
 
-    employee_ids = fields.One2many('hr.employee', 'user_id', string='Related employees')
+    # note: a user can only be linked to one employee per company (see sql constraint in Â´hr.employeeÂ´)
+    employee_ids = fields.One2many('hr.employee', 'user_id', string='Related employee')
+    employee_id = fields.Many2one('hr.employee', string="Company employee", compute='_compute_company_employee', store=True)
+
+    job_title = fields.Char(related='employee_id.job_title', readonly=False)
+    work_phone = fields.Char(related='employee_id.work_phone', readonly=False)
+    mobile_phone = fields.Char(related='employee_id.mobile_phone', readonly=False)
+    phone = fields.Char(related='employee_id.phone', readonly=False, related_sudo=False)
+    work_email = fields.Char(related='employee_id.work_email', readonly=False, related_sudo=False)
+    category_ids = fields.Many2many(related='employee_id.category_ids', string="Employee Tags", readonly=False, related_sudo=False)
+    department_id = fields.Many2one(related='employee_id.department_id', readonly=False, related_sudo=False)
+    address_id = fields.Many2one(related='employee_id.address_id', readonly=False, related_sudo=False)
+    work_location = fields.Char(related='employee_id.work_location', readonly=False, related_sudo=False)
+    parent_id = fields.Many2one(related='employee_id.parent_id', related_sudo=False)
+    coach_id = fields.Many2one(related='employee_id.coach_id', readonly=False, related_sudo=False)
+    address_home_id = fields.Many2one(related='employee_id.address_home_id', readonly=False, related_sudo=False)
+    is_address_home_a_company = fields.Boolean(related='employee_id.is_address_home_a_company', readonly=False, related_sudo=False)
+    km_home_work = fields.Integer(related='employee_id.km_home_work', readonly=False, related_sudo=False)
+    # res.users already have a field bank_account_id and country_id from the res.partner inheritance: don't redefine them
+    employee_bank_account_id = fields.Many2one(related='employee_id.bank_account_id', string="Employee's Bank Account Number", related_sudo=False, readonly=False)
+    employee_country_id = fields.Many2one(related='employee_id.country_id', string="Employee's Country", readonly=False, related_sudo=False)
+    identification_id = fields.Char(related='employee_id.identification_id', readonly=False, related_sudo=False)
+    passport_id = fields.Char(related='employee_id.passport_id', readonly=False, related_sudo=False)
+    gender = fields.Selection(related='employee_id.gender', readonly=False, related_sudo=False)
+    birthday = fields.Date(related='employee_id.birthday', readonly=False, related_sudo=False)
+    place_of_birth = fields.Char(related='employee_id.place_of_birth', readonly=False, related_sudo=False)
+    country_of_birth = fields.Many2one(related='employee_id.country_of_birth', readonly=False, related_sudo=False)
+    marital = fields.Selection(related='employee_id.marital', readonly=False, related_sudo=False)
+    spouse_complete_name = fields.Char(related='employee_id.spouse_complete_name', readonly=False, related_sudo=False)
+    spouse_birthdate = fields.Date(related='employee_id.spouse_birthdate', readonly=False, related_sudo=False)
+    children = fields.Integer(related='employee_id.children', readonly=False, related_sudo=False)
+    emergency_contact = fields.Char(related='employee_id.emergency_contact', readonly=False, related_sudo=False)
+    emergency_phone = fields.Char(related='employee_id.emergency_phone', readonly=False, related_sudo=False)
+    visa_no = fields.Char(related='employee_id.visa_no', readonly=False, related_sudo=False)
+    permit_no = fields.Char(related='employee_id.permit_no', readonly=False, related_sudo=False)
+    visa_expire = fields.Date(related='employee_id.visa_expire', readonly=False, related_sudo=False)
+    google_drive_link = fields.Char(related='employee_id.google_drive_link', readonly=False, related_sudo=False)
+    additional_note = fields.Text(related='employee_id.additional_note', readonly=False, related_sudo=False)
+    barcode = fields.Char(related='employee_id.barcode', readonly=False, related_sudo=False)
+    pin = fields.Char(related='employee_id.pin', readonly=False, related_sudo=False)
+
+    def __init__(self, pool, cr):
+        """ Override of __init__ to add access rights.
+            Access rights are disabled by default, but allowed
+            on some specific fields defined in self.SELF_{READ/WRITE}ABLE_FIELDS.
+        """
+        hr_readable_fields = [
+            'active',
+            'child_ids',
+            'employee_id',
+            'employee_ids',
+            'parent_id',
+        ]
+
+        hr_writable_fields = [
+            'additional_note',
+            'address_home_id',
+            'address_id',
+            'barcode',
+            'birthday',
+            'category_ids',
+            'children',
+            'coach_id',
+            'country_of_birth',
+            'department_id',
+            'display_name',
+            'emergency_contact',
+            'emergency_phone',
+            'employee_bank_account_id',
+            'employee_country_id',
+            'gender',
+            'google_drive_link',
+            'identification_id',
+            'is_address_home_a_company',
+            'job_title',
+            'km_home_work',
+            'marital',
+            'mobile_phone',
+            'notes',
+            'parent_id',
+            'passport_id',
+            'permit_no',
+            'phone',
+            'pin',
+            'place_of_birth',
+            'spouse_birthdate',
+            'spouse_complete_name',
+            'visa_expire',
+            'visa_no',
+            'work_email',
+            'work_location',
+            'work_phone'
+        ]
+
+        init_res = super(User, self).__init__(pool, cr)
+        # duplicate list to avoid modifying the original reference
+        type(self).SELF_READABLE_FIELDS = type(self).SELF_READABLE_FIELDS + hr_readable_fields + hr_writable_fields
+        type(self).SELF_WRITEABLE_FIELDS = type(self).SELF_WRITEABLE_FIELDS + hr_writable_fields
+        return init_res
+
+    @api.model
+    def fields_view_get(self, view_id=None, view_type='form', toolbar=False, submenu=False):
+        # When the front-end loads the views it gets the list of available fields
+        # for the user (according to its access rights). Later, when the front-end wants to
+        # populate the view with data, it only asks to read those available fields.
+        # However, in this case, we want the user to be able to read/write its own data,
+        # even if they are protected by groups.
+        # We make the front-end aware of those fields by sending all field definitions.
+        if not self.env.user.share:
+            self = self.sudo()
+        return super(User, self).fields_view_get(view_id=view_id, view_type=view_type, toolbar=toolbar, submenu=submenu)
 
     @api.multi
     def write(self, vals):
-        """ Synchronize user and its related employee """
+        """
+        Synchronize user and its related employee
+        and check access rights if employees are not allowed to update
+        their own data (otherwise sudo is applied for self data).
+        """
+        hr_fields = {
+            field
+            for field_name, field in self._fields.items()
+            if field.related_field and field.related_field.model_name == 'hr.employee' and field_name in vals
+        }
+        can_edit_self = self.env['ir.config_parameter'].sudo().get_param('hr.hr_employee_self_edit') or self.env.user.has_group('hr.group_hr_user')
+        if hr_fields and not can_edit_self:
+            # Raise meaningful error message
+            raise AccessError(_("You are only allowed to update your preferences. Please contact a HR officer to update other informations."))
+
         result = super(User, self).write(vals)
+
         employee_values = {}
         for fname in [f for f in ['name', 'email', 'image', 'tz'] if f in vals]:
             employee_values[fname] = vals[fname]
         if employee_values:
+            if 'email' in employee_values:
+                employee_values['work_email'] = employee_values.pop('email')
             self.env['hr.employee'].sudo().search([('user_id', 'in', self.ids)]).write(employee_values)
         return result
+
+    @api.model
+    def action_get(self):
+        if self.env.user.employee_id:
+            return self.sudo().env.ref('hr.res_users_action_my').read()[0]
+        return super(User, self).action_get()
+
+    @api.depends('company_id', 'employee_ids')
+    def _compute_company_employee(self):
+        for user in self:
+            user.employee_id = self.env['hr.employee'].search([('id', 'in', user.employee_ids.ids), ('company_id', '=', user.company_id.id)], limit=1)
