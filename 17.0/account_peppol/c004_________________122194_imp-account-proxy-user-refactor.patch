PR: https://github.com/odoo/odoo/pull/122194

From: 43fc30a3f70a7fea47cfb17226b69d09277e6f87
From: Paolo Gatti (pgi)
Date: 2023-09-19 16:37:09

Structural Changes: 2
Total Changes: 32

[IMP] account_*: Proxy user refactor

- Proxy user is no longer a computed store=True field, but a proper one.
  The type cannot be deduced just by some field on the company.
  A company may be Italian and also use Peppol, so the two Proxy Users
  must be different.
- The Proxy user `get_proxy_identification` method needs a proxy_type
  argument, otherwise the method won't know if the current override
  is to be applied or not. It cannot be handled by a field of the user
  itself because it is also used contextually to the user creation.
- new `_get_default_enable_send_by_post` function on the Send and Print
  wizard, so that it can be overridden by the features of the move
- Renamed `_compute_send_mail_extra_fields`
  to `_compute_fields_from_moves_state`

Part-of: odoo/odoo#122194

================================= pseudo patch: =================================

--- a/addons/account_peppol/models/account_edi_proxy_user.py
+++ b/addons/account_peppol/models/account_edi_proxy_user.py
@@ -14,9 +14,7 @@ class AccountEdiProxyClientUser(models.Model):
     _inherit = 'account_edi_proxy_client.user'
 
     peppol_verification_code = fields.Char(string='SMS verification code')
-    proxy_type = fields.Selection(
-        selection_add=[('peppol', 'PEPPOL')],
-    )
+    proxy_type = fields.Selection(selection_add=[('peppol', 'PEPPOL')], ondelete={'peppol': 'cascade'})
 
     # -------------------------------------------------------------------------
     # HELPER METHODS
@@ -65,26 +63,18 @@ class AccountEdiProxyClientUser(models.Model):
 
         return super()._get_server_url(proxy_type, edi_mode)
 
-    def _get_proxy_identification(self, company):
-        if not company.peppol_eas or not company.peppol_endpoint:
-            raise UserError(_("Please fill in the EAS code and the Participant ID code."))
-        return f'{company.peppol_eas}:{company.peppol_endpoint}'
-
-    # -------------------------------------------------------------------------
-    # COMPUTE METHODS
-    # -------------------------------------------------------------------------
-
-    def _compute_proxy_type(self):
-        # Extends account_edi_proxy_client
-        super()._compute_proxy_type()
-        for user in self:
-            if user.company_id.is_account_peppol_participant:
-                user.proxy_type = 'peppol'
-
     # -------------------------------------------------------------------------
     # BUSINESS ACTIONS
     # -------------------------------------------------------------------------
 
+    def _get_proxy_identification(self, company, proxy_type):
+        if proxy_type == 'peppol':
+            if not company.peppol_eas or not company.peppol_endpoint:
+                raise UserError(
+                    _("Please fill in the EAS code and the Participant ID code."))
+            return f'{company.peppol_eas}:{company.peppol_endpoint}'
+        return super()._get_proxy_identification(company, proxy_type)
+
     def _cron_peppol_get_new_documents(self):
         # Retrieve all new Peppol documents for every edi user in the database
         edi_users = self.env['account_edi_proxy_client.user'].search(

--- a/addons/account_peppol/models/res_config_settings.py
+++ b/addons/account_peppol/models/res_config_settings.py
@@ -118,9 +118,7 @@ class ResConfigSettings(models.TransientModel):
 
         company = self.company_id
         edi_proxy_client = self.env['account_edi_proxy_client.user']
-        edi_identification = edi_proxy_client._get_proxy_identification(company)
-        edi_user = edi_proxy_client.sudo()._register_proxy_user(
-            company, 'peppol', 'prod', edi_identification)
+        edi_user = edi_proxy_client.sudo()._register_proxy_user(company, 'peppol', 'prod')
         self.account_peppol_proxy_state = 'not_verified'
 
         # if there is an error when activating the participant below,
