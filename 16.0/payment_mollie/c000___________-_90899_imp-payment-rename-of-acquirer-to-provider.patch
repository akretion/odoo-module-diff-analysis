PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Breaking data model changes score: 2, change matches:
-    _inherit = 'payment.acquirer'
-    provider = fields.Selection(

Total Changes: 176

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_mollie/models/__init__.py
+++ b/addons/payment_mollie/models/__init__.py
@@ -1,4 +1,4 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_transaction

--- a/addons/payment_mollie/models/payment_acquirer.py
+++ b/addons/payment_mollie/models/payment_provider.py
@@ -13,30 +13,30 @@ from odoo.addons.payment_mollie.const import SUPPORTED_CURRENCIES
 _logger = logging.getLogger(__name__)
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('mollie', 'Mollie')], ondelete={'mollie': 'set default'}
     )
     mollie_api_key = fields.Char(
         string="Mollie API Key",
-        help="The Test or Live API Key depending on the configuration of the acquirer",
+        help="The Test or Live API Key depending on the configuration of the provider",
         required_if_provider="mollie", groups="base.group_system"
     )
 
     #=== BUSINESS METHODS ===#
 
     @api.model
-    def _get_compatible_acquirers(self, *args, currency_id=None, **kwargs):
-        """ Override of payment to unlist Mollie acquirers for unsupported currencies. """
-        acquirers = super()._get_compatible_acquirers(*args, currency_id=currency_id, **kwargs)
+    def _get_compatible_providers(self, *args, currency_id=None, **kwargs):
+        """ Override of payment to unlist Mollie providers for unsupported currencies. """
+        providers = super()._get_compatible_providers(*args, currency_id=currency_id, **kwargs)
 
         currency = self.env['res.currency'].browse(currency_id).exists()
         if currency and currency.name not in SUPPORTED_CURRENCIES:
-            acquirers = acquirers.filtered(lambda a: a.provider != 'mollie')
+            providers = providers.filtered(lambda p: p.code != 'mollie')
 
-        return acquirers
+        return providers
 
     def _mollie_make_request(self, endpoint, data=None, method='POST'):
         """ Make a request at mollie endpoint.

--- a/addons/payment_mollie/models/payment_transaction.py
+++ b/addons/payment_mollie/models/payment_transaction.py
@@ -24,19 +24,19 @@ class PaymentTransaction(models.Model):
         Note: self.ensure_one() from `_get_processing_values`
 
         :param dict processing_values: The generic and specific processing values of the transaction
-        :return: The dict of acquirer-specific rendering values
+        :return: The dict of provider-specific rendering values
         :rtype: dict
         """
         res = super()._get_specific_rendering_values(processing_values)
-        if self.provider != 'mollie':
+        if self.provider_code != 'mollie':
             return res
 
         payload = self._mollie_prepare_payment_request_payload()
         _logger.info("sending '/payments' request for link creation:\n%s", pprint.pformat(payload))
-        payment_data = self.acquirer_id._mollie_make_request('/payments', data=payload)
+        payment_data = self.provider_id._mollie_make_request('/payments', data=payload)
 
-        # The acquirer reference is set now to allow fetching the payment status after redirection
-        self.acquirer_reference = payment_data.get('id')
+        # The provider reference is set now to allow fetching the payment status after redirection
+        self.provider_reference = payment_data.get('id')
 
         # Extract the checkout URL from the payment data and add it with its query parameters to the
         # rendering values. Passing the query parameters separately is necessary to prevent them
@@ -54,7 +54,7 @@ class PaymentTransaction(models.Model):
         :rtype: dict
         """
         user_lang = self.env.context.get('lang')
-        base_url = self.acquirer_id.get_base_url()
+        base_url = self.provider_id.get_base_url()
         redirect_url = urls.url_join(base_url, MollieController._return_url)
         webhook_url = urls.url_join(base_url, MollieController._webhook_url)
 
@@ -72,21 +72,21 @@ class PaymentTransaction(models.Model):
             'webhookUrl': f'{webhook_url}?ref={self.reference}',
         }
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of payment to find the transaction based on Mollie data.
 
-        :param str provider: The provider of the acquirer that handled the transaction
+        :param str provider_code: The code of the provider that handled the transaction
         :param dict notification_data: The notification data sent by the provider
         :return: The transaction if found
         :rtype: recordset of `payment.transaction`
         :raise: ValidationError if the data match no transaction
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'mollie' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'mollie' or len(tx) == 1:
             return tx
 
         tx = self.search(
-            [('reference', '=', notification_data.get('ref')), ('provider', '=', 'mollie')]
+            [('reference', '=', notification_data.get('ref')), ('provider_code', '=', 'mollie')]
         )
         if not tx:
             raise ValidationError("Mollie: " + _(
@@ -103,11 +103,11 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'mollie':
+        if self.provider_code != 'mollie':
             return
 
-        payment_data = self.acquirer_id._mollie_make_request(
-            f'/payments/{self.acquirer_reference}', method="GET"
+        payment_data = self.provider_id._mollie_make_request(
+            f'/payments/{self.provider_reference}', method="GET"
         )
         payment_status = payment_data.get('status')
 
