PR: https://github.com/odoo/odoo/pull/

From: 59b4836e8d14abdca49e43cdd72b2151e78230d4
From: David Beguin
Date: 2018-08-10 15:46:08

Breaking data model changes score: 5, change matches:
+    subscription_contact_ids = fields.One2many('mail.mass_mailing.list_contact_rel', 'list_id',
-    _inherit = 'mail.thread'
-    opt_out = fields.Boolean(string='Opt Out', help='The contact has chosen not to receive mails anymore from this list')
-    unsubscription_date = fields.Datetime(string='Unsubscription Date')
+    subscription_list_ids = fields.One2many('mail.mass_mailing.list_contact_rel',

Total Changes: 158

[IMP] mail, mass_mailing : apply blacklist, opt_out per mailing list

Purpose
=======
* Apply the blacklist implementation to Improve mailing subscription to be more
  compliant with the European GDPR law. Keep a list of people who does not want
  to receive promotional emails (or mass mailing in general) anymore.
* Allows the recipient to update himself his mailing preferences

Specifications
===========
This commit is regrouping some main changes on mass mailing.
  Apply Blacklist for following models through blacklist.mixin :
    - crm.lead
    - res.partner
    - mail.mass_mailing.contact
    - mail.channel.partner
* Opt_out per mailing list instead of per mailing contact.
* Replace opt_out by blacklist in crm.lead + res.partner models
* Added 'ignored' state for mass_mailing. Ignored = blacklisted, opted-out
  Ignored email are not included into final statistics to avoid confusion.
* Unsubscribe(d) pages migrated from website_mass_mailing to mass_mailing module
  as thoses pages should work without having the website module installed

Detailed implementation
===================
Mass-mailing :
	- A blacklisted email is notified by the ban icon next to the email field.
	  (at the left of the email field for display purpose)
	- Renaming the '_get_blacklist' method that was actually
	  searching opt_out list into 'get_opt_out_list'
	- Opt out per mailing list : Add opt_out + related fields (for display and
	  ergonomy reasons) on the relational model
	- Display relational model tree view instead of mass_mailing.contact tree
	  view when clicking on mass_mailing_list in kanban view
	  -> In order to be align between contact_nbr displayed in kanban tile and
	     the content of the tree view
	  -> mass_mailing contact is accesible via the user icon in this tree view
	- Remove custom filters 'filter_contact_subscription' and
	  'filter_contact_unsubscription' as opt_out is not on mass_mailing.contact
	  model anymore
	- Add 'is_public' to mailing list
	    The name of this mailing list can be seen (or not) by recipient in
	    the unsubscription page
	    If the mailing lists used in the mass mailing are not public,
	    the user in only informed that he has been unsubscribed.
	    If the mailing lists are public, the user is informed that he has been
	    unsubscribed from the mailing lists
	    and he has the choice to modify his subscription to all the public
	    mailing list he is or was subscribed to.
	- Unsubscription Page :
		- mass_mailing_contact :
		  Opt_out per mailing list, done by email and not by id, as multiple
		  contact can have the same email
		  The recipient can add/remove himself to/from the blacklist
		  The recipient can send a feedback about why he unsubscribed
		- crm.lead + res.partner :
		  Once the recipient unsubscribe, he is automatically blacklisted
		  The recipient can 'Come back' and remove himself from the blacklist
		  if he changes his mind
		- Show blacklist button parameter added in config :
		  The idea is to enable/disable the fact that the recipient can add
		  himself to the blacklist by showing or not the 'blacklist me' button
		  Only applies for mass_mailing.contact. The recipient, once
		  blacklisted, can always, no matter the value of this parameter,
		  'come back' and unblacklist himself

crm.lead + res.partner :
	- Replace opt_out by blacklist in crm.lead + res.partner models.
	  As when a res.partner or crm.lead unsubcribe, we assume that the recipient
	  does not want to receive mass mailing anymore, at all, even if we adds him
	  to a mailing list afterwards. He is then blacklisted to avoid this.
	  With this behaviour, if a new lead is created with the same email address,
	  he won't be able to receive mail in mass_mode.
	  But he will still be able to receive '1 to 1' direct email.

Task ID 33224
Closes #25966

================================= pseudo patch: =================================

--- a/addons/mass_mailing/models/mass_mailing.py
+++ b/addons/mass_mailing/models/mass_mailing.py
@@ -38,6 +38,53 @@ class MassMailingTag(models.Model):
             ('name_uniq', 'unique (name)', "Tag name already exists !"),
     ]
 
+class MassMailingContactListRel(models.Model):
+    """ Intermediate model between mass mailing list and mass mailing contact
+        Indicates if a contact is opted out for a particular list
+    """
+    _name = 'mail.mass_mailing.list_contact_rel'
+    _description = 'Mass Mailing Subscription Information'
+    _table = 'mail_mass_mailing_contact_list_rel'
+    _rec_name = 'contact_id'
+
+    contact_id = fields.Many2one('mail.mass_mailing.contact', string='Contact', ondelete='cascade', required=True)
+    list_id = fields.Many2one('mail.mass_mailing.list', string='Mailing List', ondelete='cascade', required=True)
+    opt_out = fields.Boolean(string='Opt Out',
+                             help='The contact has chosen not to receive mails anymore from this list', default=False)
+    unsubscription_date = fields.Datetime(string='Unsubscription Date')
+    contact_count = fields.Integer(related='list_id.contact_nbr', store=False)
+    message_bounce = fields.Integer(related='contact_id.message_bounce', store=False)
+    is_blacklisted = fields.Boolean(related='contact_id.is_blacklisted', store=False)
+
+    _sql_constraints = [
+        ('unique_contact_list', 'unique (contact_id, list_id)',
+         'A contact cannot be subscribed multiple times to the same list!')
+    ]
+
+    @api.model
+    def create(self, vals):
+        if 'opt_out' in vals:
+            vals['unsubscription_date'] = vals['opt_out'] and fields.Datetime.now()
+        return super(MassMailingContactListRel, self).create(vals)
+
+    @api.multi
+    def write(self, vals):
+        if 'opt_out' in vals:
+            vals['unsubscription_date'] = vals['opt_out'] and fields.Datetime.now()
+        return super(MassMailingContactListRel, self).write(vals)
+
+    def action_open_mailing_list_contact(self):
+        contact_id = self.contact_id
+        action = {
+            'name': _(contact_id.name),
+            'type': 'ir.actions.act_window',
+            'res_model': 'mail.mass_mailing.contact',
+            'view_mode': 'form',
+            'target': 'current',
+            'res_id': contact_id.id
+        }
+        return action
+
 
 class MassMailingList(models.Model):
     """Model of a contact list. """
@@ -52,8 +99,12 @@ class MassMailingList(models.Model):
     contact_ids = fields.Many2many(
         'mail.mass_mailing.contact', 'mail_mass_mailing_contact_list_rel', 'list_id', 'contact_id',
         string='Mailing Lists')
+    subscription_contact_ids = fields.One2many('mail.mass_mailing.list_contact_rel', 'list_id',
+        string='Subscription Information')
+    is_public = fields.Boolean(default=True, help="The mailing list can be accessible by recipient in the unsubscription"
+                                                  " page to allows him to update his subscription preferences.")
 
-    # Compute number of contacts non opt-out for a mailing list
+    # Compute number of contacts non opt-out, non blacklisted and valid email recipient for a mailing list
     def _compute_contact_nbr(self):
         self.env.cr.execute('''
             select
@@ -62,7 +113,9 @@ class MassMailingList(models.Model):
                 mail_mass_mailing_contact_list_rel r
                 left join mail_mass_mailing_contact c on (r.contact_id=c.id)
             where
-                c.opt_out <> true
+                COALESCE(r.opt_out,FALSE) = FALSE
+                AND c.email NOT IN (select email from mail_blacklist where active = TRUE)
+                AND substring(c.email, '([^ ,;<@]+@[^> ,;]+)') IS NOT NULL
             group by
                 list_id
         ''')
@@ -70,6 +123,10 @@ class MassMailingList(models.Model):
         for mailing_list in self:
             mailing_list.contact_nbr = data.get(mailing_list.id, 0)
 
+    @api.multi
+    def name_get(self):
+        return [(list.id, "%s (%s)" % (list.name, list.contact_nbr)) for list in self]
+
     @api.multi
     def action_merge(self, src_lists, archive):
         """
@@ -113,7 +170,8 @@ class MassMailingList(models.Model):
                     mail_mass_mailing_contact_list_rel contact_list_rel,
                     mail_mass_mailing_list mailing_list
                 WHERE contact.id=contact_list_rel.contact_id
-                AND contact.opt_out = FALSE
+                AND COALESCE(contact_list_rel.opt_out,FALSE) = FALSE
+                AND contact.email NOT IN (select email from mail_blacklist where active = TRUE)
                 AND mailing_list.id=contact_list_rel.list_id
                 AND mailing_list.id IN %s
                 AND NOT EXISTS
@@ -143,7 +201,7 @@ class MassMailingContact(models.Model):
     be able to deal with large contact list to email without bloating the partner
     base."""
     _name = 'mail.mass_mailing.contact'
-    _inherit = 'mail.thread'
+    _inherit = ['mail.thread', 'mail.blacklist.mixin']
     _description = 'Mass Mailing Contact'
     _order = 'email'
     _rec_name = 'email'
@@ -156,25 +214,12 @@ class MassMailingContact(models.Model):
     list_ids = fields.Many2many(
         'mail.mass_mailing.list', 'mail_mass_mailing_contact_list_rel',
         'contact_id', 'list_id', string='Mailing Lists')
-    opt_out = fields.Boolean(string='Opt Out', help='The contact has chosen not to receive mails anymore from this list')
-    unsubscription_date = fields.Datetime(string='Unsubscription Date')
+    subscription_list_ids = fields.One2many('mail.mass_mailing.list_contact_rel',
+        'contact_id', string='Subscription Information')
     message_bounce = fields.Integer(string='Bounced', help='Counter of the number of bounced emails for this contact.', default=0)
     country_id = fields.Many2one('res.country', string='Country')
     tag_ids = fields.Many2many('res.partner.category', string='Tags')
 
-    @api.model_create_multi
-    def create(self, vals_list):
-        for vals in vals_list:
-            if 'opt_out' in vals:
-                vals['unsubscription_date'] = vals['opt_out'] and fields.Datetime.now()
-        return super(MassMailingContact, self).create(vals_list)
-
-    @api.multi
-    def write(self, vals):
-        if 'opt_out' in vals:
-            vals['unsubscription_date'] = vals['opt_out'] and fields.Datetime.now()
-        return super(MassMailingContact, self).write(vals)
-
     def get_name_email(self, name):
         name, email = self.env['res.partner']._parse_partner_name(name)
         if name and not email:
@@ -246,6 +291,7 @@ class MassMailingCampaign(models.Model):
     total = fields.Integer(compute="_compute_statistics")
     scheduled = fields.Integer(compute="_compute_statistics")
     failed = fields.Integer(compute="_compute_statistics")
+    ignored = fields.Integer(compute="_compute_statistics")
     sent = fields.Integer(compute="_compute_statistics", string="Sent Emails")
     delivered = fields.Integer(compute="_compute_statistics")
     opened = fields.Integer(compute="_compute_statistics")
@@ -278,8 +324,9 @@ class MassMailingCampaign(models.Model):
                 c.id as campaign_id,
                 COUNT(s.id) AS total,
                 COUNT(CASE WHEN s.sent is not null THEN 1 ELSE null END) AS sent,
-                COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is null THEN 1 ELSE null END) AS scheduled,
+                COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is null AND s.ignored is null THEN 1 ELSE null END) AS scheduled,
                 COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is not null THEN 1 ELSE null END) AS failed,
+                COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is null AND s.ignored is not null THEN 1 ELSE null END) AS ignored,
                 COUNT(CASE WHEN s.id is not null AND s.bounced is null THEN 1 ELSE null END) AS delivered,
                 COUNT(CASE WHEN s.opened is not null THEN 1 ELSE null END) AS opened,
                 COUNT(CASE WHEN s.replied is not null THEN 1 ELSE null END) AS replied ,
@@ -296,7 +343,7 @@ class MassMailingCampaign(models.Model):
         """, (tuple(self.ids), ))
 
         for row in self.env.cr.dictfetchall():
-            total = row['total'] or 1
+            total = (row['total'] - row['ignored']) or 1
             row['delivered'] = row['sent'] - row['bounced']
             row['received_ratio'] = 100.0 * row['delivered'] / total
             row['opened_ratio'] = 100.0 * row['opened'] / total
@@ -408,6 +455,7 @@ class MassMailing(models.Model):
     total = fields.Integer(compute="_compute_total")
     scheduled = fields.Integer(compute="_compute_statistics")
     expected = fields.Integer(compute="_compute_statistics")
+    ignored = fields.Integer(compute="_compute_statistics")
     sent = fields.Integer(compute="_compute_statistics")
     delivered = fields.Integer(compute="_compute_statistics")
     opened = fields.Integer(compute="_compute_statistics")
@@ -451,8 +499,9 @@ class MassMailing(models.Model):
                 m.id as mailing_id,
                 COUNT(s.id) AS expected,
                 COUNT(CASE WHEN s.sent is not null THEN 1 ELSE null END) AS sent,
-                COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is null THEN 1 ELSE null END) AS scheduled,
+                COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is null AND s.ignored is null THEN 1 ELSE null END) AS scheduled,
                 COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is not null THEN 1 ELSE null END) AS failed,
+                COUNT(CASE WHEN s.scheduled is not null AND s.sent is null AND s.exception is null AND s.ignored is not null THEN 1 ELSE null END) AS ignored,
                 COUNT(CASE WHEN s.sent is not null AND s.bounced is null THEN 1 ELSE null END) AS delivered,
                 COUNT(CASE WHEN s.opened is not null THEN 1 ELSE null END) AS opened,
                 COUNT(CASE WHEN s.clicked is not null THEN 1 ELSE null END) AS clicked,
@@ -470,7 +519,7 @@ class MassMailing(models.Model):
                 m.id
         """, (tuple(self.ids), ))
         for row in self.env.cr.dictfetchall():
-            total = row['expected'] or 1
+            total = row['expected'] = (row['expected'] - row['ignored']) or 1
             row['received_ratio'] = 100.0 * row['delivered'] / total
             row['opened_ratio'] = 100.0 * row['opened'] / total
             row['clicks_ratio'] = 100.0 * row['clicked'] / total
@@ -555,14 +604,24 @@ class MassMailing(models.Model):
     def _group_expand_states(self, states, domain, order):
         return [key for key, val in type(self).state.selection]
 
-    def update_opt_out(self, email, res_ids, value):
-        model = self.env[self.mailing_model_real].with_context(active_test=False)
-        if 'opt_out' in model._fields:
-            email_fname = 'email_from'
-            if 'email' in model._fields:
-                email_fname = 'email'
-            records = model.search([('id', 'in', res_ids), (email_fname, 'ilike', email)])
-            records.write({'opt_out': value})
+    def update_opt_out(self, email, list_ids, value):
+        if len(list_ids) > 0:
+            model = self.env['mail.mass_mailing.contact'].with_context(active_test=False)
+            records = model.search([('email', '=ilike', email)])
+            opt_out_records = self.env['mail.mass_mailing.list_contact_rel'].search([
+                ('contact_id', 'in', records.ids),
+                ('list_id', 'in', list_ids),
+                ('opt_out', '!=', value)
+            ])
+
+            opt_out_records.write({'opt_out': value})
+            message = _('The recipient <strong>unsubscribed from %s</strong> mailing list(s)') \
+                if value else _('The recipient <strong>subscribed to %s</strong> mailing list(s)')
+            for record in records:
+                # filter the list_id by record
+                record_lists = opt_out_records.filtered(lambda rec: rec.contact_id.id == record.id)
+                if len(record_lists) > 0:
+                    record.sudo().message_post(body=_(message % ', '.join(str(list.name) for list in record_lists.mapped('list_id'))))
 
     #------------------------------------------------------
     # Views & Actions
@@ -629,19 +688,16 @@ class MassMailing(models.Model):
         self.ensure_one()
         opt_out = {}
         target = self.env[self.mailing_model_real]
-        mail_field = 'email' if 'email' in target._fields else 'email_from'
-        if 'opt_out' in target._fields:
-            # avoid loading a large number of records in memory
-            # + use a basic heuristic for extracting emails
-            query = """
-                SELECT lower(substring(%(mail_field)s, '([^ ,;<@]+@[^> ,;]+)'))
-                  FROM %(target)s
-                 WHERE opt_out AND
-                       substring(%(mail_field)s, '([^ ,;<@]+@[^> ,;]+)') IS NOT NULL;
-            """
-            query = query % {'target': target._table, 'mail_field': mail_field}
-            self._cr.execute(query)
-            opt_out = set(m[0] for m in self._cr.fetchall())
+        if self.mailing_model_real == "mail.mass_mailing.contact":
+            # if user is opt_out on One list but not on another
+            # or if two user with same email address, one opted in and the other one opted out, send the mail anyway
+            # TODO DBE Fixme : Optimise the following to get real opt_out and opt_in
+            target_list_contacts = self.env['mail.mass_mailing.list_contact_rel'].search(
+                [('list_id', 'in', self.contact_list_ids.ids)])
+            opt_out_contacts = target_list_contacts.filtered(lambda rel: rel.opt_out).mapped('contact_id.email')
+            opt_in_contacts = target_list_contacts.filtered(lambda rel: not rel.opt_out).mapped('contact_id.email')
+            opt_out = set(c for c in opt_out_contacts if c not in opt_in_contacts)
+
             _logger.info(
                 "Mass-mailing %s targets %s, blacklist: %s emails",
                 self, target._name, len(opt_out))

--- a/addons/mass_mailing/models/mass_mailing_stats.py
+++ b/addons/mass_mailing/models/mass_mailing_stats.py
@@ -33,6 +33,8 @@ class MailMailStats(models.Model):
         string='Mass Mailing Campaign',
         store=True, readonly=True, index=True)
     # Bounce and tracking
+    ignored = fields.Datetime(help='Date when the email has been invalidated. '
+                                   'Invalid emails are blacklisted, opted-out or invalid email format')
     scheduled = fields.Datetime(help='Date when the email has been created', default=fields.Datetime.now)
     sent = fields.Datetime(help='Date when the email has been sent')
     exception = fields.Datetime(help='Date of technical error leading to the email not being sent')
@@ -49,17 +51,20 @@ class MailMailStats(models.Model):
                                         ('sent', 'Sent'),
                                         ('opened', 'Opened'),
                                         ('replied', 'Replied'),
-                                        ('bounced', 'Bounced')], store=True)
+                                        ('bounced', 'Bounced'),
+                                        ('ignored', 'Ignored')], store=True)
     state_update = fields.Datetime(compute="_compute_state", string='State Update',
                                     help='Last state update of the mail',
                                     store=True)
     recipient = fields.Char(compute="_compute_recipient")
 
-    @api.depends('sent', 'opened', 'clicked', 'replied', 'bounced', 'exception')
+    @api.depends('sent', 'opened', 'clicked', 'replied', 'bounced', 'exception', 'ignored')
     def _compute_state(self):
         self.update({'state_update': fields.Datetime.now()})
         for stat in self:
-            if stat.exception:
+            if stat.ignored:
+                stat.state = 'ignored'
+            elif stat.exception:
                 stat.state = 'exception'
             elif stat.sent:
                 stat.state = 'sent'

--- a/addons/mass_mailing/models/res_config_settings.py
+++ b/addons/mass_mailing/models/res_config_settings.py
@@ -11,6 +11,9 @@ class ResConfigSettings(models.TransientModel):
     mass_mailing_outgoing_mail_server = fields.Boolean(string="Specific Mail Server", config_parameter='mass_mailing.outgoing_mail_server',
         help='Use a specific mail server in priority. Otherwise Odoo relies on the first outgoing mail server available (based on their sequencing) as it does for normal mails.')
     mass_mailing_mail_server_id = fields.Many2one('ir.mail_server', string='Mail Server', config_parameter='mass_mailing.mail_server_id')
+    show_blacklist_buttons = fields.Boolean(string="Show blacklist buttons on unsubscribe page",
+                                                 config_parameter='mass_mailing.show_blacklist_buttons',
+                                                 help="""Allow the recipient to manage himself his state in the blacklist via the unsubscription page.""")
 
     @api.onchange('mass_mailing_outgoing_mail_server')
     def _onchange_mass_mailing_outgoing_mail_server(self):
