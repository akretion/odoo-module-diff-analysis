PR: https://github.com/odoo/odoo/pull/136621

From: 3836aad466c6c111f0f0d33c357a1c7a5150f3fd
From: vlst
Date: 2024-01-19 15:04:58

Structural Changes: 7
Total Changes: 46

[REF] pos*: use bus.mixin

pos*: point_of_sale, pos_adyen, pos_online_payment,
	  pos_restaurant, pos_self_order, pos_self_order_adyen

- create the `pos.bus.mixin` class;
	- it insures that modules that inherit this class have an
	  `access_token`; ( similar to `portal.mixin` )
	- implements the `_notify` method that uses the `access_token`
	  and the notification name concatenated as a channel;
	   --> as such, listeners can differentiate between senders.
- adapt `pos.config`, `pos.session`, `pos.preparation.display` to
  inherit from `pos.bus.mixin`;

- replace all bus usage in the frontend with `bus.subscribe`;
    ( the PosBus service has been removed )
  	- this has the benefit of solving the bug from task: 3557587

Task 3508655

Part-of: odoo/odoo#136621

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/__init__.py
+++ b/addons/point_of_sale/models/__init__.py
@@ -6,6 +6,7 @@ from . import account_payment
 from . import account_journal
 from . import account_tax
 from . import account_move
+from . import pos_bus_mixin
 from . import barcode_rule
 from . import chart_template
 from . import digest

--- a/None
+++ b/addons/point_of_sale/models/pos_bus_mixin.py
@@ -0,0 +1,29 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+import uuid
+from odoo import fields, models
+
+class PosBusMixin(models.AbstractModel):
+    _name = "pos.bus.mixin"
+    _description = "Bus Mixin"
+
+    access_token = fields.Char('Security Token', copy=False)
+
+    def _ensure_access_token(self):
+        if self.access_token:
+            return self.access_token
+        token = self.access_token = str(uuid.uuid4())
+        return token
+
+    def _notify(self, *notifications, private=True) -> None:
+        """ Send a notification to the bus.
+        ex: one notification: ``self._notify('STATUS', {'status': 'closed'})``
+        multiple notifications: ``self._notify(('STATUS', {'status': 'closed'}), ('TABLE_ORDER_COUNT', {'count': 2}))``
+        """
+        self.ensure_one()
+        self._ensure_access_token()
+        if isinstance(notifications[0], str):
+            if len(notifications) != 2:
+                raise ValueError("If you want to send a single notification, you must provide a name: str and a message: any")
+            notifications = [notifications]
+        self.env['bus.bus']._sendmany((self.access_token, f"{self.access_token}-{name}" if private else name, message) for name, message in notifications)

--- a/addons/point_of_sale/models/pos_config.py
+++ b/addons/point_of_sale/models/pos_config.py
@@ -12,6 +12,7 @@ from odoo.exceptions import ValidationError, UserError
 
 class PosConfig(models.Model):
     _name = 'pos.config'
+    _inherit = ['pos.bus.mixin']
     _description = 'Point of Sale Configuration'
     _check_company_auto = True
 
@@ -183,6 +184,7 @@ class PosConfig(models.Model):
     trusted_config_ids = fields.Many2many("pos.config", relation="pos_config_trust_relation", column1="is_trusting",
                                           column2="is_trusted", string="Trusted Point of Sale Configurations",
                                           domain="[('id', '!=', pos_config_id), ('module_pos_restaurant', '=', False)]")
+    access_token = fields.Char("Access Token", default=lambda self: uuid4().hex[:16])
 
     @api.depends('payment_method_ids')
     def _compute_cash_control(self):

--- a/addons/point_of_sale/models/pos_order.py
+++ b/addons/point_of_sale/models/pos_order.py
@@ -22,7 +22,7 @@ _logger = logging.getLogger(__name__)
 
 class PosOrder(models.Model):
     _name = "pos.order"
-    _inherit = ["portal.mixin"]
+    _inherit = ["portal.mixin", "pos.bus.mixin"]
     _description = "Point of Sale Orders"
     _order = "date_order desc, name desc, id desc"
 

--- a/addons/point_of_sale/models/pos_session.py
+++ b/addons/point_of_sale/models/pos_session.py
@@ -17,7 +17,7 @@ class PosSession(models.Model):
     _name = 'pos.session'
     _order = 'id desc'
     _description = 'Point of Sale Session'
-    _inherit = ['mail.thread', 'mail.activity.mixin']
+    _inherit = ['mail.thread', 'mail.activity.mixin', "pos.bus.mixin"]
 
     POS_SESSION_STATE = [
         ('opening_control', 'Opening Control'),  # method action_pos_session_open
@@ -33,7 +33,6 @@ class PosSession(models.Model):
         required=True,
         index=True)
     name = fields.Char(string='Session ID', required=True, readonly=True, default='/')
-    access_token = fields.Char('Security Token', copy=False)
     user_id = fields.Many2one(
         'res.users', string='Opened By',
         required=True,
@@ -1945,15 +1944,6 @@ class PosSession(models.Model):
 
         return record.id if record else None
 
-    def _ensure_access_token(self):
-        # Code taken from addons/portal/models/portal_mixin.py
-        if not self.access_token:
-            self.sudo().write({'access_token': secrets.token_hex(16)})
-        return self.access_token
-
-    def _get_bus_channel_name(self):
-        return f'pos_session-{self.id}-{self._ensure_access_token()}'
-
     def _get_partners_domain(self):
         return []
 
