PR: https://github.com/odoo/odoo/pull/207055

From: ba6177c9e0d329f3c08b83595552e88ec39ce476
From: bram1000
Date: 2025-05-07 23:32:42

Breaking data model changes scores: del:4 + add:0, change matches:
-    user_id = fields.Many2one('res.users', required=True, readonly=True)
-    scope = fields.Char(readonly=True)
-    ip = fields.Char(readonly=True)
-    limit_type = fields.Selection([

Total Changes: 59

[IMP] auth_totp: limit totp checks per account

Before this commit the totp limit only applied to totp mails. Therefore
we now add this as well to the base auth_totp module. However the limit
was based per account per ip address. This doesn't make sense because
then using multiple IP addresses would allow you to bypass the limit.

Given how you need to know the password for the account, there isn't
any risk of locking the user out of their account. (unless they were
hacked, but then the account lock is a preferable problem to have)

_assert_can_auth still has a filter for too many login attempts per IP
address. Therefore we also don't reduce the security in any way, but
instead, we improve it.

closes odoo/odoo#207055

Upgrade: https://github.com/odoo/upgrade/pull/7601
Related: odoo/upgrade#7601
Signed-off-by: Bram Van Gaal (brvg) <brvg@odoo.com>

================================= pseudo patch: =================================

--- a/addons/auth_totp_mail/models/__init__.py
+++ b/addons/auth_totp_mail/models/__init__.py
@@ -1,6 +1,5 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from . import auth_totp_device
-from . import auth_totp_rate_limit_log
 from . import res_config_settings
 from . import res_users

--- a/addons/auth_totp_mail/models/auth_totp_rate_limit_log.py
+++ b/None
@@ -1,16 +0,0 @@
-from odoo import fields, models
-
-
-class AuthTotpRateLimitLog(models.TransientModel):
-    _name = 'auth.totp.rate.limit.log'
-    _description = 'TOTP rate limit logs'
-
-    _user_id_limit_type_create_date_idx = models.Index("(user_id, limit_type, create_date)")
-
-    user_id = fields.Many2one('res.users', required=True, readonly=True)
-    scope = fields.Char(readonly=True)
-    ip = fields.Char(readonly=True)
-    limit_type = fields.Selection([
-        ('send_email', 'Send Email'),
-        ('code_check', 'Code Checking'),
-    ], readonly=True)

--- a/addons/auth_totp_mail/models/res_users.py
+++ b/addons/auth_totp_mail/models/res_users.py
@@ -14,11 +14,6 @@ from odoo.addons.auth_totp.models.totp import hotp, TOTP
 
 _logger = logging.getLogger(__name__)
 
-TOTP_RATE_LIMITS = {
-    'send_email': (10, 3600),
-    'code_check': (10, 3600),
-}
-
 
 class ResUsers(models.Model):
     _inherit = 'res.users'
@@ -209,40 +204,3 @@ class ResUsers(models.Model):
             email_values=email_values,
             email_layout_xmlid='mail.mail_notification_light'
         )
-
-    def _totp_rate_limit(self, limit_type):
-        self.ensure_one()
-        assert request, "A request is required to be able to rate limit TOTP related actions"
-        limit, interval = TOTP_RATE_LIMITS.get(limit_type)
-        RateLimitLog = self.env['auth.totp.rate.limit.log'].sudo()
-        ip = request.httprequest.environ['REMOTE_ADDR']
-        domain = [
-            ('user_id', '=', self.id),
-            ('create_date', '>=', datetime.now() - timedelta(seconds=interval)),
-            ('limit_type', '=', limit_type),
-            ('ip', '=', ip),
-        ]
-        count = RateLimitLog.search_count(domain)
-        if count >= limit:
-            descriptions = {
-                'send_email': _('You reached the limit of authentication mails sent for your account'),
-                'code_check': _('You reached the limit of code verifications for your account'),
-            }
-            description = descriptions.get(limit_type)
-            raise AccessDenied(description)
-        RateLimitLog.create({
-            'user_id': self.id,
-            'ip': ip,
-            'limit_type': limit_type,
-        })
-
-    def _totp_rate_limit_purge(self, limit_type):
-        self.ensure_one()
-        assert request, "A request is required to be able to rate limit TOTP related actions"
-        ip = request.httprequest.environ['REMOTE_ADDR']
-        RateLimitLog = self.env['auth.totp.rate.limit.log'].sudo()
-        RateLimitLog.search([
-            ('user_id', '=', self.id),
-            ('limit_type', '=', limit_type),
-            ('ip', '=', ip),
-        ]).unlink()
