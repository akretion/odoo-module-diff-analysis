PR: https://github.com/odoo/odoo/pull/75633

From: 845bb6cc93d7e67c69aef8811e06b0ed6c4100ce
From: Julien Giannone
Date: 2021-08-26 17:25:06

Structural Changes: 1
Total Changes: 31

[IMP] mail: add group chat feature

task-2360934

closes odoo/odoo#75633

Signed-off-by: Alexandre KÃ¼hn (aku) <aku@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_channel.py
+++ b/addons/mail/models/mail_channel.py
@@ -39,9 +39,10 @@ class Channel(models.Model):
     name = fields.Char('Name', required=True, translate=True)
     active = fields.Boolean(default=True, help="Set active to false to hide the channel without removing it.")
     channel_type = fields.Selection([
-        ('chat', 'Chat Discussion'),
-        ('channel', 'Channel')],
-        string='Channel Type', default='channel')
+        ('chat', 'Chat'),
+        ('channel', 'Channel'),
+        ('group', 'Group')],
+        string='Channel Type', default='channel', help="Chat is private and unique between 2 persons. Group is private among invited persons. Channel can be freely joined (depending on its configuration).")
     is_chat = fields.Boolean(string='Is a chat', compute='_compute_is_chat')
     description = fields.Text('Description')
     image_128 = fields.Image("Image", max_width=128, max_height=128, default=_get_default_image)
@@ -630,6 +631,8 @@ class Channel(models.Model):
         """
         if self.env.user.partner_id.id not in partners_to:
             partners_to.append(self.env.user.partner_id.id)
+        if len(partners_to) > 2:
+            raise UserError(_("A chat should not be created with more than 2 persons. Create a group instead."))
         # determine type according to the number of partner in the channel
         self.flush()
         self.env.cr.execute("""
@@ -889,6 +892,22 @@ class Channel(models.Model):
         self.env['bus.bus'].sendone((self._cr.dbname, 'res.partner', self.env.user.partner_id.id), channel_info)
         return channel_info
 
+    @api.model
+    def create_group(self, partners_to):
+        """ Create a group channel.
+            :param partners_to : list of res.partner ids to add to the conversation
+            :returns: channel_info of the created channel
+            :rtype: dict
+        """
+        channel = self.create({
+            'channel_last_seen_partner_ids': [Command.create({'partner_id': partner_id}) for partner_id in partners_to],
+            'channel_type': 'group',
+            'name': '',  # default name is computed client side from the list of members
+            'public': 'private',
+        })
+        channel._broadcast(partners_to)
+        return channel.channel_info()[0]
+
     @api.model
     def get_mention_suggestions(self, search, limit=8):
         """ Return 'limit'-first channels' id, name and public fields such that the name matches a
@@ -988,7 +1007,7 @@ class Channel(models.Model):
         return msg
 
     def execute_command_leave(self, **kwargs):
-        if self.channel_type == 'channel':
+        if self.channel_type in ('channel', 'group'):
             self.action_unfollow()
         else:
             self.channel_pin(self.uuid, False)

--- a/addons/mail/models/res_partner.py
+++ b/addons/mail/models/res_partner.py
@@ -135,9 +135,9 @@ class Partner(models.Model):
         """Returns the channels of the partner."""
         self.ensure_one()
         channels = self.env['mail.channel']
-        # get the channels
+        # get the channels and groups
         channels |= self.env['mail.channel'].search([
-            ('channel_type', '=', 'channel'),
+            ('channel_type', 'in', ('channel', 'group')),
             ('channel_partner_ids', 'in', [self.id]),
         ])
         # get the pinned direct messages
