PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Breaking data model changes score: 2, change matches:
-    _inherit = 'payment.acquirer'
-    provider = fields.Selection(selection_add=[('demo', 'Demo')], ondelete={'demo': 'set default'})

Total Changes: 114

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_demo/models/__init__.py
+++ b/addons/payment_demo/models/__init__.py
@@ -1,5 +1,5 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_token
 from . import payment_transaction

--- a/addons/payment_demo/models/payment_acquirer.py
+++ b/addons/payment_demo/models/payment_provider.py
@@ -4,26 +4,26 @@ from odoo import _, api, fields, models
 from odoo.exceptions import UserError
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(selection_add=[('demo', 'Demo')], ondelete={'demo': 'set default'})
+    code = fields.Selection(selection_add=[('demo', 'Demo')], ondelete={'demo': 'set default'})
 
     #=== COMPUTE METHODS ===#
 
-    @api.depends('provider')
+    @api.depends('code')
     def _compute_view_configuration_fields(self):
         """ Override of payment to hide the credentials page.
 
         :return: None
         """
         super()._compute_view_configuration_fields()
-        self.filtered(lambda acq: acq.provider == 'demo').show_credentials_page = False
+        self.filtered(lambda p: p.code == 'demo').show_credentials_page = False
 
     def _compute_feature_support_fields(self):
         """ Override of `payment` to enable additional features. """
         super()._compute_feature_support_fields()
-        self.filtered(lambda acq: acq.provider == 'demo').update({
+        self.filtered(lambda p: p.code == 'demo').update({
             'support_fees': True,
             'support_manual_capture': True,
             'support_refund': 'partial',
@@ -32,7 +32,7 @@ class PaymentAcquirer(models.Model):
 
     # === CONSTRAINT METHODS ===#
 
-    @api.constrains('state', 'provider')
-    def _check_acquirer_state(self):
-        if self.filtered(lambda a: a.provider == 'demo' and a.state not in ('test', 'disabled')):
-            raise UserError(_("Demo acquirers should never be enabled."))
+    @api.constrains('state', 'code')
+    def _check_provider_state(self):
+        if self.filtered(lambda p: p.code == 'demo' and p.state not in ('test', 'disabled')):
+            raise UserError(_("Demo providers should never be enabled."))

--- a/addons/payment_demo/models/payment_token.py
+++ b/addons/payment_demo/models/payment_token.py
@@ -28,6 +28,6 @@ class PaymentToken(models.Model):
         :return: The demo token name.
         :rtype: str
         """
-        if self.provider != 'demo':
+        if self.provider_code != 'demo':
             return super()._build_display_name(*args, should_pad=should_pad, **kwargs)
         return super()._build_display_name(*args, should_pad=False, **kwargs)

--- a/addons/payment_demo/models/payment_transaction.py
+++ b/addons/payment_demo/models/payment_transaction.py
@@ -13,7 +13,7 @@ _logger = logging.getLogger(__name__)
 class PaymentTransaction(models.Model):
     _inherit = 'payment.transaction'
 
-    capture_manually = fields.Boolean(related='acquirer_id.capture_manually')
+    capture_manually = fields.Boolean(related='provider_id.capture_manually')
 
     #=== ACTION METHODS ===#
 
@@ -25,7 +25,7 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         self.ensure_one()
-        if self.provider != 'demo':
+        if self.provider_code != 'demo':
             return
 
         notification_data = {'reference': self.reference, 'simulated_state': 'done'}
@@ -39,7 +39,7 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         self.ensure_one()
-        if self.provider != 'demo':
+        if self.provider_code != 'demo':
             return
 
         notification_data = {'reference': self.reference, 'simulated_state': 'cancel'}
@@ -53,7 +53,7 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         self.ensure_one()
-        if self.provider != 'demo':
+        if self.provider_code != 'demo':
             return
 
         notification_data = {'reference': self.reference, 'simulated_state': 'error'}
@@ -69,7 +69,7 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._send_payment_request()
-        if self.provider != 'demo':
+        if self.provider_code != 'demo':
             return
 
         if not self.token_id:
@@ -89,7 +89,7 @@ class PaymentTransaction(models.Model):
         :return: The refund transaction if any
         :rtype: recordset of `payment.transaction`
         """
-        if self.provider != 'demo':
+        if self.provider_code != 'demo':
             return super()._send_refund_request(
                 create_refund_transaction=create_refund_transaction, **kwargs
             )
@@ -108,7 +108,7 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._send_capture_request()
-        if self.provider != 'demo':
+        if self.provider_code != 'demo':
             return
 
         notification_data = {
@@ -126,27 +126,27 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._send_void_request()
-        if self.provider != 'demo':
+        if self.provider_code != 'demo':
             return
 
         notification_data = {'reference': self.reference, 'simulated_state': 'cancel'}
         self._handle_notification_data('demo', notification_data)
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of payment to find the transaction based on dummy data.
 
-        :param str provider: The provider of the acquirer that handled the transaction
+        :param str provider_code: The code of the provider that handled the transaction
         :param dict notification_data: The dummy notification data
         :return: The transaction if found
         :rtype: recordset of `payment.transaction`
         :raise: ValidationError if the data match no transaction
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'demo' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'demo' or len(tx) == 1:
             return tx
 
         reference = notification_data.get('reference')
-        tx = self.search([('reference', '=', reference), ('provider', '=', 'demo')])
+        tx = self.search([('reference', '=', reference), ('provider_code', '=', 'demo')])
         if not tx:
             raise ValidationError(
                 "Demo: " + _("No transaction found matching reference %s.", reference)
@@ -163,13 +163,13 @@ class PaymentTransaction(models.Model):
         :raise: ValidationError if inconsistent data were received
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'demo':
+        if self.provider_code != 'demo':
             return
 
         if self.tokenize:
             # The reasons why we immediately tokenize the transaction regardless of the state rather
             # than waiting for the payment method to be validated ('authorized' or 'done') like the
-            # other payment acquirers do are:
+            # other payment providers do are:
             # - To save the simulated state and payment details on the token while we have them.
             # - To allow customers to create tokens whose transactions will always end up in the
             #   said simulated state.
@@ -204,10 +204,10 @@ class PaymentTransaction(models.Model):
 
         state = notification_data['simulated_state']
         token = self.env['payment.token'].create({
-            'acquirer_id': self.acquirer_id.id,
+            'provider_id': self.provider_id.id,
             'payment_details': notification_data['payment_details'],
             'partner_id': self.partner_id.id,
-            'acquirer_ref': 'fake acquirer reference',
+            'provider_ref': 'fake provider reference',
             'verified': True,
             'demo_simulated_state': state,
         })
