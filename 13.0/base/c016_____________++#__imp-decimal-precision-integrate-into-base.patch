PR: https://github.com/odoo/odoo/pull/

From: 0c5121a979f02d6eee9779068cbb2d43788dc917
From: Mitali Patel
Date: 2019-07-03 11:15:48

Structural Changes: 6
Total Changes: 186

[IMP] decimal_precision: integrate into base

The decimal precision feature makes sense to be an ORM feature, no need to be
in a specific module

Previous syntax was
    from odoo.addons import decimal_precision as dp
    fields.Float(digits=dp.get_precision('Foo'))

and now is:
    fields.Float(digits='Foo')

Remove the possibility to have a callable method on the digits attribute (it
was only used for precision anyway) and directly retrieve the digits on the
decimal.precision model

Rename the method digits to get_digits to avoid confusion between the field
attribute when declaring a field and the method to retrieve the precision

Task id: 48198

================================= pseudo patch: =================================

--- a/odoo/addons/base/__manifest__.py
+++ b/odoo/addons/base/__manifest__.py
@@ -24,6 +24,7 @@ The kernel of Odoo, needed for all installation.
         'security/base_groups.xml',
         'security/base_security.xml',
         'views/base_menus.xml',
+        'views/decimal_precision_views.xml',
         'views/res_config_views.xml',
         'data/res.country.state.csv',
         'views/ir_actions_views.xml',

--- a/odoo/addons/base/models/__init__.py
+++ b/odoo/addons/base/models/__init__.py
@@ -41,3 +41,5 @@ from . import res_config
 from . import res_currency
 from . import res_company
 from . import res_users
+
+from . import decimal_precision

--- a/None
+++ b/odoo/addons/base/models/decimal_precision.py
@@ -0,0 +1,70 @@
+# -*- encoding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, tools
+
+
+class DecimalPrecision(models.Model):
+    _name = 'decimal.precision'
+    _description = 'Decimal Precision'
+
+    name = fields.Char('Usage', index=True, required=True)
+    digits = fields.Integer('Digits', required=True, default=2)
+
+    _sql_constraints = [
+        ('name_uniq', 'unique (name)', """Only one value can be defined for each given usage!"""),
+    ]
+
+    @api.model
+    @tools.ormcache('application')
+    def precision_get(self, application):
+        self.env.cr.execute('select digits from decimal_precision where name=%s', (application,))
+        res = self.env.cr.fetchone()
+        return res[0] if res else 2
+
+    @api.model_cr
+    def clear_cache(self):
+        """ Deprecated, use `clear_caches` instead. """
+        self.clear_caches()
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        res = super(DecimalPrecision, self).create(vals_list)
+        self.clear_caches()
+        return res
+
+    @api.multi
+    def write(self, data):
+        res = super(DecimalPrecision, self).write(data)
+        self.clear_caches()
+        return res
+
+    @api.multi
+    def unlink(self):
+        res = super(DecimalPrecision, self).unlink()
+        self.clear_caches()
+        return res
+
+
+class DecimalPrecisionFloat(models.AbstractModel):
+    """ Override qweb.field.float to add a `decimal_precision` domain option
+    and use that instead of the column's own value if it is specified
+    """
+    _inherit = 'ir.qweb.field.float'
+
+
+    @api.model
+    def precision(self, field, options=None):
+        dp = options and options.get('decimal_precision')
+        if dp:
+            return self.env['decimal.precision'].precision_get(dp)
+
+        return super().precision(field, options=options)
+
+class DecimalPrecisionTestModel(models.Model):
+    _name = 'decimal.precision.test'
+    _description = 'Decimal Precision Test'
+
+    float = fields.Float()
+    float_2 = fields.Float(digits=(16, 2))
+    float_4 = fields.Float(digits=(16, 4))

--- a/odoo/addons/base/models/ir_qweb_fields.py
+++ b/odoo/addons/base/models/ir_qweb_fields.py
@@ -189,7 +189,7 @@ class FloatConverter(models.AbstractModel):
     @api.model
     def record_to_html(self, record, field_name, options):
         if 'precision' not in options and 'decimal_precision' not in options:
-            _, precision = record._fields[field_name].digits or (None, None)
+            _, precision = record._fields[field_name].get_digits(record.env) or (None, None)
             options = dict(options, precision=precision)
         return super(FloatConverter, self).record_to_html(record, field_name, options)
 

--- a/odoo/addons/base/security/ir.model.access.csv
+++ b/odoo/addons/base/security/ir.model.access.csv
@@ -1,4 +1,7 @@
 "id","name","model_id:id","group_id:id","perm_read","perm_write","perm_create","perm_unlink"
+"access_decimal_precision_config","decimal.precision configuration","model_decimal_precision","group_system",1,1,1,1
+"access_decimal_precision_all","decimal.precision","model_decimal_precision",,1,0,0,0
+"access_decimal_precision_test_all","decimal.precision.test","model_decimal_precision_test",,1,1,1,1
 "access_ir_attachment_group_user","ir_attachment group_user","model_ir_attachment","group_user",1,1,1,1
 "access_ir_attachment_group_portal_public","ir_attachment group_portal_public","model_ir_attachment",,0,0,0,0
 "access_ir_cron_group_cron","ir_cron group_cron","model_ir_cron","group_system",1,1,1,1

--- a/odoo/addons/base/tests/__init__.py
+++ b/odoo/addons/base/tests/__init__.py
@@ -24,6 +24,7 @@ from . import test_orm
 from . import test_ormcache
 from . import test_osv
 from . import test_qweb
+from . import test_qweb_float
 from . import test_res_config
 from . import test_res_lang
 from . import test_search

--- a/None
+++ b/odoo/addons/base/tests/test_qweb_float.py
@@ -0,0 +1,66 @@
+# -*- coding: utf-8 -*-
+
+from odoo.tests import common
+
+
+class TestFloatExport(common.TransactionCase):
+
+    def get_converter(self, name):
+        FloatField = self.env['ir.qweb.field.float']
+        _, precision = self.env['decimal.precision.test']._fields[name].get_digits(self.env) or (None, None)
+
+        def converter(value, options=None):
+            record = self.env['decimal.precision.test'].new({name: value})
+            return FloatField.record_to_html(record, name, options or {})
+        return converter
+
+    def test_basic_float(self):
+        converter = self.get_converter('float')
+        self.assertEqual(
+            converter(42.0),
+            "42.0")
+        self.assertEqual(
+            converter(42.12345),
+            "42.12345")
+
+        converter = self.get_converter('float_2')
+        self.assertEqual(
+            converter(42.0),
+            "42.00")
+        self.assertEqual(
+            converter(42.12345),
+            "42.12")
+
+        converter = self.get_converter('float') # don't use float_4 because the field value 42.12345 is already orm converted to 42.1235
+        self.assertEqual(
+            converter(42.0, {'precision': 4}),
+            '42.0000')
+        self.assertEqual(
+            converter(42.12345, {'precision': 4}),
+            '42.1235')
+
+    def test_precision_domain(self):
+        self.env['decimal.precision'].create({
+            'name': 'A',
+            'digits': 2,
+        })
+        self.env['decimal.precision'].create({
+            'name': 'B',
+            'digits': 6,
+        })
+
+        converter = self.get_converter('float')
+        self.assertEqual(
+            converter(42.0, {'decimal_precision': 'A'}),
+            '42.00')
+        self.assertEqual(
+            converter(42.0, {'decimal_precision': 'B'}),
+            '42.000000')
+
+        converter = self.get_converter('float') # don't use float_4 because the field value 42.12345 is orm converted to 42.1235
+        self.assertEqual(
+            converter(42.12345, {'decimal_precision': 'A'}),
+            '42.12')
+        self.assertEqual(
+            converter(42.12345, {'decimal_precision': 'B'}),
+            '42.123450')

--- a/None
+++ b/odoo/addons/base/views/decimal_precision_views.xml
@@ -0,0 +1,41 @@
+<?xml version="1.0"?>
+<odoo>
+    <data>
+
+        <record model="ir.ui.view" id="view_decimal_precision_form">
+            <field name="name">Decimal Precision</field>
+            <field name="model">decimal.precision</field>
+            <field name="arch" type="xml">
+                <form string="Decimal Precision">
+                    <sheet>
+                        <group col="4">
+                            <field name="name"/>
+                            <field name="digits"/>
+                        </group>
+                    </sheet>
+                </form>
+            </field>
+        </record>
+        <record model="ir.ui.view" id="view_decimal_precision_tree">
+            <field name="name">Decimal Precision List</field>
+            <field name="model">decimal.precision</field>
+            <field name="arch" type="xml">
+                <tree string="Decimal Precision">
+                    <field name="name"/>
+                    <field name="digits"/>
+                </tree>
+            </field>
+        </record>
+        <record model="ir.actions.act_window" id="action_decimal_precision_form">
+                <field name="name">Decimal Accuracy</field>
+                <field name="res_model">decimal.precision</field>
+        </record>
+        <menuitem
+            parent="base.next_id_9"
+            id="menu_decimal_precision_form"
+            action="action_decimal_precision_form"/>
+
+    </data>
+</odoo>
+
+
