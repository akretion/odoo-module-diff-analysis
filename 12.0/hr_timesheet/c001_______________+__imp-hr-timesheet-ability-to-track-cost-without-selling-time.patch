PR: https://github.com/odoo/odoo/pull/

From: 8f3f1827cbb7d7ee0eae132b45394fc0547f940d
From: jem-odoo
Date: 2018-04-06 12:30:46

Structural Changes: 3
Total Changes: 61

[IMP] hr_timesheet: ability to track cost without selling time

The cost of an employee should be in hr_timesheet for a long time, to
allow user to track time on project/task: hours spent and their cost.
This commit simply moves fields and related views. It also moves the
'postprocess' method from sale_timesheet to hr_timesheet since this
method is responsible to set the amount (cost) on AAL.

User can now track their time and cost, without having sale_timesheet
installed.

================================= pseudo patch: =================================

--- a/addons/hr_timesheet/models/__init__.py
+++ b/addons/hr_timesheet/models/__init__.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from . import hr
 from . import hr_timesheet
 from . import res_config_settings
 from . import project

--- a/None
+++ b/addons/hr_timesheet/models/hr.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class HrEmployee(models.Model):
+    _inherit = 'hr.employee'
+
+    timesheet_cost = fields.Monetary('Timesheet Cost', currency_field='currency_id', default=0.0)
+    currency_id = fields.Many2one('res.currency', related='company_id.currency_id', readonly=True)

--- a/addons/hr_timesheet/models/hr_timesheet.py
+++ b/addons/hr_timesheet/models/hr_timesheet.py
@@ -40,14 +40,20 @@ class AccountAnalyticLine(models.Model):
             line.department_id = line.employee_id.department_id
 
     @api.model
-    def create(self, vals):
-        vals = self._timesheet_preprocess(vals)
-        return super(AccountAnalyticLine, self).create(vals)
+    def create(self, values):
+        values = self._timesheet_preprocess(values)
+        result = super(AccountAnalyticLine, self).create(values)
+        if result.project_id:  # applied only for timesheet
+            result._timesheet_postprocess(values)
+        return result
 
     @api.multi
-    def write(self, vals):
-        vals = self._timesheet_preprocess(vals)
-        return super(AccountAnalyticLine, self).write(vals)
+    def write(self, values):
+        values = self._timesheet_preprocess(values)
+        result = super(AccountAnalyticLine, self).write(values)
+        # applied only for timesheet
+        self.filtered(lambda t: t.project_id)._timesheet_postprocess(values)
+        return result
 
     def _timesheet_preprocess(self, vals):
         """ Deduce other field values from the one given.
@@ -79,3 +85,34 @@ class AccountAnalyticLine(models.Model):
             if partner_id:
                 vals['partner_id'] = partner_id
         return vals
+
+    @api.multi
+    def _timesheet_postprocess(self, values):
+        """ Hook to update record one by one according to the values of a `write` or a `create`. """
+        sudo_self = self.sudo()  # this creates only one env for all operation that required sudo() in `_timesheet_postprocess_values`override
+        values_to_write = self._timesheet_postprocess_values(values)
+        for timesheet in sudo_self:
+            if values_to_write[timesheet.id]:
+                timesheet.write(values_to_write[timesheet.id])
+        return values
+
+    @api.multi
+    def _timesheet_postprocess_values(self, values):
+        """ Get the addionnal values to write on record
+            :param dict values: values for the model's fields, as a dictionary::
+                {'field_name': field_value, ...}
+            :return: a dictionary mapping each record id to its corresponding
+                dictionnary values to write (may be empty).
+        """
+        result = dict.fromkeys(self.ids, dict())
+        sudo_self = self.sudo()  # this creates only one env for all operation that required sudo()
+        # (re)compute the amount (depending on unit_amount, employee_id for the cost, and account_id for currency)
+        if any([field_name in values for field_name in ['unit_amount', 'employee_id', 'account_id']]):
+            for timesheet in sudo_self:
+                cost = timesheet.employee_id.timesheet_cost or 0.0
+                amount = -timesheet.unit_amount * cost
+                amount_converted = timesheet.employee_id.currency_id.compute(amount, timesheet.account_id.currency_id)
+                result[timesheet.id].update({
+                    'amount': amount_converted,
+                })
+        return result
