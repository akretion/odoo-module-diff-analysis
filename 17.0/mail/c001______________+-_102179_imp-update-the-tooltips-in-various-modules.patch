PR: https://github.com/odoo/odoo/pull/102179

From: 1e48724f8b7c1a48b785a3d6cd1267037dccb4ad
From: Dhaval Baraiya
Date: 2022-10-05 10:04:48

Structural Changes: 6
Total Changes: 9

[IMP] *.*: update the tooltips in various modules

The goal of this task is to review the copywriting of the tooltips
because some of them are not correct in English and others are not
valid anymore. This is also a good opportunity to make an inventory
of the tooltips we have and to add some that could be missing.

task-2860991

closes odoo/odoo#102179

X-original-commit: 5e4cf8f9f6a4372f45aa04a5965f8073bb4ea68a
Related: odoo/enterprise#32298
Signed-off-by: Laurent Stukkens (ltu) <ltu@odoo.com>
Co-authored-by: Mahendra Barad <mba@odoo.com>, Prakash Prajapati <ppr@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_shortcode.py
+++ b/addons/mail/models/mail_shortcode.py
@@ -13,7 +13,10 @@ class MailShortcode(models.Model):
 
     _name = 'mail.shortcode'
     _description = 'Canned Response / Shortcode'
-    source = fields.Char('Shortcut', required=True, index='trigram', help="The shortcut which must be replaced in the Chat Messages")
-    substitution = fields.Text('Substitution', required=True, help="The escaped html code replacing the shortcut")
+    source = fields.Char('Shortcut', required=True, index='trigram',
+        help="Shortcut that will automatically be substituted with longer content in your messages."
+             " Type ':' followed by the name of your shortcut (e.g. :hello) to use in your messages.")
+    substitution = fields.Text('Substitution', required=True,
+        help="Content that will automatically replace the shortcut of your choosing. This content can still be adapted before sending your message.")
     description = fields.Char('Description')
     message_ids = fields.Many2one('mail.message', string="Messages", store=False)

--- a/addons/mail/models/mail_thread_cc.py
+++ b/addons/mail/models/mail_thread_cc.py
@@ -9,7 +9,7 @@ class MailCCMixin(models.AbstractModel):
     _inherit = 'mail.thread'
     _description = 'Email CC management'
 
-    email_cc = fields.Char('Email cc', help='List of cc from incoming emails.')
+    email_cc = fields.Char('Email cc')
 
     def _mail_cc_sanitized_raw_dict(self, cc_string):
         '''return a dict of sanitize_email:raw_email from a string of cc'''
