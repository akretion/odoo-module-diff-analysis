PR: https://github.com/odoo/odoo/pull/198078

From: 6451f5cce5b1fca770a95f766fe1fb99a9f56bd3
From: Gorash
Date: 2025-03-10 09:57:46

Breaking data model changes scores: del:1 + add:0, change matches:
-    user_default_rights = fields.Boolean(

Total Changes: 51

[IMP] base: replace default user by a default groups

The default user was a strange use case and was confusing. Its
configuration using the users view but only the groups (and the
default_privacy calendar) was used as the default value.

The configuration is therefore directly focused on access and
therefore groups.

Another change is made: Changing this default value no longer affects
all users. Before, if you changed (voluntarily or not) the default user,
it would change all internal users). Therefore, adding a new addon often
added the manager level to all users. Now, only the administrator who
adds an addon will receive the manager role.

closes odoo/odoo#198078

Task: 4341594
Related: odoo/enterprise#79548
Related: odoo/upgrade#7245
Signed-off-by: Raphael Collet <rco@odoo.com>

================================= pseudo patch: =================================

--- a/addons/base_setup/models/res_config_settings.py
+++ b/addons/base_setup/models/res_config_settings.py
@@ -11,9 +11,6 @@ class ResConfigSettings(models.TransientModel):
     company_id = fields.Many2one('res.company', string='Company', required=True,
         default=lambda self: self.env.company)
     is_root_company = fields.Boolean(compute='_compute_is_root_company')
-    user_default_rights = fields.Boolean(
-        "Default Access Rights",
-        config_parameter='base_setup.default_user_rights')
     module_base_import = fields.Boolean("Allow users to import data from CSV/XLS/XLSX/ODS files")
     module_google_calendar = fields.Boolean(
         string='Allow the users to synchronize their calendar  with Google Calendar')
@@ -57,14 +54,29 @@ class ResConfigSettings(models.TransientModel):
             'target': 'current',
         }
 
-    def open_default_user(self):
-        action = self.env["ir.actions.actions"]._for_xml_id("base.action_res_users")
-        if self.env.ref('base.default_user', raise_if_not_found=False):
-            action['res_id'] = self.env.ref('base.default_user').id
-        else:
-            raise UserError(_("Default User Template not found."))
-        action['views'] = [[self.env.ref('base.view_users_form').id, 'form']]
-        return action
+    def open_new_user_default_groups(self):
+        default_group = self.env.ref('base.default_user_group', raise_if_not_found=False)
+        if not default_group:
+            default_group = self.env['res.groups'].create({
+                'name': _('Default access for new users'),
+                'category_id': self.env.ref('base.module_category_hidden').id,
+            })
+            self.env['ir.model.data'].create({
+                'name': 'default_user_group',
+                'module': 'base',
+                'res_id': default_group.id,
+                'model': 'res.groups',
+                'noupdate': True,
+            })
+        return {
+            'type': 'ir.actions.act_window',
+            'name': _("Edit new user default group"),
+            'view_mode': 'form',
+            'res_model': 'res.groups',
+            'res_id': default_group.id,
+            'views': [(self.env.ref('base.view_default_groups_form').id, 'form')],
+            'target': 'new',
+        }
 
     @api.model
     def _prepare_report_view_action(self, template):

--- a/addons/base_setup/models/res_users.py
+++ b/addons/base_setup/models/res_users.py
@@ -31,20 +31,3 @@ class ResUsers(models.Model):
             user = self.with_context(signup_valid=True).create(default_values)
 
         return True
-
-    def _default_groups(self):
-        """Default groups for employees
-
-        If base_setup.default_user_rights is set, only the "Employee" group is used
-        """
-        if not str2bool(self.env['ir.config_parameter'].sudo().get_param("base_setup.default_user_rights"), default=False):
-            return self.env.ref("base.group_user")
-        return super()._default_groups()
-
-    def _apply_groups_to_existing_employees(self):
-        """
-        If base_setup.default_user_rights is set, do not apply any new groups to existing employees
-        """
-        if not str2bool(self.env['ir.config_parameter'].sudo().get_param("base_setup.default_user_rights"), default=False):
-            return False
-        return super()._apply_groups_to_existing_employees()
