PR: https://github.com/odoo/odoo/pull/154995

From: 0bc90e7d74bd0792b9af7464256ba8770d894a25
From: Manu Vaillant (manv)
Date: 2024-05-23 12:34:55

Structural Changes: 1
Total Changes: 159

[IMP] point_of_sale,*: onboarding data from predefined scenarios

The goal of this task is to improve onboarding experience of new users. The idea
is that when a user start an odoo instance without demo and installed the
point_of_sale module, the user is welcomed with options to create configuration
and data sets from different predefined scenarios, namely Furnitures, Bakery,
Clothing, Bar and Restaurant. The original sets of demo data are now categorized
in the Furnitures and Restaurant scenarios and the other scenarios are added
with new data sets.

As for the installation of pos modules in demo mode, we automatically load the
scenarios, so now, there will be 5 configurations when both point_of_sale and
pos_restaurant are installed.

The demo products (and related records) are put in .xml files. These files are
loaded using `convert` module on demand -- based on what scenario the user
selected. This is the reason we have exposed few methods that will be called
from the backend interface. When in demo mode, we pretend that all scenarios are
selected and we call the action that loads the scenarios.

Small fixes and improvements are also included in this commit:

- Fix styles and layouts in the components related to opening and closing dialogs.
- Resize of selection pills during product configuration.
- Reduce the size of the anchor to resize tables in the floor screen during edit mode.
- Remove CancelConfirmationDialog as it doesn't serve so much purpose. We just
  use the normal confirmation dialog when asking users about the closing amount
  difference.

closes odoo/odoo#154995

Task-id: 3598952
Related: odoo/enterprise#59910
Signed-off-by: Vlad Stroia (vlst) <vlst@odoo.com>
Co-authored-by: Joseph (jcb) <jcb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_restaurant/models/pos_config.py
+++ b/addons/pos_restaurant/models/pos_config.py
@@ -4,6 +4,7 @@
 from odoo import api, fields, models, _
 import json
 from collections import defaultdict
+from odoo.tools import convert
 
 
 class PosConfig(models.Model):
@@ -13,7 +14,6 @@ class PosConfig(models.Model):
     iface_printbill = fields.Boolean(string='Bill Printing', help='Allows to print the Bill before payment.')
     floor_ids = fields.Many2many('restaurant.floor', string='Restaurant Floors', help='The restaurant floors served by this point of sale.')
     set_tip_after_payment = fields.Boolean('Set Tip After Payment', help="Adjust the amount authorized by payment terminals to add a tip after the customers left or at the end of the day.")
-    module_pos_restaurant = fields.Boolean(default=True)
     module_pos_restaurant_appointment = fields.Boolean("Table Booking")
     takeaway = fields.Boolean("Takeaway", help="Allow to create orders for takeaway customers.")
     takeaway_fp_id = fields.Many2one(
@@ -69,7 +69,7 @@ class PosConfig(models.Model):
     @api.model_create_multi
     def create(self, vals_list):
         for vals in vals_list:
-            is_restaurant = 'module_pos_restaurant' not in vals or vals['module_pos_restaurant']
+            is_restaurant = 'module_pos_restaurant' in vals and vals['module_pos_restaurant']
             if is_restaurant and 'iface_splitbill' not in vals:
                 vals['iface_splitbill'] = True
             if not is_restaurant or not vals.get('iface_tipproduct', False):
@@ -92,52 +92,6 @@ class PosConfig(models.Model):
 
         return super().write(vals)
 
-    @api.model
-    def post_install_pos_localisation(self, companies=False):
-        self = self.sudo()
-        if not companies:
-            companies = self.env['res.company'].search([])
-        super(PosConfig, self).post_install_pos_localisation(companies)
-        for company in companies.filtered('chart_template'):
-            pos_configs = self.search([
-                *self.env['account.journal']._check_company_domain(company),
-                ('module_pos_restaurant', '=', True),
-            ])
-            if not pos_configs:
-                pos_configs = self.env['pos.config'].with_company(company).create({
-                'name': _('Bar'),
-                'company_id': company.id,
-                'module_pos_restaurant': True,
-                'iface_splitbill': True,
-                'iface_printbill': True,
-            })
-            pos_configs.setup_defaults(company)
-
-    def setup_defaults(self, company):
-        main_restaurant = self.env.ref('pos_restaurant.pos_config_main_restaurant', raise_if_not_found=False)
-        main_restaurant_is_present = main_restaurant and self.filtered(lambda cfg: cfg.id == main_restaurant.id)
-        if main_restaurant_is_present:
-            non_main_restaurant_configs = self - main_restaurant
-            non_main_restaurant_configs.assign_payment_journals(company)
-            main_restaurant._setup_main_restaurant_defaults()
-            self.generate_pos_journal(company)
-            self.setup_invoice_journal(company)
-        else:
-            super().setup_defaults(company)
-
-    def _setup_main_restaurant_defaults(self):
-        self.ensure_one()
-        self._link_same_non_cash_payment_methods_if_exists('point_of_sale.pos_config_main')
-        self._ensure_cash_payment_method('MRCSH', _('Cash Restaurant'))
-        self._archive_shop()
-
-    def _archive_shop(self):
-        shop = self.env.ref('point_of_sale.pos_config_main', raise_if_not_found=False)
-        if shop:
-            session_count = self.env['pos.session'].search_count([('config_id', '=', shop.id)])
-            if session_count == 0:
-                shop.update({'active': False})
-
     def _setup_default_floor(self, pos_config):
         if not pos_config.floor_ids:
             main_floor = self.env['restaurant.floor'].create({
@@ -153,3 +107,77 @@ class PosConfig(models.Model):
                 'width': 100,
                 'height': 100,
             })
+
+    @api.model
+    def _load_bar_data(self):
+        convert.convert_file(self.env, 'pos_restaurant', 'data/scenarios/bar_data.xml', None, noupdate=True, mode='init', kind='data')
+
+    @api.model
+    def _load_restaurant_data(self):
+        convert.convert_file(self.env, 'pos_restaurant', 'data/scenarios/restaurant_data.xml', None, noupdate=True, mode='init', kind='data')
+
+    def _get_scenario_names(self):
+        result = super()._get_scenario_names()
+        return [
+            *result,
+            ('bar', 'pos_restaurant.pos_config_main_bar'),
+            ('restaurant', 'pos_restaurant.pos_config_main_restaurant'),
+        ]
+
+    @api.model
+    def load_onboarding_bar_scenario(self):
+        ref_name = 'pos_restaurant.pos_config_main_bar'
+        if not self.env.ref(ref_name, raise_if_not_found=False):
+            self._load_bar_data()
+
+        journal, payment_methods_ids = self._create_journal_and_payment_methods()
+        bar_categories = [
+            self.env.ref('pos_restaurant.pos_category_cocktails').id,
+            self.env.ref('pos_restaurant.pos_category_soft_drinks').id,
+        ]
+        config = self.env['pos.config'].create({
+            'name': 'Bar',
+            'company_id': self.env.company.id,
+            'journal_id': journal.id,
+            'payment_method_ids': payment_methods_ids,
+            'limit_categories': True,
+            'iface_available_categ_ids': bar_categories,
+            'iface_splitbill': True,
+            'module_pos_restaurant': True,
+        })
+        self.env['ir.model.data']._update_xmlids([{
+            'xml_id': self._get_suffixed_ref_name(ref_name),
+            'record': config,
+            'noupdate': True,
+        }])
+
+    @api.model
+    def load_onboarding_restaurant_scenario(self):
+        ref_name = 'pos_restaurant.pos_config_main_restaurant'
+        if not self.env.ref(ref_name, raise_if_not_found=False):
+            self._load_restaurant_data()
+
+        journal, payment_methods_ids = self._create_journal_and_payment_methods()
+        restaurant_categories = [
+            self.env.ref('pos_restaurant.food').id,
+            self.env.ref('pos_restaurant.drinks').id,
+        ]
+        config = self.env['pos.config'].create({
+            'name': _('Restaurant'),
+            'company_id': self.env.company.id,
+            'journal_id': journal.id,
+            'payment_method_ids': payment_methods_ids,
+            'limit_categories': True,
+            'iface_available_categ_ids': restaurant_categories,
+            'iface_splitbill': True,
+            'module_pos_restaurant': True,
+        })
+        self.env['ir.model.data']._update_xmlids([{
+            'xml_id': self._get_suffixed_ref_name(ref_name),
+            'record': config,
+            'noupdate': True,
+        }])
+        if self.env.company.id == self.env.ref('base.main_company').id:
+            existing_session = self.env.ref('pos_restaurant.pos_closed_session_3', raise_if_not_found=False)
+            if not existing_session:
+                convert.convert_file(self.env, 'pos_restaurant', 'data/restaurant_session_floor.xml', None, noupdate=True, mode='init', kind='data')

--- a/addons/pos_restaurant/models/pos_session.py
+++ b/addons/pos_restaurant/models/pos_session.py
@@ -1,22 +1,12 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import models, Command, api
-from odoo.tools import convert
+from odoo import models, api
 import json
 
 class PosSession(models.Model):
     _inherit = 'pos.session'
 
-    def get_onboarding_data(self):
-        results = super().get_onboarding_data()
-
-        if self.config_id.module_pos_restaurant:
-            response = self.load_data(['restaurant.floor', 'restaurant.table'], True)
-            results.update(response['data'])
-
-        return results
-
     @api.model
     def _load_pos_data_models(self, config_id):
         data = super()._load_pos_data_models(config_id)
@@ -24,29 +14,6 @@ class PosSession(models.Model):
             data += ['restaurant.floor', 'restaurant.table']
         return data
 
-    @api.model
-    def _load_onboarding_data(self):
-        super()._load_onboarding_data()
-        convert.convert_file(self.env, 'pos_restaurant', 'data/pos_restaurant_onboarding.xml', None, mode='init', kind='data')
-        restaurant_config = self.env.ref('pos_restaurant.pos_config_main_restaurant', raise_if_not_found=False)
-        if restaurant_config:
-            convert.convert_file(self.env, 'pos_restaurant', 'data/pos_restaurant_onboarding_main_config.xml', None, mode='init', kind='data')
-            if len(restaurant_config.session_ids.filtered(lambda s: s.state == 'opened')) == 0:
-                self.env['pos.session'].create({
-                    'config_id': restaurant_config.id,
-                    'user_id': self.env.ref('base.user_admin').id,
-                })
-            convert.convert_file(self.env, 'pos_restaurant', 'data/pos_restaurant_onboarding_open_session.xml', None, mode='init', kind='data')
-
-    def _after_load_onboarding_data(self):
-        super()._after_load_onboarding_data()
-        configs = self.config_id.filtered('module_pos_restaurant')
-        if configs:
-            configs.with_context(bypass_categories_forbidden_change=True).write({
-                'limit_categories': True,
-                'iface_available_categ_ids': [Command.link(self.env.ref('pos_restaurant.food').id), Command.link(self.env.ref('pos_restaurant.drinks').id)]
-            })
-
     @api.model
     def _set_last_order_preparation_change(self, order_ids):
         for order_id in order_ids:
