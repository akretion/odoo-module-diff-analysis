PR: https://github.com/odoo/odoo/pull/

From: de423ba13880f977e21d07148a9d7251bc94a029
From: Nicolas Martinelli
Date: 2015-08-27 17:21:36

Breaking data model changes score: 2, change matches:
-    _inherit = "product.template"
-    _inherit = "product.product"

Total Changes: 59

[IMP] sale_service: adaptation due to the new Sale module

Major changes:
* Link with account analytic lines

Reason: complete rewrite of the Sale module.

Responsible: fp, dbo, nim

================================= pseudo patch: =================================

--- a/addons/sale_service/models/__init__.py
+++ b/addons/sale_service/models/__init__.py
@@ -1 +1,5 @@
-import sale_service
\ No newline at end of file
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import sale_service
+import timesheet

--- a/addons/sale_service/models/sale_service.py
+++ b/addons/sale_service/models/sale_service.py
@@ -12,14 +12,13 @@ class procurement_order(osv.osv):
     }
 
     def _is_procurement_task(self, cr, uid, procurement, context=None):
-        return procurement.product_id.type == 'service' and procurement.product_id.auto_create_task or False
+        return procurement.product_id.type == 'service' and procurement.product_id.track_service=='task' or False
 
     def _assign(self, cr, uid, procurement, context=None):
         res = super(procurement_order, self)._assign(cr, uid, procurement, context=context)
         if not res:
             #if there isn't any specific procurement.rule defined for the product, we may want to create a task
-            if self._is_procurement_task(cr, uid, procurement, context=context):
-                return True
+            return self._is_procurement_task(cr, uid, procurement, context=context)
         return res
 
     def _run(self, cr, uid, procurement, context=None):
@@ -120,18 +119,4 @@ class project_task(osv.osv):
                 self._validate_subflows(cr, uid, ids, context=context)
         return res
 
-class product_template(osv.osv):
-    _inherit = "product.template"
-    _columns = {
-        'project_id': fields.many2one('project.project', 'Project', ondelete='set null',),
-        'auto_create_task': fields.boolean('Create Task Automatically', help="Tick this option if you want to create a task automatically each time this product is sold"),
-    }
 
-class product_product(osv.osv):
-    _inherit = "product.product"
-    
-    def need_procurement(self, cr, uid, ids, context=None):
-        for product in self.browse(cr, uid, ids, context=context):
-            if product.type == 'service' and product.auto_create_task:
-                return True
-        return super(product_product, self).need_procurement(cr, uid, ids, context=context)

--- a/None
+++ b/addons/sale_service/models/timesheet.py
@@ -0,0 +1,34 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from openerp import models, api, fields, exceptions
+from openerp.tools.translate import _
+
+class product_template(models.Model):
+    _inherit = "product.template"
+    project_id = fields.Many2one('project.project', string='Project', ondelete='set null')
+    track_service = fields.Selection(selection_add=[('task', 'Create a task and track hours')])
+
+
+class account_analytic_line(models.Model):
+    _inherit = 'account.analytic.line'
+
+    @api.model
+    def _update_values(self, values):
+        if values.get('task_id', False):
+            task = self.env['project.task'].browse(values['task_id'])
+            values['so_line'] = task.sale_line_id and task.sale_line_id.id or False
+
+    @api.model
+    def create(self, values):
+        self._update_values(values)
+        result = super(account_analytic_line, self).create(values)
+        return result
+
+    @api.multi
+    def write(self, values):
+        self._update_values(values)
+        result = super(account_analytic_line, self).write(values)
+        return result
+
+
