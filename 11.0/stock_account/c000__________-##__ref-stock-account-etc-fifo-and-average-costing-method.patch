PR: https://github.com/odoo/odoo/pull/

From: 5e5cd081232b982d4be6412ebf1d336195f2c451
From: Josse Colpaert
Date: 2017-07-14 15:08:22

Breaking data model changes score: 1, change matches:
-    _inherit = "stock.quant"

Total Changes: 483

[REF] stock_account,etc: FIFO and average costing method

The new implementation of stock moves the cost of products from quants to
moves. So we have implemented the FIFO and average cost method based on
those moves instead of using quants.
 - When average price is choosed, a field average_price is set on the
   product.
 - The tests have been completed with an example of how fifo work with
   negative stock.

As the use of real price method is really rare, because of the rigor
required on traceability for such method, we removed this functionnality.
 - The tests purchase/test/fifo_price.yml have been adapted to use the
   FIFO costing method instead of real price.

The old report stock history doesn't exist anymore, and is replaced by
the move view that contains all the cost information.

The methods `get_price_unit` have been moved from the stock to
stock_account.

The methods `_set_default_price_moves` and
`set_default_price_unit_from_product` have been removed from stock.

Explaination of FIFO and average:
 - In action_done for an out move in average and fifo, the price_unit and
   stock_value are updated.
 - For FIFO, it will use the qty_remaining on the in moves to check from
   which in moves to take the stock values for the out.
 - In case of negative stock in FIFO, it puts also qty_remaining on OUTs.
 - In the case of average, it will take the cumulated value of the last
   move and divide it by the quantity in stock.  

This commit is pretty much a 'work in progress':
 - Edit 'done' moves when the costing method is FIFO doesn't trigger the
   replay the FIFO stack.
 - The landed_costs feature doesn't work.

================================= pseudo patch: =================================

--- a/addons/stock_account/models/product.py
+++ b/addons/stock_account/models/product.py
@@ -4,6 +4,8 @@
 from odoo import api, fields, models, tools, _
 from odoo.exceptions import UserError
 from odoo.tools import float_is_zero
+from odoo.addons import decimal_precision as dp
+
 
 
 class ProductTemplate(models.Model):
@@ -19,8 +21,8 @@ class ProductTemplate(models.Model):
     valuation = fields.Char(compute='_compute_valuation_type', inverse='_set_valuation_type')
     property_cost_method = fields.Selection([
         ('standard', 'Standard Price'),
-        ('average', 'Average Price'),
-        ('real', 'Real Price')], string='Costing Method',
+        ('fifo', '(financial) FIFO'),
+        ('average', 'AVCO')], string='Costing Method',
         company_dependent=True, copy=True,
         help="""Standard Price: The cost price is manually updated at the end of a specific period (usually once a year).
                 Average Price: The cost price is recomputed at each incoming shipment and used for the product valuation.
@@ -36,6 +38,19 @@ class ProductTemplate(models.Model):
         company_dependent=True, domain=[('deprecated', '=', False)],
         help="When doing real-time inventory valuation, counterpart journal items for all outgoing stock moves will be posted in this account, unless "
              "there is a specific valuation account set on the destination location. When not set on the product, the one from the product category is used.")
+    average_price = fields.Float(
+        'Average Cost', compute='_compute_average_price',
+        digits=dp.get_precision('Product Price'), groups="base.group_user",
+        help="Average cost of the product, in the default unit of measure of the product.")
+
+    @api.multi
+    def _compute_average_price(self):
+        unique_variants = self.filtered(lambda template: len(template.product_variant_ids) == 1)
+        for template in unique_variants:
+            template.average_price = template.product_variant_ids.average_price
+        for template in (self - unique_variants):
+            template.average_price = 0.0
+
 
     @api.one
     @api.depends('property_valuation', 'categ_id.property_valuation')
@@ -87,6 +102,15 @@ class ProductTemplate(models.Model):
 class ProductProduct(models.Model):
     _inherit = 'product.product'
 
+    average_price = fields.Float(
+        'Average Cost', 
+        digits=dp.get_precision('Product Price'),
+        groups="base.group_user",
+        compute='_compute_average_price',
+        help="Calculated average cost")
+    stock_value = fields.Float(
+        'Value', compute='_compute_stock_value')
+
     @api.onchange('type')
     def onchange_type_valuation(self):
         # TO REMOVE IN MASTER
@@ -139,6 +163,67 @@ class ProductProduct(models.Model):
         self.write({'standard_price': new_price})
         return True
 
+    def _get_latest_cumulated_value(self, not_move=False):
+        self.ensure_one()
+        # TODO: only filter on IN and OUT stock.move
+        domain = [
+            ('product_id', '=', self.id),
+            ('state', '=', 'done'),
+            ]
+        if not_move:
+            domain += [('id', '!=', not_move.id)]
+        latest = self.env['stock.move'].search(domain, order='date desc, id desc', limit=1)
+        if not latest:
+            return 0.0
+        return latest.cumulated_value
+
+    def _get_candidates_out_move(self):
+        self.ensure_one()
+        # TODO: filter at start of period
+        candidates = self.env['stock.move'].search([
+            ('product_id', '=', self.id),
+            ('location_dest_id.usage', 'not in', ('transit', 'internal')),
+            ('location_id.usage', 'in', ('transit', 'internal')),
+            ('remaining_qty', '>', 0),
+            ('state', '=', 'done')
+        ], order='date, id') #TODO: case
+        return candidates
+
+    def _get_candidates_move(self):
+        self.ensure_one()
+        # TODO: filter at start of period
+        candidates = self.env['stock.move'].search([
+            ('product_id', '=', self.id),
+            ('location_dest_id.usage', 'in', ('transit', 'internal')),
+            ('location_id.usage', 'not in', ('transit', 'internal')),
+            ('remaining_qty', '>', 0),
+            ('state', '=', 'done')
+        ], order='date, id') #TODO: case where 
+        return candidates
+
+    @api.multi
+    def _compute_average_price(self):
+        for product in self:
+            if product.qty_available > 0:
+                last_cumulated_value = product._get_latest_cumulated_value()
+                product.average_price = last_cumulated_value / product.qty_available
+            else:
+                product.average_price = 0
+    
+    @api.multi
+    def _compute_stock_value(self):
+        for product in self:
+            if product.cost_method == 'standard':
+                product.stock_value = product.standard_price * product.qty_available
+            elif product.cost_method == 'average':
+                product.stock_value = product._get_latest_cumulated_value()
+            elif product.cost_method == 'fifo': #Could also do same as for average, but it would lead to more rounding errors
+                moves = product._get_candidates_move()
+                value = 0
+                for move in moves:
+                    value += move.remaining_qty * move.price_unit
+                product.stock_value = value
+
 
 class ProductCategory(models.Model):
     _inherit = 'product.category'
@@ -156,8 +241,8 @@ class ProductCategory(models.Model):
              "moves for incoming and outgoing products.")
     property_cost_method = fields.Selection([
         ('standard', 'Standard Price'),
-        ('average', 'Average Price'),
-        ('real', 'Real Price')], string="Costing Method",
+        ('fifo', '(financial) FIFO)'),
+        ('average', 'AVCO')], string="Costing Method",
         company_dependent=True, copy=True, required=True,
         help="Standard Price: The cost price is manually updated at the end "
              "of a specific period (usually once a year).\nAverage Price: "

--- a/addons/stock_account/models/stock.py
+++ b/addons/stock_account/models/stock.py
@@ -50,124 +50,16 @@ class StockLocation(models.Model):
              "This has no effect for internal locations.")
 
 
-class StockQuant(models.Model):
-    _inherit = "stock.quant"
-
-    @api.multi
-    def _compute_inventory_value(self):
-        real_value_quants = self.filtered(lambda quant: quant.product_id.cost_method == 'real')
-        for quant in real_value_quants:
-            quant.inventory_value = quant.cost * quant.qty
-        return super(StockQuant, self - real_value_quants)._compute_inventory_value()
-
+class StockPackOperation(models.Model):
+    _inherit = 'stock.pack.operation'
+    
     @api.multi
-    def _price_update(self, newprice):
-        ''' This function is called at the end of negative quant reconciliation
-        and does the accounting entries adjustemnts and the update of the product
-        cost price if needed '''
-        super(StockQuant, self)._price_update(newprice)
-        for quant in self:
-            move = quant._get_latest_move()
-            valuation_update = newprice - quant.cost
-            # this is where we post accounting entries for adjustment, if needed
-            # If neg quant period already closed (likely with manual valuation), skip update
-            if not quant.company_id.currency_id.is_zero(valuation_update) and move._check_lock_date():
-                quant.with_context(force_valuation_amount=valuation_update)._account_entry_move(move)
-
-            # update the standard price of the product, only if we would have
-            # done it if we'd have had enough stock at first, which means
-            # 1) the product cost's method is 'real'
-            # 2) we just fixed a negative quant caused by an outgoing shipment
-            if quant.product_id.cost_method == 'real' and quant.location_id.usage != 'internal':
-                move._store_average_cost_price()
-
-    def _account_entry_move(self, move):
-        """ Accounting Valuation Entries """
-        if move.product_id.type != 'product' or move.product_id.valuation != 'real_time':
-            # no stock valuation for consumable products
-            return False
-        if any(quant.owner_id or quant.qty <= 0 for quant in self):
-            # if the quant isn't owned by the company, we don't make any valuation en
-            # we don't make any stock valuation for negative quants because the valuation is already made for the counterpart.
-            # At that time the valuation will be made at the product cost price and afterward there will be new accounting entries
-            # to make the adjustments when we know the real cost price.
-            return False
-
-        location_from = move.location_id
-        location_to = self[0].location_id  # TDE FIXME: as the accounting is based on this value, should probably check all location_to to be the same
-        company_from = location_from.usage == 'internal' and location_from.company_id or False
-        company_to = location_to and (location_to.usage == 'internal') and location_to.company_id or False
-
-        # Create Journal Entry for products arriving in the company; in case of routes making the link between several
-        # warehouse of the same company, the transit location belongs to this company, so we don't need to create accounting entries
-        if company_to and (move.location_id.usage not in ('internal', 'transit') and move.location_dest_id.usage == 'internal' or company_from != company_to):
-            journal_id, acc_src, acc_dest, acc_valuation = move._get_accounting_data_for_valuation()
-            if location_from and location_from.usage == 'customer':  # goods returned from customer
-                self.with_context(force_company=company_to.id)._create_account_move_line(move, acc_dest, acc_valuation, journal_id)
-            else:
-                self.with_context(force_company=company_to.id)._create_account_move_line(move, acc_src, acc_valuation, journal_id)
-
-        # Create Journal Entry for products leaving the company
-        if company_from and (move.location_id.usage == 'internal' and move.location_dest_id.usage not in ('internal', 'transit') or company_from != company_to):
-            journal_id, acc_src, acc_dest, acc_valuation = move._get_accounting_data_for_valuation()
-            if location_to and location_to.usage == 'supplier':  # goods returned to supplier
-                self.with_context(force_company=company_from.id)._create_account_move_line(move, acc_valuation, acc_src, journal_id)
-            else:
-                self.with_context(force_company=company_from.id)._create_account_move_line(move, acc_valuation, acc_dest, journal_id)
-
-        if move.company_id.anglo_saxon_accounting and move.location_id.usage == 'supplier' and move.location_dest_id.usage == 'customer':
-            # Creates an account entry from stock_input to stock_output on a dropship move. https://github.com/odoo/odoo/issues/12687
-            journal_id, acc_src, acc_dest, acc_valuation = move._get_accounting_data_for_valuation()
-            self.with_context(force_company=move.company_id.id)._create_account_move_line(move, acc_src, acc_dest, journal_id)
-
-    def _create_account_move_line(self, move, credit_account_id, debit_account_id, journal_id):
-        # group quants by cost
-        quant_cost_qty = defaultdict(lambda: 0.0)
-        for quant in self:
-            quant_cost_qty[quant.cost] += quant.qty
-
-        AccountMove = self.env['account.move']
-        for cost, qty in pycompat.items(quant_cost_qty):
-            move_lines = move._prepare_account_move_line(qty, cost, credit_account_id, debit_account_id)
-            if move_lines:
-                date = self._context.get('force_period_date', fields.Date.context_today(self))
-                new_account_move = AccountMove.create({
-                    'journal_id': journal_id,
-                    'line_ids': move_lines,
-                    'date': date,
-                    'ref': move.picking_id.name})
-                new_account_move.post()
-
-    def _quant_create_from_move(self, qty, move, lot_id=False, owner_id=False, src_package_id=False, dest_package_id=False, force_location_from=False, force_location_to=False):
-        quant = super(StockQuant, self)._quant_create_from_move(qty, move, lot_id=lot_id, owner_id=owner_id, src_package_id=src_package_id, dest_package_id=dest_package_id, force_location_from=force_location_from, force_location_to=force_location_to)
-        quant._account_entry_move(move)
-        if move.product_id.valuation == 'real_time':
-            # If the precision required for the variable quant cost is larger than the accounting
-            # precision, inconsistencies between the stock valuation and the accounting entries
-            # may arise.
-            # For example, a box of 13 units is bought 15.00. If the products leave the
-            # stock one unit at a time, the amount related to the cost will correspond to
-            # round(15/13, 2)*13 = 14.95. To avoid this case, we split the quant in 12 + 1, then
-            # record the difference on the new quant.
-            # We need to make sure to able to extract at least one unit of the product. There is
-            # an arbitrary minimum quantity set to 2.0 from which we consider we can extract a
-            # unit and adapt the cost.
-            curr_rounding = move.company_id.currency_id.rounding
-            cost_rounded = float_round(quant.cost, precision_rounding=curr_rounding)
-            cost_correct = cost_rounded
-            if float_compare(quant.product_id.uom_id.rounding, 1.0, precision_digits=1) == 0\
-                    and float_compare(quant.qty * quant.cost, quant.qty * cost_rounded, precision_rounding=curr_rounding) != 0\
-                    and float_compare(quant.qty, 2.0, precision_rounding=quant.product_id.uom_id.rounding) >= 0:
-                quant_correct = quant._quant_split(quant.qty - 1.0)
-                cost_correct += (quant.qty * quant.cost) - (quant.qty * cost_rounded)
-                quant.sudo().write({'cost': cost_rounded})
-                quant_correct.sudo().write({'cost': cost_correct})
-        return quant
-
-    def _quant_update_from_move(self, move, location_dest_id, dest_package_id, lot_id=False, entire_pack=False):
-        res = super(StockQuant, self)._quant_update_from_move(move, location_dest_id, dest_package_id, lot_id=lot_id, entire_pack=entire_pack)
-        self._account_entry_move(move)
-        return res
+    def write(self, vals):
+        super(StockPackOperation, self).write(vals)
+        if 'qty_done' in vals:
+            for move in self.mapped('move_id').filtered(lambda m: m.state == 'done'):
+                move.value = move.quantity_done * move.price_unit
+                move.replay()
 
 
 class StockMove(models.Model):
@@ -176,69 +68,160 @@ class StockMove(models.Model):
     to_refund = fields.Boolean(string="To Refund (update SO/PO)",
                                help='Trigger a decrease of the delivered/received quantity in the associated Sale Order/Purchase Order')
 
-    def _set_default_price_moves(self):
-        # When the cost method is in real or average price, the price can be set to 0.0 on the PO
-        # So the price doesn't have to be updated
-        moves = super(StockMove, self)._set_default_price_moves()
-        return moves.filtered(lambda m: m.product_id.cost_method not in ('real', 'average'))
+    value = fields.Float()
+    cumulated_value = fields.Float()
+    remaining_qty = fields.Float()
+    last_done_move_id = fields.Many2one('stock.move')
+    last_done_remaining_qty = fields.Float()
+    last_done_qty = fields.Float()
+
+    # TODO: add constraints remaining_qty > 0
+    # TODO: add constrain price_unit = 0 on done move?
 
     @api.multi
-    def action_done(self):
-        self.product_price_update_before_done()
-        res = super(StockMove, self).action_done()
-        self.product_price_update_after_done()
-        return res
+    def _get_price_unit(self):
+        self.ensure_one()
+        if self.product_id.cost_method == 'average':
+            return self.product_id.average_price or self.product_id.standard_price
+        if self.product_id.cost_method == 'fifo':
+            move = self.search([('product_id', '=', self.product_id.id),
+                         ('state', '=', 'done'), 
+                         ('location_id.usage', '=', 'internal'), 
+                         ('location_dest_id.usage', '!=', 'internal')], order='date desc', limit=1)
+            if move:
+                return move.price_unit or self.product_id.standard_price
+        return self.product_id.standard_price
+
+    def _update_future_cumulated_value(self, value):
+        self.ensure_one()
+        moves = self.search([('state', '=', 'done'), 
+                     ('date', '>',  self.date), 
+                     ('product_id', '=', self.product_id.id)])
+        for move in moves:
+            move.value += value
+
+#     def change_move_value_in_the_past(self, value):
+#         self.ensure_one()
+#         if self.product_id.cost_method == 'fifo':
+#             moves = self.search([('state', '=', 'done'),
+#                          ('date', '>',  self.date), 
+#                          ('product_id', '=', self.product_id.id)])
+#             if self.location_id.usage not in ('internal', 'transit'):
+#                 if move.last_done_move_id and move.last_done_remaining_qty:
 
     @api.multi
-    def product_price_update_before_done(self):
-        tmpl_dict = defaultdict(lambda: 0.0)
-        # adapt standard price on incomming moves if the product cost_method is 'average'
-        std_price_update = {}
-        for move in self.filtered(lambda move: move.location_id.usage in ('supplier', 'production') and move.product_id.cost_method == 'average'):
-            product_tot_qty_available = move.product_id.qty_available + tmpl_dict[move.product_id.id]
-
-            # if the incoming move is for a purchase order with foreign currency, need to call this to get the same value that the quant will use.
-            if product_tot_qty_available <= 0:
-                new_std_price = move.get_price_unit()
-            else:
-                # Get the standard price
-                amount_unit = std_price_update.get((move.company_id.id, move.product_id.id)) or move.product_id.standard_price
-                new_std_price = ((amount_unit * product_tot_qty_available) + (move.get_price_unit() * move.product_qty)) / (product_tot_qty_available + move.product_qty)
+    def replay(self):
+        # Easy scenario: avergae /done
+        # search last move before this one
+        start_move = self.search([('product_id', '=', self.product_id.id), 
+                     ('state', '=', 'done'), 
+                     ('date', '<', self.date)], limit=1, order='date desc') #filter on outgoing/incoming moves
+        next_moves = self.search([('product_id', '=', self.product_id.id), 
+                     ('state', '=', 'done'), 
+                     ('date', '>', start_move.date)], order='date') # filter on outgoing/incoming moves
+        if start_move:
+            last_cumulated_value = start_move.cumulated_value
+            last_done_qty_available = start_move.last_done_qty
+        else:
+            last_cumulated_value = 0.0
+            last_done_qty_available = 0.0
+        if self.product_id.cost_method == 'average':
+            for move in next_moves:
+                if move.location_id.usage in ('internal', 'transit') and move.location_dest_id.usage not in ('internal', 'transit'):
+                    if last_done_qty_available:
+                        move.value = - ((last_cumulated_value / last_done_qty_available) * move.product_qty)
+                    last_done_qty_available -= move.product_qty
+                else:
+                    last_done_qty_available += move.product_qty
+                move.cumulated_value = last_cumulated_value + move.value
+                last_cumulated_value = move.cumulated_value
+                move.last_done_qty = last_done_qty_available
+        
+        
+        # FIFO: needs dict with qty_remaining to replay algorithm
+        
+        
+        # update cumulated_value according to value
+        
+        # update outs according to values
+        
+        # update 
 
-            tmpl_dict[move.product_id.id] += move.product_qty
-            # Write the standard price, as SUPERUSER_ID because a warehouse manager may not have the right to write on products
-            move.product_id.with_context(force_company=move.company_id.id).sudo().write({'standard_price': new_std_price})
-            std_price_update[move.company_id.id, move.product_id.id] = new_std_price
 
     @api.multi
-    def product_price_update_after_done(self):
-        ''' Adapt standard price on outgoing moves, so that a
-        return or an inventory loss is made using the last value used for an outgoing valuation. '''
-        to_update_moves = self.filtered(lambda move: move.location_dest_id.usage != 'internal')
-        to_update_moves._store_average_cost_price()
-
-    def _store_average_cost_price(self):
-        """ Store the average price of the move on the move and product form (costing method 'real')"""
-        for move in self.filtered(lambda move: move.product_id.cost_method == 'real'):
-            # product_obj = self.pool.get('product.product')
-            if any(q.qty <= 0 for q in move.quant_ids) or move.product_qty == 0:
-                # if there is a negative quant, the standard price shouldn't be updated
-                return
-            # Note: here we can't store a quant.cost directly as we may have moved out 2 units
-            # (1 unit to 5€ and 1 unit to 7€) and in case of a product return of 1 unit, we can't
-            # know which of the 2 costs has to be used (5€ or 7€?). So at that time, thanks to the
-            # average valuation price we are storing we will valuate it at 6€
-            valuation_price = sum(q.qty * q.cost for q in move.quant_ids)
-            average_valuation_price = valuation_price / move.product_qty
-
-            move.product_id.with_context(force_company=move.company_id.id).sudo().write({'standard_price': average_valuation_price})
-            move.write({'price_unit': average_valuation_price})
-
-        for move in self.filtered(lambda move: move.product_id.cost_method != 'real' and not move.origin_returned_move_id):
-            # Unit price of the move should be the current standard price, taking into account
-            # price fluctuations due to products received between move creation (e.g. at SO
-            # confirmation) and move set to done (delivery completed).
-            move.write({'price_unit': move.product_id.standard_price})
+    def action_done(self):
+        qty_available = {}
+        for move in self:
+            #Should write move.price_unit here maybe, certainly on incoming
+            if move.product_id.cost_method == 'average':
+                qty_available[move.product_id.id] = move.product_id.qty_available
+        res = super(StockMove, self).action_done()
+        for move in res:
+            if move.location_id.usage not in ('internal', 'transit') and move.location_dest_id.usage in ('internal', 'transit'):
+                if move.product_id.cost_method in ['fifo', 'average']:
+                    if not move.price_unit:
+                        move.price_unit = move._get_price_unit()
+                    move.value = move.price_unit * move.product_qty
+                    move.cumulated_value = move.product_id._get_latest_cumulated_value(not_move=move) + move.value
+                    move.remaining_qty = move.product_qty
+                    if move.product_id.cost_method == 'fifo':
+                        # If you find an out with qty_remaining (because of negative stock), you can change it over there
+                        candidates_out = move.product_id._get_candidates_out_move()
+                        qty_to_take = move.product_qty
+                        for candidate in candidates_out:
+                            if candidate.remaining_qty < qty_to_take:
+                                qty_taken_on_candidate = candidate.remaining_qty
+                            else:
+                                qty_taken_on_candidate = qty_to_take
+                            candidate.remaining_qty -= qty_taken_on_candidate
+                            move.remaining_qty -= qty_taken_on_candidate
+                            qty_to_take -= qty_taken_on_candidate
+                            candidate.value += move.price_unit * qty_taken_on_candidate
+                            candidate.cumulated_value += move.price_unit * qty_taken_on_candidate
+                            candidate._update_future_cumulated_value(move.price_unit * qty_taken_on_candidate)
+                            candidate.price_unit = candidate.value / candidate.product_qty
+                    move.last_done_qty = move.product_id.qty_available
+                else:
+                    move.price_unit = move.product_id.standard_price
+                    move.value = move.price_unit * move.product_qty
+            elif move.location_id.usage in ('internal', 'transit') and move.location_dest_id.usage not in ('internal', 'transit'):
+                if move.product_id.cost_method == 'fifo':
+                    qty_to_take = move.product_qty
+                    tmp_value = 0
+                    candidates = move.product_id._get_candidates_move()
+                    last_candidate = False
+                    for candidate in candidates:
+                        if candidate.remaining_qty <= qty_to_take:
+                            qty_taken_on_candidate = candidate.remaining_qty
+                        else:
+                            qty_taken_on_candidate = qty_to_take
+                        tmp_value += qty_taken_on_candidate * candidate.price_unit
+                        candidate.remaining_qty -= qty_taken_on_candidate
+                        qty_to_take -= qty_taken_on_candidate
+                        if qty_to_take == 0:
+                            break
+                        last_candidate = candidate
+                    if last_candidate:
+                        move.last_done_move_id = last_candidate.id
+                        move.last_done_remaining_qty = last_candidate.remaining_qty
+                    if qty_to_take > 0:
+                        move.remaining_qty = qty_to_take # In case there are no candidates to match, put standard price on it
+                    move.value = -tmp_value
+                    move.cumulated_value = move.product_id._get_latest_cumulated_value(not_move=move) + move.value
+                    move.last_done_qty = move.product_id.qty_available
+                elif move.product_id.cost_method == 'average':
+                    curr_rounding = move.company_id.currency_id.rounding
+                    avg_price_unit = float_round(move.product_id._get_latest_cumulated_value(not_move=move) / qty_available[move.product_id.id], precision_rounding=curr_rounding)
+                    move.value = float_round(-avg_price_unit * move.product_qty, precision_rounding=curr_rounding)
+                    move.remaining_qty = 0
+                    move.cumulated_value = move.product_id._get_latest_cumulated_value(not_move=move) + move.value
+                    move.last_done_qty = move.product_id.qty_available
+                elif move.product_id.cost_method == 'standard':
+                    move.value = - move.product_id.standard_price * move.product_qty
+                
+        for move in res.filtered(lambda m: m.product_id.valuation == 'real_time'):
+            move._account_entry_move()
+        return res
 
     @api.multi
     def _get_accounting_data_for_valuation(self):
@@ -270,7 +253,7 @@ class StockMove(models.Model):
             raise UserError(_('You don\'t have any stock valuation account defined on your product category. You must define one before processing this operation.'))
         journal_id = accounts_data['stock_journal'].id
         return journal_id, acc_src, acc_dest, acc_valuation
-
+    
     def _prepare_account_move_line(self, qty, cost, credit_account_id, debit_account_id):
         """
         Generate the account.move.line values to post to track the stock valuation difference due to the
@@ -281,13 +264,11 @@ class StockMove(models.Model):
         if self._context.get('force_valuation_amount'):
             valuation_amount = self._context.get('force_valuation_amount')
         else:
-            if self.product_id.cost_method == 'average':
-                valuation_amount = cost if self.location_id.usage == 'supplier' and self.location_dest_id.usage == 'internal' else self.product_id.standard_price
-            else:
-                valuation_amount = cost if self.product_id.cost_method == 'real' else self.product_id.standard_price
+            valuation_amount = cost
+
         # the standard_price of the product may be in another decimal precision, or not compatible with the coinage of
         # the company currency... so we need to use round() before creating the accounting entries.
-        debit_value = self.company_id.currency_id.round(valuation_amount * qty)
+        debit_value = self.company_id.currency_id.round(valuation_amount)
 
         # check that all data is correct
         if self.company_id.currency_id.is_zero(debit_value):
@@ -353,6 +334,56 @@ class StockMove(models.Model):
             res.append((0, 0, price_diff_line))
         return res
 
+    def _create_account_move_line(self, credit_account_id, debit_account_id, journal_id):
+        self.ensure_one()
+        AccountMove = self.env['account.move']
+        move_lines = self._prepare_account_move_line(self.product_qty, abs(self.value), credit_account_id, debit_account_id)
+        if move_lines:
+            date = self._context.get('force_period_date', fields.Date.context_today(self))
+            new_account_move = AccountMove.create({
+                'journal_id': journal_id,
+                'line_ids': move_lines,
+                'date': date,
+                'ref': self.picking_id.name})
+            new_account_move.post()
+
+    def _account_entry_move(self):
+        """ Accounting Valuation Entries """
+        self.ensure_one()
+        if self.product_id.type != 'product':
+            # no stock valuation for consumable products
+            return False
+        if self.restrict_partner_id:
+            # if the move isn't owned by the company, we don't make any valuation
+            return False
+
+        location_from = self.location_id
+        location_to = self.location_dest_id
+        company_from = location_from.usage == 'internal' and location_from.company_id or False
+        company_to = location_to and (location_to.usage == 'internal') and location_to.company_id or False
+
+        # Create Journal Entry for products arriving in the company; in case of routes making the link between several
+        # warehouse of the same company, the transit location belongs to this company, so we don't need to create accounting entries
+        if company_to and (self.location_id.usage not in ('internal', 'transit') and self.location_dest_id.usage == 'internal' or company_from != company_to):
+            journal_id, acc_src, acc_dest, acc_valuation = self._get_accounting_data_for_valuation()
+            if location_from and location_from.usage == 'customer':  # goods returned from customer
+                self.with_context(force_company=company_to.id)._create_account_move_line(acc_dest, acc_valuation, journal_id)
+            else:
+                self.with_context(force_company=company_to.id)._create_account_move_line(acc_src, acc_valuation, journal_id)
+
+        # Create Journal Entry for products leaving the company
+        if company_from and (self.location_id.usage == 'internal' and self.location_dest_id.usage not in ('internal', 'transit') or company_from != company_to):
+            journal_id, acc_src, acc_dest, acc_valuation = self._get_accounting_data_for_valuation()
+            if location_to and location_to.usage == 'supplier':  # goods returned to supplier
+                self.with_context(force_company=company_from.id)._create_account_move_line(acc_valuation, acc_src, journal_id)
+            else:
+                self.with_context(force_company=company_from.id)._create_account_move_line(acc_valuation, acc_dest, journal_id)
+
+        if self.company_id.anglo_saxon_accounting and self.location_id.usage == 'supplier' and self.location_dest_id.usage == 'customer':
+            # Creates an account entry from stock_input to stock_output on a dropship move. https://github.com/odoo/odoo/issues/12687
+            journal_id, acc_src, acc_dest, acc_valuation = self._get_accounting_data_for_valuation()
+            self.with_context(force_company=self.company_id.id)._create_account_move_line(acc_src, acc_dest, journal_id)
+
 
 class StockReturnPicking(models.TransientModel):
     _inherit = "stock.return.picking"
@@ -365,7 +396,6 @@ class StockReturnPicking(models.TransientModel):
             return_picking_line = self.product_return_moves.filtered(lambda r: r.move_id == move.origin_returned_move_id)
             if return_picking_line and return_picking_line.to_refund:
                 move.to_refund = True
-
         return new_picking_id, pick_type_id
 
 
