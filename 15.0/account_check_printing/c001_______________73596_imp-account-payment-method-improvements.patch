PR: https://github.com/odoo/odoo/pull/73596

From: c1693581d79483a18f10d46c0e789df4924c10a6
From: Nicolas (vin)
Date: 2021-07-12 18:10:36

Structural Changes: 1
Total Changes: 36

[IMP] account: payment method improvements

To improve the payment method system, proceed to a few changes
such as changing the view a bit, making sure payment acquirers are not
linked to a journal by default and that only the manual payment method
type can be used multiple times in a single journal.

Task id #2573145

closes odoo/odoo#73596

X-original-commit: 9122b367baea10e59b66e45bf7c458a6f1e82efb
Related: odoo/enterprise#19623
Signed-off-by: Xavier Doll√© (xdo) <xdo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account_check_printing/models/account_journal.py
+++ b/addons/account_check_printing/models/account_journal.py
@@ -84,7 +84,7 @@ class AccountJournal(models.Model):
     def get_journal_dashboard_datas(self):
         domain_checks_to_print = [
             ('journal_id', '=', self.id),
-            ('payment_method_id.code', '=', 'check_printing'),
+            ('payment_method_line_id.code', '=', 'check_printing'),
             ('state', '=', 'posted'),
             ('is_move_sent','=', False),
         ]
@@ -94,7 +94,7 @@ class AccountJournal(models.Model):
         )
 
     def action_checks_to_print(self):
-        check_method = self.env.ref('account_check_printing.account_payment_method_check')
+        payment_method_line = self.outbound_payment_method_line_ids.filtered(lambda l: l.code == 'check_printing')
         return {
             'name': _('Checks to Print'),
             'type': 'ir.actions.act_window',
@@ -106,6 +106,6 @@ class AccountJournal(models.Model):
                 journal_id=self.id,
                 default_journal_id=self.id,
                 default_payment_type='outbound',
-                default_payment_method_id=check_method.id,
+                default_payment_method_line_id=payment_method_line.id,
             ),
         }

--- a/addons/account_check_printing/models/account_payment.py
+++ b/addons/account_check_printing/models/account_payment.py
@@ -12,13 +12,16 @@ class AccountPaymentRegister(models.TransientModel):
     _inherit = "account.payment.register"
 
     @api.depends('payment_type', 'journal_id', 'partner_id')
-    def _compute_payment_method_id(self):
-        super()._compute_payment_method_id()
+    def _compute_payment_method_line_id(self):
+        super()._compute_payment_method_line_id()
         for record in self:
             preferred = record.partner_id.with_company(record.company_id).property_payment_method_id
-            if (record.payment_type == 'outbound'
-                    and preferred in record.journal_id.outbound_payment_method_line_ids.mapped('payment_method_id')):
-                record.payment_method_id = preferred
+            method_line = record.journal_id.outbound_payment_method_line_ids.filtered(
+                lambda l: l.payment_method_id == preferred
+            )
+            if record.payment_type == 'outbound' and method_line:
+                record.payment_method_line_id = method_line
+
 
 class AccountPayment(models.Model):
     _inherit = "account.payment"
@@ -39,7 +42,7 @@ class AccountPayment(models.Model):
         help="The selected journal is configured to print check numbers. If your pre-printed check paper already has numbers "
              "or if the current numbering is wrong, you can change it in the journal configuration page.",
     )
-    payment_method_id = fields.Many2one(index=True)
+    payment_method_line_id = fields.Many2one(index=True)
 
     @api.constrains('check_number', 'journal_id')
     def _constrains_check_number(self):
@@ -77,7 +80,7 @@ class AccountPayment(models.Model):
                 ) for r in res)
             ))
 
-    @api.depends('payment_method_id', 'currency_id', 'amount')
+    @api.depends('payment_method_line_id', 'currency_id', 'amount')
     def _compute_check_amount_in_words(self):
         for pay in self:
             if pay.currency_id:
@@ -101,13 +104,14 @@ class AccountPayment(models.Model):
                 sequence.padding = len(payment.check_number)
 
     @api.depends('payment_type', 'journal_id', 'partner_id')
-    def _compute_payment_method_id(self):
-        super()._compute_payment_method_id()
+    def _compute_payment_method_line_id(self):
+        super()._compute_payment_method_line_id()
         for record in self:
             preferred = record.partner_id.with_company(record.company_id).property_payment_method_id
-            if (record.payment_type == 'outbound'
-                    and preferred in record.journal_id.outbound_payment_method_line_ids.mapped('payment_method_id')):
-                record.payment_method_id = preferred
+            method_line = record.journal_id.outbound_payment_method_line_ids\
+                .filtered(lambda l: l.payment_method_id == preferred)
+            if record.payment_type == 'outbound' and method_line:
+                record.payment_method_line_id = method_line
 
     def action_post(self):
         res = super(AccountPayment, self).action_post()
@@ -120,7 +124,7 @@ class AccountPayment(models.Model):
     def print_checks(self):
         """ Check that the recordset is valid, set the payments state to sent and call print_checks() """
         # Since this method can be called via a client_action_multi, we need to make sure the received records are what we expect
-        self = self.filtered(lambda r: r.payment_method_id.code == 'check_printing' and r.state != 'reconciled')
+        self = self.filtered(lambda r: r.payment_method_line_id.code == 'check_printing' and r.state != 'reconciled')
 
         if len(self) == 0:
             raise UserError(_("Payments to print as a checks must have 'Check' selected as payment method and "
