PR: https://github.com/odoo/odoo/pull/

From: c914df5a369eb49e4e72a698c0811200b5825f22
From: amoyaux
Date: 2017-09-08 15:08:06

Structural Changes: 4
Total Changes: 70

[IMP] stock,mrp,purchase: split _run method and move it to rules

Previously mrp, stock and purchase used _run methon on procurement
group and start with a if checking for the action type. This commit
instead launch a specific method depending the rule's action's type

Also _run method and their submethod used in procurement group
was always called with a rule. Thus we choose to move this method
on the rule object himself.

================================= pseudo patch: =================================

--- a/addons/sale_stock/models/sale_order.py
+++ b/addons/sale_stock/models/sale_order.py
@@ -37,7 +37,7 @@ class SaleOrder(models.Model):
     def action_confirm(self):
         result = super(SaleOrder, self).action_confirm()
         for order in self:
-            order.order_line._action_procurement_create()
+            order.order_line._action_launch_procurement_rule()
         return result
 
     @api.depends('picking_ids')
@@ -89,7 +89,7 @@ class SaleOrderLine(models.Model):
     def create(self, values):
         line = super(SaleOrderLine, self).create(values)
         if line.state == 'sale':
-            line._action_procurement_create()
+            line._action_launch_procurement_rule()
         return line
 
     @api.multi
@@ -101,7 +101,7 @@ class SaleOrderLine(models.Model):
                 lambda r: r.state == 'sale' and float_compare(r.product_uom_qty, values['product_uom_qty'], precision_digits=precision) == -1)
         res = super(SaleOrderLine, self).write(values)
         if lines:
-            lines._action_procurement_create()
+            lines._action_launch_procurement_rule()
         return res
     
 
@@ -186,31 +186,32 @@ class SaleOrderLine(models.Model):
         return {}
 
     @api.multi
-    def _prepare_order_line_procurement(self, group_id=False):
+    def _prepare_procurement_values(self, group_id=False):
+        """ Prepare specific key for moves or other components that will be created from a procurement rule
+        comming from a sale order line. This method could be override in order to add other custom key that could
+        be used in move/po creation.
+        """
+        values = super(SaleOrderLine, self)._prepare_procurement_values(group_id)
         self.ensure_one()
         date_planned = datetime.strptime(self.order_id.confirmation_date, DEFAULT_SERVER_DATETIME_FORMAT)\
             + timedelta(days=self.customer_lead or 0.0) - timedelta(days=self.order_id.company_id.security_lead)
-        return {
-            'name': self.name,
-            'origin': self.order_id.name,
-            'product_id': self.product_id,
-            'product_qty': self.product_uom_qty,
-            'product_uom': self.product_uom,
+        values.update({
             'company_id': self.order_id.company_id,
             'group_id': group_id,
             'sale_line_id': self.id,
             'date_planned': date_planned.strftime(DEFAULT_SERVER_DATETIME_FORMAT),
-            'location_id': self.order_id.partner_shipping_id.property_stock_customer,
             'route_ids': self.route_id,
             'warehouse_id': self.order_id.warehouse_id or False,
             'partner_dest_id': self.order_id.partner_shipping_id
-        }
+        })
+        return values
 
     @api.multi
-    def _action_procurement_create(self):
+    def _action_launch_procurement_rule(self):
         """
-        Create procurements based on quantity ordered. If the quantity is increased, new
-        procurements are created. If the quantity is decreased, no automated action is taken.
+        Launch procurement group run method with required/custom fields genrated by a
+        sale order line. procurement group will launch '_run_move', '_run_buy' or '_run_manufacture'
+        depending on the sale order line product rule.
         """
         precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
         for line in self:
@@ -223,17 +224,16 @@ class SaleOrderLine(models.Model):
                 continue
 
             if not line.order_id.procurement_group_id:
-                line.order_id.procurement_group_id = self.env["procurement.group"].create({
+                line.order_id.procurement_group_id = self.env['procurement.group'].create({
                     'name': line.order_id.name, 'move_type': line.order_id.picking_policy,
                     'sale_id': line.order_id.id
                 })
-            vals = line._prepare_order_line_procurement(group_id=line.order_id.procurement_group_id)
-            vals['product_qty'] = line.product_uom_qty - qty
+            values = line._prepare_procurement_values(group_id=line.order_id.procurement_group_id)
+            product_qty = line.product_uom_qty - qty
 
-            new_proc = self.env["procurement.group"].run(vals)
+            self.env['procurement.group'].run(line.product_id, product_qty, line.product_uom, line.order_id.partner_shipping_id.property_stock_customer, line.name, line.order_id.name, values)
         return True
 
-
     @api.multi
     def _get_delivered_qty(self):
         self.ensure_one()

--- a/addons/sale_stock/models/stock.py
+++ b/addons/sale_stock/models/stock.py
@@ -20,17 +20,6 @@ class StockMove(models.Model):
             line.qty_delivered = line._get_delivered_qty()
         return result
 
-class ProcurementGroup(models.Model):
-    _inherit = 'procurement.group'
-
-    sale_id = fields.Many2one('sale.order', 'Sale Order')
-
-    def _get_stock_move_values(self, values, rule, group_id):
-        result = super(ProcurementGroup, self)._get_stock_move_values(values, rule, group_id)
-        if values.get('sale_line_id', False):
-            result['sale_line_id'] = values['sale_line_id']
-        return result
-
     @api.multi
     def write(self, vals):
         res = super(StockMove, self).write(vals)
@@ -43,10 +32,25 @@ class ProcurementGroup(models.Model):
         return res
 
 
+class ProcurementGroup(models.Model):
+    _inherit = 'procurement.group'
+
+    sale_id = fields.Many2one('sale.order', 'Sale Order')
+
+
+class ProcurementRule(models.Model):
+    _inherit = 'procurement.rule'
+
+    def _get_stock_move_values(self, product_id, product_qty, product_uom, location_id, name, origin, values, group_id):
+        result = super(ProcurementRule, self)._get_stock_move_values(product_id, product_qty, product_uom, location_id, name, origin, values, group_id)
+        if values.get('sale_line_id', False):
+            result['sale_line_id'] = values['sale_line_id']
+        return result
+
+
 class StockPicking(models.Model):
     _inherit = 'stock.picking'
 
-
     sale_id = fields.Many2one(related="group_id.sale_id", string="Sales Order", store=True)
 
     @api.multi
@@ -59,4 +63,4 @@ class StockPicking(models.Model):
                     'mail.message_origin_link',
                     values={'self': backorder, 'origin': backorder.sale_id},
                     subtype_id=self.env.ref('mail.mt_note').id)
-        return res
\ No newline at end of file
+        return res
