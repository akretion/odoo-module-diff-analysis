PR: https://github.com/odoo/odoo/pull/166230

From: ac106704f3c2d3e3fa94415134b9d5522b325378
From: Habib (ayh)
Date: 2024-05-29 21:32:38

Structural Changes: 3
Total Changes: 33

[IMP] account,*: {dash/on}board

A previous commit in this PR makes the Accounting dashboard available to users with only Invoicing (account) installed.
The main purpose of this commit is to improve the dashboard and simplify the onboarding process.

Journal Display and Sequence
----------------------------
The Dashboard UI has been improved. Larger cards on wide screen display (depending on the number of journals)
For Invoicing users, the Miscellaneous journal is not typically used, and is therefore hidden by default.
Empty Journal cards will display sample data or some form of onboarding steps.

Simplification/removal of onboarding steps
------------------------------------------
All onboarding steps have been removed from Invoicing (account). Remaining steps are for Accounting (accounting) users and are displayed on the Miscellaneous Journal kanban card on the dashboard.
Onboarding steps can be multi-company (when journal cards are from multiple companies)

Drag & Drop
-----------
The dashboard could always manage dragging and dropping of files to a journal card, the UI/UX is improved. Drag and Drop on miscellanous journals is only available in Accounting.

Onboarding component
--------------------
A new onboarding widget component is added which displays onboarding steps on the dashboards journal cards. Whilst the component is in Invoicing, it is only used in Accounting - on the Miscellaneous tax journal.
Since the onboarding banner is removed from the dashboard, the onboarding steps are initiated on installation of Accounting modules.

Bill Guide component
--------------------
Empty Bills Journals will display a guide indicating how to get started ie. Upload a file, email a file, create a bill manually or try our sample. This replaces the previous wizard that was available. Clicking "try our sample" creates a new sample bill with an attachment and directs the user directly to the bill.

The same component is used as the no content helper on the bills list view.

Online Sync
-----------
Online sync will no longer depend on Accounting, and can work with Invoicing (Enterprise)

Other changes include:
- simple ui improvements: views related to onboarding are simplified. Addresses on company form views adapt to the active company country (like contact form view)
- tours: overridable steps for flexible flows in invoicing/accounting
- tour tests: since the dashboard might make calls to fetch bank sync institutions (odoofin) - those API calls are mocked for all accounting tours.
- icons are added/moved to make them reusable
- prepare display of tax activities on the tax journal (links to file a tax return and pay tax - usable in Accounting)
- cleanup of actions that can be done from the dashboard
- removal of components that marked onboarding steps done on form view dialog save (company_onboarding_form)
- removal of the bill tour wizard (replaced by bill guide on kanban card)

Part of Task-3636384

closes odoo/odoo#166230

Related: odoo/upgrade#6056
Related: odoo/enterprise#62890
Signed-off-by: William Andr√© (wan) <wan@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/ir_actions.py
+++ b/odoo/addons/base/models/ir_actions.py
@@ -379,7 +379,9 @@ class IrActionsActWindow(models.Model):
             "res_id", "res_model", "search_view_id", "target", "view_id", "view_mode", "views", "embedded_action_ids",
             # `flags` is not a real field of ir.actions.act_window but is used
             # to give the parameters to generate the action
-            "flags"
+            "flags",
+            # this is used by frontend, with the document layout wizard before send and print
+            "close_on_report_download",
         }
 
 

--- a/odoo/addons/base/models/res_company.py
+++ b/odoo/addons/base/models/res_company.py
@@ -16,6 +16,7 @@ class Company(models.Model):
     _name = "res.company"
     _description = 'Companies'
     _order = 'sequence, name'
+    _inherit = ['format.address.mixin', 'format.vat.label.mixin']
     _parent_store = True
 
     def copy(self, default=None):

--- a/odoo/addons/base/models/res_partner.py
+++ b/odoo/addons/base/models/res_partner.py
@@ -38,6 +38,21 @@ def _tz_get(self):
     return _tzs
 
 
+class FormatVATLabelMixin(models.AbstractModel):
+    _name = "format.vat.label.mixin"
+    _description = "Country Specific VAT Label"
+
+    @api.model
+    def _get_view(self, view_id=None, view_type='form', **options):
+        arch, view = super()._get_view(view_id, view_type, **options)
+        if vat_label := self.env.company.country_id.vat_label:
+            for node in arch.iterfind(".//field[@name='vat']"):
+                node.set("string", vat_label)
+            # In some module vat field is replaced and so above string change is not working
+            for node in arch.iterfind(".//label[@for='vat']"):
+                node.set("string", vat_label)
+        return arch, view
+
 class FormatAddressMixin(models.AbstractModel):
     _name = "format.address.mixin"
     _description = 'Address Format'
@@ -163,7 +178,7 @@ class PartnerTitle(models.Model):
 
 class Partner(models.Model):
     _description = 'Contact'
-    _inherit = ['format.address.mixin', 'avatar.mixin']
+    _inherit = ['format.address.mixin', 'format.vat.label.mixin', 'avatar.mixin']
     _name = "res.partner"
     _order = "complete_name ASC, id DESC"
     _rec_names_search = ['complete_name', 'email', 'ref', 'vat', 'company_registry']  # TODO vat must be sanitized the same way for storing/searching
@@ -426,17 +441,6 @@ class Partner(models.Model):
         for company in self:
             company.company_registry = company.company_registry
 
-    @api.model
-    def _get_view(self, view_id=None, view_type='form', **options):
-        arch, view = super()._get_view(view_id, view_type, **options)
-        if vat_label := self.env.company.country_id.vat_label:
-            for node in arch.iterfind(".//field[@name='vat']"):
-                node.set("string", vat_label)
-            # In some module vat field is replaced and so above string change is not working
-            for node in arch.iterfind(".//label[@for='vat']"):
-                node.set("string", vat_label)
-        return arch, view
-
     @api.constrains('parent_id')
     def _check_parent_id(self):
         if self._has_cycle():
