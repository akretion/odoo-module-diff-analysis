PR: https://github.com/odoo/odoo/pull/

From: 0e4f3bb95991261c04c08e72b28430acfabdecd1
From: Fabien Pinckaers
Date: 2017-09-08 15:08:05

Structural Changes: 5
Total Changes: 158

[IMP] stock: remove procurement orders to fufill immediately

This removes the procurement.order model. To fufill their needs SO, PO, MO and
stock moves now call the _run method of the relevant procurement.group.

This mecanism is now only used for stockable product, tasks now uses their own
independent mecanism.

The _run method will check all the applicable rules and create directly the
needed model to fufill the need.

The modules stock, purchase, mrp, extends the _run method to implement their
specific strategy relevant for the rule type they define.

If an exception happens the message will be logged as a mail messsage on the
source model, for example, if a sales order cannot be fufilled the salesperson
will now see directly the reason.

OLD commit messages:
[WIP] procurement: removing procurement.order in stock, sale, purchase, sale_stock. WIP
fixup! [WIP] procurement: removing procurement.order in stock, sale, purchase, sale_stock. WIP
[IMP] Basic tests
[FIX] test not necessary anymore
[FIX] remove unnecessary print statement
[FIX] unnecessary test + why passing warehouse worked before?
[IMP] purchase: one move by purchase order line
[FIX] purchase: correct inventory tests and pass move_dest_ids among procurements
[FIX] because of bad cherry-pick merge
[IMP] make mrp pass by adding move_dest_ids there too
[IMP] tests of sale_mrp, no need for cancelpropagation then
[IMP] better to consistently use recordsets also for one2many
[FIX] purchase_requisition
[FIX] Exceptions should trigger errors, which should be caught in the tests
[FIX] sale_mrp: remove usage of procurement.order and use sale order name instead of sol
[FIX] stock_dropshipping: add sale_line_id on purchase_line_id
[FIX] Remove pdb
[IMP] add stock_dropshipping files
[IMP] stock: search carrier through sale line instead of procurement group
[IMP] add procrule test and preision needed when updating sol
[FIX] sale_order_dates + [IMP] procurement exceptions by scheduler
[FIX] No need to return task
[IMP] move file as name changes and add corrections
[FIX] Continue Run Schedulers wizard fix
[FIX] name issues of takss
[FIX] updating sale order line, but there is still a problem with the recompute

================================= pseudo patch: =================================

--- a/addons/sale_timesheet/models/__init__.py
+++ b/addons/sale_timesheet/models/__init__.py
@@ -4,7 +4,6 @@
 from . import account
 from . import account_invoice
 from . import hr
-from . import procurement
 from . import product
 from . import project
 from . import res_company

--- a/addons/sale_timesheet/models/procurement.py
+++ b/None
@@ -1,91 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, fields, models, _
-
-
-class ProcurementOrder(models.Model):
-    _inherit = 'procurement.order'
-
-    task_id = fields.Many2one('project.task', 'Task', copy=False)
-
-    def _is_procurement_task(self):
-        return self.product_id.type == 'service' and self.product_id.track_service == 'task'
-
-    @api.multi
-    def _assign(self):
-        self.ensure_one()
-        res = super(ProcurementOrder, self)._assign()
-        if not res:
-            # if there isn't any specific procurement.rule defined for the product, we may want to create a task
-            return self._is_procurement_task()
-        return res
-
-    @api.multi
-    def _run(self):
-        self.ensure_one()
-        if self._is_procurement_task() and not self.task_id:
-            # If the SO was confirmed, cancelled, set to draft then confirmed, avoid creating a new
-            # task.
-            if self.sale_line_id:
-                existing_task = self.env['project.task'].search(
-                    [('sale_line_id', '=', self.sale_line_id.id)]
-                )
-                if existing_task:
-                    return existing_task
-            # create a task for the procurement
-            return self._create_service_task()
-        return super(ProcurementOrder, self)._run()
-
-    def _convert_qty_company_hours(self):
-        company_time_uom_id = self.env.user.company_id.project_time_mode_id
-        if self.product_uom.id != company_time_uom_id.id and self.product_uom.category_id.id == company_time_uom_id.category_id.id:
-            planned_hours = self.product_uom._compute_quantity(self.product_qty, company_time_uom_id)
-        else:
-            planned_hours = self.product_qty
-        return planned_hours
-
-    def _get_project(self):
-        Project = self.env['project.project']
-        project = self.product_id.with_context(force_company=self.company_id.id).project_id
-        if not project and self.sale_line_id:
-            # find the project corresponding to the analytic account of the sales order
-            account = self.sale_line_id.order_id.project_id
-            if not account:
-                self.sale_line_id.order_id._create_analytic_account()
-                account = self.sale_line_id.order_id.project_id
-            project = Project.search([('analytic_account_id', '=', account.id)], limit=1)
-            if not project:
-                project_id = account.project_create({'name': account.name})
-                project = Project.browse(project_id)
-        return project
-
-    def _prepare_service_task_values(self):
-        project = self._get_project()
-        planned_hours = self._convert_qty_company_hours()
-        return {
-            'name': '%s:%s' % (self.origin or '', self.product_id.name),
-            'date_deadline': self.date_planned,
-            'planned_hours': planned_hours,
-            'remaining_hours': planned_hours,
-            'partner_id': self.sale_line_id.order_id.partner_id.id or self.partner_dest_id.id,
-            'user_id': self.env.uid,
-            'procurement_id': self.id,
-            'description': self.name + '<br/>',
-            'project_id': project.id,
-            'company_id': self.company_id.id,
-        }
-
-    def _create_service_task(self):
-        task_values = self._prepare_service_task_values()
-        task = self.env['project.task'].create(task_values)
-        self.write({'task_id': task.id})
-
-        msg_body = _("Task Created (%s): <a href=# data-oe-model=project.task data-oe-id=%d>%s</a>") % (self.product_id.name, task.id, task.name)
-        self.message_post(body=msg_body)
-        if self.sale_line_id.order_id:
-            self.sale_line_id.order_id.message_post(body=msg_body)
-            task_msg = _("This task has been created from: <a href=# data-oe-model=sale.order data-oe-id=%d>%s</a> (%s)") % (self.sale_line_id.order_id.id, self.sale_line_id.order_id.name, self.product_id.name)
-            task.message_post(body=task_msg)
-
-        return task

--- a/addons/sale_timesheet/models/product.py
+++ b/addons/sale_timesheet/models/product.py
@@ -21,13 +21,3 @@ class ProductTemplate(models.Model):
         else:
             self.track_service = 'manual'
 
-
-class ProductProduct(models.Model):
-    _inherit = 'product.product'
-
-    @api.multi
-    def _need_procurement(self):
-        for product in self:
-            if product.type == 'service' and product.track_service == 'task':
-                return True
-        return super(ProductProduct, self)._need_procurement()

--- a/addons/sale_timesheet/models/project.py
+++ b/addons/sale_timesheet/models/project.py
@@ -54,8 +54,7 @@ class Project(models.Model):
 class ProjectTask(models.Model):
     _inherit = "project.task"
 
-    procurement_id = fields.Many2one('procurement.order', 'Assign to Order', ondelete='set null', help="Procurement of the sale order line on which the timesheets should be assigned")
-    sale_line_id = fields.Many2one('sale.order.line', 'Sales Order Line', related='procurement_id.sale_line_id', store=True)
+    sale_line_id = fields.Many2one('sale.order.line', 'Sales Order Line')
 
     @api.multi
     def unlink(self):
@@ -76,5 +75,4 @@ class ProjectTask(models.Model):
 
     @api.onchange('parent_id')
     def onchange_parent_id(self):
-        self.procurement_id = self.parent_id.procurement_id.id
         self.sale_line_id = self.parent_id.sale_line_id.id

--- a/addons/sale_timesheet/models/sale_order.py
+++ b/addons/sale_timesheet/models/sale_order.py
@@ -66,6 +66,7 @@ class SaleOrder(models.Model):
                             order._create_analytic_account(prefix=line.product_id.default_code or None)
                         order.project_id.project_create({'name': order.project_id.name})
                         break
+            order.order_line.filtered(lambda line: line._is_task())._create_task()
         return result
 
     @api.multi
@@ -131,11 +132,14 @@ class SaleOrder(models.Model):
 class SaleOrderLine(models.Model):
     _inherit = "sale.order.line"
 
+    task_id = fields.Many2one('project.task', 'Task')
+
     @api.model
     def create(self, values):
         line = super(SaleOrderLine, self).create(values)
         if line.state == 'sale' and not line.order_id.project_id and line.product_id.track_service in ['timesheet', 'task']:
             line.order_id._create_analytic_account()
+            line._create_task()
         return line
 
     @api.multi
@@ -146,3 +150,51 @@ class SaleOrderLine(models.Model):
             expense_type_id = expense_type_id and expense_type_id.id
             domain = [('so_line', 'in', self.ids), '|', ('amount', '<=', 0.0), ('project_id', '!=', False)]
         return super(SaleOrderLine, self)._compute_analytic(domain=domain)
+
+    def _convert_qty_company_hours(self):
+        company_time_uom_id = self.env.user.company_id.project_time_mode_id
+        if self.product_uom.id != company_time_uom_id.id and self.product_uom.category_id.id == company_time_uom_id.category_id.id:
+            planned_hours = self.product_uom._compute_quantity(self.product_uom_qty, company_time_uom_id)
+        else:
+            planned_hours = self.product_uom_qty
+        return planned_hours
+
+    def _get_project(self):
+        Project = self.env['project.project']
+        project = self.product_id.with_context(force_company=self.company_id.id).project_id
+        if not project:
+            # find the project corresponding to the analytic account of the sales order
+            account = self.order_id.project_id
+            if not account:
+                self.order_id._create_analytic_account()
+                account = self.order_id.project_id
+            project = Project.search([('analytic_account_id', '=', account.id)], limit=1)
+            if not project:
+                project_id = account.project_create({'name': account.name, 'use_tasks': True})
+                project = Project.browse(project_id)
+        return project
+
+    def _prepare_service_task_values(self):
+        self.ensure_one()
+        project = self._get_project()
+        planned_hours = self._convert_qty_company_hours()
+        return {
+            'name': '%s:%s' % (self.order_id.name or '', self.product_id.name),
+            'planned_hours': planned_hours,
+            'remaining_hours': planned_hours,
+            'partner_id': self.order_id.partner_id.id,
+            'description': self.name + '<br/>',
+            'project_id': project.id,
+            'sale_line_id': self.id,
+            'company_id': self.company_id.id,
+        }
+
+    def _create_task(self):
+        for line in self:
+            task_values = line._prepare_service_task_values()
+            task = self.env['project.task'].create(task_values)
+            self.write({'task_id': task.id})
+
+    def _is_task(self):
+        self.ensure_one()
+        return self.product_id.type == 'service' and self.product_id.track_service == 'task'
