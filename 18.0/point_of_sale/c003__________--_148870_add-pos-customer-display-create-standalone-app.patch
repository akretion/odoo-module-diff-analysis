PR: https://github.com/odoo/odoo/pull/148870

From: acf78c27b12cf014cd80d20ea5853e63ab9ca03f
From: vlst-odoo
Date: 2024-05-14 11:41:44

Breaking data model changes score: 7.4, change matches:
-    iface_customer_facing_display = fields.Boolean(compute='_compute_customer_facing_display')
-    iface_customer_facing_display_via_proxy = fields.Boolean(string='Customer Facing Display', help="Show checkout to customers with a remotely-connected screen.")
-    iface_customer_facing_display_local = fields.Boolean(string='Local Customer Facing Display', help="Show checkout to customers.")
-    iface_customer_facing_display_background_image_1920 = fields.Image(string='Background Image', max_width=1920, max_height=1920, compute='_compute_iface_customer_facing_display_background_image_1920', store=True)
-    pos_iface_customer_facing_display_local = fields.Boolean(related='pos_config_id.iface_customer_facing_display_local', readonly=False)
-    pos_iface_customer_facing_display_via_proxy = fields.Boolean(string='Customer Facing Display', compute='_compute_pos_iface_customer_facing_display_via_proxy', readonly=False, store=True)
-    pos_iface_customer_facing_display_background_image_1920 = fields.Image(related='pos_config_id.iface_customer_facing_display_background_image_1920', readonly=False)
-    pos_proxy_ip = fields.Char(string='IP Address', compute='_compute_pos_proxy_ip', readonly=False, store=True)
+    pos_proxy_ip = fields.Char(string='IP Address', related="pos_config_id.proxy_ip", readonly=False)

Total Changes: 74

[ADD] pos_customer_display: create standalone app

In this pr we refactor the customer display code from pos
such that the customer display now becomes it's own standalone
owl app.

Before, the pos app would generate all the html code for the customer
display and it would send this text to the customer display window or to
the iot box. This approach was messy and wasteful, as all the data would
have to be resent for each change in the order. ( for example if the
order consisted of 10 items, each with an image, the pos would render
all the html and would send all the 10 images again for just an increase
in the quantity of one of the orderlines )

Now, the pos just sends the order details ( product names, quantities,
etc. ) and the customer display owl app handles the rendering.

This massively simplifies the code and also allows reusability of
components between the pos and the customer display.

Depending on the configuration, the pos sends the data in the following
ways:
 - Config local: broadcast channel api
 - Config remote: the pos calls a rpc method on the server and this rpc
   sends a websocket notification to the customer display
 - Config proxy: the pos sends a http request to the iot box on the
   local network; with the new implementation, the amount of data that
   is sent from the pos browser window to the iot box is immensely
   diminished. For each change in the order, the pos sends the new order
   data, but now sends aprox 15 times less data for each change.
   This is due to the fact that we now only send the actual order data (
   an object containing product names, quantities, etc ) instead of the
   full html representation of the customer display. ( as an example,
   for an order with 10 items, we now send 3kb of data instead of 47kb )

closes odoo/odoo#148870

Task: 3684195
Related: odoo/enterprise#54501
Related: odoo/upgrade#5585
Signed-off-by: Joseph Caburnay (jcb) <jcb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/__init__.py
+++ b/addons/point_of_sale/models/__init__.py
@@ -11,6 +11,7 @@ from . import pos_bus_mixin
 from . import barcode_rule
 from . import chart_template
 from . import digest
+from . import ir_binary
 from . import pos_category
 from . import pos_config
 from . import pos_order

--- a/None
+++ b/addons/point_of_sale/models/ir_binary.py
@@ -0,0 +1,10 @@
+from odoo import models
+
+
+class IrBinary(models.AbstractModel):
+    _inherit = "ir.binary"
+
+    def _find_record_check_access(self, record, access_token, field):
+        if record._name == "product.product" and field == "image_128":
+            return record.sudo()
+        return super()._find_record_check_access(record, access_token, field)

--- a/addons/point_of_sale/models/pos_config.py
+++ b/addons/point_of_sale/models/pos_config.py
@@ -4,6 +4,7 @@
 from datetime import datetime
 from uuid import uuid4
 import pytz
+import secrets
 
 from odoo import api, fields, models, _, Command
 from odoo.osv.expression import OR, AND
@@ -62,6 +63,9 @@ class PosConfig(models.Model):
             tip_product_id = self.env['product.product'].search([('default_code', '=', 'TIPS')], limit=1)
         return tip_product_id
 
+    def _get_customer_display_types(self):
+        return [('none', 'None'), ('local', 'The same device'), ('remote', 'Another device'), ('proxy', 'An IOT-connected screen')]
+
     name = fields.Char(string='Point of Sale', required=True, help="An internal identification of the point of sale.")
     printer_ids = fields.Many2many('pos.printer', 'pos_config_printer_rel', 'config_id', 'printer_id', string='Order Printers')
     is_order_printer = fields.Boolean('Order Printer')
@@ -90,10 +94,6 @@ class PosConfig(models.Model):
     currency_id = fields.Many2one('res.currency', compute='_compute_currency', compute_sudo=True, string="Currency")
     iface_cashdrawer = fields.Boolean(string='Cashdrawer', help="Automatically open the cashdrawer.")
     iface_electronic_scale = fields.Boolean(string='Electronic Scale', help="Enables Electronic Scale integration.")
-    iface_customer_facing_display = fields.Boolean(compute='_compute_customer_facing_display')
-    iface_customer_facing_display_via_proxy = fields.Boolean(string='Customer Facing Display', help="Show checkout to customers with a remotely-connected screen.")
-    iface_customer_facing_display_local = fields.Boolean(string='Local Customer Facing Display', help="Show checkout to customers.")
-    iface_customer_facing_display_background_image_1920 = fields.Image(string='Background Image', max_width=1920, max_height=1920, compute='_compute_iface_customer_facing_display_background_image_1920', store=True)
     iface_print_via_proxy = fields.Boolean(string='Print via Proxy', help="Bypass browser printing and prints via the hardware proxy.")
     iface_scan_via_proxy = fields.Boolean(string='Scan via Proxy', help="Enable barcode scanning with a remotely connected barcode scanner and card swiping with a Vantiv card reader.")
     iface_big_scrollbars = fields.Boolean('Large Scrollbars', help='For imprecise industrial touchscreens.')
@@ -106,6 +106,9 @@ class PosConfig(models.Model):
         help='The point of sale will display this product category by default. If no category is specified, all available products will be shown.')
     iface_available_categ_ids = fields.Many2many('pos.category', string='Available PoS Product Categories',
         help='The point of sale will only display products which are within one of the selected category trees. If no category is specified, all available products will be shown')
+    customer_display_type = fields.Selection(selection=lambda self: self._get_customer_display_types(), string='Customer Facing Display', help="Show checkout to customers.", default='local')
+    customer_display_bg_img = fields.Image(string='Background Image', max_width=1920, max_height=1920)
+    customer_display_bg_img_name = fields.Char(string='Background Image Name')
     restrict_price_control = fields.Boolean(string='Restrict Price Modifications to Managers',
         help="Only users with Manager access rights for PoS app can modify the product prices on orders.")
     is_margins_costs_accessible_to_every_user = fields.Boolean(string='Margins & Costs', default=False,
@@ -276,17 +279,6 @@ class PosConfig(models.Model):
                 pos_config.pos_session_duration = 0
                 pos_config.current_user_id = False
 
-    @api.depends('iface_customer_facing_display_via_proxy', 'iface_customer_facing_display_local')
-    def _compute_customer_facing_display(self):
-        for config in self:
-            config.iface_customer_facing_display = config.iface_customer_facing_display_via_proxy or config.iface_customer_facing_display_local
-
-    @api.depends('iface_customer_facing_display')
-    def _compute_iface_customer_facing_display_background_image_1920(self):
-        for config in self:
-            if not config.iface_customer_facing_display:
-                config.iface_customer_facing_display_background_image_1920 = False
-
     @api.constrains('rounding_method')
     def _check_rounding_method_strategy(self):
         for config in self:
@@ -947,3 +939,20 @@ class PosConfig(models.Model):
 
     def _get_special_products(self):
         return self.env.ref('point_of_sale.product_product_tip', raise_if_not_found=False) or self.env['product.product']
+
+    def update_customer_display(self, order, access_token):
+        self.ensure_one()
+        if not access_token or not secrets.compare_digest(self.access_token, access_token):
+            return
+        self._notify("UPDATE_CUSTOMER_DISPLAY", order)
+
+    def _get_customer_display_data(self):
+        self.ensure_one()
+        return {
+            'config_id': self.id,
+            'access_token': self.access_token,
+            'type': self.customer_display_type,
+            'has_bg_img': bool(self.customer_display_bg_img),
+            'company_id': self.company_id.id,
+            **({'proxy_ip': self.proxy_ip} if self.customer_display_type == 'proxy' else {}),
+        }

--- a/addons/point_of_sale/models/res_config_settings.py
+++ b/addons/point_of_sale/models/res_config_settings.py
@@ -44,6 +44,9 @@ class ResConfigSettings(models.TransientModel):
     account_default_pos_receivable_account_id = fields.Many2one(string='Default Account Receivable (PoS)', related='company_id.account_default_pos_receivable_account_id', readonly=False, check_company=True)
     barcode_nomenclature_id = fields.Many2one('barcode.nomenclature', related='company_id.nomenclature_id', readonly=False)
     is_kiosk_mode = fields.Boolean(string="Is Kiosk Mode", default=False)
+    pos_customer_display_type = fields.Selection(related="pos_config_id.customer_display_type", readonly=False, required=True)
+    pos_customer_display_bg_img = fields.Image(related='pos_config_id.customer_display_bg_img', readonly=False)
+    pos_customer_display_bg_img_name = fields.Char(related='pos_config_id.customer_display_bg_img_name', readonly=False)
 
     # pos.config fields
     pos_module_pos_discount = fields.Boolean(related='pos_config_id.module_pos_discount', readonly=False)
@@ -65,9 +68,6 @@ class ResConfigSettings(models.TransientModel):
     pos_iface_available_categ_ids = fields.Many2many('pos.category', string='Available PoS Product Categories', compute='_compute_pos_iface_available_categ_ids', readonly=False, store=True)
     pos_iface_big_scrollbars = fields.Boolean(related='pos_config_id.iface_big_scrollbars', readonly=False)
     pos_iface_cashdrawer = fields.Boolean(string='Cashdrawer', compute='_compute_pos_iface_cashdrawer', readonly=False, store=True)
-    pos_iface_customer_facing_display_local = fields.Boolean(related='pos_config_id.iface_customer_facing_display_local', readonly=False)
-    pos_iface_customer_facing_display_via_proxy = fields.Boolean(string='Customer Facing Display', compute='_compute_pos_iface_customer_facing_display_via_proxy', readonly=False, store=True)
-    pos_iface_customer_facing_display_background_image_1920 = fields.Image(related='pos_config_id.iface_customer_facing_display_background_image_1920', readonly=False)
     pos_iface_electronic_scale = fields.Boolean(string='Electronic Scale', compute='_compute_pos_iface_electronic_scale', readonly=False, store=True)
     pos_iface_print_auto = fields.Boolean(related='pos_config_id.iface_print_auto', readonly=False)
     pos_iface_print_skip_screen = fields.Boolean(related='pos_config_id.iface_print_skip_screen', readonly=False)
@@ -89,7 +89,7 @@ class ResConfigSettings(models.TransientModel):
     pos_picking_policy = fields.Selection(related='pos_config_id.picking_policy', readonly=False)
     pos_picking_type_id = fields.Many2one(related='pos_config_id.picking_type_id', readonly=False)
     pos_pricelist_id = fields.Many2one('product.pricelist', string='Default Pricelist', compute='_compute_pos_pricelist_id', readonly=False, store=True)
-    pos_proxy_ip = fields.Char(string='IP Address', compute='_compute_pos_proxy_ip', readonly=False, store=True)
+    pos_proxy_ip = fields.Char(string='IP Address', related="pos_config_id.proxy_ip", readonly=False)
     pos_receipt_footer = fields.Text(string='Receipt Footer', compute='_compute_pos_receipt_header_footer', readonly=False, store=True)
     pos_receipt_header = fields.Text(string='Receipt Header', compute='_compute_pos_receipt_header_footer', readonly=False, store=True)
     pos_restrict_price_control = fields.Boolean(related='pos_config_id.restrict_price_control', readonly=False)
@@ -286,14 +286,6 @@ class ResConfigSettings(models.TransientModel):
             else:
                 res_config.pos_allowed_pricelist_ids = self.env['product.pricelist'].search([]).ids
 
-    @api.depends('pos_is_posbox', 'pos_config_id')
-    def _compute_pos_proxy_ip(self):
-        for res_config in self:
-            if not res_config.pos_is_posbox:
-                res_config.pos_proxy_ip = False
-            else:
-                res_config.pos_proxy_ip = res_config.pos_config_id.proxy_ip
-
     @api.depends('pos_is_posbox', 'pos_config_id')
     def _compute_pos_iface_print_via_proxy(self):
         for res_config in self:
@@ -318,14 +310,6 @@ class ResConfigSettings(models.TransientModel):
             else:
                 res_config.pos_iface_electronic_scale = res_config.pos_config_id.iface_electronic_scale
 
-    @api.depends('pos_is_posbox', 'pos_config_id')
-    def _compute_pos_iface_customer_facing_display_via_proxy(self):
-        for res_config in self:
-            if not res_config.pos_is_posbox:
-                res_config.pos_iface_customer_facing_display_via_proxy = False
-            else:
-                res_config.pos_iface_customer_facing_display_via_proxy = res_config.pos_config_id.iface_customer_facing_display_via_proxy
-
     @api.onchange('pos_trusted_config_ids')
     def _onchange_trusted_config_ids(self):
         for config in self:
