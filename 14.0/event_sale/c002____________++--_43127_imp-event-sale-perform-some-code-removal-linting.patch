PR: https://github.com/odoo/odoo/pull/43127

From: a04b209ce611d0c1212f2093d0017f5dc955544f
From: Thibault DelavallÃ©e
Date: 2020-01-10 16:06:44

Structural Changes: 8
Total Changes: 25

[IMP] event(_sale): perform some code removal / linting

PURPOSE

As event will soon evolve (onchange -> compute, code improvements, addition of
new features) cleaning and improving tests is necessary to help avoid issues.

SPECIFICATIONS

Use _tz_get for tz-based selection fields from partner as it smartly order
available timezones.

Remove a strange "event.confirm" wizard that calls an unexisting method,
is not reachable and is actually completely unnecessary.

Reorganize ticket fields to ease future improvements and perform some
public -> private method cleaning.

Remove duplicated code in event_sale.

LINKS

Side effect of Task ID 2089156 (event onchange to compute)
Community PR odoo/odoo#43127
Enterprise PR odoo/enterprise#7656

prout

================================= pseudo patch: =================================

--- a/addons/event_sale/models/event_event.py
+++ b/addons/event_sale/models/event_event.py
@@ -84,15 +84,3 @@ class Event(models.Model):
         non_open_events = self.filtered(lambda event: not any(event.event_ticket_ids.mapped('sale_available')))
         non_open_events.event_registrations_open = False
         super(Event, self - non_open_events)._compute_event_registrations_open()
-
-    @api.depends('sale_order_lines_ids')
-    def _compute_sale_total_price(self):
-        for event in self:
-            event.sale_total_price = sum([
-                event.currency_id._convert(
-                    sale_order_line_id.price_reduce_taxexcl,
-                    sale_order_line_id.currency_id,
-                    sale_order_line_id.company_id,
-                    sale_order_line_id.order_id.date_order)
-                for sale_order_line_id in event.sale_order_lines_ids
-            ])

--- a/addons/event_sale/models/event_ticket.py
+++ b/addons/event_sale/models/event_ticket.py
@@ -16,18 +16,19 @@ class EventTicket(models.Model):
     event_type_id = fields.Many2one('event.type', string='Event Category', ondelete='cascade')
     event_id = fields.Many2one('event.event', string="Event", ondelete='cascade')
     company_id = fields.Many2one('res.company', related='event_id.company_id')
+    # product
     product_id = fields.Many2one('product.product', string='Product',
         required=True, domain=[("event_ok", "=", True)],
         default=_default_product_id)
-    registration_ids = fields.One2many('event.registration', 'event_ticket_id', string='Registrations')
     price = fields.Float(string='Price', digits='Product Price')
+    price_reduce = fields.Float(string="Price Reduce", compute="_compute_price_reduce", digits='Product Price')
+    price_reduce_taxinc = fields.Float(compute='_get_price_reduce_tax', string='Price Reduce Tax inc')
+    # sale
     start_sale_date = fields.Date(string="Sales Start")
     end_sale_date = fields.Date(string="Sales End")
     is_expired = fields.Boolean(string='Is Expired', compute='_compute_is_expired')
     sale_available = fields.Boolean(string='Is Available', compute='_compute_sale_available')
-
-    price_reduce = fields.Float(string="Price Reduce", compute="_compute_price_reduce", digits='Product Price')
-    price_reduce_taxinc = fields.Float(compute='_get_price_reduce_tax', string='Price Reduce Tax inc')
+    registration_ids = fields.One2many('event.registration', 'event_ticket_id', string='Registrations')
     # seats fields
     seats_availability = fields.Selection([('limited', 'Limited'), ('unlimited', 'Unlimited')],
         string='Available Seat', required=True, store=True, compute='_compute_seats', default="limited")
@@ -117,7 +118,7 @@ class EventTicket(models.Model):
     def _onchange_product_id(self):
         self.price = self.product_id.list_price or 0
 
-    def get_ticket_multiline_description_sale(self):
+    def _get_ticket_multiline_description_sale(self):
         """ Compute a multiline description of this ticket, in the context of sales.
             It will often be used as the default description of a sales order line referencing this ticket.
 

--- a/addons/event_sale/models/sale_order.py
+++ b/addons/event_sale/models/sale_order.py
@@ -91,7 +91,7 @@ class SaleOrderLine(models.Model):
                 lang=self.order_id.partner_id.lang,
             )
 
-            return ticket.get_ticket_multiline_description_sale() + self._get_sale_order_line_multiline_description_variants()
+            return ticket._get_ticket_multiline_description_sale() + self._get_sale_order_line_multiline_description_variants()
         else:
             return super(SaleOrderLine, self).get_sale_order_line_multiline_description_sale(product)
 
