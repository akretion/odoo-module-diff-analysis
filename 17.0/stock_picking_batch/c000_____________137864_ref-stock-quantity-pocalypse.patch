PR: https://github.com/odoo/odoo/pull/137864

From: 7dda6bb92715ea25b2818a62fec5e646f3678b81
From: Arnold Moyaux
Date: 2023-10-25 18:10:54

Breaking data model changes score: 1, change matches:
-    show_validate = fields.Boolean(

Total Changes: 54

[REF] stock: quantity pocalypse

The rational is:
Currently we have 2 columns. One for reservation, the other
for quantity picked.

However in real time, either you follow the reservation and everything
goes well. Otherwise you pick something else. In the case where you
pick somewhere else than reserved, you would like to modify the
reservation to have something similar and free the quantity you
didn't pick and expect the system to not suggest the ones you took.

In other hand, we always want to have the reserve quantity similar to
the done.

On top, having two columns could be confusing for the end user.

The cons:
*The qty_done column could be use during the picking, to
remember if something has been pick or still to pick.
* For some flow (put in pack), it's easier to write a part of the quantity to pack
and still want to reserve the full amount of product.

We goes back and choose a ligther interface over complex feature.

Changes:
Qty done and reserved qty are merged into a single column.
A new checkbox on the move exists to mark it as picked or not
Since the reservation always follow the quantity, it's now possible
to have more reserved quantity than stock. However the system will
never propose it and the inventory showing reserved > quantity should
be a warning.
The system should never modify a move that has been picked. We don't
want to overide the user action.

Regression:
Not able to pick a single stock.move.line

closes odoo/odoo#137864

Related: odoo/enterprise#48709
Related: odoo/upgrade#5310
Signed-off-by: Arnold Moyaux (arm) <arm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/stock_picking_batch/models/stock_move_line.py
+++ b/addons/stock_picking_batch/models/stock_move_line.py
@@ -52,10 +52,7 @@ class StockMoveLine(models.Model):
             for line in lines:
                 move = line.move_id
                 line_by_move[move] |= line
-                if move.from_immediate_transfer:
-                    qty = line.product_uom_id._compute_quantity(line.qty_done, line.product_id.uom_id, rounding_method='HALF-UP')
-                else:
-                    qty = line.reserved_qty
+                qty = line.product_uom_id._compute_quantity(line.quantity, line.product_id.uom_id, rounding_method='HALF-UP')
                 qty_by_move[line.move_id] += qty
 
             if lines == picking.move_line_ids and lines.move_id == picking.move_ids:
@@ -73,7 +70,6 @@ class StockMoveLine(models.Model):
                 'move_ids': [],
                 'move_line_ids': [],
                 'batch_id': wave.id,
-                'immediate_transfer': False,
             })[0]
             for move, move_lines in line_by_move.items():
                 picking_to_wave_vals['move_line_ids'] += [Command.link(line.id) for line in lines]

--- a/addons/stock_picking_batch/models/stock_picking.py
+++ b/addons/stock_picking_batch/models/stock_picking.py
@@ -152,7 +152,7 @@ class StockPicking(models.Model):
     def _find_auto_batch(self):
         self.ensure_one()
         # Check if auto_batch is enabled for this picking.
-        if not self.picking_type_id.auto_batch or self.immediate_transfer or self.batch_id or not self.move_ids or not self._is_auto_batchable():
+        if not self.picking_type_id.auto_batch or self.batch_id or not self.move_ids or not self._is_auto_batchable():
             return False
 
         # Try to find a compatible batch to insert the picking
@@ -199,7 +199,6 @@ class StockPicking(models.Model):
         domain = [
             ('id', '!=', self.id),
             ('company_id', '=', self.company_id.id if self.company_id else False),
-            ('immediate_transfer', '=', False),
             ('state', '=', 'assigned'),
             ('picking_type_id', '=', self.picking_type_id.id),
             ('batch_id', '=', False),

--- a/addons/stock_picking_batch/models/stock_picking_batch.py
+++ b/addons/stock_picking_batch/models/stock_picking_batch.py
@@ -29,9 +29,6 @@ class StockPickingBatch(models.Model):
     show_check_availability = fields.Boolean(
         compute='_compute_move_ids',
         string='Show Check Availability')
-    show_validate = fields.Boolean(
-        compute='_compute_show_validate',
-        string='Show Validate Button')
     show_allocation = fields.Boolean(
         compute='_compute_show_allocation',
         string='Show Allocation Button')
@@ -63,14 +60,14 @@ class StockPickingBatch(models.Model):
     show_set_qty_button = fields.Boolean(compute='_compute_show_qty_button')
     show_clear_qty_button = fields.Boolean(compute='_compute_show_qty_button')
 
-    @api.depends('state', 'show_validate',
+    @api.depends('state',
                  'picking_ids.show_set_qty_button',
                  'picking_ids.show_clear_qty_button')
     def _compute_show_qty_button(self):
         self.show_set_qty_button = False
         self.show_clear_qty_button = False
         for batch in self:
-            if not batch.show_validate or batch.state != 'in_progress':
+            if batch.state != 'in_progress':
                 continue
             if any(p.show_set_qty_button for p in self.picking_ids):
                 batch.show_set_qty_button = True
@@ -90,8 +87,6 @@ class StockPickingBatch(models.Model):
                 ('company_id', '=', batch.company_id.id),
                 ('state', 'in', domain_states),
             ]
-            if not batch.is_wave:
-                domain = AND([domain, [('immediate_transfer', '=', False)]])
             if batch.picking_type_id:
                 domain += [('picking_type_id', '=', batch.picking_type_id.id)]
             batch.allowed_picking_ids = self.env['stock.picking'].search(domain)
@@ -103,11 +98,6 @@ class StockPickingBatch(models.Model):
             batch.move_line_ids = batch.picking_ids.move_line_ids
             batch.show_check_availability = any(m.state not in ['assigned', 'done'] for m in batch.move_ids)
 
-    @api.depends('picking_ids', 'picking_ids.show_validate')
-    def _compute_show_validate(self):
-        for batch in self:
-            batch.show_validate = any(picking.show_validate for picking in batch.picking_ids)
-
     @api.depends('state', 'move_ids', 'picking_type_id')
     def _compute_show_allocation(self):
         self.show_allocation = False
@@ -204,26 +194,23 @@ class StockPickingBatch(models.Model):
         self.ensure_one()
         return self.env.ref('stock_picking_batch.action_report_picking_batch').report_action(self)
 
-    def action_set_quantities_to_reservation(self):
-        self.picking_ids.filtered("show_set_qty_button").action_set_quantities_to_reservation()
-
     def action_clear_quantities_to_zero(self):
         self.picking_ids.filtered("show_clear_qty_button").action_clear_quantities_to_zero()
 
     def action_done(self):
-        def has_no_qty_done(picking):
-            return all(float_is_zero(line.qty_done, precision_rounding=line.product_uom_id.rounding) for line in picking.move_line_ids if line.state not in ('done', 'cancel'))
+        def has_no_quantity(picking):
+            return all(not m.picked or float_is_zero(m.quantity, precision_rounding=m.product_uom.rounding) for m in picking.move_ids if m.state not in ('done', 'cancel'))
 
         self.ensure_one()
         self._check_company()
         # Empty 'waiting for another operation' pickings will be removed from the batch when it is validated.
         pickings = self.mapped('picking_ids').filtered(lambda picking: picking.state not in ('cancel', 'done'))
-        empty_waiting_pickings = self.mapped('picking_ids').filtered(lambda p: p.state == 'waiting' and has_no_qty_done(p))
+        empty_waiting_pickings = self.mapped('picking_ids').filtered(lambda p: p.state == 'waiting' and has_no_quantity(p))
         pickings = pickings - empty_waiting_pickings
 
         empty_pickings = set()
         for picking in pickings:
-            if has_no_qty_done(picking):
+            if has_no_quantity(picking):
                 empty_pickings.add(picking.id)
             picking.message_post(
                 body=Markup("<b>%s:</b> %s <a href=#id=%s&view_type=form&model=stock.picking.batch>%s</a>") % (
@@ -254,24 +241,21 @@ class StockPickingBatch(models.Model):
         """
         self.ensure_one()
         if self.state not in ('done', 'cancel'):
-            picking_move_lines = self.move_line_ids
-
-            move_line_ids = picking_move_lines.filtered(lambda ml:
-                float_compare(ml.qty_done, 0.0, precision_rounding=ml.product_uom_id.rounding) > 0
-                and not ml.result_package_id
+            quantity_move_line_ids = self.move_line_ids.filtered(
+                lambda ml:
+                    float_compare(ml.quantity, 0.0, precision_rounding=ml.product_uom_id.rounding) > 0 and
+                    not ml.result_package_id
             )
+            move_line_ids = quantity_move_line_ids.filtered(lambda ml: ml.picked)
             if not move_line_ids:
-                move_line_ids = picking_move_lines.filtered(lambda ml: float_compare(ml.reserved_uom_qty, 0.0,
-                                     precision_rounding=ml.product_uom_id.rounding) > 0 and float_compare(ml.qty_done, 0.0,
-                                     precision_rounding=ml.product_uom_id.rounding) == 0)
+                move_line_ids = quantity_move_line_ids
             if move_line_ids:
                 res = move_line_ids.picking_id[0]._pre_put_in_pack_hook(move_line_ids)
                 if not res:
                     package = move_line_ids.picking_id[0]._put_in_pack(move_line_ids, False)
                     return move_line_ids.picking_id[0]._post_put_in_pack_hook(package)
                 return res
-            else:
-                raise UserError(_("Please add 'Done' quantities to the batch picking to create a new pack."))
+            raise UserError(_("Please add 'Done' quantities to the batch picking to create a new pack."))
 
     def action_view_reception_report(self):
         action = self.picking_ids[0].action_view_reception_report()
@@ -313,8 +297,7 @@ class StockPickingBatch(models.Model):
                 erroneous_pickings = batch.picking_ids - batch.allowed_picking_ids
                 raise UserError(_(
                     "The following transfers cannot be added to batch transfer %s. "
-                    "Please check their states and operation types, if they aren't immediate "
-                    "transfers.\n\n"
+                    "Please check their states and operation types.\n\n"
                     "Incompatibilities: %s", batch.name, ', '.join(erroneous_pickings.mapped('name'))))
 
     def _track_subtype(self, init_values):
