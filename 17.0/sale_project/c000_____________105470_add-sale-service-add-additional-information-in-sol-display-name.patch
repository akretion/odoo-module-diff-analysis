PR: https://github.com/odoo/odoo/pull/105470

From: 47db8b5dccca4d28aabde1d84a0a33a3471c2ce1
From: Hugo Carlier (Huca)
Date: 2023-01-16 14:43:00

Breaking data model changes scores: del:1 + add:0, change matches:
-    is_service = fields.Boolean("Is a Service", compute='_compute_is_service', store=True, compute_sudo=True)

Total Changes: 43

[ADD] sale_service: add additional information in SOL display name

* Impacted modules:
    - sale_service (new module - installed only if sale
    AND (project OR planning) are installed)
    - sale
    - sale_project

* Description: When looking for a SOL in services apps, the displayed
name is of the form "SO ref - SOL name - unit price (partner
ref/name)". The presence of some of those elements may vary:
    - unit price is only displayed if it allows to clarify an
    ambiguity (i.e. two SOL with identical name but different unit
    price in the same SO).
    - partner name is only used if the partner ref does not exist.
    - partner name/ref is hidden in the name of planning slots to avoid
    duplicates.

* Implementation: The behavior currently existing in sale needed to be
extended for services apps. This has been done with the following
changes:
    - sale:
        - sale.order.line: Current behavior for the name_get (display
        partner ref) has been extended (display parnter name if has no
        ref) and split a additional method that is extended in a new
        module called..
    - .. sale_service:
        - sale.order.line: The additional behavior is extended to
        display the unit price of the SOL when it avoids ambiguity. A
        context parameter is used to keep this behavior inside
        services apps.

task-3052812

Part-of: odoo/odoo#105470

================================= pseudo patch: =================================

--- a/addons/sale_project/models/sale_order_line.py
+++ b/addons/sale_project/models/sale_order_line.py
@@ -19,36 +19,8 @@ class SaleOrderLine(models.Model):
         'project.task', 'Generated Task',
         index=True, copy=False)
     # used to know if generate a task and/or a project, depending on the product settings
-    is_service = fields.Boolean("Is a Service", compute='_compute_is_service', store=True, compute_sudo=True)
     reached_milestones_ids = fields.One2many('project.milestone', 'sale_line_id', string='Reached Milestones', domain=[('is_reached', '=', True)])
 
-    def name_get(self):
-        res = super().name_get()
-        with_price_unit = self._context.get('with_price_unit', self._context.get('is_timesheet'))
-        if with_price_unit:
-            names = dict(res)
-            result = []
-            sols_by_so_dict = defaultdict(lambda: self.env[self._name])  # key: (sale_order_id, product_id), value: sale order line
-            for line in self:
-                sols_by_so_dict[line.order_id.id, line.product_id.id] += line
-
-            for sols in sols_by_so_dict.values():
-                if len(sols) > 1 and all(sols.mapped('is_service')):
-                    result += [(
-                        line.id,
-                        '%s - %s' % (
-                            names.get(line.id), format_amount(self.env, line.price_unit, line.currency_id))
-                    ) for line in sols]
-                else:
-                    result += [(line.id, names.get(line.id)) for line in sols]
-            return result
-        return res
-
-    @api.depends('product_id.type')
-    def _compute_is_service(self):
-        for so_line in self:
-            so_line.is_service = so_line.product_id.type == 'service'
-
     @api.depends('product_id.type')
     def _compute_product_updatable(self):
         super()._compute_product_updatable()
@@ -56,21 +28,6 @@ class SaleOrderLine(models.Model):
             if line.product_id.type == 'service' and line.state == 'sale':
                 line.product_updatable = False
 
-    def _auto_init(self):
-        """
-        Create column to stop ORM from computing it himself (too slow)
-        """
-        if not column_exists(self.env.cr, 'sale_order_line', 'is_service'):
-            create_column(self.env.cr, 'sale_order_line', 'is_service', 'bool')
-            self.env.cr.execute("""
-                UPDATE sale_order_line line
-                SET is_service = (pt.type = 'service')
-                FROM product_product pp
-                LEFT JOIN product_template pt ON pt.id = pp.product_tmpl_id
-                WHERE pp.id = line.product_id
-            """)
-        return super()._auto_init()
-
     @api.depends('product_id')
     def _compute_qty_delivered_method(self):
         milestones_lines = self.filtered(lambda sol:
