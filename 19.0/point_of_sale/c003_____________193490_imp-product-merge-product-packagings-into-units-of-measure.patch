PR: https://github.com/odoo/odoo/pull/193490

From: dc24a1d1c93cf6eeb6456b1591a0ab8ccc4086ba
From: Mohammad Abdulmoneim (abdu)
Date: 2025-01-14 09:03:42

Breaking data model changes scores: del:1 + add:0, change matches:
-    _inherit = ['product.packaging', 'pos.load.mixin']

Total Changes: 43

[IMP] product,*: merge product packagings into units of measure

This commit removes `product.packaging` model completely and merges it
into units of measure feature. Previously, users could define one or
more packagins for each product which can be used in sale/purchase
orders in addition to stock transfers. This led to some confusion as
there is no intrinsic difference between packagings and units of
measure. Also, sale,purchase order lines and stock moves had two
different fields for units and quantities, one for the main move unit
and another for the packaging which introduced some technical complexity
to ensure the consistency between those fields. After this commit, if a
user wants to define a packaging for a product, they just need to create
a `uom_uom` record with the desired name and quantity and add it to the
`uom_ids` field on the product so that it can be used in
sale/purchase/stock orders. This commit also adds two new fields to
`stock_move` model to store the additional packaging unit and quantity
from sale/purchase/manufacturing orders. It's readonly and only shown in
reports and barcode in case it was different than the main stock move
unit.

Task-4252043

Part-of: odoo/odoo#193490
Related: odoo/enterprise#77092
Signed-off-by: Arnold Moyaux (arm) <arm@odoo.com>
Signed-off-by: Mohammad Abdulmoneim (abdu) <abdu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/__init__.py
+++ b/addons/point_of_sale/models/__init__.py
@@ -18,7 +18,6 @@ from . import pos_session
 from . import product_pricelist
 from . import product_attribute
 from . import product_category
-from . import product_packaging
 from . import product_product
 from . import product_template
 from . import uom
@@ -49,3 +48,4 @@ from . import ir_ui_view
 from . import pos_preset
 from . import product_tag
 from . import resource_calendar_attendance
+from . import product_uom

--- a/addons/point_of_sale/models/pos_session.py
+++ b/addons/point_of_sale/models/pos_session.py
@@ -129,7 +129,7 @@ class PosSession(models.Model):
     def _load_pos_data_models(self, config_id):
         return ['pos.config', 'pos.preset', 'resource.calendar.attendance', 'pos.order', 'pos.order.line', 'pos.pack.operation.lot', 'pos.payment', 'pos.payment.method', 'pos.printer',
             'pos.category', 'pos.bill', 'res.company', 'account.tax', 'account.tax.group', 'product.template', 'product.product', 'product.attribute', 'product.attribute.custom.value',
-            'product.template.attribute.line', 'product.template.attribute.value', 'product.combo', 'product.combo.item', 'product.packaging', 'res.users', 'res.partner',
+            'product.template.attribute.line', 'product.template.attribute.value', 'product.combo', 'product.combo.item', 'res.users', 'res.partner', 'product.uom',
             'decimal.precision', 'uom.uom', 'res.country', 'res.country.state', 'res.lang', 'product.pricelist', 'product.pricelist.item', 'product.category',
             'account.cash.rounding', 'account.fiscal.position', 'account.fiscal.position.tax', 'stock.picking.type', 'res.currency', 'pos.note', 'ir.ui.view', 'product.tag', 'ir.module.module']
 
@@ -1839,7 +1839,7 @@ class PosSession(models.Model):
     def find_product_by_barcode(self, barcode, config_id):
         product_fields = self.env['product.product']._load_pos_data_fields(config_id)
         product_template_fields = self.env['product.template']._load_pos_data_fields(config_id)
-        product_packaging_fields = self.env['product.packaging']._load_pos_data_fields(config_id)
+        packaging_fields = self.env['product.uom']._load_pos_data_fields(config_id)
         product_tmpl_attr_value_fields = self.env['product.template.attribute.value']._load_pos_data_fields(config_id)
         product_context = {**self.env.context, 'display_default_code': False}
         product = self.env['product.product'].search([
@@ -1864,18 +1864,18 @@ class PosSession(models.Model):
         packaging_params = {
             'search_params': {
                 'domain': domain,
-                'fields': ['name', 'barcode', 'product_id', 'qty'],
+                'fields': ['barcode', 'product_id', 'uom_id'],
             },
         }
         packaging_params['search_params']['domain'] = [['barcode', '=', barcode]]
-        packaging = self.env['product.packaging'].search(packaging_params['search_params']['domain'])
+        packaging = self.env['product.uom'].search(packaging_params['search_params']['domain'])
         product = packaging.product_id.with_context(product_context)
         condition = packaging and packaging.product_id
         return {
             'product.product': product.read(product_fields, load=False) if condition else [],
             'product.template.attribute.value': product.product_template_attribute_value_ids.read(product_tmpl_attr_value_fields, load=False) if condition else [],
             'product.template': product.product_tmpl_id.read(product_template_fields, load=False) if condition else [],
-            'product.packaging': packaging.read(product_packaging_fields, load=False) if condition else [],
+            'product.uom': packaging.read(packaging_fields, load=False) if condition else [],
         }
 
     def get_total_discount(self):

--- a/addons/point_of_sale/models/product_packaging.py
+++ b/None
@@ -1,15 +0,0 @@
-from odoo import api, models
-from odoo.osv.expression import AND
-
-
-class ProductPackaging(models.Model):
-    _name = 'product.packaging'
-    _inherit = ['product.packaging', 'pos.load.mixin']
-
-    @api.model
-    def _load_pos_data_domain(self, data):
-        return AND([[('barcode', 'not in', ['', False])], [('product_id', 'in', [x['id'] for x in data['product.product']])] if data else []])
-
-    @api.model
-    def _load_pos_data_fields(self, config_id):
-        return ['id', 'name', 'barcode', 'product_id', 'qty']

--- a/None
+++ b/addons/point_of_sale/models/product_uom.py
@@ -0,0 +1,16 @@
+
+from odoo import api, models
+
+
+class ProductUom(models.Model):
+    _name = 'product.uom'
+    _inherit = ['product.uom', 'pos.load.mixin']
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return ['id', 'barcode', 'product_id', 'uom_id']
+
+    def _load_pos_data(self, data):
+        domain = self._load_pos_data_domain(data)
+        fields = self._load_pos_data_fields(data['pos.config'][0]['id'])
+        return self.with_context({**self.env.context}).search_read(domain, fields, load=False)
