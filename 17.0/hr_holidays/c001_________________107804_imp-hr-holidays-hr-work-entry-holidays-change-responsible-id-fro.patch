PR: https://github.com/odoo/odoo/pull/107804

From: 93ad98bc6f2717d1ffa85fb843f819cc21e44ad2
From: sofiagvaladze
Date: 2023-01-25 16:50:05

Structural Changes: 2
Total Changes: 74

[IMP] hr_holidays,hr_work_entry_holidays: change responsible_id from ma2o to m2m

task - 3060720

closes odoo/odoo#107804

Related: odoo/upgrade#4128
Related: odoo/enterprise#34926
Signed-off-by: Kevin Baptiste <kba@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -987,7 +987,7 @@ class HolidaysRequest(models.Model):
                 if holiday.validation_type == 'no_validation':
                     # Automatic validation should be done in sudo, because user might not have the rights to do it by himself
                     holiday_sudo.action_validate()
-                    holiday_sudo.message_subscribe(partner_ids=[holiday._get_responsible_for_approval().partner_id.id])
+                    holiday_sudo.message_subscribe(partner_ids=holiday._get_responsible_for_approval().partner_id.ids)
                     holiday_sudo.message_post(body=_("The time off has been automatically approved"), subtype_xmlid="mail.mt_comment") # Message from OdooBot (sudo)
                 elif not self._context.get('import_file'):
                     holiday_sudo.activity_update()
@@ -1425,11 +1425,11 @@ class HolidaysRequest(models.Model):
                 responsibles = leave.employee_id.leave_manager_id.partner_id
             # officer
             elif leave.holiday_status_id.leave_validation_type == 'hr' and leave.state == 'validate':
-                responsibles = leave.holiday_status_id.responsible_id.partner_id
+                responsibles = leave.holiday_status_id.responsible_ids.partner_id
             # both
             elif leave.holiday_status_id.leave_validation_type == 'both' and leave.state == 'validate':
                 responsibles = leave.employee_id.leave_manager_id.partner_id
-                responsibles |= leave.holiday_status_id.responsible_id.partner_id
+                responsibles |= leave.holiday_status_id.responsible_ids.partner_id
 
             if responsibles:
                 leave_name = list(filter(lambda h: leave.id in h, leave_names))[0][1]
@@ -1572,13 +1572,15 @@ class HolidaysRequest(models.Model):
             elif self.employee_id.parent_id.user_id:
                 responsible = self.employee_id.parent_id.user_id
         elif self.validation_type == 'hr' or (self.validation_type == 'both' and self.state == 'validate1'):
-            if self.holiday_status_id.responsible_id:
-                responsible = self.holiday_status_id.responsible_id
-
+            if self.holiday_status_id.responsible_ids:
+                responsible = self.holiday_status_id.responsible_ids
+            else:
+                responsible = self.env.ref('hr_holidays.group_hr_holidays_user').users.filtered(lambda u: self.holiday_status_id.company_id in u.company_ids)
         return responsible
 
     def activity_update(self):
         to_clean, to_do = self.env['hr.leave'], self.env['hr.leave']
+        activity_vals = []
         for holiday in self:
             note = _(
                 'New %(leave_type)s Request created by %(user)s',
@@ -1588,16 +1590,16 @@ class HolidaysRequest(models.Model):
             if holiday.state == 'draft':
                 to_clean |= holiday
             elif holiday.state == 'confirm':
-                holiday.activity_schedule(
-                    'hr_holidays.mail_act_leave_approval',
-                    note=note,
-                    user_id=holiday.sudo()._get_responsible_for_approval().id or self.env.user.id)
-            elif holiday.state == 'validate1':
-                holiday.activity_feedback(['hr_holidays.mail_act_leave_approval'])
-                holiday.activity_schedule(
-                    'hr_holidays.mail_act_leave_second_approval',
-                    note=note,
-                    user_id=holiday.sudo()._get_responsible_for_approval().id or self.env.user.id)
+                user_ids = holiday.sudo()._get_responsible_for_approval().ids or self.env.user.ids
+                for user_id in user_ids:
+                    activity_vals.append({
+                        'activity_type_id': self.env.ref('hr_holidays.mail_act_leave_approval').id,
+                        'automated': True,
+                        'note': note,
+                        'user_id': user_id,
+                        'res_id': holiday.id,
+                        'res_model_id': self.env.ref('hr_holidays.model_hr_leave').id,
+                    })
             elif holiday.state == 'validate':
                 to_do |= holiday
             elif holiday.state == 'refuse':
@@ -1606,6 +1608,7 @@ class HolidaysRequest(models.Model):
             to_clean.activity_unlink(['hr_holidays.mail_act_leave_approval', 'hr_holidays.mail_act_leave_second_approval'])
         if to_do:
             to_do.activity_feedback(['hr_holidays.mail_act_leave_approval', 'hr_holidays.mail_act_leave_second_approval'])
+        self.env['mail.activity'].create(activity_vals)
 
     ####################################################
     # Messaging methods

--- a/addons/hr_holidays/models/hr_leave_allocation.py
+++ b/addons/hr_holidays/models/hr_leave_allocation.py
@@ -737,13 +737,16 @@ class HolidaysAllocation(models.Model):
         responsible = self.env.user
 
         if self.validation_type == 'officer' or self.validation_type == 'set':
-            if self.holiday_status_id.responsible_id:
-                responsible = self.holiday_status_id.responsible_id
+            if self.holiday_status_id.responsible_ids:
+                responsible = self.holiday_status_id.responsible_ids
+            else:
+                responsible = self.env.ref('hr_holidays.group_hr_holidays_user').users.filtered(lambda u: self.holiday_status_id.company_id in u.company_ids)
 
         return responsible
 
     def activity_update(self):
         to_clean, to_do = self.env['hr.leave.allocation'], self.env['hr.leave.allocation']
+        activity_vals = []
         for allocation in self:
             if allocation.validation_type != 'no':
                 note = _(
@@ -755,24 +758,25 @@ class HolidaysAllocation(models.Model):
                 if allocation.state == 'draft':
                     to_clean |= allocation
                 elif allocation.state == 'confirm':
-                    allocation.activity_schedule(
-                        'hr_holidays.mail_act_leave_allocation_approval',
-                        note=note,
-                        user_id=allocation.sudo()._get_responsible_for_approval().id or self.env.user.id)
-                elif allocation.state == 'validate1':
-                    allocation.activity_feedback(['hr_holidays.mail_act_leave_allocation_approval'])
-                    allocation.activity_schedule(
-                        'hr_holidays.mail_act_leave_allocation_second_approval',
-                        note=note,
-                        user_id=allocation.sudo()._get_responsible_for_approval().id or self.env.user.id)
+                    user_ids = allocation.sudo()._get_responsible_for_approval().ids or self.env.user.ids
+                    for user_id in user_ids:
+                        activity_vals.append({
+                            'activity_type_id': self.env.ref('hr_holidays.mail_act_leave_allocation_approval').id,
+                            'automated': True,
+                            'note': note,
+                            'user_id': user_id,
+                            'res_id': allocation.id,
+                            'res_model_id': self.env.ref('hr_holidays.model_hr_leave_allocation').id,
+                        })
                 elif allocation.state == 'validate':
                     to_do |= allocation
                 elif allocation.state == 'refuse':
                     to_clean |= allocation
+        self.env['mail.activity'].create(activity_vals)
         if to_clean:
-            to_clean.activity_unlink(['hr_holidays.mail_act_leave_allocation_approval', 'hr_holidays.mail_act_leave_allocation_second_approval'])
+            to_clean.activity_unlink(['hr_holidays.mail_act_leave_allocation_approval'])
         if to_do:
-            to_do.activity_feedback(['hr_holidays.mail_act_leave_allocation_approval', 'hr_holidays.mail_act_leave_allocation_second_approval'])
+            to_do.activity_feedback(['hr_holidays.mail_act_leave_allocation_approval'])
 
     ####################################################
     # Messaging methods
@@ -813,7 +817,7 @@ class HolidaysAllocation(models.Model):
 
     def message_subscribe(self, partner_ids=None, subtype_ids=None):
         # due to record rule can not allow to add follower and mention on validated leave so subscribe through sudo
-        if self.state in ['validate', 'validate1']:
+        if any(state in ['validate', 'validate1'] for state in self.mapped('state')):
             self.check_access_rights('read')
             self.check_access_rule('read')
             return super(HolidaysAllocation, self.sudo()).message_subscribe(partner_ids=partner_ids, subtype_ids=subtype_ids)

--- a/addons/hr_holidays/models/hr_leave_type.py
+++ b/addons/hr_holidays/models/hr_leave_type.py
@@ -58,11 +58,12 @@ class HolidaysType(models.Model):
     group_days_leave = fields.Float(
         compute='_compute_group_days_leave', string='Group Time Off')
     company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company)
-    responsible_id = fields.Many2one(
-        'res.users', 'Responsible Time Off Officer',
+    responsible_ids = fields.Many2many(
+        'res.users', 'hr_leave_type_res_users_rel', 'hr_leave_type_id', 'res_users_id', string='Responsible Time Off Officer',
         domain=lambda self: [('groups_id', 'in', self.env.ref('hr_holidays.group_hr_holidays_user').id),
                              ('share', '=', False),
                              ('company_ids', 'in', self.env.company.id)],
+                             auto_join=True,
         help="Choose the Time Off Officer who will be notified to approve allocation or Time Off request")
     leave_validation_type = fields.Selection([
         ('no_validation', 'No Validation'),
