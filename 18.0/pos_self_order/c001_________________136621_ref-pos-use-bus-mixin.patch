PR: https://github.com/odoo/odoo/pull/136621

From: 3836aad466c6c111f0f0d33c357a1c7a5150f3fd
From: vlst
Date: 2024-01-19 15:04:58

Structural Changes: 1
Total Changes: 46

[REF] pos*: use bus.mixin

pos*: point_of_sale, pos_adyen, pos_online_payment,
	  pos_restaurant, pos_self_order, pos_self_order_adyen

- create the `pos.bus.mixin` class;
	- it insures that modules that inherit this class have an
	  `access_token`; ( similar to `portal.mixin` )
	- implements the `_notify` method that uses the `access_token`
	  and the notification name concatenated as a channel;
	   --> as such, listeners can differentiate between senders.
- adapt `pos.config`, `pos.session`, `pos.preparation.display` to
  inherit from `pos.bus.mixin`;

- replace all bus usage in the frontend with `bus.subscribe`;
    ( the PosBus service has been removed )
  	- this has the benefit of solving the bug from task: 3557587

Task 3508655

Part-of: odoo/odoo#136621

================================= pseudo patch: =================================

--- a/addons/pos_self_order/models/pos_config.py
+++ b/addons/pos_self_order/models/pos_config.py
@@ -98,28 +98,11 @@ class PosConfig(models.Model):
         string="Self Order Kiosk Image Brand Name",
         help="Name of the image to display on the self order screen",
     )
-    access_token = fields.Char(
-        "Security Token",
-        copy=False,
-        required=True,
-        readonly=True,
-        default=lambda self: self._get_access_token(),
-    )
-
-    @staticmethod
-    def _get_access_token():
-        return uuid.uuid4().hex[:16]
 
     def _update_access_token(self):
-        self.access_token = self._get_access_token()
+        self.access_token = uuid.uuid4().hex[:16]
         self.floor_ids.table_ids._update_identifier()
 
-    @api.model
-    def _init_access_token(self):
-        pos_config_ids = self.env["pos.config"].search([])
-        for pos_config_id in pos_config_ids:
-            pos_config_id.access_token = self._get_access_token()
-
     @api.model_create_multi
     def create(self, vals_list):
         pos_config_ids = super().create(vals_list)
@@ -402,17 +385,11 @@ class PosConfig(models.Model):
             record.self_ordering_url = self.get_base_url() + self._get_self_order_route()
 
     def action_close_kiosk_session(self):
-        current_session_id = self.current_session_id
+        if self.current_session_id and self.current_session_id.order_ids:
+            self.current_session_id.order_ids.filtered(lambda o: o.state not in ['paid', 'invoiced']).unlink()
 
-        if current_session_id:
-            if current_session_id.order_ids:
-                current_session_id.order_ids.filtered(lambda o: o.state not in ['paid', 'invoiced']).unlink()
-
-            self.env['bus.bus']._sendone(f'pos_config-{self.access_token}', 'STATUS', {
-                'status': 'closed',
-            })
-
-            return current_session_id.action_pos_session_closing_control()
+        self._notify('STATUS', {'status': 'closed'})
+        return self.current_session_id.action_pos_session_closing_control()
 
     def _compute_status(self):
         for record in self:
@@ -431,12 +408,7 @@ class PosConfig(models.Model):
         self.ensure_one()
 
         if not self.current_session_id:
-            pos_session = self.env['pos.session'].create({'user_id': self.env.uid, 'config_id': self.id})
-            pos_session._ensure_access_token()
-            self.env['bus.bus']._sendone(f'pos_config-{self.access_token}', 'STATUS', {
-                'status': 'open',
-                'pos_session': pos_session.read(['id', 'access_token'])[0],
-            })
+            self._notify('STATUS', {'status': 'open'})
 
         return {
             'name': _('Self Kiosk'),

--- a/addons/pos_self_order/models/pos_order.py
+++ b/addons/pos_self_order/models/pos_order.py
@@ -105,12 +105,12 @@ class PosOrder(models.Model):
     def _send_notification(self, order_ids):
         for order in order_ids:
             if order.access_token and order.state != 'draft':
-                self.env['bus.bus']._sendone(f'self_order-{order.access_token}', 'ORDER_STATE_CHANGED', {
+                order._notify('ORDER_STATE_CHANGED', {
                     'access_token': order.access_token,
                     'state': order.state
                 })
             else:
-                self.env['bus.bus']._sendone(f'self_order-{order.access_token}', 'ORDER_CHANGED', {
+                order._notify('ORDER_CHANGED', {
                     'order': order._export_for_self_order()
                 })
 

--- a/addons/pos_self_order/models/product_product.py
+++ b/addons/pos_self_order/models/product_product.py
@@ -216,6 +216,6 @@ class ProductProduct(models.Model):
         config_self = self.env['pos.config'].sudo().search([('self_ordering_mode', '!=', 'nothing')])
         for config in config_self:
             if config.current_session_id and config.access_token:
-                self.env['bus.bus']._sendone(f'pos_config-{config.access_token}', 'PRODUCT_CHANGED', {
+                config._notify('PRODUCT_CHANGED', {
                     'product': self._get_product_for_ui(config)
                 })
