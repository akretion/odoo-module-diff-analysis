PR: https://github.com/odoo/odoo/pull/63598

From: 99ce4c3ff8803cdd000d94bd88890c1201d38ab7
From: Tiffany Chang (tic)
Date: 2021-02-12 16:10:25

Structural Changes: 4
Total Changes: 54

[IMP] stock: improve product moves report

Small improvements to the Product Moves (move line) report:
- added 3 new filters: Last 12 Months, Last 3 Months, and Last 30 Days
  (default Last 12 Months)
- added standard Date filter (i.e. by quarter, month, year)
- updated the Stock Moves stat button in product [template] view to
  display # incoming/outgoing moves within the past 12 months

Task: 2371067
COM PR: odoo/odoo#63598

Signed-off-by: Steve Van Essche <svs-odoo@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/product.py
+++ b/addons/stock/models/product.py
@@ -4,6 +4,7 @@
 import operator as py_operator
 from ast import literal_eval
 from collections import defaultdict
+from dateutil.relativedelta import relativedelta
 
 from odoo import _, api, fields, models, SUPERUSER_ID
 from odoo.exceptions import UserError
@@ -86,6 +87,8 @@ class Product(models.Model):
              "Location with 'internal' type.")
 
     orderpoint_ids = fields.One2many('stock.warehouse.orderpoint', 'product_id', 'Minimum Stock Rules')
+    nbr_moves_in = fields.Integer(compute='_compute_nbr_moves', compute_sudo=False, help="Number of incoming stock moves in the past 12 months")
+    nbr_moves_out = fields.Integer(compute='_compute_nbr_moves', compute_sudo=False, help="Number of outgoing stock moves in the past 12 months")
     nbr_reordering_rules = fields.Integer('Reordering Rules',
         compute='_compute_nbr_reordering_rules', compute_sudo=False)
     reordering_min_qty = fields.Float(
@@ -191,6 +194,29 @@ class Product(models.Model):
 
         return res
 
+    def _compute_nbr_moves(self):
+        res = defaultdict(dict)
+        incoming_moves = self.env['stock.move.line'].read_group([
+                ('product_id', 'in', self.ids),
+                ('state', '=', 'done'),
+                ('picking_code', '=', 'incoming'),
+                ('date', '>=', fields.Datetime.now() - relativedelta(years=1))
+            ], ['product_id'], ['product_id'])
+        outgoing_moves = self.env['stock.move.line'].read_group([
+                ('product_id', 'in', self.ids),
+                ('state', '=', 'done'),
+                ('picking_code', '=', 'outgoing'),
+                ('date', '>=', fields.Datetime.now() - relativedelta(years=1))
+            ], ['product_id'], ['product_id'])
+        for move in incoming_moves:
+            res[move['product_id'][0]]['moves_in'] = int(move['product_id_count'])
+        for move in outgoing_moves:
+            res[move['product_id'][0]]['moves_out'] = int(move['product_id_count'])
+        for product in self:
+            product_res = res.get(product.id) or {}
+            product.nbr_moves_in = product_res.get('moves_in', 0)
+            product.nbr_moves_out = product_res.get('moves_out', 0)
+
     def get_components(self):
         self.ensure_one()
         return self.ids
@@ -597,6 +623,8 @@ class ProductTemplate(models.Model):
         'stock.location.route', 'stock_route_product', 'product_id', 'route_id', 'Routes',
         domain=[('product_selectable', '=', True)],
         help="Depending on the modules installed, this will allow you to define the route of the product: whether it will be bought, manufactured, replenished on order, etc.")
+    nbr_moves_in = fields.Integer(compute='_compute_nbr_moves', compute_sudo=False, help="Number of incoming stock moves in the past 12 months")
+    nbr_moves_out = fields.Integer(compute='_compute_nbr_moves', compute_sudo=False, help="Number of outgoing stock moves in the past 12 months")
     nbr_reordering_rules = fields.Integer('Reordering Rules',
         compute='_compute_nbr_reordering_rules', compute_sudo=False)
     reordering_min_qty = fields.Float(
@@ -651,6 +679,32 @@ class ProductTemplate(models.Model):
             }
         return prod_available
 
+    def _compute_nbr_moves(self):
+        res = defaultdict(lambda: {'moves_in': 0, 'moves_out': 0})
+        incoming_moves = self.env['stock.move.line'].read_group([
+                ('product_id.product_tmpl_id', 'in', self.ids),
+                ('state', '=', 'done'),
+                ('picking_code', '=', 'incoming'),
+                ('date', '>=', fields.Datetime.now() - relativedelta(years=1))
+            ], ['product_id'], ['product_id'])
+        outgoing_moves = self.env['stock.move.line'].read_group([
+                ('product_id.product_tmpl_id', 'in', self.ids),
+                ('state', '=', 'done'),
+                ('picking_code', '=', 'outgoing'),
+                ('date', '>=', fields.Datetime.now() - relativedelta(years=1))
+            ], ['product_id'], ['product_id'])
+        for move in incoming_moves:
+            product = self.env['product.product'].browse([move['product_id'][0]])
+            product_tmpl_id = product.product_tmpl_id.id
+            res[product_tmpl_id]['moves_in'] += int(move['product_id_count'])
+        for move in outgoing_moves:
+            product = self.env['product.product'].browse([move['product_id'][0]])
+            product_tmpl_id = product.product_tmpl_id.id
+            res[product_tmpl_id]['moves_out'] += int(move['product_id_count'])
+        for template in self:
+            template.nbr_moves_in = int(res[template.id]['moves_in'])
+            template.nbr_moves_out = int(res[template.id]['moves_out'])
+
     @api.model
     def _get_action_view_related_putaway_rules(self, domain):
         return {
