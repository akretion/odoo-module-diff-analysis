PR: https://github.com/odoo/odoo/pull/90770

From: d70000bf21a823ec510d4c368de0ec5813448f69
From: sofiagvaladze
Date: 2022-06-02 06:02:04

Structural Changes: 3
Total Changes: 41

[IMP] hr_expense/sale_expense: allow splitting an expense

Purpose: Sometimes, taxes are distinct on parts of the expense
(for example alcohol and food).
Therefore the expense should be split in two.

In order to split the expense, we added an wizard.
When creating a new expense from the split, we also
copy the attachments.

'hr.expense.split' has to have the similar logic and dependencies between
the fields as 'hr.expense' does. For example, in case we change the
product_id to the product that has cost defined on it, it should have
the same behavior as expense has. In particular, the 'total_price'
will be set and the user should not be able to modify the amount.

Similarly, if we change the product_id to the one that has no tax defined
on it, then split tax_ids should be cleared out and be set to readonly.
Similar logic goes to sale_order_id (Customer to Reinvoice'),
we should not be able to set it, in case the product can not be re-invoiced.

All of the above constraints leads to the amount of similar code to to the 'hr.expense.split' side.
But it could not have been avoided, if we want the smooth flow.

task - 2831024

closes odoo/odoo#90770

Signed-off-by: Kevin Baptiste <kba@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_expense/models/__init__.py
+++ b/addons/sale_expense/models/__init__.py
@@ -2,6 +2,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from . import hr_expense
+from . import hr_expense_split
 from . import sale_order
 from . import product_template
 from . import account_move

--- a/addons/sale_expense/models/hr_expense.py
+++ b/addons/sale_expense/models/hr_expense.py
@@ -31,6 +31,12 @@ class Expense(models.Model):
         for expense in self.filtered('sale_order_id'):
             expense.analytic_account_id = expense.sale_order_id.sudo().analytic_account_id  # `sudo` required for normal employee without sale access rights
 
+    def _get_split_values(self):
+        vals = super(Expense, self)._get_split_values()
+        for split_value in vals:
+            split_value['sale_order_id'] = self.sale_order_id.id
+        return vals
+
     def action_move_create(self):
         """ When posting expense, if the AA is given, we will track cost in that
             If a SO is set, this means we want to reinvoice the expense. But to do so, we

--- a/None
+++ b/addons/sale_expense/models/hr_expense_split.py
@@ -0,0 +1,34 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models, api
+
+
+class HrExpenseSplit(models.TransientModel):
+    _inherit = "hr.expense.split"
+
+    def default_get(self, fields):
+        result = super(HrExpenseSplit, self).default_get(fields)
+        if 'expense_id' in result:
+            expense = self.env['hr.expense'].browse(result['expense_id'])
+            result['sale_order_id'] = expense.sale_order_id
+        return result
+
+    sale_order_id = fields.Many2one('sale.order', string="Customer to Reinvoice", compute='_compute_sale_order_id', readonly=False, store=True, domain="[('state', '=', 'sale'), ('company_id', '=', company_id)]")
+    can_be_reinvoiced = fields.Boolean("Can be reinvoiced", compute='_compute_can_be_reinvoiced')
+
+    def _get_values(self):
+        self.ensure_one()
+        vals = super(HrExpenseSplit, self)._get_values()
+        vals['sale_order_id'] = self.sale_order_id.id
+        return vals
+
+    @api.depends('product_id')
+    def _compute_can_be_reinvoiced(self):
+        for split in self:
+            split.can_be_reinvoiced = split.product_id.expense_policy in ['sales_price', 'cost']
+
+    @api.depends('can_be_reinvoiced')
+    def _compute_sale_order_id(self):
+        for split in self:
+            split.sale_order_id = split.sale_order_id if split.can_be_reinvoiced else False
