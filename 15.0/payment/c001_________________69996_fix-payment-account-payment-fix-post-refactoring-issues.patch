PR: https://github.com/odoo/odoo/pull/69996

From: c902e023171f96f79d763001c1aadc234e896e8c
From: Antoine Vandevenne (anv)
Date: 2021-04-28 11:39:26

Structural Changes: 2
Total Changes: 41

[FIX] payment(_*), account_payment: fix post-refactoring issues

account_payment:
  - Processing fees computation was done based on the wrong country.
payment:
  - The acquirer's cancel message was missing from the
    /payment/confirmation page.
  - `redirect_form_view_id` field was declared with attribute 'name'
    instead of 'string'.
  - Uninstalling a payment acquirer would fail with a traceback.
  - The first acquirer was not automatically selected if it was the only
    selectable payment option of a 'manage' payment form.
  - Specifying a preferred acquirer to the /payment/pay page would show
    not acquirer at all if the preferred option was incompatible with
    the constraints, rather than falling back on showing all acquirers.
payment_adyen:
  - When the value of the API URL fields is malformed (e.g., missing the
    "https://"), clicking on the confirm button raised a traceback.
payment_ogone:
  - There was a typo in the return route.
payment_paypal:
  - PayPal acquirers were not filtered out if the currency was not not
    supported.
  - Returning to the webshop without paying would raise a traceback.

task-2494916

closes odoo/odoo#69996

X-original-commit: 4f7e463fb8b13506caa8aff0beeef5eb0720bf00
Related: odoo/enterprise#17997
Signed-off-by: Antoine Vandevenne (anv) <AntoineVDV@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/payment/models/__init__.py
+++ b/addons/payment/models/__init__.py
@@ -4,6 +4,7 @@ from . import account_chart_template
 from . import account_payment
 from . import account_move
 from . import ir_http
+from . import ir_ui_view
 from . import payment_acquirer
 from . import payment_icon
 from . import payment_token

--- a/None
+++ b/addons/payment/models/ir_ui_view.py
@@ -0,0 +1,16 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import _, api, models
+from odoo.exceptions import UserError
+
+
+class IrUiView(models.Model):
+    _inherit = 'ir.ui.view'
+
+    @api.ondelete(at_uninstall=False)
+    def _unlink_if_not_referenced_by_acquirer(self):
+        referencing_acquirers = self.env['payment.acquirer'].search([
+            '|', ('redirect_form_view_id', 'in', self.ids), ('inline_form_view_id', 'in', self.ids)
+        ])
+        if referencing_acquirers:
+            raise UserError(_("You cannot delete a view that is used by a payment acquirer."))

--- a/addons/payment/models/payment_acquirer.py
+++ b/addons/payment/models/payment_acquirer.py
@@ -52,13 +52,13 @@ class PaymentAcquirer(models.Model):
              "Use this if you want to charge your customers cards only when\n"
              "you are sure you can ship the goods to them.")
     redirect_form_view_id = fields.Many2one(
-        name="Redirect Form Template", comodel_name='ir.ui.view',
+        string="Redirect Form Template", comodel_name='ir.ui.view',
         help="The template rendering a form submitted to redirect the user when making a payment",
-        domain=[('type', '=', 'qweb')], ondelete='restrict')
+        domain=[('type', '=', 'qweb')])
     inline_form_view_id = fields.Many2one(
         string="Inline Form Template", comodel_name='ir.ui.view',
         help="The template rendering the inline payment form when making a direct payment",
-        domain=[('type', '=', 'qweb')], ondelete='restrict')
+        domain=[('type', '=', 'qweb')])
     country_ids = fields.Many2many(
         string="Countries", comodel_name='res.country', relation='payment_country_rel',
         column1='payment_id', column2='country_id',
@@ -359,23 +359,17 @@ class PaymentAcquirer(models.Model):
 
     @api.model
     def _get_compatible_acquirers(
-        self, company_id, partner_id, currency_id=None, force_tokenization=False,
-        preferred_acquirer_id=None, **kwargs
+        self, company_id, partner_id, currency_id=None, force_tokenization=False, **kwargs
     ):
         """ Select and return the acquirers matching the criteria.
 
         The base criteria are that acquirers must not be disabled, be in the company that is
         provided, and support the country of the partner if it exists.
 
-        If a `preferred_acquirer_id` is specified, only the corresponding acquirer is returned *if*
-        it exists and matches the criteria. Otherwise, we fallback on the default behavior that is
-        returning only the acquirers that do match the criteria.
-
         :param int company_id: The company to which acquirers must belong, as a `res.company` id
         :param int partner_id: The partner making the payment, as a `res.partner` id
         :param int currency_id: The payment currency if known beforehand, as a `res.currency` id
         :param bool force_tokenization: Whether only acquirers allowing tokenization can be matched
-        :param int preferred_acquirer_id: The preferred acquirer, as a `payment.acquirer` id
         :param dict kwargs: Optional data. This parameter is not used here
         :return: The compatible acquirers
         :rtype: recordset of `payment.acquirer`
@@ -395,15 +389,7 @@ class PaymentAcquirer(models.Model):
         if force_tokenization or self._is_tokenization_required(**kwargs):
             domain = expression.AND([domain, [('allow_tokenization', '=', True)]])
 
-        # Handle preferred acquirer
-        compatible_acquirers = self.env['payment.acquirer']
-        if preferred_acquirer_id:  # If an acquirer is preferred, check that it matches the criteria
-            compatible_acquirers = self.env['payment.acquirer'].search(expression.AND([
-                domain, [('id', '=', preferred_acquirer_id)]
-            ]))
-        if not compatible_acquirers:  # If not found or incompatible, fallback on the others
-            compatible_acquirers = self.env['payment.acquirer'].search(domain)
-
+        compatible_acquirers = self.env['payment.acquirer'].search(domain)
         return compatible_acquirers
 
     @api.model
