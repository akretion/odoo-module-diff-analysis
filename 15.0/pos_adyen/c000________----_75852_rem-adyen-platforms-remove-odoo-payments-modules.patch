PR: https://github.com/odoo/odoo/pull/75852

From: fbfd99e680547f04374a8da850ece2c624a2e9fc
From: Victor Feyens
Date: 2021-09-06 14:35:58

Breaking data model changes score: 23, change matches:
-    _inherit = 'adyen.account'
-    store_ids = fields.One2many('adyen.store', 'adyen_account_id')
-    terminal_ids = fields.One2many('adyen.terminal', 'adyen_account_id')
-    _inherit = ['adyen.address.mixin']
-    adyen_account_id = fields.Many2one('adyen.account', ondelete='cascade')
-    store_reference = fields.Char('Reference', default=lambda self: uuid.uuid4().hex)
-    store_uuid = fields.Char('UUID', readonly=True)
-    name = fields.Char('Name', required=True)
-    phone_number = fields.Char('Phone Number', required=True)
-    terminal_ids = fields.One2many('adyen.terminal', 'store_id', string='Payment Terminals', readonly=True)
-    adyen_account_id = fields.Many2one('adyen.account', ondelete='cascade')
-    store_id = fields.Many2one('adyen.store')
-    terminal_uuid = fields.Char('Terminal ID')
-    _inherit = 'adyen.transaction'
-    pos_payment_id = fields.Many2one('pos.payment', string='POS Order')
-    pos_order_id = fields.Many2one(related='pos_payment_id.pos_order_id')
-    adyen_account_id = fields.Many2one('adyen.account', related='company_id.adyen_account_id')
-    adyen_terminal_id = fields.Many2one('adyen.terminal', string='Adyen Terminal', domain="[('adyen_account_id', '=', adyen_account_id)]")
-    _inherit = 'res.config.settings'
-    adyen_account_id = fields.Many2one(string='Adyen Account', related='company_id.adyen_account_id')

Total Changes: 179

[REM] adyen_platforms, *: remove Odoo Payments modules

*: extensions of `adyen_platforms`, namely:
   - pos_adyen: remove related code, records, views, ...
   - payment_odoo: remove the module
   - sale_payment_odoo: remove the module

Modules related to Odoo Payments are already all merged since 14.0 and
14.4 (depending on the module). As the plan is to merge the final
version of Odoo Payments in 15.0 soon after the release, we want to
avoid all the complications that inevitably come with huge diffs, model
changes, XMLID collisions, etc. when merging in a stable version. Even
though it is possible to install these modules since 14.0, no
information could be lost during the upgrade since the entry point of
the application has never been activated.

task-2637770

closes odoo/odoo#75852

Related: odoo/upgrade#2804
Signed-off-by: Antoine Vandevenne (anv) <anv@odoo.com>
Co-authored-by: Antoine Vandevenne (anv)

================================= pseudo patch: =================================

--- a/addons/pos_adyen/models/__init__.py
+++ b/addons/pos_adyen/models/__init__.py
@@ -1,8 +1,5 @@
 # coding: utf-8
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import adyen_account
-from . import adyen_transaction
 from . import pos_config
 from . import pos_payment_method
-from . import res_config_settings

--- a/addons/pos_adyen/models/adyen_account.py
+++ b/None
@@ -1,113 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-import uuid
-from werkzeug.urls import url_join
-
-from odoo import api, fields, models, _
-from odoo.exceptions import ValidationError
-
-
-class AdyenAccount(models.Model):
-    _inherit = 'adyen.account'
-
-    store_ids = fields.One2many('adyen.store', 'adyen_account_id')
-    terminal_ids = fields.One2many('adyen.terminal', 'adyen_account_id')
-
-    @api.model
-    def _sync_adyen_cron(self):
-        self.env['adyen.terminal']._sync_adyen_terminals()
-        super(AdyenAccount, self)._sync_adyen_cron()
-
-    def action_order_terminal(self):
-        if not self.store_ids:
-            raise ValidationError(_('Please create a store first.'))
-
-        store_uuids = ','.join(self.store_ids.mapped('store_uuid'))
-        onboarding_url = self.env['ir.config_parameter'].sudo().get_param('adyen_platforms.onboarding_url')
-        return {
-            'type': 'ir.actions.act_url',
-            'target': 'new',
-            'url': url_join(onboarding_url, 'order_terminals?store_uuids=%s' % store_uuids),
-        }
-
-
-class AdyenStore(models.Model):
-    _name = 'adyen.store'
-    _inherit = ['adyen.address.mixin']
-    _description = 'Adyen for Platforms Store'
-
-    adyen_account_id = fields.Many2one('adyen.account', ondelete='cascade')
-    store_reference = fields.Char('Reference', default=lambda self: uuid.uuid4().hex)
-    store_uuid = fields.Char('UUID', readonly=True) # Given by Adyen
-    name = fields.Char('Name', required=True)
-    phone_number = fields.Char('Phone Number', required=True)
-    terminal_ids = fields.One2many('adyen.terminal', 'store_id', string='Payment Terminals', readonly=True)
-
-    @api.model
-    def create(self, values):
-        adyen_account_id = self.env['adyen.account'].browse(values.get('adyen_account_id'))
-        response = adyen_account_id._adyen_rpc('v1/create_store', self._format_data(values))
-        stores = response['accountHolderDetails']['storeDetails']
-        created_store = next(store for store in stores if store['storeReference'] == values.get('store_reference'))
-        values['store_uuid'] = created_store['store']
-        adyen_store_id = super(AdyenStore, self).create(values)
-        return adyen_store_id
-
-    def unlink(self):
-        for store_id in self:
-            store_id.adyen_account_id._adyen_rpc('v1/close_stores', {
-                'accountHolderCode': store_id.adyen_account_id.account_holder_code,
-                'stores': [store_id.store_uuid],
-            })
-        return super(AdyenStore, self).unlink()
-
-    def _format_data(self, values):
-        adyen_account_id = self.env['adyen.account'].browse(values.get('adyen_account_id')) if values.get('adyen_account_id') else self.adyen_account_id
-        country_id = self.env['res.country'].browse(values.get('country_id')) if values.get('country_id') else self.country_id
-        state_id = self.env['res.country.state'].browse(values.get('state_id')) if values.get('state_id') else self.state_id
-        return {
-            'accountHolderCode': adyen_account_id.account_holder_code,
-            'accountHolderDetails': {
-                'storeDetails': [{
-                    'storeReference': values.get('store_reference') or self.store_reference,
-                    'storeName': values.get('name') or self.name,
-                    'merchantCategoryCode': '7999',
-                    'address': {
-                        'city': values.get('city') or self.city,
-                        'country': country_id.code,
-                        'houseNumberOrName': values.get('house_number_or_name') or self.house_number_or_name,
-                        'postalCode': values.get('zip') or self.zip,
-                        'stateOrProvince': state_id.code or None,
-                        'street': values.get('street') or self.street,
-                    },
-                    'fullPhoneNumber': values.get('phone_number') or self.phone_number,
-                }],
-            }
-        }
-
-
-class AdyenTerminal(models.Model):
-    _name = 'adyen.terminal'
-    _description = 'Adyen for Platforms Terminal'
-    _rec_name = 'terminal_uuid'
-
-    adyen_account_id = fields.Many2one('adyen.account', ondelete='cascade')
-    store_id = fields.Many2one('adyen.store')
-    terminal_uuid = fields.Char('Terminal ID')
-
-    @api.model
-    def _sync_adyen_terminals(self):
-        for adyen_store_id in self.env['adyen.store'].search([]):
-            response = adyen_store_id.adyen_account_id._adyen_rpc('v1/connected_terminals', {
-                'store': adyen_store_id.store_uuid,
-            })
-            terminals_in_db = set(self.search([('store_id', '=', adyen_store_id.id)]).mapped('terminal_uuid'))
-
-            # Added terminals
-            for terminal in set(response.get('uniqueTerminalIds')) - terminals_in_db:
-                self.sudo().create({
-                    'adyen_account_id': adyen_store_id.adyen_account_id.id,
-                    'store_id': adyen_store_id.id,
-                    'terminal_uuid': terminal,
-                })

--- a/addons/pos_adyen/models/adyen_transaction.py
+++ b/None
@@ -1,18 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-
-class AdyenTransaction(models.Model):
-    _inherit = 'adyen.transaction'
-
-    pos_payment_id = fields.Many2one('pos.payment', string='POS Order')
-    pos_order_id = fields.Many2one(related='pos_payment_id.pos_order_id')
-
-    def _post_transaction_sync(self):
-        to_match = self.filtered(lambda t: not t.pos_payment_id)
-        pos_payment_ids = self.env['pos.payment'].search([('transaction_id', 'in', to_match.mapped('reference'))])
-
-        for tx in to_match:
-            tx.pos_payment_id = pos_payment_ids.filtered(lambda t: t.transaction_id == tx.reference)

--- a/addons/pos_adyen/models/pos_payment_method.py
+++ b/addons/pos_adyen/models/pos_payment_method.py
@@ -17,17 +17,13 @@ class PosPaymentMethod(models.Model):
     _inherit = 'pos.payment.method'
 
     def _get_payment_terminal_selection(self):
-        return super(PosPaymentMethod, self)._get_payment_terminal_selection() + [('odoo_adyen', 'Odoo Payments by Adyen'), ('adyen', 'Adyen')]
+        return super(PosPaymentMethod, self)._get_payment_terminal_selection() + [('adyen', 'Adyen')]
 
     # Adyen
     adyen_api_key = fields.Char(string="Adyen API key", help='Used when connecting to Adyen: https://docs.adyen.com/user-management/how-to-get-the-api-key/#description', copy=False)
     adyen_terminal_identifier = fields.Char(help='[Terminal model]-[Serial number], for example: P400Plus-123456789', copy=False)
     adyen_test_mode = fields.Boolean(help='Run transactions in the test environment.')
 
-    # Odoo Payments by Adyen
-    adyen_account_id = fields.Many2one('adyen.account', related='company_id.adyen_account_id')
-    adyen_terminal_id = fields.Many2one('adyen.terminal', string='Adyen Terminal', domain="[('adyen_account_id', '=', adyen_account_id)]")
-
     adyen_latest_response = fields.Char(help='Technical field used to buffer the latest asynchronous notification from Adyen.', copy=False, groups='base.group_erp_manager')
     adyen_latest_diagnosis = fields.Char(help='Technical field used to determine if the terminal is still connected.', copy=False, groups='base.group_erp_manager')
 
@@ -48,12 +44,6 @@ class PosPaymentMethod(models.Model):
             'terminal_request': 'https://terminal-api-%s.adyen.com/async',
         }
 
-    @api.onchange('adyen_terminal_id')
-    def onchange_use_payment_terminal(self):
-        for payment_method in self:
-            if payment_method.use_payment_terminal == 'odoo_adyen' and payment_method.adyen_terminal_id:
-                payment_method.adyen_terminal_identifier = payment_method.adyen_terminal_id.terminal_uuid
-
     def _is_write_forbidden(self, fields):
         whitelisted_fields = set(('adyen_latest_response', 'adyen_latest_diagnosis'))
         return super(PosPaymentMethod, self)._is_write_forbidden(fields - whitelisted_fields)
@@ -100,10 +90,7 @@ class PosPaymentMethod(models.Model):
         if not operation:
             operation = 'terminal_request'
 
-        if self.use_payment_terminal == 'odoo_adyen':
-            return self._proxy_adyen_request_odoo_proxy(data, operation)
-        else:
-            return self._proxy_adyen_request_direct(data, operation)
+        return self._proxy_adyen_request_direct(data, operation)
 
     def _proxy_adyen_request_direct(self, data, operation):
         self.ensure_one()
@@ -131,18 +118,3 @@ class PosPaymentMethod(models.Model):
             return True
 
         return req.json()
-
-    def _proxy_adyen_request_odoo_proxy(self, data, operation):
-        try:
-            company_sudo = self.env.company.sudo()
-            return company_sudo.adyen_account_id._adyen_rpc('v1/%s' % operation, {
-                'request_data': data,
-                'account_code': self.sudo().adyen_account_id.account_code,
-                'notification_url': company_sudo.get_base_url(),
-            })
-        except Forbidden:
-            return {
-                'error': {
-                    'status_code': 401,
-                }
-            }

--- a/addons/pos_adyen/models/res_config_settings.py
+++ b/None
@@ -1,13 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, fields, models
-
-
-class ResConfigSettings(models.TransientModel):
-    _inherit = 'res.config.settings'
-
-    adyen_account_id = fields.Many2one(string='Adyen Account', related='company_id.adyen_account_id')
-
-    def create_adyen_account(self):
-        return self.env['adyen.account'].action_create_redirect()
