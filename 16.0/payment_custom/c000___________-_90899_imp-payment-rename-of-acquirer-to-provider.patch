PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = 'payment.acquirer'
-    provider = fields.Selection(

Total Changes: 154

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_custom/models/__init__.py
+++ b/addons/payment_custom/models/__init__.py
@@ -1,4 +1,4 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_transaction

--- a/addons/payment_custom/models/payment_acquirer.py
+++ b/addons/payment_custom/models/payment_provider.py
@@ -3,16 +3,16 @@
 from odoo import _, api, fields, models
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
     _sql_constraints = [(
-        'custom_acquirers_setup',
-        "CHECK(custom_mode IS NULL OR (provider = 'custom' AND custom_mode IS NOT NULL))",
+        'custom_providers_setup',
+        "CHECK(custom_mode IS NULL OR (code = 'custom' AND custom_mode IS NOT NULL))",
         "Only custom providers should have a custom mode."
     )]
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('custom', "Custom")], ondelete={'custom': 'set default'}
     )
     custom_mode = fields.Selection(
@@ -23,14 +23,14 @@ class PaymentAcquirer(models.Model):
     qr_code = fields.Boolean(
         string="Enable QR Codes", help="Enable the use of QR-codes when paying by wire transfer.")
 
-    @api.depends('provider')
+    @api.depends('code')
     def _compute_view_configuration_fields(self):
         """ Override of payment to hide the credentials page.
 
         :return: None
         """
         super()._compute_view_configuration_fields()
-        self.filtered(lambda acq: acq.provider == 'custom').update({
+        self.filtered(lambda p: p.code == 'custom').update({
             'show_credentials_page': False,
             'show_payment_icon_ids': False,
             'show_pre_msg': False,
@@ -39,22 +39,22 @@ class PaymentAcquirer(models.Model):
         })
 
     def _transfer_ensure_pending_msg_is_set(self):
-        transfer_acquirers_without_msg = self.filtered(
-            lambda a: a.provider == 'custom' and not a.pending_msg)
-        if not transfer_acquirers_without_msg:
+        transfer_providers_without_msg = self.filtered(
+            lambda p: p.code == 'custom' and not p.pending_msg)
+        if not transfer_providers_without_msg:
             return
 
         account_payment = self.env['ir.module.module']._get('account_payment')
         if account_payment.state != 'installed':
             return
 
-        for acquirer in transfer_acquirers_without_msg:
-            company_id = acquirer.company_id.id
+        for provider in transfer_providers_without_msg:
+            company_id = provider.company_id.id
             # filter only bank accounts marked as visible
             accounts = self.env['account.journal'].search([
                 ('type', '=', 'bank'), ('company_id', '=', company_id)
             ]).bank_account_id
-            acquirer.pending_msg = f'<div>' \
+            provider.pending_msg = f'<div>' \
                 f'<h3>{_("Please use the following transfer details")}</h3>' \
                 f'<h4>{_("Bank Account") if len(accounts) == 1 else _("Bank Accounts")}</h4>' \
                 f'<ul>{"".join(f"<li>{account.display_name}</li>" for account in accounts)}</ul>' \

--- a/addons/payment_custom/models/payment_transaction.py
+++ b/addons/payment_custom/models/payment_transaction.py
@@ -19,11 +19,11 @@ class PaymentTransaction(models.Model):
         Note: self.ensure_one() from `_get_processing_values`
 
         :param dict processing_values: The generic and specific processing values of the transaction
-        :return: The dict of acquirer-specific processing values
+        :return: The dict of provider-specific processing values
         :rtype: dict
         """
         res = super()._get_specific_rendering_values(processing_values)
-        if self.provider != 'custom':
+        if self.provider_code != 'custom':
             return res
 
         return {
@@ -31,21 +31,21 @@ class PaymentTransaction(models.Model):
             'reference': self.reference,
         }
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of payment to find the transaction based on custom data.
 
-        :param str provider: The provider of the acquirer that handled the transaction
+        :param str provider_code: The code of the provider that handled the transaction
         :param dict notification_data: The notification feedback data
         :return: The transaction if found
         :rtype: recordset of `payment.transaction`
         :raise: ValidationError if the data match no transaction
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'custom' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'custom' or len(tx) == 1:
             return tx
 
         reference = notification_data.get('reference')
-        tx = self.search([('reference', '=', reference), ('provider', '=', 'custom')])
+        tx = self.search([('reference', '=', reference), ('provider_code', '=', 'custom')])
         if not tx:
             raise ValidationError(
                 "Wire Transfer: " + _("No transaction found matching reference %s.", reference)
@@ -61,7 +61,7 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'custom':
+        if self.provider_code != 'custom':
             return
 
         _logger.info(
@@ -71,11 +71,11 @@ class PaymentTransaction(models.Model):
         self._set_pending()
 
     def _log_received_message(self):
-        """ Override of `payment` to remove custom acquirers from the recordset.
+        """ Override of `payment` to remove custom providers from the recordset.
 
         :return: None
         """
-        other_provider_txs = self.filtered(lambda t: t.provider != 'custom')
+        other_provider_txs = self.filtered(lambda t: t.provider_code != 'custom')
         super(PaymentTransaction, other_provider_txs)._log_received_message()
 
     def _get_sent_message(self):
@@ -85,9 +85,9 @@ class PaymentTransaction(models.Model):
         :rtype: str
         """
         message = super()._get_sent_message()
-        if self.provider == 'custom':
+        if self.provider_code == 'custom':
             message = _(
-                "The customer has selected %(acq_name)s to make the payment.",
-                acq_name=self.acquirer_id.name
+                "The customer has selected %(provider_name)s to make the payment.",
+                provider_name=self.provider_id.name
             )
         return message
