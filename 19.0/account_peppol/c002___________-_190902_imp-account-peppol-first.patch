PR: https://github.com/odoo/odoo/pull/190902

From: aaf1bdffbfde780050fdd3653ca5aadae416ea9a
From: Claire (clbr)
Date: 2024-12-19 21:26:26

Breaking data model changes scores: del:1 + add:0, change matches:
-    peppol_verification_code = fields.Char(string='SMS verification code')

Total Changes: 180

[IMP] account,*: Peppol First

*: account_edi_ubl_cii, account_peppol

Revamping around Peppol to simplify onboarding.

1. In previous commit [1], we added a footer in email when relevant with some Peppol
related information.
2. Simplify the res.config.setting view.
3. Auto-install the Peppol module for following countries:
AT, BE, CH, CY, CZ, DE, DK, EE, ES, FI, FR, GR, IE, IS, IT, LT,
LU, LV, MT, NL, NO, PL, PT, RO, SE, SI.
4. Peppol Registration wizard: **Remove SMS validation** => we are assessing some
KYC, but the SMS validation is not preventing much, so its only adding frictions.
Remove the migrations key from the wizard, if the user has registered a key through his
previous Access Point, we retrieve it and automatically migrates the participant.
We now propose to register as receiver by default. Small UI improvements.
5. Print & Send wizard: refine warnings, disable the "by Peppol" button
if the customer is not on Peppol. Add some modals with explanations about Peppol
if the customer is on Peppol but the Sender didn't check the option.
6. Partner form: Hide in debug some too technical field. Small UI improvements.
7. EAS cleanup: revamp EAS description to be shorter and clearer. Better handling of translations.
8. Technical cleanup of the demo utils

[1] https://github.com/odoo/odoo/commit/4e984c0ae234f02bd07d96fc555d5b5e9ad144c3

task-4332306

closes odoo/odoo#190902

X-original-commit: 171b4ae657bc86bba1b113f0aed7a4ba4a154ed9
Related: odoo/enterprise#75764
Related: odoo/upgrade#6954
Signed-off-by: Laurent Smet (las) <las@odoo.com>
Signed-off-by: Claire Bretton (clbr) <clbr@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account_peppol/models/account_edi_proxy_user.py
+++ b/addons/account_peppol/models/account_edi_proxy_user.py
@@ -15,7 +15,6 @@ BATCH_SIZE = 50
 class Account_Edi_Proxy_ClientUser(models.Model):
     _inherit = 'account_edi_proxy_client.user'
 
-    peppol_verification_code = fields.Char(string='SMS verification code')
     proxy_type = fields.Selection(selection_add=[('peppol', 'PEPPOL')], ondelete={'peppol': 'cascade'})
 
     # -------------------------------------------------------------------------
@@ -56,12 +55,6 @@ class Account_Edi_Proxy_ClientUser(models.Model):
     def _call_peppol_proxy(self, endpoint, params=None):
         self.ensure_one()
 
-        errors = {
-            'code_incorrect': _('The verification code is not correct'),
-            'code_expired': _('This verification code has expired. Please request a new one.'),
-            'too_many_attempts': _('Too many attempts to request an SMS code. Please try again later.'),
-        }
-
         params = params or {}
         try:
             response = self._make_request(
@@ -72,16 +65,14 @@ class Account_Edi_Proxy_ClientUser(models.Model):
             raise UserError(e.message)
 
         if 'error' in response:
-            error_code = response['error'].get('code')
             error_message = response['error'].get('message') or response['error'].get('data', {}).get('message')
-            raise UserError(errors.get(error_code) or error_message or _('Connection error, please try again later.'))
+            raise UserError(error_message or _('Connection error, please try again later.'))
         return response
 
     @api.model
     def _get_can_send_domain(self):
         return ('sender', 'smp_registration', 'receiver')
 
-    @handle_demo
     def _check_company_on_peppol(self, company, edi_identification):
         if (
             not company.account_peppol_migration_key
@@ -282,11 +273,58 @@ class Account_Edi_Proxy_ClientUser(models.Model):
     # BUSINESS ACTIONS
     # -------------------------------------------------------------------------
 
-    def _peppol_register_sender_as_receiver(self):
+    @handle_demo
+    def _register_proxy_user(self, company, proxy_type, edi_mode):
+        # EXTENDS 'account_edi_ubl_cii' - add handle_demo
+        return super()._register_proxy_user(company, proxy_type, edi_mode)
+
+    def _peppol_migrate_registration(self):
+        """Migrates AWAY from Odoo's SMP."""
         self.ensure_one()
+        response = self._call_peppol_proxy(endpoint='/api/peppol/1/migrate_peppol_registration')
+        if migration_key := response.get('migration_key'):
+            self.company_id.account_peppol_migration_key = migration_key
 
+    def _get_company_details(self):
+        self.ensure_one()
+        return {
+            'peppol_company_name': self.company_id.display_name,
+            'peppol_company_vat': self.company_id.vat,
+            'peppol_company_street': self.company_id.street,
+            'peppol_company_city': self.company_id.city,
+            'peppol_company_zip': self.company_id.zip,
+            'peppol_country_code': self.company_id.country_id.code,
+            'peppol_phone_number': self.company_id.account_peppol_phone_number,
+            'peppol_contact_email': self.company_id.account_peppol_contact_email,
+            'peppol_migration_key': self.company_id.account_peppol_migration_key,
+        }
+
+    def _peppol_register_sender(self):
+        self.ensure_one()
+        params = {
+            'company_details': self._get_company_details(),
+        }
+        self._call_peppol_proxy(
+            endpoint='/api/peppol/1/register_sender',
+            params=params,
+        )
+        self.company_id.account_peppol_proxy_state = 'sender'
+
+    def _peppol_register_receiver(self):
+        self.ensure_one()
+        params = {
+            'company_details': self._get_company_details(),
+            'supported_identifiers': list(self.company_id._peppol_supported_document_types())
+        }
+        self._call_peppol_proxy(
+            endpoint='/api/peppol/1/register_receiver',
+            params=params,
+        )
+        self.company_id.account_peppol_proxy_state = 'smp_registration'
+
+    def _peppol_register_sender_as_receiver(self):
+        self.ensure_one()
         company = self.company_id
-        edi_identification = self._get_proxy_identification(company, 'peppol')
 
         if company.account_peppol_proxy_state != 'sender':
             # a participant can only try registering as a receiver if they are currently a sender
@@ -294,10 +332,11 @@ class Account_Edi_Proxy_ClientUser(models.Model):
             raise UserError(
                 _('Cannot register a user with a %s application', peppol_state_translated))
 
+        edi_identification = self._get_proxy_identification(company, 'peppol')
         self._check_company_on_peppol(company, edi_identification)
 
         self._call_peppol_proxy(
-            endpoint='/api/peppol/2/register_participant',
+            endpoint='/api/peppol/1/register_sender_as_receiver',
             params={
                 'migration_key': company.account_peppol_migration_key,
                 'supported_identifiers': list(company._peppol_supported_document_types())

--- a/addons/account_peppol/models/account_move_send.py
+++ b/addons/account_peppol/models/account_move_send.py
@@ -1,9 +1,9 @@
 from base64 import b64encode
+
 from odoo import api, models, _
 from odoo.addons.account.models.company import PEPPOL_LIST
 from odoo.addons.account_edi_proxy_client.models.account_edi_proxy_user import AccountEdiProxyError
 
-
 class AccountMoveSend(models.AbstractModel):
     _inherit = 'account.move.send'
 
@@ -25,25 +25,56 @@ class AccountMoveSend(models.AbstractModel):
 
     def _get_alerts(self, moves, moves_data):
         # EXTENDS 'account'
+        def peppol_partner(moves):
+            return moves.partner_id.commercial_partner_id
+
+        def filter_peppol_state(moves, state):
+            return peppol_partner(moves.filtered(
+                lambda m: peppol_partner(m).with_company(m.company_id).peppol_verification_state == state))
+
         alerts = super()._get_alerts(moves, moves_data)
-        if peppol_moves := moves.filtered(lambda m: 'peppol' in moves_data[m]['sending_methods']):
-            invalid_partners = peppol_moves.filtered(
-                lambda move: move.partner_id.commercial_partner_id.with_company(move.company_id).peppol_verification_state != 'valid'
-            ).partner_id.commercial_partner_id
-            ubl_warning_already_displayed = 'account_edi_ubl_cii_configure_partner' in alerts
-            if invalid_partners and not ubl_warning_already_displayed:
-                alerts['account_peppol_warning_partner'] = {
-                    'message': _("The following partners are not correctly configured to receive Peppol documents. "
-                                 "Please check and verify their Peppol endpoint and the Electronic Invoicing format"),
-                    'action_text': _("View Partner(s)"),
-                    'action': invalid_partners._get_records_action(name=_("Check Partner(s)")),
-                }
-            edi_modes = [move.company_id.account_edi_proxy_client_ids.filtered(lambda usr: usr.proxy_type == 'peppol').edi_mode for move in peppol_moves]
-            if any(edi_mode in ('test', 'demo') for edi_mode in edi_modes):
+        # Check for invalid peppol partners.
+        peppol_moves = moves.filtered(lambda m: 'peppol' in moves_data[m]['sending_methods'])
+        invalid_partners = filter_peppol_state(peppol_moves, 'not_valid_format')
+        if invalid_partners and not 'account_edi_ubl_cii_configure_partner' in alerts:
+            alerts['account_peppol_warning_partner'] = {
+                'message': _("Customer is on Peppol but did not enable receiving documents."),
+                'action_text': _("View Partner(s)"),
+                'action': invalid_partners._get_records_action(name=_("Check Partner(s)")),
+            }
+            edi_modes = set(
+                peppol_moves.company_id.account_edi_proxy_client_ids \
+                    .filtered(lambda usr: usr.proxy_type == 'peppol') \
+                    .mapped('edi_mode')
+            )
+            if edi_modes.intersection({'test', 'demo'}):
                 alerts['account_peppol_demo_test_mode'] = {
                     'message': _("Peppol is in testing/demo mode."),
                     'level': 'info',
                 }
+
+        # Check for not peppol partners that are on the network.
+        not_peppol_moves = moves.filtered(lambda m: 'peppol' not in moves_data[m]['sending_methods'])
+        if peppol_not_selected_partners := filter_peppol_state(not_peppol_moves, 'valid'):
+            if len(peppol_not_selected_partners) == 1:
+                alerts['account_peppol_partner_want_peppol'] = {
+                    'message': _(
+                        "%s has requested electronic invoices reception on Peppol.",
+                         peppol_not_selected_partners.display_name
+                    ),
+                    'level': 'info',
+                    'action_text': _("Why should you use it ?"),
+                    'action': {
+                        'name': _("Why should I use PEPPOL ?"),
+                        'type': 'ir.actions.client',
+                        'tag': 'account_peppol.what_is_peppol',
+                        'target': 'new',
+                        'context': {
+                            'footer': False,
+                            'move_ids': moves.ids,
+                        },
+                    },
+                }
         return alerts
 
     # -------------------------------------------------------------------------
@@ -75,11 +106,13 @@ class AccountMoveSend(models.AbstractModel):
     def _is_applicable_to_move(self, method, move):
         # EXTENDS 'account'
         if method == 'peppol':
+            partner = move.partner_id.commercial_partner_id.with_company(move.company_id)
             return all([
                 self._is_applicable_to_company(method, move.company_id),
-                move.partner_id.commercial_partner_id.with_company(move.company_id).is_peppol_edi_format,
+                partner.is_peppol_edi_format,
+                partner.peppol_verification_state == 'valid',
                 move.company_id.account_peppol_proxy_state != 'rejected',
-                move._need_ubl_cii_xml(move.partner_id.commercial_partner_id.with_company(move.company_id).invoice_edi_format)
+                move._need_ubl_cii_xml(partner.invoice_edi_format)
                 or move.ubl_cii_xml_id and move.peppol_move_state not in ('processing', 'done'),
             ])
         else:

--- a/addons/account_peppol/models/res_company.py
+++ b/addons/account_peppol/models/res_company.py
@@ -63,7 +63,6 @@ class ResCompany(models.Model):
     account_peppol_proxy_state = fields.Selection(
         selection=[
             ('not_registered', 'Not registered'),
-            ('in_verification', 'In verification'),
             ('sender', 'Can send but not receive'),
             ('smp_registration', 'Can send, pending registration to receive'),
             ('receiver', 'Can send and receive'),
@@ -190,17 +189,6 @@ class ResCompany(models.Model):
     # LOW-LEVEL METHODS
     # -------------------------------------------------------------------------
 
-    @api.model
-    def _sanitize_peppol_endpoint(self, vals, eas=False, endpoint=False):
-        # TODO: remove in master
-        if not (peppol_eas := vals.get('peppol_eas', eas)) or not (peppol_endpoint := vals.get('peppol_endpoint', endpoint)):
-            return vals
-
-        if sanitizer := PEPPOL_ENDPOINT_SANITIZERS.get(peppol_eas):
-            vals['peppol_endpoint'] = sanitizer(peppol_endpoint)
-
-        return vals
-
     @api.model
     def _sanitize_peppol_endpoint_in_values(self, values):
         eas = values.get('peppol_eas')

--- a/addons/account_peppol/models/res_config_settings.py
+++ b/addons/account_peppol/models/res_config_settings.py
@@ -43,12 +43,8 @@ class ResConfigSettings(models.TransientModel):
         registration_action = registration_wizard._action_open_peppol_form(reopen=False)
         return registration_action
 
-    @handle_demo
-    def button_update_peppol_user_data(self):
-        """
-        Action for the user to be able to update their contact details any time
-        Calls /update_user on the iap server
-        """
+    def button_peppol_update_user_data(self):
+        """Update contact details of the Peppol user."""
         self.ensure_one()
 
         if not self.account_peppol_contact_email or not self.account_peppol_phone_number:
@@ -67,15 +63,11 @@ class ResConfigSettings(models.TransientModel):
         )
         return True
 
-    @handle_demo
-    def button_peppol_smp_registration(self):
-        """
-        The second (optional) step in Peppol registration.
-        The user can choose to become a Receiver and officially register on the Peppol
-        network, i.e. receive documents from other Peppol participants.
-        """
+    def button_peppol_register_sender_as_receiver(self):
+        """Register the existing user as a receiver."""
         self.ensure_one()
         self.account_peppol_edi_user._peppol_register_sender_as_receiver()
+        self.account_peppol_edi_user._peppol_get_participant_status()
         if self.account_peppol_proxy_state == 'smp_registration':
             return {
                 'type': 'ir.actions.client',
@@ -89,27 +81,21 @@ class ResConfigSettings(models.TransientModel):
             }
         return True
 
-    @handle_demo
-    def button_migrate_peppol_registration(self):
-        """
+    def button_peppol_migrate_away(self):
+        """Migrates AWAY from Odoo's SMP.
         If the user is a receiver, they need to request a migration key, generated on the IAP server.
         The migration key is then displayed in Peppol settings.
         Currently, reopening after migrating away is not supported.
         """
         self.ensure_one()
-
         if self.account_peppol_proxy_state != 'receiver':
             raise UserError(_("Can't migrate unless registered to receive documents."))
 
-        response = self.account_peppol_edi_user._call_peppol_proxy(endpoint='/api/peppol/1/migrate_peppol_registration')
-        self.account_peppol_migration_key = response['migration_key']
+        self.account_peppol_edi_user._peppol_migrate_registration()
         return True
 
-    @handle_demo
-    def button_deregister_peppol_participant(self):
-        """
-        Deregister the edi user from Peppol network
-        """
+    def button_peppol_unregister(self):
+        """Unregister the user from Peppol network."""
         self.ensure_one()
 
         if self.account_peppol_edi_user:

--- a/addons/account_peppol/models/res_partner.py
+++ b/addons/account_peppol/models/res_partner.py
@@ -108,6 +108,7 @@ class ResPartner(models.Model):
         return etree.fromstring(response.content)
 
     @api.model
+    @handle_demo
     def _check_peppol_participant_exists(self, participant_info, edi_identification, check_company=False):
         participant_identifier = participant_info.findtext('{*}ParticipantIdentifier')
         service_metadata = participant_info.find('.//{*}ServiceMetadataReference')
@@ -184,7 +185,6 @@ class ResPartner(models.Model):
     # BUSINESS ACTIONS
     # -------------------------------------------------------------------------
 
-    @handle_demo
     def button_account_peppol_check_partner_endpoint(self, company=None):
         """ A basic check for whether a participant is reachable at the given
         Peppol participant ID - peppol_eas:peppol_endpoint (ex: '9999:test')
