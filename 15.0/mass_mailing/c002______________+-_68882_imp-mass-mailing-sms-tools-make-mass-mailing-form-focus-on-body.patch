PR: https://github.com/odoo/odoo/pull/68882

From: 171eea3fae81ad4f147e5092bbd0b7c2ae0c8184
From: nounoubensebia
Date: 2021-05-20 09:40:40

Structural Changes: 5
Total Changes: 30

[IMP] mass_mailing[_sms], tools: make mass mailing form focus on body

Make the email body take the entire space to avoid having some wasted space,
this will also make the user have more focus when designing an email.

Revamp the settings notebook page in order to give more clarity to the user,
and move some fields from the main form have been moved to this section to
have more space in the bottom for the email body.

In the mailing form, when the mailing is sent or is being sent, set fields
which are no longer useful for the user to change to readonly mode.

Add a wizard that enables the user to schedule a mailing, the schedule field is
still kept in the form for the user to be able to change the date when the
mailing is in the queue (if they want to send it sooner).

Display an action helper-style content when the email is empty, because,
currently, the user is left with a big white screen when the email has no
content which is not desirable.

Update the html_empty function to take into account style attributes to better
match the editor's void content.

Hide A/B testing fields from SMS mailing form view as these are not supported
for SMS marketing.

Task-2469409

closes odoo/odoo#68882

Ent-pr: https://github.com/odoo/odoo/pull/68882
Related: odoo/enterprise#18391
Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/mass_mailing/models/mailing.py
+++ b/addons/mass_mailing/models/mailing.py
@@ -88,14 +88,18 @@ class MassMailing(models.Model):
     sent_date = fields.Datetime(string='Sent Date', copy=False)
 
     schedule_type = fields.Selection([('now', 'Send now'), ('scheduled', 'Send on')], string='Schedule',
-        default='now', required=True, readonly=True, states={'draft': [('readonly', False)]})
-    schedule_date = fields.Datetime(string='Scheduled for', tracking=True, readonly=True, states={'draft': [('readonly', False)]},
-        compute='_compute_schedule_date', store=True, copy=True)
+                                     default='now', required=True, readonly=True,
+                                     states={'draft': [('readonly', False)], 'in_queue': [('readonly', False)]})
+    schedule_date = fields.Datetime(string='Scheduled for', tracking=True, readonly=True,
+                                    states={'draft': [('readonly', False)], 'in_queue': [('readonly', False)]},
+                                    compute='_compute_schedule_date', store=True, copy=True)
     calendar_date = fields.Datetime('Calendar Date', compute='_compute_calendar_date', store=True, copy=False,
         help="Technical field for the calendar view.")
     # don't translate 'body_arch', the translations are only on 'body_html'
     body_arch = fields.Html(string='Body', translate=False)
     body_html = fields.Html(string='Body converted to be sent by mail', sanitize_attributes=False)
+    is_body_empty = fields.Boolean(compute="_compute_is_body_empty",
+                                   help='Technical field used to determine if the mail body is empty')
     attachment_ids = fields.Many2many('ir.attachment', 'mass_mailing_ir_attachments_rel',
         'mass_mailing_id', 'attachment_id', string='Attachments')
     keep_archives = fields.Boolean(string='Keep Archives')
@@ -132,6 +136,9 @@ class MassMailing(models.Model):
     mailing_domain = fields.Char(
         string='Domain', compute='_compute_mailing_domain',
         readonly=False, store=True)
+    mail_server_available = fields.Boolean(
+        compute='_compute_mail_server_available',
+        help="Technical field used to know if the user has activated the outgoing mail server option in the settings")
     mail_server_id = fields.Many2one('ir.mail_server', string='Mail Server',
         default=_get_default_mail_server_id,
         help="Use a specific mail server in priority. Otherwise Odoo relies on the first outgoing mail server available (based on their sequencing) as it does for normal mails.")
@@ -290,6 +297,14 @@ class MassMailing(models.Model):
             else:
                 mailing.calendar_date = False
 
+    @api.depends('body_html')
+    def _compute_is_body_empty(self):
+        for mailing in self:
+            mailing.is_body_empty = tools.is_html_empty(mailing.body_html)
+
+    def _compute_mail_server_available(self):
+        self.mail_server_available = self.env['ir.config_parameter'].sudo().get_param('mass_mailing.outgoing_mail_server')
+
     # ------------------------------------------------------
     # ORM
     # ------------------------------------------------------
@@ -353,10 +368,17 @@ class MassMailing(models.Model):
         }
 
     def action_launch(self):
+        self.write({'schedule_type': 'now'})
         return self.action_put_in_queue()
 
     def action_schedule(self):
-        return self.action_put_in_queue()
+        self.ensure_one()
+        if self.schedule_date:
+            return self.action_put_in_queue()
+        else:
+            action = self.env["ir.actions.actions"]._for_xml_id("mass_mailing.mailing_mailing_schedule_date_action")
+            action['context'] = dict(self.env.context, default_mass_mailing_id=self.id)
+            return action
 
     def action_put_in_queue(self):
         self.write({'state': 'in_queue'})
