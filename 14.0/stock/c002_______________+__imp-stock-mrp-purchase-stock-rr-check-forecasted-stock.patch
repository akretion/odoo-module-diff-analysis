PR: https://github.com/odoo/odoo/pull/

From: 56efb55057b9b06fe335df20d1696b49468334fb
From: Arnold Moyaux
Date: 2020-01-09 16:09:12

Structural Changes: 3
Total Changes: 50

[IMP] stock, mrp, purchase_stock: RR check forecasted stock

When the scheduler runs, each orderpoint will check the forecast stock
for an infinite time. As example, if we plan a receipt of 10 products in
4 months and need to deliver 5 products next month, procurement will not
be launched since we have a forecasted quantity of 5.

In order to improve it, the orderpoint will compute the total lead days
from rules, suppliers/production delays, security days,...
Those lead days will be added to today in order to know at which date
the forecast stock should be checked and trigger the replenish document
for today in order to be delivered at the correct date.

Task: 1849912

================================= pseudo patch: =================================

--- a/addons/stock/models/product.py
+++ b/addons/stock/models/product.py
@@ -523,6 +523,18 @@ class Product(models.Model):
                 raise UserError(msg)
         return res
 
+    def _get_rules_from_location(self, location, seen_rules=False):
+        if not seen_rules:
+            seen_rules = self.env['stock.rule']
+        rule = self.env['procurement.group']._get_rule(self, location, {'warehouse_id': location.get_warehouse()})
+        if not rule:
+            return seen_rules
+        if rule.procure_method == 'make_to_stock' or rule.action not in ('pull_push', 'pull'):
+            return seen_rules | rule
+        else:
+            return self._get_rules_from_location(rule.location_src_id, seen_rules | rule)
+
+
 class ProductTemplate(models.Model):
     _inherit = 'product.template'
     _check_company_auto = True

--- a/addons/stock/models/stock_orderpoint.py
+++ b/addons/stock/models/stock_orderpoint.py
@@ -1,8 +1,9 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from datetime import datetime
+from datetime import datetime, time
 from dateutil import relativedelta
+from json import dumps
 
 from odoo import api, fields, models, _
 from odoo.exceptions import UserError, ValidationError
@@ -64,6 +65,9 @@ class StockWarehouseOrderpoint(models.Model):
         default=lambda self: self.env.company)
     allowed_location_ids = fields.One2many(comodel_name='stock.location', compute='_compute_allowed_location_ids')
 
+    json_lead_days_popover = fields.Char(compute='_compute_lead_days')
+    lead_days_date = fields.Date(compute='_compute_lead_days')
+
     _sql_constraints = [
         ('qty_multiple_check', 'CHECK( qty_multiple >= 0 )', 'Qty Multiple must be greater than or equal to zero.'),
     ]
@@ -81,6 +85,22 @@ class StockWarehouseOrderpoint(models.Model):
                 loc_domain = expression.AND([loc_domain, ['|', ('company_id', '=', False), ('company_id', '=', orderpoint.company_id.id)]])
             orderpoint.allowed_location_ids = self.env['stock.location'].search(loc_domain)
 
+    @api.depends('product_id', 'location_id', 'company_id', 'warehouse_id',
+                 'product_id.seller_ids', 'product_id.seller_ids.delay')
+    def _compute_lead_days(self):
+        for orderpoint in self:
+            rules = orderpoint.product_id._get_rules_from_location(orderpoint.location_id)
+            lead_days, lead_days_description = rules._get_lead_days(orderpoint.product_id)
+            lead_days_date = fields.Date.today() + relativedelta.relativedelta(days=lead_days)
+            orderpoint.json_lead_days_popover = dumps({
+                'title': _('Replenishment'),
+                'popoverTemplate': 'stock.leadDaysPopOver',
+                'lead_days_date': fields.Date.to_string(lead_days_date),
+                'lead_days_description': lead_days_description,
+                'today': fields.Date.to_string(fields.Date.today()),
+            })
+            orderpoint.lead_days_date = lead_days_date
+
     def _quantity_in_progress(self):
         """Return Quantities that are not yet in virtual stock but should be deduced from orderpoint rule
         (example: purchases created from orderpoints)"""
@@ -122,6 +142,7 @@ class StockWarehouseOrderpoint(models.Model):
         self.ensure_one()
         return {
             'location': self.location_id.id,
+            'to_date': datetime.combine(self.lead_days_date, time.max)
         }
 
     def _prepare_procurement_values(self, product_qty, date=False, group=False):

--- a/addons/stock/models/stock_rule.py
+++ b/addons/stock/models/stock_rule.py
@@ -9,7 +9,7 @@ from psycopg2 import OperationalError
 
 from odoo import api, fields, models, registry, SUPERUSER_ID, _
 from odoo.osv import expression
-from odoo.tools import float_compare, float_round, frozendict
+from odoo.tools import float_compare, float_round, frozendict, html_escape
 from odoo.exceptions import UserError
 
 import logging
@@ -323,6 +323,19 @@ class StockRule(models.Model):
                 user_id=product_id.responsible_id.id or SUPERUSER_ID,
             )
 
+    def _get_lead_days(self, product):
+        """Returns the cumulative delay and its description encountered by a
+        procurement going through the rules in `self`.
+
+        :param product: the product of the procurement
+        :type product: :class:`~odoo.addons.product.models.product.ProductProduct`
+        :return: the cumulative delay and cumulative delay's description
+        :rtype: tuple
+        """
+        delay = sum(self.filtered(lambda r: r.action in ['pull', 'pull_push']).mapped('delay'))
+        delay_description = ''.join(['<tr><td>%s %s</td><td>+ %d %s</td></tr>' % (_('Delay on'), html_escape(rule.name), rule.delay, _('day(s)')) for rule in self if rule.action in ['pull', 'pull_push'] and rule.delay])
+        return delay, delay_description
+
 
 class ProcurementGroup(models.Model):
     """
