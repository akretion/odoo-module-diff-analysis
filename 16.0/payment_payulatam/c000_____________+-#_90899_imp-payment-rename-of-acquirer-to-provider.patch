PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Structural Changes: 4
Total Changes: 198

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_payulatam/models/__init__.py
+++ b/addons/payment_payulatam/models/__init__.py
@@ -1,4 +1,4 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_transaction

--- a/addons/payment_payulatam/models/payment_acquirer.py
+++ b/addons/payment_payulatam/models/payment_provider.py
@@ -8,10 +8,10 @@ from odoo.tools.float_utils import float_repr
 SUPPORTED_CURRENCIES = ('ARS', 'BRL', 'CLP', 'COP', 'MXN', 'PEN', 'USD')
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('payulatam', 'PayU Latam')], ondelete={'payulatam': 'set default'})
     payulatam_merchant_id = fields.Char(
         string="PayU Latam Merchant ID",
@@ -26,15 +26,15 @@ class PaymentAcquirer(models.Model):
         groups='base.group_system')
 
     @api.model
-    def _get_compatible_acquirers(self, *args, currency_id=None, **kwargs):
-        """ Override of payment to unlist PayU Latam acquirers for unsupported currencies. """
-        acquirers = super()._get_compatible_acquirers(*args, currency_id=currency_id, **kwargs)
+    def _get_compatible_providers(self, *args, currency_id=None, **kwargs):
+        """ Override of payment to unlist PayU Latam providers for unsupported currencies. """
+        providers = super()._get_compatible_providers(*args, currency_id=currency_id, **kwargs)
 
         currency = self.env['res.currency'].browse(currency_id).exists()
         if currency and currency.name not in SUPPORTED_CURRENCIES:
-            acquirers = acquirers.filtered(lambda a: a.provider != 'payulatam')
+            providers = providers.filtered(lambda p: p.code != 'payulatam')
 
-        return acquirers
+        return providers
 
     def _payulatam_generate_sign(self, values, incoming=True):
         """ Generate the signature for incoming or outgoing communications.

--- a/addons/payment_payulatam/models/payment_transaction.py
+++ b/addons/payment_payulatam/models/payment_transaction.py
@@ -19,7 +19,7 @@ class PaymentTransaction(models.Model):
     _inherit = 'payment.transaction'
 
     @api.model
-    def _compute_reference(self, provider, prefix=None, separator='-', **kwargs):
+    def _compute_reference(self, provider_code, prefix=None, separator='-', **kwargs):
         """ Override of payment to ensure that PayU Latam requirements for references are satisfied.
 
         PayU Latam requirements for transaction are as follows:
@@ -28,13 +28,13 @@ class PaymentTransaction(models.Model):
           transactions are created simultaneously, `_compute_reference` ensures the uniqueness of
           references by suffixing a sequence number.
 
-        :param str provider: The provider of the acquirer handling the transaction
+        :param str provider_code: The code of the provider handling the transaction
         :param str prefix: The custom prefix used to compute the full reference
         :param str separator: The custom separator used to separate the prefix from the suffix
         :return: The unique reference for the transaction
         :rtype: str
         """
-        if provider == 'payulatam':
+        if provider_code == 'payulatam':
             if not prefix:
                 # If no prefix is provided, it could mean that a module has passed a kwarg intended
                 # for the `_compute_reference_prefix` method, as it is only called if the prefix is
@@ -42,10 +42,12 @@ class PaymentTransaction(models.Model):
                 # default value if it was empty, hence preventing the method from ever being called
                 # and the transaction from received a reference named after the related document.
                 prefix = self.sudo()._compute_reference_prefix(
-                    provider, separator, **kwargs
+                    provider_code, separator, **kwargs
                 ) or None
             prefix = payment_utils.singularize_reference_prefix(prefix=prefix, separator=separator)
-        return super()._compute_reference(provider, prefix=prefix, separator=separator, **kwargs)
+        return super()._compute_reference(
+            provider_code, prefix=prefix, separator=separator, **kwargs
+        )
 
     def _get_specific_rendering_values(self, processing_values):
         """ Override of payment to return Payulatam-specific rendering values.
@@ -53,54 +55,54 @@ class PaymentTransaction(models.Model):
         Note: self.ensure_one() from `_get_processing_values`
 
         :param dict processing_values: The generic and specific processing values of the transaction
-        :return: The dict of acquirer-specific processing values
+        :return: The dict of provider-specific processing values
         :rtype: dict
         """
         res = super()._get_specific_rendering_values(processing_values)
-        if self.provider != 'payulatam':
+        if self.provider_code != 'payulatam':
             return res
 
         api_url = 'https://checkout.payulatam.com/ppp-web-gateway-payu/' \
-            if self.acquirer_id.state == 'enabled' \
+            if self.provider_id.state == 'enabled' \
             else 'https://sandbox.checkout.payulatam.com/ppp-web-gateway-payu/'
         base_url = self.get_base_url()
         payulatam_values = {
-            'merchantId': self.acquirer_id.payulatam_merchant_id,
+            'merchantId': self.provider_id.payulatam_merchant_id,
             'referenceCode': self.reference,
             'description': self.reference,
             'amount': float_repr(processing_values['amount'], self.currency_id.decimal_places or 2),
             'tax': 0,
             'taxReturnBase': 0,
             'currency': self.currency_id.name,
-            'accountId': self.acquirer_id.payulatam_account_id,
+            'accountId': self.provider_id.payulatam_account_id,
             'buyerFullName': self.partner_name,
             'buyerEmail': self.partner_email,
             'responseUrl': urls.url_join(base_url, PayuLatamController._return_url),
             'confirmationUrl': urls.url_join(base_url, PayuLatamController._webhook_url),
             'api_url': api_url,
         }
-        if self.acquirer_id.state != 'enabled':
+        if self.provider_id.state != 'enabled':
             payulatam_values['test'] = 1
-        payulatam_values['signature'] = self.acquirer_id._payulatam_generate_sign(
+        payulatam_values['signature'] = self.provider_id._payulatam_generate_sign(
             payulatam_values, incoming=False
         )
         return payulatam_values
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of payment to find the transaction based on Payulatam data.
 
-        :param str provider: The provider of the acquirer that handled the transaction
+        :param str provider_code: The code of the provider that handled the transaction
         :param dict notification_data: The notification data sent by the provider
         :return: The transaction if found
         :rtype: recordset of `payment.transaction`
         :raise: ValidationError if the data match no transaction
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'payulatam' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'payulatam' or len(tx) == 1:
             return tx
 
         reference = notification_data.get('referenceCode')
-        tx = self.search([('reference', '=', reference), ('provider', '=', 'payulatam')])
+        tx = self.search([('reference', '=', reference), ('provider_code', '=', 'payulatam')])
         if not tx:
             raise ValidationError(
                 "PayU Latam: " + _("No transaction found matching reference %s.", reference)
@@ -117,10 +119,10 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'payulatam':
+        if self.provider_code != 'payulatam':
             return
 
-        self.acquirer_reference = notification_data.get('transactionId')
+        self.provider_reference = notification_data.get('transactionId')
 
         status = notification_data.get('lapTransactionState')
         state_message = notification_data.get('message')
