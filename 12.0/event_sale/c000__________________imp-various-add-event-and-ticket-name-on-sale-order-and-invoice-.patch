PR: https://github.com/odoo/odoo/pull/

From: fd3febf7d7899412d36d1e2263e7a466398cd336
From: SÃ©bastien Theys
Date: 2018-08-14 14:51:16

Structural Changes: 2
Total Changes: 67

[IMP] various: add event and ticket name on sale order and invoice line

In event_sale it is possible to have one product representing several tickets. But before this commit, on the sale order and invoice the client only saw the name of the product and didn't know which event/ticket they subscribed to.

The goal of this commit is to overwrite that behavior whenever a sale order or invoice line is related to an event ticket, to show the ticket name and event name instead of the product name.

Technically, the following changes have been done:

----------------------------------------

* various: add a method to compute a default name for a SaleOrderLine, based on its product

I added the method because the code to compute the name was duplicated in several places. This will make it more consistent.

Moreover this gives the option for modules to override the method to define a custom name as necessary.

----------------------------------------

* event_sale: compute a consistent description for a SaleOrderLine based on an EventTicket

The description will be the same whether the sale order comes from the front end or the back end. It takes into account the customer language.

The default description will be computed as follow:

1. The ticket name should be the first line of the product description on the SO.
2. The event name should be the second line of the product description on the SO.

To compute the ticket multi-line description we decided to ignore entirely the product name and the product description_sale because they are considered to be replaced by the ticket name and event name.

We also ignore them because the work-flow of creating a new event does not lead to filling them correctly, as the product is created through the event interface.

----------------------------------------

* event_sale: improve sale order line and event registration views

It was possible to select a ticket related to a product before an event was selected.
This is typically the case for tickets defined in an event_type but not in an event.

The ticket field is now hidden until both the product and the event have been selected.
This way we are sure the selected ticket will belong to an event and not an event_type.

We reset the ticket on event change because we don't want the user to be able to select a ticket belonging to the wrong event.

We also improve here the comments of the related on-change methods.

----------------------------------------

* website_event_sale: update views to show ticket name and event name

The standard behavior was to show the product name in several places instead of the sale order line description.

However, for event tickets, we don't want to show the product name, but the ticket name and event name instead.

----------------------------------------

* website_event_sale: add ticket on confirmation page

The ticket name was missing from the registration confirmation page (shown when the ticket is free and/or the user paid with a direct method). This is now fixed.

----------------------------------------

Task: 1837987
PR: 25819

================================= pseudo patch: =================================

--- a/addons/event_sale/models/event.py
+++ b/addons/event_sale/models/event.py
@@ -160,17 +160,43 @@ class EventTicket(models.Model):
     def _onchange_product_id(self):
         self.price = self.product_id.list_price or 0
 
+    def get_ticket_multiline_description_sale(self):
+        """ Compute a multiline description of this ticket, in the context of sales.
+            It will often be used as the default description of a sales order line referencing this ticket.
+
+        1. the first line is the ticket name
+        2. the second line is the event name (if it exists, which should be the case with a normal workflow) or the product name (if it exists)
+
+        We decided to ignore entirely the product name and the product description_sale because they are considered to be replaced by the ticket name and event name.
+            -> the workflow of creating a new event also does not lead to filling them correctly, as the product is created through the event interface
+        """
+
+        name = self.display_name
+
+        if self.event_id:
+            name += '\n' + self.event_id.display_name
+        elif self.product_id:
+            name += '\n' + self.product_id.display_name
+
+        return name
+
 
 class EventRegistration(models.Model):
     _inherit = 'event.registration'
 
-    event_ticket_id = fields.Many2one('event.event.ticket', string='Event Ticket')
+    event_ticket_id = fields.Many2one('event.event.ticket', string='Event Ticket', readonly=True, states={'draft': [('readonly', False)]})
     # in addition to origin generic fields, add real relational fields to correctly
     # handle attendees linked to sales orders and their lines
     # TDE FIXME: maybe add an onchange on sale_order_id + origin
     sale_order_id = fields.Many2one('sale.order', string='Source Sales Order', ondelete='cascade')
     sale_order_line_id = fields.Many2one('sale.order.line', string='Sales Order Line', ondelete='cascade')
 
+    @api.onchange('event_id')
+    def _onchange_event_id(self):
+        # We reset the ticket when keeping it would lead to an inconstitent state.
+        if self.event_ticket_id and (not self.event_id or self.event_id != self.event_ticket_id.event_id):
+            self.event_ticket_id = None
+
     @api.multi
     @api.constrains('event_ticket_id', 'state')
     def _check_ticket_seats_limit(self):

--- a/addons/event_sale/models/sale_order.py
+++ b/addons/event_sale/models/sale_order.py
@@ -27,14 +27,6 @@ class SaleOrderLine(models.Model):
         "an event ticket and it will automatically create a registration for this event ticket.")
     event_ok = fields.Boolean(related='product_id.event_ok', readonly=True)
 
-    @api.multi
-    def _prepare_invoice_line(self, qty):
-        self.ensure_one()
-        res = super(SaleOrderLine, self)._prepare_invoice_line(qty)
-        if self.event_id:
-            res['name'] = '%s: %s' % (res.get('name', ''), self.event_id.name)
-        return res
-
     @api.multi
     def _update_registrations(self, confirm=True, cancel_to_draft=False, registration_data=None):
         """ Create or update registrations linked to a sales order line. A sale
@@ -60,9 +52,40 @@ class SaleOrderLine(models.Model):
                     Registration._prepare_attendee_values(registration))
         return True
 
+    @api.onchange('product_id')
+    def _onchange_product_id(self):
+        # We reset the event when keeping it would lead to an inconstitent state.
+        # We need to do it this way because the only relation between the product and the event is through the corresponding tickets.
+        if self.event_id and (not self.product_id or self.product_id.id not in self.event_id.mapped('event_ticket_ids.product_id.id')):
+            self.event_id = None
+
+    @api.onchange('event_id')
+    def _onchange_event_id(self):
+        # We reset the ticket when keeping it would lead to an inconstitent state.
+        if self.event_ticket_id and (not self.event_id or self.event_id != self.event_ticket_id.event_id):
+            self.event_ticket_id = None
+
     @api.onchange('event_ticket_id')
     def _onchange_event_ticket_id(self):
         company = self.event_id.company_id or self.env.user.company_id
         currency = company.currency_id
         self.price_unit = currency._convert(
             self.event_ticket_id.price, self.order_id.currency_id, self.order_id.company_id, self.order_id.date_order or fields.Date.today())
+
+        # we call this to force update the default name
+        self.product_id_change()
+
+    def get_sale_order_line_multiline_description_sale(self, product):
+        """ We override this method because we decided that:
+                The default description of a sales order line containing a ticket must be different than the default description when no ticket is present.
+                So in that case we use the description computed from the ticket, instead of the description computed from the product.
+                We need this override to be defined here in sales order line (and not in product) because here is the only place where the event_ticket_id is referenced.
+        """
+        if self.event_ticket_id:
+            ticket = self.event_ticket_id.with_context(
+                lang=self.order_id.partner_id.lang,
+            )
+
+            return ticket.get_ticket_multiline_description_sale()
+        else:
+            return super(SaleOrderLine, self).get_sale_order_line_multiline_description_sale(product)
