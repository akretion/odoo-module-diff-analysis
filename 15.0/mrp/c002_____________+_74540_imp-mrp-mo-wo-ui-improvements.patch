PR: https://github.com/odoo/odoo/pull/74540

From: 281e1a57b3924ebae530260b7cfeff46ff227fed
From: brsy-odoo
Date: 2021-08-25 07:50:36

Structural Changes: 6
Total Changes: 46

[IMP] mrp: MO/WO UI Improvements

Improve the UI for the MO and the WO with some new features, better readability and usability

- The forecast for the MO in draft makes the preparation of a MO easier. The behavior of `forecast_availability` depend of the state of the move
- The sum of expected duration and real duration in the MO, make the MO visually clearer
- The field Scheduled Date is rounding up to the next hour for less manipulation
- The automatic reference in a BOM if there is already a BOM for this product allows making less manipulation. I'm using this variable `number_of_bom_of_this_product` with the result of the query inside so I didn't need to do the query twice and the query doesn't take the current bom.
- A rounded value is better for the OEE in WO summary
- Have a tag for a workcenter can be a good idea to add more information to it. I'm using a random value for the color of the tag, we are doing it frequently to have a random color on multiple think.
- Knowing the final product of a WO is clearer
- To notify the user when creating a product with a reference that are already existing is a good idea.
- Change some color in the MO view for better readability
- And more minor tweak (like to align some part in the view)

--- Links ---
The PR: https://github.com/odoo/odoo/pull/74540
The PR on enterprise: https://github.com/odoo/enterprise/pull/20006
Task related: 2442895

closes odoo/odoo#74540

Related: odoo/enterprise#20006
Signed-off-by: RÃ©my Voet <ryv-odoo@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_bom.py
+++ b/addons/mrp/models/mrp_bom.py
@@ -141,6 +141,15 @@ class MrpBom(models.Model):
             self.operation_ids.bom_product_template_attribute_value_ids = False
             self.byproduct_ids.bom_product_template_attribute_value_ids = False
 
+            domain = [('product_tmpl_id', '=', self.product_tmpl_id.id)]
+            if self.id.origin:
+                domain.append(('id', '!=', self.id.origin))
+            number_of_bom_of_this_product = self.env['mrp.bom'].search_count(domain)
+            if number_of_bom_of_this_product:  # add a reference to the bom if there is already a bom for this product
+                self.code = _("%s (new) %s", self.product_tmpl_id.name, number_of_bom_of_this_product)
+            else:
+                self.code = False
+
     def copy(self, default=None):
         res = super().copy(default)
         for bom_line in res.bom_line_ids:
@@ -446,6 +455,7 @@ class MrpByProduct(models.Model):
     _description = 'Byproduct'
     _rec_name = "product_id"
     _check_company_auto = True
+    _order = 'sequence, id'
 
     product_id = fields.Many2one('product.product', 'By-product', required=True, check_company=True)
     company_id = fields.Many2one(related='bom_id.company_id', store=True, index=True, readonly=True)
@@ -465,6 +475,7 @@ class MrpByProduct(models.Model):
         'product.template.attribute.value', string="Apply on Variants", ondelete='restrict',
         domain="[('id', 'in', possible_bom_product_template_attribute_value_ids)]",
         help="BOM Product Variants needed to apply this line.")
+    sequence = fields.Integer("Sequence")
 
     @api.onchange('product_id')
     def _onchange_product_id(self):

--- a/addons/mrp/models/mrp_production.py
+++ b/addons/mrp/models/mrp_production.py
@@ -65,7 +65,7 @@ class MrpProduction(models.Model):
     def _get_default_date_planned_start(self):
         if self.env.context.get('default_date_deadline'):
             return fields.Datetime.to_datetime(self.env.context.get('default_date_deadline'))
-        return datetime.datetime.now()
+        return fields.Datetime.now().replace(minute=0, second=0, microsecond=0) + datetime.timedelta(hours=1)
 
     @api.model
     def _get_default_is_locked(self):
@@ -143,6 +143,10 @@ class MrpProduction(models.Model):
         help="Informative date allowing to define when the manufacturing order should be processed at the latest to fulfill delivery on time.")
     date_start = fields.Datetime('Start Date', copy=False, readonly=True, help="Date of the WO")
     date_finished = fields.Datetime('End Date', copy=False, readonly=True, help="Date when the MO has been close")
+
+    production_duration_expected = fields.Float("Expected Duration", help="Total expected duration (in minutes)", compute='_compute_production_duration_expected')
+    production_real_duration = fields.Float("Real Duration", help="Total real duration (in minutes)", compute='_compute_production_real_duration')
+
     bom_id = fields.Many2one(
         'mrp.bom', 'Bill of Material',
         readonly=True, states={'draft': [('readonly', False)]},
@@ -308,6 +312,16 @@ class MrpProduction(models.Model):
         for production in self:
             production.move_finished_ids.date_deadline = production.date_deadline
 
+    @api.depends('workorder_ids.duration_expected')
+    def _compute_production_duration_expected(self):
+        for production in self:
+            production.production_duration_expected = sum(production.workorder_ids.mapped('duration_expected'))
+
+    @api.depends('workorder_ids.duration')
+    def _compute_production_real_duration(self):
+        for production in self:
+            production.production_real_duration = sum(production.workorder_ids.mapped('duration'))
+
     @api.depends("workorder_ids.date_planned_start", "workorder_ids.date_planned_finished")
     def _compute_is_planned(self):
         for production in self:

--- a/addons/mrp/models/mrp_workcenter.py
+++ b/addons/mrp/models/mrp_workcenter.py
@@ -6,6 +6,7 @@ from datetime import timedelta
 from functools import partial
 import datetime
 from pytz import timezone
+from random import randint
 
 from odoo import api, exceptions, fields, models, _
 from odoo.exceptions import ValidationError
@@ -71,6 +72,7 @@ class MrpWorkcenter(models.Model):
         string="Alternative Workcenters", check_company=True,
         help="Alternative workcenters that can be substituted to this one in order to dispatch production"
     )
+    tag_ids = fields.Many2many('mrp.workcenter.tag')
 
     @api.constrains('alternative_workcenter_ids')
     def _check_alternative_workcenter(self):
@@ -264,6 +266,23 @@ class MrpWorkcenter(models.Model):
         return False, 'Not available slot 700 days after the planned start'
 
 
+class WorkcenterTag(models.Model):
+    _name = 'mrp.workcenter.tag'
+    _description = 'Add tag for the workcenter'
+    _order = 'name'
+
+    def _get_default_color(self):
+        return randint(1, 11)
+
+    name = fields.Char("Tag Name", required=True)
+    color = fields.Integer("Color Index", default=_get_default_color)
+
+    _sql_constraints = [
+        ('tag_name_unique', 'unique(name)',
+         'The tag name must be unique.'),
+    ]
+
+
 class MrpWorkcenterProductivityLossType(models.Model):
     _name = "mrp.workcenter.productivity.loss.type"
     _description = 'MRP Workorder productivity losses'
