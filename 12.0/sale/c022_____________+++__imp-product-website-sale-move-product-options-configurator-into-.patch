PR: https://github.com/odoo/odoo/pull/

From: 856c2e9008f1af7bc1327d9c2900db1e109ab0fa
From: AurÃ©lien Warnon
Date: 2018-09-25 16:39:32

Structural Changes: 9
Total Changes: 49

[IMP] product,(website_)sale: Move product options configurator into sale module

Task #1871557

Purpose
=======

- Configure a product from a sales order as easily as in the ecommerce
  The backend uses the same template as the frontend to configure a products and its options

- Display optionnal products of optionnal products in the "sale options" section

- Allow adding exlusions to some combinations of the product and/or
  to some combinations of the optionnal and accessory products

Specification
=============

PHASE I

1. Improve the "Add to cart" with optional products

- When you add an option to cart, move the product to the cart & show the options of this option
- Don't open the option wizard if no option available (in case this module becomes generic,
  it's better to skip this step when it's not needed)
- Display the options right under their related product in the cart

2. Do not allow to add the product as an optional product for itself
Why ?
- No functional sense
- Creates issues in the add to cart wizard

3. Exclude some attribute combinations within the product or with related options and accessory products

- Rename VARIANT PRICES button -> CONFIGURE VARIANTS
- When you click this button and select a value, open form view rather than inline edition
- Form view of variant values:
	- Attribute
	- Value
	- HTML Color Index
	- Attribute Price Extra
	- Not Compatible with: o2m tab with 2 fields: Product AND Attribute Value (of this product)
	  [m2m tag selection]
	- in any new line, autocomplete the current product by default
	- Tooltip: A list of product and attribute values that you want to exclude for
          this product's attribue value. Also applies on optionnal and accessory products.

4. New option to configure a product in a sales order line

- This option is only visible if the corresponding option is activated in the sales settings
- It opens a wizard to select a product template, configure related attribute values
  and select optional products (based on frontend view)
- Attributes not compatible with other selected attributes should not be selectable
- Must work like in the frontend

================================= pseudo patch: =================================

--- a/addons/sale/models/product_product.py
+++ b/addons/sale/models/product_product.py
@@ -6,6 +6,16 @@ from odoo import api, fields, models
 from odoo.tools.float_utils import float_round
 
 
+class ProductTemplate(models.Model):
+    _inherit = "product.template"
+
+    optional_product_ids = fields.Many2many(
+        'product.template', 'product_optional_rel', 'src_id', 'dest_id',
+        string='Optional Products', help="Optional Products are suggested "
+        "whenever the customer hits *Add to Cart* (cross-sell strategy, "
+        "e.g. for computers: warranty, software, etc.).")
+
+
 class ProductProduct(models.Model):
     _inherit = 'product.product'
 
@@ -42,3 +52,29 @@ class ProductProduct(models.Model):
 
     def _get_invoice_policy(self):
         return self.invoice_policy
+
+
+class ProductAttribute(models.Model):
+    _inherit = "product.attribute"
+
+    # YTI FIX ME: PLEASE RENAME ME INTO attribute_type
+    type = fields.Selection([
+        ('radio', 'Radio'),
+        ('select', 'Select'),
+        ('color', 'Color')], default='radio')
+
+
+class ProductAttributeValue(models.Model):
+    _inherit = "product.attribute.value"
+
+    html_color = fields.Char(
+        string='HTML Color Index', oldname='color',
+        help="""Here you can set a
+        specific HTML color index (e.g. #ff0000) to display the color if the
+        attibute type is 'Color'.""")
+
+
+class ProductProductAttributeValue(models.Model):
+    _inherit = "product.product.attribute.value"
+
+    html_color = fields.Char('HTML Color Index', related="product_attribute_value_id.html_color")
\ No newline at end of file

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -159,6 +159,7 @@ class SaleOrder(models.Model):
     partner_shipping_id = fields.Many2one('res.partner', string='Delivery Address', readonly=True, required=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)], 'sale': [('readonly', False)]}, help="Delivery address for current sales order.")
 
     pricelist_id = fields.Many2one('product.pricelist', string='Pricelist', required=True, readonly=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, help="Pricelist for current sales order.")
+    pricelist_id_id = fields.Integer(string="Pricelist ID", related='pricelist_id.id', readonly=True)
     currency_id = fields.Many2one("res.currency", related='pricelist_id.currency_id', string="Currency", readonly=True, required=True)
     analytic_account_id = fields.Many2one('account.analytic.account', 'Analytic Account', readonly=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, help="The analytic account related to a sales order.", copy=False, oldname='project_id')
 
@@ -928,6 +929,16 @@ class SaleOrderLine(models.Model):
             else:
                 line.invoice_status = 'no'
 
+    @api.model
+    def default_get(self, fields):
+        res = super(SaleOrderLine, self).default_get(fields)
+        if self._context.get('product_id'):
+            res['product_id'] = int(self._context.get('product_id'))
+        if self._context.get('quantity'):
+            res['product_uom_qty'] = float(self._context.get('quantity'))
+
+        return res
+
     @api.depends('product_uom_qty', 'discount', 'price_unit', 'tax_id')
     def _compute_amount(self):
         """
@@ -1384,7 +1395,7 @@ class SaleOrderLine(models.Model):
         domain = {'product_uom': [('category_id', '=', self.product_id.uom_id.category_id.id)]}
         if not self.product_uom or (self.product_id.uom_id.id != self.product_uom.id):
             vals['product_uom'] = self.product_id.uom_id
-            vals['product_uom_qty'] = 1.0
+            vals['product_uom_qty'] = self.product_uom_qty or 1.0
 
         product = self.product_id.with_context(
             lang=self.order_id.partner_id.lang,
