PR: https://github.com/odoo/odoo/pull/

From: 9381334f6ea94f9439d2492c95a034c996bc5547
From: Thibault Delavall√©e
Date: 2017-08-08 13:36:25

Structural Changes: 3
Total Changes: 60

[MOV] sale_*: move sale customer portal to sale

Customer portal is now a feature coming directly with sale module. As
it uses a simple website renderer customization and advanced website
features are not available and depends on having website module
installed.

================================= pseudo patch: =================================

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -5,9 +5,10 @@ import uuid
 
 from itertools import groupby
 from datetime import datetime, timedelta
+from werkzeug.urls import url_encode
 
 from odoo import api, fields, models, _
-from odoo.exceptions import UserError
+from odoo.exceptions import UserError, AccessError
 from odoo.tools import float_is_zero, float_compare, DEFAULT_SERVER_DATETIME_FORMAT, pycompat
 from odoo.tools.misc import formatLang
 
@@ -118,6 +119,9 @@ class SaleOrder(models.Model):
     access_token = fields.Char(
         'Security Token', copy=False,
         default=_get_default_access_token)
+    website_url = fields.Char(
+        'Website URL', compute='_website_url',
+        help='The full URL to access the document using the customer portal.')
 
     state = fields.Selection([
         ('draft', 'Quotation'),
@@ -166,6 +170,10 @@ class SaleOrder(models.Model):
 
     product_id = fields.Many2one('product.product', related='order_line.product_id', string='Product')
 
+    def _website_url(self):
+        for so in self:
+            so.website_url = '/my/orders/%s' % (so.id)
+
     @api.model
     def _get_customer_lead(self, product_tmpl_id):
         return False
@@ -560,6 +568,54 @@ class SaleOrder(models.Model):
         res = [(l[0].name, l[1]) for l in res]
         return res
 
+    @api.multi
+    def get_access_action(self, access_uid=None):
+        """ Instead of the classic form view, redirect to the online order for
+        portal users or if force_website=True in the context. """
+        # TDE note: read access on sales order to portal users granted to followed sales orders
+        self.ensure_one()
+        if self.state == 'cancel' or (self.state == 'draft' and not self.env.context.get('mark_so_as_sent')):
+            return super(SaleOrder, self).get_access_action(access_uid)
+
+        user = self.env['res.users'].sudo().browse(access_uid) if access_uid else self.env.user
+        if user.share or self.env.context.get('force_website'):
+            return {
+                'type': 'ir.actions.act_url',
+                'url': '/my/orders/%s?access_token=%s' % (self.id, self.access_token),
+                'target': 'self',
+                'res_id': self.id,
+            }
+        return super(SaleOrder, self).get_access_action(access_uid)
+
+    def get_mail_url(self):
+        self.ensure_one()
+        params = {
+            'model': self._name,
+            'res_id': self.id,
+            'access_token': self.access_token,
+        }
+        params.update(self.partner_id.signup_get_auth_param()[self.partner_id.id])
+        return '/mail/view?' + url_encode(params)
+
+    @api.multi
+    def _notification_recipients(self, message, groups):
+        groups = super(SaleOrder, self)._notification_recipients(message, groups)
+
+        self.ensure_one()
+        if self.state not in ('draft', 'cancel'):
+            for group_name, group_method, group_data in groups:
+                group_data['has_button_access'] = True
+
+        return groups
+
+    @api.multi
+    def get_signup_url(self):
+        self.ensure_one()
+        return self.partner_id.with_context(signup_valid=True)._get_signup_url_for_action(
+            action='/mail/view',
+            model=self._name,
+            res_id=self.id)[self.partner_id.id]
+
 
 class SaleOrderLine(models.Model):
     _name = 'sale.order.line'
@@ -804,6 +860,8 @@ class SaleOrderLine(models.Model):
     product_id = fields.Many2one('product.product', string='Product', domain=[('sale_ok', '=', True)], change_default=True, ondelete='restrict', required=True)
     product_uom_qty = fields.Float(string='Quantity', digits=dp.get_precision('Product Unit of Measure'), required=True, default=1.0)
     product_uom = fields.Many2one('product.uom', string='Unit of Measure', required=True)
+    # Non-stored related field to allow portal user to see the image of the product he has ordered
+    product_image = fields.Binary('Product Image', related="product_id.image", store=False)
 
     qty_delivered_updateable = fields.Boolean(compute='_compute_qty_delivered_updateable', string='Can Edit Delivered', readonly=True, default=True)
     qty_delivered = fields.Float(string='Delivered', copy=False, digits=dp.get_precision('Product Unit of Measure'), default=0.0)
