PR: https://github.com/odoo/odoo/pull/

From: 9395b792967eb1f3ddf09bb777139974211802d1
From: Denis Vermylen (dve)
Date: 2016-07-06 14:32:11

Breaking data model changes score: 4, change matches:
-    _inherit = "account.analytic.line"
-    _inherit = "hr.attendance"
-    _inherit = 'res.company'
-    _inherit = 'hr.employee'

Total Changes: 541

[MOV] hr_timesheet_sheet: split hr_timesheet_sheet.py into multiple model files

================================= pseudo patch: =================================

--- a/addons/hr_timesheet_sheet/models/__init__.py
+++ b/addons/hr_timesheet_sheet/models/__init__.py
@@ -1,5 +1,9 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-import hr_timesheet_sheet
+import account_analytic_line
+import hr_attendance
 import hr_department
+import hr_employee
+import hr_timesheet_sheet
+import res_company

--- a/None
+++ b/addons/hr_timesheet_sheet/models/account_analytic_line.py
@@ -0,0 +1,84 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from openerp.osv import fields, osv
+ from openerp.tools.translate import _
+ from openerp.exceptions import UserError
+
+
+class account_analytic_line(osv.osv):
+    _inherit = "account.analytic.line"
+
+    def _get_default_date(self, cr, uid, context=None):
+        if context is None:
+            context = {}
+        # get the default date (should be: today)
+        res = super(account_analytic_line, self)._get_default_date(cr, uid, context=context)
+        # if we got the dates from and to from the timesheet and if the default date is in between, we use the default
+        # but if the default isn't included in those dates, we use the date start of the timesheet as default
+        if context.get('timesheet_date_from') and context.get('timesheet_date_to'):
+            if context['timesheet_date_from'] <= res <= context['timesheet_date_to']:
+                return res
+            return context.get('timesheet_date_from')
+        # if we don't get the dates from the timesheet, we return the default value from super()
+        return res
+
+    def _sheet(self, cursor, user, ids, name, args, context=None):
+        sheet_obj = self.pool.get('hr_timesheet_sheet.sheet')
+        res = {}.fromkeys(ids, False)
+        for ts_line in self.browse(cursor, user, ids, context=context):
+            if not ts_line.project_id:
+                continue
+            sheet_ids = sheet_obj.search(cursor, user,
+                [('date_to', '>=', ts_line.date), ('date_from', '<=', ts_line.date),
+                 ('employee_id.user_id', '=', ts_line.user_id.id),
+                 ('state', 'in', ['draft', 'new'])],
+                context=context)
+            if sheet_ids:
+            # [0] because only one sheet possible for an employee between 2 dates
+                res[ts_line.id] = sheet_obj.name_get(cursor, user, sheet_ids, context=context)[0]
+        return res
+
+    def _get_hr_timesheet_sheet(self, cr, uid, ids, context=None):
+        ts_line_ids = []
+        for ts in self.browse(cr, uid, ids, context=context):
+            cr.execute("""
+                    SELECT l.id
+                        FROM account_analytic_line l
+                    WHERE %(date_to)s >= l.date
+                        AND %(date_from)s <= l.date
+                        AND %(user_id)s = l.user_id
+                        AND l.project_id IS NOT NULL
+                    GROUP BY l.id""", {'date_from': ts.date_from,
+                                        'date_to': ts.date_to,
+                                        'user_id': ts.employee_id.user_id.id,})
+            ts_line_ids.extend([row[0] for row in cr.fetchall()])
+        return ts_line_ids
+
+    _columns = {
+        'sheet_id': fields.function(_sheet, string='Sheet', select="1",
+            type='many2one', relation='hr_timesheet_sheet.sheet', ondelete="cascade",
+            store={
+                    'hr_timesheet_sheet.sheet': (_get_hr_timesheet_sheet, ['employee_id', 'date_from', 'date_to'], 10),
+                    'account.analytic.line': (lambda self,cr,uid,ids,context=None: ids, ['user_id', 'date'], 10),
+                  },
+            ),
+    }
+
+    def write(self, cr, uid, ids, values, context=None):
+        if isinstance(ids, (int, long)):
+            ids = [ids]
+        self._check(cr, uid, ids)
+        return super(account_analytic_line, self).write(cr, uid, ids, values,context=context)
+
+    def unlink(self, cr, uid, ids, *args, **kwargs):
+        if isinstance(ids, (int, long)):
+            ids = [ids]
+        self._check(cr, uid, ids)
+        return super(account_analytic_line,self).unlink(cr, uid, ids,*args, **kwargs)
+
+    def _check(self, cr, uid, ids):
+        for att in self.browse(cr, uid, ids):
+            if att.sheet_id and att.sheet_id.state not in ('draft', 'new'):
+                raise UserError(_('You cannot modify an entry in a confirmed timesheet.'))
+        return True

--- a/None
+++ b/addons/hr_timesheet_sheet/models/hr_attendance.py
@@ -0,0 +1,153 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import time
+from datetime import datetime
+from pytz import timezone
+import pytz
+
+from openerp.osv import fields, osv
+from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT
+from openerp.tools.translate import _
+from openerp.exceptions import UserError
+
+
+class hr_attendance(osv.osv):
+    _inherit = "hr.attendance"
+
+    def _get_default_date(self, cr, uid, context=None):
+        if context is None:
+            context = {}
+        if 'name' in context:
+            return context['name'] + time.strftime(' %H:%M:%S')
+        return time.strftime('%Y-%m-%d %H:%M:%S')
+
+    def _get_hr_timesheet_sheet(self, cr, uid, ids, context=None):
+        attendance_ids = []
+        for ts in self.browse(cr, uid, ids, context=context):
+            cr.execute("""
+                        SELECT a.id
+                          FROM hr_attendance a
+                         INNER JOIN hr_employee e
+                               INNER JOIN resource_resource r
+                                       ON (e.resource_id = r.id)
+                            ON (a.employee_id = e.id)
+                         LEFT JOIN res_users u
+                         ON r.user_id = u.id
+                         LEFT JOIN res_partner p
+                         ON u.partner_id = p.id
+                         WHERE %(date_to)s >= date_trunc('day', a.name AT TIME ZONE 'UTC' AT TIME ZONE coalesce(p.tz, 'UTC'))
+                              AND %(date_from)s <= date_trunc('day', a.name AT TIME ZONE 'UTC' AT TIME ZONE coalesce(p.tz, 'UTC'))
+                              AND %(user_id)s = r.user_id
+                         GROUP BY a.id""", {'date_from': ts.date_from,
+                                            'date_to': ts.date_to,
+                                            'user_id': ts.employee_id.user_id.id,})
+            attendance_ids.extend([row[0] for row in cr.fetchall()])
+        return attendance_ids
+
+    def _get_attendance_employee_tz(self, cr, uid, employee_id, date, context=None):
+        """ Simulate timesheet in employee timezone
+
+        Return the attendance date in string format in the employee
+        tz converted from utc timezone as we consider date of employee
+        timesheet is in employee timezone
+        """
+        employee_obj = self.pool['hr.employee']
+
+        tz = False
+        if employee_id:
+            employee = employee_obj.browse(cr, uid, employee_id, context=context)
+            tz = employee.user_id.partner_id.tz
+
+        if not date:
+            date = time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)
+
+        att_tz = timezone(tz or 'utc')
+
+        attendance_dt = datetime.strptime(date, DEFAULT_SERVER_DATETIME_FORMAT)
+        att_tz_dt = pytz.utc.localize(attendance_dt)
+        att_tz_dt = att_tz_dt.astimezone(att_tz)
+        # We take only the date omiting the hours as we compare with timesheet
+        # date_from which is a date format thus using hours would lead to
+        # be out of scope of timesheet
+        att_tz_date_str = datetime.strftime(att_tz_dt, DEFAULT_SERVER_DATE_FORMAT)
+        return att_tz_date_str
+
+    def _get_current_sheet(self, cr, uid, employee_id, date=False, context=None):
+
+        sheet_obj = self.pool['hr_timesheet_sheet.sheet']
+        if not date:
+            date = time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)
+
+        att_tz_date_str = self._get_attendance_employee_tz(
+                cr, uid, employee_id,
+                date=date, context=context)
+        sheet_ids = sheet_obj.search(cr, uid,
+            [('date_from', '<=', att_tz_date_str),
+             ('date_to', '>=', att_tz_date_str),
+             ('employee_id', '=', employee_id)],
+            limit=1, context=context)
+        return sheet_ids and sheet_ids[0] or False
+
+    def _sheet(self, cursor, user, ids, name, args, context=None):
+        res = {}.fromkeys(ids, False)
+        for attendance in self.browse(cursor, user, ids, context=context):
+            res[attendance.id] = self._get_current_sheet(
+                    cursor, user, attendance.employee_id.id, attendance.name,
+                    context=context)
+        return res
+
+    _columns = {
+        'sheet_id': fields.function(_sheet, string='Sheet',
+            type='many2one', relation='hr_timesheet_sheet.sheet',
+            store={
+                      'hr_timesheet_sheet.sheet': (_get_hr_timesheet_sheet, ['employee_id', 'date_from', 'date_to'], 10),
+                      'hr.attendance': (lambda self,cr,uid,ids,context=None: ids, ['employee_id', 'name', 'day'], 10),
+                  },
+            )
+    }
+    _defaults = {
+        'name': _get_default_date,
+    }
+
+    def create(self, cr, uid, vals, context=None):
+        if context is None:
+            context = {}
+
+        sheet_id = context.get('sheet_id') or self._get_current_sheet(cr, uid, vals.get('employee_id'), vals.get('name'), context=context)
+        if sheet_id:
+            att_tz_date_str = self._get_attendance_employee_tz(
+                    cr, uid, vals.get('employee_id'),
+                   date=vals.get('name'), context=context)
+            ts = self.pool.get('hr_timesheet_sheet.sheet').browse(cr, uid, sheet_id, context=context)
+            if ts.state not in ('draft', 'new'):
+                raise UserError(_('You can not enter an attendance in a submitted timesheet. Ask your manager to reset it before adding attendance.'))
+            elif ts.date_from > att_tz_date_str or ts.date_to < att_tz_date_str:
+                raise UserError(_('You can not enter an attendance date outside the current timesheet dates.'))
+        return super(hr_attendance,self).create(cr, uid, vals, context=context)
+
+    def unlink(self, cr, uid, ids, *args, **kwargs):
+        if isinstance(ids, (int, long)):
+            ids = [ids]
+        self._check(cr, uid, ids)
+        return super(hr_attendance,self).unlink(cr, uid, ids,*args, **kwargs)
+
+    def write(self, cr, uid, ids, vals, context=None):
+        if context is None:
+            context = {}
+        if isinstance(ids, (int, long)):
+            ids = [ids]
+        self._check(cr, uid, ids)
+        res = super(hr_attendance,self).write(cr, uid, ids, vals, context=context)
+        if 'sheet_id' in context:
+            for attendance in self.browse(cr, uid, ids, context=context):
+                if context['sheet_id'] != attendance.sheet_id.id:
+                    raise UserError(_('You cannot enter an attendance ' \
+                            'date outside the current timesheet dates.'))
+        return res
+
+    def _check(self, cr, uid, ids):
+        for att in self.browse(cr, uid, ids):
+            if att.sheet_id and att.sheet_id.state not in ('draft', 'new'):
+                raise UserError(_('You cannot modify an entry in a confirmed timesheet'))
+        return True

--- a/None
+++ b/addons/hr_timesheet_sheet/models/hr_employee.py
@@ -0,0 +1,24 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from openerp.osv import fields, osv
+
+
+class hr_employee(osv.osv):
+    '''
+    Employee
+    '''
+
+    _inherit = 'hr.employee'
+    _description = 'Employee'
+
+    def _timesheet_count(self, cr, uid, ids, field_name, arg, context=None):
+        Sheet = self.pool['hr_timesheet_sheet.sheet']
+        return {
+            employee_id: Sheet.search_count(cr,uid, [('employee_id', '=', employee_id)], context=context)
+            for employee_id in ids
+        }
+
+    _columns = {
+        'timesheet_count': fields.function(_timesheet_count, type='integer', string='Timesheets'),
+    }

--- a/addons/hr_timesheet_sheet/models/hr_timesheet_sheet.py
+++ b/addons/hr_timesheet_sheet/models/hr_timesheet_sheet.py
@@ -276,225 +276,6 @@ class hr_timesheet_sheet(osv.osv):
         return dom
 
 
-class account_analytic_line(osv.osv):
-    _inherit = "account.analytic.line"
-
-    def _get_default_date(self, cr, uid, context=None):
-        if context is None:
-            context = {}
-        # get the default date (should be: today)
-        res = super(account_analytic_line, self)._get_default_date(cr, uid, context=context)
-        # if we got the dates from and to from the timesheet and if the default date is in between, we use the default
-        # but if the default isn't included in those dates, we use the date start of the timesheet as default
-        if context.get('timesheet_date_from') and context.get('timesheet_date_to'):
-            if context['timesheet_date_from'] <= res <= context['timesheet_date_to']:
-                return res
-            return context.get('timesheet_date_from')
-        # if we don't get the dates from the timesheet, we return the default value from super()
-        return res
-
-    def _sheet(self, cursor, user, ids, name, args, context=None):
-        sheet_obj = self.pool.get('hr_timesheet_sheet.sheet')
-        res = {}.fromkeys(ids, False)
-        for ts_line in self.browse(cursor, user, ids, context=context):
-            if not ts_line.project_id:
-                continue
-            sheet_ids = sheet_obj.search(cursor, user,
-                [('date_to', '>=', ts_line.date), ('date_from', '<=', ts_line.date),
-                 ('employee_id.user_id', '=', ts_line.user_id.id),
-                 ('state', 'in', ['draft', 'new'])],
-                context=context)
-            if sheet_ids:
-            # [0] because only one sheet possible for an employee between 2 dates
-                res[ts_line.id] = sheet_obj.name_get(cursor, user, sheet_ids, context=context)[0]
-        return res
-
-    def _get_hr_timesheet_sheet(self, cr, uid, ids, context=None):
-        ts_line_ids = []
-        for ts in self.browse(cr, uid, ids, context=context):
-            cr.execute("""
-                    SELECT l.id
-                        FROM account_analytic_line l
-                    WHERE %(date_to)s >= l.date
-                        AND %(date_from)s <= l.date
-                        AND %(user_id)s = l.user_id
-                        AND l.project_id IS NOT NULL
-                    GROUP BY l.id""", {'date_from': ts.date_from,
-                                        'date_to': ts.date_to,
-                                        'user_id': ts.employee_id.user_id.id,})
-            ts_line_ids.extend([row[0] for row in cr.fetchall()])
-        return ts_line_ids
-
-    _columns = {
-        'sheet_id': fields.function(_sheet, string='Sheet', select="1",
-            type='many2one', relation='hr_timesheet_sheet.sheet', ondelete="cascade",
-            store={
-                    'hr_timesheet_sheet.sheet': (_get_hr_timesheet_sheet, ['employee_id', 'date_from', 'date_to'], 10),
-                    'account.analytic.line': (lambda self,cr,uid,ids,context=None: ids, ['user_id', 'date'], 10),
-                  },
-            ),
-    }
-
-    def write(self, cr, uid, ids, values, context=None):
-        if isinstance(ids, (int, long)):
-            ids = [ids]
-        self._check(cr, uid, ids)
-        return super(account_analytic_line, self).write(cr, uid, ids, values,context=context)
-
-    def unlink(self, cr, uid, ids, *args, **kwargs):
-        if isinstance(ids, (int, long)):
-            ids = [ids]
-        self._check(cr, uid, ids)
-        return super(account_analytic_line,self).unlink(cr, uid, ids,*args, **kwargs)
-
-    def _check(self, cr, uid, ids):
-        for att in self.browse(cr, uid, ids):
-            if att.sheet_id and att.sheet_id.state not in ('draft', 'new'):
-                raise UserError(_('You cannot modify an entry in a confirmed timesheet.'))
-        return True
-
-
-class hr_attendance(osv.osv):
-    _inherit = "hr.attendance"
-
-    def _get_default_date(self, cr, uid, context=None):
-        if context is None:
-            context = {}
-        if 'name' in context:
-            return context['name'] + time.strftime(' %H:%M:%S')
-        return time.strftime('%Y-%m-%d %H:%M:%S')
-
-    def _get_hr_timesheet_sheet(self, cr, uid, ids, context=None):
-        attendance_ids = []
-        for ts in self.browse(cr, uid, ids, context=context):
-            cr.execute("""
-                        SELECT a.id
-                          FROM hr_attendance a
-                         INNER JOIN hr_employee e
-                               INNER JOIN resource_resource r
-                                       ON (e.resource_id = r.id)
-                            ON (a.employee_id = e.id)
-                         LEFT JOIN res_users u
-                         ON r.user_id = u.id
-                         LEFT JOIN res_partner p
-                         ON u.partner_id = p.id
-                         WHERE %(date_to)s >= date_trunc('day', a.name AT TIME ZONE 'UTC' AT TIME ZONE coalesce(p.tz, 'UTC'))
-                              AND %(date_from)s <= date_trunc('day', a.name AT TIME ZONE 'UTC' AT TIME ZONE coalesce(p.tz, 'UTC'))
-                              AND %(user_id)s = r.user_id
-                         GROUP BY a.id""", {'date_from': ts.date_from,
-                                            'date_to': ts.date_to,
-                                            'user_id': ts.employee_id.user_id.id,})
-            attendance_ids.extend([row[0] for row in cr.fetchall()])
-        return attendance_ids
-
-    def _get_attendance_employee_tz(self, cr, uid, employee_id, date, context=None):
-        """ Simulate timesheet in employee timezone
-
-        Return the attendance date in string format in the employee
-        tz converted from utc timezone as we consider date of employee
-        timesheet is in employee timezone
-        """
-        employee_obj = self.pool['hr.employee']
-
-        tz = False
-        if employee_id:
-            employee = employee_obj.browse(cr, uid, employee_id, context=context)
-            tz = employee.user_id.partner_id.tz
-
-        if not date:
-            date = time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)
-
-        att_tz = timezone(tz or 'utc')
-
-        attendance_dt = datetime.strptime(date, DEFAULT_SERVER_DATETIME_FORMAT)
-        att_tz_dt = pytz.utc.localize(attendance_dt)
-        att_tz_dt = att_tz_dt.astimezone(att_tz)
-        # We take only the date omiting the hours as we compare with timesheet
-        # date_from which is a date format thus using hours would lead to
-        # be out of scope of timesheet
-        att_tz_date_str = datetime.strftime(att_tz_dt, DEFAULT_SERVER_DATE_FORMAT)
-        return att_tz_date_str
-
-    def _get_current_sheet(self, cr, uid, employee_id, date=False, context=None):
-
-        sheet_obj = self.pool['hr_timesheet_sheet.sheet']
-        if not date:
-            date = time.strftime(DEFAULT_SERVER_DATETIME_FORMAT)
-
-        att_tz_date_str = self._get_attendance_employee_tz(
-                cr, uid, employee_id,
-                date=date, context=context)
-        sheet_ids = sheet_obj.search(cr, uid,
-            [('date_from', '<=', att_tz_date_str),
-             ('date_to', '>=', att_tz_date_str),
-             ('employee_id', '=', employee_id)],
-            limit=1, context=context)
-        return sheet_ids and sheet_ids[0] or False
-
-    def _sheet(self, cursor, user, ids, name, args, context=None):
-        res = {}.fromkeys(ids, False)
-        for attendance in self.browse(cursor, user, ids, context=context):
-            res[attendance.id] = self._get_current_sheet(
-                    cursor, user, attendance.employee_id.id, attendance.name,
-                    context=context)
-        return res
-
-    _columns = {
-        'sheet_id': fields.function(_sheet, string='Sheet',
-            type='many2one', relation='hr_timesheet_sheet.sheet',
-            store={
-                      'hr_timesheet_sheet.sheet': (_get_hr_timesheet_sheet, ['employee_id', 'date_from', 'date_to'], 10),
-                      'hr.attendance': (lambda self,cr,uid,ids,context=None: ids, ['employee_id', 'name', 'day'], 10),
-                  },
-            )
-    }
-    _defaults = {
-        'name': _get_default_date,
-    }
-
-    def create(self, cr, uid, vals, context=None):
-        if context is None:
-            context = {}
-
-        sheet_id = context.get('sheet_id') or self._get_current_sheet(cr, uid, vals.get('employee_id'), vals.get('name'), context=context)
-        if sheet_id:
-            att_tz_date_str = self._get_attendance_employee_tz(
-                    cr, uid, vals.get('employee_id'),
-                   date=vals.get('name'), context=context)
-            ts = self.pool.get('hr_timesheet_sheet.sheet').browse(cr, uid, sheet_id, context=context)
-            if ts.state not in ('draft', 'new'):
-                raise UserError(_('You can not enter an attendance in a submitted timesheet. Ask your manager to reset it before adding attendance.'))
-            elif ts.date_from > att_tz_date_str or ts.date_to < att_tz_date_str:
-                raise UserError(_('You can not enter an attendance date outside the current timesheet dates.'))
-        return super(hr_attendance,self).create(cr, uid, vals, context=context)
-
-    def unlink(self, cr, uid, ids, *args, **kwargs):
-        if isinstance(ids, (int, long)):
-            ids = [ids]
-        self._check(cr, uid, ids)
-        return super(hr_attendance,self).unlink(cr, uid, ids,*args, **kwargs)
-
-    def write(self, cr, uid, ids, vals, context=None):
-        if context is None:
-            context = {}
-        if isinstance(ids, (int, long)):
-            ids = [ids]
-        self._check(cr, uid, ids)
-        res = super(hr_attendance,self).write(cr, uid, ids, vals, context=context)
-        if 'sheet_id' in context:
-            for attendance in self.browse(cr, uid, ids, context=context):
-                if context['sheet_id'] != attendance.sheet_id.id:
-                    raise UserError(_('You cannot enter an attendance ' \
-                            'date outside the current timesheet dates.'))
-        return res
-
-    def _check(self, cr, uid, ids):
-        for att in self.browse(cr, uid, ids):
-            if att.sheet_id and att.sheet_id.state not in ('draft', 'new'):
-                raise UserError(_('You cannot modify an entry in a confirmed timesheet'))
-        return True
-
-
 class hr_timesheet_sheet_sheet_day(osv.osv):
     _name = "hr_timesheet_sheet.sheet.day"
     _description = "Timesheets by Period"
@@ -616,39 +397,3 @@ class hr_timesheet_sheet_sheet_account(osv.osv):
                             AND s.user_id = l.user_id)
             group by l.account_id, s.id
         )""")
-
-
-
-
-class res_company(osv.osv):
-    _inherit = 'res.company'
-    _columns = {
-        'timesheet_range': fields.selection([('week','Week'),('month','Month')], 'Timesheet range',
-            help="Periodicity on which you validate your timesheets."),
-        'timesheet_max_difference': fields.float('Timesheet allowed difference(Hours)',
-            help="Allowed difference in hours between the sign in/out and the timesheet " \
-                 "computation for one sheet. Set this to 0 if you do not want any control."),
-    }
-    _defaults = {
-        'timesheet_range': lambda *args: 'week',
-        'timesheet_max_difference': lambda *args: 0.0
-    }
-
-class hr_employee(osv.osv):
-    '''
-    Employee
-    '''
-
-    _inherit = 'hr.employee'
-    _description = 'Employee'
-
-    def _timesheet_count(self, cr, uid, ids, field_name, arg, context=None):
-        Sheet = self.pool['hr_timesheet_sheet.sheet']
-        return {
-            employee_id: Sheet.search_count(cr,uid, [('employee_id', '=', employee_id)], context=context)
-            for employee_id in ids
-        }
-
-    _columns = {
-        'timesheet_count': fields.function(_timesheet_count, type='integer', string='Timesheets'),
-    }

--- a/None
+++ b/addons/hr_timesheet_sheet/models/res_company.py
@@ -0,0 +1,19 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from openerp.osv import fields, osv
+
+
+class res_company(osv.osv):
+    _inherit = 'res.company'
+    _columns = {
+        'timesheet_range': fields.selection([('week','Week'),('month','Month')], 'Timesheet range',
+            help="Periodicity on which you validate your timesheets."),
+        'timesheet_max_difference': fields.float('Timesheet allowed difference(Hours)',
+            help="Allowed difference in hours between the sign in/out and the timesheet " \
+                 "computation for one sheet. Set this to 0 if you do not want any control."),
+    }
+    _defaults = {
+        'timesheet_range': lambda *args: 'week',
+        'timesheet_max_difference': lambda *args: 0.0
+    }
\ No newline at end of file
