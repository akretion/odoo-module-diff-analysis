PR: https://github.com/odoo/odoo/pull/152424

From: 4b8576b49d8eec8260e276e06b75429bd9500f8c
From: Renaud Thiry
Date: 2024-07-10 16:37:57

Breaking data model changes scores: del:1 + add:0, change matches:
-    notification_type = fields.Selection(selection_add=[('sms', 'SMS')], ondelete={'sms': 'set default'})

Total Changes: 48

[REF] event_*: keep model_ref in sync

In a recent fix at: fe80a2676a1c5f964c20740ae8097929564a1858
We stopped using a model field as the basis for a reference field
as users typically did not have access to ir.model.

However this means the reference field now falls back on its current
value to determine which model it is referencing in the m2o field used
in the front-end.

We stop using "notification_type" as it's implied by the model
of the reference field.

We also add a modified reference-field that displays its underlying model.

task-3256524

Part-of: odoo/odoo#152424
Related: odoo/enterprise#60625
Related: odoo/upgrade#5914
Signed-off-by: Warnon Aur√©lien (awa) <awa@odoo.com>

================================= pseudo patch: =================================

--- a/addons/event_sms/models/event_mail.py
+++ b/addons/event_sms/models/event_mail.py
@@ -7,38 +7,25 @@ from odoo import api, fields, models
 class EventTypeMail(models.Model):
     _inherit = 'event.type.mail'
 
-    @api.model
-    def _selection_template_model(self):
-        return super(EventTypeMail, self)._selection_template_model() + [('sms.template', 'SMS')]
+    notification_type = fields.Selection(selection_add=[('sms', 'SMS')])
+    template_ref = fields.Reference(ondelete={'sms.template': 'cascade'}, selection_add=[('sms.template', 'SMS')])
 
-    notification_type = fields.Selection(selection_add=[('sms', 'SMS')], ondelete={'sms': 'set default'})
-
-    @api.depends('notification_type')
-    def _compute_template_model_id(self):
-        sms_model = self.env['ir.model']._get('sms.template')
-        sms_mails = self.filtered(lambda mail: mail.notification_type == 'sms')
-        sms_mails.template_model_id = sms_model
-        super(EventTypeMail, self - sms_mails)._compute_template_model_id()
+    def _compute_notification_type(self):
+        super()._compute_notification_type()
+        sms_schedulers = self.filtered(lambda scheduler: scheduler.template_ref and scheduler.template_ref._name == 'sms.template')
+        sms_schedulers.notification_type = 'sms'
 
 
 class EventMailScheduler(models.Model):
     _inherit = 'event.mail'
 
-    @api.model
-    def _selection_template_model(self):
-        return super(EventMailScheduler, self)._selection_template_model() + [('sms.template', 'SMS')]
-
-    def _selection_template_model_get_mapping(self):
-        return {**super(EventMailScheduler, self)._selection_template_model_get_mapping(), 'sms': 'sms.template'}
-
-    notification_type = fields.Selection(selection_add=[('sms', 'SMS')], ondelete={'sms': 'set default'})
+    notification_type = fields.Selection(selection_add=[('sms', 'SMS')])
+    template_ref = fields.Reference(ondelete={'sms.template': 'cascade'}, selection_add=[('sms.template', 'SMS')])
 
-    @api.depends('notification_type')
-    def _compute_template_model_id(self):
-        sms_model = self.env['ir.model']._get('sms.template')
-        sms_mails = self.filtered(lambda mail: mail.notification_type == 'sms')
-        sms_mails.template_model_id = sms_model
-        super(EventMailScheduler, self - sms_mails)._compute_template_model_id()
+    def _compute_notification_type(self):
+        super()._compute_notification_type()
+        sms_schedulers = self.filtered(lambda scheduler: scheduler.template_ref and scheduler.template_ref._name == 'sms.template')
+        sms_schedulers.notification_type = 'sms'
 
     def execute(self):
         for scheduler in self:
@@ -47,9 +34,6 @@ class EventMailScheduler(models.Model):
                 # before or after event -> one shot email
                 if scheduler.mail_done:
                     continue
-                # no template -> ill configured, skip and avoid crash
-                if not scheduler.template_ref:
-                    continue
                 # Do not send SMS if the communication was scheduled before the event but the event is over
                 if scheduler.scheduled_date <= now and (scheduler.interval_type != 'before_event' or scheduler.event_id.date_end > now):
                     scheduler.event_id.registration_ids.filtered(lambda registration: registration.state != 'cancel')._message_sms_schedule_mass(
@@ -63,14 +47,6 @@ class EventMailScheduler(models.Model):
 
         return super(EventMailScheduler, self).execute()
 
-    @api.onchange('notification_type')
-    def set_template_ref_model(self):
-        super().set_template_ref_model()
-        mail_model = self.env['sms.template']
-        if self.notification_type == 'sms':
-            record = mail_model.search([('model', '=', 'event.registration')], limit=1)
-            self.template_ref = "{},{}".format('sms.template', record.id) if record else False
-
 
 class EventMailRegistration(models.Model):
     _inherit = 'event.mail.registration'
