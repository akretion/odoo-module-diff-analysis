PR: https://github.com/odoo/odoo/pull/

From: 1b9dd118cb0f305ed38b6326fa814336cbf16252
From: std-odoo
Date: 2021-08-13 12:27:04

Total Changes: 160

[IMP] base: do no spoof the mail from headers when sending emails

PURPOSE
=======
We want to increase the score of the emails sent by Odoo and we want to
avoid them to be marked as spam by the mail clients (gmail, outook...).

SPECIFICATIONS
===============
From filter
*----------
Add a new field on the "ir.mail_server" which is "from_filter". This
field defines the email address for which the outgoing email server can
be used.

The "from_filter" can either define an email address or a domain name.

Use the system parameter "mail.default.from" which allow us to define
a default email address which is used to encapsulate the emails
(default: notifications@<catch.all.domain>).

Mail server priorities
*---------------------
When sending an email, we read the FROM header and,
* We first look for a mail server which match the entire mail FROM
  in that case, we do not change the email header (not needed)
* If not found, we search a mail server which matches the domain name of
  the mail from (do not need to change the headers in that case)
* If not found, find the mail server linked to the "notifications"
  email (defined in the system parameter). Then change the FROM header
  to the notification email, and put the old one in the name part of
  this header.
  E.g.
      Initial mail from: "Admin" < admin@example.com >
      Final mail from:   "Admin (admin@odoo.com)" < notifications@odoo.com >
* If no notification email is configured or if no mail server are
  found for the notification email, fallback to the old system and
  spoof the FROM header. In that case we do not have the choice if we
  want to send the email, he will probably be marked as spam.

Sending method priority
*----------------------
In the mail server models, we defined some priorities,
1. Forced SMTP session
2. Forced mail server
3. Try to find the best mail server (see "Mail server priorities")
4. If not found, read the odoo-bin arguments

Bounce
*-----
As there's no standard for bounce address, we put it in the envelope
(smtp_from). But in some case, it might be considered as spoofing. So,
we use the bounce address ONLY if the mail server is configured for the
entire domain name.

One behavior which might be broken is the following; we send an email as
"std@gmail.com" and the bounce address is on the domain "odoo.com".
Before we received the bounce notifications but we were spoofing the
local part and the domain.

Now
* if a mail server is configured for GMAIL, we do not use the bounce
  address (and we might not receive the bounce notification)
* if no mail server is configured for GMAIL, but one is configured for
  "odoo.com"
    - the FROM header will be "notifications@odoo.com"
    - the FROM envelope will be the bounce address
=> In this situation we are spoofing only the local part of the email
   but it's allowed as the mail server is configured for the entire
   domain name

LINKS
=====

Task-2367946
odoo/odoo#61853
odoo/upgrade#1903

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/ir_mail_server.py
+++ b/odoo/addons/base/models/ir_mail_server.py
@@ -24,7 +24,7 @@ from urllib3.contrib.pyopenssl import PyOpenSSLContext
 
 from odoo import api, fields, models, tools, _
 from odoo.exceptions import UserError
-from odoo.tools import ustr, pycompat, formataddr, encapsulate_email, email_domain_extract
+from odoo.tools import ustr, pycompat, formataddr, email_normalize, encapsulate_email, email_domain_extract, email_domain_normalize
 
 
 _logger = logging.getLogger(__name__)
@@ -89,6 +89,10 @@ class IrMailServer(models.Model):
                           "specified for outgoing emails (To/Cc/Bcc)")
 
     name = fields.Char(string='Description', required=True, index=True)
+    from_filter = fields.Char(
+      "From Filter",
+      help='Define for which email address or domain this server can be used.\n'
+      'e.g.: "notification@odoo.com" or "odoo.com"')
     smtp_host = fields.Char(string='SMTP Server', required=True, help="Hostname or IP of SMTP server")
     smtp_port = fields.Integer(string='SMTP Port', required=True, default=25, help="SMTP Port. Usually 465 for SSL, and 25 or 587 for other cases.")
     smtp_authentication = fields.Selection([('login', 'Username'), ('certificate', 'SSL Certificate')], string='Authenticate with', required=True, default='login')
@@ -195,7 +199,7 @@ class IrMailServer(models.Model):
         }
 
     def connect(self, host=None, port=None, user=None, password=None, encryption=None,
-                ssl_certificate=None, ssl_private_key=None, smtp_debug=False, mail_server_id=None):
+                smtp_from=None, ssl_certificate=None, ssl_private_key=None, smtp_debug=False, mail_server_id=None):
         """Returns a new SMTP connection to the given SMTP server.
            When running in test mode, this method does nothing and returns `None`.
 
@@ -204,6 +208,7 @@ class IrMailServer(models.Model):
            :param user: optional username to authenticate with
            :param password: optional password to authenticate with
            :param string encryption: optional, ``'ssl'`` | ``'starttls'``
+           :param smtp_from: FROM SMTP envelop, used to find the best mail server
            :param ssl_certificate: filename of the SSL certificate used for authentication
                Used when no mail server is given and overwrite  the odoo-bin argument "smtp_ssl_certificate"
            :param ssl_private_key: filename of the SSL private key used for authentication
@@ -213,14 +218,14 @@ class IrMailServer(models.Model):
            :param mail_server_id: ID of specific mail server to use (overrides other parameters)
         """
         # Do not actually connect while running in test mode
-        if getattr(threading.currentThread(), 'testing', False):
-            return None
+        if self._is_test_mode():
+            return
 
         mail_server = smtp_encryption = None
         if mail_server_id:
             mail_server = self.sudo().browse(mail_server_id)
         elif not host:
-            mail_server = self.sudo().search([], order='sequence', limit=1)
+            mail_server, smtp_from = self.sudo()._find_mail_server(smtp_from)
 
         ssl_context = None
         if mail_server:
@@ -234,6 +239,7 @@ class IrMailServer(models.Model):
                 smtp_password = None
             smtp_encryption = mail_server.smtp_encryption
             smtp_debug = smtp_debug or mail_server.smtp_debug
+            from_filter = mail_server.from_filter
             if (mail_server.smtp_authentication == "certificate"
                and mail_server.smtp_ssl_certificate
                and mail_server.smtp_ssl_private_key):
@@ -258,10 +264,10 @@ class IrMailServer(models.Model):
             smtp_port = tools.config.get('smtp_port', 25) if port is None else port
             smtp_user = user or tools.config.get('smtp_user')
             smtp_password = password or tools.config.get('smtp_password')
+            from_filter = tools.config.get('from_filter')
             smtp_encryption = encryption
             if smtp_encryption is None and tools.config.get('smtp_ssl'):
                 smtp_encryption = 'starttls' # smtp_ssl => STARTTLS as of v7
-
             smtp_ssl_certificate_filename = ssl_certificate or tools.config.get('smtp_ssl_certificate_filename')
             smtp_ssl_private_key_filename = ssl_private_key or tools.config.get('smtp_ssl_private_key_filename')
 
@@ -292,6 +298,7 @@ class IrMailServer(models.Model):
             connection = smtplib.SMTP_SSL(smtp_server, smtp_port, timeout=SMTP_TIMEOUT)
         else:
             connection = smtplib.SMTP(smtp_server, smtp_port, timeout=SMTP_TIMEOUT)
+
         connection.set_debuglevel(smtp_debug)
         if smtp_encryption == 'starttls':
             # starttls() will perform ehlo() if needed first
@@ -313,6 +320,11 @@ class IrMailServer(models.Model):
         # Anyway, as it may have been sent by login(), all subsequent usages should consider this command as sent.
         connection.ehlo_or_helo_if_needed()
 
+        # Store the "from_filter" of the mail server / odoo-bin argument to  know if we
+        # need to change the FROM headers or not when we will prepare the mail message
+        connection.from_filter = from_filter
+        connection.smtp_from = smtp_from
+
         return connection
 
     def build_email(self, email_from, email_to, subject, body, email_cc=None, email_bcc=None, reply_to=False,
@@ -437,34 +449,30 @@ class IrMailServer(models.Model):
             return "%s@%s" % (email_from, domain)
         return tools.config.get("email_from")
 
-    def _prepare_email_message(self, message):
+    def _prepare_email_message(self, message, smtp_session):
         """Prepare the SMTP information (from, to, message) before sending.
 
         :param message: the email.message.Message to send, information like the
             Return-Path, the From, etc... will be used to find the smtp_from and to smtp_to
+        :param smtp_session: the opened SMTP session to use to authenticate the sender
         :return: smtp_from, smtp_to_list, message
             smtp_from: email to used during the authentication to the mail server
             smtp_to_list: list of email address which will receive the email
             message: the email.message.Message to send
         """
-
         # Use the default bounce address **only if** no Return-Path was
         # provided by caller.  Caller may be using Variable Envelope Return
         # Path (VERP) to detect no-longer valid email addresses.
-        smtp_from = message['Return-Path'] or self._get_default_bounce_address() or message['From']
+        bounce_address = message['Return-Path'] or self._get_default_bounce_address() or message['From']
+        smtp_from = message['From'] or bounce_address
         assert smtp_from, "The Return-Path or From header is required for any outbound email"
 
-        # The email's "Envelope From" (Return-Path), and all recipient addresses must only contain ASCII characters.
-        from_rfc2822 = extract_rfc2822_addresses(smtp_from)
-        assert from_rfc2822, ("Malformed 'Return-Path' or 'From' address: %r - "
-                              "It should contain one valid plain ASCII email") % smtp_from
-        # use last extracted email, to support rarities like 'Support@MyComp <support@mycompany.com>'
-        smtp_from = from_rfc2822[-1]
         email_to = message['To']
         email_cc = message['Cc']
         email_bcc = message['Bcc']
         del message['Bcc']
 
+        # All recipient addresses must only contain ASCII characters
         smtp_to_list = [
             address
             for base in [email_to, email_cc, email_bcc]
@@ -480,6 +488,31 @@ class IrMailServer(models.Model):
             del message['To']           # avoid multiple To: headers!
             message['To'] = x_forge_to
 
+        # Try to not spoof the mail from headers
+        from_filter = getattr(smtp_session, 'from_filter', False)
+        smtp_from = getattr(smtp_session, 'smtp_from', False) or smtp_from
+
+        notifications_email = email_normalize(self._get_default_from_address())
+        if notifications_email and smtp_from == notifications_email and message['From'] != notifications_email:
+            smtp_from = encapsulate_email(message['From'], notifications_email)
+
+        if message['From'] != smtp_from:
+            del message['From']
+            message['From'] = smtp_from
+
+        # Check if it's still possible to put the bounce address as smtp_from
+        if self._match_from_filter(bounce_address, from_filter):
+            # Mail headers FROM will be spoofed to be able to receive bounce notifications
+            # Because the mail server support the domain of the bounce address
+            smtp_from = bounce_address
+
+        # The email's "Envelope From" (Return-Path) must only contain ASCII characters.
+        smtp_from_rfc2822 = extract_rfc2822_addresses(smtp_from)
+        assert smtp_from_rfc2822, (
+            f"Malformed 'Return-Path' or 'From' address: {smtp_from} - "
+            "It should contain one valid plain ASCII email")
+        smtp_from = smtp_from_rfc2822[-1]
+
         return smtp_from, smtp_to_list, message
 
     @api.model
@@ -518,20 +551,22 @@ class IrMailServer(models.Model):
         :return: the Message-ID of the message that was just sent, if successfully sent, otherwise raises
                  MailDeliveryException and logs root cause.
         """
-        smtp_from, smtp_to_list, message = self._prepare_email_message(message)
+        smtp = smtp_session
+        if not smtp:
+            smtp = self.connect(
+                smtp_server, smtp_port, smtp_user, smtp_password, smtp_encryption,
+                smtp_from=message['From'], ssl_certificate=smtp_ssl_certificate, ssl_private_key=smtp_ssl_private_key,
+                smtp_debug=smtp_debug, mail_server_id=mail_server_id,)
+
+        smtp_from, smtp_to_list, message = self._prepare_email_message(message, smtp)
 
         # Do not actually send emails in testing mode!
-        if getattr(threading.currentThread(), 'testing', False) or self.env.registry.in_test_mode():
+        if self._is_test_mode():
             _test_logger.info("skip sending email in test mode")
             return message['Message-Id']
 
         try:
             message_id = message['Message-Id']
-            smtp = smtp_session
-            smtp = smtp or self.connect(
-                smtp_server, smtp_port, smtp_user, smtp_password,
-                smtp_encryption, smtp_debug, mail_server_id=mail_server_id,
-                ssl_certificate=smtp_ssl_certificate, ssl_private_key=smtp_ssl_private_key)
 
             if sys.version_info < (3, 7, 4):
                 # header folding code is buggy and adds redundant carriage
@@ -560,6 +595,79 @@ class IrMailServer(models.Model):
             raise MailDeliveryException(_("Mail Delivery Failed"), msg)
         return message_id
 
+    def _find_mail_server(self, email_from, mail_servers=None):
+        """Find the appropriate mail server for the given email address.
+
+        Returns: Record<ir.mail_server>, email_from
+        - Mail server to use to send the email (None if we use the odoo-bin arguments)
+        - Email FROM to use to send the email (in some case, it might be impossible
+          to use the given email address directly if no mail server is configured for)
+        """
+        email_from_normalized = email_normalize(email_from)
+        email_from_domain = email_domain_extract(email_from_normalized)
+        notifications_email = email_normalize(self._get_default_from_address())
+        notifications_domain = email_domain_extract(notifications_email)
+
+        if mail_servers is None:
+            mail_servers = self.sudo().search([], order='sequence')
+
+        # 1. Try to find a mail server for the right mail from
+        mail_server = mail_servers.filtered(lambda m: email_normalize(m.from_filter) == email_from_normalized)
+        if mail_server:
+            return mail_server[0], email_from
+
+        mail_server = mail_servers.filtered(lambda m: email_domain_normalize(m.from_filter) == email_from_domain)
+        if mail_server:
+            return mail_server[0], email_from
+
+        # 2. Try to find a mail server for <notifications@domain.com>
+        if notifications_email:
+            mail_server = mail_servers.filtered(lambda m: email_normalize(m.from_filter) == notifications_email)
+            if mail_server:
+                return mail_server[0], notifications_email
+
+            mail_server = mail_servers.filtered(lambda m: email_domain_normalize(m.from_filter) == notifications_domain)
+            if mail_server:
+                return mail_server[0], notifications_email
+
+        # 3. Take the first mail server without "from_filter" because
+        # nothing else has been found... Will spoof the FROM because
+        # we have no other choices
+        mail_server = mail_servers.filtered(lambda m: not m.from_filter)
+        if mail_server:
+            return mail_server[0], email_from
+
+        # 4. Return the first mail server even if it was configured for another domain
+        if mail_servers:
+            return mail_servers[0], email_from
+
+        # 5: SMTP config in odoo-bin arguments
+        from_filter = tools.config.get('from_filter')
+
+        if self._match_from_filter(email_from, from_filter):
+            return None, email_from
+
+        if notifications_email and self._match_from_filter(notifications_email, from_filter):
+            return None, notifications_email
+
+        return None, email_from
+
+    @api.model
+    def _match_from_filter(self, email_from, from_filter):
+        """Return True is the given email address match the "from_filter" field.
+
+        The from filter can be Falsy (always match),
+        a domain name or an full email address.
+        """
+        if not from_filter:
+            return True
+
+        normalized_mail_from = email_normalize(email_from)
+        if '@' in from_filter:
+            return email_normalize(from_filter) == normalized_mail_from
+
+        return email_domain_extract(normalized_mail_from) == email_domain_normalize(from_filter)
+
     @api.onchange('smtp_encryption')
     def _onchange_encryption(self):
         result = {}
@@ -573,3 +681,11 @@ class IrMailServer(models.Model):
         else:
             self.smtp_port = 25
         return result
+
+    def _is_test_mode(self):
+        """Return True if we are running the tests, so we do not send real emails.
+
+        Can be overridden in tests after mocking the SMTP lib to test in depth the
+        outgoing mail server.
+        """
+        return getattr(threading.currentThread(), 'testing', False) or self.env.registry.in_test_mode()
