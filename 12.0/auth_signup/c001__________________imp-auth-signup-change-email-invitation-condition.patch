PR: https://github.com/odoo/odoo/pull/

From: 362613a2fa5dd99ae9b0521b6695badb512f5600
From: dip-odoo
Date: 2018-05-04 16:07:31

Structural Changes: 2
Total Changes: 37

[IMP] auth_signup: change email invitation condition

Currently if a user has already been invited you cannot invite him again
via the web_settings_dashboard as it automatically tries to create a new
user.
This commit changes that behaviour in case you have the mail app
installed odoo will now send an invitation email to the invited user as
long as this user has never connected.

1) Mail app not installed:
   - if user is active     > display error (this email is already in use)
   - if user not active    > activate the user
   - if user doesn't exist > create new user

2) Mail app installed:
   - if user is active && state confirmed > display popup (this email is
   already in use)
   - if user is active && never connected > resend invitation mail
   - if user is inactive > activate the user
   - if user doesn't exist > create new user and send invitation mail

This commit is related to task #54023
Closes #23081

================================= pseudo patch: =================================

--- a/addons/auth_signup/models/res_users.py
+++ b/addons/auth_signup/models/res_users.py
@@ -7,6 +7,7 @@ from ast import literal_eval
 
 from odoo import api, fields, models, _
 from odoo.exceptions import UserError
+from odoo.osv import expression
 from odoo.tools.misc import ustr
 
 from odoo.addons.base.models.ir_mail_server import MailDeliveryException
@@ -17,9 +18,34 @@ _logger = logging.getLogger(__name__)
 class ResUsers(models.Model):
     _inherit = 'res.users'
 
-    state = fields.Selection(compute='_compute_state', string='Status',
+    state = fields.Selection(compute='_compute_state', search='_search_state', string='Status',
                  selection=[('new', 'Never Connected'), ('active', 'Confirmed')])
 
+    def _search_state(self, operator, value):
+        negative = operator in expression.NEGATIVE_TERM_OPERATORS
+
+        # In case we have no value
+        if not value:
+            return TRUE_DOMAIN if negative else FALSE_DOMAIN
+
+        if operator in ['in', 'not in']:
+            if len(value) > 1:
+                return FALSE_DOMAIN if negative else TRUE_DOMAIN
+            if value[0] == 'new':
+                comp = '!=' if negative else '='
+            if value[0] == 'active':
+                comp = '=' if negative else '!='
+            return [('log_ids', comp, False)]
+
+        if operator in ['=', '!=']:
+            # In case we search against anything else than new, we have to invert the operator
+            if value != 'new':
+                operator = expression.TERM_OPERATORS_NEGATION[operator]
+
+            return [('log_ids', operator, False)]
+
+        return expression.TRUE_DOMAIN
+
     @api.multi
     def _compute_state(self):
         for user in self:
@@ -143,6 +169,15 @@ class ResUsers(models.Model):
             template.with_context(lang=user.lang).send_mail(user.id, force_send=True, raise_exception=True)
             _logger.info("Password reset email sent for user <%s> to <%s>", user.login, user.email)
 
+    @api.model
+    def web_dashboard_create_users(self, emails):
+        inactive_users = self.search([('state', '=', 'new'), '|', ('login', 'in', emails), ('email', 'in', emails)])
+        new_emails = set(emails) - set(inactive_users.mapped('email'))
+        res = super(ResUsers, self).web_dashboard_create_users(list(new_emails))
+        if inactive_users:
+            inactive_users.with_context(create_user=True).action_reset_password()
+        return res
+
     @api.model
     def create(self, values):
         # overridden to automatically invite user to sign up
