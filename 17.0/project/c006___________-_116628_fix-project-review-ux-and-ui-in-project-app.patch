PR: https://github.com/odoo/odoo/pull/116628

From: c5dd03ffee8d00dc555d56fa18f2d2267cc3b2b7
From: Abderraouf Ghrissi (abgh)
Date: 2023-04-03 15:07:21

Breaking data model changes scores: del:5 + add:0, change matches:
-    allow_subtasks = fields.Boolean('Sub-tasks', default=lambda self: self.env.user.has_group('project.group_subtask_project'))
-    child_text = fields.Char(compute="_compute_child_text")
-    allow_subtasks = fields.Boolean(string="Allow Sub-tasks", related="project_id.allow_subtasks", readonly=True)
-    stage_display = fields.Char(compute='_compute_stage_display', string='Stage Display')
-    group_subtask_project = fields.Boolean("Sub-tasks", implied_group="project.group_subtask_project")

Total Changes: 53

[FIX] project: review UX and UI in Project app

This commit reviews the UX and UI in Project app and improves the usability of the
new features recently added (subtasks list in kanban card, state field replacing
kanban_state field, etc).

The following changes are made in this commit:

* swap of user_id icon in the kanban box and the removal of the allow_unassign field and setting
* change the ordering of the fields in the subtask list
* make small layout changes in the project.task and project.project kanban cards
* remove the "lock-icon private" sub-title of private tasks, replace it with a
  little lock icon on the bottom right icons of the kanban card.
* remove the break tag in the project.task kanban card that was unecessary
  given the new display and margin style settings
* lock icon is bigger
* kanban icons are better aligned
* state is as big as avatar
* remove the 'remaining hours on SO' field
* deadline field will be optional and hidden by default in project.task list view
* remove the rating field
* add stage field as optional in project.task list views
* priority and state fields will no longer be optional
* stage_id will be copied when duplicating a task, except when the task is
  generated through the recurrence
* remove the tooltip of the tag_ids field
* When duplicating a task having sub-tasks, '(copy)' is no longer
  added to the name of the sub-tasks of this task.
* project.task kanban view:
  * (+ x tasks) mention next to the name is removed
  * The caret is replaced with 'fa-check-square-o x/y'
    which will represent the number of sub-tasks closed
    compared to the total number of sub-tasks
  * Only open subtasks are displayed
  * When changing the state of a sub-task to a closing one,
    the sub-task is muted and removed from the list on the view reload
  * The name of the parent task on the kanban card of sub-tasks is
    displayed except when viewing the sub-tasks of a particular task
    through the sub-tasks stat button
  * project.project kanban view: the fa-check-square-o icon of
    milestones is replaced with fa-flag-o
  * project.task kanban card: the fa-play and fa-pause icons
    are moved on the right of the remaining hours widge.
  * Allow users to edit the stage_id in batch from the list view of tasks
    if all of the selected tasks are part of the same project.
  * the state will have the same size as the avatar
  * change the opacity of the tasks that are closed
  * state is at the right of subtask list
  * the striked should be replaced by the opacity on the kanban card

Enterprise PR: odoo/enterprise#38132

Task-3229873

closes odoo/odoo#116628

X-original-commit: 09b5d5843096d27b5a4ab0f603ad44bdb2e74723
Related: odoo/upgrade#4478
Related: odoo/enterprise#38771
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>
Co-authored-by: Panagiotis Kyriakou <paky@odoo.com>
Co-authored-by: Bastien (bvdn) <bvdn@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/project_project.py
+++ b/addons/project/models/project_project.py
@@ -160,7 +160,6 @@ class Project(models.Model):
     date_start = fields.Date(string='Start Date')
     date = fields.Date(string='Expiration Date', index=True, tracking=True,
         help="Date on which this project ends. The timeframe defined on the project is taken into account when viewing its planning.")
-    allow_subtasks = fields.Boolean('Sub-tasks', default=lambda self: self.env.user.has_group('project.group_subtask_project'))
     allow_recurring_tasks = fields.Boolean('Recurring Tasks', default=lambda self: self.env.user.has_group('project.group_project_recurring_tasks'))
     allow_task_dependencies = fields.Boolean('Task Dependencies', default=lambda self: self.env.user.has_group('project.group_project_task_dependencies'))
     allow_milestones = fields.Boolean('Milestones', default=lambda self: self.env.user.has_group('project.group_project_milestone'))

--- a/addons/project/models/project_task.py
+++ b/addons/project/models/project_task.py
@@ -20,10 +20,8 @@ PROJECT_TASK_READABLE_FIELDS = {
     'priority',
     'project_id',
     'color',
-    'allow_subtasks',
     'subtask_count',
     'is_private',
-    'child_text',
     'email_from',
     'create_date',
     'write_date',
@@ -41,6 +39,7 @@ PROJECT_TASK_READABLE_FIELDS = {
     'dependent_ids',
     'message_is_follower',
     'recurring_task',
+    'closed_subtask_count',
 }
 
 PROJECT_TASK_WRITABLE_FIELDS = {
@@ -124,9 +123,8 @@ class Task(models.Model):
     stage_id = fields.Many2one('project.task.type', string='Stage', compute='_compute_stage_id',
         store=True, readonly=False, ondelete='restrict', tracking=True, index=True,
         default=_get_default_stage_id, group_expand='_read_group_stage_ids',
-        domain="[('project_ids', '=', project_id)]", copy=False, task_dependency_tracking=True)
-    tag_ids = fields.Many2many('project.tags', string='Tags',
-        help="You can only see tags that are already present in your project. If you try creating a tag that is already existing in other projects, it won't generate any duplicates.")
+        domain="[('project_ids', '=', project_id)]", task_dependency_tracking=True)
+    tag_ids = fields.Many2many('project.tags', string='Tags')
 
     state = fields.Selection([
         ('01_in_progress', 'In Progress'),
@@ -194,9 +192,8 @@ class Task(models.Model):
     is_closed = fields.Boolean(compute='_compute_is_closed', string="Closed State", store=True, index=True)
     parent_id = fields.Many2one('project.task', string='Parent Task', index=True)
     child_ids = fields.One2many('project.task', 'parent_id', string="Sub-tasks", domain="[('recurring_task', '=', False)]")
-    child_text = fields.Char(compute="_compute_child_text")
-    allow_subtasks = fields.Boolean(string="Allow Sub-tasks", related="project_id.allow_subtasks", readonly=True)
     subtask_count = fields.Integer("Sub-task Count", compute='_compute_subtask_count')
+    closed_subtask_count = fields.Integer("Closed Sub-tasks Count", compute='_compute_subtask_count')
     project_privacy_visibility = fields.Selection(related='project_id.privacy_visibility', string="Project Visibility")
     # Computed field about working time elapsed between record creation and assignation/closing.
     working_hours_open = fields.Float(compute='_compute_elapsed', string='Working Hours to Assign', digits=(16, 2), store=True, group_operator="avg")
@@ -222,8 +219,6 @@ class Task(models.Model):
         compute='_compute_has_late_and_unreached_milestone',
         search='_search_has_late_and_unreached_milestone',
     )
-    #used to display the stage of the task in the tree view (if the project is private will return the personnal_stage_id, else will return the stage_id)
-    stage_display = fields.Char(compute='_compute_stage_display', string='Stage Display')
     # Task Dependencies fields
     allow_task_dependencies = fields.Boolean(related='project_id.allow_task_dependencies')
     # Tracking of this field is done in the write function
@@ -525,20 +520,20 @@ class Task(models.Model):
         for task in self:
             task.subtask_planned_hours = sum(child_task.planned_hours + child_task.subtask_planned_hours for child_task in task.child_ids)
 
-    @api.depends('child_ids')
-    def _compute_child_text(self):
-        for task in self:
-            if not task.subtask_count:
-                task.child_text = False
-            elif task.subtask_count == 1:
-                task.child_text = _("(+ 1 task)")
-            else:
-                task.child_text = _("(+ %(child_count)s tasks)", child_count=task.subtask_count)
-
     @api.depends('child_ids')
     def _compute_subtask_count(self):
+        total_and_closed_subtask_count_per_parent_id = {
+            group['parent_id'][0]: (
+                group['parent_id_count'],
+                sum(s in CLOSED_STATES for s in group['state']),
+            ) for group in self.env['project.task']._read_group(
+                [('parent_id', 'in', self.ids)],
+                ['state:array_agg', 'parent_id'],
+                ['parent_id'],
+            )
+        }
         for task in self:
-            task.subtask_count = len(task._get_all_subtasks())
+            task.subtask_count, task.closed_subtask_count = total_and_closed_subtask_count_per_parent_id.get(task.id, (0, 0))
 
     @api.onchange('company_id')
     def _onchange_task_company(self):
@@ -561,11 +556,6 @@ class Task(models.Model):
             else:
                 task.stage_id = False
 
-    @api.depends('project_id', 'stage_id', 'personal_stage_id')
-    def _compute_stage_display(self):
-        for task in self:
-            task.stage_display = task.stage_id.name if task.project_id else task.personal_stage_id.stage_id.name
-
     @api.depends('user_ids')
     def _compute_portal_user_names(self):
         """ This compute method allows to see all the names of assigned users to each task contained in `self`.
@@ -676,8 +666,7 @@ class Task(models.Model):
             default['name'] = _("%s (copy)", self.name)
         if self.recurrence_id:
             default['recurrence_id'] = self.recurrence_id.copy().id
-        if self.allow_subtasks:
-            default['child_ids'] = [child.copy({'name': child.name} if has_default_name else None).id for child in self.child_ids]
+        default['child_ids'] = [child.copy({'name': child.name}).id for child in self.child_ids]
         self_with_mail_context = self.with_context(mail_auto_subscribe_no_notify=True, mail_create_nosubscribe=True)
         task_copy = super(Task, self_with_mail_context).copy(default)
         if self.allow_task_dependencies:

--- a/addons/project/models/project_task_recurrence.py
+++ b/addons/project/models/project_task_recurrence.py
@@ -102,8 +102,7 @@ class ProjectTaskRecurrence(models.Model):
         })
 
         create_values['stage_id'] = occurrence_from.project_id.type_ids[0].id if occurrence_from.project_id.type_ids else occurrence_from.stage_id.id
-        if occurrence_from.allow_subtasks:
-            create_values['child_ids'] = [
-                Command.create(self._create_next_occurrence_values(child)) for child in occurrence_from.with_context(active_test=False).child_ids
-            ]
+        create_values['child_ids'] = [
+            Command.create(self._create_next_occurrence_values(child)) for child in occurrence_from.with_context(active_test=False).child_ids
+        ]
         return create_values

--- a/addons/project/models/res_config_settings.py
+++ b/addons/project/models/res_config_settings.py
@@ -9,7 +9,6 @@ class ResConfigSettings(models.TransientModel):
 
     module_project_forecast = fields.Boolean(string="Planning")
     module_hr_timesheet = fields.Boolean(string="Task Logs")
-    group_subtask_project = fields.Boolean("Sub-tasks", implied_group="project.group_subtask_project")
     group_project_rating = fields.Boolean("Customer Ratings", implied_group='project.group_project_rating')
     group_project_stages = fields.Boolean("Project Stages", implied_group="project.group_project_stages")
     group_project_recurring_tasks = fields.Boolean("Recurring Tasks", implied_group="project.group_project_recurring_tasks")
@@ -37,7 +36,6 @@ class ResConfigSettings(models.TransientModel):
             # key: (config_flag, is_global), value: project_flag
             ("group_project_rating", True): "rating_active",
             ("group_project_recurring_tasks", True): "allow_recurring_tasks",
-            ("group_subtask_project", False): "allow_subtasks",
             ("group_project_task_dependencies", False): "allow_task_dependencies",
             ("group_project_milestone", False): "allow_milestones",
         }
