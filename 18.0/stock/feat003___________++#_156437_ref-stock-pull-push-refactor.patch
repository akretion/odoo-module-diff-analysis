PR: https://github.com/odoo/odoo/pull/156437

From: 11e69870db1c49d9a6af79ffd263e4e162b34b6b
From: Arnold Moyaux
Date: 2024-03-15 15:59:10

Structural Changes: 3
Total Changes: 283

[REF] stock: pull&push refactor

Modify the mandatory pull flows in a mix of push and pull.
E.g. delivery and receipt in 3 steps become:
Customer -> Stock -> Purchase as pull rules
Vendor -> input -> Quality Control -> Stock is handle by push
Pick -> Pack -> Ship is handle by push

The push rules are now apply at validation and not confirmation.

The purpose:
- Limit the number of objects.
- More flexibility during the process. If you need to deviate to
another location than initaly plan you can let the new push rules
apply and you don't have a dead moves's tail.

The pull flow remains a valid configuration.
The push flow is the default configuration

We advice:
- If you have a lot of planning and delays. The pull flows is great
  because every transfer is created from procurement and it's only
possible to add a delay on pull rules (applied during _run_pull)
- If your inventory flow has a lot of variation and you want a
  flexibility until the last moment. The push flow is better. You can
just define pull rules on manadatory location and let the push adapt the
flow.

Since the transfer are not created directly, the forecast could not work
as before. We introduced a new location on `stock.move`. It contains the
location destination of the rule that created the transfer. We expect
the product to reach this point so we use it for the forecast.

`location_dest_id` on `stock.move` is now a compute base on the
`picking_type_id.default_location_dest_id`. During pull flow it takes
the value from the picking type and not the rule anymore.

WARNING: There is no check to ensure the product still on the good way
to reach the final location. In such a case the forecast would be
incorrect until the move chain is done.

Minor fix:
- During push, we set the push rule on the stock.move instead
of the rule from where it was copied.
- warehouse_id on `stock.move` is base on move's location instead of
propagate field of rule.

Issues to address:
- Since the `location_dest_id` come from the `picking_type_id` and not
the rule's dest location. It means we need a new picking_type each
time we want a dest location in pull flow. E.g. 3 steps receipt as
before in pull flow is not possible since it uses internal picking type
(compare to pick_pack_ship having 3 picking types). To fix it, we used a
boolean forcing the location base on the rule rather than the picking
type (for people willing to keep their configuration during migration).
- The sale_order_line is propagate to the pick. It prevent the merge of
stock.move. (It will be fix with a smart dispatch of quantities among
`sale.order.line`)

Part-of: odoo/odoo#156437
Co-authored-by: clesgow <quwo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/product.py
+++ b/addons/stock/models/product.py
@@ -308,8 +308,11 @@ class Product(models.Model):
         for location in locations:
             loc_domain = loc_domain and ['|'] + loc_domain or loc_domain
             loc_domain.append(('location_id.parent_path', '=like', location.parent_path + '%'))
-            dest_loc_domain = dest_loc_domain and ['|'] + dest_loc_domain or dest_loc_domain
-            dest_loc_domain.append(('location_dest_id.parent_path', '=like', location.parent_path + '%'))
+            dest_loc_domain = expression.OR([dest_loc_domain, [
+                '|',
+                    '&', ('location_final_id', '!=', False), ('location_final_id.parent_path', '=like', location.parent_path + '%'),
+                    '&', ('location_final_id', '=', False), ('location_dest_id.parent_path', '=like', location.parent_path + '%'),
+            ]])
 
         return (
             loc_domain,

--- a/addons/stock/models/stock_location.py
+++ b/addons/stock/models/stock_location.py
@@ -421,6 +421,9 @@ class Location(models.Model):
                     return False
         return True
 
+    def _child_of(self, other_location):
+        self.ensure_one()
+        return other_location.parent_path in self.parent_path
 
 class StockRoute(models.Model):
     _name = 'stock.route'

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -69,14 +69,19 @@ class StockMove(models.Model):
         related='product_id.product_tmpl_id')
     location_id = fields.Many2one(
         'stock.location', 'Source Location',
+        help='The operation takes and suggests products from this location.',
         auto_join=True, index=True, required=True,
-        check_company=True,
-        help="Sets a location if you produce at a fixed location. This can be a partner location if you subcontract the manufacturing operations.")
+        check_company=True)
     location_dest_id = fields.Many2one(
+        'stock.location', 'Intermediate Location', required=True,
+        help='The operations brings product to this location', readonly=False,
+        index=True, store=True, compute='_compute_location_dest_id', precompute=True)
+    location_final_id = fields.Many2one(
         'stock.location', 'Destination Location',
-        auto_join=True, index=True, required=True,
-        check_company=True,
-        help="Location where the system will stock the finished products.")
+        readonly=False, store=True,
+        help="The operation brings the products to the intermediate location."
+        "But this operation is part of a chain of operations targeting the destination location.",
+        auto_join=True, index=True, check_company=True)
     location_usage = fields.Selection(string="Source Location Type", related='location_id.usage')
     location_dest_usage = fields.Selection(string="Destination Location Type", related='location_dest_id.usage')
     partner_id = fields.Many2one(
@@ -189,6 +194,18 @@ class StockMove(models.Model):
         for move in self:
             move.product_uom = move.product_id.uom_id.id
 
+    @api.depends('picking_id', 'picking_id.location_dest_id')
+    def _compute_location_dest_id(self):
+        for move in self:
+            location_dest = False
+            if move.picking_id:
+                location_dest = move.picking_id.location_dest_id
+            elif move.picking_type_id:
+                location_dest = move.picking_type_id.default_location_dest_id
+            if location_dest and move.location_final_id and move.location_final_id._child_of(location_dest):
+                location_dest = move.location_final_id
+            move.location_dest_id = location_dest
+
     @api.depends('has_tracking', 'picking_type_id.use_create_lots', 'picking_type_id.use_existing_lots')
     def _compute_display_assign_serial(self):
         for move in self:
@@ -936,9 +953,8 @@ Please change the quantity done or the rounding precision of your unit of measur
     def _push_apply(self):
         new_moves = []
         for move in self:
-            # if the move is already chained, there is no need to check push rules
-            if move.move_dest_ids:
-                continue
+            new_move = self.env['stock.move']
+
             # if the move is a returned move, we don't want to check push rules, as returning a returned move is the only decent way
             # to receive goods without triggering the push rules again (which would duplicate chained operations)
             domain = [('location_src_id', '=', move.location_dest_id.id), ('action', 'in', ('push', 'pull_push'))]
@@ -953,7 +969,29 @@ Please change the quantity done or the rounding precision of your unit of measur
                 new_move = rule._run_push(move)
                 if new_move:
                     new_moves.append(new_move)
-        return self.env['stock.move'].concat(*new_moves)
+
+            move_to_propagate_ids = set()
+            move_to_mts_ids = set()
+            for m in move.move_dest_ids - new_move:
+                if new_move and move.location_final_id and m.location_id == move.location_final_id:
+                    move_to_propagate_ids.add(m.id)
+                elif not m.location_id._child_of(move.location_dest_id):
+                    move_to_mts_ids.add(m.id)
+            self.env['stock.move'].browse(move_to_mts_ids)._break_mto_link(move)
+            move.move_dest_ids = [Command.unlink(m_id) for m_id in move_to_propagate_ids]
+            new_move.move_dest_ids = [Command.link(m_id) for m_id in move_to_propagate_ids]
+
+        new_moves = self.env['stock.move'].concat(*new_moves)
+        new_moves = new_moves.sudo()._action_confirm()
+
+        # Remaining from action_confirm to adapt
+        # if new_push_moves:
+        #     neg_push_moves = new_push_moves.filtered(lambda sm: float_compare(sm.product_uom_qty, 0, precision_rounding=sm.product_uom.rounding) < 0)
+        #     (new_push_moves - neg_push_moves).sudo()._action_confirm()
+        #     # Negative moves do not have any picking, so we should try to merge it with their siblings
+        #     neg_push_moves._action_confirm(merge_into=neg_push_moves.move_orig_ids.move_dest_ids)
+
+        return new_moves
 
     def _merge_moves_fields(self):
         """ This method will return a dict of stock moveâ€™s values that represent the values of all moves in `self` merged. """
@@ -972,7 +1010,7 @@ Please change the quantity done or the rounding precision of your unit of measur
     @api.model
     def _prepare_merge_moves_distinct_fields(self):
         fields = [
-            'product_id', 'price_unit', 'procure_method', 'location_id', 'location_dest_id',
+            'product_id', 'price_unit', 'procure_method', 'location_id', 'location_dest_id', 'location_final_id',
             'product_uom', 'restrict_partner_id', 'scrapped', 'origin_returned_move_id',
             'package_level_id', 'propagate_cancel', 'description_picking',
             'product_packaging_id',
@@ -1183,7 +1221,7 @@ Please change the quantity done or the rounding precision of your unit of measur
         domain = [
             ('group_id', '=', self.group_id.id),
             ('location_id', '=', self.location_id.id),
-            ('location_dest_id', '=', self.location_dest_id.id),
+            ('location_dest_id', '=', (self.location_dest_id.id or self.picking_type_id.default_location_dest_id.id)),
             ('picking_type_id', '=', self.picking_type_id.id),
             ('printed', '=', False),
             ('state', 'in', ['draft', 'confirmed', 'waiting', 'partially_available', 'assigned'])]
@@ -1309,7 +1347,7 @@ Please change the quantity done or the rounding precision of your unit of measur
                 origin += "..."
         partners = self.mapped('partner_id')
         partner = len(partners) == 1 and partners.id or False
-        return {
+        vals = {
             'origin': origin,
             'company_id': self.mapped('company_id').id,
             'user_id': False,
@@ -1317,8 +1355,10 @@ Please change the quantity done or the rounding precision of your unit of measur
             'partner_id': partner,
             'picking_type_id': self.mapped('picking_type_id').id,
             'location_id': self.mapped('location_id').id,
-            'location_dest_id': self.mapped('location_dest_id').id,
         }
+        if self.location_dest_id.ids:
+            vals['location_dest_id'] = self.location_dest_id.id
+        return vals
 
     def _should_be_assigned(self):
         self.ensure_one()
@@ -1369,7 +1409,7 @@ Please change the quantity done or the rounding precision of your unit of measur
         # assign picking in batch for all confirmed move that share the same details
         for moves_ids in to_assign.values():
             self.browse(moves_ids).with_context(clean_context(self.env.context))._assign_picking()
-        new_push_moves = self._push_apply()
+
         self._check_company()
         moves = self
         if merge:
@@ -1378,24 +1418,14 @@ Please change the quantity done or the rounding precision of your unit of measur
         # Transform remaining move in return in case of negative initial demand
         neg_r_moves = moves.filtered(lambda move: float_compare(
             move.product_uom_qty, 0, precision_rounding=move.product_uom.rounding) < 0)
-        for move in neg_r_moves:
-            move.location_id, move.location_dest_id = move.location_dest_id, move.location_id
-            orig_move_ids, dest_move_ids = [], []
-            for m in move.move_orig_ids | move.move_dest_ids:
-                from_loc, to_loc = m.location_id, m.location_dest_id
-                if float_compare(m.product_uom_qty, 0, precision_rounding=m.product_uom.rounding) < 0:
-                    from_loc, to_loc = to_loc, from_loc
-                if to_loc == move.location_id:
-                    orig_move_ids += m.ids
-                elif move.location_dest_id == from_loc:
-                    dest_move_ids += m.ids
-            move.move_orig_ids, move.move_dest_ids = [(6, 0, orig_move_ids)], [(6, 0, dest_move_ids)]
-            move.product_uom_qty *= -1
-            if move.picking_type_id.return_picking_type_id:
-                move.picking_type_id = move.picking_type_id.return_picking_type_id
-            # We are returning some products, we must take them in the source location
-            move.procure_method = 'make_to_stock'
-        neg_r_moves._assign_picking()
+
+        # TODO for next version: rethink negative procurement. For now do nothing if initial move is processed
+        neg_r_moves.write({
+            'move_orig_ids': [Command.clear()],
+            'move_dest_ids': [Command.clear()],
+        })
+        moves -= neg_r_moves
+        neg_r_moves.unlink()
 
         # call `_action_assign` on every confirmed move which location_id bypasses the reservation + those expected to be auto-assigned
         moves.filtered(lambda move: move.state in ('confirmed', 'partially_available')
@@ -1403,12 +1433,6 @@ Please change the quantity done or the rounding precision of your unit of measur
                             or move.picking_type_id.reservation_method == 'at_confirm'
                             or (move.reservation_date and move.reservation_date <= fields.Date.today())))\
              ._action_assign()
-        if new_push_moves:
-            neg_push_moves = new_push_moves.filtered(lambda sm: float_compare(sm.product_uom_qty, 0, precision_rounding=sm.product_uom.rounding) < 0)
-            (new_push_moves - neg_push_moves).sudo()._action_confirm()
-            # Negative moves do not have any picking, so we should try to merge it with their siblings
-            neg_push_moves._action_confirm(merge_into=neg_push_moves.move_orig_ids.move_dest_ids)
-
         return moves
 
     def _prepare_procurement_origin(self):
@@ -1431,6 +1455,9 @@ Please change the quantity done or the rounding precision of your unit of measur
         dates_info = {'date_planned': self._get_mto_procurement_date()}
         if self.location_id.warehouse_id and self.location_id.warehouse_id.lot_stock_id.parent_path in self.location_id.parent_path:
             dates_info = self.product_id._get_dates_info(self.date, self.location_id, route_ids=self.route_ids)
+        warehouse = self.warehouse_id or self.picking_type_id.warehouse_id
+        if not self.location_id.warehouse_id:
+            warehouse = self.rule_id.propagate_warehouse_id
         return {
             'product_description_variants': self.description_picking and self.description_picking.replace(product_id._get_description(self.picking_type_id), ''),
             'date_planned': dates_info.get('date_planned'),
@@ -1439,7 +1466,7 @@ Please change the quantity done or the rounding precision of your unit of measur
             'move_dest_ids': self,
             'group_id': group_id,
             'route_ids': self.route_ids,
-            'warehouse_id': self.warehouse_id or self.picking_type_id.warehouse_id,
+            'warehouse_id': warehouse,
             'priority': self.priority,
             'orderpoint_id': self.orderpoint_id,
             'product_packaging_id': self.product_packaging_id,
@@ -1748,7 +1775,7 @@ Please change the quantity done or the rounding precision of your unit of measur
             if move.propagate_cancel:
                 # only cancel the next move if all my siblings are also cancelled
                 if all(state == 'cancel' for state in siblings_states):
-                    move.move_dest_ids.filtered(lambda m: m.state != 'done')._action_cancel()
+                    move.move_dest_ids.filtered(lambda m: m.state != 'done' and m.location_dest_id == m.move_dest_ids.location_id)._action_cancel()
             else:
                 if all(state in ('done', 'cancel') for state in siblings_states):
                     move_dest_ids = move.move_dest_ids
@@ -1774,51 +1801,9 @@ Please change the quantity done or the rounding precision of your unit of measur
         }
         return vals
 
-    def _create_extra_move(self):
-        """ If the quantity done on a move exceeds its quantity todo, this method will create an
-        extra move attached to a (potentially split) move line. If the previous condition is not
-        met, it'll return an empty recordset.
-
-        The rationale for the creation of an extra move is the application of a potential push
-        rule that will handle the extra quantities.
-        """
-        extra_move = self
-        rounding = self.product_uom.rounding
-        if float_is_zero(self.product_uom_qty, precision_rounding=rounding):
-            return self
-        # moves created after the picking is assigned do not have `product_uom_qty`, but we shouldn't create extra moves for them
-        if float_compare(self.quantity, self.product_uom_qty, precision_rounding=rounding) > 0:
-            # create the extra moves
-            extra_move_quantity = float_round(
-                self.quantity - self.product_uom_qty,
-                precision_rounding=rounding,
-                rounding_method='HALF-UP')
-            extra_move_vals = self._prepare_extra_move_vals(extra_move_quantity)
-            self = self.with_context(avoid_putaway_rules=True, extra_move_mode=True)
-            extra_move = self.copy(default=extra_move_vals)
-            return extra_move.with_context(merge_extra=True, do_not_unreserve=True)._action_confirm(merge_into=self)
-        return self
-
-    def _check_unlink_move_dest(self):
-        """ For each move in self, check if the location_dest_id of move is outside
-            (!= and not a child of) the source location of move_dest_ids,
-            if so, break the link.
-        """
-        moves_to_push = self.env['stock.move']
-        moves_to_mts = self.env['stock.move']
-        for move in self:
-            move_dest_ids_to_unlink = move.move_dest_ids.filtered(
-                lambda m: move.location_dest_id != m.location_id and str(m.location_id.id) not in move.location_dest_id.parent_path.split('/')
-            )
-            move_dest_ids_to_unlink.move_orig_ids = [Command.unlink(move.id)]
-            if move_dest_ids_to_unlink:
-                moves_to_push |= move
-            moves_to_mts |= move_dest_ids_to_unlink
-        moves_to_mts.procure_method = 'make_to_stock'
-        moves_to_mts._recompute_state()
-        if moves_to_push:
-            new_push_moves = moves_to_push._push_apply()
-            new_push_moves._action_confirm()
+    def _skip_push(self):
+        return self.is_inventory or self.move_dest_ids and any(m.location_id._child_of(self.location_dest_id) for m in self.move_dest_ids) or\
+            self.location_final_id and self.location_final_id._child_of(self.location_dest_id)
 
     def _action_done(self, cancel_backorder=False):
         moves = self.filtered(
@@ -1826,7 +1811,6 @@ Please change the quantity done or the rounding precision of your unit of measur
             or float_is_zero(move.product_uom_qty, precision_digits=move.product_uom.rounding)
         )._action_confirm(merge=False)  # MRP allows scrapping draft moves
         moves = (self | moves).exists().filtered(lambda x: x.state not in ('done', 'cancel'))
-        moves_ids_todo = OrderedSet()
 
         # Cancel moves where necessary ; we should do it before creating the extra moves because
         # this operation could trigger a merge of moves.
@@ -1841,15 +1825,10 @@ Please change the quantity done or the rounding precision of your unit of measur
                     move._action_cancel()
         self.env['stock.move.line'].browse(ml_ids_to_unlink).unlink()
 
-        # Create extra moves where necessary
-        for move in moves:
-            if move.state == 'cancel' or (move.quantity <= 0 and not move.is_inventory):
-                continue
-            if not move.picked:
-                continue
-            moves_ids_todo |= move._create_extra_move().ids
+        moves_todo = moves.filtered(lambda m:
+            not (m.state == 'cancel' or (m.quantity <= 0 and not m.is_inventory) or not m.picked)
+        )
 
-        moves_todo = self.browse(moves_ids_todo)
         moves_todo._check_company()
         if not cancel_backorder:
             moves_todo._create_backorder()
@@ -1871,7 +1850,9 @@ Please change the quantity done or the rounding precision of your unit of measur
         # Break move dest link if move dest and move_dest source are not the same,
         # so that when move_dests._action_assign is called, the move lines are not created with
         # the new location, they should not be created at all.
-        moves_todo._check_unlink_move_dest()
+        moves_to_push = moves_todo.filtered(lambda m: not m._skip_push())
+        if moves_to_push:
+            moves_to_push._push_apply()
         for move_dest in moves_todo.move_dest_ids:
             move_dests_per_company[move_dest.company_id.id] |= move_dest
         for company_id, move_dests in move_dests_per_company.items():
@@ -2278,3 +2259,8 @@ Please change the quantity done or the rounding precision of your unit of measur
         else:
             raise UserError(_('Operation not supported'))
         return len(moves) == len(self)
+
+    def _break_mto_link(self, parent_move):
+        self.move_orig_ids = [Command.unlink(parent_move.id)]
+        self.procure_method = 'make_to_stock'
+        self._recompute_state()

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -799,19 +799,6 @@ class Picking(models.Model):
                     'message': partner.picking_warn_msg
                 }}
 
-    @api.onchange('location_id', 'location_dest_id')
-    def _onchange_locations(self):
-        (self.move_ids | self.move_ids_without_package).update({
-            "location_id": self.location_id,
-            "location_dest_id": self.location_dest_id
-        })
-        if self._origin.location_id != self.location_id and any(line.quantity for line in self.move_ids.move_line_ids):
-            return {'warning': {
-                    'title': 'Locations to update',
-                    'message': _("You might want to update the locations of this transfer's operations")
-                    }
-            }
-
     @api.model_create_multi
     def create(self, vals_list):
         scheduled_dates = []

--- a/addons/stock/models/stock_rule.py
+++ b/addons/stock/models/stock_rule.py
@@ -3,13 +3,12 @@
 
 import logging
 from collections import defaultdict, namedtuple
-
 from dateutil.relativedelta import relativedelta
 
 from odoo import SUPERUSER_ID, _, api, fields, models, registry
 from odoo.exceptions import UserError, ValidationError
 from odoo.osv import expression
-from odoo.tools import float_compare, float_is_zero, html_escape
+from odoo.tools import float_compare, float_is_zero
 from odoo.tools.misc import split_every
 
 _logger = logging.getLogger(__name__)
@@ -61,6 +60,10 @@ class StockRule(models.Model):
         domain="[('id', '=?', route_company_id)]")
     location_dest_id = fields.Many2one('stock.location', 'Destination Location', required=True, check_company=True, index=True)
     location_src_id = fields.Many2one('stock.location', 'Source Location', check_company=True, index=True)
+    location_dest_from_rule = fields.Boolean(
+        "Destination location origin from rule", default=False,
+        help="When set to True the destination location of the stock.move will be the rule."
+        "Otherwise, it takes it from the picking type.")
     route_id = fields.Many2one('stock.route', 'Route', required=True, ondelete='cascade', index=True)
     route_company_id = fields.Many2one(related='route_id.company_id', string='Route Company')
     procure_method = fields.Selection([
@@ -139,8 +142,9 @@ class StockRule(models.Model):
         """
         source = self.location_src_id and self.location_src_id.display_name or _('Source Location')
         destination = self.location_dest_id and self.location_dest_id.display_name or _('Destination Location')
+        direct_destination = self.picking_type_id and self.picking_type_id.default_location_dest_id != self.location_dest_id and self.picking_type_id.default_location_dest_id.display_name
         operation = self.picking_type_id and self.picking_type_id.name or _('Operation Type')
-        return source, destination, operation
+        return source, destination, direct_destination, operation
 
     def _get_message_dict(self):
         """ Return a dict with the different possible message used for the
@@ -149,20 +153,22 @@ class StockRule(models.Model):
         purchase_stock in order to complete the dictionary.
         """
         message_dict = {}
-        source, destination, operation = self._get_message_values()
+        source, destination, direct_destination, operation = self._get_message_values()
         if self.action in ('push', 'pull', 'pull_push'):
             suffix = ""
+            if self.action in ('pull', 'pull_push') and direct_destination and not self.location_dest_from_rule:
+                suffix = _("<br>The products will be moved towards <b>%(destination)s</b>, <br/> as specified from <b>%(operation)s</b> destination.", destination=direct_destination, operation=operation)
             if self.procure_method == 'make_to_order' and self.location_src_id:
-                suffix = _("<br>A need is created in <b>%s</b> and a rule will be triggered to fulfill it.", source)
+                suffix += _("<br>A need is created in <b>%s</b> and a rule will be triggered to fulfill it.", source)
             if self.procure_method == 'mts_else_mto' and self.location_src_id:
-                suffix = _("<br>If the products are not available in <b>%s</b>, a rule will be triggered to bring products in this location.", source)
+                suffix += _("<br>If the products are not available in <b>%s</b>, a rule will be triggered to bring products in this location.", source)
             message_dict = {
                 'pull': _('When products are needed in <b>%s</b>, <br/> <b>%s</b> are created from <b>%s</b> to fulfill the need.', destination, operation, source) + suffix,
                 'push': _('When products arrive in <b>%s</b>, <br/> <b>%s</b> are created to send them in <b>%s</b>.', source, operation, destination)
             }
         return message_dict
 
-    @api.depends('action', 'location_dest_id', 'location_src_id', 'picking_type_id', 'procure_method')
+    @api.depends('action', 'location_dest_id', 'location_src_id', 'picking_type_id', 'procure_method', 'location_dest_from_rule')
     def _compute_action_message(self):
         """ Generate dynamicaly a message that describe the rule purpose to the
         end user.
@@ -216,9 +222,12 @@ class StockRule(models.Model):
         if not company_id:
             company_id = self.sudo().warehouse_id and self.sudo().warehouse_id.company_id.id or self.sudo().picking_type_id.warehouse_id.company_id.id
         new_move_vals = {
+            'product_uom_qty': move_to_copy.quantity,
             'origin': move_to_copy.origin or move_to_copy.picking_id.name or "/",
             'location_id': move_to_copy.location_dest_id.id,
             'location_dest_id': self.location_dest_id.id,
+            'location_final_id': move_to_copy.location_final_id.id,
+            'rule_id': self.id,
             'date': new_date,
             'date_deadline': move_to_copy.date_deadline,
             'company_id': company_id,
@@ -342,7 +351,7 @@ class StockRule(models.Model):
             'product_uom_qty': qty_left,
             'partner_id': partner.id if partner else False,
             'location_id': self.location_src_id.id,
-            'location_dest_id': location_dest_id.id,
+            'location_final_id': location_dest_id.id,
             'move_dest_ids': move_dest_ids,
             'rule_id': self.id,
             'procure_method': self.procure_method,
@@ -350,7 +359,7 @@ class StockRule(models.Model):
             'picking_type_id': self.picking_type_id.id,
             'group_id': group_id,
             'route_ids': [(4, route.id) for route in values.get('route_ids', [])],
-            'warehouse_id': self.propagate_warehouse_id.id or self.warehouse_id.id,
+            'warehouse_id': self.warehouse_id.id,
             'date': date_scheduled,
             'date_deadline': False if self.group_propagation_option == 'fixed' else date_deadline,
             'propagate_cancel': self.propagate_cancel,
@@ -359,6 +368,8 @@ class StockRule(models.Model):
             'orderpoint_id': values.get('orderpoint_id') and values['orderpoint_id'].id,
             'product_packaging_id': values.get('product_packaging_id') and values['product_packaging_id'].id,
         }
+        if self.location_dest_from_rule:
+            move_values['location_dest_id'] = self.location_dest_id.id
         for field in self._get_custom_move_fields():
             if field in values:
                 move_values[field] = values.get(field)
@@ -461,7 +472,6 @@ class ProcurementGroup(models.Model):
                 raise UserError('\n'.join(errors))
             else:
                 raise ProcurementException(procurement_errors)
-
         actions_to_run = defaultdict(list)
         procurement_errors = []
         for procurement in procurements:

--- a/addons/stock/models/stock_warehouse.py
+++ b/addons/stock/models/stock_warehouse.py
@@ -689,7 +689,7 @@ class Warehouse(models.Model):
         Route = self.env['stock.route']
         Rule = self.env['stock.rule']
 
-        input_location, output_location = self._get_input_output_locations(self.reception_steps, self.delivery_steps)
+        dummy, output_location = self._get_input_output_locations(self.reception_steps, self.delivery_steps)
         internal_transit_location, external_transit_location = self._get_transit_locations()
 
         for supplier_wh in supplier_warehouses:
@@ -710,9 +710,9 @@ class Warehouse(models.Model):
 
             pull_rules_list = supplier_wh._get_supply_pull_rules_values(
                 [self.Routing(output_location, transit_location, supplier_wh.out_type_id, 'pull')],
-                values={'route_id': inter_wh_route.id})
+                values={'route_id': inter_wh_route.id, 'location_dest_from_rule': True})
             pull_rules_list += self._get_supply_pull_rules_values(
-                [self.Routing(transit_location, input_location, self.in_type_id, 'pull')],
+                [self.Routing(transit_location, self.lot_stock_id, self.in_type_id, 'pull')],
                 values={'route_id': inter_wh_route.id, 'propagate_warehouse_id': supplier_wh.id})
             for pull_rule_vals in pull_rules_list:
                 Rule.create(pull_rule_vals)
@@ -753,23 +753,23 @@ class Warehouse(models.Model):
             warehouse.id: {
                 'one_step': [self.Routing(supplier_loc, warehouse.lot_stock_id, warehouse.in_type_id, 'pull')],
                 'two_steps': [
-                    self.Routing(supplier_loc, warehouse.wh_input_stock_loc_id, warehouse.in_type_id, 'pull'),
-                    self.Routing(warehouse.wh_input_stock_loc_id, warehouse.lot_stock_id, warehouse.int_type_id, 'pull_push')],
+                    self.Routing(supplier_loc, warehouse.lot_stock_id, warehouse.in_type_id, 'pull'),
+                    self.Routing(warehouse.wh_input_stock_loc_id, warehouse.lot_stock_id, warehouse.int_type_id, 'push')],
                 'three_steps': [
-                    self.Routing(supplier_loc, warehouse.wh_input_stock_loc_id, warehouse.in_type_id, 'pull'),
-                    self.Routing(warehouse.wh_input_stock_loc_id, warehouse.wh_qc_stock_loc_id, warehouse.int_type_id, 'pull_push'),
-                    self.Routing(warehouse.wh_qc_stock_loc_id, warehouse.lot_stock_id, warehouse.int_type_id, 'pull_push')],
+                    self.Routing(supplier_loc, warehouse.lot_stock_id, warehouse.in_type_id, 'pull'),
+                    self.Routing(warehouse.wh_input_stock_loc_id, warehouse.wh_qc_stock_loc_id, warehouse.int_type_id, 'push'),
+                    self.Routing(warehouse.wh_qc_stock_loc_id, warehouse.lot_stock_id, warehouse.int_type_id, 'push')],
                 'crossdock': [
                     self.Routing(warehouse.wh_input_stock_loc_id, warehouse.wh_output_stock_loc_id, warehouse.int_type_id, 'pull'),
                     self.Routing(warehouse.wh_output_stock_loc_id, customer_loc, warehouse.out_type_id, 'pull')],
                 'ship_only': [self.Routing(warehouse.lot_stock_id, customer_loc, warehouse.out_type_id, 'pull')],
                 'pick_ship': [
-                    self.Routing(warehouse.lot_stock_id, warehouse.wh_output_stock_loc_id, warehouse.pick_type_id, 'pull'),
-                    self.Routing(warehouse.wh_output_stock_loc_id, customer_loc, warehouse.out_type_id, 'pull')],
+                    self.Routing(warehouse.lot_stock_id, customer_loc, warehouse.pick_type_id, 'pull'),
+                    self.Routing(warehouse.wh_output_stock_loc_id, customer_loc, warehouse.out_type_id, 'push')],
                 'pick_pack_ship': [
-                    self.Routing(warehouse.lot_stock_id, warehouse.wh_pack_stock_loc_id, warehouse.pick_type_id, 'pull'),
-                    self.Routing(warehouse.wh_pack_stock_loc_id, warehouse.wh_output_stock_loc_id, warehouse.pack_type_id, 'pull'),
-                    self.Routing(warehouse.wh_output_stock_loc_id, customer_loc, warehouse.out_type_id, 'pull')],
+                    self.Routing(warehouse.lot_stock_id, customer_loc, warehouse.pick_type_id, 'pull'),
+                    self.Routing(warehouse.wh_pack_stock_loc_id, warehouse.wh_output_stock_loc_id, warehouse.pack_type_id, 'push'),
+                    self.Routing(warehouse.wh_output_stock_loc_id, customer_loc, warehouse.out_type_id, 'push')],
                 'company_id': warehouse.company_id.id,
             } for warehouse in self
         }
@@ -784,10 +784,10 @@ class Warehouse(models.Model):
         """
         return {
             'one_step': [],
-            'two_steps': [self.Routing(self.wh_input_stock_loc_id, self.lot_stock_id, self.int_type_id, 'pull_push')],
+            'two_steps': [self.Routing(self.wh_input_stock_loc_id, self.lot_stock_id, self.int_type_id, 'push')],
             'three_steps': [
-                self.Routing(self.wh_input_stock_loc_id, self.wh_qc_stock_loc_id, self.int_type_id, 'pull_push'),
-                self.Routing(self.wh_qc_stock_loc_id, self.lot_stock_id, self.int_type_id, 'pull_push')],
+                self.Routing(self.wh_input_stock_loc_id, self.wh_qc_stock_loc_id, self.int_type_id, 'push'),
+                self.Routing(self.wh_qc_stock_loc_id, self.lot_stock_id, self.int_type_id, 'push')],
         }
 
     def _get_inter_warehouse_route_values(self, supplier_warehouse):
@@ -838,7 +838,7 @@ class Warehouse(models.Model):
     def _get_supply_pull_rules_values(self, route_values, values=None):
         pull_values = {}
         pull_values.update(values)
-        pull_values.update({'active': True})
+        pull_values['active'] = True
         rules_list = self._get_rule_values(route_values, values=pull_values)
         for pull_rules in rules_list:
             pull_rules['procure_method'] = self.lot_stock_id.id != pull_rules['location_src_id'] and 'make_to_order' or 'make_to_stock'  # first part of the resuply route is MTS
@@ -847,9 +847,7 @@ class Warehouse(models.Model):
     def _update_reception_delivery_resupply(self, reception_new, delivery_new):
         """ Check if we need to change something to resupply warehouses and associated MTO rules """
         for warehouse in self:
-            input_loc, output_loc = warehouse._get_input_output_locations(reception_new, delivery_new)
-            if reception_new and warehouse.reception_steps != reception_new and (warehouse.reception_steps == 'one_step' or reception_new == 'one_step'):
-                warehouse._check_reception_resupply(input_loc)
+            dummy, output_loc = warehouse._get_input_output_locations(reception_new, delivery_new)
             if delivery_new and warehouse.delivery_steps != delivery_new and (warehouse.delivery_steps == 'ship_only' or delivery_new == 'ship_only'):
                 change_to_multiple = warehouse.delivery_steps == 'ship_only'
                 warehouse._check_delivery_resupply(output_loc, change_to_multiple)
@@ -880,18 +878,6 @@ class Warehouse(models.Model):
                 ('action', '!=', 'push'),
                 ('location_src_id', '=', self.lot_stock_id.id)]).write({'active': False})
 
-    def _check_reception_resupply(self, new_location):
-        """ Check routes being delivered by the warehouses (resupply routes) and
-        change their rule coming from the transit location """
-        routes = self.env['stock.route'].search([('supplied_wh_id', 'in', self.ids)])
-        self.env['stock.rule'].search([
-            '&',
-                ('route_id', 'in', routes.ids),
-                '&',
-                    ('action', '!=', 'push'),
-                    ('location_src_id.usage', '=', 'transit')
-        ]).write({'location_dest_id': new_location.id})
-
     def _update_name_and_code(self, new_name=False, new_code=False):
         if new_code:
             self.mapped('lot_stock_id').mapped('location_id').write({'name': new_code})
@@ -948,8 +934,7 @@ class Warehouse(models.Model):
             },
             'pack_type_id': {
                 'active': self.delivery_steps == 'pick_pack_ship' and self.active,
-                'default_location_dest_id': output_loc.id if self.delivery_steps == 'pick_ship' else self.wh_pack_stock_loc_id.id,
-
+                'default_location_dest_id': output_loc.id,
                 'barcode': self.code.replace(" ", "").upper() + "-PACK",
             },
             'int_type_id': {
@@ -977,7 +962,6 @@ class Warehouse(models.Model):
                 'name': _('Delivery Orders'),
                 'code': 'outgoing',
                 'use_create_lots': False,
-                'default_location_dest_id': False,
                 'sequence': max_sequence + 5,
                 'sequence_code': 'OUT',
                 'print_label': True,
