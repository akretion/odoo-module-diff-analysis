PR: https://github.com/odoo/odoo/pull/

From: eed8a3468639aff82360a7552f9c7a1216b89345
From: Denis Vermylen (dve)
Date: 2017-01-03 18:04:34

Structural Changes: 16
Total Changes: 153

[IMP] crm_*, sale_*: sales channel dashboard

        Functional
        ==========

Sales teams become sales channels. Their dashboard cards now include a graph
displaying customizable data for managers (comparable to those in accounting).

By default, you now have the following sales channels (non-demo):

      Direct Sales      (with installation of crm or sale)

  Sales Channel type: Sales
  Works same as before, what's changed is:
    - their cards display one big button directing to the start of their
      workflow
    - the links on the right-hand side have been reworked, and are only
      displayed when there is at least one item requiring attention.
    - 'More' tab remains unchanged.

      Website           (with installation of website_sale)

  Sales Channel type: Website
  Differences lies in the links displayed in the dashboard card:
    - it displays abandoned carts, awaiting payments and payments to capture
  Default Channel linked to all sales made from the eCommerce.

      Point of Sale     (with installation of sale and point_of_sale
                                              -> auto-installs pos_sale)

  Sales Channel type: Point of Sale
  Linked to pos.configs and their pos.sessions and pos.orders.
    - only links to their linked pos.config dashboard and open sessions
    - can't use opportunities, lead or invoicing and can only display
      pos.order data in the graph.
  Default Channel linked to the default pos.config.

        Technical
        =========

- Add a channel type: sales, pos, website that have different actions/settings
- Add a graphs to the kanban cards in the sales/crm dashboard, configurable in
  the form view in the new dashboard page.
- Rename sales teams to sales channels, rename and add default and demo sales
  channels
- Change dashboard links depending on the channel type and add a related
  computed fields on crm.team
- Rename strings and improve channel form view.
- Leads are now checked by default once activated for 'sales' type channels
- Disable checking "leads" without using "opportunities".
- Hide invoicing and invoicing target depending on channel type.
- Move currency_id to sales_team

================================= pseudo patch: =================================

--- a/addons/crm/models/crm_lead.py
+++ b/addons/crm/models/crm_lead.py
@@ -74,8 +74,8 @@ class Lead(models.Model):
     date_action_next = fields.Datetime('Next Action', readonly=True)
     email_from = fields.Char('Email', help="Email address of the contact", index=True)
     website = fields.Char('Website', index=True, help="Website of the contact")
-    team_id = fields.Many2one('crm.team', string='Sales Team', oldname='section_id', default=lambda self: self.env['crm.team'].sudo()._get_default_team_id(user_id=self.env.uid),
-        index=True, track_visibility='onchange', help='When sending mails, the default email address is taken from the sales team.')
+    team_id = fields.Many2one('crm.team', string='Sales Channel', oldname='section_id', default=lambda self: self.env['crm.team'].sudo()._get_default_team_id(user_id=self.env.uid),
+        index=True, track_visibility='onchange', help='When sending mails, the default email address is taken from the sales channel.')
     kanban_state = fields.Selection([('grey', 'No next activity planned'), ('red', 'Next activity late'), ('green', 'Next activity is planned')],
         string='Activity State', compute='_compute_kanban_state')
     email_cc = fields.Text('Global CC', help="These email addresses will be added to the CC field of all inbound and outbound emails for this record before being sent. Separate multiple email addresses with a comma")
@@ -267,7 +267,7 @@ class Lead(models.Model):
 
     @api.model
     def create(self, vals):
-        # set up context used to find the lead's sales team which is needed
+        # set up context used to find the lead's sales channel which is needed
         # to correctly set the default stage_id
         context = dict(self._context or {})
         if vals.get('type') and not self._context.get('default_type'):
@@ -566,7 +566,7 @@ class Lead(models.Model):
             The resulting lead/opportunity will be the most important one (based on its confidence level)
             updated with values from other opportunities to merge.
             :param user_id : the id of the saleperson. If not given, will be determined by `_merge_data`.
-            :param team : the id of the sales team. If not given, will be determined by `_merge_data`.
+            :param team : the id of the sales channel. If not given, will be determined by `_merge_data`.
             :return crm.lead record resulting of th merge
         """
         if len(self.ids) <= 1:
@@ -590,7 +590,7 @@ class Lead(models.Model):
         # the first (head opp) will be a priority.
         merged_data = opportunities._merge_data(list(CRM_LEAD_FIELDS_TO_MERGE))
 
-        # force value for saleperson and sales team
+        # force value for saleperson and sales channel
         if user_id:
             merged_data['user_id'] = user_id
         if team_id:
@@ -599,7 +599,7 @@ class Lead(models.Model):
         # merge other data (mail.message, attachments, ...) from tail into head
         opportunities_head.merge_dependences(opportunities_tail)
 
-        # check if the stage is in the stages of the sales team. If not, assign the stage with the lowest sequence
+        # check if the stage is in the stages of the sales channel. If not, assign the stage with the lowest sequence
         if merged_data.get('team_id'):
             team_stage_ids = self.env['crm.stage'].search(['|', ('team_id', '=', merged_data['team_id']), ('team_id', '=', False)], order='sequence')
             if merged_data.get('stage_id') not in team_stage_ids.ids:
@@ -645,7 +645,7 @@ class Lead(models.Model):
     def _convert_opportunity_data(self, customer, team_id=False):
         """ Extract the data from a lead to create the opportunity
             :param customer : res.partner record
-            :param team_id : identifier of the sales team to determine the stage
+            :param team_id : identifier of the sales channel to determine the stage
         """
         if not team_id:
             team_id = self.team_id.id if self.team_id else False
@@ -868,7 +868,7 @@ class Lead(models.Model):
         return self.message_post(body=message)
 
     # ----------------------------------------
-    # Sales Team Dashboard
+    # Sales Channel Dashboard
     # ----------------------------------------
 
     @api.model

--- a/addons/crm/models/crm_stage.py
+++ b/addons/crm/models/crm_stage.py
@@ -25,7 +25,7 @@ class Stage(models.Model):
     @api.model
     def default_get(self, fields):
         """ Hack :  when going from the pipeline, creating a stage with a sales team in
-            context should not create a stage for the current sales team only
+            context should not create a stage for the current sales channel only
         """
         ctx = dict(self.env.context)
         if ctx.get('default_team_id') and not ctx.get('crm_team_mono'):

--- a/addons/crm/models/crm_team.py
+++ b/addons/crm/models/crm_team.py
@@ -1,8 +1,11 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models
+from dateutil.relativedelta import relativedelta
+
+from odoo import api, fields, models, _
 from odoo.tools.safe_eval import safe_eval
+from odoo.exceptions import ValidationError
 
 
 class Team(models.Model):
@@ -10,11 +13,42 @@ class Team(models.Model):
     _inherit = ['mail.alias.mixin', 'crm.team']
 
     resource_calendar_id = fields.Many2one('resource.calendar', string="Working Time", help="Used to compute open days")
-    use_leads = fields.Boolean('Leads',
-        help="The first contact you get with a potential customer is a lead you qualify before converting it into a real business opportunity. Check this box to manage leads in this sales team.")
-    use_opportunities = fields.Boolean('Opportunities', default=True, help="Check this box to manage opportunities in this sales team.")
-    alias_id = fields.Many2one('mail.alias', string='Alias', ondelete="restrict", required=True, help="The email address associated with this team. New emails received will automatically create new leads assigned to the team.")
+    use_leads = fields.Boolean('Leads', help="The first contact you get with a potential customer is a lead you qualify before converting it into a real "
+                                             "business opportunity. Check this box to assign leads to this sales channel.")
+    use_opportunities = fields.Boolean('Pipeline', help="Check this box to manage opportunities in this sales channel.")
+    alias_id = fields.Many2one('mail.alias', string='Alias', ondelete="restrict", required=True, help="The email address associated with this channel. New emails received will automatically create new leads assigned to the channel.")
+    unassigned_leads_count = fields.Integer(
+        compute='_compute_unassigned_leads_count',
+        string='Unassigned Leads', readonly=True)
+    opportunities_count = fields.Integer(
+        compute='_compute_opportunities',
+        string='Number of open opportunities', readonly=True)
+    opportunities_amount = fields.Integer(
+        compute='_compute_opportunities',
+        string='Amount of quotations to invoice', readonly=True)
+    dashboard_graph_model = fields.Selection(selection_add=[('pipeline', 'Pipeline')])
+
+    def _compute_unassigned_leads_count(self):
+        leads_data = self.env['crm.lead'].read_group([
+            ('team_id', 'in', self.ids),
+            ('type', '=', 'lead'),
+            ('user_id', '=', False),
+        ], ['team_id'], ['team_id'])
+        counts = dict((data['team_id'][0], data['team_id_count']) for data in leads_data)
+        for team in self:
+            team.unassigned_leads_count = counts.get(team.id, 0)
 
+    def _compute_opportunities(self):
+        opportunity_data = self.env['crm.opportunity.report'].read_group([
+            ('team_id', 'in', self.ids),
+            ('probability', '<', 100),
+            ('type', '=', 'opportunity'),
+        ], ['expected_revenue', 'team_id'], ['team_id'])
+        counts = dict((data['team_id'][0], data['team_id_count']) for data in opportunity_data)
+        amounts = dict((data['team_id'][0], data['expected_revenue']) for data in opportunity_data)
+        for team in self:
+            team.opportunities_count = counts.get(team.id, 0)
+            team.opportunities_amount = amounts.get(team.id, 0)
 
     def get_alias_model_name(self, vals):
         return 'crm.lead'
@@ -31,6 +65,24 @@ class Team(models.Model):
     def _onchange_use_leads_opportunities(self):
         if not self.use_leads and not self.use_opportunities:
             self.alias_name = False
+        if not self.use_opportunities and self.use_leads:
+            self.use_leads = False
+
+    @api.onchange('team_type')
+    def _onchange_team_type(self):
+        if self.team_type == 'sales':
+            self.use_opportunities = True
+            self.use_leads = lambda self: self.user_has_groups('crm.group_use_lead')
+            self.dashboard_graph_model = 'pipeline'
+        else:
+            self.use_opportunities = False
+            self.use_leads = False
+        return super(Team, self)._onchange_team_type()
+
+    @api.constrains('dashboard_graph_model', 'use_opportunities')
+    def _check_graph_model(self):
+        if not self.use_opportunities and self.dashboard_graph_model == 'pipeline':
+            raise ValidationError(_("Dashboard graph content cannot be Pipeline if the sales channel doesn't use it. (Pipeline is unchecked.)"))
 
     @api.model
     def create(self, vals):
@@ -55,11 +107,11 @@ class Team(models.Model):
         if not user_team_id:
             user_team_id = self.search([], limit=1).id
             action['help'] = """<p class='oe_view_nocontent_create'>Click here to add new opportunities</p><p>
-    Looks like you are not a member of a sales team. You should add yourself
-    as a member of one of the sales team.
+    Looks like you are not a member of a sales channel. You should add yourself
+    as a member of one of the sales channel.
 </p>"""
             if user_team_id:
-                action['help'] += "<p>As you don't belong to any sales team, Odoo opens the first one by default.</p>"
+                action['help'] += "<p>As you don't belong to any sales channel, Odoo opens the first one by default.</p>"
 
         action_context = safe_eval(action['context'], {'uid': self.env.uid})
         if user_team_id:
@@ -78,3 +130,64 @@ class Team(models.Model):
             ]
         action['context'] = action_context
         return action
+
+    def _compute_dashboard_button_name(self):
+        opportunity_teams = self.filtered('use_opportunities')
+        opportunity_teams.update({'dashboard_button_name': _("Pipeline")})
+        super(Team, self - opportunity_teams)._compute_dashboard_button_name()
+
+    def action_primary_channel_button(self):
+        if self.use_opportunities:
+            action = self.env.ref('crm.crm_case_form_view_salesteams_opportunity').read()[0]
+            return action
+        return super(Team, self).action_primary_channel_button()
+
+    def _graph_get_dates(self, today):
+        """ return a coherent start and end date for the dashboard graph according to the graph settings.
+        """
+        if self.dashboard_graph_model == 'pipeline':
+            if self.dashboard_graph_group == 'month':
+                start_date = today.replace(day=1)
+            elif self.dashboard_graph_group == 'week':
+                start_date = today - relativedelta(days=today.isocalendar()[2] - 1)
+            else:
+                start_date = today
+
+            if self.dashboard_graph_period == 'week':
+                end_date = today + relativedelta(weeks=1)
+            elif self.dashboard_graph_period == 'year':
+                end_date = today + relativedelta(years=1)
+            else:
+                end_date = today + relativedelta(months=1)
+
+            # we take the end of the preceding month/week/day if we group by month/week/day
+            # (to avoid having twice the same month/week/day from different years/month/week)
+            if self.dashboard_graph_group == 'month':
+                end_date = end_date.replace(day=1) - relativedelta(days=1)
+            elif self.dashboard_graph_group == 'week':
+                end_date -= relativedelta(days=end_date.isocalendar()[2])
+            else:
+                end_date -= relativedelta(days=1)
+
+            return [start_date, end_date]
+        return super(Team, self)._graph_get_dates(today)
+
+    def _graph_date_column(self):
+        if self.dashboard_graph_model == 'pipeline':
+            return 'date_deadline'
+        return super(Team, self)._graph_date_column()
+
+    def _graph_y_query(self):
+        if self.dashboard_graph_model == 'pipeline':
+            return 'SUM(expected_revenue)'
+        return super(Team, self)._graph_y_query()
+
+    def _graph_sql_table(self):
+        if self.dashboard_graph_model == 'pipeline':
+            return 'crm_opportunity_report'
+        return super(Team, self)._graph_sql_table()
+
+    def _graph_title_and_key(self):
+        if self.dashboard_graph_model == 'pipeline':
+            return [_('Pipeline'), _('Expected Revenue')]
+        return super(Team, self)._graph_title_and_key()

--- a/addons/crm/models/res_config.py
+++ b/addons/crm/models/res_config.py
@@ -7,8 +7,8 @@ from odoo import api, fields, models
 class CRMSettings(models.TransientModel):
     _inherit = 'sale.config.settings'
 
-    generate_sales_team_alias = fields.Boolean("Automatically generate an email alias at the sales team creation",
-        help="Odoo will generate an email alias based on the sales team name")
+    generate_sales_team_alias = fields.Boolean("Automatically generate an email alias at the sales channel creation",
+        help="Odoo will generate an email alias based on the sales channel name")
     alias_prefix = fields.Char('Default Alias Name for Leads')
     alias_domain = fields.Char('Alias Domain', default=lambda self: self.env["ir.config_parameter"].sudo().get_param("mail.catchall.domain"))
     default_generate_lead_from_alias = fields.Boolean(default_model='sale.config.settings')

--- a/addons/crm/models/res_partner.py
+++ b/addons/crm/models/res_partner.py
@@ -8,7 +8,7 @@ class Partner(models.Model):
 
     _inherit = 'res.partner'
 
-    team_id = fields.Many2one('crm.team', string='Sales Team', oldname='section_id')
+    team_id = fields.Many2one('crm.team', string='Sales Channel', oldname='section_id')
     opportunity_ids = fields.One2many('crm.lead', 'partner_id', string='Opportunities', domain=[('type', '=', 'opportunity')])
     meeting_ids = fields.Many2many('calendar.event', 'calendar_event_res_partner_rel', 'res_partner_id', 'calendar_event_id', string='Meetings')
     opportunity_count = fields.Integer("Opportunity", compute='_compute_opportunity_count')
