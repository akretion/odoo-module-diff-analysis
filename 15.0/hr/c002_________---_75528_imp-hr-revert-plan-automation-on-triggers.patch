PR: https://github.com/odoo/odoo/pull/75528

From: b320c789a02bfc9bc808232a19730d0d80973db3
From: sofiagvaladze
Date: 2021-08-27 17:43:23

Breaking data model changes scores: del:9 + add:0, change matches:
-    deadline_type = fields.Selection(
-    deadline_days = fields.Integer(string='Days Deadline')
-    company_id = fields.Many2one(
-    plan_type = fields.Selection(
-    trigger_onboarding = fields.Selection(
-    trigger_offboarding = fields.Selection(
-    trigger_other = fields.Selection(
-    trigger = fields.Char(default='manual', compute='_compute_trigger', store=True)
-    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company)

Total Changes: 173

[IMP] hr:revert plan automation on triggers

task - 2628793

closes odoo/odoo#75528

Related: odoo/enterprise#20430
Related: odoo/upgrade#2776
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr/models/hr_employee.py
+++ b/addons/hr/models/hr_employee.py
@@ -291,15 +291,13 @@ class HrEmployeePrivate(models.Model):
                 ('subscription_department_ids', 'in', employee.department_id.id)
             ])._subscribe_users_automatically()
         # Launch onboarding plans
-        if not employee._launch_plans_from_trigger(trigger='employee_creation'):
-            # Keep the recommend message if no plans are launched
-            url = '/web#%s' % url_encode({
-                'action': 'hr.plan_wizard_action',
-                'active_id': employee.id,
-                'active_model': 'hr.employee',
-                'menu_id': self.env.ref('hr.menu_hr_root').id,
-            })
-            employee._message_log(body=_('<b>Congratulations!</b> May I recommend you to setup an <a href="%s">onboarding plan?</a>') % (url))
+        url = '/web#%s' % url_encode({
+            'action': 'hr.plan_wizard_action',
+            'active_id': employee.id,
+            'active_model': 'hr.employee',
+            'menu_id': self.env.ref('hr.menu_hr_root').id,
+        })
+        employee._message_log(body=_('<b>Congratulations!</b> May I recommend you to setup an <a href="%s">onboarding plan?</a>') % (url))
         return employee
 
     def write(self, vals):
@@ -360,9 +358,6 @@ class HrEmployeePrivate(models.Model):
                     if employee[field] in archived_employees.user_id:
                         employee[field] = False
 
-            # Launch automatic offboarding plans
-            archived_employees._launch_plans_from_trigger(trigger='employee_archive')
-
         if len(self) == 1 and not self.active and not self.env.context.get('no_wizard', False):
             return {
                 'type': 'ir.actions.act_window',
@@ -436,71 +431,6 @@ class HrEmployeePrivate(models.Model):
             self = self.with_user(real_user)
         return self
 
-    def _launch_plans_from_trigger(self, trigger):
-        '''
-        Launches all plans for given trigger
-
-        Returns False if no plans are launched, True otherwise
-        '''
-        plan_ids = self.env['hr.plan'].search([('trigger', '=', trigger)])
-        if not plan_ids or not self:
-            return False
-        #Group plans and employees by company id
-        plans_per_company = defaultdict(lambda: self.env['hr.plan'])
-        for plan_id in plan_ids:
-            plans_per_company[plan_id.company_id.id] |= plan_id
-        employees_per_company = defaultdict(lambda: self.env['hr.employee'])
-        for employee_id in self:
-            employees_per_company[employee_id.company_id.id] |= employee_id
-        #Launch the plans
-        for company_id in employees_per_company:
-            employees_per_company[company_id]._launch_plan(plans_per_company[company_id])
-        return True
-
-    def _launch_plan(self, plan_ids):
-        '''
-        Launch all given plans
-        '''
-        for employee_id in self:
-            for plan_id in plan_ids:
-                employee_id._message_log(
-                    body=_('Plan %s has been launched.', plan_id.name),
-                )
-                errors = []
-                for activity_type in plan_id.plan_activity_type_ids:
-                    responsible = False
-                    try:
-                        responsible = activity_type.get_responsible_id(employee_id)
-                    except UserError as error:
-                        errors.append(_(
-                            'Warning ! The step "%(name)s: %(summary)s" assigned to %(responsible)s '
-                            'could not be started because: "%(error)s"',
-                            name=activity_type.activity_type_id.name,
-                            summary=activity_type.summary,
-                            responsible=activity_type.responsible,
-                            error=str(error)
-                        ))
-                        continue
-
-                    if self.env['hr.employee'].with_user(responsible).check_access_rights('read', raise_exception=False):
-                        if activity_type.deadline_type == 'default':
-                            date_deadline = self.env['mail.activity']._calculate_date_deadline(activity_type.activity_type_id)
-                        elif activity_type.deadline_type == 'plan_active':
-                            date_deadline = fields.Date.context_today(self)
-                        elif activity_type.deadline_type == 'trigger_offset':
-                            date_deadline = fields.Date.add(fields.Date.context_today(self), days=activity_type.deadline_days)
-
-                        employee_id.activity_schedule(
-                            activity_type_id=activity_type.activity_type_id.id,
-                            summary=activity_type.summary,
-                            note=activity_type.note,
-                            user_id=responsible.id,
-                            date_deadline=date_deadline,
-                        )
-                employee_id._message_log(
-                    body='<br/>'.join(errors),
-                )
-
     def _get_unusual_days(self, date_from, date_to=None):
         # Checking the calendar directly allows to not grey out the leaves taken
         # by the employee

--- a/addons/hr/models/hr_plan.py
+++ b/addons/hr/models/hr_plan.py
@@ -10,12 +10,6 @@ class HrPlanActivityType(models.Model):
     _description = 'Plan activity type'
     _rec_name = 'summary'
 
-    _sql_constraints = [
-        (
-            'check_deadline_days', 'CHECK (COALESCE(deadline_days) >= 0)',
-            'Days deadline must be positive.'
-        ),
-    ]
 
     activity_type_id = fields.Many2one(
         'mail.activity.type', 'Activity Type',
@@ -29,24 +23,10 @@ class HrPlanActivityType(models.Model):
         ('manager', 'Manager'),
         ('employee', 'Employee'),
         ('other', 'Other')], default='employee', string='Responsible', required=True)
+    # sgv todo change back to 'Responsible Person'
     responsible_id = fields.Many2one('res.users', 'Name', help='Specific responsible of activity if not linked to the employee.')
     note = fields.Html('Note')
-    deadline_type = fields.Selection(
-        [
-            ('default', 'Default value'),
-            ('plan_active', "At plan's activation"),
-            ('trigger_offset', 'Days after activation trigger'),
-        ],
-        string='Activity Deadline',
-        default='default',
-        required=True,
-    )
-    deadline_days = fields.Integer(string='Days Deadline')
-    company_id = fields.Many2one(
-         'res.company',
-         string='Company',
-         default=lambda self: self.env.company,
-     )
+
 
     @api.depends('activity_type_id')
     def _compute_default_summary(self):
@@ -85,68 +65,3 @@ class HrPlan(models.Model):
     name = fields.Char('Name', required=True)
     plan_activity_type_ids = fields.Many2many('hr.plan.activity.type', string='Activities')
     active = fields.Boolean(default=True)
-    plan_type = fields.Selection(
-        [
-            ('onboarding', 'Onboarding'),
-            ('offboarding', 'Offboarding'),
-            ('other', 'Other'),
-        ], string='Type', default='onboarding', required=True,
-    )
-    trigger_onboarding = fields.Selection(
-        [
-            ('manual', 'Manual'),
-            ('employee_creation', 'Employee Creation'),
-        ], compute='_compute_triggers', inverse='_inverse_triggers',
-        required=True, readonly=False,
-    )
-    trigger_offboarding = fields.Selection(
-        [
-            ('manual', 'Manual'),
-            ('employee_archive', 'Archived Employee'),
-        ], compute='_compute_triggers', inverse='_inverse_triggers',
-        required=True, readonly=False,
-    )
-    trigger_other = fields.Selection(
-        [
-            ('manual', 'Manual'),
-        ], compute='_compute_triggers', inverse='_inverse_triggers',
-        required=True, readonly=False,
-    )
-    trigger = fields.Char(default='manual', compute='_compute_trigger', store=True)
-    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company)
-
-    @api.depends('trigger')
-    def _compute_triggers(self):
-        trigger_types = {'trigger_onboarding', 'trigger_offboarding', 'trigger_other'}
-        type_to_trigger = {
-            'onboarding': 'trigger_onboarding',
-            'offboarding': 'trigger_offboarding',
-            'other': 'trigger_other',
-        }
-        for record in self:
-            #trigger for active
-            record[type_to_trigger[record.plan_type]] = record.trigger or 'manual'
-            #'manual' for all others
-            for disabled_trigger in trigger_types - {type_to_trigger[record.plan_type]}:
-                record[disabled_trigger] = 'manual'
-
-    def _inverse_triggers(self):
-        type_to_trigger = {
-            'onboarding': 'trigger_onboarding',
-            'offboarding': 'trigger_offboarding',
-            'other': 'trigger_other',
-        }
-        for record in self:
-            # or 'manual' required is for trigger_other since it can not be changed it's always False here
-            record.trigger = record[type_to_trigger[record.plan_type]] or 'manual'
-
-    @api.depends('plan_type')
-    def _compute_trigger(self):
-        # In case only plan_type changes
-        type_to_trigger = {
-            'onboarding': 'trigger_onboarding',
-            'offboarding': 'trigger_offboarding',
-            'other': 'trigger_other',
-        }
-        for record in self:
-            record.trigger = record[type_to_trigger[record.plan_type]] or 'manual'
