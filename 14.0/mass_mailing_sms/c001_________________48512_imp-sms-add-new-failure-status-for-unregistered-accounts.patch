PR: https://github.com/odoo/odoo/pull/48512

From: 7287800101ba6d054960b906da3a5a538abcb02f
From: RÃ©mi Rahir
Date: 2020-05-12 16:39:40

Structural Changes: 2
Total Changes: 33

[IMP] sms: Add new failure status for unregistered accounts

Since January 2020, users are required to validate their IAP account via
SMS code validation. This new behaviour needed to be properly ported to
the client to correctly inform the user.

This commit adds support of a new failure_type: 'Unregistered Account'.

Task #2209567

closes odoo/odoo#48512

Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/mass_mailing_sms/models/mailing_mailing.py
+++ b/addons/mass_mailing_sms/models/mailing_mailing.py
@@ -28,8 +28,11 @@ class Mailing(models.Model):
     body_plaintext = fields.Text('SMS Body', compute='_compute_body_plaintext', store=True, readonly=False)
     sms_template_id = fields.Many2one('sms.template', string='SMS Template', ondelete='set null')
     sms_has_insufficient_credit = fields.Boolean(
-        'Insufficient IAP credits', compute='_compute_sms_has_insufficient_credit',
+        'Insufficient IAP credits', compute='_compute_sms_has_iap_failure',
         help='UX Field to propose to buy IAP credits')
+    sms_has_unregistered_account = fields.Boolean(
+        'Unregistered IAP account', compute='_compute_sms_has_iap_failure',
+        help='UX Field to propose to Register the SMS IAP account')
     sms_force_send = fields.Boolean(
         'Send Directly', help='Use at your own risks.')
     # opt_out_link
@@ -51,14 +54,25 @@ class Mailing(models.Model):
                 mailing.body_plaintext = mailing.sms_template_id.body
 
     @api.depends('mailing_trace_ids.failure_type')
-    def _compute_sms_has_insufficient_credit(self):
-        mailing_ids = self.env['mailing.trace'].sudo().search([
-            ('mass_mailing_id', 'in', self.ids),
-            ('trace_type', '=', 'sms'),
-            ('failure_type', '=', 'sms_credit')
-        ]).mapped('mass_mailing_id')
-        for mailing in self:
-            mailing.sms_has_insufficient_credit = mailing in mailing_ids
+    def _compute_sms_has_iap_failure(self):
+        failures = ['sms_acc', 'sms_credit'] 
+        if not self.ids:
+            self.sms_has_insufficient_credit = self.sms_has_unregistered_account = False
+        else:
+            traces = self.env['mailing.trace'].sudo().read_group([
+                        ('mass_mailing_id', 'in', self.ids),
+                        ('trace_type', '=', 'sms'),
+                        ('failure_type', 'in', failures)
+            ], ['mass_mailing_id', 'failure_type'], ['mass_mailing_id', 'failure_type'], lazy=False)
+
+            trace_dict = dict.fromkeys(self.ids, {key: False for key in failures})
+            for t in traces:
+                trace_dict[t['mass_mailing_id'][0]][t['failure_type']] =  t['__count'] and True or False
+
+            for mail in self:
+                mail.sms_has_insufficient_credit = trace_dict[mail.id]['sms_credit']
+                mail.sms_has_unregistered_account = trace_dict[mail.id]['sms_acc']
+
 
     # --------------------------------------------------
     # BUSINESS / VIEWS ACTIONS

--- a/addons/mass_mailing_sms/models/mailing_trace.py
+++ b/addons/mass_mailing_sms/models/mailing_trace.py
@@ -32,6 +32,7 @@ class MailingTrace(models.Model):
         ('sms_number_format', 'Wrong Number Format'),
         ('sms_credit', 'Insufficient Credit'),
         ('sms_server', 'Server Error'),
+        ('sms_acc', 'Unregistered Account'),
         # mass mode specific codes
         ('sms_blacklist', 'Blacklisted'),
         ('sms_duplicate', 'Duplicate'),
