PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:4 + add:0, change matches:
-    _inherit = 'event.type.ticket'
-    _inherit = 'mail.template'
-    _inherit = 'res.config.settings'
-    _inherit = 'res.partner'

Total Changes: 33

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/event/models/event_event.py
+++ b/addons/event/models/event_event.py
@@ -27,7 +27,6 @@ except ImportError:
 
 
 class EventType(models.Model):
-    _name = 'event.type'
     _description = 'Event Template'
     _order = 'sequence, id'
 
@@ -92,7 +91,6 @@ class EventType(models.Model):
 
 class EventEvent(models.Model):
     """Event"""
-    _name = 'event.event'
     _description = 'Event'
     _inherit = ['mail.thread', 'mail.activity.mixin']
     _order = 'date_begin, id'

--- a/addons/event/models/event_mail.py
+++ b/addons/event/models/event_mail.py
@@ -23,10 +23,10 @@ _INTERVALS = {
     'now': lambda interval: relativedelta(hours=0),
 }
 
+
 class EventTypeMail(models.Model):
     """ Template of event.mail to attach to event.type. Those will be copied
     upon all events created in that type to ease event creation. """
-    _name = 'event.type.mail'
     _description = 'Mail Scheduling on Event Category'
 
     event_type_id = fields.Many2one(
@@ -60,11 +60,11 @@ class EventTypeMail(models.Model):
             'template_ref': '%s,%i' % (self.template_ref._name, self.template_ref.id),
         }
 
-class EventMailScheduler(models.Model):
+
+class EventMail(models.Model):
     """ Event automated mailing. This model replaces all existing fields and
     configuration allowing to send emails on events since Odoo 9. A cron exists
     that periodically checks for mailing to run. """
-    _name = 'event.mail'
     _rec_name = 'event_id'
     _description = 'Event Automated Mailing'
 

--- a/addons/event/models/event_mail_registration.py
+++ b/addons/event/models/event_mail_registration.py
@@ -9,7 +9,6 @@ _logger = logging.getLogger(__name__)
 
 
 class EventMailRegistration(models.Model):
-    _name = 'event.mail.registration'
     _description = 'Registration Mail Scheduler'
     _rec_name = 'scheduler_id'
     _order = 'scheduled_date DESC, id ASC'

--- a/addons/event/models/event_question.py
+++ b/addons/event/models/event_question.py
@@ -5,7 +5,6 @@ from odoo.exceptions import UserError
 
 
 class EventQuestion(models.Model):
-    _name = 'event.question'
     _rec_name = 'title'
     _order = 'sequence,id'
     _description = 'Event Question'

--- a/addons/event/models/event_question_answer.py
+++ b/addons/event/models/event_question_answer.py
@@ -7,7 +7,6 @@ from odoo.exceptions import UserError
 
 class EventQuestionAnswer(models.Model):
     """ Contains suggested answers to a 'simple_choice' event.question. """
-    _name = 'event.question.answer'
     _order = 'sequence,id'
     _description = 'Event Question Answer'
 

--- a/addons/event/models/event_registration.py
+++ b/addons/event/models/event_registration.py
@@ -11,7 +11,6 @@ _logger = logging.getLogger(__name__)
 
 
 class EventRegistration(models.Model):
-    _name = 'event.registration'
     _description = 'Event Registration'
     _inherit = ['mail.thread', 'mail.activity.mixin']
     _order = 'id desc'

--- a/addons/event/models/event_registration_answer.py
+++ b/addons/event/models/event_registration_answer.py
@@ -6,7 +6,6 @@ from odoo import api, fields, models
 
 class EventRegistrationAnswer(models.Model):
     """ Represents the user input answer for a single event.question """
-    _name = 'event.registration.answer'
     _description = 'Event Registration Answer'
     _rec_names_search = ['value_answer_id', 'value_text_box']
 

--- a/addons/event/models/event_stage.py
+++ b/addons/event/models/event_stage.py
@@ -5,7 +5,6 @@ from odoo import fields, models
 
 
 class EventStage(models.Model):
-    _name = 'event.stage'
     _description = 'Event Stage'
     _order = 'sequence, name'
 

--- a/addons/event/models/event_tag.py
+++ b/addons/event/models/event_tag.py
@@ -7,7 +7,6 @@ from odoo import api, fields, models
 
 
 class EventTagCategory(models.Model):
-    _name = "event.tag.category"
     _description = "Event Tag Category"
     _order = "sequence"
 
@@ -25,7 +24,6 @@ class EventTagCategory(models.Model):
 
 
 class EventTag(models.Model):
-    _name = "event.tag"
     _description = "Event Tag"
     _order = "category_sequence, sequence, id"
 

--- a/addons/event/models/event_ticket.py
+++ b/addons/event/models/event_ticket.py
@@ -8,8 +8,7 @@ from odoo.exceptions import ValidationError, UserError
 from odoo.tools.misc import formatLang
 
 
-class EventTemplateTicket(models.Model):
-    _name = 'event.type.ticket'
+class EventTypeTicket(models.Model):
     _description = 'Event Template Ticket'
     _order = 'sequence, name, id'
 
@@ -43,19 +42,18 @@ class EventTemplateTicket(models.Model):
         return ['sequence', 'name', 'description', 'seats_max']
 
 
-class EventTicket(models.Model):
+class EventEventTicket(models.Model):
     """ Ticket model allowing to have different kind of registrations for a given
     event. Ticket are based on ticket type as they share some common fields
     and behavior. Those models come from <= v13 Odoo event.event.ticket that
     modeled both concept: tickets for event templates, and tickets for events. """
-    _name = 'event.event.ticket'
-    _inherit = 'event.type.ticket'
+    _inherit = ['event.type.ticket']
     _description = 'Event Ticket'
     _order = "event_id, sequence, name, id"
 
     @api.model
     def default_get(self, fields):
-        res = super(EventTicket, self).default_get(fields)
+        res = super().default_get(fields)
         if 'name' in fields and (not res.get('name') or res['name'] == _('Registration')) and self.env.context.get('default_event_name'):
             res['name'] = _('Registration for %s', self.env.context['default_event_name'])
         return res

--- a/addons/event/models/mail_template.py
+++ b/addons/event/models/mail_template.py
@@ -6,7 +6,7 @@ from odoo.osv import expression
 
 
 class MailTemplate(models.Model):
-    _inherit = 'mail.template'
+    _inherit = ['mail.template']
 
     @api.model
     def _search_display_name(self, operator, value):

--- a/addons/event/models/res_config_settings.py
+++ b/addons/event/models/res_config_settings.py
@@ -6,8 +6,9 @@ import binascii
 
 from odoo import _, api, exceptions, fields, models
 
+
 class ResConfigSettings(models.TransientModel):
-    _inherit = 'res.config.settings'
+    _inherit = ['res.config.settings']
 
     def _default_use_google_maps_static_api(self):
         api_key = self.env['ir.config_parameter'].sudo().get_param('google_maps.signed_static_api_key')

--- a/addons/event/models/res_partner.py
+++ b/addons/event/models/res_partner.py
@@ -12,7 +12,7 @@ from odoo import api, fields, models
 
 
 class ResPartner(models.Model):
-    _inherit = 'res.partner'
+    _inherit = ['res.partner']
 
     event_count = fields.Integer(
         '# Events', compute='_compute_event_count', groups='event.group_event_registration_desk')
