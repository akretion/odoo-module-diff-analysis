PR: https://github.com/odoo/odoo/pull/69846

From: d01e5c5cdb748a38b0ed5296ae0f0c68f052f446
From: nounoubensebia
Date: 2021-04-28 14:05:07

Structural Changes: 3
Total Changes: 52

[IMP] calendar, crm, hr_holidays: move meeting stat button to calendar

Move the meeting stat button and kanban pill from CRM to Calendar, purpose is to
allow its usage even if CRM is not installed as this makes more sense since this
field is usually related to Calendar.

Increase query number limit in company leave test, in order to take into account
the newly introduced query in Calendar.

UPG-PR: https://github.com/odoo/upgrade/pull/2423

Task-2514473

closes odoo/odoo#69846

Related: odoo/upgrade#2423
Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/calendar/models/res_partner.py
+++ b/addons/calendar/models/res_partner.py
@@ -9,9 +9,50 @@ from odoo import api, fields, models
 class Partner(models.Model):
     _inherit = 'res.partner'
 
+    meeting_count = fields.Integer("# Meetings", compute='_compute_meeting_count')
+    meeting_ids = fields.Many2many('calendar.event', 'calendar_event_res_partner_rel', 'res_partner_id',
+                                   'calendar_event_id', string='Meetings', copy=False)
+
     calendar_last_notif_ack = fields.Datetime(
         'Last notification marked as read from base Calendar', default=fields.Datetime.now)
 
+    def _compute_meeting_count(self):
+        result = self._compute_meeting()
+        for p in self:
+            p.meeting_count = len(result.get(p.id, []))
+
+    def _compute_meeting(self):
+        if self.ids:
+            all_partners = self.with_context(active_test=False).search([('id', 'child_of', self.ids)])
+            self.env.cr.execute("""
+                SELECT res_partner_id, calendar_event_id, count(1)
+                  FROM calendar_event_res_partner_rel
+                 WHERE res_partner_id IN %s
+              GROUP BY res_partner_id, calendar_event_id
+            """, [tuple(all_partners.ids)])
+            meeting_data = self.env.cr.fetchall()
+
+            # Keep only valid meeting data based on record rules of events
+            events = [row[1] for row in meeting_data]
+            events = self.env['calendar.event'].search([('id', 'in', events)]).ids
+            meeting_data = [m for m in meeting_data if m[1] in events]
+
+            # Create a dict {partner_id: event_ids} and fill with events linked to the partner
+            meetings = {p.id: set() for p in all_partners}
+            for m in meeting_data:
+                meetings[m[0]].add(m[1])
+
+            # Add the events linked to the children of the partner
+            all_partners.read(['parent_id'])
+            for p in all_partners:
+                partner = p
+                while partner:
+                    if partner in self:
+                        meetings[partner.id] |= meetings[p.id]
+                    partner = partner.parent_id
+            return {p.id: list(meetings[p.id]) for p in self}
+        return {}
+
     def get_attendee_detail(self, meeting_ids):
         """ Return a list of dict of the given meetings with the attendees details
             Used by:
@@ -40,3 +81,14 @@ class Partner(models.Model):
     def _set_calendar_last_notif_ack(self):
         partner = self.env['res.users'].browse(self.env.context.get('uid', self.env.uid)).partner_id
         partner.write({'calendar_last_notif_ack': datetime.now()})
+
+    def schedule_meeting(self):
+        self.ensure_one()
+        partner_ids = self.ids
+        partner_ids.append(self.env.user.partner_id.id)
+        action = self.env["ir.actions.actions"]._for_xml_id("calendar.action_calendar_event")
+        action['context'] = {
+            'default_partner_ids': partner_ids,
+        }
+        action['domain'] = ['|', ('id', 'in', self._compute_meeting()[self.id]), ('partner_ids', 'in', self.ids)]
+        return action
