PR: https://github.com/odoo/odoo/pull/

From: a18bd499acf518f070318aeabd81f8eb94faad01
From: Richard Mathot
Date: 2018-01-16 12:34:29

Structural Changes: 4
Total Changes: 35

[REF] various: convert res.config.settings to use ir.config_parameter integration

This commit updates the various res config of Odoo addons to use the
newly-introduced config_parameter field attribute.

================================= pseudo patch: =================================

--- a/addons/auth_signup/models/res_config_settings.py
+++ b/addons/auth_signup/models/res_config_settings.py
@@ -9,36 +9,13 @@ from odoo import api, fields, models
 class ResConfigSettings(models.TransientModel):
     _inherit = 'res.config.settings'
 
-    auth_signup_reset_password = fields.Boolean(string='Enable password reset from Login page')
+    auth_signup_reset_password = fields.Boolean(string='Enable password reset from Login page', config_parameter='auth_signup.reset_password')
     auth_signup_uninvited = fields.Selection([
         ('b2b', 'On invitation (B2B)'),
         ('b2c', 'Free sign up (B2C)'),
-    ], string='Customer Account')
-    auth_signup_template_user_id = fields.Many2one('res.users', string='Template user for new users created through signup')
-
-    @api.model
-    def get_values(self):
-        res = super(ResConfigSettings, self).get_values()
-        get_param = self.env['ir.config_parameter'].sudo().get_param
-        auth_signup_template_user_id = literal_eval(get_param('auth_signup.template_user_id', default='False'))
-        if auth_signup_template_user_id and not self.env['res.users'].sudo().browse(auth_signup_template_user_id).exists():
-            auth_signup_template_user_id = False
-        # the value of the parameter is a nonempty string
-        res.update(
-            auth_signup_reset_password=get_param('auth_signup.reset_password', 'False').lower() == 'true',
-            auth_signup_uninvited='b2c' if get_param('auth_signup.allow_uninvited', 'False').lower() == 'true' else 'b2b',
-            auth_signup_template_user_id=auth_signup_template_user_id,
-        )
-        return res
-
-    @api.multi
-    def set_values(self):
-        super(ResConfigSettings, self).set_values()
-        set_param = self.env['ir.config_parameter'].sudo().set_param
-        # we store the repr of the values, since the value of the parameter is a required string
-        set_param('auth_signup.reset_password', repr(self.auth_signup_reset_password))
-        set_param('auth_signup.allow_uninvited', repr(self.auth_signup_uninvited == 'b2c'))
-        set_param('auth_signup.template_user_id', repr(self.auth_signup_template_user_id.id))
+    ], string='Customer Account', default='b2b', config_parameter='auth_signup.invitation_scope')
+    auth_signup_template_user_id = fields.Many2one('res.users', string='Template user for new users created through signup',
+                                                   config_parameter='auth_signup.template_user_id')
 
     @api.multi
     def open_template_user(self):

--- a/addons/auth_signup/models/res_partner.py
+++ b/addons/auth_signup/models/res_partner.py
@@ -102,7 +102,7 @@ class ResPartner(models.Model):
         """
         res = defaultdict(dict)
 
-        allow_signup = self.env['ir.config_parameter'].sudo().get_param('auth_signup.allow_uninvited', 'False').lower() == 'true'
+        allow_signup = self.env['ir.config_parameter'].sudo().get_param('auth_signup.invitation_scope', 'b2b') == 'b2c'
         for partner in self:
             if allow_signup and not partner.user_ids:
                 partner.signup_prepare()

--- a/addons/auth_signup/models/res_users.py
+++ b/addons/auth_signup/models/res_users.py
@@ -84,7 +84,7 @@ class ResUsers(models.Model):
 
         # check that uninvited users may sign up
         if 'partner_id' not in values:
-            if not literal_eval(get_param('auth_signup.allow_uninvited', 'False')):
+            if get_param('auth_signup.invitation_scope', 'b2b') != 'b2c':
                 raise SignupError(_('Signup is not allowed for uninvited users'))
 
         assert values.get('login'), "Signup: no login given for new user"
