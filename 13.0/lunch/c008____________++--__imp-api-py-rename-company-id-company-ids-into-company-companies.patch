PR: https://github.com/odoo/odoo/pull/

From: f5dfe4727c086c7577da2aef12c2d3548ba938a3
From: Yannick Tivisse
Date: 2019-05-29 08:09:15

Structural Changes: 10
Total Changes: 12

[IMP] api.py: Rename company_id/company_ids into company/companies

The goal is to be coherent with the user property.

Actually, company_id and company_ids on the environment are no fields.

Calling env.company_id returns a browse record, not an id.

================================= pseudo patch: =================================

--- a/addons/lunch/models/lunch_cashmove.py
+++ b/addons/lunch/models/lunch_cashmove.py
@@ -11,7 +11,7 @@ class LunchCashMove(models.Model):
     _description = 'Lunch Cashmove'
     _order = 'date desc'
 
-    currency_id = fields.Many2one('res.currency', default=lambda self: self.env.company_id)
+    currency_id = fields.Many2one('res.currency', default=lambda self: self.env.company)
     user_id = fields.Many2one('res.users', 'User',
                               default=lambda self: self.env.uid)
     date = fields.Date('Date', required=True, default=fields.Date.context_today)

--- a/addons/lunch/models/lunch_order.py
+++ b/addons/lunch/models/lunch_order.py
@@ -36,7 +36,7 @@ class LunchOrder(models.Model):
                               ('confirmed', 'Received'),
                               ('cancelled', 'Cancelled')],
                              'Status', readonly=True, index=True, default='new')
-    company_id = fields.Many2one('res.company', default=lambda self: self.env.company_id.id)
+    company_id = fields.Many2one('res.company', default=lambda self: self.env.company.id)
     currency_id = fields.Many2one('res.currency', related='company_id.currency_id', readonly=True, store=True)
     quantity = fields.Float('Quantity', required=True, default=1)
 

--- a/addons/lunch/models/lunch_product.py
+++ b/addons/lunch/models/lunch_product.py
@@ -13,7 +13,7 @@ class LunchProductCategory(models.Model):
     _description = 'Lunch Product Category'
 
     name = fields.Char('Product Category', required=True)
-    company_id = fields.Many2one('res.company', default=lambda self: self.env.company_id)
+    company_id = fields.Many2one('res.company', default=lambda self: self.env.company)
     currency_id = fields.Many2one('res.currency', related='company_id.currency_id')
     topping_label_1 = fields.Char('Topping 1 Label', required=True, default='Supplements')
     topping_label_2 = fields.Char('Topping 2 Label', required=True, default='Beverages')
@@ -67,14 +67,14 @@ class LunchTopping(models.Model):
     _description = 'Lunch Toppings'
 
     name = fields.Char('Name', required=True)
-    company_id = fields.Many2one('res.company', default=lambda self: self.env.company_id)
+    company_id = fields.Many2one('res.company', default=lambda self: self.env.company)
     currency_id = fields.Many2one('res.currency', related='company_id.currency_id')
     price = fields.Float('Price', digits=dp.get_precision('Account'), required=True)
     category_id = fields.Many2one('lunch.product.category')
     topping_category = fields.Integer('Topping Category', help="This field is a technical field", required=True, default=1)
 
     def name_get(self):
-        currency_id = self.env.company_id.currency_id
+        currency_id = self.env.company.currency_id
         res = dict(super(LunchTopping, self).name_get())
         for topping in self:
             price = formatLang(self.env, topping.price, currency_obj=currency_id)
@@ -95,7 +95,7 @@ class LunchProduct(models.Model):
     supplier_id = fields.Many2one('lunch.supplier', 'Vendor', required=True)
     active = fields.Boolean(default=True)
 
-    company_id = fields.Many2one('res.company', default=lambda self: self.env.company_id)
+    company_id = fields.Many2one('res.company', default=lambda self: self.env.company)
     currency_id = fields.Many2one('res.currency', related='company_id.currency_id')
 
     # image: all image fields are base64 encoded and PIL-supported
