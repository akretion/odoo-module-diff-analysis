PR: https://github.com/odoo/odoo/pull/55972

From: 49f8ee9e40399af77025717650569e6b1f39a2ae
From: jbm-odoo
Date: 2020-08-19 15:52:35

Structural Changes: 27
Total Changes: 274

[IMP] sale_timesheet: Billable project

Split completely 'non billable' from 'task rate' for more clarity.
Simplify the task form view of non-billable projects.

TaskID 2032048

closes odoo/odoo#55972

Related: odoo/enterprise#12441
Related: odoo/upgrade#1662
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_timesheet/models/account.py
+++ b/addons/sale_timesheet/models/account.py
@@ -18,12 +18,16 @@ class AccountAnalyticLine(models.Model):
         ('billable_time', 'Billed on Timesheets'),
         ('billable_fixed', 'Billed at a Fixed price'),
         ('non_billable', 'Non Billable Tasks'),
+        ('non_billable_timesheet', 'Non Billable Timesheet'),
         ('non_billable_project', 'No task found')], string="Billable Type", compute='_compute_timesheet_invoice_type', compute_sudo=True, store=True, readonly=True)
     timesheet_invoice_id = fields.Many2one('account.move', string="Invoice", readonly=True, copy=False, help="Invoice created from the timesheet")
+    non_allow_billable = fields.Boolean("Non-Billable", help="Your timesheet will not be billed.")
 
-    @api.depends('so_line.product_id', 'project_id', 'task_id')
+    @api.depends('so_line.product_id', 'project_id', 'task_id', 'non_allow_billable')
     def _compute_timesheet_invoice_type(self):
-        for timesheet in self:
+        non_allowed_billable = self.filtered('non_allow_billable')
+        non_allowed_billable.timesheet_invoice_type = 'non_billable_timesheet'
+        for timesheet in self - non_allowed_billable:
             if timesheet.project_id:  # AAL will be set to False
                 invoice_type = 'non_billable_project' if not timesheet.task_id else 'non_billable'
                 if timesheet.task_id and timesheet.so_line.product_id.type == 'service':
@@ -40,10 +44,10 @@ class AccountAnalyticLine(models.Model):
 
     @api.onchange('employee_id')
     def _onchange_task_id_employee_id(self):
-        if self.project_id:  # timesheet only
-            if self.task_id.billable_type == 'task_rate':
+        if self.project_id and self.task_id.allow_billable:  # timesheet only
+            if self.task_id.bill_type == 'customer_task' or self.task_id.pricing_type == 'fixed_rate':
                 self.so_line = self.task_id.sale_line_id
-            elif self.task_id.billable_type == 'employee_rate':
+            elif self.task_id.pricing_type == 'employee_rate':
                 self.so_line = self._timesheet_determine_sale_line(self.task_id, self.employee_id, self.project_id)
             else:
                 self.so_line = False
@@ -100,24 +104,22 @@ class AccountAnalyticLine(models.Model):
             1/ timesheet on task rate: the so line will be the one from the task
             2/ timesheet on employee rate task: find the SO line in the map of the project (even for subtask), or fallback on the SO line of the task, or fallback
                 on the one on the project
-            NOTE: this have to be consistent with `_compute_billable_type` on project.task.
         """
-        if not project.allow_billable and project.sale_line_id and not task:
-            if project.billable_type == 'employee_rate':
+        if project.sale_line_id and not task:
+            if project.bill_type == 'customer_project' and project.pricing_type == 'employee_rate':
                 map_entry = self.env['project.sale.line.employee.map'].search([('project_id', '=', project.id), ('employee_id', '=', employee.id)])
                 if map_entry:
                     return map_entry.sale_line_id
             return project.sale_line_id
-        elif task.billable_type != 'no':
-            if task.billable_type == 'employee_rate':
+        if task.allow_billable:
+            if task.bill_type == 'customer_task':
+                return task.sale_line_id
+            if task.pricing_type == 'fixed_rate':
+                return task.sale_line_id
+            elif task.pricing_type == 'employee_rate':
                 map_entry = self.env['project.sale.line.employee.map'].search([('project_id', '=', task.project_id.id), ('employee_id', '=', employee.id)])
                 if map_entry:
                     return map_entry.sale_line_id
-                if task.sale_line_id:
-                    return task.sale_line_id
-                return task.project_id.sale_line_id
-            elif task.billable_type == 'task_rate':
-                return task.sale_line_id
         return self.env['sale.order.line']
 
     def _timesheet_get_portal_domain(self):

--- a/addons/sale_timesheet/models/product.py
+++ b/addons/sale_timesheet/models/product.py
@@ -19,14 +19,13 @@ class ProductTemplate(models.Model):
         ('timesheet', 'Timesheets on project (one fare per SO/Project)'),
     ], ondelete={'timesheet': 'set default'})
     # override domain
-    project_id = fields.Many2one(domain="[('billable_type', '=', 'no'), ('allow_timesheets', 'in', [service_policy == 'delivered_timesheet' or '', True])]")
-    project_template_id = fields.Many2one(domain="[('billable_type', '=', 'no'), ('allow_timesheets', 'in', [service_policy == 'delivered_timesheet' or '', True])]")
+    project_id = fields.Many2one(domain="[('allow_billable', '=', True), ('bill_type', '=', 'customer_task'), ('allow_timesheets', 'in', [service_policy == 'delivered_timesheet' or '', True])]")
+    project_template_id = fields.Many2one(domain="[('allow_billable', '=', True), ('bill_type', '=', 'customer_project'), ('allow_timesheets', 'in', [service_policy == 'delivered_timesheet' or '', True])]")
 
     def _default_visible_expense_policy(self):
         visibility = self.user_has_groups('project.group_project_user')
         return visibility or super(ProductTemplate, self)._default_visible_expense_policy()
 
-
     def _compute_visible_expense_policy(self):
         super(ProductTemplate, self)._compute_visible_expense_policy()
 

--- a/addons/sale_timesheet/models/project.py
+++ b/addons/sale_timesheet/models/project.py
@@ -1,6 +1,8 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from collections import defaultdict
+
 from odoo import api, fields, models, _
 from odoo.exceptions import ValidationError
 
@@ -22,19 +24,20 @@ class Project(models.Model):
     def _default_timesheet_product_id(self):
         return self.env.ref('sale_timesheet.time_product', False)
 
-    billable_type = fields.Selection([
-        ('task_rate', 'At Task Rate'),
-        ('employee_rate', 'At Employee Rate'),
-        ('no', 'No Billable')
-    ], string="Billable Type", compute='_compute_billable_type', compute_sudo=True, store=True,
-        help='At which rate timesheets will be billed:\n'
-        ' - At task rate: each time spend on a task is billed at task rate.\n'
-        ' - At employee rate: each employee log time billed at his rate.\n'
-        ' - No Billable: track time without invoicing it')
+    bill_type = fields.Selection([
+        ('customer_task', 'Invoice tasks separately to different customers'),
+        ('customer_project', 'Invoice all tasks to a single customer')
+    ], string="Customer Type", default="customer_task",
+        help='When billing tasks individually, a Sales Order will be created from each task. It is perfect if you would like to bill different services to different customers at different rates. \n When billing the whole project, a Sales Order will be created from the project instead. This option is better if you would like to bill all the tasks of a given project to a specific customer either at a fixed rate, or at an employee rate.')
+    pricing_type = fields.Selection([
+        ('fixed_rate', 'Fixed rate'),
+        ('employee_rate', 'Employee rate')
+    ], string="Pricing", default="fixed_rate",
+        help='The fixed rate is perfect if you bill a service at a fixed rate per hour or day worked regardless of the employee who performed it. The employee rate is preferable if your employees deliver the same service at a different rate. For instance, junior and senior consultants would deliver the same service (= consultancy), but at a different rate because of their level of seniority.')
     sale_line_employee_ids = fields.One2many('project.sale.line.employee.map', 'project_id', "Sale line/Employee map", copy=False,
         help="Employee/Sale Order Item Mapping:\n Defines to which sales order item an employee's timesheet entry will be linked."
         "By extension, it defines the rate at which an employee's time on the project is billed.")
-    allow_billable = fields.Boolean("Bill from Tasks", help="Invoice your time and material from tasks.")
+    allow_billable = fields.Boolean("Billable", help="Invoice your time and material from tasks.")
     display_create_order = fields.Boolean(compute='_compute_display_create_order')
     timesheet_product_id = fields.Many2one(
         'product.product', string='Timesheet Product', 
@@ -45,6 +48,7 @@ class Project(models.Model):
             '|', ('company_id', '=', False), ('company_id', '=', company_id)]""",
         help='Select a Service product with which you would like to bill your time spent on tasks.',
         default=_default_timesheet_product_id)
+    warning_employee_rate = fields.Boolean(compute='_compute_warning_employee_rate')
 
     _sql_constraints = [
         ('timesheet_product_required_if_billable_and_timesheets', """
@@ -58,34 +62,14 @@ class Project(models.Model):
 
     ]
 
-    @api.depends('billable_type', 'allow_billable', 'sale_order_id', 'partner_id')
+    @api.depends('allow_billable', 'sale_order_id', 'partner_id', 'bill_type')
     def _compute_display_create_order(self):
         for project in self:
             show = True
-            if not project.partner_id or project.billable_type != 'no' or project.allow_billable or project.sale_order_id:
+            if not project.partner_id or project.bill_type != 'customer_project' or not project.allow_billable or project.sale_order_id:
                 show = False
             project.display_create_order = show
 
-    @api.depends('sale_order_id.create_date', 'sale_line_id', 'sale_line_employee_ids')
-    def _compute_billable_type(self):
-        for project in self:
-            billable_type = 'no'
-            if project.sale_order_id:
-                if project.sale_line_employee_ids:
-                    billable_type = 'employee_rate'
-                else:
-                    billable_type = 'task_rate'
-            project.billable_type = billable_type
-
-    @api.onchange('sale_line_employee_ids', 'billable_type')
-    def _onchange_sale_line_employee_ids(self):
-        if self.billable_type == 'task_rate':
-            if self.sale_line_employee_ids:
-                self.billable_type = 'employee_rate'
-        else:
-            if self.billable_type == 'no':
-                self.sale_line_employee_ids = False
-
     @api.depends('allow_timesheets', 'allow_billable')
     def _compute_timesheet_product_id(self):
         default_product = self.env.ref('sale_timesheet.time_product', False)
@@ -95,15 +79,45 @@ class Project(models.Model):
             elif not project.timesheet_product_id:
                 project.timesheet_product_id = default_product
 
-    @api.constrains('sale_line_id', 'billable_type')
+    @api.depends('pricing_type', 'allow_timesheets', 'allow_billable', 'sale_line_employee_ids', 'sale_line_employee_ids.employee_id', 'bill_type')
+    def _compute_warning_employee_rate(self):
+        projects = self.filtered(lambda p: p.allow_billable and p.allow_timesheets and p.bill_type == 'customer_project' and p.pricing_type == 'employee_rate')
+        employees = self.env['account.analytic.line'].read_group([('project_id', 'in', projects.ids)], ['employee_id', 'project_id'], ['employee_id', 'project_id'], lazy=False)
+        dict_project_employee = defaultdict(list)
+        for line in employees:
+            dict_project_employee[line['project_id'][0]] += [line['employee_id'][0]]
+        for project in projects:
+            project.warning_employee_rate = any(x not in project.sale_line_employee_ids.employee_id.ids for x in dict_project_employee[project.id])
+
+        (self - projects).warning_employee_rate = False
+
+
+    @api.constrains('sale_line_id', 'pricing_type')
     def _check_sale_line_type(self):
         for project in self:
-            if project.billable_type == 'task_rate':
+            if project.pricing_type == 'fixed_rate':
                 if project.sale_line_id and not project.sale_line_id.is_service:
                     raise ValidationError(_("A billable project should be linked to a Sales Order Item having a Service product."))
                 if project.sale_line_id and project.sale_line_id.is_expense:
                     raise ValidationError(_("A billable project should be linked to a Sales Order Item that does not come from an expense or a vendor bill."))
 
+    @api.onchange('allow_billable')
+    def _onchange_allow_billable(self):
+        if self.task_ids._get_timesheet() and self.allow_timesheets and not self.allow_billable:
+            message = _("All timesheet hours that are not yet invoiced will be removed from Sales Order on save. Discard to avoid the change.")
+            return {'warning': {
+                'title': _("Warning"),
+                'message': message
+            }}
+
+    def write(self, values):
+        res = super(Project, self).write(values)
+        if 'allow_billable' in values and not values.get('allow_billable'):
+            self.task_ids._get_timesheet().write({
+                'so_line': False,
+            })
+        return res
+
     def action_view_timesheet(self):
         self.ensure_one()
         if self.allow_timesheets:
@@ -161,19 +175,34 @@ class Project(models.Model):
 class ProjectTask(models.Model):
     _inherit = "project.task"
 
+    @api.model
+    def default_get(self, fields):
+        result = super(ProjectTask, self).default_get(fields)
+
+        if not result.get('timesheet_product_id', False) and 'project_id' in result:
+            project = self.env['project.project'].browse(result['project_id'])
+            if project.bill_type != 'customer_project' or project.pricing_type != 'employee_rate':
+                result['timesheet_product_id'] = project.timesheet_product_id.id
+        return result
+
     # override sale_order_id and make it computed stored field instead of regular field.
     sale_order_id = fields.Many2one(compute='_compute_sale_order_id', store=True, readonly=False,
     domain="['|', '|', ('partner_id', '=', partner_id), ('partner_id', 'child_of', commercial_partner_id), ('partner_id', 'parent_of', partner_id)]")
     analytic_account_id = fields.Many2one('account.analytic.account', related='sale_order_id.analytic_account_id')
-    billable_type = fields.Selection([
-        ('task_rate', 'At Task Rate'),
-        ('employee_rate', 'At Employee Rate'),
-        ('no', 'No Billable')
-    ], string="Billable Type", compute='_compute_billable_type', compute_sudo=True, store=True)
+    bill_type = fields.Selection(related="project_id.bill_type")
+    pricing_type = fields.Selection(related="project_id.pricing_type")
     is_project_map_empty = fields.Boolean("Is Project map empty", compute='_compute_is_project_map_empty')
     has_multi_sol = fields.Boolean(compute='_compute_has_multi_sol', compute_sudo=True)
     allow_billable = fields.Boolean(related="project_id.allow_billable")
     display_create_order = fields.Boolean(compute='_compute_display_create_order')
+    timesheet_product_id = fields.Many2one(
+        'product.product', string='Service',
+        domain="""[
+            ('type', '=', 'service'),
+            ('invoice_policy', '=', 'delivery'),
+            ('service_type', '=', 'timesheet'),
+            '|', ('company_id', '=', False), ('company_id', '=', company_id)]""",
+        help='Select a Service product with which you would like to bill your time spent on this task.')
 
     @api.depends(
         'allow_billable', 'allow_timesheets', 'sale_order_id')
@@ -181,8 +210,8 @@ class ProjectTask(models.Model):
         for task in self:
             show = True
             if not task.allow_billable or not task.allow_timesheets or \
-                task.billable_type == 'employee_rate' or not task.partner_id or \
-                task.sale_order_id:
+                (task.bill_type != 'customer_task' and not task.timesheet_product_id) or not task.partner_id or \
+                task.sale_order_id or (task.bill_type != 'customer_task' and task.pricing_type != 'employee_rate'):
                 show = False
             task.display_create_order = show
 
@@ -218,26 +247,16 @@ class ProjectTask(models.Model):
         for task in self:
             task.analytic_account_active = task.analytic_account_active or task.analytic_account_id.active
 
-    @api.depends('sale_line_id', 'project_id', 'billable_type')
+    @api.depends('sale_line_id', 'project_id', 'allow_billable', 'bill_type')
     def _compute_sale_order_id(self):
         for task in self:
-            if task.billable_type == 'task_rate':
-                task.sale_order_id = task.sale_line_id.sudo().order_id or task.project_id.sale_order_id
-            elif task.billable_type == 'employee_rate':
+            if task.allow_billable and task.bill_type == 'customer_project':
                 task.sale_order_id = task.project_id.sale_order_id
-            elif task.billable_type == 'no':
+            elif task.allow_billable and task.bill_type == 'customer_task':
+                task.sale_order_id = task.sale_line_id.sudo().order_id
+            elif not task.sale_order_id:
                 task.sale_order_id = False
 
-    @api.depends('project_id.billable_type', 'sale_line_id')
-    def _compute_billable_type(self):
-        for task in self:
-            billable_type = 'no'
-            if task.project_id.billable_type == 'employee_rate':
-                billable_type = task.project_id.billable_type
-            elif (task.project_id.billable_type in ['task_rate', 'no'] and task.sale_line_id):  # create a task in global project (non billable)
-                billable_type = 'task_rate'
-            task.billable_type = billable_type
-
     @api.depends('project_id.sale_line_employee_ids')
     def _compute_is_project_map_empty(self):
         for task in self:
@@ -250,31 +269,25 @@ class ProjectTask(models.Model):
 
     @api.onchange('project_id')
     def _onchange_project(self):
-        if self.project_id:
-            if self.project_id.billable_type == 'employee_rate':
-                if not self.partner_id:
-                    self.partner_id = self.project_id.sale_order_id.partner_id
-            elif self.project_id.billable_type == 'task_rate':
-                if not self.sale_line_id:
-                    self.sale_line_id = self.project_id.sale_line_id
-                if not self.partner_id:
-                    self.partner_id = self.sale_line_id.order_partner_id
-        # set domain on SO: on non billable project, all SOL of customer, otherwise the one from the SO
+        if self.project_id and self.project_id.bill_type == 'customer_project':
+            if not self.partner_id:
+                self.partner_id = self.project_id.partner_id
+            if not self.sale_line_id:
+                self.sale_line_id = self.project_id.sale_line_id
 
     def write(self, values):
-        old_sale_line_id = dict([(t.id, t.sale_line_id.id) for t in self])
         res = super(ProjectTask, self).write(values)
         # Done after super to avoid constraints on field recomputation
         if values.get('project_id'):
             project_dest = self.env['project.project'].browse(values['project_id'])
-            if project_dest.billable_type == 'employee_rate':
+            if project_dest.bill_type == 'customer_project' and project_dest.pricing_type == 'employee_rate':
                 self.write({'sale_line_id': False})
         if 'sale_line_id' in values and self.filtered('allow_timesheets').sudo().timesheet_ids:
             so = self.env['sale.order.line'].browse(values['sale_line_id']).order_id
             if so and not so.analytic_account_id:
                 so.analytic_account_id = self.project_id.analytic_account_id
             timesheet_ids = self.filtered('allow_timesheets').timesheet_ids.filtered(
-                lambda t: (not t.timesheet_invoice_id or t.timesheet_invoice_id.state == 'cancel') and t.so_line.id == old_sale_line_id[t.task_id.id]
+                lambda t: (not t.timesheet_invoice_id or t.timesheet_invoice_id.state == 'cancel')
             )
             timesheet_ids.write({'so_line': values['sale_line_id']})
             if 'project_id' in values:
@@ -298,7 +311,7 @@ class ProjectTask(models.Model):
                 'active_id': self.id,
                 'active_model': 'project.task',
                 'form_view_initial_mode': 'edit',
-                'default_product_id': self.project_id.timesheet_product_id.id,
+                'default_product_id': self.timesheet_product_id.id or self.project_id.timesheet_product_id.id,
             },
         }
 

--- a/addons/sale_timesheet/models/project_overview.py
+++ b/addons/sale_timesheet/models/project_overview.py
@@ -33,7 +33,7 @@ class Project(models.Model):
         company_uom = self.env.company.timesheet_encode_uom_id
         is_uom_day = company_uom == self.env.ref('uom.product_uom_day')
         hour_rounding = uom_hour.rounding
-        billable_types = ['non_billable', 'non_billable_project', 'billable_time', 'billable_fixed']
+        billable_types = ['non_billable', 'non_billable_project', 'billable_time', 'non_billable_timesheet', 'billable_fixed']
 
         values = {
             'projects': self,
@@ -140,6 +140,7 @@ class Project(models.Model):
                 non_billable_project=0.0,
                 non_billable=0.0,
                 billable_time=0.0,
+                non_billable_timesheet=0.0,
                 billable_fixed=0.0,
                 canceled=0.0,
                 total=0.0,
@@ -152,6 +153,7 @@ class Project(models.Model):
                 non_billable_project=0.0,
                 non_billable=0.0,
                 billable_time=0.0,
+                non_billable_timesheet=0.0,
                 billable_fixed=0.0,
                 canceled=0.0,
                 total=0.0,
@@ -162,7 +164,7 @@ class Project(models.Model):
             repartition_employee[employee_id]['total'] = sum([vals[inv_type] for inv_type in [*billable_types, 'canceled']])
             if is_uom_day:
                 # convert all times from hours to days
-                for time_type in ['non_billable_project', 'non_billable', 'billable_time', 'billable_fixed', 'canceled', 'total']:
+                for time_type in ['non_billable_project', 'non_billable', 'billable_time', 'non_billable_timesheet', 'billable_fixed', 'canceled', 'total']:
                     if repartition_employee[employee_id][time_type]:
                         repartition_employee[employee_id][time_type] = round(uom_hour._compute_quantity(repartition_employee[employee_id][time_type], company_uom, raise_if_failure=False), 2)
         hours_per_employee = [repartition_employee[employee_id]['total'] for employee_id in repartition_employee]
@@ -388,7 +390,7 @@ class Project(models.Model):
                 task_order_line_ids = [ol['sale_line_id'][0] for ol in task_order_line_ids]
 
             if self.env.user.has_group('sales_team.group_sale_salesman'):
-                if not self.sale_line_id and not task_order_line_ids:
+                if self.bill_type == 'customer_project' and self.allow_billable and not self.sale_order_id:
                     actions.append({
                         'label': _("Create a Sales Order"),
                         'type': 'action',
@@ -439,7 +441,8 @@ class Project(models.Model):
 
         # if only one project, add it in the context as default value
         tasks_domain = [('project_id', 'in', self.ids)]
-        tasks_context = self.env.context
+        tasks_context = self.env.context.copy()
+        tasks_context.pop('search_default_name', False)
         late_tasks_domain = [('project_id', 'in', self.ids), ('date_deadline', '<', fields.Date.to_string(fields.Date.today())), ('date_end', '=', False)]
         overtime_tasks_domain = [('project_id', 'in', self.ids), ('overtime', '>', 0), ('planned_hours', '>', 0)]
 

--- a/addons/sale_timesheet/models/project_sale_line_employee_map.py
+++ b/addons/sale_timesheet/models/project_sale_line_employee_map.py
@@ -8,18 +8,51 @@ class ProjectProductEmployeeMap(models.Model):
     _name = 'project.sale.line.employee.map'
     _description = 'Project Sales line, employee mapping'
 
-    @api.model
-    def _default_project_id(self):
-        if self._context.get('active_id'):
-            return self._context['active_id']
-        return False
-
-    project_id = fields.Many2one('project.project', "Project", domain=[('billable_type', '!=', 'no')], required=True, default=_default_project_id)
+    project_id = fields.Many2one('project.project', "Project", required=True)
     employee_id = fields.Many2one('hr.employee', "Employee", required=True)
-    sale_line_id = fields.Many2one('sale.order.line', "Sale Order Item", domain=[('is_service', '=', True)], required=True)
-    price_unit = fields.Float(related='sale_line_id.price_unit', readonly=True)
-    currency_id = fields.Many2one(related="sale_line_id.currency_id")
+    sale_line_id = fields.Many2one('sale.order.line', "Sale Order Item", domain=[('is_service', '=', True)])
+    company_id = fields.Many2one('res.company', string='Company', related='project_id.company_id')
+    timesheet_product_id = fields.Many2one(
+        'product.product', string='Service',
+        domain="""[
+            ('type', '=', 'service'),
+            ('invoice_policy', '=', 'delivery'),
+            ('service_type', '=', 'timesheet'),
+            '|', ('company_id', '=', False), ('company_id', '=', company_id)]""")
+    price_unit = fields.Float("Unit Price", compute='_compute_price_unit', store=True, readonly=False)
+    currency_id = fields.Many2one('res.currency', string="Currency", compute='_compute_price_unit', store=True, readonly=False)
 
     _sql_constraints = [
         ('uniqueness_employee', 'UNIQUE(project_id,employee_id)', 'An employee cannot be selected more than once in the mapping. Please remove duplicate(s) and try again.'),
     ]
+
+    @api.depends('sale_line_id', 'sale_line_id.price_unit', 'timesheet_product_id')
+    def _compute_price_unit(self):
+        for line in self:
+            if line.sale_line_id:
+                line.price_unit = line.sale_line_id.price_unit
+                line.currency_id = line.sale_line_id.currency_id
+            elif line.timesheet_product_id:
+                line.price_unit = line.timesheet_product_id.lst_price
+                line.currency_id = line.timesheet_product_id.currency_id
+            else:
+                line.price_unit = 0
+                line.currency_id = False
+
+    @api.onchange('timesheet_product_id')
+    def _onchange_timesheet_product_id(self):
+        if self.timesheet_product_id:
+            self.price_unit = self.timesheet_product_id.lst_price
+        else:
+            self.price_unit = 0.0
+
+    @api.model
+    def create(self, values):
+        res = super(ProjectProductEmployeeMap, self).create(values)
+        for project_id in res.filtered(lambda l: l.sale_line_id).project_id:
+            if project_id.allow_timesheets and project_id.allow_billable and project_id.task_ids._get_timesheet():
+                timesheet_ids = project_id.task_ids._get_timesheet()
+                for employee_id in res.filtered(lambda l: l.project_id == project_id).employee_id:
+                    sale_line_id = res.filtered(lambda l: l.project_id == project_id and l.employee_id == employee_id).sale_line_id
+                    timesheet_ids.filtered(lambda t: t.employee_id == employee_id).so_line = sale_line_id
+        return res

--- a/addons/sale_timesheet/models/sale_order.py
+++ b/addons/sale_timesheet/models/sale_order.py
@@ -12,7 +12,7 @@ class SaleOrder(models.Model):
     timesheet_count = fields.Float(string='Timesheet activities', compute='_compute_timesheet_ids', groups="hr_timesheet.group_hr_timesheet_user")
 
     # override domain
-    project_id = fields.Many2one(domain="[('billable_type', 'in', ('no', 'task_rate')), ('analytic_account_id', '!=', False), ('company_id', '=', company_id)]")
+    project_id = fields.Many2one(domain="['|', ('bill_type', '=', 'customer_task'), ('pricing_type', '=', 'fixed_rate'), ('analytic_account_id', '!=', False), ('company_id', '=', company_id)]")
     timesheet_encode_uom_id = fields.Many2one('uom.uom', related='company_id.timesheet_encode_uom_id')
     timesheet_total_duration = fields.Integer("Timesheet Total Duration", compute='_compute_timesheet_total_duration', help="Total recorded duration, expressed in the encoding UoM, and rounded to the unit")
 
@@ -33,7 +33,7 @@ class SaleOrder(models.Model):
         for sale_order in self:
             timesheets = sale_order.timesheet_ids if self.user_has_groups('hr_timesheet.group_hr_timesheet_approver') else sale_order.timesheet_ids.filtered(lambda t: t.user_id.id == self.env.uid)
             total_time = 0.0
-            for timesheet in timesheets:
+            for timesheet in timesheets.filtered(lambda t: not t.non_allow_billable):
                 # Timesheets may be stored in a different unit of measure, so first we convert all of them to the reference unit
                 total_time += timesheet.unit_amount * timesheet.product_uom_id.factor_inv
             # Now convert to the proper unit of measure
@@ -53,7 +53,9 @@ class SaleOrder(models.Model):
     def action_view_timesheet(self):
         self.ensure_one()
         action = self.env["ir.actions.actions"]._for_xml_id("sale_timesheet.timesheet_action_from_sales_order")
-        action['context'] = {}  # erase default filters
+        action['context'] = {
+            'search_default_billable_timesheet': True
+        }  # erase default filters
         if self.timesheet_count > 0:
             action['domain'] = [('so_line', 'in', self.order_line.ids)]
         else:
@@ -85,7 +87,7 @@ class SaleOrderLine(models.Model):
             if not line.is_expense and line.product_id.type == 'service' and line.product_id.service_type == 'timesheet':
                 line.qty_delivered_method = 'timesheet'
 
-    @api.depends('analytic_line_ids.project_id')
+    @api.depends('analytic_line_ids.project_id', 'analytic_line_ids.non_allow_billable', 'project_id.pricing_type', 'project_id.bill_type')
     def _compute_qty_delivered(self):
         super(SaleOrderLine, self)._compute_qty_delivered()
 
@@ -97,7 +99,7 @@ class SaleOrderLine(models.Model):
 
     def _timesheet_compute_delivered_quantity_domain(self):
         """ Hook for validated timesheet in addionnal module """
-        return [('project_id', '!=', False)]
+        return [('project_id', '!=', False), ('non_allow_billable', '=', False)]
 
     ###########################################
     # Service : Project and task generation
@@ -116,6 +118,14 @@ class SaleOrderLine(models.Model):
         project.write({'allow_timesheets': True})
         return project
 
+    def _timesheet_create_project_prepare_values(self):
+        """Generate project values"""
+        values = super()._timesheet_create_project_prepare_values()
+        values['allow_billable'] = True
+        values['bill_type'] = 'customer_project'
+        values['pricing_type'] = 'fixed_rate'
+        return values
+
     def _recompute_qty_to_invoice(self, start_date, end_date):
         """ Recompute the qty_to_invoice field for product containing timesheets
 
