PR: https://github.com/odoo/odoo/pull/32540

From: 12da02d161e02d7b0d5508f96e401a03ec478b9c
From: Arnold Moyaux
Date: 2019-04-12 12:50:34

Breaking data model changes score: 4, change matches:
-    sub_products = fields.One2many('mrp.subproduct', 'bom_id', 'Byproducts', copy=True)
+    byproduct_ids = fields.One2many('mrp.bom.byproduct', 'bom_id', 'By-products', copy=True)
-    subproduct_id = fields.Many2one(

Total Changes: 34

[REF] mrp: rename subproduct in byproduct

subproduct and byproduct are both used in code.
However the UI always shows by-product only.
Rename sub.product, sub_product,... in byproduct
in order to use the same term everywhere.

closes odoo/odoo#32540

Signed-off-by: Arnold Moyaux <amoyaux@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_bom.py
+++ b/addons/mrp/models/mrp_bom.py
@@ -36,7 +36,7 @@ class MrpBom(models.Model):
         domain="['&', ('product_tmpl_id', '=', product_tmpl_id), ('type', 'in', ['product', 'consu'])]",
         help="If a product variant is defined the BOM is available only for this product.")
     bom_line_ids = fields.One2many('mrp.bom.line', 'bom_id', 'BoM Lines', copy=True)
-    sub_products = fields.One2many('mrp.subproduct', 'bom_id', 'Byproducts', copy=True)
+    byproduct_ids = fields.One2many('mrp.bom.byproduct', 'bom_id', 'By-products', copy=True)
     product_qty = fields.Float(
         'Quantity', default=1.0,
         digits=dp.get_precision('Unit of Measure'), required=True)
@@ -360,8 +360,8 @@ class MrpBomLine(models.Model):
         }
 
 
-class MrpSubProduct(models.Model):
-    _name = 'mrp.subproduct'
+class MrpByProduct(models.Model):
+    _name = 'mrp.bom.byproduct'
     _description = 'Byproduct'
 
     product_id = fields.Many2one('product.product', 'By-product', required=True)

--- a/addons/mrp/models/mrp_production.py
+++ b/addons/mrp/models/mrp_production.py
@@ -463,13 +463,13 @@ class MrpProduction(models.Model):
         self.is_locked = not self.is_locked
         return True
 
-    def _get_finished_move_value(self, product_id, product_uom_qty, product_uom, operation_id=False, subproduct_id=False):
+    def _get_finished_move_value(self, product_id, product_uom_qty, product_uom, operation_id=False, byproduct_id=False):
         return {
             'product_id': product_id,
             'product_uom_qty': product_uom_qty,
             'product_uom': product_uom,
             'operation_id': operation_id,
-            'subproduct_id': subproduct_id,
+            'byproduct_id': byproduct_id,
             'unit_factor': product_uom_qty / self.product_qty,
             'name': self.name,
             'date': self.date_planned_start,
@@ -488,12 +488,12 @@ class MrpProduction(models.Model):
 
     def _generate_finished_moves(self):
         moves_values = [self._get_finished_move_value(self.product_id.id, self.product_qty, self.product_uom_id.id)]
-        for sub_product in self.bom_id.sub_products:
+        for byproduct in self.bom_id.byproduct_ids:
             product_uom_factor = self.product_uom_id._compute_quantity(self.product_qty, self.bom_id.product_uom_id)
-            qty = sub_product.product_qty * (product_uom_factor / self.bom_id.product_qty)
-            move_values = self._get_finished_move_value(sub_product.product_id.id,
-                qty, sub_product.product_uom_id.id, sub_product.operation_id.id,
-                sub_product.id)
+            qty = byproduct.product_qty * (product_uom_factor / self.bom_id.product_qty)
+            move_values = self._get_finished_move_value(byproduct.product_id.id,
+                qty, byproduct.product_uom_id.id, byproduct.operation_id.id,
+                byproduct.id)
             moves_values.append(move_values)
         moves = self.env['stock.move'].create(moves_values)
         return moves

--- a/addons/mrp/models/mrp_unbuild.py
+++ b/addons/mrp/models/mrp_unbuild.py
@@ -179,9 +179,9 @@ class MrpUnbuild(models.Model):
             else:
                 factor = unbuild.product_uom_id._compute_quantity(unbuild.product_qty, unbuild.bom_id.product_uom_id) / unbuild.bom_id.product_qty
                 moves += unbuild._generate_move_from_bom_line(self.product_id, self.product_uom_id, unbuild.product_qty)
-                for byproduct in unbuild.bom_id.sub_products:
+                for byproduct in unbuild.bom_id.byproduct_ids:
                     quantity = byproduct.product_qty * factor
-                    moves += unbuild._generate_move_from_bom_line(byproduct.product_id, byproduct.product_uom_id, quantity, subproduct_id=byproduct.id)
+                    moves += unbuild._generate_move_from_bom_line(byproduct.product_id, byproduct.product_uom_id, quantity, byproduct_id=byproduct.id)
         return moves
 
     def _generate_produce_moves(self):
@@ -213,7 +213,7 @@ class MrpUnbuild(models.Model):
             'unbuild_id': self.id,
         })
 
-    def _generate_move_from_bom_line(self, product, product_uom, quantity, bom_line_id=False, subproduct_id=False):
+    def _generate_move_from_bom_line(self, product, product_uom, quantity, bom_line_id=False, byproduct_id=False):
         location_id = bom_line_id and product.property_stock_production or self.location_id
         location_dest_id = bom_line_id and self.location_dest_id or product.property_stock_production
         warehouse = location_dest_id.get_warehouse()
@@ -221,7 +221,7 @@ class MrpUnbuild(models.Model):
             'name': self.name,
             'date': self.create_date,
             'bom_line_id': bom_line_id,
-            'subproduct_id': subproduct_id,
+            'byproduct_id': byproduct_id,
             'product_id': product.id,
             'product_uom_qty': quantity,
             'product_uom': product_uom.id,

--- a/addons/mrp/models/stock_move.py
+++ b/addons/mrp/models/stock_move.py
@@ -70,9 +70,9 @@ class StockMove(models.Model):
         'mrp.workorder', 'Work Order To Consume')
     # Quantities to process, in normalized UoMs
     bom_line_id = fields.Many2one('mrp.bom.line', 'BoM Line')
-    subproduct_id = fields.Many2one(
-        'mrp.subproduct', 'Subproduct',
-        help="Subproduct line that generated the move in a manufacturing order")
+    byproduct_id = fields.Many2one(
+        'mrp.bom.byproduct', 'By-products',
+        help="By-product line that generated the move in a manufacturing order")
     unit_factor = fields.Float('Unit Factor', default=1)
     is_done = fields.Boolean(
         'Done', compute='_compute_is_done',
