PR: https://github.com/odoo/odoo/pull/132739

From: 5a801bc60209713a3ba5313debb4daa05c4e2405
From: Victor Feyens
Date: 2023-09-05 10:59:17

Structural Changes: 10
Total Changes: 168

[ADD] product,(website_)sale: product documents

Introduce new model of "Product Documents" to hold documents linked
to a given product template/variant, displayed on:

* quotations
* confirmed sale orders
* e-commerce product page

This will also replace the previous "Digital Files" (website_sale_digital)
logic & module, which allowed to specify product documents available
to customers after the SO invoice was paid.

This exact feature will be lost after upgrade, since we only keep the
choice to link documents on quotations/orders, but:

1) on e-commerce, carts are supposed paid when confirmed
2) on portal, the "Online Payment" settings makes sure the users
have to pay to confirm their quotation.

therefore we consider new configuration sufficient, without needing
a "paid order" choice as well.

task-3249201

Part-of: odoo/odoo#132739

================================= pseudo patch: =================================

--- a/addons/product/models/__init__.py
+++ b/addons/product/models/__init__.py
@@ -9,10 +9,12 @@ from . import product_template
 from . import product_product
 
 from . import decimal_precision
+from . import ir_attachment
 from . import product_attribute
 from . import product_attribute_custom_value
 from . import product_attribute_value
 from . import product_category
+from . import product_document
 from . import product_packaging
 from . import product_pricelist
 from . import product_pricelist_item

--- a/None
+++ b/addons/product/models/ir_attachment.py
@@ -0,0 +1,24 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, models
+
+
+class IrAttachment(models.Model):
+    _inherit = 'ir.attachment'
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        """Create product.document for attachments added in products chatters"""
+        attachments = super().create(vals_list)
+        if not self.env.context.get('disable_product_documents_creation'):
+            product_attachments = self.filtered(
+                lambda attachment:
+                    attachment.res_model in ('product.product', 'product.template')
+                    and not attachment.res_field
+            )
+            if product_attachments:
+                self.env['product.document'].sudo().create({
+                    'ir_attachment_id': attachment.id
+                    for attachment in product_attachments
+                })
+        return attachments

--- a/None
+++ b/addons/product/models/product_document.py
@@ -0,0 +1,34 @@
+
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class ProductDocument(models.Model):
+    _name = 'product.document'
+    _description = "Product Document"
+    _inherits = {
+        'ir.attachment': 'ir_attachment_id',
+    }
+
+    ir_attachment_id = fields.Many2one(
+        'ir.attachment',
+        string="Related attachment",
+        required=True,
+        ondelete='cascade')
+
+    active = fields.Boolean(default=True)
+
+    #=== CRUD METHODS ===#
+
+    def copy(self, default=None):
+        ir_default = default
+        if ir_default:
+            ir_fields = list(self.env['ir.attachment']._fields)
+            ir_default = {field : default[field] for field in default if field in ir_fields}
+        new_attach = self.ir_attachment_id.with_context(no_document=True).copy(ir_default)
+        return super().copy(dict(default, ir_attachment_id=new_attach.id))
+
+    def unlink(self):
+        self.ir_attachment_id.unlink()
+        return super().unlink()

--- a/addons/product/models/product_product.py
+++ b/addons/product/models/product_product.py
@@ -60,6 +60,14 @@ class ProductProduct(models.Model):
 
     pricelist_item_count = fields.Integer("Number of price rules", compute="_compute_variant_item_count")
 
+    product_document_ids = fields.One2many(
+        string="Documents",
+        comodel_name='product.document',
+        inverse_name='res_id',
+        domain=lambda self: [('res_model', '=', self._name)])
+    product_document_count = fields.Integer(
+        string="Documents Count", compute='_compute_product_document_count')
+
     packaging_ids = fields.One2many(
         'product.packaging', 'product_id', 'Product Packages',
         help="Gives the different ways to package the same product.")
@@ -278,6 +286,13 @@ class ProductProduct(models.Model):
                 '&', ('product_id', '=', product.id), ('applied_on', '=', '0_product_variant')]
             product.pricelist_item_count = self.env['product.pricelist.item'].search_count(domain)
 
+    def _compute_product_document_count(self):
+        for product in self:
+            product.product_document_count = product.env['product.document'].search_count([
+                ('res_model', '=', 'product.product'),
+                ('res_id', '=', product.id),
+            ])
+
     @api.depends('product_tag_ids', 'additional_product_tag_ids')
     def _compute_all_product_tag_ids(self):
         for product in self:
@@ -539,6 +554,8 @@ class ProductProduct(models.Model):
             )
         return super().view_header_get(view_id, view_type)
 
+    #=== ACTION METHODS ===#
+
     def action_open_label_layout(self):
         action = self.env['ir.actions.act_window']._for_xml_id('product.action_open_label_layout')
         action['context'] = {'default_product_ids': self.ids}
@@ -567,11 +584,44 @@ class ProductProduct(models.Model):
     def open_product_template(self):
         """ Utility method used to add an "Open Template" button in product views """
         self.ensure_one()
-        return {'type': 'ir.actions.act_window',
-                'res_model': 'product.template',
-                'view_mode': 'form',
-                'res_id': self.product_tmpl_id.id,
-                'target': 'new'}
+        return {
+            'type': 'ir.actions.act_window',
+            'res_model': 'product.template',
+            'view_mode': 'form',
+            'res_id': self.product_tmpl_id.id,
+            'target': 'new'
+        }
+
+    def action_open_documents(self):
+        self.ensure_one()
+        return {
+            'name': _('Documents'),
+            'type': 'ir.actions.act_window',
+            'res_model': 'product.document',
+            'view_mode': 'kanban,tree,form',
+            'context': {
+                'default_res_model': self._name,
+                'default_res_id': self.id,
+                'default_company_id': self.company_id.id,
+            },
+            'domain': [('res_id', 'in', self.ids), ('res_model', '=', self._name)],
+            'target': 'current',
+            'help': """
+                <p class="o_view_nocontent_smiling_face">
+                    %s
+                </p><p>
+                    %s
+                    <br/>
+                    %s
+                </p>
+            """ % (
+                _("Upload files to your product"),
+                _("Use this feature to store any files you would like to share with your customers."),
+                _("E.G: product description, ebook, legal notice, ..."),
+            )
+        }
+
+    #=== BUSINESS METHODS ===#
 
     def _prepare_sellers(self, params=False):
         return self.seller_ids.filtered(lambda s: s.partner_id.active).sorted(lambda s: (s.sequence, -s.min_qty, s.price, s.id))

--- a/addons/product/models/product_template.py
+++ b/addons/product/models/product_template.py
@@ -133,6 +133,14 @@ class ProductTemplate(models.Model):
 
     pricelist_item_count = fields.Integer("Number of price rules", compute="_compute_item_count")
 
+    product_document_ids = fields.One2many(
+        string="Documents",
+        comodel_name='product.document',
+        inverse_name='res_id',
+        domain=lambda self: [('res_model', '=', self._name)])
+    product_document_count = fields.Integer(
+        string="Documents Count", compute='_compute_product_document_count')
+
     can_image_1024_be_zoomed = fields.Boolean("Can Image 1024 be zoomed", compute='_compute_can_image_1024_be_zoomed', store=True)
     has_configurable_attributes = fields.Boolean("Is a configurable product", compute='_compute_has_configurable_attributes', store=True)
 
@@ -158,6 +166,13 @@ class ProductTemplate(models.Model):
                 ('pricelist_id.active', '=', True),
             ])
 
+    def _compute_product_document_count(self):
+        for template in self:
+            template.product_document_count = template.env['product.document'].search_count([
+                ('res_model', '=', 'product.template'),
+                ('res_id', '=', template.id),
+            ])
+
     @api.depends('image_1920', 'image_1024')
     def _compute_can_image_1024_be_zoomed(self):
         for template in self:
@@ -536,6 +551,8 @@ class ProductTemplate(models.Model):
         domain = [('id', 'in', list(searched_ids))]
         return super()._name_search('', domain, 'ilike', limit, order)
 
+    #=== ACTION METHODS ===#
+
     def action_open_label_layout(self):
         action = self.env['ir.actions.act_window']._for_xml_id('product.action_open_label_layout')
         action['context'] = {'default_product_tmpl_ids': self.ids}
@@ -562,6 +579,37 @@ class ProductTemplate(models.Model):
             },
         }
 
+    def action_open_documents(self):
+        self.ensure_one()
+        return {
+            'name': _('Documents'),
+            'type': 'ir.actions.act_window',
+            'res_model': 'product.document',
+            'view_mode': 'kanban,tree,form',
+            'context': {
+                'default_res_model': self._name,
+                'default_res_id': self.id,
+                'default_company_id': self.company_id.id,
+            },
+            'domain': [('res_id', 'in', self.ids), ('res_model', '=', self._name)],
+            'target': 'current',
+            'help': """
+                <p class="o_view_nocontent_smiling_face">
+                    %s
+                </p><p>
+                    %s
+                    <br/>
+                    %s
+                </p>
+            """ % (
+                _("Upload files to your product"),
+                _("Use this feature to store any files you would like to share with your customers."),
+                _("E.G: product description, ebook, legal notice, ..."),
+            )
+        }
+
+    #=== BUSINESS METHODS ===#
+
     def _get_product_price_context(self, combination):
         self.ensure_one()
         res = {}
