PR: https://github.com/odoo/odoo/pull/146458

From: 99b39b72c7e65e85af6f06dcb6b02867623f3f69
From: clesgow
Date: 2024-03-07 02:43:37

Structural Changes: 2
Total Changes: 109

[IMP] stock: allow cross-company lots

By default, lots now use the company set on their product. Meaning that
if a product has no company (and thus is available cross-company), the
lot will be set without a company as well.
This allows the transfer of lots between the companies, while
maintaining traceability of the lots since we're linking the same
record.

Note: It is still possible to set a company on a lot from a product that
is available cross-company.

task-3339667

closes odoo/odoo#146458

Related: odoo/enterprise#52882
Related: odoo/upgrade#5478
Signed-off-by: Arnold Moyaux (arm) <arm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/product.py
+++ b/addons/stock/models/product.py
@@ -514,11 +514,14 @@ class Product(models.Model):
     def action_open_product_lot(self):
         self.ensure_one()
         action = self.env["ir.actions.actions"]._for_xml_id("stock.action_product_production_lot_form")
-        action['domain'] = [('product_id', '=', self.id)]
+        action['domain'] = [
+            ('product_id', '=', self.id),
+            '|', ('location_id', '=', False),
+                 ('location_id', 'any', self.env['stock.location']._check_company_domain(self._context['allowed_company_ids']))
+        ]
         action['context'] = {
             'default_product_id': self.id,
             'set_product_readonly': True,
-            'default_company_id': (self.company_id or self.env.company).id,
             'search_default_group_by_location': True,
         }
         return action
@@ -975,10 +978,13 @@ class ProductTemplate(models.Model):
     def action_open_product_lot(self):
         self.ensure_one()
         action = self.env["ir.actions.actions"]._for_xml_id("stock.action_product_production_lot_form")
-        action['domain'] = [('product_id.product_tmpl_id', '=', self.id)]
+        action['domain'] = [
+            ('product_id.product_tmpl_id', '=', self.id),
+            '|', ('location_id', '=', False),
+                 ('location_id', 'any', self.env['stock.location']._check_company_domain(self._context['allowed_company_ids']))
+        ]
         action['context'] = {
             'default_product_tmpl_id': self.id,
-            'default_company_id': (self.company_id or self.env.company).id,
             'search_default_group_by_location': True,
         }
         if self.product_variant_count == 1:

--- a/addons/stock/models/stock_lot.py
+++ b/addons/stock/models/stock_lot.py
@@ -46,7 +46,7 @@ class StockLot(models.Model):
     product_qty = fields.Float('On Hand Quantity', compute='_product_qty', search='_search_product_qty')
     note = fields.Html(string='Description')
     display_complete = fields.Boolean(compute='_compute_display_complete')
-    company_id = fields.Many2one('res.company', 'Company', required=True, index=True, default=lambda self: self.env.company.id)
+    company_id = fields.Many2one('res.company', 'Company', index=True, store=True, readonly=False, compute='_compute_company_id')
     delivery_ids = fields.Many2many('stock.picking', compute='_compute_delivery_ids', string='Transfers')
     delivery_count = fields.Integer('Delivery order count', compute='_compute_delivery_ids')
     last_delivery_partner_id = fields.Many2one('res.partner', compute='_compute_last_delivery_partner_id')
@@ -81,7 +81,7 @@ class StockLot(models.Model):
         """Return the next serial number to be attributed to the product."""
         if product.tracking != "none":
             last_serial = self.env['stock.lot'].search(
-                [('company_id', '=', company.id), ('product_id', '=', product.id)],
+                ['|', ('company_id', '=', company.id), ('company_id', '=', False), ('product_id', '=', product.id)],
                 limit=1, order='id DESC')
             if last_serial:
                 return self.env['stock.lot'].generate_lot_names(last_serial.name, 2)[1]['lot_name']
@@ -90,15 +90,22 @@ class StockLot(models.Model):
     @api.constrains('name', 'product_id', 'company_id')
     def _check_unique_lot(self):
         domain = [('product_id', 'in', self.product_id.ids),
-                  ('company_id', 'in', self.company_id.ids),
                   ('name', 'in', self.mapped('name'))]
         groupby = ['company_id', 'product_id', 'name']
-        records = self._read_group(domain, groupby, having=[('__count', '>', 1)])
+        if any(not lot.company_id for lot in self):
+            # We need to check across other companies to not have duplicates between 'no-company' and a company.
+            self = self.sudo()
+        records = self._read_group(domain, groupby, order='company_id DESC')
         error_message_lines = []
-        for __, product, name in records:
-            error_message_lines.append(_(" - Product: %s, Serial Number: %s", product.display_name, name))
+        cross_lots = set()
+        for company, product, name in records:
+            if not company:
+                cross_lots.add((product, name))
+                continue
+            if (product, name) in cross_lots:
+                error_message_lines.append(_(" - Product: %s, Serial Number: %s", product.display_name, name))
         if error_message_lines:
-            raise ValidationError(_('The combination of serial number and product must be unique across a company.\nFollowing combination contains duplicates:\n') + '\n'.join(error_message_lines))
+            raise ValidationError(_('The combination of serial number and product must be unique across a company and no company defined.\nFollowing combination contains duplicates:\n') + '\n'.join(error_message_lines))
 
     def _check_create(self):
         active_picking_id = self.env.context.get('active_picking_id', False)
@@ -107,6 +114,11 @@ class StockLot(models.Model):
             if picking_id and not picking_id.picking_type_id.use_create_lots:
                 raise UserError(_('You are not allowed to create a lot or serial number with this operation type. To change this, go on the operation type and tick the box "Create New Lots/Serial Numbers".'))
 
+    @api.depends('product_id.company_id')
+    def _compute_company_id(self):
+        for lot in self:
+            lot.company_id = lot.product_id.company_id
+
     @api.depends('name')
     def _compute_display_complete(self):
         """ Defines if we want to display all fields in the stock.production.lot form view.
@@ -155,8 +167,8 @@ class StockLot(models.Model):
     def write(self, vals):
         if 'company_id' in vals:
             for lot in self:
-                if lot.company_id.id != vals['company_id']:
-                    raise UserError(_("Changing the company of this record is forbidden at this point, you should rather archive it and create a new one."))
+                if lot.location_id.company_id and vals['company_id'] and lot.location_id.company_id.id != vals['company_id']:
+                    raise UserError(_("You cannot change the company of a lot/serial number currently in a location belonging to another company."))
         if 'product_id' in vals and any(vals['product_id'] != lot.product_id.id for lot in self):
             move_lines = self.env['stock.move.line'].search([('lot_id', 'in', self.ids), ('product_id', '!=', vals['product_id'])])
             if move_lines:

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -865,13 +865,12 @@ Please change the quantity done or the rounding precision of your unit of measur
                 lot_id = self.env['stock.lot'].search([
                     ('product_id', '=', self.product_id.id),
                     ('name', '=', lot_text),
-                    ('company_id', '=', self.company_id.id),
+                    '|', ('company_id', '=', self.company_id.id), ('company_id', '=', False),
                 ])
                 if not lot_id:
                     lot_id = self.env['stock.lot'].create({
                         'product_id': self.product_id.id,
                         'name': lot_text,
-                        'company_id': self.company_id.id,
                     })
                 move_line_vals['lot_id'] = lot_id.id
             move_lines_vals.append(move_line_vals)
@@ -887,7 +886,8 @@ Please change the quantity done or the rounding precision of your unit of measur
                 return text[len(prefix):]
             return text
         for key in context:
-            if key.startswith('default_'):
+            # Default company_id is set for the parent move, but we need to let the lot compute its own company.
+            if key.startswith('default_') and key != 'default_company_id':
                 default_vals[remove_prefix(key, 'default_')] = context[key]
 
         vals_list = []
@@ -1125,19 +1125,21 @@ Please change the quantity done or the rounding precision of your unit of measur
         quantity += self.product_id.uom_id._compute_quantity(len(self.lot_ids), self.product_uom)
         self.update({'quantity': quantity})
 
-        quants = self.env['stock.quant'].search([('product_id', '=', self.product_id.id),
-                                                 ('lot_id', 'in', self.lot_ids.ids),
-                                                 ('quantity', '!=', 0),
-                                                 ('location_id', '!=', self.location_id.id),# Exclude the source location
-                                                 '|', ('location_id.usage', '=', 'customer'),
-                                                      '&', ('company_id', '=', self.company_id.id),
-                                                           ('location_id.usage', 'in', ('internal', 'transit'))])
+        base_location = self.picking_id.location_id or self.location_id
+        quants = self.env['stock.quant'].sudo().search([
+            ('product_id', '=', self.product_id.id),
+            ('lot_id', 'in', self.lot_ids.ids),
+            ('quantity', '!=', 0),
+            ('location_id.usage', 'in', ('internal', 'transit', 'customer')),
+            ('location_id', 'not any', [('location_id', 'child_of', base_location.id)])
+        ])
+
         if quants:
             sn_to_location = ""
             for quant in quants:
                 sn_to_location += _("\n(%s) exists in location %s", quant.lot_id.display_name, quant.location_id.display_name)
             return {
-                'warning': {'title': _('Warning'), 'message': _('Existing Serial numbers. Please correct the serial numbers encoded:') + sn_to_location}
+                'warning': {'title': _('Warning'), 'message': _('Unavailable Serial numbers. Please correct the serial numbers encoded:') + sn_to_location}
             }
 
     @api.onchange('product_uom')

--- a/addons/stock/models/stock_move_line.py
+++ b/addons/stock/models/stock_move_line.py
@@ -7,7 +7,6 @@ from odoo import _, api, fields, tools, models
 from odoo.exceptions import UserError, ValidationError
 from odoo.tools import OrderedSet, groupby
 from odoo.tools.float_utils import float_compare, float_is_zero, float_round
-from odoo.addons.base.models.ir_model import MODULE_UNINSTALL_FLAG
 
 
 class StockMoveLine(models.Model):
@@ -199,7 +198,7 @@ class StockMoveLine(models.Model):
                     elif not self.lot_id:
                         lots = self.env['stock.lot'].search([('product_id', '=', self.product_id.id),
                                                              ('name', '=', self.lot_name),
-                                                             ('company_id', '=', self.company_id.id)])
+                                                             '|', ('company_id', '=', False), ('company_id', '=', self.company_id.id)])
                         quants = lots.quant_ids.filtered(lambda q: q.quantity != 0 and q.location_id.usage in ['customer', 'internal', 'transit'])
                         if quants:
                             message = _('Serial number (%s) already exists in location(s): %s. Please correct the serial number encoded.', self.lot_name, ', '.join(quants.location_id.mapped('display_name')))
@@ -540,7 +539,7 @@ class StockMoveLine(models.Model):
                             # `use_create_lots` and `use_existing_lots`.
                             if ml.lot_name and not ml.lot_id:
                                 lot = self.env['stock.lot'].search([
-                                    ('company_id', '=', ml.company_id.id),
+                                    '|', ('company_id', '=', False), ('company_id', '=', ml.company_id.id),
                                     ('product_id', '=', ml.product_id.id),
                                     ('name', '=', ml.lot_name),
                                 ], limit=1)
@@ -632,7 +631,6 @@ class StockMoveLine(models.Model):
         return {
             'name': self.lot_name,
             'product_id': self.product_id.id,
-            'company_id': self.company_id.id,
         }
 
     def _create_and_assign_production_lot(self):
@@ -643,7 +641,7 @@ class StockMoveLine(models.Model):
         key_to_index = {}  # key to index of the lot
         key_to_mls = defaultdict(lambda: self.env['stock.move.line'])  # key to all mls
         for ml in self:
-            key = (ml.company_id.id, ml.product_id.id, ml.lot_name)
+            key = (ml.product_id.id, ml.lot_name)
             key_to_mls[key] |= ml
             if ml.tracking != 'lot' or key not in key_to_index:
                 key_to_index[key] = len(lot_vals)

--- a/addons/stock/models/stock_quant.py
+++ b/addons/stock/models/stock_quant.py
@@ -955,9 +955,9 @@ class StockQuant(models.Model):
     @api.onchange('lot_id')
     def _onchange_serial_number(self):
         if self.lot_id and self.product_id.tracking == 'serial':
-            message, dummy = self.env['stock.quant']._check_serial_number(self.product_id,
-                                                                      self.lot_id,
-                                                                      self.company_id)
+            message, dummy = self.env['stock.quant'].sudo()._check_serial_number(self.product_id,
+                                                                                 self.lot_id,
+                                                                                 self.company_id)
             if message:
                 return {'warning': {'title': _('Warning'), 'message': message}}
 
@@ -1318,7 +1318,7 @@ class StockQuant(models.Model):
         :param product_id: `product.product` product to check SN for
         :param lot_id: `stock.production.lot` SN to check
         :param company_id: `res.company` company to check against (i.e. we ignore duplicate SNs across
-            different companies)
+            different companies for lots defined with a company)
         :param source_location_id: `stock.location` optional source location if using the SN rather
             than assigning it
         :param ref_doc_location_id: `stock.location` optional reference document location for
@@ -1330,12 +1330,14 @@ class StockQuant(models.Model):
         message = None
         recommended_location = None
         if product_id.tracking == 'serial':
+            internal_domain = [('location_id.usage', 'in', ('internal', 'transit'))]
+            if lot_id.company_id:
+                internal_domain = expression.AND([internal_domain, [('company_id', '=', company_id.id)]])
             quants = self.env['stock.quant'].search([('product_id', '=', product_id.id),
-                                                         ('lot_id', '=', lot_id.id),
-                                                         ('quantity', '!=', 0),
-                                                         '|', ('location_id.usage', '=', 'customer'),
-                                                              '&', ('company_id', '=', company_id.id),
-                                                                   ('location_id.usage', 'in', ('internal', 'transit'))])
+                                                     ('lot_id', '=', lot_id.id),
+                                                     ('quantity', '!=', 0),
+                                                     '|', ('location_id.usage', '=', 'customer'),
+                                                           *internal_domain])
             sn_locations = quants.mapped('location_id')
             if quants:
                 if not source_location_id:
@@ -1360,7 +1362,7 @@ class StockQuant(models.Model):
                             if location.usage != 'customer':
                                 recommended_location = location
                                 break
-                    if recommended_location:
+                    if recommended_location and recommended_location.company_id == company_id:
                         message = _('Serial number (%s) is not located in %s, but is located in location(s): %s.\n\n'
                                     'Source location for this move will be changed to %s',
                                     lot_id.name, source_location_id.display_name, ', '.join(sn_locations.mapped('display_name')), recommended_location.display_name)
@@ -1368,6 +1370,7 @@ class StockQuant(models.Model):
                         message = _('Serial number (%s) is not located in %s, but is located in location(s): %s.\n\n'
                                     'Please correct this to prevent inconsistent data.',
                                     lot_id.name, source_location_id.display_name, ', '.join(sn_locations.mapped('display_name')))
+                        recommended_location = None
         return message, recommended_location
 
     def move_quants(self, location_dest_id=False, package_dest_id=False, message=False, unpack=False):

--- a/addons/stock/models/stock_scrap.py
+++ b/addons/stock/models/stock_scrap.py
@@ -94,11 +94,11 @@ class StockScrap(models.Model):
     @api.onchange('lot_id')
     def _onchange_serial_number(self):
         if self.product_id.tracking == 'serial' and self.lot_id:
-            message, recommended_location = self.env['stock.quant']._check_serial_number(self.product_id,
-                                                                                         self.lot_id,
-                                                                                         self.company_id,
-                                                                                         self.location_id,
-                                                                                         self.picking_id.location_dest_id)
+            message, recommended_location = self.env['stock.quant'].sudo()._check_serial_number(self.product_id,
+                                                                                                self.lot_id,
+                                                                                                self.company_id,
+                                                                                                self.location_id,
+                                                                                                self.picking_id.location_dest_id)
             if message:
                 if recommended_location:
                     self.location_id = recommended_location
