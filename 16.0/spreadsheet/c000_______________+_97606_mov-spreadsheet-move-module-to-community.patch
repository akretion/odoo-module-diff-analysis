PR: https://github.com/odoo/odoo/pull/97606

From: a20032cc1cb6d6fbd9efb9020f4ad7a96d59c2e1
From: Lucas Lef√®vre
Date: 2022-09-10 00:54:51

Structural Changes: 3
Total Changes: 87

[MOV] spreadsheet: move module to community

The spreadsheet module is moved to the community version
for the upcoming spreadsheet dashboards

This module is the core engine of spreadsheets in Odoo.
It contains `o-spreadsheet` library (o_spreadsheet.js) and all basic
integrations with odoo such as accounting formulas, lists, pivot, filters, etc.

This module alone does not have any action or menu to open a spreadsheet.
Those actions come with `documents_spreadsheet` module or the upcoming
`spreadsheet_dashboard` module.

Task 2799682

Part-of: odoo/odoo#97606

================================= pseudo patch: =================================

--- a/None
+++ b/addons/spreadsheet/models/__init__.py
@@ -0,0 +1,4 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from . import res_currency
+from . import res_currency_rate

--- a/None
+++ b/addons/spreadsheet/models/res_currency.py
@@ -0,0 +1,54 @@
+from odoo import api, models
+
+
+class ResCurrency(models.Model):
+    _inherit = "res.currency"
+
+    @api.model
+    def get_currencies_for_spreadsheet(self, currency_names):
+        """
+        Returns the currency structure of provided currency names.
+        This function is meant to be called by the spreadsheet js lib,
+        hence the formatting of the result.
+
+        :currency_names list(str): list of currency names (e.g.  ["EUR", "USD", "CAD"])
+        :return: list of dicts of the form `{ "code": str, "symbol": str, "decimalPlaces": int, "position":str }`
+        """
+        currencies = self.with_context(active_test=False).search(
+            [("name", "in", currency_names)],
+        )
+        result = []
+        for currency_name in currency_names:
+            currency = next(filter(lambda curr: curr.name == currency_name, currencies), None)
+            if currency:
+                currency_data = {
+                    "code": currency.name,
+                    "symbol": currency.symbol,
+                    "decimalPlaces": currency.decimal_places,
+                    "position": currency.position,
+                }
+            else:
+                currency_data = None
+            result.append(currency_data)
+        return result
+
+    @api.model
+    def get_company_currency_for_spreadsheet(self, company_id=None):
+        """
+        Returns the currency structure for the currency of the company.
+        This function is meant to be called by the spreadsheet js lib,
+        hence the formatting of the result.
+
+        :company_id int: Id of the company
+        :return: dict of the form `{ "code": str, "symbol": str, "decimalPlaces": int, "position":str }`
+        """
+        company = self.env["res.company"].browse(company_id) if company_id else self.env.company
+        if not company.exists():
+            return False
+        currency = company.currency_id
+        return {
+            "code": currency.name,
+            "symbol": currency.symbol,
+            "decimalPlaces": currency.decimal_places,
+            "position": currency.position,
+        }

--- a/None
+++ b/addons/spreadsheet/models/res_currency_rate.py
@@ -0,0 +1,29 @@
+from odoo import api, fields, models
+
+
+class ResCurrencyRate(models.Model):
+    _inherit = "res.currency.rate"
+
+    @api.model
+    def _get_rate_for_spreadsheet(self, currency_from_code, currency_to_code, date=None):
+        if not currency_from_code or not currency_to_code:
+            return False
+        Currency = self.env["res.currency"].with_context({"active_test": False})
+        currency_from = Currency.search([("name", "=", currency_from_code)])
+        currency_to = Currency.search([("name", "=", currency_to_code)])
+        if not currency_from or not currency_to:
+            return False
+        company = self.env.company
+        date = fields.Date.from_string(date) if date else fields.Date.context_today(self)
+        return Currency._get_conversion_rate(currency_from, currency_to, company, date)
+
+    @api.model
+    def get_rates_for_spreadsheet(self, requests):
+        result = []
+        for request in requests:
+            record = request.copy()
+            record.update({
+                "rate": self._get_rate_for_spreadsheet(request["from"], request["to"], request.get("date")),
+            })
+            result.append(record)
+        return result
