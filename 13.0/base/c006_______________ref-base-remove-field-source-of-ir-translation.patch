PR: https://github.com/odoo/odoo/pull/

From: 66ef641f33d4173fc55fe1016a292a2ebf55bdd3
From: Martin Trigaux
Date: 2019-08-01 09:06:25

Breaking data model changes score: 1, change matches:
-    source = fields.Text(string='Source term', compute='_compute_source',

Total Changes: 74

[REF] base: remove field source of ir.translation

Instead, make sure the field src is always up to date
Add tests

Changes in _write:
- Replace _set_ids (to be deprecated) call by _upsert_translations as it works
  in batch
- Call _upsert_translations for any language, including en_US
  In case an English translation already existed for a record, only the master
  value (on the reference record) was updated but the user kept seeing the
  translation value (was revealed 73a7534bfc).
- Read src_trans without language
  Similar as above, if an English translation already existed, the translation
  was used for the result of the read and not the new value that has just been
  inserted into the database
- Add _set_source method
  When updating a master record of a translated field, the src field must be
  updated, including in different languages.
  Before it was ok that the src field was out of date as the source was computed

Changes in copy_translation:
- set src as the new value without lang
  update the comment to reflect reality since 489494e7339
  src will contain the English version if no changes were made and it will
  contain the modified value if copy was overriden

Changes in upsert_translations:
- Do not force a module, comment, state
  Only src, res_id, name, value and lang must be given. Optional values will no
  longer be set to null if not given

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/ir_translation.py
+++ b/odoo/addons/base/models/ir_translation.py
@@ -171,8 +171,6 @@ class IrTranslation(models.Model):
     lang = fields.Selection(selection='_get_languages', string='Language', validate=False)
     type = fields.Selection(TRANSLATION_TYPE, string='Type', index=True)
     src = fields.Text(string='Internal Source')  # stored in database, kept for backward compatibility
-    source = fields.Text(string='Source term', compute='_compute_source',
-                         inverse='_inverse_source', search='_search_source')
     value = fields.Text(string='Translation Value')
     module = fields.Char(index=True, help="Module this term belongs to")
 
@@ -196,55 +194,6 @@ class IrTranslation(models.Model):
         langs = self.env['res.lang'].search([])
         return [(lang.code, lang.name) for lang in langs]
 
-    @api.depends('type', 'name', 'res_id')
-    def _compute_source(self):
-        ''' Get source name for the translation. If object type is model, return
-        the value stored in db. Otherwise, return value store in src field.
-        '''
-        for record in self:
-            record.source = record.src
-            if record.type != 'model':
-                continue
-            model_name, field_name = record.name.split(',')
-            if model_name not in self.env:
-                continue
-            model = self.env[model_name]
-            field = model._fields.get(field_name)
-            if field is None:
-                continue
-            if not callable(field.translate):
-                # Pass context without lang, need to read real stored field, not translation
-                try:
-                    result = model.browse(record.res_id).with_context(lang=None).read([field_name])
-                except AccessError:
-                    # because we can read self but not the record,
-                    # that means we would get an access error when accessing the translations
-                    # so instead we defer the access right to the "check" method
-                    result = [{field_name: _("Cannot be translated; record not accessible.")}]
-                record.source = result[0][field_name] if result else False
-
-    def _inverse_source(self):
-        ''' When changing source term of a translation, change its value in db
-        for the associated object, and the src field.
-        '''
-        self.ensure_one()
-        if self.type == 'model':
-            model_name, field_name = self.name.split(',')
-            model = self.env[model_name]
-            field = model._fields[field_name]
-            if not callable(field.translate):
-                # Make a context without language information, because we want
-                # to write on the value stored in db and not on the one
-                # associated with the current language. Also not removing lang
-                # from context trigger an error when lang is different.
-                model.browse(self.res_id).with_context(lang=None).write({field_name: self.source})
-        if self.src != self.source:
-            self.write({'src': self.source})
-
-    def _search_source(self, operator, value):
-        ''' the source term is stored on 'src' field '''
-        return [('src', operator, value)]
-
     def _auto_init(self):
         res = super(IrTranslation, self)._auto_init()
         # Add separate md5 index on src (no size limit on values, and good performance).
@@ -329,6 +278,22 @@ class IrTranslation(models.Model):
         ])
         return len(ids)
 
+    def _set_source(self, name, ids, src):
+        """ Update the translation source of records.
+
+        :param name: a string defined as "<model_name>,<field_name>"
+        :param ids: the ids of the given records
+        :param src: the source of the translation
+        """
+        self._cr.execute("""UPDATE ir_translation
+                            SET src=%s
+                            WHERE type=%s AND name=%s AND res_id IN %s
+                            RETURNING id""",
+                         (src, 'model', name, tuple(ids)))
+        existing_ids = [row[0] for row in self._cr.fetchall()]
+        # invalidate src for updated translations
+        self.invalidate_cache(fnames=['src'], ids=existing_ids)
+
     @api.model
     def _get_source_query(self, name, types, lang, source, res_id):
         if source:
@@ -645,6 +610,8 @@ class IrTranslation(models.Model):
             This method is used for creations of translations where the given
             ``vals_list`` is trusted to be the right values and potential
             conflicts should be updated to the new given value.
+            Mandatory values: name, lang, res_id, src, type
+            The other keys are ignored during update if not present
         """
         rows_by_type = defaultdict(list)
         for vals in vals_list:
@@ -661,7 +628,10 @@ class IrTranslation(models.Model):
                 ON CONFLICT (type, lang, name, res_id) WHERE type='model'
                 DO UPDATE SET (name, lang, res_id, src, type, value, module, state, comments) =
                     (EXCLUDED.name, EXCLUDED.lang, EXCLUDED.res_id, EXCLUDED.src, EXCLUDED.type,
-                     EXCLUDED.value, EXCLUDED.module, EXCLUDED.state, EXCLUDED.comments)
+                     EXCLUDED.value,
+                     COALESCE(EXCLUDED.module, ir_translation.module),
+                     COALESCE(EXCLUDED.state, ir_translation.state),
+                     COALESCE(EXCLUDED.comments, ir_translation.comments))
                 WHERE EXCLUDED.value IS NOT NULL AND EXCLUDED.value != '';
             """.format(", ".join(["%s"] * len(rows_by_type['model'])))
             self.env.cr.execute(query, rows_by_type['model'])
