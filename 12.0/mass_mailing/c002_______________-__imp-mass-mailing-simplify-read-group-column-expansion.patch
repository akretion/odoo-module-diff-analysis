PR: https://github.com/odoo/odoo/pull/

From: c1de5b84192953e49db04a99106b1c187d622ade
From: Olivier Dony
Date: 2018-07-04 08:11:32

Structural Changes: 2
Total Changes: 65

[IMP] mass_mailing: simplify read_group column expansion

The framework supports a special `group_expand` attribute on fields,
to provide a helper method that expands the list of columns in a
read_group (typically meant to display empty columns in kanban views)
See rev. 580e78ad375aa3f52f2307c82281268796275aea

More efficient, and less code.

================================= pseudo patch: =================================

--- a/addons/mass_mailing/models/mass_mailing.py
+++ b/addons/mass_mailing/models/mass_mailing.py
@@ -7,7 +7,7 @@ import logging
 import random
 import threading
 
-from odoo import api, fields, models, tools, _
+from odoo import api, fields, models, tools, _, SUPERUSER_ID
 from odoo.exceptions import UserError
 from odoo.tools.safe_eval import safe_eval
 
@@ -217,7 +217,8 @@ class MassMailingCampaign(models.Model):
     _inherits = {'utm.campaign': 'campaign_id'}
 
     stage_id = fields.Many2one('mail.mass_mailing.stage', string='Stage', required=True, 
-        default=lambda self: self.env['mail.mass_mailing.stage'].search([], limit=1))
+        default=lambda self: self.env['mail.mass_mailing.stage'].search([], limit=1),
+        group_expand='_group_expand_stage_ids')
     user_id = fields.Many2one(
         'res.users', string='Responsible',
         required=True, default=lambda self: self.env.uid)
@@ -321,31 +322,12 @@ class MassMailingCampaign(models.Model):
         return res
 
     @api.model
-    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):
-        """ Override read_group to always display all states. """
-        if groupby and groupby[0] == "stage_id":
-            # Default result structure
-            states_read = self.env['mail.mass_mailing.stage'].search_read([], ['name'])
-            states = [(state['id'], state['name']) for state in states_read]
-            read_group_all_states = [{
-                '__context': {'group_by': groupby[1:]},
-                '__domain': domain + [('stage_id', '=', state_value)],
-                'stage_id': state_value,
-                'state_count': 0,
-            } for state_value, state_name in states]
-            # Get standard results
-            read_group_res = super(MassMailingCampaign, self).read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby)
-            # Update standard results with default results
-            result = []
-            for state_value, state_name in states:
-                res = [x for x in read_group_res if x['stage_id'] == (state_value, state_name)]
-                if not res:
-                    res = [x for x in read_group_all_states if x['stage_id'] == state_value]
-                res[0]['stage_id'] = [state_value, state_name]
-                result.append(res[0])
-            return result
-        else:
-            return super(MassMailingCampaign, self).read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby)
+    def _group_expand_stage_ids(self, stages, domain, order):
+        """ Read group customization in order to display all the stages in the
+            kanban view, even if they are empty
+        """
+        stage_ids = stages._search([], order=order, access_rights_uid=SUPERUSER_ID)
+        return stages.browse(stage_ids)
 
 
 class MassMailing(models.Model):
@@ -389,7 +371,7 @@ class MassMailing(models.Model):
                                 help="This is the delivery method, e.g. Postcard, Email, or Banner Ad", default=lambda self: self.env.ref('utm.utm_medium_email'))
     clicks_ratio = fields.Integer(compute="_compute_clicks_ratio", string="Number of Clicks")
     state = fields.Selection([('draft', 'Draft'), ('in_queue', 'In Queue'), ('sending', 'Sending'), ('done', 'Sent')],
-        string='Status', required=True, copy=False, default='draft')
+        string='Status', required=True, copy=False, default='draft', group_expand='_group_expand_states')
     color = fields.Integer(string='Color Index')
     user_id = fields.Many2one('res.users', string='Mailing Manager', default=lambda self: self.env.user)
     # mailing options
@@ -551,31 +533,8 @@ class MassMailing(models.Model):
                        name=_('%s (copy)') % self.name)
         return super(MassMailing, self).copy(default=default)
 
-    @api.model
-    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):
-        """ Override read_group to always display all states. """
-        if groupby and groupby[0] == "state":
-            # Default result structure
-            states = [('draft', _('Draft')), ('in_queue', _('In Queue')), ('sending', _('Sending')), ('done', _('Sent'))]
-            read_group_all_states = [{
-                '__context': {'group_by': groupby[1:]},
-                '__domain': domain + [('state', '=', state_value)],
-                'state': state_value,
-                'state_count': 0,
-            } for state_value, state_name in states]
-            # Get standard results
-            read_group_res = super(MassMailing, self).read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby)
-            # Update standard results with default results
-            result = []
-            for state_value, state_name in states:
-                res = [x for x in read_group_res if x['state'] == state_value]
-                if not res:
-                    res = [x for x in read_group_all_states if x['state'] == state_value]
-                res[0]['state'] = state_value
-                result.append(res[0])
-            return result
-        else:
-            return super(MassMailing, self).read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby)
+    def _group_expand_states(self, states, domain, order):
+        return [key for key, val in type(self).state.selection]
 
     def update_opt_out(self, email, res_ids, value):
         model = self.env[self.mailing_model_real].with_context(active_test=False)
