PR: https://github.com/odoo/odoo/pull/84920

From: 83c52575d0ce3d7deb1737c622c6ce366db8c31b
From: Demesmaeker
Date: 2023-01-18 20:08:52

Breaking data model changes score: 3.8, change matches:
-    pricelist_id = fields.Many2one('product.pricelist', string='Default Pricelist', required=True, default=_default_pricelist,
-    available_pricelist_ids = fields.Many2many('product.pricelist', string='Available Pricelists', default=_default_pricelist,
+    pricelist_id = fields.Many2one('product.pricelist', string='Default Pricelist',
+    available_pricelist_ids = fields.Many2many('product.pricelist', string='Available Pricelists',
-    pricelist_id = fields.Many2one('product.pricelist', string='Pricelist', required=True, states={
+    pricelist_id = fields.Many2one('product.pricelist', string='Pricelist', states={

Total Changes: 48

[REF] product,repair,(*_)sale(_*): unrequired pricelist

Removes the constraint of using a pricelist and makes all sales flows
rely on the currency of the sale order (or repair order)

task-2735672

closes odoo/odoo#84920

Related: odoo/enterprise#24716
Related: odoo/upgrade#3642
Signed-off-by: Morgane Demesmaeker <edm@odoo.com>

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/pos_config.py
+++ b/addons/point_of_sale/models/pos_config.py
@@ -36,9 +36,6 @@ class PosConfig(models.Model):
                 ('journal_id.currency_id', 'in', (False, self.env.company.currency_id.id)),
         ])
 
-    def _default_pricelist(self):
-        return self.env['product.pricelist'].search([('company_id', 'in', (False, self.env.company.id)), ('currency_id', '=', self.env.company.currency_id.id)], limit=1)
-
     def _get_group_pos_manager(self):
         return self.env.ref('point_of_sale.group_pos_manager')
 
@@ -112,9 +109,9 @@ class PosConfig(models.Model):
     pos_session_username = fields.Char(compute='_compute_current_session_user')
     pos_session_state = fields.Char(compute='_compute_current_session_user')
     pos_session_duration = fields.Char(compute='_compute_current_session_user')
-    pricelist_id = fields.Many2one('product.pricelist', string='Default Pricelist', required=True, default=_default_pricelist,
-        help="The pricelist used if no customer is selected or if the customer has no Sale Pricelist configured.")
-    available_pricelist_ids = fields.Many2many('product.pricelist', string='Available Pricelists', default=_default_pricelist,
+    pricelist_id = fields.Many2one('product.pricelist', string='Default Pricelist',
+        help="The pricelist used if no customer is selected or if the customer has no Sale Pricelist configured if any.")
+    available_pricelist_ids = fields.Many2many('product.pricelist', string='Available Pricelists',
         help="Make several pricelists available in the Point of Sale. You can also apply a pricelist to specific customers from their contact form (in Sales tab). To be valid, this pricelist must be listed here as an available pricelist. Otherwise the default pricelist will apply.")
     company_id = fields.Many2one('res.company', string='Company', required=True, default=lambda self: self.env.company)
     group_pos_manager_id = fields.Many2one('res.groups', string='Point of Sale Manager Group', default=_get_group_pos_manager,
@@ -302,7 +299,7 @@ class PosConfig(models.Model):
     @api.constrains('pricelist_id', 'use_pricelist', 'available_pricelist_ids', 'journal_id', 'invoice_journal_id', 'payment_method_ids')
     def _check_currencies(self):
         for config in self:
-            if config.use_pricelist and config.pricelist_id not in config.available_pricelist_ids:
+            if config.use_pricelist and config.pricelist_id and config.pricelist_id not in config.available_pricelist_ids:
                 raise ValidationError(_("The default pricelist must be included in the available pricelists."))
 
             # Check if the config's payment methods are compatible with its currency

--- a/addons/point_of_sale/models/pos_order.py
+++ b/addons/point_of_sale/models/pos_order.py
@@ -31,7 +31,7 @@ class PosOrder(models.Model):
         taxes = line.tax_ids.filtered(lambda t: t.company_id.id == line.order_id.company_id.id)
         taxes = fiscal_position_id.map_tax(taxes)
         price = line.price_unit * (1 - (line.discount or 0.0) / 100.0)
-        taxes = taxes.compute_all(price, line.order_id.pricelist_id.currency_id, line.qty, product=line.product_id, partner=line.order_id.partner_id or False)['taxes']
+        taxes = taxes.compute_all(price, line.order_id.currency_id, line.qty, product=line.product_id, partner=line.order_id.partner_id or False)['taxes']
         return sum(tax.get('amount', 0.0) for tax in taxes)
 
     @api.model
@@ -46,7 +46,7 @@ class PosOrder(models.Model):
             'partner_id':   ui_order['partner_id'] or False,
             'date_order':   ui_order['creation_date'].replace('T', ' ')[:19],
             'fiscal_position_id': ui_order['fiscal_position_id'],
-            'pricelist_id': ui_order['pricelist_id'],
+            'pricelist_id': ui_order.get('pricelist_id'),
             'amount_paid':  ui_order['amount_paid'],
             'amount_total':  ui_order['amount_total'],
             'amount_tax':  ui_order['amount_tax'],
@@ -167,7 +167,7 @@ class PosOrder(models.Model):
         :param draft: Indicate that the pos_order is not validated yet.
         :type draft: bool.
         """
-        prec_acc = order.pricelist_id.currency_id.decimal_places
+        prec_acc = order.currency_id.decimal_places
 
         order_bank_statement_lines= self.env['pos.payment'].search([('pos_order_id', '=', order.id)])
         order_bank_statement_lines.unlink()
@@ -248,7 +248,7 @@ class PosOrder(models.Model):
         help="Allows to know if all the total cost of the order lines have already been computed")
     lines = fields.One2many('pos.order.line', 'order_id', string='Order Lines', states={'draft': [('readonly', False)]}, readonly=True, copy=True)
     company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True)
-    pricelist_id = fields.Many2one('product.pricelist', string='Pricelist', required=True, states={
+    pricelist_id = fields.Many2one('product.pricelist', string='Pricelist', states={
                                    'draft': [('readonly', False)]}, readonly=True)
     partner_id = fields.Many2one('res.partner', string='Customer', change_default=True, index='btree_not_null', states={'draft': [('readonly', False)], 'paid': [('readonly', False)]})
     sequence_number = fields.Integer(string='Sequence Number', help='A session-unique sequence number for the order', default=1)
@@ -367,9 +367,9 @@ class PosOrder(models.Model):
     @api.onchange('payment_ids', 'lines')
     def _onchange_amount_all(self):
         for order in self:
-            if not order.pricelist_id.currency_id:
+            if not order.currency_id:
                 raise UserError(_("You can't: create a pos order from the backend interface, or unset the pricelist, or create a pos.order in a python test with Form tool, or edit the form view in studio if no PoS order exist"))
-            currency = order.pricelist_id.currency_id
+            currency = order.currency_id
             order.amount_paid = sum(payment.amount for payment in order.payment_ids)
             order.amount_return = sum(payment.amount < 0 and payment.amount or 0 for payment in order.payment_ids)
             order.amount_tax = currency.round(sum(self._amount_line_tax(line, order.fiscal_position_id) for line in order.lines))
@@ -392,12 +392,11 @@ class PosOrder(models.Model):
             amounts[order['order_id'][0]]['taxes'] = order['price_subtotal_incl'] - order['price_subtotal']
 
         for order in self:
-            currency = order.pricelist_id.currency_id
             order.write({
                 'amount_paid': amounts[order.id]['paid'],
                 'amount_return': amounts[order.id]['return'],
-                'amount_tax': currency.round(amounts[order.id]['taxes']),
-                'amount_total': currency.round(amounts[order.id]['taxed'])
+                'amount_tax': order.currency_id.round(amounts[order.id]['taxes']),
+                'amount_total': order.currency_id.round(amounts[order.id]['taxed'])
             })
 
     @api.onchange('partner_id')
@@ -605,8 +604,7 @@ class PosOrder(models.Model):
             'ref': self.name,
             'partner_id': self.partner_id.id,
             'partner_bank_id': self._get_partner_bank_id(),
-            # considering partner's sale pricelist's currency
-            'currency_id': self.pricelist_id.currency_id.id,
+            'currency_id': self.currency_id.id,
             'invoice_user_id': self.user_id.id,
             'invoice_date': invoice_date.astimezone(timezone).date(),
             'fiscal_position_id': self.fiscal_position_id.id,
@@ -1169,7 +1167,7 @@ class PosOrderLine(models.Model):
         fpos = self.order_id.fiscal_position_id
         tax_ids_after_fiscal_position = fpos.map_tax(self.tax_ids)
         price = self.price_unit * (1 - (self.discount or 0.0) / 100.0)
-        taxes = tax_ids_after_fiscal_position.compute_all(price, self.order_id.pricelist_id.currency_id, self.qty, product=self.product_id, partner=self.order_id.partner_id)
+        taxes = tax_ids_after_fiscal_position.compute_all(price, self.order_id.currency_id, self.qty, product=self.product_id, partner=self.order_id.partner_id)
         return {
             'price_subtotal_incl': taxes['total_included'],
             'price_subtotal': taxes['total_excluded'],
@@ -1179,12 +1177,9 @@ class PosOrderLine(models.Model):
     @api.onchange('product_id')
     def _onchange_product_id(self):
         if self.product_id:
-            if not self.order_id.pricelist_id:
-                raise UserError(
-                    _('You have to select a pricelist in the sale form !\n'
-                      'Please set one before choosing a product.'))
             price = self.order_id.pricelist_id._get_product_price(
-                self.product_id, self.qty or 1.0)
+                self.product_id, self.qty or 1.0, currency=self.currency_id
+            )
             self.tax_ids = self.product_id.taxes_id.filtered(lambda r: not self.company_id or r.company_id == self.company_id)
             tax_ids_after_fiscal_position = self.order_id.fiscal_position_id.map_tax(self.tax_ids)
             self.price_unit = self.env['account.tax']._fix_tax_included_price_company(price, self.tax_ids, tax_ids_after_fiscal_position, self.company_id)
@@ -1193,12 +1188,10 @@ class PosOrderLine(models.Model):
     @api.onchange('qty', 'discount', 'price_unit', 'tax_ids')
     def _onchange_qty(self):
         if self.product_id:
-            if not self.order_id.pricelist_id:
-                raise UserError(_('You have to select a pricelist in the sale form.'))
             price = self.price_unit * (1 - (self.discount or 0.0) / 100.0)
             self.price_subtotal = self.price_subtotal_incl = price * self.qty
             if (self.tax_ids):
-                taxes = self.tax_ids.compute_all(price, self.order_id.pricelist_id.currency_id, self.qty, product=self.product_id, partner=False)
+                taxes = self.tax_ids.compute_all(price, self.order_id.currency_id, self.qty, product=self.product_id, partner=False)
                 self.price_subtotal = taxes['total_excluded']
                 self.price_subtotal_incl = taxes['total_included']
 
@@ -1410,8 +1403,8 @@ class ReportSaleDetails(models.AbstractModel):
         products_sold = {}
         taxes = {}
         for order in orders:
-            if user_currency != order.pricelist_id.currency_id:
-                total += order.pricelist_id.currency_id._convert(
+            if user_currency != order.currency_id:
+                total += order.currency_id._convert(
                     order.amount_total, user_currency, order.company_id, order.date_order or fields.Date.today())
             else:
                 total += order.amount_total
