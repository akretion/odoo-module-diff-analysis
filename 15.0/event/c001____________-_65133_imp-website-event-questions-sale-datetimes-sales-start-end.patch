PR: https://github.com/odoo/odoo/pull/65133

From: 417622d655e29bc69da0a7b6e66275784e24109b
From: nounoubensebia
Date: 2021-03-25 14:58:20

Breaking data model changes score: 3, change matches:
-    start_sale_date = fields.Date(
-    start_sale_date = fields.Date(string="Registration Start")
-    end_sale_date = fields.Date(string="Registration End")

Total Changes: 58

[IMP] [website_]event[_questions|_sale] datetimes sales start/end

changed the start/end date fields to datetime fields, in order to allow more
flexibility for the user and enable them to set a precise point in time at
which ticket sales should start/end, because otherwise ticket sales/end would
always be set at midnight which is not very flexible.

Task-2431440

closes odoo/odoo#65133

Related: odoo/upgrade#2126
Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/event/models/event_event.py
+++ b/addons/event/models/event_event.py
@@ -168,6 +168,10 @@ class EventEvent(models.Model):
     event_ticket_ids = fields.One2many(
         'event.event.ticket', 'event_id', string='Event Ticket', copy=True,
         compute='_compute_event_ticket_ids', readonly=False, store=True)
+    event_registrations_started = fields.Boolean(
+        'Registrations started', compute='_compute_event_registrations_started',
+        help="registrations have started if the current datetime is after the earliest starting date of tickets."
+    )
     event_registrations_open = fields.Boolean(
         'Registration open', compute='_compute_event_registrations_open', compute_sudo=True,
         help="Registrations are open if:\n"
@@ -177,9 +181,10 @@ class EventEvent(models.Model):
     event_registrations_sold_out = fields.Boolean(
         'Sold Out', compute='_compute_event_registrations_sold_out', compute_sudo=True,
         help='The event is sold out if no more seats are available on event. If ticketing is used and all tickets are sold out, the event will be sold out.')
-    start_sale_date = fields.Date(
+    start_sale_datetime = fields.Datetime(
         'Start sale date', compute='_compute_start_sale_date',
         help='If ticketing is used, contains the earliest starting sale date of tickets.')
+
     # Date fields
     date_tz = fields.Selection(
         _tz_get, string='Timezone', required=True,
@@ -250,12 +255,23 @@ class EventEvent(models.Model):
         for event in self:
             event.seats_expected = event.seats_unconfirmed + event.seats_reserved + event.seats_used
 
-    @api.depends('date_tz', 'start_sale_date', 'date_end', 'seats_available', 'seats_limited', 'event_ticket_ids.sale_available')
+    @api.depends('date_tz', 'start_sale_datetime')
+    def _compute_event_registrations_started(self):
+        for event in self:
+            event = event._set_tz_context()
+            if event.start_sale_datetime:
+                current_datetime = fields.Datetime.context_timestamp(event, fields.Datetime.now())
+                start_sale_datetime = fields.Datetime.context_timestamp(event, event.start_sale_datetime)
+                event.event_registrations_started = (current_datetime >= start_sale_datetime)
+            else:
+                event.event_registrations_started = True
+
+    @api.depends('date_tz', 'event_registrations_started', 'date_end', 'seats_available', 'seats_limited', 'event_ticket_ids.sale_available')
     def _compute_event_registrations_open(self):
         """ Compute whether people may take registrations for this event
 
           * event.date_end -> if event is done, registrations are not open anymore;
-          * event.start_sale_date -> lowest start date of tickets (if any; start_sale_date
+          * event.start_sale_datetime -> lowest start date of tickets (if any; start_sale_datetime
             is False if no ticket are defined, see _compute_start_sale_date);
           * any ticket is available for sale (seats available) if any;
           * seats are unlimited or seats are available;
@@ -264,18 +280,18 @@ class EventEvent(models.Model):
             event = event._set_tz_context()
             current_datetime = fields.Datetime.context_timestamp(event, fields.Datetime.now())
             date_end_tz = event.date_end.astimezone(pytz.timezone(event.date_tz or 'UTC')) if event.date_end else False
-            event.event_registrations_open = (event.start_sale_date <= current_datetime.date() if event.start_sale_date else True) and \
+            event.event_registrations_open = event.event_registrations_started and \
                 (date_end_tz >= current_datetime if date_end_tz else True) and \
                 (not event.seats_limited or event.seats_available) and \
                 (not event.event_ticket_ids or any(ticket.sale_available for ticket in event.event_ticket_ids))
 
-    @api.depends('event_ticket_ids.start_sale_date')
+    @api.depends('event_ticket_ids.start_sale_datetime')
     def _compute_start_sale_date(self):
         """ Compute the start sale date of an event. Currently lowest starting sale
         date of tickets if they are used, of False. """
         for event in self:
-            start_dates = [ticket.start_sale_date for ticket in event.event_ticket_ids if not ticket.is_expired]
-            event.start_sale_date = min(start_dates) if start_dates and all(start_dates) else False
+            start_dates = [ticket.start_sale_datetime for ticket in event.event_ticket_ids if not ticket.is_expired]
+            event.start_sale_datetime = min(start_dates) if start_dates and all(start_dates) else False
 
     @api.depends('event_ticket_ids.sale_available')
     def _compute_event_registrations_sold_out(self):
@@ -434,7 +450,7 @@ class EventEvent(models.Model):
           * type lines are added;
 
         Note that updating event_ticket_ids triggers _compute_start_sale_date
-        (start_sale_date computation) so ensure result to avoid cache miss.
+        (start_sale_datetime computation) so ensure result to avoid cache miss.
         """
         for event in self:
             if not event.event_type_id and not event.event_ticket_ids:

--- a/addons/event/models/event_ticket.py
+++ b/addons/event/models/event_ticket.py
@@ -61,8 +61,8 @@ class EventTicket(models.Model):
         ondelete='cascade', required=True)
     company_id = fields.Many2one('res.company', related='event_id.company_id')
     # sale
-    start_sale_date = fields.Date(string="Registration Start")
-    end_sale_date = fields.Date(string="Registration End")
+    start_sale_datetime = fields.Datetime(string="Registration Start")
+    end_sale_datetime = fields.Datetime(string="Registration End")
     is_expired = fields.Boolean(string='Is Expired', compute='_compute_is_expired')
     sale_available = fields.Boolean(string='Is Available', compute='_compute_sale_available', compute_sudo=True)
     registration_ids = fields.One2many('event.registration', 'event_ticket_id', string='Registrations')
@@ -72,17 +72,18 @@ class EventTicket(models.Model):
     seats_unconfirmed = fields.Integer(string='Unconfirmed Seats', compute='_compute_seats', store=True)
     seats_used = fields.Integer(string='Used Seats', compute='_compute_seats', store=True)
 
-    @api.depends('end_sale_date', 'event_id.date_tz')
+    @api.depends('end_sale_datetime', 'event_id.date_tz')
     def _compute_is_expired(self):
         for ticket in self:
             ticket = ticket._set_tz_context()
-            current_date = fields.Date.context_today(ticket)
-            if ticket.end_sale_date:
-                ticket.is_expired = ticket.end_sale_date < current_date
+            current_datetime = fields.Datetime.context_timestamp(ticket, fields.Datetime.now())
+            if ticket.end_sale_datetime:
+                end_sale_datetime = fields.Datetime.context_timestamp(ticket, ticket.end_sale_datetime)
+                ticket.is_expired = end_sale_datetime < current_datetime
             else:
                 ticket.is_expired = False
 
-    @api.depends('is_expired', 'start_sale_date', 'event_id.date_tz', 'seats_available', 'seats_max')
+    @api.depends('is_expired', 'start_sale_datetime', 'event_id.date_tz', 'seats_available', 'seats_max')
     def _compute_sale_available(self):
         for ticket in self:
             if not ticket.is_launched() or ticket.is_expired or (ticket.seats_max and ticket.seats_available <= 0):
@@ -118,10 +119,10 @@ class EventTicket(models.Model):
             if ticket.seats_max > 0:
                 ticket.seats_available = ticket.seats_max - (ticket.seats_reserved + ticket.seats_used)
 
-    @api.constrains('start_sale_date', 'end_sale_date')
+    @api.constrains('start_sale_datetime', 'end_sale_datetime')
     def _constrains_dates_coherency(self):
         for ticket in self:
-            if ticket.start_sale_date and ticket.end_sale_date and ticket.start_sale_date > ticket.end_sale_date:
+            if ticket.start_sale_datetime and ticket.end_sale_datetime and ticket.start_sale_datetime > ticket.end_sale_datetime:
                 raise UserError(_('The stop date cannot be earlier than the start date.'))
 
     @api.constrains('seats_available', 'seats_max')
@@ -142,10 +143,11 @@ class EventTicket(models.Model):
     def is_launched(self):
         # TDE FIXME: in master, make a computed field, easier to use
         self.ensure_one()
-        if self.start_sale_date:
+        if self.start_sale_datetime:
             ticket = self._set_tz_context()
-            current_date = fields.Date.context_today(ticket)
-            return ticket.start_sale_date <= current_date
+            current_datetime = fields.Datetime.context_timestamp(ticket, fields.Datetime.now())
+            start_sale_datetime = fields.Datetime.context_timestamp(ticket, ticket.start_sale_datetime)
+            return start_sale_datetime <= current_datetime
         else:
             return True
 
