PR: https://github.com/odoo/odoo/pull/58031

From: a31e07a9abf42e16e0ec1e7088211185784913d5
From: RÃ©my Voet (ryv)
Date: 2020-09-21 06:46:05

Structural Changes: 5
Total Changes: 9

[REM] (sale_)stock: remove old json forecasted fields

- Remove fields `json_forecast` of `stock.move`
- Remove fields `json_forecast` of `sale.order.line`

closes odoo/odoo#58031

X-original-commit: cc4748b01f5147a50e34d972b65f699a25bec720
Signed-off-by: Arnold Moyaux <amoyaux@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -176,10 +176,8 @@ class StockMove(models.Model):
     next_serial = fields.Char('First SN')
     next_serial_count = fields.Integer('Number of SN')
     orderpoint_id = fields.Many2one('stock.warehouse.orderpoint', 'Original Reordering Rule', check_company=True)
-    # TODO : remove `json_forecast` in master, use forcast_ fields instead
-    json_forecast = fields.Char('JSON data for the forecast widget', compute='_compute_json_forecast')
-    forecast_availability = fields.Float('Forcast Availability', compute='_compute_json_forecast', digits='Product Unit of Measure')
-    forecast_expected_date = fields.Datetime('Forcasted Expected date', compute='_compute_json_forecast')
+    forecast_availability = fields.Float('Forcast Availability', compute='_compute_forecast_information', digits='Product Unit of Measure')
+    forecast_expected_date = fields.Datetime('Forcasted Expected date', compute='_compute_forecast_information')
     lot_ids = fields.Many2many('stock.production.lot', compute='_compute_lot_ids', inverse='_set_lot_ids', string='Serial Numbers', readonly=False)
 
     @api.onchange('product_id', 'picking_type_id')
@@ -409,9 +407,8 @@ class StockMove(models.Model):
                 move.availability = min(move.product_qty, total_availability)
 
     @api.depends('product_id', 'picking_type_id', 'picking_id', 'reserved_availability', 'priority', 'state', 'product_uom_qty')
-    def _compute_json_forecast(self):
+    def _compute_forecast_information(self):
         """ Compute forecasted information of the related product by warehouse."""
-        self.json_forecast = False
         self.forecast_availability = False
         self.forecast_expected_date = False
 
