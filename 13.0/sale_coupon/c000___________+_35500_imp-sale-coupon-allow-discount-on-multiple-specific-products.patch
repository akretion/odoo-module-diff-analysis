PR: https://github.com/odoo/odoo/pull/35500

From: e87cec8c4960f8286226fd15ec0fae4e4612b47f
From: Romain Derie
Date: 2019-08-13 09:21:52

Breaking data model changes scores: del:1 + add:1, change matches:
-    discount_specific_product_id = fields.Many2one('product.product', string="Product",
+    discount_specific_product_ids = fields.Many2many('product.product', string="Products",

Total Changes: 29

[IMP] sale_coupon: allow discount on multiple specific products

Before this commit, a discount could only target the whole order, the cheapeast
product or a specific product.

With this commit, it becomes possible to select multiple specific products.
This will ease some realistic ecommerce flows.

For instance, one might create a promotion targetting all his bikes by simply
adding all bikes products into the specific products field. This is easily done
with the many2many widget on the form view.

task-33737

closes odoo/odoo#35500

Signed-off-by: Jérémy Kersten (jke) <jke@openerp.com>


Co-authored-by: Pratima Gupta <pgu@odoo.com>
Co-authored-by: Romain Derie <rde@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_coupon/models/sale_coupon_program.py
+++ b/addons/sale_coupon/models/sale_coupon_program.py
@@ -110,7 +110,7 @@ class SaleCouponProgram(models.Model):
         res = super(SaleCouponProgram, self).write(vals)
         reward_fields = [
             'reward_type', 'reward_product_id', 'discount_type', 'discount_percentage',
-            'discount_apply_on', 'discount_specific_product_id', 'discount_fixed_amount'
+            'discount_apply_on', 'discount_specific_product_ids', 'discount_fixed_amount'
         ]
         if any(field in reward_fields for field in vals):
             self.mapped('discount_line_product_id').write({'name': self[0].reward_id.display_name})
@@ -259,8 +259,8 @@ class SaleCouponProgram(models.Model):
             if program.reward_type == 'product' and \
                not order.order_line.filtered(lambda line: line.product_id == program.reward_product_id):
                 continue
-            elif program.reward_type == 'discount' and program.discount_apply_on == 'specific_product' and \
-               not order.order_line.filtered(lambda line: line.product_id == program.discount_specific_product_id):
+            elif program.reward_type == 'discount' and program.discount_apply_on == 'specific_products' and \
+               not order.order_line.filtered(lambda line: line.product_id in program.discount_specific_product_ids):
                 continue
             programs |= program
         return programs

--- a/addons/sale_coupon/models/sale_coupon_reward.py
+++ b/addons/sale_coupon/models/sale_coupon_reward.py
@@ -33,12 +33,12 @@ class SaleCouponReward(models.Model):
     discount_apply_on = fields.Selection([
         ('on_order', 'On Order'),
         ('cheapest_product', 'On Cheapest Product'),
-        ('specific_product', 'On Specific Product')], default="on_order",
+        ('specific_products', 'On Specific Products')], default="on_order",
         help="On Order - Discount on whole order\n" +
         "Cheapest product - Discount on cheapest product of the order\n" +
-        "Specific product - Discount on selected specific product")
-    discount_specific_product_id = fields.Many2one('product.product', string="Product",
-        help="Product that will be discounted if the discount is applied on a specific product")
+        "Specific products - Discount on selected specific products")
+    discount_specific_product_ids = fields.Many2many('product.product', string="Products",
+        help="Products that will be discounted if the discount is applied on specific products")
     discount_max_amount = fields.Float(default=0,
         help="Maximum amount of discount that can be provided")
     discount_fixed_amount = fields.Float(string="Fixed Amount", help='The discount in fixed amount')
@@ -65,8 +65,11 @@ class SaleCouponReward(models.Model):
                     reward_percentage = str(reward.discount_percentage)
                     if reward.discount_apply_on == 'on_order':
                         reward_string = _("%s%% discount on total amount" % (reward_percentage))
-                    elif reward.discount_apply_on == 'specific_product':
-                        reward_string = _("%s%% discount on %s" % (reward_percentage, reward.discount_specific_product_id.name))
+                    elif reward.discount_apply_on == 'specific_products':
+                        if len(reward.discount_specific_product_ids) > 1:
+                            reward_string = _("%s%% discount on products" % (reward_percentage))
+                        else:
+                            reward_string = _("%s%% discount on %s" % (reward_percentage, reward.discount_specific_product_ids.name))
                     elif reward.discount_apply_on == 'cheapest_product':
                         reward_string = _("%s%% discount on cheapest product" % (reward_percentage))
                 elif reward.discount_type == 'fixed_amount':

--- a/addons/sale_coupon/models/sale_order.py
+++ b/addons/sale_coupon/models/sale_order.py
@@ -155,11 +155,11 @@ class SaleOrder(models.Model):
                         'is_reward_line': True,
                         'tax_id': [(4, tax.id, False) for tax in taxes],
                     }
-        elif program.discount_apply_on in ['specific_product', 'on_order']:
-            if program.discount_apply_on == 'specific_product':
+        elif program.discount_apply_on in ['specific_products', 'on_order']:
+            if program.discount_apply_on == 'specific_products':
                 # We should not exclude reward line that offer this product since we need to offer only the discount on the real paid product (regular product - free product)
-                free_product_lines = self.env['sale.coupon.program'].search([('reward_type', '=', 'product'), ('reward_product_id', '=', program.discount_specific_product_id.id)]).mapped('discount_line_product_id')
-                lines = lines.filtered(lambda x: x.product_id == program.discount_specific_product_id or x.product_id in free_product_lines)
+                free_product_lines = self.env['sale.coupon.program'].search([('reward_type', '=', 'product'), ('reward_product_id', 'in', program.discount_specific_product_ids.ids)]).mapped('discount_line_product_id')
+                lines = lines.filtered(lambda x: x.product_id in (program.discount_specific_product_ids | free_product_lines))
 
             for line in lines:
                 discount_line_amount = self._get_reward_values_discount_percentage_per_line(program, line)
