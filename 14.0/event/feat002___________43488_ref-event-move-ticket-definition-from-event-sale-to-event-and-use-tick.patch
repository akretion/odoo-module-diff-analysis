PR: https://github.com/odoo/odoo/pull/43488

From: 6b09c1b8c62fc8b5bbd210d4759561ec67269155
From: Thibault DelavallÃ©e
Date: 2020-01-30 15:18:08

Breaking data model changes score: 3, change matches:
+    event_type_ticket_ids = fields.One2many(
+    event_ticket_ids = fields.One2many(
+    registration_ids = fields.One2many('event.registration', 'event_ticket_id', string='Registrations')

Total Changes: 200

[REF] event: move ticket definition from event_sale to event and use ticket templates

PURPOSE

Integration between event and eCommerce is required only when users handle the
entire selling process online. However users may require ticketing support
while managing payments outside of Odoo. Purpose of this commit is to support
tickets directly in event application without need of sales.

RATIONALE

Remove the need to have event_sale installed to manage basic multi ticket
event type. Integration with eCommerce is needed only when one wants to handle
the entire selling flow online, i.e. order, payment, ... Integration with
Sales is needed only when one wants to create sale orders linked to attendees.

Many event users do not need all of this. Their attendees pay through bank
transfers or they simply manage payments outside of Odoo while still
requiring tickets management.

SPECIFICATIONS

Remove the need to have event_sale installed to manage basic ticketing on
events.

Move ticket model (event.event.ticket) directly into event, copying most
fields from event_sale. Only sale specific fields and behavior should be kept
in event_sale :

  * keep product_id and price information in event_sale;
  * keep sales analysis in event_sale;

We also split tickets model used for event type (event.type.ticket) and
events (event.event.ticket). Indeed previously to this commit both are
modeled in the same table, with the following issues :

  * tickets on templates use only a subset of fields: name, seats availability,
    product, price;
  * a ticket has either an event_id, either an event_type_id, and there are
    constraints to try to avoid having lost tickets. This leads to a strange
    model where m2o fields are required only in some cases with a dual
    behavior;
  * tickets are not shared between event.type and event.event. They are copied
    and having a single model is therefore not necessary;

We therefore choose to have a light model for event.type.ticket. It is linked
to event.type when configuring template tickets. They are copied in the
onchange copying event template configuration to the event itself, leading
to event.event.ticket creation.

Some tests are moved / completed accordingly.

Access rights are copied from website_event_sale to website_even concerning
ticket access for public / portal. Currently they are kept as they are with
some rewording as it is not the purpose of this commit to rewrite them.

LINKS

Task ID 2177281
Community PR odoo/odoo#43488

================================= pseudo patch: =================================

--- a/addons/event/models/__init__.py
+++ b/addons/event/models/__init__.py
@@ -5,6 +5,7 @@ from . import event_event
 from . import event_mail
 from . import event_registration
 from . import event_stage
+from . import event_ticket
 from . import res_config_settings
 from . import res_partner
 from . import ir_autovacuum

--- a/addons/event/models/event_event.py
+++ b/addons/event/models/event_event.py
@@ -41,6 +41,12 @@ class EventType(models.Model):
 
     name = fields.Char('Event Category', required=True, translate=True)
     sequence = fields.Integer()
+    # tickets
+    use_ticket = fields.Boolean('Ticketing')
+    event_type_ticket_ids = fields.One2many(
+        'event.type.ticket', 'event_type_id',
+        string='Tickets', compute='_compute_event_type_ticket_ids',
+        readonly=False, store=True)
     # registration
     has_seats_limitation = fields.Boolean('Limited Seats')
     default_registration_min = fields.Integer(
@@ -69,6 +75,16 @@ class EventType(models.Model):
         copy=False,
         default=lambda self: self._get_default_event_type_mail_ids())
 
+    @api.depends('use_ticket')
+    def _compute_event_type_ticket_ids(self):
+        for template in self:
+            if not template.use_ticket:
+                template.event_type_ticket_ids = [(5, 0)]
+            elif not template.event_type_ticket_ids:
+                template.event_type_ticket_ids = [(0, 0, {
+                    'name': _('Registration'),
+                })]
+
     @api.onchange('has_seats_limitation')
     def _onchange_has_seats_limitation(self):
         if not self.has_seats_limitation:
@@ -143,6 +159,9 @@ class EventEvent(models.Model):
     auto_confirm = fields.Boolean(string='Autoconfirm Registrations')
     registration_ids = fields.One2many('event.registration', 'event_id', string='Attendees')
     event_registrations_open = fields.Boolean('Registration open', compute='_compute_event_registrations_open')
+    event_ticket_ids = fields.One2many(
+        'event.event.ticket', 'event_id', string='Event Ticket',
+        copy=True)
     # Date fields
     date_tz = fields.Selection(
         _tz_get, string='Timezone', required=True,
@@ -152,6 +171,7 @@ class EventEvent(models.Model):
     date_begin_located = fields.Char(string='Start Date Located', compute='_compute_date_begin_tz')
     date_end_located = fields.Char(string='End Date Located', compute='_compute_date_end_tz')
     is_one_day = fields.Boolean(compute='_compute_field_is_one_day')
+    start_sale_date = fields.Date('Start sale date', compute='_compute_start_sale_date')
     # Location and communication
     is_online = fields.Boolean('Online Event')
     address_id = fields.Many2one(
@@ -196,10 +216,12 @@ class EventEvent(models.Model):
                 event.seats_available = event.seats_max - (event.seats_reserved + event.seats_used)
             event.seats_expected = event.seats_unconfirmed + event.seats_reserved + event.seats_used
 
-    @api.depends('date_end', 'seats_available', 'seats_availability')
+    @api.depends('date_end', 'seats_available', 'seats_availability', 'event_ticket_ids.sale_available')
     def _compute_event_registrations_open(self):
         for event in self:
-            event.event_registrations_open = event.date_end > fields.Datetime.now() and (event.seats_available or event.seats_availability == 'unlimited')
+            event.event_registrations_open = (event.date_end > fields.Datetime.now()) and \
+                (event.seats_available or event.seats_availability == 'unlimited') and \
+                (not event.event_ticket_ids or any(ticket.sale_available for ticket in event.event_ticket_ids))
 
     @api.depends('stage_id', 'kanban_state')
     def _compute_kanban_state_label(self):
@@ -239,6 +261,12 @@ class EventEvent(models.Model):
             end_tz = fields.Datetime.context_timestamp(event, event.date_end)
             event.is_one_day = (begin_tz.date() == end_tz.date())
 
+    @api.depends('event_ticket_ids.start_sale_date')
+    def _compute_start_sale_date(self):
+        for event in self:
+            start_dates = [ticket.start_sale_date for ticket in event.event_ticket_ids if ticket.start_sale_date]
+            event.start_sale_date = min(start_dates) if start_dates else False
+
     @api.onchange('is_online')
     def _onchange_is_online(self):
         if self.is_online:
@@ -271,6 +299,19 @@ class EventEvent(models.Model):
                         })
                     for line in self.event_type_id.event_type_mail_ids]
 
+            # compute tickets information
+            if self.event_type_id.use_ticket:
+                all_ticket_values = []
+                for ticket in self.event_type_id.event_type_ticket_ids:
+                    ticket_vals = dict(
+                        (attribute_name, ticket[attribute_name] if not isinstance(ticket[attribute_name], models.BaseModel) else ticket[attribute_name].id)
+                        for attribute_name in self.env['event.type.ticket']._get_event_ticket_fields_whitelist()
+                    )
+                    ticket_vals['name'] = self.name and _('Registration for %s') % self.name or ticket.name
+                    all_ticket_values.append(ticket_vals)
+
+                self.event_ticket_ids = [(5, 0, 0)] + [(0, 0, item) for item in all_ticket_values]
+
     @api.constrains('seats_min', 'seats_max', 'seats_availability')
     def _check_seats_min_max(self):
         if any(event.seats_availability == 'limited' and event.seats_min > event.seats_max for event in self):

--- a/addons/event/models/event_registration.py
+++ b/addons/event/models/event_registration.py
@@ -22,6 +22,9 @@ class EventRegistration(models.Model):
     event_id = fields.Many2one(
         'event.event', string='Event', required=True,
         readonly=True, states={'draft': [('readonly', False)]})
+    event_ticket_id = fields.Many2one(
+        'event.event.ticket', string='Event Ticket', readonly=True,
+        states={'draft': [('readonly', False)]})
     # attendee
     partner_id = fields.Many2one(
         'res.partner', string='Contact',
@@ -43,12 +46,24 @@ class EventRegistration(models.Model):
         ('open', 'Confirmed'), ('done', 'Attended')],
         string='Status', default='draft', readonly=True, copy=False, tracking=True)
 
+    @api.onchange('event_id')
+    def _onchange_event_id(self):
+        # We reset the ticket when keeping it would lead to an inconstitent state.
+        if self.event_ticket_id and (not self.event_id or self.event_id != self.event_ticket_id.event_id):
+            self.event_ticket_id = None
+
     @api.constrains('event_id', 'state')
     def _check_seats_limit(self):
         for registration in self:
             if registration.event_id.seats_availability == 'limited' and registration.event_id.seats_max and registration.event_id.seats_available < (1 if registration.state == 'draft' else 0):
                 raise ValidationError(_('No more seats available for this event.'))
 
+    @api.constrains('event_ticket_id', 'state')
+    def _check_ticket_seats_limit(self):
+        for record in self:
+            if record.event_ticket_id.seats_max and record.event_ticket_id.seats_available < 0:
+                raise ValidationError(_('No more available seats for this ticket'))
+
     @api.onchange('partner_id')
     def _onchange_partner(self):
         if self.partner_id:

--- a/None
+++ b/addons/event/models/event_ticket.py
@@ -0,0 +1,139 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError, UserError
+
+
+class EventTemplateTicket(models.Model):
+    _name = 'event.type.ticket'
+    _description = 'Event Template Ticket'
+
+    # description
+    name = fields.Char(
+        string='Name', default=lambda self: _('Registration'),
+        required=True, translate=True)
+    event_type_id = fields.Many2one(
+        'event.type', string='Event Category', ondelete='cascade', required=True)
+    # sale
+    start_sale_date = fields.Date(string="Registration Start")
+    end_sale_date = fields.Date(string="Registration End")
+    is_expired = fields.Boolean(string='Is Expired', compute='_compute_is_expired')
+    sale_available = fields.Boolean(string='Is Available', compute='_compute_sale_available')
+    # seats
+    seats_availability = fields.Selection([
+        ('limited', 'Limited'), ('unlimited', 'Unlimited')], string='Seats Limit',
+        readonly=True, store=True, compute='_compute_seats_availability')
+    seats_max = fields.Integer(
+        string='Maximum Seats',
+        help="Define the number of available tickets. If you have too many registrations you will "
+             "not be able to sell tickets anymore. Set 0 to ignore this rule set as unlimited.")
+
+    @api.depends('end_sale_date', 'event_type_id')
+    def _compute_is_expired(self):
+        for ticket in self:
+            if ticket.end_sale_date:
+                current_date = fields.Date.context_today(ticket.with_context(tz=ticket._get_ticket_tz()))
+                ticket.is_expired = ticket.end_sale_date < current_date
+            else:
+                ticket.is_expired = False
+
+    @api.depends('start_sale_date', 'end_sale_date', 'event_type_id')
+    def _compute_sale_available(self):
+        for ticket in self:
+            current_date = fields.Date.context_today(ticket.with_context(tz=ticket._get_ticket_tz()))
+            if (ticket.start_sale_date and ticket.start_sale_date > current_date) or \
+                    ticket.end_sale_date and ticket.end_sale_date < current_date:
+                ticket.sale_available = False
+            else:
+                ticket.sale_available = True
+
+    @api.depends('seats_max')
+    def _compute_seats_availability(self):
+        for ticket in self:
+            ticket.seats_availability = 'limited' if ticket.seats_max else 'unlimited'
+
+    @api.constrains('start_sale_date', 'end_sale_date')
+    def _constrains_dates_coherency(self):
+        for ticket in self:
+            if ticket.start_sale_date and ticket.end_sale_date and ticket.start_sale_date > ticket.end_sale_date:
+                raise UserError(_('The stop date cannot be earlier than the start date.'))
+
+    def _get_ticket_tz(self):
+        return self.event_type_id.use_timezone and self.event_type_id.default_timezone or self.env.user.tz
+
+    @api.model
+    def _get_event_ticket_fields_whitelist(self):
+        """ Whitelist of fields that are copied from event_type_ticket_ids to event_ticket_ids when
+        changing the event_type_id field of event.event """
+        return ['name']
+
+
+class EventTicket(models.Model):
+    """ Ticket model allowing to have differnt kind of registrations for a given
+    event. Ticket are based on ticket type as they share some common fields
+    and behavior. Those models come from <= v13 Odoo event.event.ticket that
+    modeled both concept: tickets for event templates, and tickets for events. """
+    _name = 'event.event.ticket'
+    _inherit = 'event.type.ticket'
+    _description = 'Event Ticket'
+
+    # description
+    event_type_id = fields.Many2one(ondelete='set null', required=False)
+    event_id = fields.Many2one(
+        'event.event', string="Event",
+        ondelete='cascade', required=True)
+    company_id = fields.Many2one('res.company', related='event_id.company_id')
+    # sale
+    registration_ids = fields.One2many('event.registration', 'event_ticket_id', string='Registrations')
+    # seats
+    seats_reserved = fields.Integer(string='Reserved Seats', compute='_compute_seats', store=True)
+    seats_available = fields.Integer(string='Available Seats', compute='_compute_seats', store=True)
+    seats_unconfirmed = fields.Integer(string='Unconfirmed Seats', compute='_compute_seats', store=True)
+    seats_used = fields.Integer(string='Used Seats', compute='_compute_seats', store=True)
+
+    @api.depends('seats_max', 'registration_ids.state')
+    def _compute_seats(self):
+        """ Determine reserved, available, reserved but unconfirmed and used seats. """
+        # initialize fields to 0 + compute seats availability
+        for ticket in self:
+            ticket.seats_unconfirmed = ticket.seats_reserved = ticket.seats_used = ticket.seats_available = 0
+        # aggregate registrations by ticket and by state
+        if self.ids:
+            state_field = {
+                'draft': 'seats_unconfirmed',
+                'open': 'seats_reserved',
+                'done': 'seats_used',
+            }
+            query = """ SELECT event_ticket_id, state, count(event_id)
+                        FROM event_registration
+                        WHERE event_ticket_id IN %s AND state IN ('draft', 'open', 'done')
+                        GROUP BY event_ticket_id, state
+                    """
+            self.env['event.registration'].flush(['event_id', 'event_ticket_id', 'state'])
+            self.env.cr.execute(query, (tuple(self.ids),))
+            for event_ticket_id, state, num in self.env.cr.fetchall():
+                ticket = self.browse(event_ticket_id)
+                ticket[state_field[state]] += num
+        # compute seats_available
+        for ticket in self:
+            if ticket.seats_max > 0:
+                ticket.seats_available = ticket.seats_max - (ticket.seats_reserved + ticket.seats_used)
+
+    @api.constrains('seats_available', 'seats_max')
+    def _constrains_seats_available(self):
+        if any(record.seats_max and record.seats_available < 0 for record in self):
+            raise ValidationError(_('No more available seats for this ticket.'))
+
+    def _get_ticket_multiline_description(self):
+        """ Compute a multiline description of this ticket. It is used when ticket
+        description are necessary without having to encode it manually, like sales
+        information. """
+        self.ensure_one()
+        lines = [self.display_name]
+        if self.event_id:
+            lines.append(self.event_id.display_name)
+        return '\n'.join(lines)
+
+    def _get_ticket_tz(self):
+        return self.event_id.date_tz or self.env.user.tz
