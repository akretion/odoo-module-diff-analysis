PR: https://github.com/odoo/odoo/pull/

From: 4c31a758cf0715b1c1ff2f5b3cef18fec92c2d84
From: jpr-odoo
Date: 2018-08-13 19:53:19

Breaking data model changes score: 5, change matches:
+    sale_order_ids = fields.Many2many('sale.order', 'sale_order_transaction_rel', 'transaction_id', 'sale_order_id',
-    module_sale_payment = fields.Boolean("Sale Payment", help='Technical field implied by user choice of portal_confirmation_pay.')
-    module_website_quote = fields.Boolean("Quotations Templates")
+    transaction_ids = fields.Many2many('payment.transaction', 'sale_order_transaction_rel', 'sale_order_id', 'transaction_id',
+    authorized_transaction_ids = fields.Many2many('payment.transaction', compute='_compute_authorized_transaction_ids',

Total Changes: 311

[REF] various: move sale_payment and website_quote into sale and sale_management

[MOV] move sale_payment into sale
=================================

Almost all use cases of sale require sale_payment down the line.

There is only one case which does not: using sale_management without website_sale or website_quote.

However, since we want to move most of the features of website_quote into sale_management, moving sale_payement first will make the task easier.

[MOV] move website_quote into sale and sale_management
======================================================

We want to use some features of website_quote without having to install the whole module.

The main issue with website_quote was that it had a requirement on website.

What is common to website_sale and sale_management has been moved into sale. This is primarily the sales order portal view.

What is only related to sale_management has been moved into it. This is notably: sales order templates, optional products, sign and pay, ...

Everything that requires website has been moved into a new module named sale_quotation_builder. This is related to using the HTML builder to customize the quotation view.

Models, files and routes have been renamed to better convey their purpose and to follow guidelines more closely.

[IMP] merge sales order portal views
====================================

The old sales order view on the portal has been merged into the one from website_quote. The new view contains features of the two.

A lot of fixes and improvements have also been done, related to BS4 issues but also to improve the sales order view in general.

[IMP] add new settings
======================

The commit adds new settings related to activating the features that previously were activated by installing website_quote.

PR: #26345
Task: 49205, 1838924

================================= pseudo patch: =================================

--- a/addons/sale/models/__init__.py
+++ b/addons/sale/models/__init__.py
@@ -12,3 +12,4 @@ from . import sale
 from . import res_config_settings
 from . import sales_team
 from . import res_users
+from . import payment

--- a/None
+++ b/addons/sale/models/payment.py
@@ -0,0 +1,127 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+import logging
+
+from odoo import api, fields, models, _
+from odoo.exceptions import UserError
+from odoo.tools import float_compare
+
+_logger = logging.getLogger(__name__)
+
+
+class PaymentTransaction(models.Model):
+    _inherit = 'payment.transaction'
+
+    sale_order_ids = fields.Many2many('sale.order', 'sale_order_transaction_rel', 'transaction_id', 'sale_order_id',
+                                      string='Sales Orders', copy=False, readonly=True)
+    sale_order_ids_nbr = fields.Integer(compute='_compute_sale_order_ids_nbr', string='# of Sales Orders')
+
+    @api.depends('sale_order_ids')
+    def _compute_sale_order_ids_nbr(self):
+        for trans in self:
+            trans.sale_order_ids_nbr = len(trans.sale_order_ids)
+
+    @api.multi
+    def _log_payment_transaction_sent(self):
+        super(PaymentTransaction, self)._log_payment_transaction_sent()
+        for trans in self:
+            post_message = trans._get_payment_transaction_sent_message()
+            for so in trans.sale_order_ids:
+                so.message_post(body=post_message)
+
+    @api.multi
+    def _log_payment_transaction_received(self):
+        super(PaymentTransaction, self)._log_payment_transaction_received()
+        for trans in self.filtered(lambda t: t.provider not in ('manual', 'transfer')):
+            post_message = trans._get_payment_transaction_received_message()
+            for so in trans.sale_order_ids:
+                so.message_post(body=post_message)
+
+    @api.multi
+    def _set_transaction_pending(self):
+        # Override of '_set_transaction_pending' in the 'payment' module
+        # to sent the quotations automatically.
+        super(PaymentTransaction, self)._set_transaction_pending()
+
+        sales_orders = self.mapped('sale_order_ids').filtered(lambda so: so.state == 'draft')
+        sales_orders.force_quotation_send()
+
+    @api.multi
+    def _set_transaction_authorized(self):
+        # Override of '_set_transaction_authorized' in the 'payment' module
+        # to confirm the quotations automatically.
+        super(PaymentTransaction, self)._set_transaction_authorized()
+        sales_orders = self.mapped('sale_order_ids').filtered(lambda so: so.state == 'draft')
+        sales_orders.force_quotation_send()
+        sales_orders = self.mapped('sale_order_ids').filtered(lambda so: so.state == 'sent')
+        for so in sales_orders:
+            # For loop because some override of action_confirm are ensure_one.
+            so.action_confirm()
+
+    @api.multi
+    def _set_transaction_done(self):
+        # Override of '_set_transaction_done' in the 'payment' module
+        # to confirm the quotations automatically and to generate the invoices if needed.
+        sales_orders = self.mapped('sale_order_ids').filtered(lambda so: so.state == 'draft')
+        sales_orders.force_quotation_send()
+        sales_orders = self.mapped('sale_order_ids').filtered(lambda so: so.state == 'sent')
+        sales_orders.action_confirm()
+        automatic_invoice = self.env['ir.config_parameter'].sudo().get_param('sale.automatic_invoice')
+        if automatic_invoice:
+            for trans in self.filtered(lambda t: t.sale_order_ids):
+                trans.sale_order_ids._force_lines_to_invoice_policy_order()
+                invoices = trans.sale_order_ids.action_invoice_create()
+                trans.invoice_ids = [(6, 0, invoices)]
+        res = super(PaymentTransaction, self)._set_transaction_done()
+        if automatic_invoice:
+            default_template = self.env['ir.config_parameter'].sudo().get_param('sale.default_email_template')
+            if default_template:
+                for invoice in trans.invoice_ids:
+                    invoice.with_context(mark_invoice_as_sent=True).message_post_with_template(int(default_template), notif_layout="mail.mail_notification_paynow")
+        return res
+
+    @api.model
+    def _compute_reference_prefix(self, values):
+        prefix = super(PaymentTransaction, self)._compute_reference_prefix(values)
+        if not prefix and values and values.get('sale_order_ids'):
+            many_list = self.resolve_2many_commands('sale_order_ids', values['sale_order_ids'], fields=['name'])
+            return ','.join(dic['name'] for dic in many_list)
+        return prefix
+
+    @api.multi
+    def action_view_sales_orders(self):
+        action = {
+            'name': _('Sales Order(s)'),
+            'type': 'ir.actions.act_window',
+            'res_model': 'sale.order',
+            'target': 'current',
+        }
+        sale_order_ids = self.sale_order_ids.ids
+        if len(sale_order_ids) == 1:
+            action['res_id'] = sale_order_ids[0]
+            action['view_mode'] = 'form'
+        else:
+            action['view_mode'] = 'tree,form'
+            action['domain'] = [('id', 'in', sale_order_ids)]
+        return action
+
+    # --------------------------------------------------
+    # Tools for payment
+    # --------------------------------------------------
+
+    def render_sale_button(self, order, return_url, submit_txt=None, render_values=None):
+        values = {
+            'return_url': return_url,
+            'partner_id': order.partner_shipping_id.id or order.partner_invoice_id.id,
+            'billing_partner_id': order.partner_invoice_id.id,
+        }
+        if render_values:
+            values.update(render_values)
+        # Not very elegant to do that here but no choice regarding the design.
+        self._log_payment_transaction_sent()
+        return self.acquirer_id.with_context(submit_class='btn btn-primary', submit_txt=submit_txt or _('Pay Now')).sudo().render(
+            self.reference,
+            order.amount_total,
+            order.pricelist_id.currency_id.id,
+            values=values,
+        )

--- a/addons/sale/models/res_company.py
+++ b/addons/sale/models/res_company.py
@@ -8,8 +8,9 @@ class ResCompany(models.Model):
     _inherit = "res.company"
 
     sale_note = fields.Text(string='Default Terms and Conditions', translate=True)
-    portal_confirmation_sign = fields.Boolean(string='Digital Signature')
+    portal_confirmation_sign = fields.Boolean(string='Online Signature')
     portal_confirmation_pay = fields.Boolean(string='Electronic Payment')
+    quotation_validity_days = fields.Integer(default=30, string="Default Quotation Validity (Days)")
 
     # sale quotation onboarding
     sale_quotation_onboarding_state = fields.Selection([('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done"), ('closed', "Closed")], string="State of the sale onboarding panel", default='not_done')
@@ -108,3 +109,5 @@ class ResCompany(models.Model):
         action = self.env.ref('sale.action_open_sale_onboarding_quotation_layout').read()[0]
         action['res_id'] = self.env.user.company_id.id
         return action
+
+    _sql_constraints = [('check_quotation_validity_days', 'CHECK(quotation_validity_days > 0)', 'Quotation Validity is required and must be greater than 0.')]

--- a/addons/sale/models/res_config_settings.py
+++ b/addons/sale/models/res_config_settings.py
@@ -1,8 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from ast import literal_eval
-
 from odoo import api, fields, models
 
 
@@ -16,11 +14,11 @@ class ResConfigSettings(models.TransientModel):
         config_parameter='sale.use_sale_note')
     group_discount_per_so_line = fields.Boolean("Discounts", implied_group='sale.group_discount_per_so_line')
     module_sale_margin = fields.Boolean("Margins")
+    quotation_validity_days = fields.Integer(related='company_id.quotation_validity_days', string="Default Quotation Validity (Days)")
+    use_quotation_validity_days = fields.Boolean("Default Quotation Validity", config_parameter='sale.use_quotation_validity_days')
     group_warning_sale = fields.Boolean("Sale Order Warnings", implied_group='sale.group_warning_sale')
-    portal_confirmation_sign = fields.Boolean(related='company_id.portal_confirmation_sign', string='Digital Signature')
+    portal_confirmation_sign = fields.Boolean(related='company_id.portal_confirmation_sign', string='Online Signature')
     portal_confirmation_pay = fields.Boolean(related='company_id.portal_confirmation_pay', string='Electronic Payment')
-    module_sale_payment = fields.Boolean("Sale Payment", help='Technical field implied by user choice of portal_confirmation_pay.')
-    module_website_quote = fields.Boolean("Quotations Templates")
     group_sale_delivery_address = fields.Boolean("Customer Addresses", implied_group='sale.group_delivery_invoice_address')
     multi_sales_price = fields.Boolean("Multiple Sales Prices per Product")
     multi_sales_price_method = fields.Selection([
@@ -67,6 +65,18 @@ class ResConfigSettings(models.TransientModel):
     module_product_email_template = fields.Boolean("Specific Email")
     module_sale_coupon = fields.Boolean("Coupons & Promotions")
 
+    automatic_invoice = fields.Boolean("Automatic Invoice",
+                                       help="The invoice is generated automatically and available in the customer portal "
+                                            "when the transaction is confirmed by the payment acquirer.\n"
+                                            "The invoice is marked as paid and the payment is registered in the payment journal "
+                                            "defined in the configuration of the payment acquirer.\n"
+                                            "This mode is advised if you issue the final invoice at the order and not after the delivery.",
+                                       config_parameter='sale.automatic_invoice')
+    template_id = fields.Many2one('mail.template', 'Email Template',
+                                  domain="[('model', '=', 'account.invoice')]",
+                                  config_parameter='sale.default_email_template',
+                                  default=lambda self: self.env.ref('account.email_template_edi_invoice', False))
+
     def set_values(self):
         super(ResConfigSettings, self).set_values()
         if not self.group_discount_per_so_line:
@@ -107,6 +117,19 @@ class ResConfigSettings(models.TransientModel):
         if self.portal_confirmation_pay:
             self.module_sale_payment = True
 
+    @api.onchange('use_quotation_validity_days')
+    def _onchange_use_quotation_validity_days(self):
+        if self.quotation_validity_days <= 0:
+            self.quotation_validity_days = self.env['res.company'].default_get(['quotation_validity_days'])['quotation_validity_days']
+
+    @api.onchange('quotation_validity_days')
+    def _onchange_quotation_validity_days(self):
+        if self.quotation_validity_days <= 0:
+            self.quotation_validity_days = self.env['res.company'].default_get(['quotation_validity_days'])['quotation_validity_days']
+            return {
+                'warning': {'title': "Warning", 'message': "Quotation Validity is required and must be greater than 0."},
+            }
+
     @api.model
     def get_values(self):
         res = super(ResConfigSettings, self).get_values()

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -1,14 +1,12 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-import uuid
-
 from datetime import datetime, timedelta
 from functools import partial
 from itertools import groupby
 
 from odoo import api, fields, models, _
-from odoo.exceptions import UserError, AccessError
+from odoo.exceptions import UserError, ValidationError
 from odoo.tools.misc import formatLang
 from odoo.osv import expression
 from odoo.tools import float_is_zero, float_compare
@@ -23,6 +21,13 @@ class SaleOrder(models.Model):
     _description = "Quotation"
     _order = 'date_order desc, id desc'
 
+    def _default_validity_date(self):
+        if self.env['ir.config_parameter'].sudo().get_param('sale.use_quotation_validity_days'):
+            days = self.env.user.company_id.quotation_validity_days
+            if days > 0:
+                return fields.Date.to_string(datetime.now() + timedelta(days))
+        return False
+
     @api.depends('order_line.price_total')
     def _amount_all(self):
         """
@@ -121,9 +126,10 @@ class SaleOrder(models.Model):
         ('cancel', 'Cancelled'),
         ], string='Status', readonly=True, copy=False, index=True, track_visibility='onchange', track_sequence=3, default='draft')
     date_order = fields.Datetime(string='Order Date', required=True, readonly=True, index=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, copy=False, default=fields.Datetime.now)
-    validity_date = fields.Date(string='Quote Validity', readonly=True, copy=False, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]},
-        help="Validity date of the quotation, after this date, the customer won't be able to validate the quotation online.")
+    validity_date = fields.Date(string='Validity', readonly=True, copy=False, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]},
+        help="Validity date of the quotation, after this date, the customer won't be able to validate the quotation online.", default=_default_validity_date)
     is_expired = fields.Boolean(compute='_compute_is_expired', string="Is expired")
+    remaining_validity_days = fields.Integer(compute='_compute_remaining_validity_days', string="Remaining Validity Days")
     create_date = fields.Datetime(string='Creation Date', readonly=True, index=True, help="Date on which sales order is created.")
     confirmation_date = fields.Datetime(string='Confirmation Date', readonly=True, index=True, help="Date on which the sales order is confirmed.", oldname="date_confirm", copy=False)
     user_id = fields.Many2one('res.users', string='Salesperson', index=True, track_visibility='onchange', track_sequence=2, default=lambda self: self.env.user)
@@ -168,6 +174,12 @@ class SaleOrder(models.Model):
              "will be scheduled based on this date rather than product lead times.")
     expected_date = fields.Datetime("Expected Date", compute='_compute_expected_date', store=False, oldname='commitment_date',  # Note: can not be stored since depends on today()
         help="Delivery date you can promise to the customer, computed from product lead times and from the shipping policy of the order.")
+    amount_undiscounted = fields.Float('Amount Before Discount', compute='_compute_amount_undiscounted', digits=0)
+
+    transaction_ids = fields.Many2many('payment.transaction', 'sale_order_transaction_rel', 'sale_order_id', 'transaction_id',
+                                       string='Transactions', copy=False, readonly=True)
+    authorized_transaction_ids = fields.Many2many('payment.transaction', compute='_compute_authorized_transaction_ids',
+                                                  string='Authorized Transactions', copy=False, readonly=True)
 
     def _compute_access_url(self):
         super(SaleOrder, self)._compute_access_url()
@@ -197,9 +209,25 @@ class SaleOrder(models.Model):
             if dates_list:
                 order.expected_date = fields.Datetime.to_string(min(dates_list))
 
-    @api.model
-    def _get_customer_lead(self, product_tmpl_id):
-        return False
+    @api.multi
+    def _compute_remaining_validity_days(self):
+        for record in self:
+            if record.validity_date:
+                record.remaining_validity_days = (record.validity_date - fields.Date.today()).days + 1
+            else:
+                record.remaining_validity_days = 0
+
+    @api.depends('transaction_ids')
+    def _compute_authorized_transaction_ids(self):
+        for trans in self:
+            trans.authorized_transaction_ids = trans.transaction_ids.filtered(lambda t: t.state == 'authorized')
+
+    @api.one
+    def _compute_amount_undiscounted(self):
+        total = 0.0
+        for line in self.order_line:
+            total += line.price_subtotal + line.price_unit * ((line.discount or 0.0) / 100.0) * line.product_uom_qty  # why is there a discount in a field named amount_undiscounted ??
+        self.amount_undiscounted = total
 
     @api.multi
     def unlink(self):
@@ -401,7 +429,8 @@ class SaleOrder(models.Model):
             'fiscal_position_id': self.fiscal_position_id.id or self.partner_invoice_id.property_account_position_id.id,
             'company_id': self.company_id.id,
             'user_id': self.user_id and self.user_id.id,
-            'team_id': self.team_id.id
+            'team_id': self.team_id.id,
+            'transaction_ids': [(6, 0, self.transaction_ids.ids)],
         }
         return invoice_vals
 
@@ -694,6 +723,104 @@ class SaleOrder(models.Model):
 
         return groups
 
+    @api.multi
+    def _create_payment_transaction(self, vals):
+        '''Similar to self.env['payment.transaction'].create(vals) but the values are filled with the
+        current sales orders fields (e.g. the partner or the currency).
+        :param vals: The values to create a new payment.transaction.
+        :return: The newly created payment.transaction record.
+        '''
+        # Ensure the currencies are the same.
+        currency = self[0].pricelist_id.currency_id
+        if any([so.pricelist_id.currency_id != currency for so in self]):
+            raise ValidationError(_('A transaction can\'t be linked to sales orders having different currencies.'))
+
+        # Ensure the partner are the same.
+        partner = self[0].partner_id
+        if any([so.partner_id != partner for so in self]):
+            raise ValidationError(_('A transaction can\'t be linked to sales orders having different partners.'))
+
+        # Try to retrieve the acquirer. However, fallback to the token's acquirer.
+        acquirer_id = vals.get('acquirer_id')
+        acquirer = False
+        payment_token_id = vals.get('payment_token_id')
+
+        if payment_token_id:
+            payment_token = self.env['payment.token'].sudo().browse(payment_token_id)
+
+            # Check payment_token/acquirer matching or take the acquirer from token
+            if acquirer_id:
+                acquirer = self.env['payment.acquirer'].browse(acquirer_id)
+                if payment_token and payment_token.acquirer_id != acquirer:
+                    raise ValidationError(_('Invalid token found! Token acquirer %s != %s') % (
+                    payment_token.acquirer_id.name, acquirer.name))
+                if payment_token and payment_token.partner_id != partner:
+                    raise ValidationError(_('Invalid token found! Token partner %s != %s') % (
+                    payment_token.partner.name, partner.name))
+            else:
+                acquirer = payment_token.acquirer_id
+
+        # Check an acquirer is there.
+        if not acquirer_id and not acquirer:
+            raise ValidationError(_('A payment acquirer is required to create a transaction.'))
+
+        if not acquirer:
+            acquirer = self.env['payment.acquirer'].browse(acquirer_id)
+
+        # Check a journal is set on acquirer.
+        if not acquirer.journal_id:
+            raise ValidationError(_('A journal must be specified of the acquirer %s.' % acquirer.name))
+
+        if not acquirer_id and acquirer:
+            vals['acquirer_id'] = acquirer.id
+
+        vals.update({
+            'amount': sum(self.mapped('amount_total')),
+            'currency_id': currency.id,
+            'partner_id': partner.id,
+            'sale_order_ids': [(6, 0, self.ids)],
+        })
+
+        transaction = self.env['payment.transaction'].create(vals)
+
+        # Process directly if payment_token
+        if transaction.payment_token_id:
+            transaction.s2s_do_transaction()
+
+        return transaction
+
+    def _force_lines_to_invoice_policy_order(self):
+        for line in self.order_line:
+            if self.state in ['sale', 'done']:
+                line.qty_to_invoice = line.product_uom_qty - line.qty_invoiced
+            else:
+                line.qty_to_invoice = 0
+
+    @api.multi
+    def payment_action_capture(self):
+        self.authorized_transaction_ids.s2s_capture_transaction()
+
+    @api.multi
+    def payment_action_void(self):
+        self.authorized_transaction_ids.s2s_void_transaction()
+
+    @api.multi
+    def get_portal_url(self, suffix=None):
+        """
+            Get a portal url for this sale order, including access_token.
+            - suffix: string to append to the url, before the query string
+        """
+        self.ensure_one()
+        return self.access_url + '%s?access_token=%s' % (suffix if suffix else '', self._portal_ensure_token())
+
+    @api.multi
+    def get_portal_last_transaction(self):
+        self.ensure_one()
+        return self.transaction_ids.get_last_transaction()
+
+    @api.model
+    def _get_customer_lead(self, product_tmpl_id):
+        return False
 
 class SaleOrderLine(models.Model):
     _name = 'sale.order.line'
