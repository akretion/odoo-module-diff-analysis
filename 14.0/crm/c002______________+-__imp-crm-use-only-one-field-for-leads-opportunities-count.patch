PR: https://github.com/odoo/odoo/pull/

From: 66ce1e630212d82c3d734af7a176beafb2cef5f7
From: qmo-odoo
Date: 2020-01-15 10:02:35

Structural Changes: 5
Total Changes: 38

[IMP] crm: use only one field for leads/opportunities count

Prior to this commit, two fields were used for lead and opportunities
count.

As both of these fields were set with the same values and only existed
for labelling purposes, this commit replaces them by a single field
and handles the the labels in the xml.

LINKS:

TaskID: 2086863
PR: #38707

================================= pseudo patch: =================================

--- a/addons/crm/models/utm.py
+++ b/addons/crm/models/utm.py
@@ -6,37 +6,25 @@ from odoo import fields, models, api, SUPERUSER_ID
 class UtmCampaign(models.Model):
     _inherit = 'utm.campaign'
 
-    crm_lead_activated = fields.Boolean('Use Leads', compute='_compute_crm_lead_activated')
-    lead_count = fields.Integer('Lead Count', groups='sales_team.group_sale_salesman', compute="_compute_global_opportunity_and_lead_count")
-    opportunity_count = fields.Integer('Opportunity Count', groups='sales_team.group_sale_salesman', compute="_compute_global_opportunity_and_lead_count")
+    use_leads = fields.Boolean('Use Leads', compute='_compute_use_leads')
+    crm_lead_count = fields.Integer('Leads/Opportunities count', groups='sales_team.group_sale_salesman', compute="_compute_crm_lead_count")
 
-    def _compute_crm_lead_activated(self):
+    def _compute_use_leads(self):
         for campaign in self:
-            campaign.crm_lead_activated = self.env.user.has_group('crm.group_use_lead')
+            campaign.use_leads = self.env.user.has_group('crm.group_use_lead')
 
-    def _compute_global_opportunity_and_lead_count(self):
+    def _compute_crm_lead_count(self):
         lead_data = self.env['crm.lead'].with_context(active_test=False).read_group([
             ('campaign_id', 'in', self.ids)],
             ['campaign_id'], ['campaign_id'])
-        data_map = {datum['campaign_id'][0]: datum['campaign_id_count'] for datum in lead_data}
-        if self.env.user.has_group('crm.group_use_lead'):
-            for campaign in self:
-                campaign.lead_count = data_map.get(campaign.id, 0)
-                campaign.opportunity_count = 0
-        else:
-            for campaign in self:
-                campaign.lead_count = 0
-                campaign.opportunity_count = data_map.get(campaign.id, 0)
-
-    def action_redirect_to_leads(self):
-        action = self.env.ref('crm.crm_lead_all_leads').read()[0]
-        action['domain'] = [('campaign_id', '=', self.id)]
-        action['context'] = {'default_type': 'lead', 'active_test': False}
-        return action
+        mapped_data = {datum['campaign_id'][0]: datum['campaign_id_count'] for datum in lead_data}
+        for campaign in self:
+            campaign.crm_lead_count = mapped_data.get(campaign.id, 0)
 
-    def action_redirect_to_opportunities(self):
-        action = self.env.ref('crm.crm_lead_opportunities').read()[0]
+    def action_redirect_to_leads_opportunities(self):
+        view = 'crm.crm_lead_all_leads' if self.use_leads else 'crm.crm_lead_opportunities'
+        action = self.env.ref(view).read()[0]
         action['view_mode'] = 'tree,kanban,graph,pivot,form,calendar'
-        action['domain'] = [('campaign_id', '=', self.id)]
-        action['context'] = {'active_test': False}
+        action['domain'] = [('campaign_id', 'in', self.ids)]
+        action['context'] = {'active_test': False, 'create': False}
         return action
