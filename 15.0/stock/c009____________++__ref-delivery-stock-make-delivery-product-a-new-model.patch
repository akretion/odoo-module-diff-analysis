PR: https://github.com/odoo/odoo/pull/

From: 1cd0a138cf1288e2bbcad0ad261696b7ff727feb
From: yhu-odoo
Date: 2021-03-31 08:55:44

Structural Changes: 5
Total Changes: 46

[REF] delivery, stock: make delivery product a new model

Currently, delivery packaging and product packaging share the same
model product.packaging. In this commit, we make delivery packaging
a new model stock.package.type. The code is also moved to stock
instead of delivery for compatibility reasons.

Task 2341820
PR #63516
ENT PR odoo/enterprise#15363
UPG PR odoo/upgrade#2040

================================= pseudo patch: =================================

--- a/addons/stock/models/__init__.py
+++ b/addons/stock/models/__init__.py
@@ -19,3 +19,4 @@ from . import stock_warehouse
 from . import stock_scrap
 from . import product
 from . import stock_package_level
+from . import stock_package_type

--- a/None
+++ b/addons/stock/models/stock_package_type.py
@@ -0,0 +1,41 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models, fields, _
+
+
+class PackageType(models.Model):
+    _name = 'stock.package.type'
+    _description = "Stock package type"
+
+    def _get_default_length_uom(self):
+        return self.env['product.template']._get_length_uom_name_from_ir_config_parameter()
+
+    def _get_default_weight_uom(self):
+        return self.env['product.template']._get_weight_uom_name_from_ir_config_parameter()
+
+    name = fields.Char('Package Type', required=True)
+    sequence = fields.Integer('Sequence', default=1, help="The first in the sequence is the default one.")
+    height = fields.Integer('Height', help="Packaging Height")
+    width = fields.Integer('Width', help="Packaging Width")
+    packaging_length = fields.Integer('Length', help="Packaging Length")
+    max_weight = fields.Float('Max Weight', help='Maximum weight shippable in this packaging')
+    barcode = fields.Char('Barcode', copy=False)
+    weight_uom_name = fields.Char(string='Weight unit of measure label', compute='_compute_weight_uom_name', default=_get_default_weight_uom)
+    length_uom_name = fields.Char(string='Length unit of measure label', compute='_compute_length_uom_name', default=_get_default_length_uom)
+    company_id = fields.Many2one('res.company', 'Company', index=True)
+
+    _sql_constraints = [
+        ('positive_height', 'CHECK(height>=0)', 'Height must be positive'),
+        ('positive_width', 'CHECK(width>=0)', 'Width must be positive'),
+        ('positive_length', 'CHECK(packaging_length>=0)', 'Length must be positive'),
+        ('positive_max_weight', 'CHECK(max_weight>=0.0)', 'Max Weight must be positive'),
+    ]
+
+    def _compute_length_uom_name(self):
+        for package_type in self:
+            package_type.length_uom_name = self.env['product.template']._get_length_uom_name_from_ir_config_parameter()
+
+    def _compute_weight_uom_name(self):
+        for packaging in self:
+            packaging.weight_uom_name = self.env['product.template']._get_weight_uom_name_from_ir_config_parameter()

--- a/addons/stock/models/stock_quant.py
+++ b/addons/stock/models/stock_quant.py
@@ -726,8 +726,8 @@ class QuantPackage(models.Model):
         default=lambda self: self.env['ir.sequence'].next_by_code('stock.quant.package') or _('Unknown Pack'))
     quant_ids = fields.One2many('stock.quant', 'package_id', 'Bulk Content', readonly=True,
         domain=['|', ('quantity', '!=', 0), ('reserved_quantity', '!=', 0)])
-    packaging_id = fields.Many2one(
-        'product.packaging', 'Package Type', index=True, check_company=True)
+    package_type_id = fields.Many2one(
+        'stock.package.type', 'Package Type', index=True, check_company=True)
     location_id = fields.Many2one(
         'stock.location', 'Location', compute='_compute_package_info',
         index=True, readonly=True, store=True)
