PR: https://github.com/odoo/odoo/pull/88271

From: 4a8f31e25fb182eb78540536832475b9bb626ec7
From: Rohitkumar (roku)
Date: 2022-05-19 16:06:09

Structural Changes: 5
Total Changes: 17

[IMP] project,sale_timesheet: generic UX improvement for project

Purpose of this commit to improve generic usage of project
app.

So, in this commit done following changes:
  - change the placeholder of the name to 'e.g. Monthly review' in
    project_update_view_form
  - set the 'analytic account' of the project on the tasks by default
  - change the placeholder to 'e.g. Product Launch' in project_milestone_view_form
  - the 'cabinets' milestone should be linked to a milestone service,
    not a manual one so change data to milestone in demo data
  - rename the 'rating' stat button into 'last rating' in view_task_form2
  - set another employee than Mitchell for the 'customer care (prepaid hours)'
    SOL field in sale_service_demo_data
  - display a separator on the right of the stat button so remove unwanted
    properties in project_rightpanel.scss
  - add the 'name' field to the 'fields to export' when 'i want to update data'
    is set to true
  - remove the 'Getting Things Done (GTD)' example from kanban examples wizard
  - add a 'tasks due today' filter that should return tasks whose deadline falls on
    today's date in view_task_search_form

task-2809188

closes odoo/odoo#88271

Signed-off-by: Laurent Stukkens (ltu) <ltu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -227,7 +227,7 @@ class Project(models.Model):
     def _read_group_stage_ids(self, stages, domain, order):
         return self.env['project.project.stage'].search([], order=order)
 
-    name = fields.Char("Name", index='trigram', required=True, tracking=True, translate=True)
+    name = fields.Char("Name", index='trigram', required=True, tracking=True, translate=True, default_export_compatible=True)
     description = fields.Html()
     active = fields.Boolean(default=True,
         help="If the active field is set to False, it will allow you to hide the project without removing it.")
@@ -1187,11 +1187,12 @@ class Task(models.Model):
     repeat_show_month = fields.Boolean(compute='_compute_repeat_visibility')
 
     # Account analytic
-    analytic_account_id = fields.Many2one('account.analytic.account', ondelete='set null',
+    analytic_account_id = fields.Many2one('account.analytic.account', ondelete='set null', compute='_compute_analytic_account_id', store=True, readonly=False,
         domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]", check_company=True,
         help="Analytic account to which this task is linked for financial management. "
              "Use an analytic account to record cost and revenue on your task. "
              "If empty, the analytic account of the project will be used.")
+    is_analytic_account_id_changed = fields.Boolean('Is Analytic Account Manually Changed', compute='_compute_is_analytic_account_id_changed', store=True)
     project_analytic_account_id = fields.Many2one('account.analytic.account', string='Project Analytic Account', related='project_id.analytic_account_id')
     analytic_tag_ids = fields.Many2many('account.analytic.tag', string="Analytic Tags",
         domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]", check_company=True)
@@ -1204,6 +1205,18 @@ class Task(models.Model):
     def SELF_WRITABLE_FIELDS(self):
         return PROJECT_TASK_WRITABLE_FIELDS
 
+    @api.depends('project_id.analytic_account_id')
+    def _compute_analytic_account_id(self):
+        self.env.remove_to_compute(self._fields['is_analytic_account_id_changed'], self)
+        for task in self:
+            if not task.is_analytic_account_id_changed:
+                task.analytic_account_id = task.project_id.analytic_account_id
+
+    @api.depends('analytic_account_id')
+    def _compute_is_analytic_account_id_changed(self):
+        for task in self:
+            task.is_analytic_account_id_changed = task.project_id and task.analytic_account_id != task.project_id.analytic_account_id
+
     @api.depends('project_id', 'parent_id')
     def _compute_is_private(self):
         # Modify accordingly, this field is used to display the lock on the task's kanban card
