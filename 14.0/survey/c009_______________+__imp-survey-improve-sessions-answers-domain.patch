PR: https://github.com/odoo/odoo/pull/

From: 0e43becd9120e5c7cca9556517e443833b43d4d5
From: AurÃ©lien Warnon
Date: 2020-02-27 16:40:57

Structural Changes: 4
Total Changes: 39

[IMP] survey: improve sessions answers domain

This commit improves the answers count in the context of survey sessions as
well as displayed answers to narrow them down to the "current session".

We simply use a custom domain to consider all user_inputs and user_input_lines
that have a create_date after the start of the session.

It will help users to be able to re-use the same survey multiple times and run
different sessions without having to duplicate the survey every time.

LINKS

PR #45111
Task 2191924

================================= pseudo patch: =================================

--- a/addons/survey/models/survey_survey.py
+++ b/addons/survey/models/survey_survey.py
@@ -117,9 +117,11 @@ class Survey(models.Model):
     # live sessions - current question fields
     session_question_id = fields.Many2one('survey.question', string="Current Question", copy=False,
         help="The current question of the survey session.")
+    session_start_time = fields.Datetime("Current Session Start Time", copy=False)
     session_question_start_time = fields.Datetime("Current Question Start Time", copy=False,
         help="The time at which the current question has started, used to handle the timer for attendees.")
-    session_question_answer_count = fields.Integer("Answers Count", compute='_compute_session_question_answer_count')
+    session_answer_count = fields.Integer("Answers Count", compute='_compute_session_answer_count')
+    session_question_answer_count = fields.Integer("Question Answers Count", compute='_compute_session_question_answer_count')
     # live sessions - settings
     session_show_leaderboard = fields.Boolean("Show Session Leaderboard", compute='_compute_session_show_leaderboard',
         help="Whether or not we want to show the attendees leaderboard for this survey.")
@@ -176,20 +178,40 @@ class Survey(models.Model):
             survey.page_ids = survey.question_and_page_ids.filtered(lambda question: question.is_page)
             survey.question_ids = survey.question_and_page_ids - survey.page_ids
 
-    @api.depends('session_question_id', 'user_input_ids.user_input_line_ids')
+    @api.depends('session_start_time', 'user_input_ids')
+    def _compute_session_answer_count(self):
+        """ We have to loop since our result is dependent of the survey.session_start_time.
+        This field is currently used to display the count about a single survey, in the
+        context of sessions, so it should not matter too much. """
+        for survey in self:
+            answer_count = 0
+            input_count = self.env['survey.user_input'].read_group(
+                [('survey_id', '=', survey.id), ('create_date', '>=', survey.session_start_time)],
+                ['create_uid:count'],
+                ['survey_id'],
+            )
+            if input_count:
+                answer_count = input_count[0].get('create_uid', 0)
+
+            survey.session_answer_count = answer_count
+
+    @api.depends('session_question_id', 'session_start_time', 'user_input_ids.user_input_line_ids')
     def _compute_session_question_answer_count(self):
-        """ We have to loop since our result is dependent of the survey.session_question_id.
+        """ We have to loop since our result is dependent of the survey.session_question_id and
+        the survey.session_start_time.
         This field is currently used to display the count about a single survey, in the
         context of sessions, so it should not matter too much. """
         for survey in self:
             answer_count = 0
             input_line_count = self.env['survey.user_input.line'].read_group(
-                [('question_id', '=', survey.session_question_id.id), ('survey_id', '=', survey.id)],
+                [('question_id', '=', survey.session_question_id.id),
+                 ('survey_id', '=', survey.id),
+                 ('create_date', '>=', survey.session_start_time)],
                 ['user_input_id:count_distinct'],
                 ['question_id'],
             )
             if input_line_count:
-                answer_count = input_line_count[0].get('user_input_id')
+                answer_count = input_line_count[0].get('user_input_id', 0)
 
             survey.session_question_answer_count = answer_count
 
@@ -567,8 +589,10 @@ class Survey(models.Model):
         """" The leaderboard is descending and takes the total of the attendee points up to the current question. """
         self.ensure_one()
 
-        return self.env['survey.user_input'].search([('survey_id', '=', self.id)],
-            limit=25, order="scoring_total desc")
+        return self.env['survey.user_input'].search([
+            ('survey_id', '=', self.id),
+            ('create_date', '>=', self.session_start_time)
+        ], limit=25, order="scoring_total desc")
 
     # ------------------------------------------------------------
     # ACTIONS
@@ -699,6 +723,7 @@ class Survey(models.Model):
         self.ensure_one()
         self.sudo().write({
             'questions_layout': 'page_per_question',
+            'session_start_time': fields.Datetime.now(),
             'session_question_id': None,
             'session_state': 'ready'
         })
