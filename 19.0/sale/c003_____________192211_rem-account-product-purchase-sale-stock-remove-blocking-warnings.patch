PR: https://github.com/odoo/odoo/pull/192211

From: 5ad26943c26a6f297ad4c5e1b18da4e4bc43e103
From: Lulu Grimalkin (lugr)
Date: 2025-04-09 09:56:38

Breaking data model changes scores: del:2 + add:0, change matches:
-    sale_line_warn = fields.Selection(
-    sale_warn = fields.Selection(WARNING_MESSAGE, 'Sales Warnings', default='no-message', help=WARNING_HELP)

Total Changes: 71

[REM] account,product,purchase,sale,stock: remove blocking warnings

Warnings are being revamped in logistics modules. Blocking warnings
are being replaced with polite, nonintrusive warnings in purchase and
sale orders, and with internal instructions in stock pickings, all of
which will be displayed in warning boxes in views rather than popup
dialogs. Invoices rely on partner and product warnings from `purchase`
and `sale` depending on the move type, and no longer have distinct
partner warnings.

As there are no separate blocking warnings, there are no warning types
either, and whether a warning exists depends on whether the message
string is empty.

Task ID: 4268689

Part-of: odoo/odoo#192211
Related: odoo/enterprise#76401
Related: odoo/upgrade#7008
Signed-off-by: Tiffany Chang (tic) <tic@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale/models/product_template.py
+++ b/addons/sale/models/product_template.py
@@ -6,8 +6,6 @@ from odoo import _, api, fields, models
 from odoo.exceptions import ValidationError
 from odoo.tools import float_round
 
-from odoo.addons.base.models.res_partner import WARNING_HELP, WARNING_MESSAGE
-
 
 class ProductTemplate(models.Model):
     _inherit = 'product.template'
@@ -20,9 +18,6 @@ class ProductTemplate(models.Model):
         help="Manually set quantities on order: Invoice based on the manually entered quantity, without creating an analytic account.\n"
              "Timesheets on contract: Invoice based on the tracked hours on the related timesheet.\n"
              "Create a task and track hours: Create a task on the sales order validation and track the work hours.")
-    sale_line_warn = fields.Selection(
-        WARNING_MESSAGE, string="Sales Order Line",
-        help=WARNING_HELP, required=True, default="no-message")
     sale_line_warn_msg = fields.Text(string="Message for Sales Order Line")
     expense_policy = fields.Selection(
         selection=[
@@ -225,12 +220,6 @@ class ProductTemplate(models.Model):
                 'has_optional_products': has_optional_products,
                 'is_combo': self.type == 'combo',
             })
-        if self.sale_line_warn != 'no-message':
-            res['sale_warning'] = {
-                'type': self.sale_line_warn,
-                'title': _("Warning for %s", self.name),
-                'message': self.sale_line_warn_msg,
-            }
         return res
 
     @api.model

--- a/addons/sale/models/res_partner.py
+++ b/addons/sale/models/res_partner.py
@@ -3,8 +3,6 @@
 from odoo import api, fields, models
 from odoo.osv import expression
 
-from odoo.addons.base.models.res_partner import WARNING_HELP, WARNING_MESSAGE
-
 
 class ResPartner(models.Model):
     _inherit = 'res.partner'
@@ -15,7 +13,6 @@ class ResPartner(models.Model):
         compute='_compute_sale_order_count',
     )
     sale_order_ids = fields.One2many('sale.order', 'partner_id', 'Sales Order')
-    sale_warn = fields.Selection(WARNING_MESSAGE, 'Sales Warnings', default='no-message', help=WARNING_HELP)
     sale_warn_msg = fields.Text('Message for Sales Order')
 
     @api.model

--- a/addons/sale/models/sale_order.py
+++ b/addons/sale/models/sale_order.py
@@ -878,32 +878,6 @@ class SaleOrder(models.Model):
         ):
             self.show_update_fpos = True
 
-    @api.onchange('partner_id')
-    def _onchange_partner_id_warning(self):
-        if not self.partner_id:
-            return
-
-        partner = self.partner_id
-
-        # If partner has no warning, check its company
-        if partner.sale_warn == 'no-message' and partner.parent_id:
-            partner = partner.parent_id
-
-        if partner.sale_warn and partner.sale_warn != 'no-message':
-            # Block if partner only has warning but parent company is blocked
-            if partner.sale_warn != 'block' and partner.parent_id and partner.parent_id.sale_warn == 'block':
-                partner = partner.parent_id
-
-            if partner.sale_warn == 'block':
-                self.partner_id = False
-
-            return {
-                'warning': {
-                    'title': _("Warning for %s", partner.name),
-                    'message': partner.sale_warn_msg,
-                }
-            }
-
     @api.onchange('pricelist_id')
     def _onchange_pricelist_id_show_update_prices(self):
         self.show_update_pricelist = bool(self.order_line)
@@ -2155,10 +2129,8 @@ class SaleOrder(models.Model):
         res = super()._get_product_catalog_order_data(products, **kwargs)
         for product in products:
             res[product.id]['price'] = pricelist.get(product.id)
-            if product.sale_line_warn != 'no-message' and product.sale_line_warn_msg:
+            if product.sale_line_warn_msg:
                 res[product.id]['warning'] = product.sale_line_warn_msg
-            if product.sale_line_warn == "block":
-                res[product.id]['readOnly'] = True
         return res
 
     def _get_product_catalog_record_lines(self, product_ids, **kwargs):

--- a/addons/sale/models/sale_order_line.py
+++ b/addons/sale/models/sale_order_line.py
@@ -1130,25 +1130,6 @@ class SaleOrderLine(models.Model):
                     "A sale order line's product must match its combo item's product."
                 ))
 
-    #=== ONCHANGE METHODS ===#
-
-    @api.onchange('product_id')
-    def _onchange_product_id_warning(self):
-        if not self.product_id:
-            return
-
-        product = self.product_id
-        if product.sale_line_warn != 'no-message':
-            if product.sale_line_warn == 'block':
-                self.product_id = False
-
-            return {
-                'warning': {
-                    'title': _("Warning for %s", product.name),
-                    'message': product.sale_line_warn_msg,
-                }
-            }
-
     #=== CRUD METHODS ===#
 
     @api.model_create_multi
@@ -1425,8 +1406,7 @@ class SaleOrderLine(models.Model):
         the product is read-only or not.
 
         A product is considered read-only if the order is considered read-only (see
-        ``SaleOrder._is_readonly`` for more details) or if `self` contains multiple records
-        or if it has sale_line_warn == "block".
+        ``SaleOrder._is_readonly`` for more details) or if `self` contains multiple records.
 
         Note: This method cannot be called with multiple records that have different products linked.
 
@@ -1446,12 +1426,9 @@ class SaleOrderLine(models.Model):
                 'price': self.price_unit,
                 'readOnly': (
                     self.order_id._is_readonly()
-                    or self.product_id.sale_line_warn == 'block'
                     or bool(self.combo_item_id)
                 ),
             }
-            if self.product_id.sale_line_warn != 'no-message' and self.product_id.sale_line_warn_msg:
-                res['warning'] = self.product_id.sale_line_warn_msg
             return res
         elif self:
             self.product_id.ensure_one()
@@ -1475,8 +1452,6 @@ class SaleOrderLine(models.Model):
                     )
                 )
             }
-            if self.product_id.sale_line_warn != 'no-message' and self.product_id.sale_line_warn_msg:
-                res['warning'] = self.product_id.sale_line_warn_msg
             return res
         else:
             return {
