PR: https://github.com/odoo/odoo/pull/159487

From: 711d8e07b75ecb172dddcb54d55e587bb13dc91b
From: Thibault Delavall√©e
Date: 2024-06-17 11:35:51

Structural Changes: 3
Total Changes: 48

[MOV] event: move 'date_range' as a field on event and registration

Move "date_range" field from whatsapp to event, as anyway it calls a method
already used in various templates.

Move method itself on event model as it depends only on model.

Rename field to "event_date_range" to match event dates fields naming.

Some tests now require a cache invalidation, as we change context time but
field is already computed. In a real life usage field will be computed
when accessing it / sending emails so it should not have any impact.

Task-3768779

closes odoo/odoo#159487

Related: odoo/enterprise#59546
Related: odoo/upgrade#5870
Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/event/models/event_event.py
+++ b/addons/event/models/event_event.py
@@ -6,12 +6,13 @@ import pytz
 import textwrap
 
 from datetime import timedelta
+from dateutil.relativedelta import relativedelta
 
 from odoo import _, api, Command, fields, models, tools
 from odoo.addons.base.models.res_partner import _tz_get
 from odoo.exceptions import UserError, ValidationError
 from odoo.osv import expression
-from odoo.tools import format_datetime, html_to_inner_content, is_html_empty
+from odoo.tools import format_date, format_datetime, html_to_inner_content, is_html_empty
 from odoo.tools.misc import formatLang
 from odoo.tools.translate import html_translate
 
@@ -704,6 +705,23 @@ class EventEvent(models.Model):
             for attendee in event.registration_ids.filtered(filter_func):
                 self.env['mail.template'].browse(template_id).send_mail(attendee.id, force_send=force_send)
 
+    def _get_date_range_str(self, lang_code=False):
+        self.ensure_one()
+        today = fields.Datetime.now()
+        event_date = self.date_begin
+        diff = (event_date.date() - today.date())
+        if diff.days <= 0:
+            return _('today')
+        if diff.days == 1:
+            return _('tomorrow')
+        if (diff.days < 7):
+            return _('in %d days', diff.days)
+        if (diff.days < 14):
+            return _('next week')
+        if event_date.month == (today + relativedelta(months=+1)).month:
+            return _('next month')
+        return _('on %(date)s', date=format_date(self.env, self.date_begin, lang_code=lang_code, date_format='medium'))
+
     def _get_external_description(self):
         """
         Description of the event shortened to maximum 1900 characters to

--- a/addons/event/models/event_registration.py
+++ b/addons/event/models/event_registration.py
@@ -3,10 +3,8 @@
 import logging
 import os
 
-from dateutil.relativedelta import relativedelta
-
 from odoo import _, api, fields, models, SUPERUSER_ID
-from odoo.tools import format_date, email_normalize, email_normalize_all
+from odoo.tools import email_normalize, email_normalize_all
 from odoo.exceptions import AccessError, ValidationError
 _logger = logging.getLogger(__name__)
 
@@ -56,6 +54,7 @@ class EventRegistration(models.Model):
         readonly=False, store=True)
     event_begin_date = fields.Datetime(string="Event Start Date", related='event_id.date_begin', readonly=True)
     event_end_date = fields.Datetime(string="Event End Date", related='event_id.date_end', readonly=True)
+    event_date_range = fields.Char("Date Range", compute="_compute_date_range")
     event_organizer_id = fields.Many2one(string='Event Organizer', related='event_id.organizer_id', readonly=True)
     event_user_id = fields.Many2one(string='Event Responsible', related='event_id.user_id', readonly=True)
     company_id = fields.Many2one(
@@ -148,6 +147,11 @@ class EventRegistration(models.Model):
                 else:
                     registration.date_closed = False
 
+    @api.depends("event_id", "partner_id")
+    def _compute_date_range(self):
+        for registration in self:
+            registration.event_date_range = registration.event_id._get_date_range_str(registration.partner_id.lang)
+
     @api.constrains('event_id', 'event_ticket_id')
     def _check_event_ticket(self):
         if any(registration.event_id != registration.event_ticket_id.event_id for registration in self if registration.event_ticket_id):
@@ -388,24 +392,6 @@ class EventRegistration(models.Model):
     # TOOLS
     # ------------------------------------------------------------
 
-    def get_date_range_str(self, lang_code=False):
-        self.ensure_one()
-        today = fields.Datetime.now()
-        event_date = self.event_begin_date
-        diff = (event_date.date() - today.date())
-        if diff.days <= 0:
-            return _('today')
-        elif diff.days == 1:
-            return _('tomorrow')
-        elif (diff.days < 7):
-            return _('in %d days', diff.days)
-        elif (diff.days < 14):
-            return _('next week')
-        elif event_date.month == (today + relativedelta(months=+1)).month:
-            return _('next month')
-        else:
-            return _('on %(date)s', date=format_date(self.env, self.event_begin_date, lang_code=lang_code, date_format='medium'))
-
     def _get_registration_summary(self):
         self.ensure_one()
         return {
