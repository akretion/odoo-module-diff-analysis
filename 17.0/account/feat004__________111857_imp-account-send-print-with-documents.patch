PR: https://github.com/odoo/odoo/pull/111857

From: 955091e707df1206ccda8314f1f182e2a37a8362
From: Laurent Smet
Date: 2023-03-03 18:10:10

Breaking data model changes score: 0, change matches:

Total Changes: 629

[IMP] account*: send&print with documents

Refactoring send&print wizard.
==============================

Main reason for this commit is that we want to let the user
decide when to generate the relevant documents / approvals
for its invoices. The natural choice is when the information
leaves Odoo. So now, each time the users decide to
download/send its invoices, he will be able to select the
relevant documents to be generated and the approvals to be
requested from the send&print wizard.

This used to happen automatically during the posting with lots
of undesirable behaviors (difficulty to update/revert, hard to
know exactly what will happen,...)

Main changes:

1/ Send&print wizard

* The model 'account.invoice.send' has been replaced by
'account.move.send' and became models.Model to handle
asynchrounous generation of documents (webservice,..) in
case of more than one invoice.

* The wizard is meant to be overriden in order to add
checkbox and document to be generated. A comprehensive exemple
can be found in account_edi_ubl_cii.

2/ Import invoice from attachments

* The decoding logic has moved from account_edi to account
on the attachemnts.

* The function _extend_with_attachments() serve as a common
entry point for import (from chatter, dashboard).

3/ Export invoice pdf / document

* All the specific actions to export attachments should be
implemented on the account.move and called from the wizard in
 _generate_documents()

* The official pdf for the invoice is now only generated once
 the user request it. In order to regenerate the pdf and
documents, it needs to be deleted.

task-id: 3117238
[enterprise](https://github.com/odoo/enterprise/pull/36757)
[community](https://github.com/odoo/odoo/pull/111857
)

[IMP] web: enable close on ir.actions.act_url in wizard

Before this commit, calling ir.actions.act_url on a modal
leaves the modal open. Which feels ackward in the send&print
wizard.

We now enable 'close' parameter on ir.actions.act_url. If set,
the wizard will close after act_url.

closes odoo/odoo#111857

Related: odoo/enterprise#36757
Related: odoo/upgrade#4387
Signed-off-by: Laurent Smet <las@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account/models/__init__.py
+++ b/addons/account/models/__init__.py
@@ -32,6 +32,7 @@ from . import account_cash_rounding
 from . import account_incoterms
 from . import digest
 from . import res_users
+from . import ir_attachment
 from . import ir_actions_report
 from . import ir_module
 from . import res_currency

--- a/addons/account/models/account_journal.py
+++ b/addons/account/models/account_journal.py
@@ -709,44 +709,54 @@ class AccountJournal(models.Model):
         # We simply call the setup bar function.
         return self.env['res.company'].setting_init_bank_account_action()
 
-    def _create_document_from_attachment(self, attachment_ids=None):
+    def _create_document_from_attachment(self, attachment_ids):
         """ Create the invoices from files."""
-        context_move_type = self._context.get("default_move_type", "entry")
+        move_type = self._context.get("default_move_type", "entry")
         if not self:
-            if context_move_type in self.env['account.move'].get_sale_types():
+            if move_type in self.env['account.move'].get_sale_types():
                 journal_type = "sale"
-            elif context_move_type in self.env['account.move'].get_purchase_types():
+            elif move_type in self.env['account.move'].get_purchase_types():
                 journal_type = "purchase"
             else:
                 raise UserError(_("The journal in which to upload the invoice is not specified. "))
             self = self.env['account.journal'].search([
                 ('company_id', '=', self.env.company.id), ('type', '=', journal_type)
             ], limit=1)
+
         attachments = self.env['ir.attachment'].browse(attachment_ids)
         if not attachments:
             raise UserError(_("No attachment was provided"))
 
-        invoices = self.env['account.move']
-        with invoices._disable_discount_precision():
-            for attachment in attachments:
-                decoders = self.env['account.move']._get_create_document_from_attachment_decoders()
-                invoice = False
-                for decoder in sorted(decoders, key=lambda d: d[0]):
-                    invoice = decoder[1](attachment, journal=self)
-                    if invoice:
-                        break
-                if not invoice:
-                    invoice = self.env['account.move'].create({'journal_id': self.id})
-                invoice.with_context(no_new_invoice=True).message_post(attachment_ids=[attachment.id])
-                attachment.write({'res_model': 'account.move', 'res_id': invoice.id})
-                invoices += invoice
-        return invoices
-
-    def create_document_from_attachment(self, attachment_ids=None):
+        if not self:
+            raise UserError(_("No journal found"))
+
+        # As we are coming from the journal, we assume that each attachments
+        # will create an invoice with a tentative to enhance with EDI / OCR..
+        all_invoices = self.env['account.move']
+        for attachment in attachments:
+            invoice = self.env['account.move'].create({
+                'journal_id': self.id,
+                'move_type': move_type,
+            })
+
+            invoice._extend_with_attachments(attachment, new=True)
+
+            all_invoices |= invoice
+
+            invoice.with_context(
+                account_predictive_bills_disable_prediction=True,
+                no_new_invoice=True,
+            ).message_post(attachment_ids=attachment.ids)
+
+            attachment.write({'res_model': 'account.move', 'res_id': invoice.id})
+
+        return all_invoices
+
+    def create_document_from_attachment(self, attachment_ids):
         """ Create the invoices from files.
          :return: A action redirecting to account.move tree/form view.
         """
-        invoices = self._create_document_from_attachment(attachment_ids=attachment_ids)
+        invoices = self._create_document_from_attachment(attachment_ids)
         action_vals = {
             'name': _('Generated Documents'),
             'domain': [('id', 'in', invoices.ids)],

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -6,6 +6,8 @@ from datetime import date, timedelta
 from dateutil.relativedelta import relativedelta
 from hashlib import sha256
 from json import dumps
+import logging
+from psycopg2 import OperationalError
 import re
 from textwrap import shorten
 from unittest.mock import patch
@@ -29,6 +31,8 @@ from odoo.tools import (
     sql
 )
 
+_logger = logging.getLogger(__name__)
+
 
 #forbidden fields
 INTEGRITY_HASH_MOVE_FIELDS = ('date', 'journal_id', 'company_id')
@@ -528,6 +532,17 @@ class AccountMove(models.Model):
         states={'draft': [('readonly', False)]},
         help='Defines the smallest coinage of the currency that can be used to pay by cash.',
     )
+    invoice_pdf_report_id = fields.Many2one(
+        comodel_name='ir.attachment',
+        string="PDF Attachment",
+        compute=lambda self: self._compute_linked_attachment_id('invoice_pdf_report_id', 'invoice_pdf_report_file'),
+        depends=['invoice_pdf_report_file']
+    )
+    invoice_pdf_report_file = fields.Binary(
+        attachment=True,
+        string="PDF File",
+        copy=False,
+    )
 
     # === Display purpose fields === #
     # used to have a dynamic domain on journal / taxes in the form view.
@@ -1444,6 +1459,20 @@ class AccountMove(models.Model):
         for move in self:
             move.amount_total_words = move.currency_id.amount_to_text(move.amount_total).replace(',', '')
 
+    def _compute_linked_attachment_id(self, attachment_field, binary_field):
+        """Helper to retreive Attachment from Binary fields
+        This is needed because fields.Many2one('ir.attachment') makes all
+        attachments available to the user.
+        """
+        attachments = self.env['ir.attachment'].search([
+            ('res_model', '=', self._name),
+            ('res_id', 'in', self.ids),
+            ('res_field', '=', binary_field)
+        ])
+        move_vals = {att.res_id: att for att in attachments}
+        for move in self:
+            move[attachment_field] = move_vals.get(move.id, False)
+
     # -------------------------------------------------------------------------
     # INVERSE METHODS
     # -------------------------------------------------------------------------
@@ -2726,6 +2755,88 @@ class AccountMove(models.Model):
             values.update({'invoice_date_due': values['date'] + (self.invoice_date_due - self.date)})
         return values
 
+    # -------------------------------------------------------------------------
+    # EDI
+    # -------------------------------------------------------------------------
+
+    @contextmanager
+    def _get_edi_creation(self):
+        """Get an environment to import documents from other sources.
+
+        Allow to edit the current move or create a new one.
+        This will prevent computing the dynamic lines at each invoice line added and only
+        compute everything at the end.
+        """
+        container = {'records': self}
+        with self._check_balanced(container),\
+             self._disable_discount_precision(),\
+             self._sync_dynamic_lines(container):
+            move = self or self.create({})
+            yield move
+            container['records'] = move
+
+    @contextmanager
+    def _disable_discount_precision(self):
+        """Disable the user defined precision for discounts.
+
+        This is useful for importing documents coming from other softwares and providers.
+        The reasonning is that if the document that we are importing has a discount, it
+        shouldn't be rounded to the local settings.
+        """
+        original_precision_get = DecimalPrecision.precision_get
+        def precision_get(self, application):
+            if application == 'Discount':
+                return 100
+            return original_precision_get(self, application)
+        with patch('odoo.addons.base.models.decimal_precision.DecimalPrecision.precision_get', new=precision_get):
+            yield
+
+    def _get_edi_decoder(self, file_data, new=False):
+        """To be extended with decoding capabilities.
+        :returns:  Function to be later used to import the file.
+                   Function' args:
+                   - invoice: account.move
+                   - file_data: attachemnt information / value
+                   - new: whether the invoice is newly created
+                   returns True if was able to process the invoice
+        """
+        return
+
+    def _extend_with_attachments(self, attachments, new=False):
+        """Main entry point to extend/enhance invoices with attachments.
+
+        Either coming from the chatter or the journal. It will unwrap all
+        attachemnts by priority then try to decode untill it succeed.
+
+        :returns: True if at least one doccument successfully imported
+        """
+        success = False
+
+        for file_data in attachments._unwrap_edi_attachments(): # sorted by priority
+
+            decoder = self._get_edi_decoder(file_data, new=new)
+
+            try:
+                if decoder and not success:
+                    with self._get_edi_creation() as invoice:
+                        # pylint: disable=not-callable
+                        success = decoder(invoice, file_data, new)
+
+            except RedirectWarning as rw:
+                raise rw
+            except Exception as e:
+                _logger.exception(
+                    "Error importing attachment '%s' as invoice: %s",
+                    file_data['filename'],
+                    str(e),
+                )
+
+            finally:
+                if file_data.get('on_close'):
+                    file_data['on_close']()
+
+        return success
+
     # -------------------------------------------------------------------------
     # BUSINESS METHODS
     # -------------------------------------------------------------------------
@@ -3446,19 +3557,6 @@ class AccountMove(models.Model):
             'type': 'ir.actions.act_window',
         }
 
-    def action_invoice_print(self):
-        """ Print the invoice and mark it as sent, so that we can see more
-            easily the next step of the workflow
-        """
-        if any(not move.is_invoice(include_receipts=True) for move in self):
-            raise UserError(_("Only invoices could be printed."))
-
-        self.filtered(lambda inv: not inv.is_move_sent).write({'is_move_sent': True})
-        if self.user_has_groups('account.group_account_invoice'):
-            return self.env.ref('account.account_invoices').report_action(self)
-        else:
-            return self.env.ref('account.account_invoices_without_payment').report_action(self)
-
     def action_duplicate(self):
         # offer the possibility to duplicate thanks to a button instead of a hidden menu, which is more visible
         self.ensure_one()
@@ -3471,22 +3569,19 @@ class AccountMove(models.Model):
         return action
 
     def action_send_and_print(self):
+        template = self.env.ref(self._get_mail_template(), raise_if_not_found=False)
+
         return {
-            'name': _('Send Invoice'),
-            'res_model': 'account.invoice.send',
+            'name': _("Send"),
+            'type': 'ir.actions.act_window',
+            'view_type': 'form',
             'view_mode': 'form',
+            'res_model': 'account.move.send',
+            'target': 'new',
             'context': {
-                'default_email_layout_xmlid': 'mail.mail_notification_layout_with_responsible_signature',
-                'default_template_id': self.env.ref(self._get_mail_template()).id,
-                'mark_invoice_as_sent': True,
-                'active_model': 'account.move',
-                # Setting both active_id and active_ids is required, mimicking how direct call to
-                # ir.actions.act_window works
-                'active_id': self.ids[0],
                 'active_ids': self.ids,
+                'default_mail_template_id': template.id,
             },
-            'target': 'new',
-            'type': 'ir.actions.act_window',
         }
 
     def action_invoice_sent(self):
@@ -3495,31 +3590,18 @@ class AccountMove(models.Model):
         """
         self.ensure_one()
         template = self.env.ref(self._get_mail_template(), raise_if_not_found=False)
-        lang = False
-        if template:
-            lang = template._render_lang(self.ids)[self.id]
-        if not lang:
-            lang = get_lang(self.env).code
-        compose_form = self.env.ref('account.account_invoice_send_wizard_form', raise_if_not_found=False)
-        ctx = dict(
-            default_model='account.move',
-            default_res_ids=self.ids,
-            default_template_id=template and template.id or False,
-            default_composition_mode='comment',
-            mark_invoice_as_sent=True,
-            default_email_layout_xmlid="mail.mail_notification_layout_with_responsible_signature",
-            model_description=self.with_context(lang=lang).type_name,
-            force_email=True,
-            active_ids=self.ids,
-        )
 
         report_action = {
-            'name': _('Send Invoice'),
+            'name': _("Send"),
             'type': 'ir.actions.act_window',
-            'res_model': 'account.invoice.send',
-            'views': [(compose_form.id, 'form')],
+            'view_type': 'form',
+            'view_mode': 'form',
+            'res_model': 'account.move.send',
             'target': 'new',
-            'context': ctx,
+            'context': {
+                'active_ids': self.ids,
+                'default_mail_template_id': template.id,
+            },
         }
 
         if self.env.is_admin() and not self.env.company.external_report_layout_id and not self.env.context.get('discard_logo_check'):
@@ -3656,6 +3738,43 @@ class AccountMove(models.Model):
         if len(records) == 100:  # assumes there are more whenever search hits limit
             self.env.ref('account.ir_cron_auto_post_draft_entry')._trigger()
 
+    @api.model
+    def _cron_account_move_send(self, job_count=10, with_commit=True):
+        '''
+        :param job_count:   The maximum number of jobs to process if specified.
+        :param with_commit: Flag indicating a commit should be made between each job.
+        '''
+        # Clean already processed wizards.
+        self.env['account.move.send'].search([('mode', '=', 'done')]).unlink()
+
+        # Process.
+        limit = job_count + 1
+        to_process = self.env['account.move.send'].search([('mode', '!=', 'done')], limit=limit)
+
+        need_retrigger = len(to_process) > job_count
+
+        for wizard in to_process[:job_count]:
+            move_to_lock = wizard.move_ids
+            try:
+                with self.env.cr.savepoint(flush=False):
+                    self._cr.execute('SELECT * FROM account_move WHERE id IN %s FOR UPDATE NOWAIT', [tuple(move_to_lock.ids)])
+
+            except OperationalError as e:
+                if e.pgcode == '55P03':
+                    _logger.debug('Another transaction already locked documents rows. Cannot process documents.')
+                    if not with_commit:
+                        raise UserError(_('This document is being sent by another process already.'))
+                    continue
+                else:
+                    raise e
+            wizard.action_send_and_print(from_cron=True)
+
+            if with_commit:
+                self.env.cr.commit()
+
+        if need_retrigger:
+            self.env.ref('account.ir_cron_account_move_send')._trigger()
+
     # -------------------------------------------------------------------------
     # HELPER METHODS
     # -------------------------------------------------------------------------
@@ -3805,38 +3924,6 @@ class AccountMove(models.Model):
 
         return rslt
 
-    @contextmanager
-    def _get_edi_creation(self):
-        """Get an environment to import documents from other sources.
-
-        Allow to edit the current move or create a new one.
-        This will prevent computing the dynamic lines at each invoice line added and only
-        compute everything at the end.
-        """
-        container = {'records': self}
-        with self._check_balanced(container),\
-             self._disable_discount_precision(),\
-             self._sync_dynamic_lines(container):
-            move = self or self.create({})
-            yield move
-            container['records'] = move
-
-    @contextmanager
-    def _disable_discount_precision(self):
-        """Disable the user defined precision for discounts.
-
-        This is useful for importing documents coming from other softwares and providers.
-        The reasonning is that if the document that we are importing has a discount, it
-        shouldn't be rounded to the local settings.
-        """
-        original_precision_get = DecimalPrecision.precision_get
-        def precision_get(self, application):
-            if application == 'Discount':
-                return 100
-            return original_precision_get(self, application)
-        with patch('odoo.addons.base.models.decimal_precision.DecimalPrecision.precision_get', new=precision_get):
-            yield
-
     # -------------------------------------------------------------------------
     # TOOLING
     # -------------------------------------------------------------------------
@@ -3974,7 +4061,7 @@ class AccountMove(models.Model):
         res = super()._message_post_after_hook(new_message, message_values)
 
         attachments = new_message.attachment_ids
-        if len(self) != 1 or not attachments or self.env.context.get('no_new_invoice') or not self.is_invoice(include_receipts=True):
+        if not attachments or self.env.context.get('no_new_invoice') or not self.is_invoice(include_receipts=True):
             return res
 
         odoobot = self.env.ref('base.partner_root')
@@ -3991,15 +4078,9 @@ class AccountMove(models.Model):
                               author_id=odoobot.id)
             return res
 
-        decoders = self.env['account.move']._get_update_invoice_from_attachment_decoders(self)
-        with self._disable_discount_precision():
-            for decoder in sorted(decoders, key=lambda d: d[0]):
-                # start with message_main_attachment_id, that way if OCR is installed, only that one will be parsed.
-                # this is based on the fact that the ocr will be the last decoder.
-                for attachment in attachments.sorted(lambda x: x != self.message_main_attachment_id):
-                    invoice = decoder[1](attachment, self)
-                    if invoice:
-                        return res
+        # As we are coming from the mail, we assume that ONE of the attachments
+        # will enhance the invoice thanks to EDI / OCR / .. capabilities
+        self._extend_with_attachments(attachments, new=False)
 
         return res
 
@@ -4057,23 +4138,10 @@ class AccountMove(models.Model):
         render_context['subtitles'] = subtitles
         return render_context
 
-    def _process_attachments_for_post(self, attachments, attachment_ids, message_values):
-        """ This method extension ensures that, when using the "Send & Print" feature
-        if the user adds an attachment, the latter will be linked to the record. """
-        self.ensure_one()
-        message_values['model'] = self._name
-        message_values['res_id'] = self.id
-
-        if attachment_ids:
-            # taking advantage of cache looks better in this case, to check
-            filtered_attachment_ids = self.env['ir.attachment'].sudo().browse(attachment_ids).filtered(
-                lambda a: a.res_model == 'account.invoice.send' and a.create_uid.id == self._uid)
-            # link account.invoice.send attachments to mail.compose.message, so that it is then
-            # updated with respect to access rights records in base method
-            if filtered_attachment_ids:
-                filtered_attachment_ids.res_model = 'mail.compose.message'
-
-        return super()._process_attachments_for_post(attachments, attachment_ids, message_values)
+    def _get_mail_thread_data_attachments(self):
+        res = super()._get_mail_thread_data_attachments()
+        # else, attachments with 'res_field' get excluded
+        return res | self.env['account.move.send']._get_linked_attachments(self)
 
     # -------------------------------------------------------------------------
     # HOOKS
@@ -4123,21 +4191,6 @@ class AccountMove(models.Model):
         self.ensure_one()
         return 'account.report_invoice_document'
 
-    def _get_create_document_from_attachment_decoders(self):
-        """ Returns a list of method that are able to create an invoice from an attachment and a priority.
-
-        :returns:   A list of tuples (priority, method) where method takes an attachment as parameter.
-        """
-        return []
-
-    def _get_update_invoice_from_attachment_decoders(self, invoice):
-        """ Returns a list of method that are able to create an invoice from an attachment and a priority.
-
-        :param invoice: The invoice on which to update the data.
-        :returns:       A list of tuples (priority, method) where method takes an attachment as parameter.
-        """
-        return []
-
     def _is_downpayment(self):
         ''' Return true if the invoice is a downpayment.
         Down-payments can be created from a sale order. This method is overridden in the sale order module.

--- a/None
+++ b/addons/account/models/ir_attachment.py
@@ -0,0 +1,143 @@
+# -*- coding: utf-8 -*-
+from odoo import api, models
+from odoo.tools.pdf import OdooPdfFileReader
+
+from lxml import etree
+from struct import error as StructError
+import io
+import logging
+
+_logger = logging.getLogger(__name__)
+
+
+class IrAttachment(models.Model):
+    _inherit = 'ir.attachment'
+
+    # -------------------------------------------------------------------------
+    # EDI
+    # -------------------------------------------------------------------------
+
+    @api.model
+    def _decode_edi_xml(self, filename, content):
+        """Decodes an xml into a list of one dictionary representing an attachment.
+        :returns:           A list with a dictionary.
+        """
+        self.ensure_one()
+        try:
+            xml_tree = etree.fromstring(content)
+        except Exception as e:
+            _logger.exception("Error when converting the xml content to etree: %s", e)
+            return []
+
+        to_process = []
+        if xml_tree is not None:
+            to_process.append({
+                'filename': filename,
+                'content': content,
+                'xml_tree': xml_tree,
+                'sort_weight': 10,
+                'type': 'xml',
+            })
+        return to_process
+
+    def _decode_edi_pdf(self, filename, content):
+        """Decodes a pdf and unwrap sub-attachment into a list of dictionary each representing an attachment.
+        :returns:           A list of dictionary for each attachment.
+        """
+        try:
+            buffer = io.BytesIO(content)
+            pdf_reader = OdooPdfFileReader(buffer, strict=False)
+        except Exception as e:
+            # Malformed pdf
+            _logger.exception("Error when reading the pdf: %s", e)
+            return []
+
+        # Process embedded files.
+        to_process = []
+        try:
+            for xml_name, xml_content in pdf_reader.getAttachments():
+                to_process.extend(self._decode_edi_xml(xml_name, xml_content))
+        except (NotImplementedError, StructError) as e:
+            _logger.warning("Unable to access the attachments of %s. Tried to decrypt it, but %s.", filename, e)
+
+        # Process the pdf itself.
+        to_process.append({
+            'filename': filename,
+            'content': content,
+            'pdf_reader': pdf_reader,
+            'attachment': self,
+            'on_close': buffer.close,
+            'sort_weight': 20,
+            'type': 'pdf',
+        })
+
+        return to_process
+
+    def _decode_edi_binary(self, filename, content):
+        """Decodes any file into a list of one dictionary representing an attachment.
+        This is a fallback for all files that are not decoded by other methods.
+        :returns:           A list with a dictionary.
+        """
+        return [{
+            'filename': filename,
+            'content': content,
+            'attachment': self,
+            'sort_weight': 100,
+            'type': 'binary',
+        }]
+
+    @api.model
+    def _get_edi_supported_formats(self):
+        """Get the list of supported formats.
+        This function is meant to be overriden to add formats.
+
+        :returns:           A list of dictionary.
+        * check:            Function to be called on the attachment to pre-check if decoding will work.
+        * decoder:          Function to be called on the attachment to unwrap it.
+        """
+
+        def is_xml(attachment):
+            # XML attachments received by mail have a 'text/plain' mimetype.
+            # Therefore, if content start with '<?xml', it is considered as XML.
+            is_text_plain_xml = 'text/plain' in attachment.mimetype and attachment.raw.startswith(b'<?xml')
+            return 'xml' in attachment.mimetype or is_text_plain_xml
+
+        return [
+            {
+                'check': lambda attachment: 'pdf' in attachment.mimetype,
+                'decoder': self._decode_edi_pdf,
+            },
+            {
+                'check': is_xml,
+                'decoder': self._decode_edi_xml,
+            },
+            {
+                'check': lambda attachment: True,
+                'decoder': self._decode_edi_binary,
+            },
+        ]
+
+    def _unwrap_edi_attachments(self):
+        """Decodes ir.attachment and unwrap sub-attachment into a sorted list of
+        dictionary each representing an attachment.
+
+        :returns:           A list of dictionary for each attachment.
+        * filename:         The name of the attachment.
+        * content:          The content of the attachment.
+        * type:             The type of the attachment.
+        * xml_tree:         The tree of the xml if type is xml.
+        * pdf_reader:       The pdf_reader if type is pdf.
+        * attachment:       The associated ir.attachment if any
+        * sort_weight:      The associated weigth used for sorting the arrays
+        """
+        to_process = []
+
+        for attachement in self:
+            supported_formats = attachement._get_edi_supported_formats()
+            for supported_format in supported_formats:
+                if supported_format['check'](self):
+                    to_process += supported_format['decoder'](attachement.name, attachement.raw)
+
+        to_process.sort(key=lambda x: x['sort_weight'])
+
+        return to_process

--- a/addons/account/models/partner.py
+++ b/addons/account/models/partner.py
@@ -2,6 +2,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 import time
+import re
 import logging
 
 from psycopg2 import sql, DatabaseError
@@ -677,3 +678,110 @@ class ResPartner(models.Model):
         :return: an array of ir.model.fields for which the user should provide values.
         """
         return []
+
+    # -------------------------------------------------------------------------
+    # EDI
+    # -------------------------------------------------------------------------
+
+    @api.model
+    def _retrieve_partner_with_vat(self, vat, extra_domain):
+        if not vat:
+            return None
+
+        # Sometimes, the vat is specified with some whitespaces.
+        normalized_vat = vat.replace(' ', '')
+        country_prefix = re.match('^[a-zA-Z]{2}|^', vat).group()
+
+        partner = self.env['res.partner'].search(extra_domain + [('vat', 'in', (normalized_vat, vat))], limit=1)
+
+        # Try to remove the country code prefix from the vat.
+        if not partner and country_prefix:
+            partner = self.env['res.partner'].search(extra_domain + [
+                ('vat', 'in', (normalized_vat[2:], vat[2:])),
+                ('country_id.code', '=', country_prefix.upper()),
+            ], limit=1)
+
+            # The country could be not specified on the partner.
+            if not partner:
+                partner = self.env['res.partner'].search(extra_domain + [
+                    ('vat', 'in', (normalized_vat[2:], vat[2:])),
+                    ('country_id', '=', False),
+                ], limit=1)
+
+        # The vat could be a string of alphanumeric values without country code but with missing zeros at the
+        # beginning.
+        if not partner:
+            try:
+                vat_only_numeric = str(int(re.sub(r'^\D{2}', '', normalized_vat) or 0))
+            except ValueError:
+                vat_only_numeric = None
+
+            if vat_only_numeric:
+                if country_prefix:
+                    vat_prefix_regex = f'({country_prefix})?'
+                else:
+                    vat_prefix_regex = '([A-z]{2})?'
+                query = self.env['res.partner']._search(extra_domain + [('active', '=', True)], limit=1)
+                query.add_where("res_partner.vat ~ %s", ['^%s0*%s$' % (vat_prefix_regex, vat_only_numeric)])
+                query_str, params = query.select()
+                self._cr.execute(query_str, params)
+                partner_row = self._cr.fetchone()
+                if partner_row:
+                    partner = self.env['res.partner'].browse(partner_row[0])
+
+        return partner
+
+    @api.model
+    def _retrieve_partner_with_phone_mail(self, phone, mail, extra_domain):
+        domains = []
+        if phone:
+            domains.append([('phone', '=', phone)])
+            domains.append([('mobile', '=', phone)])
+        if mail:
+            domains.append([('email', '=', mail)])
+
+        if not domains:
+            return None
+
+        domain = expression.OR(domains)
+        if extra_domain:
+            domain = expression.AND([domain, extra_domain])
+        return self.env['res.partner'].search(domain, limit=1)
+
+    @api.model
+    def _retrieve_partner_with_name(self, name, extra_domain):
+        if not name:
+            return None
+        return self.env['res.partner'].search([('name', 'ilike', name)] + extra_domain, limit=1)
+
+    def _retrieve_partner(self, name=None, phone=None, mail=None, vat=None, domain=None, company=None):
+        '''Search all partners and find one that matches one of the parameters.
+        :param name:    The name of the partner.
+        :param phone:   The phone or mobile of the partner.
+        :param mail:    The mail of the partner.
+        :param vat:     The vat number of the partner.
+        :param domain:  An extra domain to apply.
+        :param company: The company of the partner.
+        :returns:       A partner or an empty recordset if not found.
+        '''
+
+        def search_with_vat(extra_domain):
+            return self._retrieve_partner_with_vat(vat, extra_domain)
+
+        def search_with_phone_mail(extra_domain):
+            return self._retrieve_partner_with_phone_mail(phone, mail, extra_domain)
+
+        def search_with_name(extra_domain):
+            return self._retrieve_partner_with_name(name, extra_domain)
+
+        def search_with_domain(extra_domain):
+            if not domain:
+                return None
+            return self.env['res.partner'].search(domain + extra_domain, limit=1)
+
+        for search_method in (search_with_vat, search_with_domain, search_with_phone_mail, search_with_name):
+            for extra_domain in ([('company_id', '=', (company or self.env.company).id)], []):
+                partner = search_method(extra_domain)
+                if partner:
+                    return partner
+        return self.env['res.partner']

--- a/addons/account/models/product.py
+++ b/addons/account/models/product.py
@@ -2,6 +2,7 @@
 
 from odoo import api, fields, models, _
 from odoo.exceptions import ValidationError
+from odoo.osv import expression
 from odoo.tools import format_amount
 
 ACCOUNT_DOMAIN = "['&', '&', ('deprecated', '=', False), ('account_type', 'not in', ('asset_receivable','liability_payable','asset_cash','liability_credit_card','off_balance')), ('company_id', '=', current_company_id)]"
@@ -199,3 +200,34 @@ class ProductProduct(models.Model):
     def _compute_tax_string(self):
         for record in self:
             record.tax_string = record.product_tmpl_id._construct_tax_string(record.lst_price)
+
+    # -------------------------------------------------------------------------
+    # EDI
+    # -------------------------------------------------------------------------
+
+    def _retrieve_product(self, name=None, default_code=None, barcode=None, company=None):
+        '''Search all products and find one that matches one of the parameters.
+
+        :param name:            The name of the product.
+        :param default_code:    The default_code of the product.
+        :param barcode:         The barcode of the product.
+        :param company:         The company of the product.
+        :returns:               A product or an empty recordset if not found.
+        '''
+        if name and '\n' in name:
+            # cut Sales Description from the name
+            name = name.split('\n')[0]
+        domains = []
+        for value, domain in (
+            (name, ('name', 'ilike', name)),
+            (default_code, ('default_code', '=', default_code)),
+            (barcode, ('barcode', '=', barcode)),
+        ):
+            if value is not None:
+                domains.append([domain])
+
+        domain = expression.AND([
+            expression.OR(domains),
+            [('company_id', 'in', [False, company or self.env.company.id])],
+        ])
+        return self.env['product.product'].search(domain, limit=1)
