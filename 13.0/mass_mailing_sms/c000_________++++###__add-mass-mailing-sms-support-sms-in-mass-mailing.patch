PR: https://github.com/odoo/odoo/pull/

From: 14648272dadfbc9e2c7069de76770d5c052cd37f
From: Thibault DelavallÃ©e
Date: 2019-08-12 12:00:22

Structural Changes: 20
Total Changes: 412

[ADD] mass_mailing_sms: support SMS in mass mailing

PURPOSE

SMS are a powerful marketing tool. For instance it is perfect to announce a
sale or to communicate a coupon code, to welcome a new customer in a fidelity
program, ...

Purpose of this task is to integrate SMS sending in batch in mass mailing. It
will use same mailing objects but sending SMS instead of emails. Some metrics
and flows will have to be slightly updated at the same time.

SPECIFICATIONS

Create a new application called "Mass SMS" that follows the structure of
mass_mailing application.

General guidelines

  * use the fa-comment icon for this module;
  * add a "Notification type" field to the mailings: email or sms. Set it
    invisible and set as domain from context when choosing mass mailing or
    mass sms application (menus / action specific);
  * adapt the metrics from Mass Mailing to SMS
    * sent = received = whether the SMS was sent or not;
    * opened => we don't have this information;
    * replied => we don't have this information;
    * clicks = from link tracker (no change of behavior);
    * bounced = SMS that failed to be delivered because the format is wrong;
    * exception = any issue when sending SMS;
  * keep the Mailing Lists menu, hide email related fields on contact model;
  * settings: hide the "Specific Mail Server" feature

Mailing form view

  * add an "SMS Content" tab between Mail Body and Options. In there, we should
    have the following fields:

    * content
    * opt-out link: provide a link to the Unsubscribe page. Make it as short
      as possible;
    * SMS Template

  * add an "SMS Text Message" Medium;

Mailing actions

  * add an "SMS Sent" smart button. Use the fa-comment-o icon and it should
    redirect to the same list views as the "Email sent" smart button and list
    the contacts to which an SMS was sent;
  * add a "Mobile" field in the list views of the "Email sent" smart button:
  * adapt the TEST button > Test Mailing modal to SMS (we should have 1 button
    for Email and 1 for SMS); update description;
    * default value for the Recipients field should be Name of the current
      user, work mobile/phone number;
    * If there are no Work Mobile/Phone numbers set on res.users, display
      (123)-456-7890 instead;
    * rename the Send Sample Mail button into Send Sample SMS;

  * adapt the SEND NOW button > Confirmation modal to SMS. Change the message
    into "This will send the SMS Text Message to all recipients. Do you still
    want to proceed?"
  * hide the following elements:  Subject, From, Reply to, Attachments, Mail
    Server, Mail Body tab; Opened, Replied;
  * adapt the label of the following "warnings" to SMS
    * x SMS Text Message(s) have been ignored and will not be sent.
    * x SMS Text Message(s) are in queue and will be sent soon.
    * x SMS Text Message(s) could not be sent.

Mailing kanban view

  * hide the following stats: https://nimb.ws/grvBn0: Opened, Replied;

Mailing list / contact management

  * following fields should be left empty: https://nimb.ws/3HBeJL: Opened,
    Replied;
  * when browsing through mailing lsits and contacts through the Mass SMS
    application, update actions and views to hide fields related to
    email and display only phone-related information;

UTM Campaign

  * form view > Related Mailings tab: the following fields should be left
    empty if notification type = SMS: https://nimb.ws/nfvr1O: Opened, Replied

Mass Mailing > Reporting (mail.trace.report model)

  * adapt the reporting based on the fact that we do not have the following
    metrics for SMS: Opened, Replied;

Mass Mailing > Configuration > Blacklist

  * do not display any email information (phone blacklist is about phone);
  * support phone blacklist. Phone blacklist is therefore a separate model
    from mail.blacklist to simplify management. It is included in sms sending
    process like mail blacklist when mailing in mass;

Opt-out and blacklist handling

  * we do support mailing lists because they could come from different sources
    and are a way to communicate with a specific audience (and not just a list
    we bought), e.g. subscribe to this list to be kept updated whenever this
    product is back in stock, or to receive results of this ...
  * if the SMSing is from a list, opt-out removes ourselves from the list;
  * if it is from the contact ==> Sent to blacklist;
  * allow to attach unsubscription links in sent SMS, redirecting to a new
    route in mass mailing SMS allowing quick unsubscribe and/or blacklist
    of phone numbers;

Error management

  * if the user clicks on Send Now / Schedule / Test and does not have enough
    credits, open the "Insufficient credits" modal in a lazy option (aka when
    having failed statistics linked to insufficient credits);
  * on the mailing, we however display this failure as :
    * a message on the mailing kanban view
    * a message on the top of the form view + same behavior as the mailing and
      "Could not be sent" https://www.screencast.com/t/BExgd1Gc;

LINKS

Task 1997464
PR #34424
Original SMS addition: Task 1922163 (4287481)

================================= pseudo patch: =================================

--- a/None
+++ b/addons/mass_mailing_sms/models/__init__.py
@@ -0,0 +1,9 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from . import link_tracker
+from . import mailing_contact
+from . import mailing_list
+from . import mailing_mailing
+from . import mailing_trace
+from . import sms_sms

--- a/None
+++ b/addons/mass_mailing_sms/models/link_tracker.py
@@ -0,0 +1,33 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import re
+import werkzeug
+
+from odoo import models
+from odoo.addons.mass_mailing_sms.models.sms_sms import TEXT_URL_REGEX
+
+
+class LinkTracker(models.Model):
+    _inherit = "link.tracker"
+
+    def _convert_links_text(self, body, vals, blacklist=None):
+        shortened_schema = self.env['ir.config_parameter'].sudo().get_param('web.base.url') + '/r/'
+        unsubscribe_schema = self.env['ir.config_parameter'].sudo().get_param('web.base.url') + '/sms/'
+        for match in re.findall(TEXT_URL_REGEX, body):
+            original_url = match[0]
+            # don't shorten already-shortened links or links towards unsubscribe page
+            if original_url.startswith(shortened_schema) or original_url.startswith(unsubscribe_schema):
+                continue
+            # support blacklist items in path, like /u/
+            parsed = werkzeug.urls.url_parse(original_url, scheme='http')
+            if blacklist and any(item in parsed.path for item in blacklist):
+                continue
+
+            vals['url'] = werkzeug.utils.unescape(original_url)
+            link = self.create(vals)
+            shortened_url = link.short_url
+            if shortened_url:
+                body = body.replace(original_url, shortened_url)
+
+        return body

--- a/None
+++ b/addons/mass_mailing_sms/models/mailing_contact.py
@@ -0,0 +1,14 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class MailingContact(models.Model):
+    _name = 'mailing.contact'
+    _inherit = ['mailing.contact', 'mail.thread.phone']
+
+    mobile = fields.Char(string='Mobile')
+
+    def _sms_get_number_fields(self):
+        return ['mobile']

--- a/None
+++ b/addons/mass_mailing_sms/models/mailing_list.py
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models
+
+
+class MailingList(models.Model):
+    _inherit = 'mailing.list'
+
+    def _compute_contact_nbr(self):
+        if self.env.context.get('mailing_sms'):
+            self.env.cr.execute('''
+select list_id, count(*)
+from mailing_contact_list_rel r
+left join mailing_contact c on (r.contact_id=c.id)
+left join phone_blacklist bl on c.phone_sanitized = bl.number and bl.active
+where
+    list_id in %s
+    AND COALESCE(r.opt_out,FALSE) = FALSE
+    AND c.phone_sanitized IS NOT NULL
+    AND bl.id IS NULL
+group by list_id''', (tuple(self.ids), ))
+            data = dict(self.env.cr.fetchall())
+            for mailing_list in self:
+                mailing_list.contact_nbr = data.get(mailing_list.id, 0)
+            return
+        return super(MailingList, self)._compute_contact_nbr()
+
+    def action_view_contacts(self):
+        if self.env.context.get('mailing_sms'):
+            action = self.env.ref('mass_mailing_sms.mailing_contact_action_sms').read()[0]
+            action['domain'] = [('list_ids', 'in', self.ids)]
+            context = dict(self.env.context, search_default_filter_valid_sms_recipient=1, default_list_ids=self.ids)
+            action['context'] = context
+            return action
+        return super(MailingList, self).action_view_contacts()

--- a/None
+++ b/addons/mass_mailing_sms/models/mailing_mailing.py
@@ -0,0 +1,193 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import logging
+
+from odoo import api, fields, models, _
+from odoo.exceptions import UserError
+
+_logger = logging.getLogger(__name__)
+
+
+class Mailing(models.Model):
+    _inherit = 'mailing.mailing'
+
+    # mailing options
+    mailing_type = fields.Selection(selection_add=[('sms', 'SMS')])
+    # sms options
+    body_plaintext = fields.Text('SMS Body')
+    sms_template_id = fields.Many2one('sms.template', string='SMS Template', ondelete='set null')
+    sms_has_insufficient_credit = fields.Boolean(
+        'Insufficient IAP credits', compute='_compute_sms_has_insufficient_credit',
+        help='UX Field to propose to buy IAP credits') 
+    # opt_out_link
+    sms_allow_unsubscribe = fields.Boolean('Include opt-out link', default=True)
+
+    @api.onchange('mailing_type')
+    def _onchange_mailing_type(self):
+        if self.mailing_type == 'sms' and (not self.medium_id or self.medium_id == self.env.ref('utm.utm_medium_email')):
+            self.medium_id = self.env.ref('mass_mailing_sms.utm_medium_sms').id
+        elif self.mailing_type == 'mail' and (not self.medium_id or self.medium_id == self.env.ref('mass_mailing_sms.utm_medium_sms')):
+            self.medium_id = self.env.ref('utm.utm_medium_email').id
+
+    @api.onchange('sms_template_id', 'mailing_type')
+    def _onchange_sms_template_id(self):
+        if self.mailing_type == 'sms' and self.sms_template_id:
+            self.body_plaintext = self.sms_template_id.body
+
+    @api.depends('mailing_trace_ids.failure_type')
+    def _compute_sms_has_insufficient_credit(self):
+        mailing_ids = self.env['mailing.trace'].sudo().search([
+            ('mass_mailing_id', 'in', self.ids),
+            ('trace_type', '=', 'sms'),
+            ('failure_type', '=', 'sms_credit')
+        ]).mapped('mass_mailing_id')
+        for mailing in self:
+            mailing.sms_has_insufficient_credit = mailing in mailing_ids
+
+    # --------------------------------------------------
+    # CRUD
+    # --------------------------------------------------
+
+    @api.model
+    def create(self, values):
+        if values.get('mailing_type') == 'sms':
+            if not values.get('medium_id'):
+                values['medium_id'] = self.env.ref('mass_mailing_sms.utm_medium_sms').id
+            if values.get('sms_template_id') and not values.get('body_plaintext'):
+                values['body_plaintext'] = self.env['sms.template'].browse(values['sms_template_id']).body
+        return super(Mailing, self).create(values)
+
+    # --------------------------------------------------
+    # BUSINESS / VIEWS ACTIONS
+    # --------------------------------------------------
+
+    def action_put_in_queue_sms(self):
+        return self.action_put_in_queue()
+
+    def action_test(self):
+        if self.mailing_type == 'sms':
+            ctx = dict(self.env.context, default_mailing_id=self.id)
+            return {
+                'name': _('Test Mailing'),
+                'type': 'ir.actions.act_window',
+                'view_mode': 'form',
+                'res_model': 'mailing.sms.test',
+                'target': 'new',
+                'context': ctx,
+            }
+        return super(Mailing, self).action_test()
+
+    def _action_view_traces_filtered(self, view_filter):
+        action = super(Mailing, self)._action_view_traces_filtered(view_filter)
+        if self.mailing_type == 'sms':
+            action['views'] = [(self.env.ref('mass_mailing_sms.mailing_trace_view_tree_sms').id, 'tree'),
+                               (self.env.ref('mass_mailing_sms.mailing_trace_view_form_sms').id, 'form')]
+        return action
+
+    def action_buy_sms_credits(self):
+        url = self.env['iap.account'].get_credits_url(service_name='sms')
+        return {
+            'type': 'ir.actions.act_url',
+            'url': url,
+        }
+
+    # --------------------------------------------------
+    # SMS SEND
+    # --------------------------------------------------
+
+    def _get_opt_out_list_sms(self):
+        """Returns a set of emails opted-out in target model"""
+        self.ensure_one()
+        opt_out = []
+        target = self.env[self.mailing_model_real]
+        if self.mailing_model_real == "mail.mass_mailing.contact":
+            # if user is opt_out on One list but not on another
+            # or if two user with same email address, one opted in and the other one opted out, send the mail anyway
+            # TODO DBE Fixme : Optimise the following to get real opt_out and opt_in
+            subscriptions = self.env['mailing.contact.subscription'].sudo().search(
+                [('list_id', 'in', self.contact_list_ids.ids)])
+            opt_out_contacts = subscriptions.filtered(lambda sub: sub.opt_out).mapped('contact_id')
+            opt_in_contacts = subscriptions.filtered(lambda sub: not sub.opt_out).mapped('contact_id')
+            opt_out = list(set(c.id for c in opt_out_contacts if c not in opt_in_contacts))
+
+            _logger.info("Mass SMS %s targets %s: optout: %s contacts", self, target._name, len(opt_out))
+        else:
+            _logger.info("Mass SMS %s targets %s: no opt out list available", self, target._name)
+        return opt_out
+
+    def _get_seen_list_sms(self):
+        """Returns a set of emails already targeted by current mailing/campaign (no duplicates)"""
+        self.ensure_one()
+        target = self.env[self.mailing_model_real]
+
+        if issubclass(type(target), self.pool['mail.thread.phone']):
+            phone_fields = ['phone_sanitized']
+        elif issubclass(type(target), self.pool['mail.thread']):
+            phone_fields = target._sms_get_number_fields()
+        else:
+            phone_fields = []
+            if 'mobile' in target._fields:
+                phone_fields.append('mobile')
+            if 'phone' in target._fields:
+                phone_fields.append('phone')
+        if not phone_fields:
+            raise UserError(_("Unsupported %s for mass SMS") % self.mailing_model_id.name)
+
+        query = """
+            SELECT %(select_query)s
+              FROM mailing_trace trace
+              JOIN %(target_table)s target ON (trace.res_id = target.id)
+             WHERE (%(where_query)s)
+             AND trace.mass_mailing_id = %%(mailing_id)s
+             AND trace.model = %%(target_model)s
+        """
+        query = query % {
+            'select_query': 'target.id, ' + ', '.join('target.%s' % fname for fname in phone_fields),
+            'where_query': ' OR '.join('target.%s IS NOT NULL' % fname for fname in phone_fields),
+            'target_table': target._table
+        }
+        params = {'mailing_id': self.id, 'target_model': self.mailing_model_real}
+        self._cr.execute(query, params)
+        query_res = self._cr.fetchall()
+        seen_list = set(number for item in query_res for number in item[1:] if number)
+        seen_ids = set(item[0] for item in query_res)
+        _logger.info("Mass SMS %s targets %s: already reached %s SMS", self, target._name, len(seen_list))
+        return list(seen_ids), list(seen_list)
+
+    def _send_sms_get_composer_values(self, res_ids):
+        return {
+            # content
+            'body': self.body_plaintext,
+            'template_id': self.sms_template_id.id,
+            'res_model': self.mailing_model_real,
+            'res_ids': repr(res_ids),
+            # options
+            'composition_mode': 'mass',
+            'mailing_id': self.id,
+            'mass_keep_log': False,
+            'mass_sms_allow_unsubscribe': self.sms_allow_unsubscribe,
+        }
+
+    def action_send_mail(self, res_ids=None):
+        mass_sms = self.filtered(lambda m: m.mailing_type == 'sms')
+        if mass_sms:
+            mass_sms.action_send_sms(res_ids=res_ids)
+        return super(Mailing, self - mass_sms).action_send_mail(res_ids=res_ids)
+
+    def action_send_sms(self, res_ids=None):
+        for mailing in self:
+            if not res_ids:
+                res_ids = mailing._get_remaining_recipients()
+            if not res_ids:
+                raise UserError(_('There is no recipients selected.'))
+
+            composer = self.env['sms.composer'].create(mailing._send_sms_get_composer_values(res_ids))
+            # extra_context = self._get_mass_mailing_context()
+
+            # auto-commit except in testing mode
+            # auto_commit = not getattr(threading.currentThread(), 'testing', False)
+            # composer.send_mail(auto_commit=auto_commit)
+            composer._action_send_sms()
+            mailing.write({'state': 'done', 'sent_date': fields.Datetime.now()})
+        return True

--- a/None
+++ b/addons/mass_mailing_sms/models/mailing_trace.py
@@ -0,0 +1,80 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import random
+import string
+
+from odoo import api, fields, models
+from odoo.osv import expression
+
+
+class MailingTrace(models.Model):
+    """ Improve statistics model to add SMS support. Main attributes of
+    statistics model are used, only some specific data is required. """
+    _inherit = 'mailing.trace'
+    CODE_SIZE = 3
+
+    trace_type = fields.Selection(selection_add=[('sms', 'SMS')])
+    sms_sms_id = fields.Many2one('sms.sms', string='SMS', index=True, ondelete='set null')
+    sms_sms_id_int = fields.Integer(
+        string='SMS ID (tech)',
+        help='ID of the related sms.sms. This field is an integer field because '
+             'the related sms.sms can be deleted separately from its statistics. '
+             'However the ID is needed for several action and controllers.',
+        index=True,
+    )
+    sms_number = fields.Char('Number')
+    sms_code = fields.Char('Code')
+    failure_type = fields.Selection(selection_add=[
+        ('sms_number_missing', 'Missing Number'),
+        ('sms_number_format', 'Wrong Number Format'),
+        ('sms_credit', 'Insufficient Credit'),
+        ('sms_server', 'Server Error'),
+        # mass mode specific codes
+        ('sms_blacklist', 'Blacklisted'),
+        ('sms_duplicate', 'Duplicate'),
+    ])
+
+    @api.model_create_multi
+    def create(self, values_list):
+        for values in values_list:
+            if 'sms_sms_id' in values:
+                values['sms_sms_id_int'] = values['sms_sms_id']
+            if values.get('trace_type') == 'sms' and not values.get('sms_code'):
+                values['sms_code'] = self._get_random_code()
+        return super(MailingTrace, self).create(values_list)
+
+    def _get_random_code(self):
+        """ Generate a random code for trace. Uniqueness is not really necessary
+        as it serves as obfuscation when unsubscribing. A valid trio
+        code / mailing_id / number will be requested. """
+        return ''.join(random.choice(string.ascii_letters + string.digits) for dummy in range(self.CODE_SIZE))
+
+    def _get_records_from_sms(self, sms_sms_ids=None, additional_domain=None):
+        if not self.ids and sms_sms_ids:
+            domain = [('sms_sms_id_int', 'in', sms_sms_ids)]
+        else:
+            domain = [('id', 'in', self.ids)]
+        if additional_domain:
+            domain = expression.AND([domain, additional_domain])
+        return self.search(domain)
+
+    def set_sms_sent(self, sms_sms_ids=None):
+        statistics = self._get_records_from_sms(sms_sms_ids, [('sent', '=', False)])
+        statistics.write({'sent': fields.Datetime.now()})
+        return statistics
+
+    def set_sms_clicked(self, sms_sms_ids=None):
+        statistics = self._get_records_from_sms(sms_sms_ids, [('clicked', '=', False)])
+        statistics.write({'clicked': fields.Datetime.now()})
+        return statistics
+
+    def set_sms_ignored(self, sms_sms_ids=None):
+        statistics = self._get_records_from_sms(sms_sms_ids, [('ignored', '=', False)])
+        statistics.write({'ignored': fields.Datetime.now()})
+        return statistics
+
+    def set_sms_exception(self, sms_sms_ids=None):
+        statistics = self._get_records_from_sms(sms_sms_ids, [('exception', '=', False)])
+        statistics.write({'exception': fields.Datetime.now()})
+        return statistics

--- a/None
+++ b/addons/mass_mailing_sms/models/sms_sms.py
@@ -0,0 +1,47 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import re
+
+from odoo import fields, models
+
+TEXT_URL_REGEX = r'(https?:\/\/(www\.)?[a-zA-Z0-9@:%._\+~#=/-]{1,64})'
+
+
+class SmsSms(models.Model):
+    _inherit = ['sms.sms']
+
+    mailing_id = fields.Many2one('mailing.mailing', string='Mass Mailing')
+    mailing_trace_ids = fields.One2many('mailing.trace', 'sms_sms_id', string='Statistics')
+
+    def _update_body_short_links(self):
+        """ Override to tweak shortened URLs by adding statistics ids, allowing to
+        find customer back once clicked. """
+        shortened_schema = self.env['ir.config_parameter'].sudo().get_param('web.base.url') + '/r/'
+        res = dict.fromkeys(self.ids, False)
+        for sms in self:
+            if not sms.mailing_id or not sms.body:
+                res[sms.id] = sms.body
+                continue
+
+            body = sms.body
+            for match in re.findall(TEXT_URL_REGEX, body):
+                url = match[0]
+                if url.startswith(shortened_schema):
+                    body = body.replace(url, url + '/s/%s' % sms.id)
+            res[sms.id] = body
+        return res
+
+    def _postprocess_iap_sent_sms(self, iap_results, failure_reason=None, delete_all=False):
+        all_sms_ids = [item['res_id'] for item in iap_results]
+        if any(sms.mailing_id for sms in self.env['sms.sms'].sudo().browse(all_sms_ids)):
+            for state in self.IAP_TO_SMS_STATE.keys():
+                sms_ids = [item['res_id'] for item in iap_results if item['state'] == state]
+                traces = self.env['mailing.trace'].sudo().search([
+                    ('sms_sms_id_int', 'in', sms_ids)
+                ])
+                if traces and state == 'success':
+                    traces.write({'sent': fields.Datetime.now(), 'exception': False})
+                elif traces:
+                    traces.write({'exception': fields.Datetime.now(), 'failure_type': self.IAP_TO_SMS_STATE[state]})
+        return super(SmsSms, self)._postprocess_iap_sent_sms(iap_results, failure_reason=failure_reason, delete_all=delete_all)
