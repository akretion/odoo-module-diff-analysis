PR: https://github.com/odoo/odoo/pull/125642

From: 0479b2b59466ae1d6d74165345aa3a7dc5de24ed
From: william-andre
Date: 2023-07-20 09:49:06

Structural Changes: 3
Total Changes: 39

[IMP] account,*: manage subsidiary companies

Allow sharing records between company
* accounts
* taxes
* fiscal positions
* products
* ...and some related models

These records can be read and used in children companies.

This can be used to
* have different branding for different businesses
* allow more complex security rules
* consolidate branches differently
* manage different tax reports with different tax ids in the same
  country

task-3371677

closes odoo/odoo#125642

Related: odoo/enterprise#43215
Signed-off-by: Quentin De Paoli <qdp@odoo.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/product_strategy.py
+++ b/addons/stock/models/product_strategy.py
@@ -28,7 +28,7 @@ class StockPutawayRule(models.Model):
         if self.env.context.get('active_model') == 'stock.location':
             return self.env.context.get('active_id')
         if not self.env.user.has_group('stock.group_stock_multi_warehouses'):
-            wh = self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1)
+            wh = self.env['stock.warehouse'].search(self.env['stock.warehouse']._check_company_domain(self.env.company), limit=1)
             input_loc, _ = wh._get_input_output_locations(wh.reception_steps, wh.delivery_steps)
             return input_loc
 
@@ -51,7 +51,7 @@ class StockPutawayRule(models.Model):
         return []
 
     def _domain_product_id(self):
-        domain = "[('type', '!=', 'service'), '|', ('company_id', '=', False), ('company_id', '=', company_id)]"
+        domain = "[('type', '!=', 'service')]"
         if self.env.context.get('active_model') == 'product.template':
             return [('product_tmpl_id', '=', self.env.context.get('active_id'))]
         return domain
@@ -63,11 +63,11 @@ class StockPutawayRule(models.Model):
         default=_default_category_id, domain=_domain_category_id, ondelete='cascade')
     location_in_id = fields.Many2one(
         'stock.location', 'When product arrives in', check_company=True,
-        domain="[('child_ids', '!=', False), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
+        domain="[('child_ids', '!=', False)]",
         default=_default_location_id, required=True, ondelete='cascade', index=True)
     location_out_id = fields.Many2one(
         'stock.location', 'Store to sublocation', check_company=True,
-        domain="[('id', 'child_of', location_in_id), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
+        domain="[('id', 'child_of', location_in_id)]",
         required=True, ondelete='cascade')
     sequence = fields.Integer('Priority', help="Give to the more specialized category, a higher priority to have them in top of the list.")
     company_id = fields.Many2one(

--- a/addons/stock/models/stock_lot.py
+++ b/addons/stock/models/stock_lot.py
@@ -91,9 +91,6 @@ class StockLot(models.Model):
         domain = [
             "('tracking', '!=', 'none')",
             "('type', '=', 'product')",
-            "'|'",
-                "('company_id', '=', False)",
-                "('company_id', '=', company_id)"
         ]
         if self.env.context.get('default_product_tmpl_id'):
             domain.insert(0,

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -45,7 +45,7 @@ class StockMove(models.Model):
     product_id = fields.Many2one(
         'product.product', 'Product',
         check_company=True,
-        domain="[('type', 'in', ['product', 'consu']), '|', ('company_id', '=', False), ('company_id', '=', company_id)]", index=True, required=True,
+        domain="[('type', 'in', ['product', 'consu'])]", index=True, required=True,
         states={'done': [('readonly', True)]})
     description_picking = fields.Text('Description of Picking')
     product_qty = fields.Float(

--- a/addons/stock/models/stock_move_line.py
+++ b/addons/stock/models/stock_move_line.py
@@ -25,7 +25,7 @@ class StockMoveLine(models.Model):
         'stock.move', 'Stock Operation',
         check_company=True, index=True)
     company_id = fields.Many2one('res.company', string='Company', readonly=True, required=True, index=True)
-    product_id = fields.Many2one('product.product', 'Product', ondelete="cascade", check_company=True, domain="[('type', '!=', 'service'), '|', ('company_id', '=', False), ('company_id', '=', company_id)]", index=True)
+    product_id = fields.Many2one('product.product', 'Product', ondelete="cascade", check_company=True, domain="[('type', '!=', 'service')]", index=True)
     product_uom_id = fields.Many2one(
         'uom.uom', 'Unit of Measure', required=True, domain="[('category_id', '=', product_uom_category_id)]",
         compute="_compute_product_uom_id", store=True, readonly=False, precompute=True,
@@ -46,7 +46,7 @@ class StockMoveLine(models.Model):
     package_level_id = fields.Many2one('stock.package_level', 'Package Level', check_company=True)
     lot_id = fields.Many2one(
         'stock.lot', 'Lot/Serial Number',
-        domain="[('product_id', '=', product_id), ('company_id', '=', company_id)]", check_company=True)
+        domain="[('product_id', '=', product_id)]", check_company=True)
     lot_name = fields.Char('Lot/Serial Number Name')
     result_package_id = fields.Many2one(
         'stock.quant.package', 'Destination Package',

--- a/addons/stock/models/stock_orderpoint.py
+++ b/addons/stock/models/stock_orderpoint.py
@@ -32,7 +32,7 @@ class StockWarehouseOrderpoint(models.Model):
         elif self.env.context.get('default_product_id', False):
             product_id = self.env.context.get('default_product_id', False)
             domain = f"('id', '=', {product_id})"
-        return f"[{domain}, '|', ('company_id', '=', False), ('company_id', '=', company_id)]"
+        return f"[{domain}]"
 
     name = fields.Char(
         'Name', copy=False, required=True, readonly=True,

--- a/addons/stock/models/stock_quant.py
+++ b/addons/stock/models/stock_quant.py
@@ -30,11 +30,7 @@ class StockQuant(models.Model):
     def _domain_lot_id(self):
         if not self._is_inventory_mode():
             return
-        domain = [
-            "'|'",
-                "('company_id', '=', company_id)",
-                "('company_id', '=', False)"
-        ]
+        domain = []
         if self.env.context.get('active_model') == 'product.product':
             domain.insert(0, "('product_id', '=', %s)" % self.env.context.get('active_id'))
         elif self.env.context.get('active_model') == 'product.template':

--- a/addons/stock/models/stock_scrap.py
+++ b/addons/stock/models/stock_scrap.py
@@ -20,7 +20,7 @@ class StockScrap(models.Model):
     company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company, required=True, states={'done': [('readonly', True)]})
     origin = fields.Char(string='Source Document')
     product_id = fields.Many2one(
-        'product.product', 'Product', domain="[('type', 'in', ['product', 'consu']), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
+        'product.product', 'Product', domain="[('type', 'in', ['product', 'consu'])]",
         required=True, states={'done': [('readonly', True)]}, check_company=True)
     product_uom_id = fields.Many2one(
         'uom.uom', 'Unit of Measure',
@@ -30,7 +30,7 @@ class StockScrap(models.Model):
     tracking = fields.Selection(string='Product Tracking', readonly=True, related="product_id.tracking")
     lot_id = fields.Many2one(
         'stock.lot', 'Lot/Serial',
-        states={'done': [('readonly', True)]}, domain="[('product_id', '=', product_id), ('company_id', '=', company_id)]", check_company=True)
+        states={'done': [('readonly', True)]}, domain="[('product_id', '=', product_id)]", check_company=True)
     package_id = fields.Many2one(
         'stock.quant.package', 'Package',
         states={'done': [('readonly', True)]}, check_company=True)
@@ -40,11 +40,11 @@ class StockScrap(models.Model):
     location_id = fields.Many2one(
         'stock.location', 'Source Location',
         compute='_compute_location_id', store=True, required=True, precompute=True, states={'done': [('readonly', True)]},
-        domain="[('usage', '=', 'internal'), ('company_id', 'in', [company_id, False])]", check_company=True, readonly=False)
+        domain="[('usage', '=', 'internal')]", check_company=True, readonly=False)
     scrap_location_id = fields.Many2one(
         'stock.location', 'Scrap Location',
         compute='_compute_scrap_location_id', store=True, required=True, precompute=True, states={'done': [('readonly', True)]},
-        domain="[('scrap_location', '=', True), ('company_id', 'in', [company_id, False])]", check_company=True, readonly=False)
+        domain="[('scrap_location', '=', True)]", check_company=True, readonly=False)
     scrap_qty = fields.Float(
         'Quantity', required=True, states={'done': [('readonly', True)]}, digits='Product Unit of Measure',
         compute='_compute_scrap_qty', default=0.0, readonly=False, store=True)
@@ -125,11 +125,11 @@ class StockScrap(models.Model):
             'scrap_id': self.id,
             'location_dest_id': self.scrap_location_id.id,
             'move_line_ids': [(0, 0, {'product_id': self.product_id.id,
-                                           'product_uom_id': self.product_uom_id.id, 
+                                           'product_uom_id': self.product_uom_id.id,
                                            'qty_done': self.scrap_qty,
                                            'location_id': self.location_id.id,
                                            'location_dest_id': self.scrap_location_id.id,
-                                           'package_id': self.package_id.id, 
+                                           'package_id': self.package_id.id,
                                            'owner_id': self.owner_id.id,
                                            'lot_id': self.lot_id.id, })],
 #             'restrict_partner_id': self.owner_id.id,

--- a/addons/stock/models/stock_storage_category.py
+++ b/addons/stock/models/stock_storage_category.py
@@ -60,7 +60,7 @@ class StorageCategoryProductCapacity(models.Model):
         elif self.env.context.get('default_product_id', False):
             product_id = self.env.context.get('default_product_id', False)
             domain = f"('id', '=', {product_id})"
-        return f"[{domain}, '|', ('company_id', '=', False), ('company_id', '=', company_id)]"
+        return f"[{domain}]"
 
     storage_category_id = fields.Many2one('stock.storage.category', ondelete='cascade', required=True, index=True)
     product_id = fields.Many2one('product.product', 'Product', domain=lambda self: self._domain_product_id(), ondelete='cascade', check_company=True)
