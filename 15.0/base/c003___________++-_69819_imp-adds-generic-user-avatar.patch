PR: https://github.com/odoo/odoo/pull/69819

From: c53724ebc35150d9111e165ef5089beb26bedc29
From: Leonardo Pavan Rocha
Date: 2021-06-01 14:36:23

Structural Changes: 8.9
Total Changes: 128

[IMP] *: adds generic user avatar

Description of the issue/feature this PR addresses:
It is currently quite difficult to differentiate users. Most of the time, people
don't take the time to upload an actual avatar so everybody looks the same. This
PR generates a custom avatar with the users initials and random color to
differentiate them. For res.users, res.partner and hr.employee, image fields now
hold the binary image and avatar are used to show the image or svg.

Current behavior before PR:
Avatar had only random colors and was being saved in database, being inefficient

Desired behavior after PR is merged:
A new mixin defines image fields and in case no image is set, it generates an
SVG image with the user's initials and random color.

closes odoo/odoo#69819

Task: 2404630
Related: odoo/enterprise#18199
Signed-off-by: SÃ©bastien Theys (seb) <seb@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/__init__.py
+++ b/odoo/addons/base/models/__init__.py
@@ -34,6 +34,7 @@ from . import report_layout
 from . import report_paperformat
 
 from . import image_mixin
+from . import avatar_mixin
 
 from . import res_country
 from . import res_lang

--- a/None
+++ b/odoo/addons/base/models/avatar_mixin.py
@@ -0,0 +1,70 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from base64 import b64encode
+from hashlib import sha512
+from odoo import models, fields, api
+from odoo.tools import html_escape, file_open
+
+
+class AvatarMixin(models.AbstractModel):
+    _name = 'avatar.mixin'
+    _inherit = ['image.mixin']
+    _description = "Avatar Mixin"
+    _avatar_name_field = "name"
+
+    # all image fields are base64 encoded and PIL-supported
+    avatar_1920 = fields.Image("Avatar", max_width=1920, max_height=1920, compute="_compute_avatar_1920")
+    avatar_1024 = fields.Image("Avatar 1024", max_width=1024, max_height=1024, compute="_compute_avatar_1024")
+    avatar_512 = fields.Image("Avatar 512", max_width=512, max_height=512, compute="_compute_avatar_512")
+    avatar_256 = fields.Image("Avatar 256", max_width=256, max_height=256, compute="_compute_avatar_256")
+    avatar_128 = fields.Image("Avatar 128", max_width=128, max_height=128, compute="_compute_avatar_128")
+
+    def _compute_avatar(self, avatar_field, image_field):
+        for record in self:
+            avatar = record[image_field]
+            if not avatar:
+                if record[record._avatar_name_field]:
+                    avatar = record._avatar_generate_svg()
+                else:
+                    avatar = record._avatar_get_placeholder()
+            record[avatar_field] = avatar
+
+    @api.depends(lambda self: [self._avatar_name_field, 'image_1920'])
+    def _compute_avatar_1920(self):
+        self._compute_avatar('avatar_1920', 'image_1920')
+
+    @api.depends(lambda self: [self._avatar_name_field, 'image_1024'])
+    def _compute_avatar_1024(self):
+        self._compute_avatar('avatar_1024', 'image_1024')
+
+    @api.depends(lambda self: [self._avatar_name_field, 'image_512'])
+    def _compute_avatar_512(self):
+        self._compute_avatar('avatar_512', 'image_512')
+
+    @api.depends(lambda self: [self._avatar_name_field, 'image_256'])
+    def _compute_avatar_256(self):
+        self._compute_avatar('avatar_256', 'image_256')
+
+    @api.depends(lambda self: [self._avatar_name_field, 'image_128'])
+    def _compute_avatar_128(self):
+        self._compute_avatar('avatar_128', 'image_128')
+
+    def _avatar_generate_svg(self):
+        initial = html_escape(self[self._avatar_name_field][0].upper())
+        seed = self[self._avatar_name_field] + str(self.create_date.timestamp())
+        hashed_seed = sha512(seed.encode()).hexdigest()
+        hue = int(hashed_seed[0:2], 16) * 360 / 255
+        sat = int(hashed_seed[2:4], 16) * ((70 - 40) / 255) + 40
+        lig = 45
+        bgcolor = html_escape(f'hsl({hue}, {sat}%, {lig}%)')
+        return b64encode((
+            "<?xml version='1.0' encoding='UTF-8' ?>"
+            "<svg height='180' width='180' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>"
+            f"<rect fill='{bgcolor}' height='180' width='180'/>"
+            f"<text fill='#ffffff' font-size='96' text-anchor='middle' x='90' y='125' font-family='sans-serif'>{initial}</text>"
+            "</svg>"
+        ).encode())
+
+    def _avatar_get_placeholder(self):
+        return b64encode(file_open("base/static/img/avatar_grey.png", 'rb').read())

--- a/odoo/addons/base/models/res_partner.py
+++ b/odoo/addons/base/models/res_partner.py
@@ -15,7 +15,6 @@ from random import randint
 from werkzeug import urls
 
 from odoo import api, fields, models, tools, SUPERUSER_ID, _, Command
-from odoo.modules import get_module_resource
 from odoo.osv.expression import get_unaccent_wrapper
 from odoo.exceptions import RedirectWarning, UserError, ValidationError
 
@@ -131,7 +130,7 @@ class PartnerTitle(models.Model):
 
 class Partner(models.Model):
     _description = 'Contact'
-    _inherit = ['format.address.mixin', 'image.mixin']
+    _inherit = ['format.address.mixin', 'avatar.mixin']
     _name = "res.partner"
     _order = "display_name"
 
@@ -239,6 +238,38 @@ class Partner(models.Model):
         ('check_name', "CHECK( (type='contact' AND name IS NOT NULL) or (type!='contact') )", 'Contacts require a name'),
     ]
 
+    @api.depends('name', 'user_ids.share', 'image_1920', 'is_company')
+    def _compute_avatar_1920(self):
+        super()._compute_avatar_1920()
+
+    @api.depends('name', 'user_ids.share', 'image_1024', 'is_company')
+    def _compute_avatar_1024(self):
+        super()._compute_avatar_1024()
+
+    @api.depends('name', 'user_ids.share', 'image_512', 'is_company')
+    def _compute_avatar_512(self):
+        super()._compute_avatar_512()
+
+    @api.depends('name', 'user_ids.share', 'image_256', 'is_company')
+    def _compute_avatar_256(self):
+        super()._compute_avatar_256()
+
+    @api.depends('name', 'user_ids.share', 'image_128', 'is_company')
+    def _compute_avatar_128(self):
+        super()._compute_avatar_128()
+
+    def _compute_avatar(self, avatar_field, image_field):
+        partners_with_internal_user = self.filtered(lambda partner: partner.user_ids - partner.user_ids.filtered('share'))
+        super(Partner, partners_with_internal_user)._compute_avatar(avatar_field, image_field)
+        for partner in self - partners_with_internal_user:
+            partner[avatar_field] = partner[image_field] or partner._avatar_get_placeholder()
+
+    def _avatar_get_placeholder(self):
+        path = "base/static/img/avatar_grey.png"
+        if self.is_company:
+            path = "base/static/img/company_image.png"
+        return base64.b64encode(tools.file_open(path, 'rb').read())
+
     @api.depends('is_company', 'name', 'parent_id.display_name', 'type', 'company_name')
     def _compute_display_name(self):
         diff = dict(show_address=None, show_address_only=None, show_email=None, html_format=None, show_vat=None)
@@ -1004,10 +1035,6 @@ class Partner(models.Model):
     def _get_country_name(self):
         return self.country_id.name or ''
 
-    def _get_placeholder_filename(self, field=None):
-        if self.is_company:
-            return '/base/static/img/company_image.png'
-        return super()._get_placeholder_filename(field)
 
 
 class ResPartnerIndustry(models.Model):

--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -270,6 +270,7 @@ class Users(models.Model):
             'signature', 'company_id', 'login', 'email', 'name', 'image_1920',
             'image_1024', 'image_512', 'image_256', 'image_128', 'lang', 'tz',
             'tz_offset', 'groups_id', 'partner_id', '__last_update', 'action_id',
+            'avatar_1920', 'avatar_1024', 'avatar_512', 'avatar_256', 'avatar_128',
         ]
 
     @property
@@ -283,17 +284,6 @@ class Users(models.Model):
         default_user_id = self.env['ir.model.data'].xmlid_to_res_id('base.default_user', raise_if_not_found=False)
         return self.env['res.users'].browse(default_user_id).sudo().groups_id if default_user_id else []
 
-    @api.model
-    def _get_default_image(self):
-        """ Get a default image when the user is created without image
-
-            Inspired to _get_default_image method in
-            https://github.com/odoo/odoo/blob/11.0/odoo/addons/base/res/res_partner.py
-        """
-        image_path = get_module_resource('base', 'static/img', 'avatar.png')
-        image = base64.b64encode(open(image_path, 'rb').read())
-        return image_process(image, colorize=True)
-
     partner_id = fields.Many2one('res.partner', required=True, ondelete='restrict', auto_join=True,
         string='Related Partner', help='Partner-related data of the user')
     login = fields.Char(required=True, help="Used to log into the system")
@@ -338,7 +328,6 @@ class Users(models.Model):
                                  compute='_compute_accesses_count', compute_sudo=True)
     groups_count = fields.Integer('# Groups', help='Number of groups that apply to the current user',
                                   compute='_compute_accesses_count', compute_sudo=True)
-    image_1920 = fields.Image(related='partner_id.image_1920', inherited=True, readonly=False, default=_get_default_image)
 
     _sql_constraints = [
         ('login_key', 'UNIQUE (login)',  'You can not have two users with the same login !')
@@ -1036,11 +1025,6 @@ class Users(models.Model):
         if hasattr(self, 'check_credentials'):
             _logger.warning("The check_credentials method of res.users has been renamed _check_credentials. One of your installed modules defines one, but it will not be called anymore.")
 
-    def _get_placeholder_filename(self, field=None):
-        image_fields = ['image_%s' % size for size in [1920, 1024, 512, 256, 128]]
-        if field in image_fields and not self:
-            return 'base/static/img/user-slash.png'
-        return super()._get_placeholder_filename(field=field)
 
     def _mfa_url(self):
         """ If an MFA method is enabled, returns the URL for its second step. """
