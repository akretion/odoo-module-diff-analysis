PR: https://github.com/odoo/odoo/pull/94178

From: a1bc13b39559fa82763a9f0b3b603f6026b8a151
From: Dossogne Bertrand
Date: 2023-03-09 14:53:57

Breaking data model changes score: 5, change matches:
-    response_id = fields.Many2one('survey.user_input', "Response", ondelete="set null", copy=False)
-    response_state = fields.Selection(related='response_id.state', readonly=True)
+    response_ids = fields.One2many('survey.user_input', 'applicant_id', string="Responses")
-    applicant_ids = fields.One2many('hr.applicant', 'response_id', string='Applicant')

Total Changes: 45

[IMP] hr_recruitment_survey: add interview template

This commit adds a new mail template to be sent by default for interviews.

task-2884526

closes odoo/odoo#94178

Related: odoo/upgrade#3731
Signed-off-by: Kevin Baptiste <kba@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_recruitment_survey/models/hr_applicant.py
+++ b/addons/hr_recruitment_survey/models/hr_applicant.py
@@ -1,5 +1,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from datetime import timedelta
 from odoo import fields, models, _
 from odoo.exceptions import UserError
 
@@ -8,13 +9,21 @@ class Applicant(models.Model):
     _inherit = "hr.applicant"
 
     survey_id = fields.Many2one('survey.survey', related='job_id.survey_id', string="Survey", readonly=True)
-    response_id = fields.Many2one('survey.user_input', "Response", ondelete="set null", copy=False)
-    response_state = fields.Selection(related='response_id.state', readonly=True)
+    response_ids = fields.One2many('survey.user_input', 'applicant_id', string="Responses")
 
     def action_print_survey(self):
         """ If response is available then print this response otherwise print survey form (print template of the survey) """
         self.ensure_one()
-        return self.survey_id.action_print_survey(answer=self.response_id)
+        sorted_interviews = self.response_ids\
+            .filtered(lambda i: i.survey_id == self.survey_id)\
+            .sorted(lambda i: i.create_date, reverse=True)
+        if not sorted_interviews:
+            return self.survey_id.action_print_survey()
+
+        answered_interviews = sorted_interviews.filtered(lambda i: i.state == 'done')
+        if answered_interviews:
+            return self.survey_id.action_print_survey(answer=answered_interviews[0])
+        return self.survey_id.action_print_survey(answer=sorted_interviews[0])
 
     def action_send_survey(self):
         self.ensure_one()
@@ -31,4 +40,24 @@ class Applicant(models.Model):
                 'phone': self.partner_phone,
                 'mobile': self.partner_mobile
             })
-        return self.survey_id.with_context(default_applicant_id=self.id, default_partner_ids=self.partner_id.ids).action_send_survey()
+
+        self.survey_id.check_validity()
+        template = self.env.ref('hr_recruitment_survey.mail_template_applicant_interview_invite', raise_if_not_found=False)
+        local_context = dict(
+            default_applicant_id=self.id,
+            default_partner_ids=self.partner_id.ids,
+            default_survey_id=self.survey_id.id,
+            default_use_template=bool(template),
+            default_template_id=template and template.id or False,
+            default_email_layout_xmlid='mail.mail_notification_light',
+            default_deadline=fields.Datetime.now() + timedelta(days=15)
+        )
+
+        return {
+            'type': 'ir.actions.act_window',
+            'name': _("Send an interview"),
+            'view_mode': 'form',
+            'res_model': 'survey.invite',
+            'target': 'new',
+            'context': local_context,
+        }

--- a/addons/hr_recruitment_survey/models/survey_user_input.py
+++ b/addons/hr_recruitment_survey/models/survey_user_input.py
@@ -6,12 +6,12 @@ from odoo import fields, models, _
 class SurveyUserInput(models.Model):
     _inherit = "survey.user_input"
 
-    applicant_ids = fields.One2many('hr.applicant', 'response_id', string='Applicant')
+    applicant_id = fields.Many2one('hr.applicant', string='Applicant')
 
     def _mark_done(self):
         odoobot = self.env.ref('base.partner_root')
         for user_input in self:
-            if user_input.applicant_ids:
-                body = _('The applicant "%s" has finished the survey.', user_input.applicant_ids[:1].partner_name)
-                user_input.applicant_ids.message_post(body=body, author_id=odoobot.id)
+            if user_input.applicant_id:
+                body = _('The applicant "%s" has finished the survey.', user_input.applicant_id.partner_name)
+                user_input.applicant_id.message_post(body=body, author_id=odoobot.id)
         return super()._mark_done()
