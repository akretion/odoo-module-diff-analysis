PR: https://github.com/odoo/odoo/pull/192211

From: 5ad26943c26a6f297ad4c5e1b18da4e4bc43e103
From: Lulu Grimalkin (lugr)
Date: 2025-04-09 09:56:38

Breaking data model changes scores: del:2 + add:0, change matches:
-    purchase_line_warn = fields.Selection(WARNING_MESSAGE, 'Purchase Order Line Warning', help=WARNING_HELP, required=True, default="no-message")
-    purchase_warn = fields.Selection(WARNING_MESSAGE, 'Purchase Order Warning', help=WARNING_HELP, default="no-message")

Total Changes: 57

[REM] account,product,purchase,sale,stock: remove blocking warnings

Warnings are being revamped in logistics modules. Blocking warnings
are being replaced with polite, nonintrusive warnings in purchase and
sale orders, and with internal instructions in stock pickings, all of
which will be displayed in warning boxes in views rather than popup
dialogs. Invoices rely on partner and product warnings from `purchase`
and `sale` depending on the move type, and no longer have distinct
partner warnings.

As there are no separate blocking warnings, there are no warning types
either, and whether a warning exists depends on whether the message
string is empty.

Task ID: 4268689

Part-of: odoo/odoo#192211
Related: odoo/enterprise#76401
Related: odoo/upgrade#7008
Signed-off-by: Tiffany Chang (tic) <tic@odoo.com>

================================= pseudo patch: =================================

--- a/addons/purchase/models/product.py
+++ b/addons/purchase/models/product.py
@@ -2,7 +2,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models, _
-from odoo.addons.base.models.res_partner import WARNING_MESSAGE, WARNING_HELP
 from odoo.tools.float_utils import float_round
 from odoo.exceptions import UserError
 from dateutil.relativedelta import relativedelta
@@ -18,7 +17,6 @@ class ProductTemplate(models.Model):
     ], string="Control Policy", compute='_compute_purchase_method', precompute=True, store=True, readonly=False,
         help="On ordered quantities: Control bills based on ordered quantities.\n"
             "On received quantities: Control bills based on received quantities.")
-    purchase_line_warn = fields.Selection(WARNING_MESSAGE, 'Purchase Order Line Warning', help=WARNING_HELP, required=True, default="no-message")
     purchase_line_warn_msg = fields.Text('Message for Purchase Order Line')
 
     @api.depends('type')

--- a/addons/purchase/models/purchase_order.py
+++ b/addons/purchase/models/purchase_order.py
@@ -363,32 +363,6 @@ class PurchaseOrder(models.Model):
         """
         self.order_line._compute_tax_id()
 
-    @api.onchange('partner_id')
-    def onchange_partner_id_warning(self):
-        if not self.partner_id or not self.env.user.has_group('purchase.group_warning_purchase'):
-            return
-
-        partner = self.partner_id
-
-        # If partner has no warning, check its company
-        if partner.purchase_warn == 'no-message' and partner.parent_id:
-            partner = partner.parent_id
-
-        if partner.purchase_warn and partner.purchase_warn != 'no-message':
-            # Block if partner only has warning but parent company is blocked
-            if partner.purchase_warn != 'block' and partner.parent_id and partner.parent_id.purchase_warn == 'block':
-                partner = partner.parent_id
-            title = _("Warning for %s", partner.name)
-            message = partner.purchase_warn_msg
-            warning = {
-                'title': title,
-                'message': message
-            }
-            if partner.purchase_warn == 'block':
-                self.update({'partner_id': False})
-            return {'warning': warning}
-        return {}
-
     # ------------------------------------------------------------
     # MAIL.THREAD
     # ------------------------------------------------------------
@@ -1081,10 +1055,6 @@ class PurchaseOrder(models.Model):
                 'id': product.uom_id.id,
             },
         }
-        if product.purchase_line_warn_msg:
-            product_infos['warning'] = product.purchase_line_warn_msg
-        if product.purchase_line_warn == "block":
-            product_infos['readOnly'] = True
         params = {'order_id': self}
         # Check if there is a price and a minimum quantity for the order's vendor.
         seller = product._select_seller(

--- a/addons/purchase/models/purchase_order_line.py
+++ b/addons/purchase/models/purchase_order_line.py
@@ -285,26 +285,6 @@ class PurchaseOrderLine(models.Model):
 
         self._compute_tax_id()
 
-    @api.onchange('product_id')
-    def onchange_product_id_warning(self):
-        if not self.product_id or not self.env.user.has_group('purchase.group_warning_purchase'):
-            return
-        warning = {}
-        title = False
-        message = False
-
-        product_info = self.product_id
-
-        if product_info.purchase_line_warn != 'no-message':
-            title = _("Warning for %s", product_info.name)
-            message = product_info.purchase_line_warn_msg
-            warning['title'] = title
-            warning['message'] = message
-            if product_info.purchase_line_warn == 'block':
-                self.product_id = False
-            return {'warning': warning}
-        return {}
-
     @api.depends('product_id', 'product_id.uom_id', 'product_id.uom_ids', 'product_id.seller_ids', 'product_id.seller_ids.product_uom_id')
     def _compute_allowed_uom_ids(self):
         for line in self:
@@ -424,8 +404,7 @@ class PurchaseOrderLine(models.Model):
         the product is read-only or not.
 
         A product is considered read-only if the order is considered read-only (see
-        ``PurchaseOrder._is_readonly`` for more details) or if `self` contains multiple records
-        or if it has purchase_line_warn == "block".
+        ``PurchaseOrder._is_readonly`` for more details) or if `self` contains multiple records.
 
         Note: This method cannot be called with multiple records that have different products linked.
 

--- a/addons/purchase/models/res_partner.py
+++ b/addons/purchase/models/res_partner.py
@@ -1,7 +1,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models, _
-from odoo.addons.base.models.res_partner import WARNING_MESSAGE, WARNING_HELP
 
 
 class ResPartner(models.Model):
@@ -41,7 +40,6 @@ class ResPartner(models.Model):
         groups='purchase.group_purchase_user',
         compute='_compute_purchase_order_count',
     )
-    purchase_warn = fields.Selection(WARNING_MESSAGE, 'Purchase Order Warning', help=WARNING_HELP, default="no-message")
     purchase_warn_msg = fields.Text('Message for Purchase Order')
 
     receipt_reminder_email = fields.Boolean('Receipt Reminder', company_dependent=True,
