PR: https://github.com/odoo/odoo/pull/

From: e4a4ffb974ccde1842e1b2389450718f8576ad5b
From: Benjamin Frantzen (bfr)
Date: 2020-05-08 12:17:20

Structural Changes: 2
Total Changes: 40

[IMP] customer ratings flow improvements

- Rename the 'Use Rating on Project' feature into 'Customer Ratings'
- Rename the 'Set Email Template to Stages' link to 'Set a Rating Email Template on Stages'
- Add an optional list view for the Stages menu
- display warning if the rating_template_id field is set and if one of the selected project_ids doesn't have the rating_status field set to true
- Project form view revamp
- rename the '% on tasks' stat button into 'Customer Satisfaction'
- Remove the 'no option' for the rating frequency field because it is required
- project form : Add a 'Go to Website' stat button
- Project dashboard: remove the 'Customer Ratings' menu item in more
- Ratings page: the 'Last 30 days' filter include ratings from today
- remove the Appointment / Helpdesk Customer Satisfaction / Live Support menu items

TASK ID : 1251

================================= pseudo patch: =================================

--- a/addons/rating/models/rating.py
+++ b/addons/rating/models/rating.py
@@ -7,7 +7,7 @@ from odoo import api, fields, models
 
 from odoo.modules.module import get_resource_path
 
-RATING_LIMIT_SATISFIED = 7
+RATING_LIMIT_SATISFIED = 5
 RATING_LIMIT_OK = 3
 RATING_LIMIT_MIN = 1
 
@@ -18,7 +18,7 @@ class Rating(models.Model):
     _order = 'write_date desc'
     _rec_name = 'res_name'
     _sql_constraints = [
-        ('rating_range', 'check(rating >= 0 and rating <= 10)', 'Rating should be between 0 to 10'),
+        ('rating_range', 'check(rating >= 0 and rating <= 5)', 'Rating should be between 0 to 5'),
     ]
 
     @api.depends('res_model', 'res_id')
@@ -41,7 +41,7 @@ class Rating(models.Model):
     parent_res_id = fields.Integer('Parent Document', index=True)
     rated_partner_id = fields.Many2one('res.partner', string="Rated person", help="Owner of the rated resource")
     partner_id = fields.Many2one('res.partner', string='Customer', help="Author of the rating")
-    rating = fields.Float(string="Rating Number", group_operator="avg", default=0, help="Rating value: 0=Unhappy, 10=Happy")
+    rating = fields.Float(string="Rating Number", group_operator="avg", default=0, help="Rating value: 0=Unhappy, 5=Happy")
     rating_image = fields.Binary('Image', compute='_compute_rating_image')
     rating_text = fields.Selection([
         ('satisfied', 'Satisfied'),
@@ -66,21 +66,23 @@ class Rating(models.Model):
                 name = name and name[0][1] or ('%s/%s') % (rating.parent_res_model, rating.parent_res_id)
             rating.parent_res_name = name
 
-    @api.depends('rating')
+    def _get_rating_image_filename(self):
+        self.ensure_one()
+        if self.rating >= RATING_LIMIT_SATISFIED:
+            rating_int = 5
+        elif self.rating >= RATING_LIMIT_OK:
+            rating_int = 3
+        elif self.rating >= RATING_LIMIT_MIN:
+            rating_int = 1
+        else:
+            rating_int = 0
+        return 'rating_%s.png' % rating_int
+
     def _compute_rating_image(self):
-        # Due to some new widgets, we may have ratings different from 0/1/5/10 (e.g. slide.channel review)
-        # Let us have some custom rounding while finding a better solution for images.
         for rating in self:
-            rating_for_img = 0
-            if rating.rating >= 8:
-                rating_for_img = 10
-            elif rating.rating > 3:
-                rating_for_img = 5
-            elif rating.rating >= 1:
-                rating_for_img = 1
             try:
-                image_path = get_resource_path('rating', 'static/src/img', 'rating_%s.png' % rating_for_img)
-                rating.rating_image = base64.b64encode(open(image_path, 'rb').read())
+                image_path = get_resource_path('rating', 'static/src/img', rating._get_rating_image_filename())
+                rating.rating_image = base64.b64encode(open(image_path, 'rb').read()) if image_path else False
             except (IOError, OSError):
                 rating.rating_image = False
 
@@ -89,7 +91,7 @@ class Rating(models.Model):
         for rating in self:
             if rating.rating >= RATING_LIMIT_SATISFIED:
                 rating.rating_text = 'satisfied'
-            elif rating.rating > RATING_LIMIT_OK:
+            elif rating.rating >= RATING_LIMIT_OK:
                 rating.rating_text = 'not_satisfied'
             elif rating.rating >= RATING_LIMIT_MIN:
                 rating.rating_text = 'highly_dissatisfied'

--- a/addons/rating/models/rating_mixin.py
+++ b/addons/rating/models/rating_mixin.py
@@ -199,9 +199,9 @@ class RatingMixin(models.AbstractModel):
                     author_id=rating.partner_id and rating.partner_id.id or None  # None will set the default author in mail_thread.py
                 )
             if hasattr(self, 'stage_id') and self.stage_id and hasattr(self.stage_id, 'auto_validation_kanban_state') and self.stage_id.auto_validation_kanban_state:
-                if rating.rating > 5:
+                if rating.rating > 2:
                     self.write({'kanban_state': 'done'})
-                if rating.rating < 5:
+                else:
                     self.write({'kanban_state': 'blocked'})
         return rating
 
@@ -222,7 +222,7 @@ class RatingMixin(models.AbstractModel):
             base_domain += domain
         data = self.env['rating.rating'].read_group(base_domain, ['rating'], ['rating', 'res_id'])
         # init dict with all posible rate value, except 0 (no value for the rating)
-        values = dict.fromkeys(range(1, 11), 0)
+        values = dict.fromkeys(range(1, 6), 0)
         values.update((d['rating'], d['rating_count']) for d in data)
         # add other stats
         if add_stats:
