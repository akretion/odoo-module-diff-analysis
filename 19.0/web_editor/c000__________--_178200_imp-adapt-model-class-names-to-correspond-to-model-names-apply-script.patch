PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:3 + add:0, change matches:
-    _inherit = 'ir.qweb'
-    _inherit = 'ir.qweb.field.image'
-    _inherit = 'ir.ui.view'

Total Changes: 126

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/web_editor/models/assets.py
+++ b/addons/web_editor/models/assets.py
@@ -11,8 +11,7 @@ from odoo.addons.base.models.assetsbundle import EXTENSIONS
 _match_asset_file_url_regex = re.compile(r"^(/_custom/([^/]+))?/(\w+)/([/\w]+\.\w+)$")
 
 
-class Assets(models.AbstractModel):
-    _name = 'web_editor.assets'
+class Web_EditorAssets(models.AbstractModel):
     _description = 'Assets Utils'
 
     @api.model

--- a/addons/web_editor/models/html_field_history_mixin.py
+++ b/addons/web_editor/models/html_field_history_mixin.py
@@ -7,8 +7,7 @@ from odoo.exceptions import ValidationError
 from .diff_utils import apply_patch, generate_comparison, generate_patch
 
 
-class HtmlFieldHistory(models.AbstractModel):
-    _name = "html.field.history.mixin"
+class HtmlFieldHistoryMixin(models.AbstractModel):
     _description = "Field html History"
     _html_field_history_size_limit = 300
 

--- a/addons/web_editor/models/ir_http.py
+++ b/addons/web_editor/models/ir_http.py
@@ -8,7 +8,7 @@ CONTEXT_KEYS = ['editable', 'edit_translations', 'translatable']
 
 
 class IrHttp(models.AbstractModel):
-    _inherit = 'ir.http'
+    _inherit = ['ir.http']
 
     @classmethod
     def _get_web_editor_context(cls):

--- a/addons/web_editor/models/ir_qweb.py
+++ b/addons/web_editor/models/ir_qweb.py
@@ -1,11 +1,12 @@
 # -*- coding: utf-8 -*-
 from odoo import models
 
-class IrQWeb(models.AbstractModel):
-    _inherit = "ir.qweb"
+
+class IrQweb(models.AbstractModel):
+    _inherit = ["ir.qweb"]
 
     def _get_bundles_to_pregenarate(self):
-        js_assets, css_assets = super(IrQWeb, self)._get_bundles_to_pregenarate()
+        js_assets, css_assets = super()._get_bundles_to_pregenarate()
         assets = {
             'web_editor.assets_snippets_menu',
             'web_editor.backend_assets_wysiwyg',

--- a/addons/web_editor/models/ir_qweb_fields.py
+++ b/addons/web_editor/models/ir_qweb_fields.py
@@ -21,7 +21,7 @@ import pytz
 import requests
 from lxml import etree, html
 from markupsafe import Markup, escape_silent
-from PIL import Image as I
+from PIL import IrQwebFieldImage as I
 from werkzeug import urls
 
 from odoo import _, api, models, fields
@@ -34,10 +34,10 @@ REMOTE_CONNECTION_TIMEOUT = 2.5
 logger = logging.getLogger(__name__)
 
 
-class IrQWeb(models.AbstractModel):
+class IrQweb(models.AbstractModel):
     """ IrQWeb object for rendering editor stuff
     """
-    _inherit = 'ir.qweb'
+    _inherit = ['ir.qweb']
 
     def _compile_node(self, el, compile_context, indent):
         snippet_key = compile_context.get('snippet-key')
@@ -159,14 +159,13 @@ class IrQWeb(models.AbstractModel):
 #------------------------------------------------------
 
 
-class Field(models.AbstractModel):
-    _name = 'ir.qweb.field'
+class IrQwebField(models.AbstractModel):
     _description = 'Qweb Field'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def attributes(self, record, field_name, options, values):
-        attrs = super(Field, self).attributes(record, field_name, options, values)
+        attrs = super().attributes(record, field_name, options, values)
         field = record._fields[field_name]
 
         placeholder = options.get('placeholder') or getattr(field, 'placeholder', None)
@@ -193,10 +192,9 @@ class Field(models.AbstractModel):
         return self.value_from_string(element.text_content().strip())
 
 
-class Integer(models.AbstractModel):
-    _name = 'ir.qweb.field.integer'
+class IrQwebFieldInteger(models.AbstractModel):
     _description = 'Qweb Field Integer'
-    _inherit = 'ir.qweb.field.integer'
+    _inherit = ['ir.qweb.field.integer']
 
     @api.model
     def from_html(self, model, field, element):
@@ -205,10 +203,9 @@ class Integer(models.AbstractModel):
         return int(value.replace(lang.thousands_sep or '', ''))
 
 
-class Float(models.AbstractModel):
-    _name = 'ir.qweb.field.float'
+class IrQwebFieldFloat(models.AbstractModel):
     _description = 'Qweb Field Float'
-    _inherit = 'ir.qweb.field.float'
+    _inherit = ['ir.qweb.field.float']
 
     @api.model
     def from_html(self, model, field, element):
@@ -218,14 +215,13 @@ class Float(models.AbstractModel):
                           .replace(lang.decimal_point, '.'))
 
 
-class ManyToOne(models.AbstractModel):
-    _name = 'ir.qweb.field.many2one'
+class IrQwebFieldMany2one(models.AbstractModel):
     _description = 'Qweb Field Many to One'
-    _inherit = 'ir.qweb.field.many2one'
+    _inherit = ['ir.qweb.field.many2one']
 
     @api.model
     def attributes(self, record, field_name, options, values):
-        attrs = super(ManyToOne, self).attributes(record, field_name, options, values)
+        attrs = super().attributes(record, field_name, options, values)
         if options.get('inherit_branding'):
             many2one = record[field_name]
             if many2one:
@@ -259,14 +255,13 @@ class ManyToOne(models.AbstractModel):
         return None
 
 
-class Contact(models.AbstractModel):
-    _name = 'ir.qweb.field.contact'
+class IrQwebFieldContact(models.AbstractModel):
     _description = 'Qweb Field Contact'
-    _inherit = 'ir.qweb.field.contact'
+    _inherit = ['ir.qweb.field.contact']
 
     @api.model
     def attributes(self, record, field_name, options, values):
-        attrs = super(Contact, self).attributes(record, field_name, options, values)
+        attrs = super().attributes(record, field_name, options, values)
         if options.get('inherit_branding'):
             attrs['data-oe-contact-options'] = json.dumps(options)
         return attrs
@@ -277,14 +272,13 @@ class Contact(models.AbstractModel):
         return self.value_to_html(self.env['res.partner'].search([('id', '=', ids[0])]), options=options)
 
 
-class Date(models.AbstractModel):
-    _name = 'ir.qweb.field.date'
+class IrQwebFieldDate(models.AbstractModel):
     _description = 'Qweb Field Date'
-    _inherit = 'ir.qweb.field.date'
+    _inherit = ['ir.qweb.field.date']
 
     @api.model
     def attributes(self, record, field_name, options, values):
-        attrs = super(Date, self).attributes(record, field_name, options, values)
+        attrs = super().attributes(record, field_name, options, values)
         if options.get('inherit_branding'):
             attrs['data-oe-original'] = record[field_name]
 
@@ -315,14 +309,13 @@ class Date(models.AbstractModel):
         return fields.Date.to_string(date)
 
 
-class DateTime(models.AbstractModel):
-    _name = 'ir.qweb.field.datetime'
+class IrQwebFieldDatetime(models.AbstractModel):
     _description = 'Qweb Field Datetime'
-    _inherit = 'ir.qweb.field.datetime'
+    _inherit = ['ir.qweb.field.datetime']
 
     @api.model
     def attributes(self, record, field_name, options, values):
-        attrs = super(DateTime, self).attributes(record, field_name, options, values)
+        attrs = super().attributes(record, field_name, options, values)
 
         if options.get('inherit_branding'):
             value = record[field_name]
@@ -379,20 +372,18 @@ class DateTime(models.AbstractModel):
         return fields.Datetime.to_string(dt)
 
 
-class Text(models.AbstractModel):
-    _name = 'ir.qweb.field.text'
+class IrQwebFieldText(models.AbstractModel):
     _description = 'Qweb Field Text'
-    _inherit = 'ir.qweb.field.text'
+    _inherit = ['ir.qweb.field.text']
 
     @api.model
     def from_html(self, model, field, element):
         return html_to_text(element)
 
 
-class Selection(models.AbstractModel):
-    _name = 'ir.qweb.field.selection'
+class IrQwebFieldSelection(models.AbstractModel):
     _description = 'Qweb Field Selection'
-    _inherit = 'ir.qweb.field.selection'
+    _inherit = ['ir.qweb.field.selection']
 
     @api.model
     def from_html(self, model, field, element):
@@ -406,10 +397,9 @@ class Selection(models.AbstractModel):
                          value, selection))
 
 
-class HTML(models.AbstractModel):
-    _name = 'ir.qweb.field.html'
+class IrQwebFieldHtml(models.AbstractModel):
     _description = 'Qweb Field HTML'
-    _inherit = 'ir.qweb.field.html'
+    _inherit = ['ir.qweb.field.html']
 
     @api.model
     def attributes(self, record, field_name, options, values=None):
@@ -449,16 +439,15 @@ class HTML(models.AbstractModel):
         return '\n'.join(content)
 
 
-class Image(models.AbstractModel):
+class IrQwebFieldImage(models.AbstractModel):
     """
     Widget options:
 
     ``class``
         set as attribute on the generated <img> tag
     """
-    _name = 'ir.qweb.field.image'
     _description = 'Qweb Field Image'
-    _inherit = 'ir.qweb.field.image'
+    _inherit = ['ir.qweb.field.image']
 
     local_url_re = re.compile(r'^/(?P<module>[^]]+)/static/(?P<rest>.+)$')
     redirect_url_re = re.compile(r'\/web\/image\/\d+-redirect\/')
@@ -537,9 +526,8 @@ class Image(models.AbstractModel):
         return base64.b64encode(out.getvalue())
 
 
-class Monetary(models.AbstractModel):
-    _name = 'ir.qweb.field.monetary'
-    _inherit = 'ir.qweb.field.monetary'
+class IrQwebFieldMonetary(models.AbstractModel):
+    _inherit = ['ir.qweb.field.monetary']
 
     @api.model
     def from_html(self, model, field, element):
@@ -551,14 +539,13 @@ class Monetary(models.AbstractModel):
                           .replace(lang.decimal_point, '.'))
 
 
-class Duration(models.AbstractModel):
-    _name = 'ir.qweb.field.duration'
+class IrQwebFieldDuration(models.AbstractModel):
     _description = 'Qweb Field Duration'
-    _inherit = 'ir.qweb.field.duration'
+    _inherit = ['ir.qweb.field.duration']
 
     @api.model
     def attributes(self, record, field_name, options, values):
-        attrs = super(Duration, self).attributes(record, field_name, options, values)
+        attrs = super().attributes(record, field_name, options, values)
         if options.get('inherit_branding'):
             attrs['data-oe-original'] = record[field_name]
         return attrs
@@ -571,18 +558,16 @@ class Duration(models.AbstractModel):
         return float(value)
 
 
-class RelativeDatetime(models.AbstractModel):
-    _name = 'ir.qweb.field.relative'
+class IrQwebFieldRelative(models.AbstractModel):
     _description = 'Qweb Field Relative'
-    _inherit = 'ir.qweb.field.relative'
+    _inherit = ['ir.qweb.field.relative']
 
     # get formatting from ir.qweb.field.relative but edition/save from datetime
 
 
-class QwebView(models.AbstractModel):
-    _name = 'ir.qweb.field.qweb'
+class IrQwebFieldQweb(models.AbstractModel):
     _description = 'Qweb Field qweb'
-    _inherit = 'ir.qweb.field.qweb'
+    _inherit = ['ir.qweb.field.qweb']
 
 
 def html_to_text(element):
@@ -590,7 +575,7 @@ def html_to_text(element):
     in roughly equivalent textual content.
 
     Used to replace and fixup the roundtripping of text and m2o: when using
-    libxml 2.8.0 (but not 2.9.1) and parsing HTML with lxml.html.fromstring
+    libxml 2.8.0 (but not 2.9.1) and parsing IrQwebFieldHtml with lxml.html.fromstring
     whitespace text nodes (text nodes composed *solely* of whitespace) are
     stripped out with no recourse, and fundamentally relying on newlines
     being in the text (e.g. inserted during user edition) is probably poor form

--- a/addons/web_editor/models/ir_ui_view.py
+++ b/addons/web_editor/models/ir_ui_view.py
@@ -22,7 +22,7 @@ EDITING_ATTRIBUTES = MOVABLE_BRANDING + [
 
 
 class IrUiView(models.Model):
-    _inherit = 'ir.ui.view'
+    _inherit = ['ir.ui.view']
 
     def _get_cleaned_non_editing_attributes(self, attributes):
         """

--- a/addons/web_editor/models/ir_websocket.py
+++ b/addons/web_editor/models/ir_websocket.py
@@ -8,7 +8,7 @@ from odoo.exceptions import AccessDenied
 
 
 class IrWebsocket(models.AbstractModel):
-    _inherit = 'ir.websocket'
+    _inherit = ['ir.websocket']
 
     def _build_bus_channel_list(self, channels):
         if self.env.uid:

--- a/addons/web_editor/models/models.py
+++ b/addons/web_editor/models/models.py
@@ -6,7 +6,7 @@ from odoo import api, models
 
 
 class Base(models.AbstractModel):
-    _inherit = 'base'
+    _inherit = ['base']
 
     @api.model
     def _get_view_field_attributes(self):
@@ -17,7 +17,9 @@ class Base(models.AbstractModel):
 
 
 class BaseModel(models.AbstractModel):
-    _inherit = 'base'
+    _name = "base"
+
+    _inherit = ['base']
 
     def web_update_field_translations(self, fname, translations):
         field = self._fields[fname]

--- a/addons/web_editor/models/test_models.py
+++ b/addons/web_editor/models/test_models.py
@@ -4,8 +4,7 @@
 from odoo import models, fields
 
 
-class ConverterTest(models.Model):
-    _name = 'web_editor.converter.test'
+class Web_EditorConverterTest(models.Model):
     _description = 'Web Editor Converter Test'
 
     # disable translation export for those brilliant field labels and values
@@ -30,8 +29,7 @@ class ConverterTest(models.Model):
     text = fields.Text()
 
 
-class ConverterTestSub(models.Model):
-    _name = 'web_editor.converter.test.sub'
+class Web_EditorConverterTestSub(models.Model):
     _description = 'Web Editor Converter Subtest'
 
     name = fields.Char()
