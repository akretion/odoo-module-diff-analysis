PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:6 + add:0, change matches:
-    _inherit = 'account.analytic.account'
-    _inherit = 'digest.digest'
-    _inherit = 'ir.ui.menu'
-    _inherit = 'mail.message'
-    _inherit = 'res.config.settings'
-    _inherit = 'res.partner'

Total Changes: 47

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/project/models/account_analytic_account.py
+++ b/addons/project/models/account_analytic_account.py
@@ -6,7 +6,7 @@ from odoo.exceptions import UserError
 
 
 class AccountAnalyticAccount(models.Model):
-    _inherit = 'account.analytic.account'
+    _inherit = ['account.analytic.account']
     _description = 'Analytic Account'
 
     project_ids = fields.One2many('project.project', 'account_id', string='Projects', export_string_translation=False)

--- a/addons/project/models/digest_digest.py
+++ b/addons/project/models/digest_digest.py
@@ -5,8 +5,8 @@ from odoo import fields, models, _
 from odoo.exceptions import AccessError
 
 
-class Digest(models.Model):
-    _inherit = 'digest.digest'
+class DigestDigest(models.Model):
+    _inherit = ['digest.digest']
 
     kpi_project_task_opened = fields.Boolean('Open Tasks')
     kpi_project_task_opened_value = fields.Integer(compute='_compute_project_task_opened_value', export_string_translation=False)

--- a/addons/project/models/ir_ui_menu.py
+++ b/addons/project/models/ir_ui_menu.py
@@ -5,7 +5,7 @@ from odoo import models
 
 
 class IrUiMenu(models.Model):
-    _inherit = 'ir.ui.menu'
+    _inherit = ['ir.ui.menu']
 
     def _load_menus_blacklist(self):
         res = super()._load_menus_blacklist()

--- a/addons/project/models/mail_message.py
+++ b/addons/project/models/mail_message.py
@@ -5,7 +5,7 @@ from odoo.tools.sql import create_index
 
 
 class MailMessage(models.Model):
-    _inherit = 'mail.message'
+    _inherit = ['mail.message']
 
     def init(self):
         super().init()

--- a/addons/project/models/project_collaborator.py
+++ b/addons/project/models/project_collaborator.py
@@ -4,7 +4,6 @@ from odoo import api, fields, models
 
 
 class ProjectCollaborator(models.Model):
-    _name = 'project.collaborator'
     _description = 'Collaborators in project shared'
 
     project_id = fields.Many2one('project.project', 'Project Shared', domain=[('privacy_visibility', '=', 'portal')], required=True, readonly=True, export_string_translation=False)

--- a/addons/project/models/project_milestone.py
+++ b/addons/project/models/project_milestone.py
@@ -8,8 +8,8 @@ from odoo.tools import format_date
 
 from .project_task import CLOSED_STATES
 
+
 class ProjectMilestone(models.Model):
-    _name = 'project.milestone'
     _description = "Project Milestone"
     _inherit = ['mail.thread']
     _order = 'sequence, deadline, is_reached desc, name'

--- a/addons/project/models/project_project.py
+++ b/addons/project/models/project_project.py
@@ -16,8 +16,7 @@ from .project_update import STATUS_COLOR
 from .project_task import CLOSED_STATES
 
 
-class Project(models.Model):
-    _name = "project.project"
+class ProjectProject(models.Model):
     _description = "Project"
     _inherit = [
         'portal.mixin',
@@ -428,7 +427,7 @@ class Project(models.Model):
         default = dict(default or {})
         # Since we dont want to copy the milestones if the original project has the feature disabled, we set the milestones to False by default.
         default['milestone_ids'] = False
-        new_projects = super(Project, self.with_context(mail_auto_subscribe_no_notify=True, mail_create_nosubscribe=True)).copy(default=default)
+        new_projects = super(ProjectProject, self.with_context(mail_auto_subscribe_no_notify=True, mail_create_nosubscribe=True)).copy(default=default)
         if 'milestone_mapping' not in self.env.context:
             self = self.with_context(milestone_mapping={})
         actions_per_project = dict(self.env['ir.embedded.actions']._read_group(

--- a/addons/project/models/project_project_stage.py
+++ b/addons/project/models/project_project_stage.py
@@ -4,8 +4,8 @@
 from odoo import fields, models, _
 from odoo.exceptions import UserError
 
+
 class ProjectProjectStage(models.Model):
-    _name = 'project.project.stage'
     _description = 'Project Stage'
     _order = 'sequence, id'
 

--- a/addons/project/models/project_tags.py
+++ b/addons/project/models/project_tags.py
@@ -10,7 +10,6 @@ from odoo.tools import SQL
 
 class ProjectTags(models.Model):
     """ Tags of project's tasks """
-    _name = "project.tags"
     _description = "Project Tags"
     _order = "name"
 

--- a/addons/project/models/project_task.py
+++ b/addons/project/models/project_task.py
@@ -79,8 +79,7 @@ CLOSED_STATES = {
 }
 
 
-class Task(models.Model):
-    _name = "project.task"
+class ProjectTask(models.Model):
     _description = "Task"
     _date_name = "date_assign"
     _inherit = [
@@ -98,7 +97,7 @@ class Task(models.Model):
     _track_duration_field = 'stage_id'
 
     def _get_versioned_fields(self):
-        return [Task.description.name]
+        return [ProjectTask.description.name]
 
     @api.model
     def _get_default_partner_id(self, project=None, parent=None):
@@ -847,7 +846,7 @@ class Task(models.Model):
             'depend_on_ids': False,
             'dependent_ids': False,
         })
-        copied_tasks = super(Task, self.with_context(
+        copied_tasks = super(ProjectTask, self.with_context(
             mail_auto_subscribe_no_notify=True,
             mail_create_nosubscribe=True,
             mail_create_nolog=True,
@@ -1120,7 +1119,7 @@ class Task(models.Model):
         if is_portal_user:
             vals_list_no_sudo, vals_list = zip(*(self._get_portal_sudo_vals(vals, defaults=True) for vals in vals_list))
             self_no_sudo, self = self, self.sudo().with_context(self._get_portal_sudo_context())
-        tasks = super(Task, self.with_context(mail_create_nosubscribe=True)).create(vals_list)
+        tasks = super(ProjectTask, self.with_context(mail_create_nosubscribe=True)).create(vals_list)
         if is_portal_user:
             for task, vals in zip(tasks.with_env(self_no_sudo.env), vals_list_no_sudo):
                 task.write(vals)
@@ -1276,7 +1275,7 @@ class Task(models.Model):
                         project_link_per_task_id[task.id] = project_link
         result = super().write(vals)
         if portal_can_write:
-            super(Task, self_no_sudo).write(vals_no_sudo)
+            super(ProjectTask, self_no_sudo).write(vals_no_sudo)
 
         if 'user_ids' in vals:
             self._populate_missing_personal_stages()
@@ -1614,7 +1613,7 @@ class Task(models.Model):
         res = {task.id: aliases.get(task.project_id.id) for task in self}
         leftover = self.filtered(lambda rec: not rec.project_id)
         if leftover:
-            res.update(super(Task, leftover)._notify_get_reply_to(default=default))
+            res.update(super(ProjectTask, leftover)._notify_get_reply_to(default=default))
         return res
 
     def _ensure_personal_stages(self):
@@ -1660,7 +1659,7 @@ class Task(models.Model):
         }
         defaults.update(custom_values)
 
-        task = super(Task, self.with_context(create_context)).message_new(msg, custom_values=defaults)
+        task = super(ProjectTask, self.with_context(create_context)).message_new(msg, custom_values=defaults)
         email_list = task.email_split(msg)
         partner_ids = [p.id for p in self.env['mail.thread']._mail_find_partner_from_emails(email_list, records=task, force_create=False) if p]
         task.message_subscribe(partner_ids)

--- a/addons/project/models/project_task_recurrence.py
+++ b/addons/project/models/project_task_recurrence.py
@@ -6,8 +6,8 @@ from odoo.exceptions import ValidationError
 
 from dateutil.relativedelta import relativedelta
 
+
 class ProjectTaskRecurrence(models.Model):
-    _name = 'project.task.recurrence'
     _description = 'Task Recurrence'
 
     task_ids = fields.One2many('project.task', 'recurrence_id', copy=False)

--- a/addons/project/models/project_task_stage_personal.py
+++ b/addons/project/models/project_task_stage_personal.py
@@ -3,8 +3,8 @@
 
 from odoo import fields, models
 
+
 class ProjectTaskStagePersonal(models.Model):
-    _name = 'project.task.stage.personal'
     _description = 'Personal Task Stage'
     _table = 'project_task_user_rel'
     _rec_name = 'stage_id'

--- a/addons/project/models/project_task_type.py
+++ b/addons/project/models/project_task_type.py
@@ -8,7 +8,6 @@ from odoo.exceptions import UserError
 
 
 class ProjectTaskType(models.Model):
-    _name = 'project.task.type'
     _description = 'Task Stage'
     _order = 'sequence, id'
 

--- a/addons/project/models/project_update.py
+++ b/addons/project/models/project_update.py
@@ -20,8 +20,8 @@ STATUS_COLOR = {
     'to_define': 0,
 }
 
+
 class ProjectUpdate(models.Model):
-    _name = 'project.update'
     _description = 'Project Update'
     _order = 'id desc'
     _inherit = ['mail.thread.cc', 'mail.activity.mixin']

--- a/addons/project/models/res_config_settings.py
+++ b/addons/project/models/res_config_settings.py
@@ -5,7 +5,7 @@ from odoo import api, fields, models
 
 
 class ResConfigSettings(models.TransientModel):
-    _inherit = 'res.config.settings'
+    _inherit = ['res.config.settings']
 
     module_hr_timesheet = fields.Boolean(string="Task Logs")
     group_project_rating = fields.Boolean("Customer Ratings", implied_group='project.group_project_rating')

--- a/addons/project/models/res_partner.py
+++ b/addons/project/models/res_partner.py
@@ -8,7 +8,7 @@ from odoo.tools import email_normalize
 
 class ResPartner(models.Model):
     """ Inherits partner and adds Tasks information in the partner form """
-    _inherit = 'res.partner'
+    _inherit = ['res.partner']
 
     project_ids = fields.One2many('project.project', 'partner_id', string='Projects', export_string_translation=False)
     task_ids = fields.One2many('project.task', 'partner_id', string='Tasks', export_string_translation=False)
