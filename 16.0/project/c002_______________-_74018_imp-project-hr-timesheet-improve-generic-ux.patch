PR: https://github.com/odoo/odoo/pull/74018

From: f4c054e4731270a5103ec1d5a97c2789aef977e3
From: Bonis Modi
Date: 2021-11-23 12:04:00

Structural Changes: 3
Total Changes: 39

[IMP] project, hr_timesheet, *: improve generic ux

Purpose of this commit to improve generic UX for the project app.

So, In this commit done following changes:

- add 'subtask_effective_hours' and 'total_hours_spent' fields in the page of
subtask in task form view.
- change invisible attrs to column_invisible attrs for block_by page in task
form view.
- add 'task in progress' subtype for project.task and move 'stage changed'
subtype above 'task blocked'.
- remove the 'is_close' field and all its references from project.task.type.
- unarchive all of its tasks when the user unarchives the task stage.
- sort projects on 'is_favorite'.
- internal users following the project automatically follow its updates and
their notification preferences propagated accordingly.
- duplicating a task will duplicate all of its subtasks.
- move parent task field in extra info page of task form view.
- change the label of 'edit' to 'view' in the burger menu of project kanban view.
- user can delete task without sale_order validation error.
- add constraints for 'seller_ids' field.
- add remaining_hours_so field in task tree view.
- add unusual_days in task calendar view.
- add 'no content helper' in action of burndown chart.

task-2536044

closes odoo/odoo#74018

Related: odoo/enterprise#19880
Related: odoo/upgrade#2801
Signed-off-by: Laurent Stukkens (ltu) <ltu@odoo.com>
Co-authored-by: Kartik Chavda <kcv@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -3,8 +3,9 @@
 
 import ast
 import json
+from pytz import UTC
 from collections import defaultdict
-from datetime import timedelta, datetime
+from datetime import timedelta, datetime, time
 from random import randint
 
 from odoo import api, Command, fields, models, tools, SUPERUSER_ID, _
@@ -99,7 +100,6 @@ class ProjectTaskType(models.Model):
         help="Automatically modify the kanban state when the customer replies to the feedback for this stage.\n"
             " * Good feedback from the customer will update the kanban state to 'ready for the new stage' (green bullet).\n"
             " * Neutral or bad feedback will set the kanban state to 'blocked' (red bullet).\n")
-    is_closed = fields.Boolean('Closing Stage', help="Tasks in this stage are considered as closed.")
     disabled_rating_warning = fields.Text(compute='_compute_disabled_rating_warning')
 
     user_id = fields.Many2one('res.users', 'Stage Owner', index=True)
@@ -548,6 +548,7 @@ class Project(models.Model):
                     partners = set(task.message_partner_ids.ids) & set(partner_ids)
                     if partners:
                         task.message_subscribe(partner_ids=list(partners), subtype_ids=task_subtypes)
+                self.update_ids.message_subscribe(partner_ids=partner_ids, subtype_ids=subtype_ids)
         return res
 
     def _alias_get_creation_values(self):
@@ -656,10 +657,6 @@ class Project(models.Model):
             'context': {'search_default_group_date': 1, 'default_account_id': self.analytic_account_id.id}
         }
 
-    def action_view_kanban_project(self):
-        # [XBO] TODO: remove me in master
-        return
-
     # ---------------------------------------------
     #  PROJECT UPDATES
     # ---------------------------------------------
@@ -857,7 +854,7 @@ class Task(models.Model):
         project_id = self.env.context.get('default_project_id')
         if not project_id:
             return False
-        return self.stage_find(project_id, [('fold', '=', False), ('is_closed', '=', False)])
+        return self.stage_find(project_id, [('fold', '=', False)])
 
     @api.model
     def _default_company_id(self):
@@ -962,7 +959,7 @@ class Task(models.Model):
     legend_blocked = fields.Char(related='stage_id.legend_blocked', string='Kanban Blocked Explanation', readonly=True, related_sudo=False)
     legend_done = fields.Char(related='stage_id.legend_done', string='Kanban Valid Explanation', readonly=True, related_sudo=False)
     legend_normal = fields.Char(related='stage_id.legend_normal', string='Kanban Ongoing Explanation', readonly=True, related_sudo=False)
-    is_closed = fields.Boolean(related="stage_id.is_closed", string="Closing Stage", readonly=True, related_sudo=False)
+    is_closed = fields.Boolean(related="stage_id.fold", string="Closing Stage", related_sudo=False, help="Folded in Kanban stages are closing stages.")
     parent_id = fields.Many2one('project.task', string='Parent Task', index=True)
     child_ids = fields.One2many('project.task', 'parent_id', string="Sub-tasks")
     child_text = fields.Char(compute="_compute_child_text")
@@ -1389,8 +1386,7 @@ class Task(models.Model):
         for task in self:
             if task.project_id:
                 if task.project_id not in task.stage_id.project_ids:
-                    task.stage_id = task.stage_find(task.project_id.id, [
-                        ('fold', '=', False), ('is_closed', '=', False)])
+                    task.stage_id = task.stage_find(task.project_id.id, [('fold', '=', False)])
             else:
                 task.stage_id = False
 
@@ -1431,6 +1427,8 @@ class Task(models.Model):
             default['name'] = _("%s (copy)", self.name)
         if self.recurrence_id:
             default['recurrence_id'] = self.recurrence_id.copy().id
+        if self.allow_subtasks:
+            default['child_ids'] = [child.copy().id for child in self.child_ids]
         return super(Task, self).copy(default)
 
     @api.model
@@ -1777,7 +1775,7 @@ class Task(models.Model):
 
     def update_date_end(self, stage_id):
         project_task_type = self.env['project.task.type'].browse(stage_id)
-        if project_task_type.fold or project_task_type.is_closed:
+        if project_task_type.fold:
             return {'date_end': fields.Datetime.now()}
         return {'date_end': False}
 
@@ -1910,10 +1908,13 @@ class Task(models.Model):
 
     def _track_subtype(self, init_values):
         self.ensure_one()
-        if 'kanban_state_label' in init_values and self.kanban_state == 'blocked':
-            return self.env.ref('project.mt_task_blocked')
-        elif 'kanban_state_label' in init_values and self.kanban_state == 'done':
-            return self.env.ref('project.mt_task_ready')
+        mail_message_subtype_per_kanban_state = {
+            'blocked': 'project.mt_task_blocked',
+            'done': 'project.mt_task_ready',
+            'normal': 'project.mt_task_progress',
+        }
+        if 'kanban_state_label' in init_values and self.kanban_state in mail_message_subtype_per_kanban_state:
+            return self.env.ref(mail_message_subtype_per_kanban_state[self.kanban_state])
         elif 'stage_id' in init_values:
             return self.env.ref('project.mt_task_stage')
         return super(Task, self)._track_subtype(init_values)
@@ -2171,6 +2172,14 @@ class Task(models.Model):
         self.ensure_one()
         return self.analytic_account_id or self.project_analytic_account_id
 
+    @api.model
+    def get_unusual_days(self, date_from, date_to=None):
+        calendar = self.env.company.resource_calendar_id
+        return calendar._get_unusual_days(
+            datetime.combine(fields.Date.from_string(date_from), time.min).replace(tzinfo=UTC),
+            datetime.combine(fields.Date.from_string(date_to), time.max).replace(tzinfo=UTC)
+        )
+
 class ProjectTags(models.Model):
     """ Tags of project's tasks """
     _name = "project.tags"
