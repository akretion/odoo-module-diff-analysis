PR: https://github.com/odoo/odoo/pull/84719

From: fa111d449d843a365a81af5d1b0df75c3954a17b
From: Joseph Caburnay
Date: 2022-06-03 14:39:51

Structural Changes: 43
Total Changes: 461

[IMP] point_of_sale,*pos*: configure pos from general settings

Purpose:

- Move PoS settings in general settings to be consistent with the rest
  of Odoo (PoS being the only app where settings are split in two locations)
- Clean settings by enabling obvious settings or dropping unnecessary ones.

closes odoo/odoo#84719

Task-id: 2753430
Related: odoo/upgrade#3260
Related: odoo/enterprise#24425
Signed-off-by: Masereel Pierre <pim@odoo.com>

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/pos_category.py
+++ b/addons/point_of_sale/models/pos_category.py
@@ -20,6 +20,10 @@ class PosCategory(models.Model):
     sequence = fields.Integer(help="Gives the sequence order when displaying a list of product categories.")
     image_128 = fields.Image("Image", max_width=128, max_height=128)
 
+    # During loading of data, the image is not loaded so we expose a lighter
+    # field to determine whether a pos.category has an image or not.
+    has_image = fields.Boolean(compute='_compute_has_image')
+
     def name_get(self):
         def get_names(cat):
             res = []
@@ -34,3 +38,8 @@ class PosCategory(models.Model):
         if self.search_count([('id', 'in', self.ids)]):
             if self.env['pos.session'].sudo().search_count([('state', '!=', 'closed')]):
                 raise UserError(_('You cannot delete a point of sale category while a session is still opened.'))
+
+    @api.depends('has_image')
+    def _compute_has_image(self):
+        for category in self:
+            category.has_image = bool(category.image_128)

--- a/addons/point_of_sale/models/pos_config.py
+++ b/addons/point_of_sale/models/pos_config.py
@@ -67,7 +67,6 @@ class PosConfig(models.Model):
     iface_print_via_proxy = fields.Boolean(string='Print via Proxy', help="Bypass browser printing and prints via the hardware proxy.")
     iface_scan_via_proxy = fields.Boolean(string='Scan via Proxy', help="Enable barcode scanning with a remotely connected barcode scanner and card swiping with a Vantiv card reader.")
     iface_big_scrollbars = fields.Boolean('Large Scrollbars', help='For imprecise industrial touchscreens.')
-    iface_orderline_customer_notes = fields.Boolean(string='Customer Notes', help='Allow to write notes for customer on Orderlines. This will be shown in the receipt.')
     iface_print_auto = fields.Boolean(string='Automatic Receipt Printing', default=False,
         help='The receipt will automatically be printed at the end of each order.')
     iface_print_skip_screen = fields.Boolean(string='Skip Preview Screen', default=True,
@@ -77,12 +76,9 @@ class PosConfig(models.Model):
         help='The point of sale will display this product category by default. If no category is specified, all available products will be shown.')
     iface_available_categ_ids = fields.Many2many('pos.category', string='Available PoS Product Categories',
         help='The point of sale will only display products which are within one of the selected category trees. If no category is specified, all available products will be shown')
-    selectable_categ_ids = fields.Many2many('pos.category', compute='_compute_selectable_categories')
-    iface_display_categ_images = fields.Boolean(string='Display Category Pictures',
-        help="The product categories will be displayed with pictures.")
     restrict_price_control = fields.Boolean(string='Restrict Price Modifications to Managers',
         help="Only users with Manager access rights for PoS app can modify the product prices on orders.")
-    is_margins_costs_accessible_to_every_user = fields.Boolean(string='Margins & Costs', default=True,
+    is_margins_costs_accessible_to_every_user = fields.Boolean(string='Margins & Costs', default=False,
         help='When disabled, only PoS manager can view the margin and cost of product among the Product info.')
     cash_control = fields.Boolean(string='Advanced Cash Control', compute='_compute_cash_control', help="Check the amount of the cashbox at opening and closing.")
     set_maximum_difference = fields.Boolean('Set Maximum Difference', help="Set a maximum difference allowed between the expected and counted money during the closing of the session.")
@@ -112,12 +108,6 @@ class PosConfig(models.Model):
         help="The pricelist used if no customer is selected or if the customer has no Sale Pricelist configured.")
     available_pricelist_ids = fields.Many2many('product.pricelist', string='Available Pricelists', default=_default_pricelist,
         help="Make several pricelists available in the Point of Sale. You can also apply a pricelist to specific customers from their contact form (in Sales tab). To be valid, this pricelist must be listed here as an available pricelist. Otherwise the default pricelist will apply.")
-    allowed_pricelist_ids = fields.Many2many(
-        'product.pricelist',
-        string='Allowed Pricelists',
-        compute='_compute_allowed_pricelist_ids',
-        help='This is a technical field used for the domain of pricelist_id.',
-    )
     company_id = fields.Many2one('res.company', string='Company', required=True, default=lambda self: self.env.company)
     barcode_nomenclature_id = fields.Many2one('barcode.nomenclature', string='Barcode Nomenclature',
         help='Defines what kind of barcodes are available and how they are assigned to products, customers and cashiers.',
@@ -133,18 +123,15 @@ class PosConfig(models.Model):
     default_fiscal_position_id = fields.Many2one('account.fiscal.position', string='Default Fiscal Position')
     default_bill_ids = fields.Many2many('pos.bill', string="Coins/Bills")
     use_pricelist = fields.Boolean("Use a pricelist.")
-    tax_regime = fields.Boolean("Tax Regime")
     tax_regime_selection = fields.Boolean("Tax Regime Selection value")
     start_category = fields.Boolean("Start Category", default=False)
-    limit_categories = fields.Boolean("Restrict Product Categories")
-    module_account = fields.Boolean(string='Invoicing', default=True, help='Enables invoice generation from the Point of Sale.')
+    limit_categories = fields.Boolean("Restrict Categories")
     module_pos_restaurant = fields.Boolean("Is a Bar/Restaurant")
     module_pos_discount = fields.Boolean("Global Discounts")
     module_pos_loyalty = fields.Boolean("Loyalty Program")
     module_pos_mercury = fields.Boolean(string="Integrated Card Payments")
-    product_configurator = fields.Boolean(string="Product Configurator", default=True)
     is_posbox = fields.Boolean("PosBox")
-    is_header_or_footer = fields.Boolean("Header & Footer")
+    is_header_or_footer = fields.Boolean("Custom Header & Footer")
     module_pos_hr = fields.Boolean(help="Show employee login screen")
     amount_authorized_diff = fields.Float('Amount Authorized Difference',
         help="This field depicts the maximum difference allowed between the ending balance and the theoretical cash when "
@@ -158,7 +145,7 @@ class PosConfig(models.Model):
     cash_rounding = fields.Boolean(string="Cash Rounding")
     only_round_cash_method = fields.Boolean(string="Only apply rounding on cash")
     has_active_session = fields.Boolean(compute='_compute_current_session')
-    manual_discount = fields.Boolean(string="Manual Discounts", default=True)
+    manual_discount = fields.Boolean(string="Line Discounts", default=True)
     ship_later = fields.Boolean(string="Ship Later")
     warehouse_id = fields.Many2one('stock.warehouse', default=_default_warehouse_id, ondelete='restrict')
     route_id = fields.Many2one('stock.route', string="Spefic route for products delivered later.")
@@ -169,31 +156,25 @@ class PosConfig(models.Model):
         help="If you deliver all products at once, the delivery order will be scheduled based on the greatest "
         "product lead time. Otherwise, it will be based on the shortest.")
     limited_products_loading = fields.Boolean('Limited Product Loading',
+                                              default=True,
                                               help="we load all starred products (favorite), all services, recent inventory movements of products, and the most recently updated products.\n"
                                                    "When the session is open, we keep on loading all remaining products in the background.\n"
                                                    "In the meantime, you can click on the 'database icon' in the searchbar to load products from database.")
     limited_products_amount = fields.Integer(default=20000)
-    product_load_background = fields.Boolean()
+    product_load_background = fields.Boolean(default=True)
     limited_partners_loading = fields.Boolean('Limited Partners Loading',
+                                              default=True,
                                               help="By default, 100 partners are loaded.\n"
                                                    "When the session is open, we keep on loading all remaining partners in the background.\n"
                                                    "In the meantime, you can use the 'Load Customers' button to load partners from database.")
     limited_partners_amount = fields.Integer(default=100)
-    partner_load_background = fields.Boolean()
+    partner_load_background = fields.Boolean(default=True)
 
     @api.depends('payment_method_ids')
     def _compute_cash_control(self):
         for config in self:
             config.cash_control = bool(config.payment_method_ids.filtered('is_cash_count'))
 
-    @api.depends('use_pricelist', 'available_pricelist_ids')
-    def _compute_allowed_pricelist_ids(self):
-        for config in self:
-            if config.use_pricelist:
-                config.allowed_pricelist_ids = config.available_pricelist_ids.ids
-            else:
-                config.allowed_pricelist_ids = self.env['product.pricelist'].search([]).ids
-
     @api.depends('company_id')
     def _compute_company_has_template(self):
         for config in self:
@@ -264,14 +245,6 @@ class PosConfig(models.Model):
                 pos_config.pos_session_duration = 0
                 pos_config.current_user_id = False
 
-    @api.depends('iface_available_categ_ids')
-    def _compute_selectable_categories(self):
-        for config in self:
-            if config.iface_available_categ_ids:
-                config.selectable_categ_ids = config.iface_available_categ_ids
-            else:
-                config.selectable_categ_ids = self.env['pos.category'].search([])
-
     @api.depends('iface_customer_facing_display_via_proxy', 'iface_customer_facing_display_local')
     def _compute_customer_facing_display(self):
         for config in self:
@@ -334,6 +307,13 @@ class PosConfig(models.Model):
         ):
             raise ValidationError(_("All payment methods must be in the same currency as the Sales Journal or the company currency if that is not set."))
 
+    @api.constrains('iface_start_categ_id', 'iface_available_categ_ids')
+    def _check_start_categ(self):
+        for config in self:
+            allowed_categ_ids = config.iface_available_categ_ids or self.env['pos.category'].search([])
+            if config.iface_start_categ_id and config.iface_start_categ_id not in allowed_categ_ids:
+                raise ValidationError(_("Start category should belong in the available categories."))
+
     def _check_payment_method_ids(self):
         self.ensure_one()
         if not self.payment_method_ids:
@@ -355,78 +335,6 @@ class PosConfig(models.Model):
             if any(pricelist.company_id.id not in [False, config.company_id.id] for pricelist in config.available_pricelist_ids):
                 raise ValidationError(_("The selected pricelists must belong to no company or the company of the point of sale."))
 
-    @api.onchange('iface_tipproduct')
-    def _onchange_tipproduct(self):
-        if self.iface_tipproduct:
-            self.tip_product_id = self.env.ref('point_of_sale.product_product_tip', False)
-        else:
-            self.tip_product_id = False
-
-    @api.onchange('iface_print_via_proxy')
-    def _onchange_iface_print_via_proxy(self):
-        self.iface_print_auto = self.iface_print_via_proxy
-        if not self.iface_print_via_proxy:
-            self.iface_cashdrawer = False
-
-    @api.onchange('module_account')
-    def _onchange_module_account(self):
-        if self.module_account and not self.invoice_journal_id:
-            self.invoice_journal_id = self._default_invoice_journal()
-
-    @api.onchange('use_pricelist')
-    def _onchange_use_pricelist(self):
-        """
-        If the 'pricelist' box is unchecked, we reset the pricelist_id to stop
-        using a pricelist for this iotbox.
-        """
-        if not self.use_pricelist:
-            self.pricelist_id = self._default_pricelist()
-
-    @api.onchange('available_pricelist_ids')
-    def _onchange_available_pricelist_ids(self):
-        if self.pricelist_id not in self.available_pricelist_ids._origin:
-            self.pricelist_id = False
-
-    @api.onchange('is_posbox')
-    def _onchange_is_posbox(self):
-        if not self.is_posbox:
-            self.proxy_ip = False
-            self.iface_scan_via_proxy = False
-            self.iface_electronic_scale = False
-            self.iface_cashdrawer = False
-            self.iface_print_via_proxy = False
-            self.iface_customer_facing_display_via_proxy = False
-
-    @api.onchange('tax_regime')
-    def _onchange_tax_regime(self):
-        if not self.tax_regime:
-            self.default_fiscal_position_id = False
-
-    @api.onchange('tax_regime_selection')
-    def _onchange_tax_regime_selection(self):
-        if not self.tax_regime_selection:
-            self.fiscal_position_ids = [(5, 0, 0)]
-
-    @api.onchange('start_category')
-    def _onchange_start_category(self):
-        if not self.start_category:
-            self.iface_start_categ_id = False
-
-    @api.onchange('limit_categories', 'iface_available_categ_ids', 'iface_start_categ_id')
-    def _onchange_limit_categories(self):
-        res = {}
-        if not self.limit_categories:
-            self.iface_available_categ_ids = False
-        if self.iface_available_categ_ids and self.iface_start_categ_id.id not in self.iface_available_categ_ids.ids:
-            self.iface_start_categ_id = False
-        return res
-
-    @api.onchange('is_header_or_footer')
-    def _onchange_header_footer(self):
-        if not self.is_header_or_footer:
-            self.receipt_header = False
-            self.receipt_footer = False
-
     def name_get(self):
         result = []
         for config in self:
@@ -459,7 +367,16 @@ class PosConfig(models.Model):
         # If you plan to add something after this, use a new environment. The one above is no longer valid after the modules install.
         return pos_configs
 
+    def _reset_default_on_vals(self, vals):
+        if 'tip_product_id' in vals and any(self.mapped('iface_tipproduct')) and not vals['tip_product_id']:
+            default_product = self.env.ref('point_of_sale.product_product_tip', False)
+            if default_product:
+                vals['tip_product_id'] = default_product.id
+            else:
+                raise UserError(_('The default tip product is missing. Please manually specify the tip product. (See Tips field.)'))
+
     def write(self, vals):
+        self._reset_default_on_vals(vals)
         opened_session = self.mapped('session_ids').filtered(lambda s: s.state != 'closed')
         if opened_session:
             forbidden_fields = []
@@ -492,11 +409,12 @@ class PosConfig(models.Model):
         sequences_to_delete.unlink()
         return res
 
+    # TODO-JCB: Maybe we can move this logic in `_reset_default_on_vals`
     def _set_fiscal_position(self):
         for config in self:
-            if config.tax_regime and config.default_fiscal_position_id.id not in config.fiscal_position_ids.ids:
+            if config.tax_regime_selection and config.default_fiscal_position_id and (config.default_fiscal_position_id.id not in config.fiscal_position_ids.ids):
                 config.fiscal_position_ids = [(4, config.default_fiscal_position_id.id)]
-            elif not config.tax_regime_selection and not config.tax_regime and config.fiscal_position_ids.ids:
+            elif not config.tax_regime_selection and config.fiscal_position_ids.ids:
                 config.fiscal_position_ids = [(5, 0, 0)]
 
     def _check_modules_to_install(self):
@@ -679,8 +597,6 @@ class PosConfig(models.Model):
             invoice_journal_id = pos_config.invoice_journal_id or self.env['account.journal'].search([('type', '=', 'sale'), ('company_id', '=', company.id)], limit=1)
             if invoice_journal_id:
                 pos_config.write({'invoice_journal_id': invoice_journal_id.id})
-            else:
-                pos_config.write({'module_account': False})
 
     def get_limited_products_loading(self, fields):
         query = """
@@ -751,3 +667,13 @@ class PosConfig(models.Model):
             if field.startswith('module_'):
                 modules_to_check.append(field.replace('module_', ''))
         return modules_to_check
+
+    def action_pos_config_modal_edit(self):
+        return {
+            'view_mode': 'form',
+            'res_model': 'pos.config',
+            'type': 'ir.actions.act_window',
+            'target': 'new',
+            'res_id': self.id,
+            'context': {'pos_config_open_modal': True},
+        }

--- a/addons/point_of_sale/models/pos_order.py
+++ b/addons/point_of_sale/models/pos_order.py
@@ -259,7 +259,6 @@ class PosOrder(models.Model):
     currency_rate = fields.Float("Currency Rate", compute='_compute_currency_rate', compute_sudo=True, store=True, digits=0, readonly=True,
         help='The rate of the currency to the currency of rate applicable at the date of the order')
 
-    invoice_group = fields.Boolean(related="config_id.module_account", readonly=False)
     state = fields.Selection(
         [('draft', 'New'), ('cancel', 'Cancelled'), ('paid', 'Paid'), ('done', 'Posted'), ('invoiced', 'Invoiced')],
         'Status', readonly=True, copy=False, default='draft')

--- a/addons/point_of_sale/models/pos_session.py
+++ b/addons/point_of_sale/models/pos_session.py
@@ -1615,8 +1615,7 @@ class PosSession(models.Model):
         for fiscal_position in loaded_data['account.fiscal.position']:
             fiscal_position['fiscal_position_taxes_by_id'] = {tax_id: fiscal_position_by_id[tax_id] for tax_id in fiscal_position['tax_ids']}
 
-        if self.config_id.product_configurator:
-            loaded_data['attributes_by_ptal_id'] = self._get_attributes_by_ptal_id()
+        loaded_data['attributes_by_ptal_id'] = self._get_attributes_by_ptal_id()
 
     @api.model
     def _pos_ui_models_to_load(self):
@@ -1765,7 +1764,10 @@ class PosSession(models.Model):
         if not self.config_id.limited_partners_loading:
             return self.env['res.partner'].search_read(**params['search_params'])
         partner_ids = [res[0] for res in self.config_id.get_limited_partners_loading()]
-        return self.env['res.partner'].browse(partner_ids).read(params['search_params']['fields'])
+        # Need to search_read because get_limited_partners_loading
+        # might return a partner id that is not accessible.
+        params['search_params']['domain'] = [('id', 'in', partner_ids)]
+        return self.env['res.partner'].search_read(**params['search_params'])
 
     def _loader_params_stock_picking_type(self):
         return {
@@ -1844,7 +1846,7 @@ class PosSession(models.Model):
         if self.config_id.limit_categories and self.config_id.iface_available_categ_ids:
             domain = [('id', 'in', self.config_id.iface_available_categ_ids.ids)]
 
-        return {'search_params': {'domain': domain, 'fields': ['id', 'name', 'parent_id', 'child_id', 'write_date']}}
+        return {'search_params': {'domain': domain, 'fields': ['id', 'name', 'parent_id', 'child_id', 'write_date', 'has_image']}}
 
     def _get_pos_ui_pos_category(self, params):
         return self.env['pos.category'].search_read(**params['search_params'])

--- a/addons/point_of_sale/models/res_config_settings.py
+++ b/addons/point_of_sale/models/res_config_settings.py
@@ -1,11 +1,37 @@
 # -*- coding: utf-8 -*-
 
-from odoo import fields, models
+from odoo import api, fields, models
+
+import logging
+
+_logger = logging.getLogger(__name__)
 
 
 class ResConfigSettings(models.TransientModel):
+    """
+    NOTES
+    1. Fields with 'pos' attributes are removed from the vals before super call to `create`.
+       Values of these fields are written to `pos_config_id` record after the super call.
+       So, if we want to make an atomic write to some set of fields, we need to redefine those
+       fields to have compute, readonly=False, store=True, and pos='<pos.config.field.name>'.
+    2. During `creation` of this record, each related field is written to the source record
+       *one after the other*, so constraints on the source record that are based on multiple
+       fields might not work properly. However, only the *modified* related fields are written
+       to the source field. But the identification of modified fields happen during the super
+       call, not before `create` is called. Because of this, vals contains a lot of field before
+       super call, then the number of fields is reduced after.
+    """
     _inherit = 'res.config.settings'
 
+    def _valid_field_parameter(self, field, name):
+        """Introduce 'pos' attribute to allow atomic write for the destination pos.config record."""
+        return name == 'pos' or super()._valid_field_parameter(field, name)
+
+    def _default_pos_config(self):
+        # Default to the last modified pos.config.
+        return self.env['pos.config'].search([('company_id', '=', self.env.company.id)], order='write_date desc', limit=1)
+
+    pos_config_id = fields.Many2one('pos.config', string="Point of Sale", default=lambda self: self._default_pos_config())
     sale_tax_id = fields.Many2one('account.tax', string="Default Sale Tax", related='company_id.account_sale_tax_id', readonly=False)
     module_pos_mercury = fields.Boolean(string="Vantiv Payment Terminal", help="The transactions are processed by Vantiv. Set your Vantiv credentials on the related payment method.")
     module_pos_adyen = fields.Boolean(string="Adyen Payment Terminal", help="The transactions are processed by Adyen. Set your Adyen credentials on the related payment method.")
@@ -13,6 +39,116 @@ class ResConfigSettings(models.TransientModel):
     module_pos_six = fields.Boolean(string="Six Payment Terminal", help="The transactions are processed by Six. Set the IP address of the terminal on the related payment method.")
     update_stock_quantities = fields.Selection(related="company_id.point_of_sale_update_stock_quantities", readonly=False)
     account_default_pos_receivable_account_id = fields.Many2one(string='Default Account Receivable (PoS)', related='company_id.account_default_pos_receivable_account_id', readonly=False)
+    is_default_pricelist_displayed = fields.Boolean(compute="_compute_pos_pricelist_id", compute_sudo=True)
+
+    # pos.config fields
+    pos_module_pos_discount = fields.Boolean(related='pos_config_id.module_pos_discount', readonly=False)
+    pos_module_pos_hr = fields.Boolean(related='pos_config_id.module_pos_hr', readonly=False)
+    pos_module_pos_loyalty = fields.Boolean(related='pos_config_id.module_pos_loyalty', readonly=False)
+    pos_module_pos_restaurant = fields.Boolean(related='pos_config_id.module_pos_restaurant', readonly=False)
+
+    pos_allowed_pricelist_ids = fields.Many2many('product.pricelist', compute='_compute_pos_allowed_pricelist_ids')
+    pos_amount_authorized_diff = fields.Float(related='pos_config_id.amount_authorized_diff', readonly=False)
+    pos_available_pricelist_ids = fields.Many2many('product.pricelist', string='Available Pricelists', compute='_compute_pos_available_pricelist_ids', readonly=False, store=True, pos='available_pricelist_ids')
+    pos_barcode_nomenclature_id = fields.Many2one(related='pos_config_id.barcode_nomenclature_id', readonly=False)
+    pos_cash_control = fields.Boolean(related='pos_config_id.cash_control')
+    pos_cash_rounding = fields.Boolean(related='pos_config_id.cash_rounding', readonly=False, string="Cash Rounding (PoS)")
+    pos_company_has_template = fields.Boolean(related='pos_config_id.company_has_template')
+    pos_default_bill_ids = fields.Many2many(related='pos_config_id.default_bill_ids', readonly=False)
+    pos_default_fiscal_position_id = fields.Many2one('account.fiscal.position', string='Default Fiscal Position', compute='_compute_pos_fiscal_positions', readonly=False, store=True, pos='default_fiscal_position_id')
+    pos_fiscal_position_ids = fields.Many2many('account.fiscal.position', string='Fiscal Positions', compute='_compute_pos_fiscal_positions', readonly=False, store=True, pos='fiscal_position_ids')
+    pos_has_active_session = fields.Boolean(related='pos_config_id.has_active_session')
+    pos_iface_available_categ_ids = fields.Many2many('pos.category', string='Available PoS Product Categories', compute='_compute_pos_iface_available_categ_ids', readonly=False, store=True, pos='iface_available_categ_ids')
+    pos_iface_big_scrollbars = fields.Boolean(related='pos_config_id.iface_big_scrollbars', readonly=False)
+    pos_iface_cashdrawer = fields.Boolean(string='Cashdrawer', compute='_compute_pos_iface_cashdrawer', readonly=False, store=True, pos='iface_cashdrawer')
+    pos_iface_customer_facing_display_local = fields.Boolean(related='pos_config_id.iface_customer_facing_display_local', readonly=False)
+    pos_iface_customer_facing_display_via_proxy = fields.Boolean(string='Customer Facing Display', compute='_compute_pos_iface_customer_facing_display_via_proxy', readonly=False, store=True, pos='iface_customer_facing_display_via_proxy')
+    pos_iface_electronic_scale = fields.Boolean(string='Electronic Scale', compute='_compute_pos_iface_electronic_scale', readonly=False, store=True, pos='iface_electronic_scale')
+    pos_iface_print_auto = fields.Boolean(related='pos_config_id.iface_print_auto', readonly=False)
+    pos_iface_print_skip_screen = fields.Boolean(related='pos_config_id.iface_print_skip_screen', readonly=False)
+    pos_iface_print_via_proxy = fields.Boolean(string='Print via Proxy', compute='_compute_pos_iface_print_via_proxy', readonly=False, store=True, pos='iface_print_via_proxy')
+    pos_iface_scan_via_proxy = fields.Boolean(string='Scan via Proxy', compute='_compute_pos_iface_scan_via_proxy', readonly=False, store=True, pos='iface_scan_via_proxy')
+    pos_iface_start_categ_id = fields.Many2one('pos.category', string='Initial Category', compute='_compute_pos_iface_start_categ_id', readonly=False, store=True, pos='iface_start_categ_id')
+    pos_iface_tax_included = fields.Selection(related='pos_config_id.iface_tax_included', readonly=False)
+    pos_iface_tipproduct = fields.Boolean(related='pos_config_id.iface_tipproduct', readonly=False)
+    pos_invoice_journal_id = fields.Many2one(related='pos_config_id.invoice_journal_id', readonly=False)
+    pos_is_header_or_footer = fields.Boolean(related='pos_config_id.is_header_or_footer', readonly=False)
+    pos_is_margins_costs_accessible_to_every_user = fields.Boolean(related='pos_config_id.is_margins_costs_accessible_to_every_user', readonly=False)
+    pos_is_posbox = fields.Boolean(related='pos_config_id.is_posbox', readonly=False)
+    pos_journal_id = fields.Many2one(related='pos_config_id.journal_id', readonly=False)
+    pos_limit_categories = fields.Boolean(related='pos_config_id.limit_categories', readonly=False)
+    pos_limited_partners_amount = fields.Integer(related='pos_config_id.limited_partners_amount', readonly=False)
+    pos_limited_partners_loading = fields.Boolean(related='pos_config_id.limited_partners_loading', readonly=False)
+    pos_limited_products_amount = fields.Integer(related='pos_config_id.limited_products_amount', readonly=False)
+    pos_limited_products_loading = fields.Boolean(related='pos_config_id.limited_products_loading', readonly=False)
+    pos_manual_discount = fields.Boolean(related='pos_config_id.manual_discount', readonly=False)
+    pos_only_round_cash_method = fields.Boolean(related='pos_config_id.only_round_cash_method', readonly=False)
+    pos_other_devices = fields.Boolean(related='pos_config_id.other_devices', readonly=False)
+    pos_partner_load_background = fields.Boolean(related='pos_config_id.partner_load_background', readonly=False)
+    pos_payment_method_ids = fields.Many2many(related='pos_config_id.payment_method_ids', readonly=False)
+    pos_picking_policy = fields.Selection(related='pos_config_id.picking_policy', readonly=False)
+    pos_picking_type_id = fields.Many2one(related='pos_config_id.picking_type_id', readonly=False)
+    pos_pricelist_id = fields.Many2one('product.pricelist', string='Default Pricelist', compute='_compute_pos_pricelist_id', readonly=False, store=True, pos='pricelist_id')
+    pos_product_load_background = fields.Boolean(related='pos_config_id.product_load_background', readonly=False)
+    pos_proxy_ip = fields.Char(string='IP Address', compute='_compute_pos_proxy_ip', readonly=False, store=True, pos='proxy_ip')
+    pos_receipt_footer = fields.Text(string='Receipt Footer', compute='_compute_pos_receipt_header_footer', readonly=False, store=True, pos='receipt_footer')
+    pos_receipt_header = fields.Text(string='Receipt Header', compute='_compute_pos_receipt_header_footer', readonly=False, store=True, pos='receipt_header')
+    pos_restrict_price_control = fields.Boolean(related='pos_config_id.restrict_price_control', readonly=False)
+    pos_rounding_method = fields.Many2one(related='pos_config_id.rounding_method', readonly=False)
+    pos_route_id = fields.Many2one(related='pos_config_id.route_id', readonly=False)
+    pos_selectable_categ_ids = fields.Many2many('pos.category', compute='_compute_pos_selectable_categ_ids')
+    pos_sequence_id = fields.Many2one(related='pos_config_id.sequence_id')
+    pos_set_maximum_difference = fields.Boolean(related='pos_config_id.set_maximum_difference', readonly=False)
+    pos_ship_later = fields.Boolean(related='pos_config_id.ship_later', readonly=False)
+    pos_start_category = fields.Boolean(related='pos_config_id.start_category', readonly=False)
+    pos_tax_regime_selection = fields.Boolean(related='pos_config_id.tax_regime_selection', readonly=False)
+    pos_tip_product_id = fields.Many2one('product.product', string='Tip Product', compute='_compute_pos_tip_product_id', readonly=False, store=True, pos='tip_product_id')
+    pos_use_pricelist = fields.Boolean(related='pos_config_id.use_pricelist', readonly=False)
+    pos_warehouse_id = fields.Many2one(related='pos_config_id.warehouse_id', readonly=False, string="Warehouse (PoS)")
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        # STEP: Remove the 'pos' fields from each vals.
+        #   They will be written atomically to `pos_config_id` after the super call.
+        pos_config_id_to_fields_vals_map = {}
+
+        for vals in vals_list:
+            pos_config_id = vals.get('pos_config_id')
+            if pos_config_id:
+                pos_fields_vals = {}
+                for field in self._fields.values():
+                    val = vals.get(field.name)
+
+                    # Add only to pos_fields_vals if
+                    #   1. _field is in vals -- meaning, the _field is in view.
+                    #   2. _field has 'pos' attribute
+                    if hasattr(field, 'pos') and val is not None:
+                        pos_config_field_name = field.pos
+                        if not pos_config_field_name in self.env['pos.config']._fields:
+                            _logger.warning("The value of '%s' is not properly saved to the pos_config_id field because the destination"
+                                " field '%s' is not a valid field in the pos.config model.", field.name, pos_config_field_name)
+                        else:
+                            pos_fields_vals[pos_config_field_name] = val
+                            del vals[field.name]
+
+                if vals.get('pos_cash_rounding'):
+                    vals['group_cash_rounding'] = True
+
+                if vals.get('pos_use_pricelist'):
+                    vals['group_product_pricelist'] = True
+
+                pos_config_id_to_fields_vals_map[pos_config_id] = pos_fields_vals
+
+        # STEP: Call super on the modified vals_list.
+        # NOTE: When creating `res.config.settings` records, it doesn't write on *unmodified* related fields.
+        result = super().create(vals_list)
+
+        # STEP: Finally, we write the value of 'pos' fields to 'pos_config_id'.
+        for pos_config_id, pos_fields_vals in pos_config_id_to_fields_vals_map.items():
+            pos_config = self.env['pos.config'].browse(pos_config_id)
+            pos_config.write(pos_fields_vals)
+
+        return result
 
     def set_values(self):
         super(ResConfigSettings, self).set_values()
@@ -20,3 +156,158 @@ class ResConfigSettings(models.TransientModel):
             self.env['pos.config'].search([
                 ('use_pricelist', '=', True)
             ]).use_pricelist = False
+
+        if not self.group_cash_rounding:
+            self.env['pos.config'].search([
+                ('cash_rounding', '=', True)
+            ]).cash_rounding = False
+
+    def action_pos_config_create_new(self):
+        return {
+            'view_mode': 'form',
+            'res_model': 'pos.config',
+            'type': 'ir.actions.act_window',
+            'target': 'new',
+            'res_id': False,
+            'context': {'pos_config_open_modal': True, 'pos_config_create_mode': True},
+        }
+
+    def pos_open_ui(self):
+        return self.pos_config_id.open_ui()
+
+    @api.model
+    def _is_cashdrawer_displayed(self, res_config):
+        return res_config.pos_iface_print_via_proxy
+
+    @api.depends('pos_limit_categories', 'pos_config_id')
+    def _compute_pos_iface_available_categ_ids(self):
+        for res_config in self:
+            if not res_config.pos_limit_categories:
+                res_config.pos_iface_available_categ_ids = False
+            else:
+                res_config.pos_iface_available_categ_ids = res_config.pos_config_id.iface_available_categ_ids
+
+    @api.depends('pos_start_category', 'pos_config_id')
+    def _compute_pos_iface_start_categ_id(self):
+        for res_config in self:
+            if not res_config.pos_start_category:
+                res_config.pos_iface_start_categ_id = False
+            else:
+                res_config.pos_iface_start_categ_id = res_config.pos_config_id.iface_start_categ_id
+
+    @api.depends('pos_iface_available_categ_ids')
+    def _compute_pos_selectable_categ_ids(self):
+        for res_config in self:
+            if res_config.pos_iface_available_categ_ids:
+                res_config.pos_selectable_categ_ids = res_config.pos_iface_available_categ_ids
+            else:
+                res_config.pos_selectable_categ_ids = self.env['pos.category'].search([])
+
+    @api.depends('pos_iface_print_via_proxy', 'pos_config_id')
+    def _compute_pos_iface_cashdrawer(self):
+        for res_config in self:
+            if self._is_cashdrawer_displayed(res_config):
+                res_config.pos_iface_cashdrawer = res_config.pos_config_id.iface_cashdrawer
+            else:
+                res_config.pos_iface_cashdrawer = False
+
+    @api.depends('pos_is_header_or_footer', 'pos_config_id')
+    def _compute_pos_receipt_header_footer(self):
+        for res_config in self:
+            if res_config.pos_is_header_or_footer:
+                res_config.pos_receipt_header = res_config.pos_config_id.receipt_header
+                res_config.pos_receipt_footer = res_config.pos_config_id.receipt_footer
+            else:
+                res_config.pos_receipt_header = False
+                res_config.pos_receipt_footer = False
+
+    @api.depends('pos_tax_regime_selection', 'pos_config_id')
+    def _compute_pos_fiscal_positions(self):
+        for res_config in self:
+            if res_config.pos_tax_regime_selection:
+                res_config.pos_default_fiscal_position_id = res_config.pos_config_id.default_fiscal_position_id
+                res_config.pos_fiscal_position_ids = res_config.pos_config_id.fiscal_position_ids
+            else:
+                res_config.pos_default_fiscal_position_id = False
+                res_config.pos_fiscal_position_ids = [(5, 0, 0)]
+
+    @api.depends('pos_iface_tipproduct', 'pos_config_id')
+    def _compute_pos_tip_product_id(self):
+        for res_config in self:
+            if res_config.pos_iface_tipproduct:
+                res_config.pos_tip_product_id = res_config.pos_config_id.tip_product_id
+            else:
+                res_config.pos_tip_product_id = False
+
+    @api.depends('pos_use_pricelist', 'pos_available_pricelist_ids', 'pos_config_id')
+    def _compute_pos_pricelist_id(self):
+        for res_config in self:
+            res_config.is_default_pricelist_displayed = len(res_config.pos_available_pricelist_ids) != 1
+
+            if not res_config.pos_use_pricelist:
+                res_config.pos_pricelist_id = self.pos_config_id._default_pricelist()
+                continue
+
+            if res_config.is_default_pricelist_displayed:
+                res_config.pos_pricelist_id = res_config.pos_config_id.pricelist_id
+            else:
+                if len(res_config.pos_available_pricelist_ids) == 1:
+                    res_config.pos_pricelist_id = res_config.pos_available_pricelist_ids._origin
+                else:
+                    res_config.pos_pricelist_id = self.pos_config_id._default_pricelist()
+
+    @api.depends('pos_available_pricelist_ids', 'pos_use_pricelist')
+    def _compute_pos_allowed_pricelist_ids(self):
+        for res_config in self:
+            if res_config.pos_use_pricelist:
+                res_config.pos_allowed_pricelist_ids = res_config.pos_available_pricelist_ids.ids
+            else:
+                res_config.pos_allowed_pricelist_ids = self.env['product.pricelist'].search([]).ids
+
+    @api.depends('pos_use_pricelist', 'pos_config_id')
+    def _compute_pos_available_pricelist_ids(self):
+        for res_config in self:
+            if not res_config.pos_use_pricelist:
+                res_config.pos_available_pricelist_ids = res_config.pos_config_id._default_pricelist()
+            else:
+                res_config.pos_available_pricelist_ids = res_config.pos_config_id.available_pricelist_ids
+
+    @api.depends('pos_is_posbox', 'pos_config_id')
+    def _compute_pos_proxy_ip(self):
+        for res_config in self:
+            if not res_config.pos_is_posbox:
+                res_config.pos_proxy_ip = False
+            else:
+                res_config.pos_proxy_ip = res_config.pos_config_id.proxy_ip
+
+    @api.depends('pos_is_posbox', 'pos_config_id')
+    def _compute_pos_iface_print_via_proxy(self):
+        for res_config in self:
+            if not res_config.pos_is_posbox:
+                res_config.pos_iface_print_via_proxy = False
+            else:
+                res_config.pos_iface_print_via_proxy = res_config.pos_config_id.iface_print_via_proxy
+
+    @api.depends('pos_is_posbox', 'pos_config_id')
+    def _compute_pos_iface_scan_via_proxy(self):
+        for res_config in self:
+            if not res_config.pos_is_posbox:
+                res_config.pos_iface_scan_via_proxy = False
+            else:
+                res_config.pos_iface_scan_via_proxy = res_config.pos_config_id.iface_scan_via_proxy
+
+    @api.depends('pos_is_posbox', 'pos_config_id')
+    def _compute_pos_iface_electronic_scale(self):
+        for res_config in self:
+            if not res_config.pos_is_posbox:
+                res_config.pos_iface_electronic_scale = False
+            else:
+                res_config.pos_iface_electronic_scale = res_config.pos_config_id.iface_electronic_scale
+
+    @api.depends('pos_is_posbox', 'pos_config_id')
+    def _compute_pos_iface_customer_facing_display_via_proxy(self):
+        for res_config in self:
+            if not res_config.pos_is_posbox:
+                res_config.pos_iface_customer_facing_display_via_proxy = False
+            else:
+                res_config.pos_iface_customer_facing_display_via_proxy = res_config.pos_config_id.iface_customer_facing_display_via_proxy
