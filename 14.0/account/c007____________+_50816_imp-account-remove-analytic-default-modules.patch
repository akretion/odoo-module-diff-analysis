PR: https://github.com/odoo/odoo/pull/50816

From: 26175ea7a123e2218951873f925bcd9ce00b05c7
From: jbw
Date: 2020-05-14 07:53:18

Breaking data model changes score: 4.4, change matches:
+    analytic_tag_ids = fields.Many2many('account.analytic.tag', string='Analytic Tags')
-    analytic_account_id = fields.Many2one('account.analytic.account', string='Analytic Account', index=True, check_company=True)
-    analytic_tag_ids = fields.Many2many('account.analytic.tag', string='Analytic Tags', check_company=True)
+    analytic_account_id = fields.Many2one('account.analytic.account', string='Analytic Account',
+    analytic_tag_ids = fields.Many2many('account.analytic.tag', string='Analytic Tags',

Total Changes: 86

[IMP] account : remove analytic default modules

Merge account_analytic_default into account
Merge account_analytic_default_hr_expense into hr
Merge account_analytic_default_purchase into purchase

Prevent having to manually install default modules after activating analytics

closes odoo/odoo#50816

Task: 2182900
Related: odoo/upgrade#1186
Signed-off-by: Quentin De Paoli (qdp) <qdp@openerp.com>

================================= pseudo patch: =================================

--- a/addons/account/models/__init__.py
+++ b/addons/account/models/__init__.py
@@ -11,6 +11,7 @@ from . import account_tax_report
 from . import account_reconcile_model
 from . import account_payment_term
 from . import account_move
+from . import account_analytic_default
 from . import account_payment
 from . import account_bank_statement
 from . import chart_template

--- a/None
+++ b/addons/account/models/account_analytic_default.py
@@ -0,0 +1,65 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
+
+
+class AccountAnalyticDefault(models.Model):
+    _name = "account.analytic.default"
+    _description = "Analytic Distribution"
+    _rec_name = "analytic_id"
+    _order = "sequence"
+
+    sequence = fields.Integer(string='Sequence', help="Gives the sequence order when displaying a list of analytic distribution")
+    analytic_id = fields.Many2one('account.analytic.account', string='Analytic Account')
+    analytic_tag_ids = fields.Many2many('account.analytic.tag', string='Analytic Tags')
+    product_id = fields.Many2one('product.product', string='Product', ondelete='cascade', help="Select a product which will use analytic account specified in analytic default (e.g. create new customer invoice or Sales order if we select this product, it will automatically take this as an analytic account)")
+    partner_id = fields.Many2one('res.partner', string='Partner', ondelete='cascade', help="Select a partner which will use analytic account specified in analytic default (e.g. create new customer invoice or Sales order if we select this partner, it will automatically take this as an analytic account)")
+    account_id = fields.Many2one('account.account', string='Account', ondelete='cascade', help="Select an accounting account which will use analytic account specified in analytic default (e.g. create new customer invoice or Sales order if we select this account, it will automatically take this as an analytic account)")
+    user_id = fields.Many2one('res.users', string='User', ondelete='cascade', help="Select a user which will use analytic account specified in analytic default.")
+    company_id = fields.Many2one('res.company', string='Company', ondelete='cascade', help="Select a company which will use analytic account specified in analytic default (e.g. create new customer invoice or Sales order if we select this company, it will automatically take this as an analytic account)")
+    date_start = fields.Date(string='Start Date', help="Default start date for this Analytic Account.")
+    date_stop = fields.Date(string='End Date', help="Default end date for this Analytic Account.")
+
+    @api.constrains('analytic_id', 'analytic_tag_ids')
+    def _check_account_or_tags(self):
+        if any(not default.analytic_id and not default.analytic_tag_ids for default in self):
+            raise ValidationError(_('An analytic default requires at least an analytic account or an analytic tag.'))
+
+    @api.model
+    def account_get(self, product_id=None, partner_id=None, account_id=None, user_id=None, date=None, company_id=None):
+        domain = []
+        if product_id:
+            domain += ['|', ('product_id', '=', product_id)]
+        domain += [('product_id', '=', False)]
+        if partner_id:
+            domain += ['|', ('partner_id', '=', partner_id)]
+        domain += [('partner_id', '=', False)]
+        if account_id:
+            domain += ['|', ('account_id', '=', account_id)]
+        domain += [('account_id', '=', False)]
+        if company_id:
+            domain += ['|', ('company_id', '=', company_id)]
+        domain += [('company_id', '=', False)]
+        if user_id:
+            domain += ['|', ('user_id', '=', user_id)]
+        domain += [('user_id', '=', False)]
+        if date:
+            domain += ['|', ('date_start', '<=', date), ('date_start', '=', False)]
+            domain += ['|', ('date_stop', '>=', date), ('date_stop', '=', False)]
+        best_index = -1
+        res = self.env['account.analytic.default']
+        for rec in self.search(domain):
+            index = 0
+            if rec.product_id: index += 1
+            if rec.partner_id: index += 1
+            if rec.account_id: index += 1
+            if rec.company_id: index += 1
+            if rec.user_id: index += 1
+            if rec.date_start: index += 1
+            if rec.date_stop: index += 1
+            if index > best_index:
+                res = rec
+                best_index = index
+        return res

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -2749,8 +2749,10 @@ class AccountMoveLine(models.Model):
 
     # ==== Analytic fields ====
     analytic_line_ids = fields.One2many('account.analytic.line', 'move_id', string='Analytic lines')
-    analytic_account_id = fields.Many2one('account.analytic.account', string='Analytic Account', index=True, check_company=True)
-    analytic_tag_ids = fields.Many2many('account.analytic.tag', string='Analytic Tags', check_company=True)
+    analytic_account_id = fields.Many2one('account.analytic.account', string='Analytic Account',
+        index=True, compute="_compute_analytic_account", store=True, readonly=False, check_company=True)
+    analytic_tag_ids = fields.Many2many('account.analytic.tag', string='Analytic Tags',
+        compute="_compute_analytic_account", store=True, readonly=False, check_company=True)
 
     # ==== Onchange / display purpose fields ====
     recompute_tax_line = fields.Boolean(store=False, readonly=True,
@@ -2910,6 +2912,20 @@ class AccountMoveLine(models.Model):
             return self.product_id.uom_id
         return False
 
+    @api.depends('product_id', 'account_id', 'partner_id', 'date_maturity')
+    def _compute_analytic_account(self):
+        for record in self:
+            rec = self.env['account.analytic.default'].account_get(
+                product_id=record.product_id.id,
+                partner_id=record.partner_id.commercial_partner_id.id or record.move_id.partner_id.commercial_partner_id.id,
+                account_id=record.account_id.id,
+                user_id=record.env.uid,
+                date=record.date_maturity,
+                company_id=record.move_id.company_id.id
+            )
+            record.analytic_account_id = (record._origin or record).analytic_account_id or rec.analytic_id
+            record.analytic_tag_ids = (record._origin or record).analytic_tag_ids or rec.analytic_tag_ids
+
     def _get_price_total_and_subtotal(self, price_unit=None, quantity=None, discount=None, currency=None, product=None, partner=None, taxes=None, move_type=None):
         self.ensure_one()
         return self._get_price_total_and_subtotal_model(
