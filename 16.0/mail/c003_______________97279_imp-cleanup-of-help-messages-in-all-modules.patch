PR: https://github.com/odoo/odoo/pull/97279

From: 3363e55cac2a121c29842a0b2463f940bdd866a4
From: Fabien Pinckaers
Date: 2022-08-01 22:26:53

Structural Changes: 2.7
Total Changes: 40

[IMP] cleanup of help messages in all modules

This commit aims at removing unuseful help message to:
1/ reduce translators work, to focus on more useful translations
2/ not sending unuseful information in load_views
3/ reduce help message to useful messages, so that we can mark
   fields having a tooltip in the future UI.
4/ some cleanup of existing messages too

The main use cases:
- REMOVED: help redundant with the field name, providing no extra info
- MOVED TO COMMENT: technical help messages, that should not be in UX

closes odoo/odoo#97279

Signed-off-by: Fabien Pinckaers <fp@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/ir_actions_server.py
+++ b/addons/mail/models/ir_actions_server.py
@@ -43,7 +43,7 @@ class ServerActions(models.Model):
         ('generic', 'Generic User From Record')], default="specific",
         help="Use 'Specific User' to always assign the same user on the next activity. Use 'Generic User From Record' to specify the field name of the user to choose on the record.")
     activity_user_id = fields.Many2one('res.users', string='Responsible')
-    activity_user_field_name = fields.Char('User field name', help="Technical name of the user on the record", default="user_id")
+    activity_user_field_name = fields.Char('User field name', default="user_id")
 
     @api.onchange('activity_date_deadline_range')
     def _onchange_activity_date_deadline_range(self):

--- a/addons/mail/models/ir_model.py
+++ b/addons/mail/models/ir_model.py
@@ -10,16 +10,13 @@ class IrModel(models.Model):
     _order = 'is_mail_thread DESC, name ASC'
 
     is_mail_thread = fields.Boolean(
-        string="Mail Thread", default=False,
-        help="Whether this model supports messages and notifications.",
+        string="Has Mail Thread", default=False,
     )
     is_mail_activity = fields.Boolean(
-        string="Mail Activity", default=False,
-        help="Whether this model supports activities.",
+        string="Has Mail Activity", default=False,
     )
     is_mail_blacklist = fields.Boolean(
-        string="Mail Blacklist", default=False,
-        help="Whether this model supports blacklist.",
+        string="Has Mail Blacklist", default=False,
     )
 
     def unlink(self):

--- a/addons/mail/models/mail_activity.py
+++ b/addons/mail/models/mail_activity.py
@@ -58,7 +58,7 @@ class MailActivity(models.Model):
     res_id = fields.Many2oneReference(string='Related Document ID', index=True, model_field='res_model')
     res_name = fields.Char(
         'Document Name', compute='_compute_res_name', compute_sudo=True, store=True,
-        help="Display name of the related document.", readonly=True)
+        readonly=True)
     # activity
     activity_type_id = fields.Many2one(
         'mail.activity.type', string='Activity Type',
@@ -88,12 +88,11 @@ class MailActivity(models.Model):
     previous_activity_type_id = fields.Many2one('mail.activity.type', string='Previous Activity Type', readonly=True)
     has_recommended_activities = fields.Boolean(
         'Next activities available',
-        compute='_compute_has_recommended_activities',
-        help='Technical field for UX purpose')
+        compute='_compute_has_recommended_activities') # technical field for UX purpose
     mail_template_ids = fields.Many2many(related='activity_type_id.mail_template_ids', readonly=True)
     chaining_type = fields.Selection(related='activity_type_id.chaining_type', readonly=True)
     # access
-    can_write = fields.Boolean(compute='_compute_can_write', help='Technical field to hide buttons if the current user has no access.')
+    can_write = fields.Boolean(compute='_compute_can_write') # used to hide buttons if the current user has no access
 
     _sql_constraints = [
         # Required on a Many2one reference field is not sufficient as actually

--- a/addons/mail/models/mail_activity_type.py
+++ b/addons/mail/models/mail_activity_type.py
@@ -75,7 +75,7 @@ class MailActivityType(models.Model):
     #Fields for display purpose only
     initial_res_model = fields.Selection(selection=_get_model_selection, string='Initial model', compute="_compute_initial_res_model", store=False,
             help='Technical field to keep track of the model at the start of editing to support UX related behaviour')
-    res_model_change = fields.Boolean(string="Model has change", help="Technical field for UX related behaviour", default=False, store=False)
+    res_model_change = fields.Boolean(string="Model has change", default=False, store=False)
 
     @api.onchange('res_model')
     def _onchange_res_model(self):

--- a/addons/mail/models/mail_channel_member.py
+++ b/addons/mail/models/mail_channel_member.py
@@ -23,7 +23,7 @@ class ChannelMember(models.Model):
     custom_channel_name = fields.Char('Custom channel name')
     fetched_message_id = fields.Many2one('mail.message', string='Last Fetched')
     seen_message_id = fields.Many2one('mail.message', string='Last Seen')
-    message_unread_counter = fields.Integer('Unread Messages Counter', compute='_compute_message_unread', compute_sudo=True, help='Number of unread messages')
+    message_unread_counter = fields.Integer('Unread Messages Counter', compute='_compute_message_unread', compute_sudo=True)
     fold_state = fields.Selection([('open', 'Open'), ('folded', 'Folded'), ('closed', 'Closed')], string='Conversation Fold State', default='open')
     is_minimized = fields.Boolean("Conversation is minimized")
     is_pinned = fields.Boolean("Is pinned on the interface", default=True)

--- a/addons/mail/models/mail_message.py
+++ b/addons/mail/models/mail_message.py
@@ -92,20 +92,18 @@ class Message(models.Model):
     preview = fields.Char(
         'Preview', compute='_compute_preview',
         help='The text-only beginning of the body used as email preview.')
+    # Attachments are linked to a document through model / res_id and to the message through this field.
     attachment_ids = fields.Many2many(
         'ir.attachment', 'message_attachment_rel',
         'message_id', 'attachment_id',
-        string='Attachments',
-        help='Attachments are linked to a document through model / res_id and to the message '
-             'through this field.')
+        string='Attachments')
     parent_id = fields.Many2one(
-        'mail.message', 'Parent Message', index='btree_not_null', ondelete='set null',
-        help="Initial thread message.")
+        'mail.message', 'Parent Message', index='btree_not_null', ondelete='set null')
     child_ids = fields.One2many('mail.message', 'parent_id', 'Child Messages')
     # related document
     model = fields.Char('Related Document Model')
     res_id = fields.Many2oneReference('Related Document ID', model_field='model')
-    record_name = fields.Char('Message Record Name', help="Name get of the related document.")
+    record_name = fields.Char('Message Record Name') # name_get() of the related document
     # characteristics
     message_type = fields.Selection([
         ('email', 'Email'),
@@ -138,11 +136,9 @@ class Message(models.Model):
         'res.partner', 'mail_notification', string='Partners with Need Action',
         context={'active_test': False}, depends=['notification_ids'])
     needaction = fields.Boolean(
-        'Need Action', compute='_compute_needaction', search='_search_needaction',
-        help='Need Action')
+        'Need Action', compute='_compute_needaction', search='_search_needaction')
     has_error = fields.Boolean(
-        'Has error', compute='_compute_has_error', search='_search_has_error',
-        help='Has error')
+        'Has error', compute='_compute_has_error', search='_search_has_error')
     # notifications
     notification_ids = fields.One2many(
         'mail.notification', 'mail_message_id', 'Notifications',

--- a/addons/mail/models/mail_template.py
+++ b/addons/mail/models/mail_template.py
@@ -30,7 +30,7 @@ class MailTemplate(models.Model):
 
     # description
     name = fields.Char('Name', translate=True)
-    model_id = fields.Many2one('ir.model', 'Applies to', help="The type of document this template can be used with")
+    model_id = fields.Many2one('ir.model', 'Applies to')
     model = fields.Char('Related Document Model', related='model_id.model', index=True, store=True, readonly=True)
     subject = fields.Char('Subject', translate=True, prefetch=True, help="Subject (placeholders may be used here)")
     email_from = fields.Char('From',
