PR: https://github.com/odoo/odoo/pull/33813

From: e0b16b22e8a1e6cdf55a8656042db5ae356de15d
From: RomainLibert
Date: 2019-07-23 08:21:55

Breaking data model changes score: 1, change matches:
-    manager_id = fields.Many2one('hr.employee', string='Manager', readonly=True)

Total Changes: 178

[IMP] hr_holidays: Improve general UX (back2basics)

Purpose
=======

Having a clean policy in leave access right. If there
are some internal need or bugs, read this before decided
if it is an expected brhavior or not. It is what we want
in a standrard point of vew.

Specification
=============

Access rights Policy
*-------------------

Remove Time Off - Team Leader access right

Leave_manager_id is now requried, by default it
is = parent_id for admin it is admin by default (data
employee_admin)

3 access rights:
* Internal User
* Time Off - All Approver
* Time Off - Administrator

3 fields for "manager"
* parent_id
* leave_manager_id
* manager_id on department

Department
Is just there for information. So never use it in
default filters

Rules Policy
*-----------

Don't forget to take the leave type configuration into
account
* no validation means automatic
* officer validation means you need to be at least
holidays_user to approve
* manager validation means anyone who is at least
leave_manager_id can approve

Internal User
*------------

In double validation mode he:
* can only do the first approval
* can see the everyone's leaves with a anonymisation of
the leave description
* can create a leave (even if leave type is directly approved)
* can refuse its own leaves (till not reported in payslip)
* can reset to draft his own leaves and reconfirm them
* can delete a leave in draft state
* can cancel a leave if the date_start is in the future
* cannot validate its own leaves

If leave type is configured in manager mode, he:
* can approve or refuse the leaves if he is leave_manager_id

If leave type is configured in both mode, he:
* can only do the first approval or refuse for the leave
if he is leave_manager_id

Time Off - All Approver
*----------------------

In double validation mode he:
* can only do the second approval
* can see, write, read all leaves and perform the second
approval.
* Can set a leaves as reported in payslip.
* Cannot validate its own leaves
* cannot configure leave type
* cannot create leaves in batch

Time Off - Administrator
*-----------------------

In double validation mode he:
* can do all the approvals
* can bypass all leaves (approve or refuse).
* can configure Time Off Types
* can create batch leaves
* can validate its own leaves

Menu
*---

* My Time Off (access rights: internal user)
* Dashboard
* Time Off Requests
* Allocation Requests
* My Team (rename into "Everyone", access rights: internal
user. default filters on current year and group by
employee; default view: gantt can switch to list and form)
* Managers
* To Approve (internal user who are leave_manager_id
see and can approve. See only leave he has to approve
(domain))
* Time Off
* Allocation
* All
* Time Off
* Allocation
* Payroll
* Time Off to report.
* Reporting (access right: time off administrator)
* Time Off Analysis
* Report by Department
* Configuration (access right: time off administrator)

Usability
*--------

* In all list of "manager menus", add actions to change
status in mass
* In leave type data:
* move Home Working from data to demo data
* There are 2 Paid time off, get rid of the company on
it and share it on all companies (keep only the one
in data)
* Leave type like this:
* Overtime Compensation/compensatory days (keep only
one of both, to avoid having 2 same leaves in
demo data). Validation by: team leader and hr
officer, no validity date
* Paid Time Off 2019. Validation by Team Leader
and Payroll Officer. Remove validity, remove 2019.
* Unpaid. Can be taken in hours. Approved by Payroll
officer and team leader. No allocation needed.
* New leave request: order of leave type in the m2o:
1. leaves where allocation are fixed by rh and remaining
> 0 and allocated > 0
2. leaves where free allocation. Where reaming is > 0
and allocated >0
3. One already taken
4. All other leaves.
* Remove the sequence widget in leave type
* The employee should get a notification when his leave is
refused "Your "leave_type_name_" planned on "start_date"
has been refused"
* from the dashboard calendar, the reset to draft should lead
to edit (avoid user has to click on edit)
* An employee should be notified when a leave is approved
"Your [leave_type_name] on [start date] has been approved"

Leave Dashboard V2
*-----------------

https://drive.google.com/file/d/1pMCqDlecqM7ngvmhJJdWtkG2_GiXHyIX/view?usp=sharing

Testing
*------

Everything concerning the leave requests has to be tested.
All the access rights have been reviewed and need testing.

Migration
*--------

Don't forget to keep the filters in the calendar view (otherwise RIP perfomances and usability)

TaskID: 1950998

closes odoo/odoo#33813

Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/hr_employee.py
+++ b/addons/hr_holidays/models/hr_employee.py
@@ -10,14 +10,9 @@ from odoo.tools.float_utils import float_round
 class HrEmployeeBase(models.AbstractModel):
     _inherit = "hr.employee.base"
 
-    def _group_hr_user_domain(self):
-        group = self.env.ref('hr_holidays.group_hr_holidays_team_leader', raise_if_not_found=False)
-        return [('groups_id', 'in', group.ids)] if group else []
-
     leave_manager_id = fields.Many2one(
         'res.users', string='Time Off',
-        domain=_group_hr_user_domain,
-        help="User responsible of leaves approval. Should be Team Leader or Department Manager.")
+        help="User responsible of leaves approval.")
     remaining_leaves = fields.Float(
         compute='_compute_remaining_leaves', string='Remaining Paid Time Off',
         help='Total number of paid time off allocated to this employee, change this value to create allocation/time off request. '
@@ -128,7 +123,7 @@ class HrEmployeeBase(models.AbstractModel):
         super(HrEmployeeBase, self)._onchange_parent_id()
         previous_manager = self._origin.parent_id.user_id
         manager = self.parent_id.user_id
-        if manager and manager.has_group('hr.group_hr_user') and (self.leave_manager_id == previous_manager or not self.leave_manager_id):
+        if manager and self.leave_manager_id == previous_manager:
             self.leave_manager_id = manager
 
     def _compute_show_leaves(self):
@@ -148,10 +143,20 @@ class HrEmployeeBase(models.AbstractModel):
         ])
         return [('id', 'in', holidays.mapped('employee_id').ids)]
 
+    @api.model
+    def create(self, values):
+        if 'parent_id' in values:
+            manager = self.env['hr.employee'].browse(values['parent_id']).user_id
+            values['leave_manager_id'] = values.get('leave_manager_id', manager.id)
+        return super(HrEmployeeBase, self).create(values)
+
     def write(self, values):
+        if 'parent_id' in values:
+            manager = self.env['hr.employee'].browse(values['parent_id']).user_id
+            values['leave_manager_id'] = values.get('leave_manager_id', manager.id)
         res = super(HrEmployeeBase, self).write(values)
-        today_date = fields.Datetime.now()
         if 'parent_id' in values or 'department_id' in values:
+            today_date = fields.Datetime.now()
             hr_vals = {}
             if values.get('parent_id') is not None:
                 hr_vals['manager_id'] = values['parent_id']

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -9,7 +9,7 @@ import math
 from datetime import datetime, time
 from pytz import timezone, UTC
 
-from odoo import api, fields, models, tools
+from odoo import api, fields, models, SUPERUSER_ID, tools
 from odoo.addons.resource.models.resource import float_to_time, HOURS_PER_DAY
 from odoo.exceptions import AccessError, UserError, ValidationError
 from odoo.tools import float_compare
@@ -32,9 +32,6 @@ class HolidaysRequest(models.Model):
       - can discuss on its leave requests;
       - can reset only its own leaves;
       - cannot validate any leaves;
-     - a Team Leader
-      - has same rights as a regular employee
-      - but is able to approve employees' leaves who are in his/her team (see Employee.leave_manager_id in hr_holidays/hr.py)
      - an Officer
       - can see all leaves;
       - can validate "HR" single validation leaves from people if
@@ -69,9 +66,10 @@ class HolidaysRequest(models.Model):
         defaults = self._default_get_request_parameters(defaults)
 
         LeaveType = self.env['hr.leave.type'].with_context(employee_id=defaults.get('employee_id'), default_date_from=defaults.get('date_from', fields.Datetime.now()))
-        lt = LeaveType.search([('valid', '=', True)])
+        lt = LeaveType.search([('valid', '=', True)], limit=1)
 
-        defaults['holiday_status_id'] = lt[0].id if len(lt) > 0 else defaults.get('holiday_status_id')
+        defaults['holiday_status_id'] = lt.id if lt else defaults.get('holiday_status_id')
+        defaults['state'] = 'confirm' if lt and lt.validation_type != 'no_validation' else 'draft'
         return defaults
 
     def _default_employee(self):
@@ -105,7 +103,7 @@ class HolidaysRequest(models.Model):
         ('refuse', 'Refused'),
         ('validate1', 'Second Approval'),
         ('validate', 'Approved')
-        ], string='Status', readonly=True, tracking=True, copy=False, default='confirm',
+        ], string='Status', readonly=True, tracking=True, copy=False,
         help="The status is set to 'To Submit', when a time off request is created." +
         "\nThe status is 'To Approve', when time off request is confirmed by user." +
         "\nThe status is 'Refused', when time off request is refused by manager." +
@@ -113,6 +111,7 @@ class HolidaysRequest(models.Model):
     payslip_status = fields.Boolean('Reported in last payslips', help='Green this button when the time off has been taken into account in the payslip.')
     report_note = fields.Text('HR Comments')
     user_id = fields.Many2one('res.users', string='User', related='employee_id.user_id', related_sudo=True, compute_sudo=True, store=True, default=lambda self: self.env.uid, readonly=True)
+    manager_id = fields.Many2one('hr.employee')
     # leave type configuration
     holiday_status_id = fields.Many2one(
         "hr.leave.type", string="Time Off Type", required=True, readonly=True,
@@ -123,7 +122,6 @@ class HolidaysRequest(models.Model):
     employee_id = fields.Many2one(
         'hr.employee', string='Employee', index=True, readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, default=_default_employee, tracking=True)
-    manager_id = fields.Many2one('hr.employee', string='Manager', readonly=True)
     department_id = fields.Many2one(
         'hr.department', string='Department', readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
@@ -263,6 +261,7 @@ class HolidaysRequest(models.Model):
         self.request_unit_half = False
         self.request_unit_hours = False
         self.request_unit_custom = False
+        self.state = 'confirm' if self.validation_type != 'no_validation' else 'draft'
 
     @api.onchange('user_id')
     def _onchange_user_id(self):
@@ -472,8 +471,7 @@ class HolidaysRequest(models.Model):
             if holiday.holiday_type != 'employee' or not holiday.employee_id or holiday.holiday_status_id.allocation_type == 'no':
                 continue
             leave_days = holiday.holiday_status_id.get_days(holiday.employee_id.id)[holiday.holiday_status_id.id]
-            if float_compare(leave_days['remaining_leaves'], 0, precision_digits=2) == -1 or \
-              float_compare(leave_days['virtual_remaining_leaves'], 0, precision_digits=2) == -1:
+            if float_compare(leave_days['remaining_leaves'], 0, precision_digits=2) == -1 or float_compare(leave_days['virtual_remaining_leaves'], 0, precision_digits=2) == -1:
                 raise ValidationError(_('The number of remaining time off is not sufficient for this time off type.\n'
                                         'Please also check the time off waiting for validation.'))
 
@@ -555,32 +553,59 @@ class HolidaysRequest(models.Model):
                         _('You can take %s until %s') % (
                             leave.holiday_status_id.display_name, leave.holiday_status_id.validity_stop))
 
+    def _check_double_validation_rules(self, employee, state):
+        if self.user_has_groups('hr_holidays.group_hr_holidays_manager'):
+            return
+
+        if state == 'validate1':
+            if employee.leave_manager_id != self.env.user:
+                raise AccessError(_('You cannot first approve a leave for %s, because you are not his leave manager' % (employee.name,)))
+        elif state == 'validate' and not self.user_has_groups('hr_holidays.group_hr_holidays_user'):
+            # Is probably handled via ir.rule
+            raise AccessError(_('You don\'t have the rights to apply second approval on a leave request'))
+
     @api.model
     def create(self, values):
         """ Override to avoid automatic logging of creation """
-        employee_id = values.get('employee_id', False)
-        leave_type_id = values.get('holiday_status_id')
-        leave_type = self.env['hr.leave.type'].browse(leave_type_id)
-        if leave_type.validation_type == 'no_validation':
-            values.update({'state': 'confirm'})
+        if not self._context.get('leave_fast_create'):
+            employee_id = values.get('employee_id', False)
+            leave_type_id = values.get('holiday_status_id')
+            leave_type = self.env['hr.leave.type'].browse(leave_type_id)
+            # Handle automatic department_id
+            if not values.get('department_id'):
+                values.update({'department_id': self.env['hr.employee'].browse(employee_id).department_id.id})
+
+            # Handle no_validation
+            if leave_type.validation_type == 'no_validation':
+                values.update({'state': 'confirm'})
+
+            # Handle double validation
+            if leave_type.validation_type == 'both':
+                self._check_double_validation_rules(employee_id, values.get('state', False))
 
-        if not values.get('department_id'):
-            values.update({'department_id': self.env['hr.employee'].browse(employee_id).department_id.id})
         holiday = super(HolidaysRequest, self.with_context(mail_create_nosubscribe=True)).create(values)
         if not self._context.get('leave_fast_create'):
-            holiday.add_follower(employee_id)
-            if holiday.validation_type == 'hr':
-                holiday.message_subscribe(partner_ids=(holiday.employee_id.parent_id.user_id.partner_id | holiday.employee_id.leave_manager_id.partner_id).ids)
+            # FIXME remove these, as they should not be needed
             if employee_id:
                 holiday._sync_employee_details()
             if 'number_of_days' not in values and ('date_from' in values or 'date_to' in values):
                 holiday._onchange_leave_dates()
+
+            # Everything that is done here must be done using sudo because we might
+            # have different create and write rights
+            # eg : holidays_user can create a leave request with validation_type = 'manager' for someone else
+            # but they can only write on it if they are leave_manager_id
+            holiday_sudo = holiday.sudo()
+            holiday_sudo.add_follower(employee_id)
+            if holiday.validation_type == 'manager':
+                holiday_sudo.message_subscribe(partner_ids=holiday.employee_id.leave_manager_id.partner_id.ids)
             if leave_type.validation_type == 'no_validation':
-                holiday.sudo().action_validate()
-                holiday.message_subscribe(partner_ids=[holiday._get_responsible_for_approval().partner_id.id])
-                holiday.sudo().message_post(body=_("The time off has been automatically approved"), subtype="mt_comment") # Message from OdooBot (sudo)
+                # Automatic validation should be done in sudo, because user might not have the rights to do it by himself
+                holiday_sudo.action_validate()
+                holiday_sudo.message_subscribe(partner_ids=[holiday._get_responsible_for_approval().partner_id.id])
+                holiday_sudo.message_post(body=_("The time off has been automatically approved"), subtype="mt_comment") # Message from OdooBot (sudo)
             elif not self._context.get('import_file'):
-                holiday.activity_update()
+                holiday_sudo.activity_update()
         return holiday
 
     def _read_from_database(self, field_names, inherited_field_names=[]):
@@ -609,6 +634,8 @@ class HolidaysRequest(models.Model):
         employee_id = values.get('employee_id', False)
         if not self.env.context.get('leave_fast_create') and values.get('state'):
             self._check_approval_update(values['state'])
+            if any(holiday.validation_type == 'both' for holiday in self):
+                self._check_double_validation_rules(self.env['hr.employee'].browse(values.get('employee_id', self.employee_id.id)), values['state'])
         result = super(HolidaysRequest, self).write(values)
         if not self.env.context.get('leave_fast_create'):
             for holiday in self:
@@ -652,7 +679,7 @@ class HolidaysRequest(models.Model):
                 'calendar_id': leave.employee_id.resource_calendar_id.id,
                 'time_type': leave.holiday_status_id.time_type,
             })
-        return self.env['resource.calendar.leaves'].create(vals_list)
+        return self.env['resource.calendar.leaves'].sudo().create(vals_list)
 
     def _remove_resource_leave(self):
         """ This method will create entry in resource calendar time off object at the time of holidays cancel/removed """
@@ -737,6 +764,14 @@ class HolidaysRequest(models.Model):
 
         current_employee = self.env['hr.employee'].search([('user_id', '=', self.env.uid)], limit=1)
         self.filtered(lambda hol: hol.validation_type == 'both').write({'state': 'validate1', 'first_approver_id': current_employee.id})
+
+
+        # Post a second message, more verbose than the tracking message
+        for holiday in self.filtered(lambda holiday: holiday.employee_id.user_id):
+            holiday.message_post(
+                body=_('Your %s planned on %s has been accepted' % (holiday.holiday_status_id.display_name, holiday.date_from)),
+                partner_ids=holiday.employee_id.user_id.partner_id.ids)
+
         self.filtered(lambda hol: not hol.validation_type == 'both').action_validate()
         if not self.env.context.get('leave_fast_create'):
             self.activity_update()
@@ -795,6 +830,13 @@ class HolidaysRequest(models.Model):
                 holiday.meeting_id.unlink()
             # If a category that created several holidays, cancel all related
             holiday.linked_request_ids.action_refuse()
+
+            # Post a second message, more verbose than the tracking message
+            if holiday.employee_id.user_id:
+                holiday.message_post(
+                    body=_('Your %s planned on %s has been refused' % (holiday.holiday_status_id.display_name, holiday.date_from)),
+                    partner_ids=holiday.employee_id.user_id.partner_id.ids)
+
         self._remove_resource_leave()
         self.activity_update()
         return True
@@ -826,39 +868,23 @@ class HolidaysRequest(models.Model):
                         raise UserError(_('Only a Leave Manager can approve its own requests.'))
 
                     if (state == 'validate1' and val_type == 'both') or (state == 'validate' and val_type == 'manager') and holiday.holiday_type == 'employee':
-                        manager = holiday.employee_id.parent_id or holiday.employee_id.department_id.manager_id
-                        team_leader = holiday.employee_id.leave_manager_id
-                        error = False
-
-                        if not manager and not team_leader:
-                            error = not is_officer
-                        else:
-                            error = (not (manager and manager == current_employee) and not (team_leader and team_leader == self.env.user))
-
-                        if error:
+                        if not is_officer and self.env.user != holiday.employee_id.leave_manager_id:
                             raise UserError(_('You must be either %s\'s manager or Leave manager to approve this leave') % (holiday.employee_id.name))
 
-                    if state == 'validate' and val_type == 'both':
-                        raise UserError(_('Only an Leave Manager can apply the second approval on leave requests.'))
-
     # ------------------------------------------------------------
     # Activity methods
     # ------------------------------------------------------------
 
     def _get_responsible_for_approval(self):
         self.ensure_one()
-        responsible = self.env['res.users']
+        responsible = self.env['res.users'].browse(SUPERUSER_ID)
 
-        if self.validation_type == 'hr' or (self.validation_type == 'both' and self.state == 'validate1'):
+        if self.validation_type == 'manager' or (self.validation_type == 'both' and self.state == 'confirm'):
+            if self.employee_id.leave_manager_id:
+                responsible = self.employee_id.leave_manager_id
+        elif self.validation_type == 'hr' or (self.validation_type == 'both' and self.state == 'validate1'):
             if self.holiday_status_id.responsible_id:
                 responsible = self.holiday_status_id.responsible_id
-        elif self.state == 'confirm' or (self.state == 'validate' and self.validation_type == 'no_validation'):
-            if self.employee_id.leave_manager_id and self.employee_id.leave_manager_id.has_group('hr_holidays.group_hr_holidays_team_leader'):
-                responsible = self.employee_id.leave_manager_id
-            elif self.employee_id.parent_id.user_id and self.employee_id.parent_id.user_id.has_group('hr_holidays.group_hr_holidays_team_leader'):
-                responsible = self.employee_id.parent_id.user_id
-            elif self.department_id.manager_id.user_id:
-                responsible = self.department_id.manager_id.user_id
 
         return responsible
 
@@ -912,7 +938,7 @@ class HolidaysRequest(models.Model):
             ref_action = self._notify_get_action_link('controller', controller='/leave/refuse')
             hr_actions += [{'url': ref_action, 'title': _('Refuse')}]
 
-        holiday_user_group_id = self.env.ref('hr_holidays.group_hr_holidays_team_leader').id
+        holiday_user_group_id = self.env.ref('hr_holidays.group_hr_holidays_user').id
         new_group = (
             'group_hr_holidays_user', lambda pdata: pdata['type'] == 'user' and holiday_user_group_id in pdata['groups'], {
                 'actions': hr_actions,

--- a/addons/hr_holidays/models/hr_leave_type.py
+++ b/addons/hr_holidays/models/hr_leave_type.py
@@ -20,7 +20,12 @@ _logger = logging.getLogger(__name__)
 class HolidaysType(models.Model):
     _name = "hr.leave.type"
     _description = "Time Off Type"
-    _order = "sequence, id"
+
+    @api.model
+    def _model_sorting_key(self, leave_type):
+        remaining = leave_type.virtual_remaining_leaves > 0
+        taken = leave_type.leaves_taken > 0
+        return leave_type.allocation_type == 'fixed' and remaining, leave_type.allocation_type == 'fixed_allocation' and remaining, taken
 
     name = fields.Char('Time Off Type', required=True, translate=True)
     code = fields.Char('Code')
@@ -63,9 +68,9 @@ class HolidaysType(models.Model):
     group_days_leave = fields.Float(
         compute='_compute_group_days_leave', string='Group Time Off')
     company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company)
-    responsible_id = fields.Many2one('res.users', 'Responsible', domain=lambda self: [('groups_id', 'in', self.env.ref('hr_holidays.group_hr_holidays_user').id)],
-                                     help="This user will be responsible for approving this type of times off"
-                                     "This is only used when validation is 'hr' or 'both'",)
+    responsible_id = fields.Many2one('res.users', 'Responsible',
+        help="This user will be responsible for approving this type of times off"
+        "This is only used when validation is 'hr' or 'both'",)
     validation_type = fields.Selection([
         ('no_validation', 'No Validation'),
         ('hr', 'Time Off Officer'),
@@ -198,16 +203,14 @@ class HolidaysType(models.Model):
 
     @api.model
     def get_days_all_request(self):
-        employee_id = self._get_contextual_employee_id()
-
-        leaves_type = self.search([])
-        leaves = leaves_type.get_days(employee_id)
-        leave_id_name = dict(zip(leaves_type.ids, leaves_type.mapped('name')))
-        leave_id_allocation_type = dict(zip(leaves_type.ids, leaves_type.mapped('allocation_type')))
-        result = [(leave_id_name[leave_id], {key: round(value, 2) for (key, value) in leave.items()}, leave_id_allocation_type[leave_id]) for leave_id, leave in leaves.items() if leave['virtual_remaining_leaves'] or leave['max_leaves']]
-
-        sort_key = lambda l: (l[2] == 'fixed', l[2] == 'fixed_allocation', l[1]['virtual_remaining_leaves'])
-        return sorted(result, key=sort_key, reverse=True)
+        leave_types = sorted(self.search([]).filtered(lambda x: x.virtual_remaining_leaves or x.max_leaves), key=self._model_sorting_key, reverse=True)
+        return [(lt.name, {
+                    'remaining_leaves': lt.remaining_leaves,
+                    'virtual_remaining_leaves': lt.virtual_remaining_leaves,
+                    'max_leaves': lt.max_leaves,
+                    'leaves_taken': lt.leaves_taken,
+                }, lt.allocation_type)
+            for lt in leave_types]
 
     def _get_contextual_employee_id(self):
         if 'employee_id' in self._context:
@@ -298,8 +301,8 @@ class HolidaysType(models.Model):
         leave_ids = super(HolidaysType, self)._search(args, offset=offset, limit=limit, order=order, count=count, access_rights_uid=access_rights_uid)
         if not count and not order and employee_id:
             leaves = self.browse(leave_ids)
-            sort_key = lambda l: (l.allocation_type in ['fixed', 'fixed_allocation'], l.virtual_remaining_leaves)
-            return leaves.sorted(key=sort_key, reverse=True).ids
+
+            return leaves.sorted(key=self._model_sorting_key, reverse=True).ids
         return leave_ids
 
     def action_see_days_allocated(self):
