PR: https://github.com/odoo/odoo/pull/33489

From: f17655dd773096f2d37ece392dfe980ae4795819
From: Kevin Baptiste
Date: 2019-06-28 06:59:32

Structural Changes: 3
Total Changes: 103

[IMP] hr_contract: Replace some contract states by kanban status

Purpose
=======

Having some usability check to be sure to make the pay
for everyone, and don't loose contracts.

We would like to remove incoming and to renew columns in
hr.contract and replace them by a kanban state.  In employee, we would
like to add warning on the kanban to warn the hr responsible there
is no contract or a contract is about to expire

Specification
=============

hr.contract kanban:

- add a kanabn state
- it becomes red automatically when the contract is in running and  expire in 7 days
- add aquick search in filter to filter on expered soon
- the kanban state can be changed manaually (in case of there is several rh)
- sort by contract end date set first (more close of today first)

Employee kanban

- add an red icon if there is no contract in Runnig status OR there is a
kanban state red in their contract (whatever the status).
- add a quick seaach on employee with warning

- State pending + green = incoming
- State confirmed + red = about to expire / to renew

closes odoo/odoo#33489

Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_contract/models/hr_contract.py
+++ b/addons/hr_contract/models/hr_contract.py
@@ -6,8 +6,8 @@ from dateutil.relativedelta import relativedelta
 
 from odoo import api, fields, models, _
 from odoo.exceptions import ValidationError
-from odoo.osv import expression
 
+from odoo.osv import expression
 
 class Contract(models.Model):
     _name = 'hr.contract'
@@ -33,14 +33,23 @@ class Contract(models.Model):
     notes = fields.Text('Notes')
     state = fields.Selection([
         ('draft', 'New'),
-        ('incoming', 'Incoming'),
         ('open', 'Running'),
-        ('pending', 'To Renew'),
         ('close', 'Expired'),
         ('cancel', 'Cancelled')
     ], string='Status', group_expand='_expand_states',
        tracking=True, help='Status of the contract', default='draft')
     company_id = fields.Many2one('res.company', default=lambda self: self.env.company)
+    """
+        kanban_state:
+            * draft + green = "Incoming" state (will be set as Open once the contract has started)
+            * open + red = "Pending" state (will be set as Closed once the contract has ended)
+            * red = Shows a warning on the employees kanban view
+    """
+    kanban_state = fields.Selection([
+        ('normal', 'Grey'), 
+        ('done', 'Green'),
+        ('blocked', 'Red')
+    ], string='Kanban State', default='normal', tracking=True)
     currency_id = fields.Many2one(string="Currency", related='company_id.currency_id', readonly=True)
     permit_no = fields.Char('Work Permit No', related="employee_id.permit_no", readonly=False)
     visa_no = fields.Char('Visa No', related="employee_id.visa_no", readonly=False)
@@ -57,6 +66,7 @@ class Contract(models.Model):
     def _expand_states(self, states, domain, order):
         return [key for key, val in type(self).state.selection]
 
+
     @api.onchange('employee_id')
     def _onchange_employee_id(self):
         if self.employee_id:
@@ -64,14 +74,18 @@ class Contract(models.Model):
             self.department_id = self.employee_id.department_id
             self.resource_calendar_id = self.employee_id.resource_calendar_id
 
-    @api.constrains('employee_id', 'state', 'date_start', 'date_end')
+    @api.constrains('employee_id', 'state', 'kanban_state', 'date_start', 'date_end')
     def _check_current_contract(self):
-        """ Two contracts in state [incoming | pending | open] cannot overlap """
-        for contract in self.filtered(lambda c: c.state not in ['draft', 'cancel', 'close']):
+        """ Two contracts in state [incoming | open | close] cannot overlap """
+        for contract in self.filtered(lambda c: c.state not in ['draft', 'cancel'] or c.state == 'draft' and c.kanban_state == 'done'):
             domain = [
                 ('id', '!=', contract.id),
                 ('employee_id', '=', contract.employee_id.id),
-                ('state', 'in', ['incoming', 'pending', 'open']),
+                '|',
+                    ('state', 'in', ['open', 'close']),
+                    '&',
+                        ('state', '=', 'draft'),
+                        ('kanban_state', '=', 'done') # replaces incoming
             ]
 
             if not contract.date_end:
@@ -102,11 +116,11 @@ class Contract(models.Model):
             ('visa_expire', '<=', fields.Date.to_string(date.today() + relativedelta(days=60))),
             ('visa_expire', '>=', fields.Date.to_string(date.today() + relativedelta(days=1))),
         ]).write({
-            'state': 'pending'
+            'kanban_state': 'blocked'
         })
 
         self.search([
-            ('state', 'in', ('open', 'pending')),
+            ('state', '=', 'open'),
             '|',
             ('date_end', '<=', fields.Date.to_string(date.today() + relativedelta(days=1))),
             ('visa_expire', '<=', fields.Date.to_string(date.today() + relativedelta(days=1))),
@@ -114,38 +128,45 @@ class Contract(models.Model):
             'state': 'close'
         })
 
-        self.search([('state', '=', 'incoming'), ('date_start', '<=', fields.Date.to_string(date.today())),]).write({
+        self.search([('state', '=', 'draft'), ('kanban_state', '=', 'done'), ('date_start', '<=', fields.Date.to_string(date.today())),]).write({
             'state': 'open'
         })
         return True
 
-    @api.model
-    def create(self, vals_list):
-        contracts = super().create(vals_list)
-        open_contracts = contracts.filtered(lambda c: c.state in ['open', 'pending'])
-        # sync contract -> employee
-        for contract in open_contracts:
-            contract.employee_id.contract_id = contract
-        # sync contract calendar -> calendar employee
-        for contract in open_contracts.filtered(lambda c: c.resource_calendar_id):
-            contract.employee_id.resource_calendar_id = contract.resource_calendar_id
-        return contracts
+    def _assign_open_contract(self):
+        for contract in self:
+            contract.employee_id.sudo().write({'contract_id': contract.id})
 
     @api.multi
     def write(self, vals):
         res = super(Contract, self).write(vals)
         if vals.get('state') == 'open':
-            for contract in self:
-                contract.employee_id.sudo().write({'contract_id': contract.id})
+            self._assign_open_contract()
+
         calendar = vals.get('resource_calendar_id')
-        if calendar and self.state in ['open', 'pending']:
+        if calendar and (self.state == 'open' or (self.state == 'draft' and self.kanban_state == 'done')):
             self.mapped('employee_id').write({'resource_calendar_id': calendar})
+
+        if 'state' in vals and 'kanban_state' not in vals:
+            self.write({'kanban_state': 'normal'})
+
         return res
 
+    @api.model
+    def create(self, vals):
+        contracts = super(Contract, self).create(vals)
+        if vals.get('state') == 'open':
+            contracts._assign_open_contract()
+        open_contracts = contracts.filtered(lambda c: c.state == 'open' or c.state == 'draft' and c.kanban_state == 'done')
+        # sync contract calendar -> calendar employee
+        for contract in open_contracts.filtered(lambda c: c.resource_calendar_id):
+            contract.employee_id.resource_calendar_id = contract.resource_calendar_id
+        return contracts
+
     @api.multi
     def _track_subtype(self, init_values):
         self.ensure_one()
-        if 'state' in init_values and self.state == 'pending':
+        if 'state' in init_values and self.state == 'open' and 'kanban_state' in init_values and self.kanban_state == 'blocked':
             return self.env.ref('hr_contract.mt_contract_pending')
         elif 'state' in init_values and self.state == 'close':
             return self.env.ref('hr_contract.mt_contract_close')

--- a/addons/hr_contract/models/hr_employee.py
+++ b/addons/hr_contract/models/hr_employee.py
@@ -2,6 +2,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models
+from odoo.osv import expression
 
 
 class Employee(models.Model):
@@ -14,6 +15,12 @@ class Employee(models.Model):
         groups="hr.group_hr_user", help='Current contract of the employee')
     calendar_mismatch = fields.Boolean(related='contract_id.calendar_mismatch')
     contracts_count = fields.Integer(compute='_compute_contracts_count', string='Contract Count')
+    contract_warning = fields.Boolean(string='Contract Warning', store=True, compute='_compute_contract_warning', groups="hr.group_hr_user")
+
+    @api.depends('contract_id', 'contract_id.state', 'contract_id.kanban_state')
+    def _compute_contract_warning(self):
+        for employee in self:
+            employee.contract_warning = not employee.contract_id or employee.contract_id.kanban_state == 'blocked' or employee.contract_id.state != 'open'
 
     def _compute_contracts_count(self):
         # read_group as sudo, since contract count is displayed on form view
@@ -22,20 +29,27 @@ class Employee(models.Model):
         for employee in self:
             employee.contracts_count = result.get(employee.id, 0)
 
-    def _get_contracts(self, date_from, date_to, states=['open', 'pending']):
+    def _get_contracts(self, date_from, date_to, states=['open'], kanban_state=False):
         """
         Returns the contracts of the employee between date_from and date_to
         """
-        return self.env['hr.contract'].search([
-            '&', '&', '&',
-            ('employee_id', 'in', self.ids),
-            ('state', 'in', states),
-            ('date_start', '<=', date_to),
-            '|', ('date_end', '=', False), ('date_end', '>=', date_from)
-        ])
+        state_domain = [('state', 'in', states)]
+        if kanban_state:
+            state_domain = expression.AND([state_domain, [('kanban_state', 'in', kanban_state)]])
+
+        return self.env['hr.contract'].search(
+            expression.AND([[('employee_id', 'in', self.ids)],
+            state_domain,
+            [('date_start', '<=', date_to),
+                '|',
+                    ('date_end', '=', False),
+                    ('date_end', '>=', date_from)]]))
+
+    def _get_incoming_contracts(self, date_from, date_to):
+        return self._get_contracts(date_from, date_to, states=['draft'], kanban_state=['done'])
 
     @api.model
-    def _get_all_contracts(self, date_from, date_to, states=['open', 'pending']):
+    def _get_all_contracts(self, date_from, date_to, states=['open']):
         """
         Returns the contracts of all employees between date_from and date_to
         """
