PR: https://github.com/odoo/odoo/pull/

From: 651caf0f5913b1f8c0758664b55644d7d35f00a6
From: Yannick Tivisse
Date: 2016-07-13 14:46:29

Structural Changes: 9
Total Changes: 63

[MIG] base_gengo: Migrated to new API

================================= pseudo patch: =================================

--- a/addons/base_gengo/models/ir_translation.py
+++ b/addons/base_gengo/models/ir_translation.py
@@ -1,9 +1,8 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from openerp import api
-from openerp.osv import fields, osv
-from openerp.exceptions import UserError
+from odoo import api, fields, models
+from odoo.exceptions import UserError
 
 LANG_CODE_MAPPING = {
     'ar_SY': ('ar', 'Arabic'),
@@ -40,21 +39,22 @@ LANG_CODE_MAPPING = {
 }
 
 
-class ir_translation(osv.Model):
-    _name = "ir.translation"
+class IrTranslation(models.Model):
     _inherit = "ir.translation"
 
-    _columns = {
-        'gengo_comment': fields.text("Comments & Activity Linked to Gengo"),
-        'order_id': fields.char('Gengo Order ID', size=32),
-        "gengo_translation": fields.selection([('machine', 'Translation By Machine'),
-                                             ('standard', 'Standard'),
-                                             ('pro', 'Pro'),
-                                             ('ultra', 'Ultra')], "Gengo Translation Service Level", help='You can select here the service level you want for an automatic translation using Gengo.'),
-    }
+    gengo_comment = fields.Text("Comments & Activity Linked to Gengo")
+    order_id = fields.Char('Gengo Order ID')
+    gengo_translation = fields.Selection([
+        ('machine', 'Translation By Machine'),
+        ('standard', 'Standard'),
+        ('pro', 'Pro'),
+        ('ultra', 'Ultra')
+        ], "Gengo Translation Service Level",
+        help='You can select here the service level you want for an automatic translation using Gengo.')
 
-    def _get_all_supported_languages(self, cr, uid, context=None):
-        flag, gengo = self.pool.get('base.gengo.translations').gengo_authentication(cr, uid, context=context)
+    @api.model
+    def _get_all_supported_languages(self):
+        flag, gengo = self.env['base.gengo.translations'].gengo_authentication()
         if not flag:
             raise UserError(gengo)
         supported_langs = {}
@@ -66,12 +66,12 @@ class ir_translation(osv.Model):
                 supported_langs[g_lang['lc_tgt']] += [g_lang['tier']]
         return supported_langs
 
-    def _get_gengo_corresponding_language(cr, lang):
+    def _get_gengo_corresponding_language(self, lang):
         return lang in LANG_CODE_MAPPING and LANG_CODE_MAPPING[lang][0] or lang
 
-    def _get_source_query(self, cr, uid, name, types, lang, source, res_id):
-        query, params = super(ir_translation, self)._get_source_query(cr, uid, name, types, lang, source, res_id)
-
+    @api.model
+    def _get_source_query(self, name, types, lang, source, res_id):
+        query, params = super(IrTranslation, self)._get_source_query(name, types, lang, source, res_id)
         query += """
                     ORDER BY
                         CASE
@@ -87,7 +87,7 @@ class ir_translation(osv.Model):
 
     @api.model
     def _get_terms_query(self, field, records):
-        query, params = super(ir_translation, self)._get_terms_query(field, records)
+        query, params = super(IrTranslation, self)._get_terms_query(field, records)
         # order translations from worst to best
         query += """
                     ORDER BY

--- a/addons/base_gengo/models/res_company.py
+++ b/addons/base_gengo/models/res_company.py
@@ -1,20 +1,17 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from openerp.osv import fields, osv
+from odoo import fields, models
 
 
-class res_company(osv.Model):
-    _name = "res.company"
+class res_company(models.Model):
     _inherit = "res.company"
-    _columns = {
-           "gengo_private_key": fields.text("Gengo Private Key", copy=False, groups="base.group_system"),
-           "gengo_public_key": fields.text("Gengo Public Key", copy=False, groups="base.group_user"),
-           "gengo_comment": fields.text("Comments", help="This comment will be automatically be enclosed in each an every request sent to Gengo", groups="base.group_user"),
-           "gengo_auto_approve": fields.boolean("Auto Approve Translation ?", help="Jobs are Automatically Approved by Gengo.", groups="base.group_user"),
-           "gengo_sandbox": fields.boolean("Sandbox Mode", help="Check this box if you're using the sandbox mode of Gengo, mainly used for testing purpose."),
-    }
 
-    _defaults = {
-        "gengo_auto_approve": True,
-    }
+    gengo_private_key = fields.Text(string="Gengo Private Key", copy=False, groups="base.group_system")
+    gengo_public_key = fields.Text(string="Gengo Public Key", copy=False, groups="base.group_user")
+    gengo_comment = fields.Text(string="Comments", groups="base.group_user",
+      help="This comment will be automatically be enclosed in each an every request sent to Gengo")
+    gengo_auto_approve = fields.Boolean(string="Auto Approve Translation ?", groups="base.group_user", default=True,
+      help="Jobs are Automatically Approved by Gengo.")
+    gengo_sandbox = fields.Boolean(string="Sandbox Mode",
+      help="Check this box if you're using the sandbox mode of Gengo, mainly used for testing purpose.")
