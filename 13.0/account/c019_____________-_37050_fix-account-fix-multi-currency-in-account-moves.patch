PR: https://github.com/odoo/odoo/pull/37050

From: 6839671c815af641806429189c7053e979b194aa
From: Laurent Smet
Date: 2019-09-18 11:34:51

Structural Changes: 4
Total Changes: 16

[FIX] account: Fix multi-currency in account.moves

Suppose an invoice in EUR with a company using USD.
- Try to create an invoice with some lines, remove the value of the journal_id field.
=> Traceback because line.company_id.currency_id is an empty recordset on which you can't
call the 'round' method.
- In the list views of the invoices, the price must be shown in the company currency.
- When registering the payment if you change the currency in USD the conversion is wrong.

closes odoo/odoo#37050

Signed-off-by: oco-odoo <oco-odoo@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -132,13 +132,13 @@ class AccountMove(models.Model):
     amount_residual = fields.Monetary(string='Amount Due', store=True,
         compute='_compute_amount')
     amount_untaxed_signed = fields.Monetary(string='Untaxed Amount Signed', store=True, readonly=True,
-        compute='_compute_amount')
+        compute='_compute_amount', currency_field='company_currency_id')
     amount_tax_signed = fields.Monetary(string='Tax Signed', store=True, readonly=True,
-        compute='_compute_amount')
+        compute='_compute_amount', currency_field='company_currency_id')
     amount_total_signed = fields.Monetary(string='Total Signed', store=True, readonly=True,
-        compute='_compute_amount')
+        compute='_compute_amount', currency_field='company_currency_id')
     amount_residual_signed = fields.Monetary(string='Amount Due Signed', store=True,
-        compute='_compute_amount')
+        compute='_compute_amount', currency_field='company_currency_id')
     amount_by_group = fields.Binary(string="Tax amount by group",
         compute='_compute_invoice_taxes_by_group',
         help="Technical field used by web_studio to allow an easy edition of the invoice report by drag/drop of the field. Return type: [(name, amount, base, formated amount, formated base)]")
@@ -2698,7 +2698,7 @@ class AccountMoveLine(models.Model):
         for line in self:
             line.balance = line.debit - line.credit
 
-    @api.depends('debit', 'credit', 'amount_currency', 'currency_id', 'matched_debit_ids', 'matched_credit_ids', 'matched_debit_ids.amount', 'matched_credit_ids.amount', 'move_id.state')
+    @api.depends('debit', 'credit', 'amount_currency', 'currency_id', 'matched_debit_ids', 'matched_credit_ids', 'matched_debit_ids.amount', 'matched_credit_ids.amount', 'move_id.state', 'move_id.company_id')
     def _amount_residual(self):
         """ Computes the residual amount of a move line from a reconcilable account in the company currency and the line's currency.
             This amount will be 0 for fully reconciled lines or lines from a non-reconcilable account, the original line amount
@@ -2749,7 +2749,7 @@ class AccountMoveLine(models.Model):
                     reconciled = True
             line.reconciled = reconciled
 
-            line.amount_residual = line.move_id.company_id.currency_id.round(amount * sign)
+            line.amount_residual = line.move_id.company_id.currency_id.round(amount * sign) if line.move_id.company_id else amount * sign
             line.amount_residual_currency = line.currency_id and line.currency_id.round(amount_residual_currency * sign) or 0.0
 
     @api.depends('tax_repartition_line_id.invoice_tax_id', 'tax_repartition_line_id.refund_tax_id')

--- a/addons/account/models/account_payment.py
+++ b/addons/account/models/account_payment.py
@@ -320,10 +320,8 @@ class account_payment(models.Model):
             move_currency = self.env['res.currency'].browse(res['currency_id'])
             if move_currency == currency and move_currency != company.currency_id:
                 total += res['residual_currency']
-            elif move_currency == currency == company.currency_id:
-                total += res['amount_residual']
             else:
-                total += move_currency._convert(res['amount_residual'], currency, company, date)
+                total += company.currency_id._convert(res['amount_residual'], currency, company, date)
         return total
 
     @api.multi
