PR: https://github.com/odoo/odoo/pull/75862

From: c8ec3e954badc7d689213f77080d7c78675f799b
From: william-andre
Date: 2021-09-07 15:50:01

Structural Changes: 5
Total Changes: 36

[IMP] {website_,}event_sale: remove event_ok from product

This is now a type of product.

task-2605931

Part-of: odoo/odoo#75862

================================= pseudo patch: =================================

--- a/addons/event_sale/models/event_ticket.py
+++ b/addons/event_sale/models/event_ticket.py
@@ -18,7 +18,7 @@ class EventTemplateTicket(models.Model):
     # product
     product_id = fields.Many2one(
         'product.product', string='Product', required=True,
-        domain=[("event_ok", "=", True)], default=_default_product_id)
+        domain=[("detailed_type", "=", "event")], default=_default_product_id)
     price = fields.Float(
         string='Price', compute='_compute_price',
         digits='Product Price', readonly=False, store=True)

--- a/addons/event_sale/models/product.py
+++ b/addons/event_sale/models/product.py
@@ -6,29 +6,22 @@ from odoo import api, fields, models
 class ProductTemplate(models.Model):
     _inherit = 'product.template'
 
-    event_ok = fields.Boolean(string='Is an Event Ticket', help="If checked this product automatically "
-      "creates an event registration at the sales order confirmation.")
+    detailed_type = fields.Selection(selection_add=[
+        ('event', 'Event Ticket'),
+    ], ondelete={'event': 'set default'})
 
-    @api.onchange('event_ok')
-    def _onchange_event_ok(self):
-        if self.event_ok:
-            self.type = 'service'
+    @api.onchange('detailed_type')
+    def _onchange_type_event(self):
+        if self.detailed_type == 'event':
             self.invoice_policy = 'order'
 
-    def _compute_show_service_fields(self):
-        super()._compute_show_service_fields()
-        for record in self:
-            record.show_service_fields |= record.type == 'event'
+    def _detailed_type_mapping(self):
+        type_mapping = super()._detailed_type_mapping()
+        type_mapping['event'] = 'service'
+        return type_mapping
 
 
 class Product(models.Model):
     _inherit = 'product.product'
 
     event_ticket_ids = fields.One2many('event.event.ticket', 'product_id', string='Event Tickets')
-
-    @api.onchange('event_ok')
-    def _onchange_event_ok(self):
-        """ Redirection, inheritance mechanism hides the method on the model """
-        if self.event_ok:
-            self.type = 'service'
-            self.invoice_policy = 'order'

--- a/addons/event_sale/models/sale_order.py
+++ b/addons/event_sale/models/sale_order.py
@@ -66,7 +66,12 @@ class SaleOrderLine(models.Model):
     event_ticket_id = fields.Many2one(
         'event.event.ticket', string='Event Ticket',
         help="Choose an event ticket and it will automatically create a registration for this event ticket.")
-    event_ok = fields.Boolean(related='product_id.event_ok', readonly=True)
+    event_ok = fields.Boolean(compute='_compute_event_ok')
+
+    @api.depends('product_id.detailed_type')
+    def _compute_event_ok(self):
+        for record in self:
+            record.event_ok = record.product_id.detailed_type == 'event'
 
     @api.depends('state', 'event_id')
     def _compute_product_uom_readonly(self):
