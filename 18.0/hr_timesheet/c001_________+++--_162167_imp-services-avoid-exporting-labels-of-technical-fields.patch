PR: https://github.com/odoo/odoo/pull/162167

From: e82567f9d5842bd95fe01ba3b9f54a65437e313f
From: Vincent Larcin
Date: 2024-05-08 16:51:37

Structural Changes: 23
Total Changes: 46

[IMP] services: avoid exporting labels of technical fields

Task-3631801

closes odoo/odoo#162167

Related: odoo/enterprise#60904
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_timesheet/models/hr_employee.py
+++ b/addons/hr_timesheet/models/hr_employee.py
@@ -9,7 +9,7 @@ from odoo.exceptions import UserError
 class HrEmployee(models.Model):
     _inherit = 'hr.employee'
 
-    has_timesheet = fields.Boolean(compute='_compute_has_timesheet', groups="hr.group_hr_user,base.group_system")
+    has_timesheet = fields.Boolean(compute='_compute_has_timesheet', groups="hr.group_hr_user,base.group_system", export_string_translation=False)
 
     def _compute_has_timesheet(self):
         self.env.cr.execute("""

--- a/addons/hr_timesheet/models/hr_timesheet.py
+++ b/addons/hr_timesheet/models/hr_timesheet.py
@@ -61,12 +61,12 @@ class AccountAnalyticLine(models.Model):
     user_id = fields.Many2one(compute='_compute_user_id', store=True, readonly=False)
     employee_id = fields.Many2one('hr.employee', "Employee", domain=_domain_employee_id, context={'active_test': False},
         index=True, help="Define an 'hourly cost' on the employee to track the cost of their time.")
-    job_title = fields.Char(related='employee_id.job_title')
+    job_title = fields.Char(related='employee_id.job_title', export_string_translation=False)
     department_id = fields.Many2one('hr.department', "Department", compute='_compute_department_id', store=True, compute_sudo=True)
     manager_id = fields.Many2one('hr.employee', "Manager", related='employee_id.parent_id', store=True)
-    encoding_uom_id = fields.Many2one('uom.uom', compute='_compute_encoding_uom_id')
+    encoding_uom_id = fields.Many2one('uom.uom', compute='_compute_encoding_uom_id', export_string_translation=False)
     partner_id = fields.Many2one(compute='_compute_partner_id', store=True, readonly=False)
-    readonly_timesheet = fields.Boolean(string="Readonly Timesheet", compute="_compute_readonly_timesheet", compute_sudo=True)
+    readonly_timesheet = fields.Boolean(compute="_compute_readonly_timesheet", compute_sudo=True, export_string_translation=False)
     milestone_id = fields.Many2one('project.milestone', related='task_id.milestone_id')
 
     @api.depends('project_id', 'task_id')

--- a/addons/hr_timesheet/models/project_project.py
+++ b/addons/hr_timesheet/models/project_project.py
@@ -20,15 +20,16 @@ class Project(models.Model):
     )
     analytic_account_active = fields.Boolean("Active Account", related="analytic_account_id.active", export_string_translation=False)
 
-    timesheet_ids = fields.One2many('account.analytic.line', 'project_id', 'Associated Timesheets')
-    timesheet_encode_uom_id = fields.Many2one('uom.uom', compute='_compute_timesheet_encode_uom_id')
+    timesheet_ids = fields.One2many('account.analytic.line', 'project_id', 'Associated Timesheets', export_string_translation=False)
+    timesheet_encode_uom_id = fields.Many2one('uom.uom', compute='_compute_timesheet_encode_uom_id', export_string_translation=False)
     total_timesheet_time = fields.Integer(
         compute='_compute_total_timesheet_time', groups='hr_timesheet.group_hr_timesheet_user',
-        help="Total number of time (in the proper UoM) recorded in the project, rounded to the unit.", compute_sudo=True)
-    encode_uom_in_days = fields.Boolean(compute='_compute_encode_uom_in_days')
-    is_internal_project = fields.Boolean(compute='_compute_is_internal_project', search='_search_is_internal_project')
+        string="Total number of time (in the proper UoM) recorded in the project, rounded to the unit.",
+        compute_sudo=True, export_string_translation=False)
+    encode_uom_in_days = fields.Boolean(compute='_compute_encode_uom_in_days', export_string_translation=False)
+    is_internal_project = fields.Boolean(compute='_compute_is_internal_project', search='_search_is_internal_project', export_string_translation=False)
     remaining_hours = fields.Float(compute='_compute_remaining_hours', string='Time Remaining', compute_sudo=True)
-    is_project_overtime = fields.Boolean('Project in Overtime', compute='_compute_remaining_hours', search='_search_is_project_overtime', compute_sudo=True)
+    is_project_overtime = fields.Boolean('Project in Overtime', compute='_compute_remaining_hours', search='_search_is_project_overtime', compute_sudo=True, export_string_translation=False)
     allocated_hours = fields.Float(string='Allocated Time')
     effective_hours = fields.Float(string='Time Spent', compute='_compute_remaining_hours', compute_sudo=True)
 

--- a/addons/hr_timesheet/models/project_task.py
+++ b/addons/hr_timesheet/models/project_task.py
@@ -29,21 +29,20 @@ class Task(models.Model):
     _inherit = "project.task"
 
     project_id = fields.Many2one(domain="['|', ('company_id', '=', False), ('company_id', '=?',  company_id), ('is_internal_project', '=', False)]")
-    analytic_account_active = fields.Boolean("Active Analytic Account", compute='_compute_analytic_account_active', compute_sudo=True, recursive=True)
+    analytic_account_active = fields.Boolean("Active Analytic Account", compute='_compute_analytic_account_active', compute_sudo=True, recursive=True, export_string_translation=False)
     allow_timesheets = fields.Boolean(
         "Allow timesheets",
         compute='_compute_allow_timesheets', search='_search_allow_timesheets',
-        compute_sudo=True, readonly=True,
-        help="Timesheets can be logged on this task.")
+        compute_sudo=True, readonly=True, export_string_translation=False)
     remaining_hours = fields.Float("Time Remaining", compute='_compute_remaining_hours', store=True, readonly=True, help="Number of allocated hours minus the number of hours spent.")
-    remaining_hours_percentage = fields.Float(compute='_compute_remaining_hours_percentage', search='_search_remaining_hours_percentage')
+    remaining_hours_percentage = fields.Float(compute='_compute_remaining_hours_percentage', search='_search_remaining_hours_percentage', export_string_translation=False)
     effective_hours = fields.Float("Time Spent", compute='_compute_effective_hours', compute_sudo=True, store=True)
     total_hours_spent = fields.Float("Total Time Spent", compute='_compute_total_hours_spent', store=True, help="Time spent on this task and its sub-tasks (and their own sub-tasks).")
-    progress = fields.Float("Progress", compute='_compute_progress_hours', store=True, aggregator="avg")
-    overtime = fields.Float(compute='_compute_progress_hours', store=True)
+    progress = fields.Float("Progress", compute='_compute_progress_hours', store=True, aggregator="avg", export_string_translation=False)
+    overtime = fields.Float(compute='_compute_progress_hours', store=True, export_string_translation=False)
     subtask_effective_hours = fields.Float("Time Spent on Sub-tasks", compute='_compute_subtask_effective_hours', recursive=True, store=True, help="Time spent on the sub-tasks (and their own sub-tasks) of this task.")
-    timesheet_ids = fields.One2many('account.analytic.line', 'task_id', 'Timesheets')
-    encode_uom_in_days = fields.Boolean(compute='_compute_encode_uom_in_days', default=lambda self: self._uom_in_days())
+    timesheet_ids = fields.One2many('account.analytic.line', 'task_id', 'Timesheets', export_string_translation=False)
+    encode_uom_in_days = fields.Boolean(compute='_compute_encode_uom_in_days', default=lambda self: self._uom_in_days(), export_string_translation=False)
     display_name = fields.Char(help="""Use these keywords in the title to set new tasks:\n
         30h Allocate 30 hours to the task
         #tags Set tags on the task

--- a/addons/hr_timesheet/models/project_update.py
+++ b/addons/hr_timesheet/models/project_update.py
@@ -6,11 +6,11 @@ from odoo import fields, models, api
 class ProjectUpdate(models.Model):
     _inherit = "project.update"
 
-    display_timesheet_stats = fields.Boolean(compute="_compute_display_timesheet_stats")
+    display_timesheet_stats = fields.Boolean(compute="_compute_display_timesheet_stats", export_string_translation=False)
     allocated_time = fields.Integer("Allocated Time", readonly=True)
     timesheet_time = fields.Integer("Timesheet Time", readonly=True)
-    timesheet_percentage = fields.Integer(compute="_compute_timesheet_percentage")
-    uom_id = fields.Many2one("uom.uom", "Unit Of Measure", readonly=True)
+    timesheet_percentage = fields.Integer(compute="_compute_timesheet_percentage", export_string_translation=False)
+    uom_id = fields.Many2one("uom.uom", "Unit Of Measure", readonly=True, export_string_translation=False)
 
     def _compute_timesheet_percentage(self):
         for update in self:

--- a/addons/hr_timesheet/models/res_config_settings.py
+++ b/addons/hr_timesheet/models/res_config_settings.py
@@ -16,7 +16,7 @@ class ResConfigSettings(models.TransientModel):
         help="This will set the unit of measure used in projects and tasks.\n"
              "If you use the timesheet linked to projects, don't "
              "forget to setup the right unit of measure in your employees.")
-    is_encode_uom_days = fields.Boolean(compute='_compute_is_encode_uom_days')
+    is_encode_uom_days = fields.Boolean(compute='_compute_is_encode_uom_days', export_string_translation=False)
     timesheet_encode_method = fields.Selection([
         ('hours', 'Hours / Minutes'),
         ('days', 'Days / Half-Days'),

--- a/addons/hr_timesheet/models/uom_uom.py
+++ b/addons/hr_timesheet/models/uom_uom.py
@@ -16,4 +16,4 @@ class Uom(models.Model):
         ]
 
     # widget used in the webclient when this unit is the one used to encode timesheets.
-    timesheet_widget = fields.Char("Widget")
+    timesheet_widget = fields.Char("Widget", export_string_translation=False)
