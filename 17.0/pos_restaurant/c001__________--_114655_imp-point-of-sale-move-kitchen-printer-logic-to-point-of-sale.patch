PR: https://github.com/odoo/odoo/pull/114655

From: 73aae73f1ba4ad9471d0cded3d8f02cac8cc3669
From: David Monnom (moda)
Date: 2023-05-03 10:39:17

Breaking data model changes score: 14, change matches:
-    printer_ids = fields.Many2many('restaurant.printer', 'pos_config_printer_rel', 'config_id', 'printer_id', string='Order Printers')
-    is_order_printer = fields.Boolean('Order Printer')
-    uuid = fields.Char(string='Uuid', readonly=True, copy=False)
-    mp_skip = fields.Boolean('Skip line when sending ticket to kitchen printers.')
-    multiprint_resume = fields.Char(string='Multiprint Resume', help="Last printed state of the order")
-    name = fields.Char('Printer Name', required=True, default='Printer', help='An internal identification of the printer')
-    printer_type = fields.Selection(string='Printer Type', default='iot',
-    proxy_ip = fields.Char('Proxy IP Address', help="The IP Address or hostname of the Printer's hardware proxy")
-    product_categories_ids = fields.Many2many('pos.category', 'printer_category_rel', 'printer_id', 'category_id', string='Printed Product Categories')
-    pos_is_order_printer = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False)
-    pos_printer_ids = fields.Many2many(related='pos_config_id.printer_ids', readonly=False)

Total Changes: 53

[IMP] point_of_sale,*: move kitchen printer logic to point_of_sale

*:pos_epson_printer,pos_epson_printer_restaurant,point_of_sale,
pos_restaurant,pos_hr_restaurant

Before the printers only worked in the pos_restaurant and not in the
point_of_sale. Indeed, the methods managing the printers were located
in the pos_restaurant.

Now all these methods have been moved.
For the community part here are the affected modules:
* The methods in pos_epson_printer_restaurant have been moved to
pos_epson_printer.
* The methods in pos_restaurant have been moved to point_of_sale.
* The module pos_epson_printer_restaurant has been removed as it only
handled printers.

Some of these methods have been adapted/renamed to better suit
the needs.

This branch the first part of the following task: 3224508

closes odoo/odoo#114655

Related: odoo/upgrade#4414
Related: odoo/enterprise#37901
Signed-off-by: Joseph Caburnay (jcb) <jcb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_restaurant/models/pos_config.py
+++ b/addons/pos_restaurant/models/pos_config.py
@@ -9,20 +9,12 @@ class PosConfig(models.Model):
 
     iface_splitbill = fields.Boolean(string='Bill Splitting', help='Enables Bill Splitting in the Point of Sale.')
     iface_printbill = fields.Boolean(string='Bill Printing', help='Allows to print the Bill before payment.')
-    iface_orderline_notes = fields.Boolean(string='Kitchen Notes', help='Allow custom kitchen notes on Orderlines.', default=True)
+    iface_orderline_notes = fields.Boolean(string='Internal Notes', help='Allow custom Internal notes on Orderlines.', default=True)
     floor_ids = fields.Many2many('restaurant.floor', string='Restaurant Floors', help='The restaurant floors served by this point of sale.')
-    printer_ids = fields.Many2many('restaurant.printer', 'pos_config_printer_rel', 'config_id', 'printer_id', string='Order Printers')
     is_table_management = fields.Boolean('Floors & Tables')
-    is_order_printer = fields.Boolean('Order Printer')
     set_tip_after_payment = fields.Boolean('Set Tip After Payment', help="Adjust the amount authorized by payment terminals to add a tip after the customers left or at the end of the day.")
     module_pos_restaurant = fields.Boolean(default=True)
 
-    def _force_http(self):
-        enforce_https = self.env['ir.config_parameter'].sudo().get_param('point_of_sale.enforce_https')
-        if not enforce_https and self.printer_ids.filtered(lambda pt: pt.printer_type == 'epson_epos'):
-            return True
-        return super(PosConfig, self)._force_http()
-
     def get_tables_order_count(self):
         """         """
         self.ensure_one()
@@ -46,8 +38,6 @@ class PosConfig(models.Model):
     def write(self, vals):
         if ('is_table_management' in vals and vals['is_table_management'] == False):
             vals['floor_ids'] = [(5, 0, 0)]
-        if ('is_order_printer' in vals and vals['is_order_printer'] == False):
-            vals['printer_ids'] = [(5, 0, 0)]
         return super(PosConfig, self).write(vals)
 
     @api.model

--- a/addons/pos_restaurant/models/pos_order.py
+++ b/addons/pos_restaurant/models/pos_order.py
@@ -12,9 +12,7 @@ from odoo import api, fields, models
 class PosOrderLine(models.Model):
     _inherit = 'pos.order.line'
 
-    note = fields.Char('Kitchen Note added by the waiter.')
-    uuid = fields.Char(string='Uuid', readonly=True, copy=False)
-    mp_skip = fields.Boolean('Skip line when sending ticket to kitchen printers.')
+    note = fields.Char('Internal Note added by the waiter.')
 
 
 class PosOrder(models.Model):
@@ -22,14 +20,11 @@ class PosOrder(models.Model):
 
     table_id = fields.Many2one('restaurant.table', string='Table', help='The table where this order was served', index='btree_not_null', readonly=True)
     customer_count = fields.Integer(string='Guests', help='The amount of customers that have been served by this order.', readonly=True)
-    multiprint_resume = fields.Char(string='Multiprint Resume', help="Last printed state of the order")
 
     def _get_fields_for_order_line(self):
         fields = super(PosOrder, self)._get_fields_for_order_line()
         fields.extend([
             'note',
-            'uuid',
-            'mp_skip',
             'full_product_name',
             'customer_note',
             'price_extra',
@@ -42,7 +37,6 @@ class PosOrder(models.Model):
         fields.extend([
             'table_id',
             'customer_count',
-            'multiprint_resume',
         ])
         return fields
 
@@ -126,7 +120,6 @@ class PosOrder(models.Model):
         order_fields = super(PosOrder, self)._order_fields(ui_order)
         order_fields['table_id'] = ui_order.get('table_id', False)
         order_fields['customer_count'] = ui_order.get('customer_count', 0)
-        order_fields['multiprint_resume'] = ui_order.get('multiprint_resume', False)
         return order_fields
 
     def _export_for_ui(self, order):

--- a/addons/pos_restaurant/models/pos_restaurant.py
+++ b/addons/pos_restaurant/models/pos_restaurant.py
@@ -118,15 +118,3 @@ class RestaurantTable(models.Model):
             error_msg = _("You cannot remove a table that is used in a PoS session, close the session(s) first.")
             if confs:
                 raise UserError(error_msg)
-
-
-class RestaurantPrinter(models.Model):
-
-    _name = 'restaurant.printer'
-    _description = 'Restaurant Printer'
-
-    name = fields.Char('Printer Name', required=True, default='Printer', help='An internal identification of the printer')
-    printer_type = fields.Selection(string='Printer Type', default='iot',
-        selection=[('iot', ' Use a printer connected to the IoT Box')])
-    proxy_ip = fields.Char('Proxy IP Address', help="The IP Address or hostname of the Printer's hardware proxy")
-    product_categories_ids = fields.Many2many('pos.category', 'printer_category_rel', 'printer_id', 'category_id', string='Printed Product Categories')

--- a/addons/pos_restaurant/models/pos_session.py
+++ b/addons/pos_restaurant/models/pos_session.py
@@ -10,10 +10,8 @@ class PosSession(models.Model):
 
     def _pos_ui_models_to_load(self):
         result = super()._pos_ui_models_to_load()
-        if self.config_id.module_pos_restaurant:
-            result.append('restaurant.printer')
-            if self.config_id.is_table_management:
-                result.append('restaurant.floor')
+        if self.config_id.module_pos_restaurant and self.config_id.is_table_management:
+            result.append('restaurant.floor')
         return result
 
     def _loader_params_restaurant_floor(self):
@@ -52,15 +50,5 @@ class PosSession(models.Model):
 
         return floors
 
-    def _loader_params_restaurant_printer(self):
-        return {
-            'search_params': {
-                'domain': [('id', 'in', self.config_id.printer_ids.ids)],
-                'fields': ['name', 'proxy_ip', 'product_categories_ids', 'printer_type'],
-            },
-        }
-    def _get_pos_ui_restaurant_printer(self, params):
-        return self.env['restaurant.printer'].search_read(**params['search_params'])
-
     def get_pos_ui_restaurant_floor(self):
         return self._get_pos_ui_restaurant_floor(self._loader_params_restaurant_floor())

--- a/addons/pos_restaurant/models/res_config_settings.py
+++ b/addons/pos_restaurant/models/res_config_settings.py
@@ -10,9 +10,7 @@ class ResConfigSettings(models.TransientModel):
     pos_iface_orderline_notes = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False)
     pos_iface_printbill = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False)
     pos_iface_splitbill = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False)
-    pos_is_order_printer = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False)
     pos_is_table_management = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False)
-    pos_printer_ids = fields.Many2many(related='pos_config_id.printer_ids', readonly=False)
     pos_set_tip_after_payment = fields.Boolean(compute='_compute_pos_set_tip_after_payment', store=True, readonly=False)
 
     @api.depends('pos_module_pos_restaurant', 'pos_config_id')
@@ -23,7 +21,6 @@ class ResConfigSettings(models.TransientModel):
                     'pos_iface_orderline_notes': False,
                     'pos_iface_printbill': False,
                     'pos_iface_splitbill': False,
-                    'pos_is_order_printer': False,
                     'pos_is_table_management': False,
                 })
             else:
@@ -31,7 +28,6 @@ class ResConfigSettings(models.TransientModel):
                     'pos_iface_orderline_notes': res_config.pos_config_id.iface_orderline_notes,
                     'pos_iface_printbill': res_config.pos_config_id.iface_printbill,
                     'pos_iface_splitbill': res_config.pos_config_id.iface_splitbill,
-                    'pos_is_order_printer': res_config.pos_config_id.is_order_printer,
                     'pos_is_table_management': res_config.pos_config_id.is_table_management,
                 })
 
