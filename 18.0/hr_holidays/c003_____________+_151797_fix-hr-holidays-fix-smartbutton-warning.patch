PR: https://github.com/odoo/odoo/pull/151797

From: 7369cc291f5f30b8b312d6c1f9dada3fe83e06b3
From: Dossogne Bertrand
Date: 2024-01-31 08:33:53

Structural Changes: 2
Total Changes: 33

[FIX] hr_holidays: Fix smartbutton + warning

Fix 1:

Before this commit, the smart button on the employee would
display `x/y` Time Off, indicating remaining leaves over max leaves.
However, while `y` was correctly taking into account current
allocations only, `x` didn't, resulting in incoherent values.

Reproduce the issue:
- For an employee, create an expired allocation and validate it of x days;
- Create an additional allocation which is still valid today of y days
and validate it as well;
- Go on the employee form view;
- Time Off smart button display (x+y)/y instead of y/y

Fix 2:

Before this commit, there was no way to track error inducing leaves
that were created through a bug or that were already created in the
database prior to the changes brought in version 17.0.
This commit adds a new property in the leave data indicating the id
and the start date of the leave that is causing the discrepancies
in the database and displays a warning on the dashboard if
there are some error inducing leaves.

closes odoo/odoo#151797

X-original-commit: 28bac93f09d0fb4ecf463a1b5fe7d72c6feb9b45
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>
Signed-off-by: Bertrand Dossogne (bedo) <bedo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/hr_employee.py
+++ b/addons/hr_holidays/models/hr_employee.py
@@ -40,7 +40,7 @@ class HrEmployeeBase(models.AbstractModel):
     allocations_count = fields.Integer('Total number of allocations', compute="_compute_allocation_count")
     show_leaves = fields.Boolean('Able to see Remaining Time Off', compute='_compute_show_leaves')
     is_absent = fields.Boolean('Absent Today', compute='_compute_leave_status', search='_search_absent_employee')
-    allocation_display = fields.Char(compute='_compute_allocation_count')
+    allocation_display = fields.Char(compute='_compute_allocation_remaining_display')
     allocation_remaining_display = fields.Char(compute='_compute_allocation_remaining_display')
     hr_icon_display = fields.Selection(selection_add=[('presence_holiday_absent', 'On leave'),
                                                       ('presence_holiday_present', 'Present but on leave')])
@@ -97,24 +97,28 @@ class HrEmployeeBase(models.AbstractModel):
         for employee in self:
             count, days = rg_results.get(employee.id, (0, 0))
             employee.allocation_count = float_round(days, precision_digits=2)
-            employee.allocation_display = "%g" % employee.allocation_count
             employee.allocations_count = count
 
     def _compute_allocation_remaining_display(self):
+        current_date = date.today()
         allocations = self.env['hr.leave.allocation'].search([('employee_id', 'in', self.ids)])
         leaves_taken = self._get_consumed_leaves(allocations.holiday_status_id)[0]
         for employee in self:
             employee_remaining_leaves = 0
+            employee_max_leaves = 0
             for leave_type in leaves_taken[employee]:
                 if leave_type.requires_allocation == 'no':
                     continue
                 for allocation in leaves_taken[employee][leave_type]:
-                    if allocation:
+                    if allocation and allocation.date_from <= current_date\
+                            and (not allocation.date_to or allocation.date_to >= current_date):
                         virtual_remaining_leaves = leaves_taken[employee][leave_type][allocation]['virtual_remaining_leaves']
                         employee_remaining_leaves += virtual_remaining_leaves\
                             if leave_type.request_unit in ['day', 'half_day']\
                             else virtual_remaining_leaves / (employee.resource_calendar_id.hours_per_day or HOURS_PER_DAY)
+                        employee_max_leaves += allocation.number_of_days
             employee.allocation_remaining_display = "%g" % float_round(employee_remaining_leaves, precision_digits=2)
+            employee.allocation_display = "%g" % float_round(employee_max_leaves, precision_digits=2)
 
     def _compute_presence_icon(self):
         super()._compute_presence_icon()
@@ -536,6 +540,7 @@ class HrEmployee(models.Model):
                             to_recheck_leaves_per_leave_type[employee][leave_type]['excess_days'][leave.date_to.date()] = {
                                 'amount': leave_duration,
                                 'is_virtual': leave.state != 'validate',
+                                'leave_id': leave.id,
                             }
                     else:
                         if leave_unit == 'hour':

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -997,6 +997,22 @@ Attempting to double-book your time off won't magically make your vacation 2x be
     # Business methods
     ####################################################
 
+    @api.model
+    def action_open_records(self, leave_ids):
+        if len(leave_ids) == 1:
+            return {
+                'type': 'ir.actions.act_window',
+                'view_mode': 'form',
+                'res_id': leave_ids[0],
+                'res_model': 'hr.leave',
+            }
+        return {
+            'type': 'ir.actions.act_window',
+            'view_mode': [[False, 'tree'], [False, 'form']],
+            'domain': [('id', 'in', leave_ids.ids)],
+            'res_model': 'hr.leave',
+        }
+
     def _prepare_resource_leave_vals(self):
         """Hook method for others to inject data
         """

--- a/addons/hr_holidays/models/hr_leave_type.py
+++ b/addons/hr_holidays/models/hr_leave_type.py
@@ -406,6 +406,7 @@ class HolidaysType(models.Model):
                         'closest_allocation_expire': False,
                         'holds_changes': False,
                         'total_virtual_excess': 0,
+                        'virtual_excess_data': {},
                         'total_real_excess': 0,
                         'exceeding_duration': extra_data[employee][leave_type]['exceeding_duration'],
                         'request_unit': leave_type.request_unit,
@@ -416,8 +417,11 @@ class HolidaysType(models.Model):
                     },
                     leave_type.requires_allocation,
                     leave_type.id)
-                for excess_days in extra_data[employee][leave_type]['excess_days'].values():
+                for excess_date, excess_days in extra_data[employee][leave_type]['excess_days'].items():
                     amount = excess_days['amount']
+                    lt_info[1]['virtual_excess_data'].update({
+                        excess_date.strftime('%Y-%m-%d'): excess_days
+                    }),
                     lt_info[1]['virtual_leaves_taken'] += amount
                     lt_info[1]['virtual_remaining_leaves'] -= amount
                     lt_info[1]['total_virtual_excess'] += amount
