PR: https://github.com/odoo/odoo/pull/73596

From: c1693581d79483a18f10d46c0e789df4924c10a6
From: Nicolas (vin)
Date: 2021-07-12 18:10:36

Structural Changes: 10
Total Changes: 224

[IMP] account: payment method improvements

To improve the payment method system, proceed to a few changes
such as changing the view a bit, making sure payment acquirers are not
linked to a journal by default and that only the manual payment method
type can be used multiple times in a single journal.

Task id #2573145

closes odoo/odoo#73596

X-original-commit: 9122b367baea10e59b66e45bf7c458a6f1e82efb
Related: odoo/enterprise#19623
Signed-off-by: Xavier Doll√© (xdo) <xdo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_journal.py
+++ b/addons/account/models/account_journal.py
@@ -117,10 +117,10 @@ class AccountJournal(models.Model):
         inverse_name='journal_id',
         copy=False,
         check_company=True,
-        help="Manual :Get paid by any method outside of Odoo."
-        "Payment Acquirers : Each payment acquirer has its own Payment Method. Request a transaction on/to a card thanks to a payment token saved by the partner when buying or subscribing online."
-        "Batch Deposit: Collect several customer checks at once generating and submitting a batch deposit to your bank. Module account_batch_payment is necessary."
-        "SEPA Direct Debit : Get paid in the SEPA zone thanks to a mandate your partner will have granted to you. Module account_sepa is necessary"
+        help="Manual: Get paid by any method outside of Odoo.\n"
+        "Payment Acquirers: Each payment acquirer has its own Payment Method. Request a transaction on/to a card thanks to a payment token saved by the partner when buying or subscribing online.\n"
+        "Batch Deposit: Collect several customer checks at once generating and submitting a batch deposit to your bank. Module account_batch_payment is necessary.\n"
+        "SEPA Direct Debit: Get paid in the SEPA zone thanks to a mandate your partner will have granted to you. Module account_sepa is necessary.\n"
     )
     outbound_payment_method_line_ids = fields.One2many(
         comodel_name='account.payment.method.line',
@@ -132,9 +132,9 @@ class AccountJournal(models.Model):
         inverse_name='journal_id',
         copy=False,
         check_company=True,
-        help="Manual : Pay by any method outside of Odoo."
-        "Check: Pay bills by check and print it from Odoo."
-        "SEPA Credit Transfer : Pay in the SEPA zone by submitting a SEPA Credit Transfer file to your bank. Module account_sepa is necessary"
+        help="Manual: Pay by any method outside of Odoo.\n"
+        "Check: Pay bills by check and print it from Odoo.\n"
+        "SEPA Credit Transfer: Pay in the SEPA zone by submitting a SEPA Credit Transfer file to your bank. Module account_sepa is necessary.\n"
     )
     profit_account_id = fields.Many2one(
         comodel_name='account.account', check_company=True,
@@ -210,7 +210,6 @@ class AccountJournal(models.Model):
         pay_methods = self.env['account.payment.method'].search([('code', 'in', list(method_information.keys()))])
         pay_method_by_code = {x.code + x.payment_type: x for x in pay_methods}
         unique_pay_methods = [k for k, v in method_information.items() if v['mode'] == 'unique']
-        installed_acquirers = self.env['payment.acquirer'].search([])
 
         pay_methods_by_company = {}
         pay_methods_by_journal = {}
@@ -246,19 +245,19 @@ class AccountJournal(models.Model):
                 for journal in self.filtered_domain(method_domain):
                     protected_pay_method_ids = pay_methods_by_company.get(journal.company_id._origin.id, set()) \
                                                - pay_methods_by_journal.get(journal._origin.id, set())
-                    available_providers = installed_acquirers.filtered(
-                        lambda a: a.company_id == journal.company_id
-                    ).mapped('provider')
 
                     if payment_type == 'inbound':
                         lines = journal.inbound_payment_method_line_ids
                     else:
                         lines = journal.outbound_payment_method_line_ids
 
-                    available = payment_method.code in available_providers
                     already_used = payment_method in lines.payment_method_id
                     is_protected = payment_method.id in protected_pay_method_ids
-                    if vals['mode'] == 'unique' and (already_used or is_protected or not available):
+                    if vals['mode'] == 'unique' and (already_used or is_protected):
+                        continue
+
+                    # Only the manual payment method can be used multiple time on a single journal.
+                    if payment_method.code != "manual" and already_used:
                         continue
 
                     pay_method_ids_commands_x_journal[journal].append(Command.link(payment_method.id))
@@ -403,6 +402,9 @@ class AccountJournal(models.Model):
         method_info = self.env['account.payment.method']._get_payment_method_information()
         unique_codes = tuple(code for code, info in method_info.items() if info.get('mode') == 'unique')
 
+        if not unique_codes:
+            return
+
         self.flush(['inbound_payment_method_line_ids', 'outbound_payment_method_line_ids', 'company_id'])
         self.env['account.payment.method.line'].flush(['payment_method_id', 'journal_id'])
         self.env['account.payment.method'].flush(['code'])
@@ -886,3 +888,18 @@ class AccountJournal(models.Model):
         last_statement_domain = (domain or []) + [('journal_id', '=', self.id)]
         last_st_line = self.env['account.bank.statement.line'].search(last_statement_domain, order='date desc, id desc', limit=1)
         return last_st_line.statement_id
+
+    def _get_available_payment_method_lines(self, payment_type):
+        """
+        This getter is here to allow filtering the payment method lines if needed in other modules.
+        It does NOT serve as a general getter to get the lines.
+
+        For example, it'll be extended to filter out lines from inactive payment acquirers in the payment module.
+        :param payment_type: either inbound or outbound, used to know which lines to return
+        :return: Either the inbound or outbound payment method lines
+        """
+        self.ensure_one()
+        if payment_type == 'inbound':
+            return self.inbound_payment_method_line_ids
+        else:
+            return self.outbound_payment_method_line_ids

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -1495,7 +1495,7 @@ class AccountMove(models.Model):
                 'payment_id': counterpart_line.id,
                 'partial_id': partial.id,
                 'account_payment_id': counterpart_line.payment_id.id,
-                'payment_method_name': counterpart_line.payment_id.payment_method_id.name if counterpart_line.journal_id.type == 'bank' else None,
+                'payment_method_name': counterpart_line.payment_id.payment_method_line_id.name,
                 'move_id': counterpart_line.move_id.id,
                 'ref': reconciliation_ref,
             })

--- a/addons/account/models/account_payment.py
+++ b/addons/account/models/account_payment.py
@@ -48,21 +48,26 @@ class AccountPayment(models.Model):
         "They cross referenced trough this field")
 
     # == Payment methods fields ==
-    payment_method_id = fields.Many2one('account.payment.method', string='Payment Method',
+    payment_method_line_id = fields.Many2one('account.payment.method.line', string='Payment Method',
         readonly=False, store=True,
-        compute='_compute_payment_method_id',
-        domain="[('id', 'in', available_payment_method_ids)]",
-        help="Manual : Pay or Get paid by any method outside of Odoo."
-        "Payment Acquirers : Each payment acquirer has its own Payment Method. Request a transaction on/to a card thanks to a payment token saved by the partner when buying or subscribing online."
-        "Check: Pay bills by check and print it from Odoo."
-        "Batch Deposit: Collect several customer checks at once generating and submitting a batch deposit to your bank. Module account_batch_payment is necessary."
-        "SEPA Credit Transfer : Pay in the SEPA zone by submitting a SEPA Credit Transfer file to your bank. Module account_sepa is necessary"
-        "SEPA Direct Debit : Get paid in the SEPA zone thanks to a mandate your partner will have granted to you. Module account_sepa is necessary")
-    available_payment_method_ids = fields.Many2many('account.payment.method',
-        compute='_compute_payment_method_fields')
-    hide_payment_method = fields.Boolean(
-        compute='_compute_payment_method_fields',
+        compute='_compute_payment_method_line_id',
+        domain="[('id', 'in', available_payment_method_line_ids)]",
+        help="Manual: Pay or Get paid by any method outside of Odoo.\n"
+        "Payment Acquirers: Each payment acquirer has its own Payment Method. Request a transaction on/to a card thanks to a payment token saved by the partner when buying or subscribing online.\n"
+        "Check: Pay bills by check and print it from Odoo.\n"
+        "Batch Deposit: Collect several customer checks at once generating and submitting a batch deposit to your bank. Module account_batch_payment is necessary.\n"
+        "SEPA Credit Transfer: Pay in the SEPA zone by submitting a SEPA Credit Transfer file to your bank. Module account_sepa is necessary.\n"
+        "SEPA Direct Debit: Get paid in the SEPA zone thanks to a mandate your partner will have granted to you. Module account_sepa is necessary.\n")
+    available_payment_method_line_ids = fields.Many2many('account.payment.method.line',
+        compute='_compute_payment_method_line_fields')
+    hide_payment_method_line = fields.Boolean(
+        compute='_compute_payment_method_line_fields',
         help="Technical field used to hide the payment method if the selected journal has only one available which is 'manual'")
+    payment_method_id = fields.Many2one(
+        related='payment_method_line_id.payment_method_id',
+        string="Method",
+        store=True
+    )
 
     # == Synchronized fields with the account.move.lines ==
     amount = fields.Monetary(currency_field='currency_id')
@@ -129,7 +134,7 @@ class AccountPayment(models.Model):
 
     # == Display purpose fields ==
     payment_method_code = fields.Char(
-        related='payment_method_id.code',
+        related='payment_method_line_id.code',
         help="Technical field used to adapt the interface to the payment type selected.")
     show_partner_bank_account = fields.Boolean(
         compute='_compute_show_require_partner_bank',
@@ -169,18 +174,10 @@ class AccountPayment(models.Model):
         counterpart_lines = self.env['account.move.line']
         writeoff_lines = self.env['account.move.line']
 
-        if self.payment_type == 'inbound':
-            payment_method_account_ids = self.journal_id.inbound_payment_method_line_ids
-        else:
-            payment_method_account_ids = self.journal_id.outbound_payment_method_line_ids
-
-        payment_method_account_id = payment_method_account_ids\
-            .filtered(lambda line: line.code == self.payment_method_id.code).payment_account_id
-
         for line in self.move_id.line_ids:
             if line.account_id in (
                     self.journal_id.default_account_id,
-                    payment_method_account_id,
+                    self.payment_method_line_id.payment_account_id,
                     self.journal_id.company_id.account_journal_payment_debit_account_id,
                     self.journal_id.company_id.account_journal_payment_credit_account_id,
             ):
@@ -206,7 +203,7 @@ class AccountPayment(models.Model):
         if not self.outstanding_account_id:
             raise UserError(_(
                 "You can't create a new payment without an outstanding payments/receipts account set either on the company or the %s payment method in the %s journal.",
-                self.payment_method_id.name, self.journal_id.display_name))
+                self.payment_method_line_id.name, self.journal_id.display_name))
 
         # Compute amounts.
         write_off_amount_currency = write_off_line_vals.get('amount', 0.0)
@@ -381,40 +378,42 @@ class AccountPayment(models.Model):
             payment.is_internal_transfer = payment.partner_id == payment.journal_id.company_id.partner_id
 
     @api.depends('payment_type', 'journal_id')
-    def _compute_payment_method_id(self):
-        ''' Compute the 'payment_method_id' field.
+    def _compute_payment_method_line_id(self):
+        ''' Compute the 'payment_method_line_id' field.
         This field is not computed in '_compute_payment_method_fields' because it's a stored editable one.
         '''
         for pay in self:
             if pay.payment_type == 'inbound':
-                available_payment_methods = pay.journal_id.inbound_payment_method_line_ids.mapped('payment_method_id')
+                available_payment_methods = pay.journal_id.inbound_payment_method_line_ids
             else:
-                available_payment_methods = pay.journal_id.outbound_payment_method_line_ids.mapped('payment_method_id')
+                available_payment_methods = pay.journal_id.outbound_payment_method_line_ids
 
             # Select the first available one by default.
-            if pay.payment_method_id in available_payment_methods:
-                pay.payment_method_id = pay.payment_method_id
+            if pay.payment_method_line_id in available_payment_methods:
+                pay.payment_method_line_id = pay.payment_method_line_id
             elif available_payment_methods:
-                pay.payment_method_id = available_payment_methods[0]._origin
+                pay.payment_method_line_id = available_payment_methods[0]._origin
             else:
-                pay.payment_method_id = False
+                pay.payment_method_line_id = False
 
     @api.depends('payment_type',
                  'journal_id.inbound_payment_method_line_ids',
                  'journal_id.outbound_payment_method_line_ids')
-    def _compute_payment_method_fields(self):
+    def _compute_payment_method_line_fields(self):
         for pay in self:
-            if pay.payment_type == 'inbound':
-                pay.available_payment_method_ids = pay.journal_id.inbound_payment_method_line_ids.mapped('payment_method_id')
-            else:
-                pay.available_payment_method_ids = pay.journal_id.outbound_payment_method_line_ids.mapped('payment_method_id')
+            pay.available_payment_method_line_ids = pay.journal_id._get_available_payment_method_lines(pay.payment_type)
             to_exclude = self._get_payment_method_codes_to_exclude()
             if to_exclude:
-                pay.available_payment_method_ids = pay.available_payment_method_ids.filtered(lambda x: x.code not in to_exclude)
-            pay.hide_payment_method = len(pay.available_payment_method_ids) == 1 and pay.available_payment_method_ids.code == 'manual'
+                pay.available_payment_method_line_ids = pay.available_payment_method_line_ids.filtered(lambda x: x.code not in to_exclude)
+            if pay.payment_method_line_id.id not in pay.available_payment_method_line_ids.ids:
+                # In some cases, we could be linked to a payment method line that has been unlinked from the journal.
+                # In such cases, we want to show it on the payment.
+                pay.hide_payment_method_line = False
+            else:
+                pay.hide_payment_method_line = len(pay.available_payment_method_line_ids) == 1 and pay.available_payment_method_line_ids.code == 'manual'
 
     def _get_payment_method_codes_to_exclude(self):
-        # can be overriden to exclude payment methods based on the payment charachteristics
+        # can be overriden to exclude payment methods based on the payment characteristics
         self.ensure_one()
         return []
 
@@ -433,20 +432,14 @@ class AccountPayment(models.Model):
             else:
                 pay.partner_id = pay.partner_id
 
-    @api.depends('journal_id', 'payment_type')
+    @api.depends('journal_id', 'payment_type', 'payment_method_line_id')
     def _compute_outstanding_account_id(self):
         for pay in self:
             if pay.payment_type == 'inbound':
-                payment_method_account_id = pay.journal_id.inbound_payment_method_line_ids\
-                    .filtered(lambda line: line.code == pay.payment_method_id.code).payment_account_id
-
-                pay.outstanding_account_id = (payment_method_account_id
+                pay.outstanding_account_id = (pay.payment_method_line_id.payment_account_id
                                               or pay.journal_id.company_id.account_journal_payment_debit_account_id)
             elif pay.payment_type == 'outbound':
-                payment_method_account_id = pay.journal_id.outbound_payment_method_line_ids\
-                    .filtered(lambda line: line.code == pay.payment_method_id.code).payment_account_id
-
-                pay.outstanding_account_id = (payment_method_account_id
+                pay.outstanding_account_id = (pay.payment_method_line_id.payment_account_id
                                               or pay.journal_id.company_id.account_journal_payment_credit_account_id)
             else:
                 pay.outstanding_account_id = False
@@ -477,12 +470,12 @@ class AccountPayment(models.Model):
                     ], limit=1)
 
     @api.depends('partner_bank_id', 'amount', 'ref', 'currency_id', 'journal_id', 'move_id.state',
-                 'payment_method_id', 'payment_type')
+                 'payment_method_line_id', 'payment_type')
     def _compute_qr_code(self):
         for pay in self:
             if pay.state in ('draft', 'posted') \
                 and pay.partner_bank_id \
-                and pay.payment_method_id.code == 'manual' \
+                and pay.payment_method_line_id.code == 'manual' \
                 and pay.payment_type == 'outbound' \
                 and pay.currency_id:
 
@@ -610,14 +603,14 @@ class AccountPayment(models.Model):
     # CONSTRAINT METHODS
     # -------------------------------------------------------------------------
 
-    @api.constrains('payment_method_id')
-    def _check_payment_method_id(self):
-        ''' Ensure the 'payment_method_id' field is not null.
+    @api.constrains('payment_method_line_id')
+    def _check_payment_method_line_id(self):
+        ''' Ensure the 'payment_method_line_id' field is not null.
         Can't be done using the regular 'required=True' because the field is a computed editable stored one.
         '''
         for pay in self:
-            if not pay.payment_method_id:
-                raise ValidationError(_("Please define a payment method on your payment."))
+            if not pay.payment_method_line_id:
+                raise ValidationError(_("Please define a payment method line on your payment."))
 
     # -------------------------------------------------------------------------
     # LOW-LEVEL METHODS

--- a/addons/account/models/account_payment_method.py
+++ b/addons/account/models/account_payment_method.py
@@ -1,8 +1,9 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models
+from odoo import api, fields, models, _
 from odoo.osv import expression
+from odoo.exceptions import UserError
 
 
 class AccountPaymentMethod(models.Model):
@@ -23,17 +24,17 @@ class AccountPaymentMethod(models.Model):
         methods_info = self._get_payment_method_information()
         for method in payment_methods:
             information = methods_info.get(method.code)
-            limit = None if information.get('mode') == 'multi' else 1
 
-            method_domain = method._get_payment_method_domain()
+            if information.get('mode') == 'multi':
+                method_domain = method._get_payment_method_domain()
 
-            journals = self.env['account.journal'].search(method_domain, limit=limit)
+                journals = self.env['account.journal'].search(method_domain)
 
-            self.env['account.payment.method.line'].create([{
-                'name': method.name,
-                'payment_method_id': method.id,
-                'journal_id': journal.id
-            } for journal in journals])
+                self.env['account.payment.method.line'].create([{
+                    'name': method.name,
+                    'payment_method_id': method.id,
+                    'journal_id': journal.id
+                } for journal in journals])
         return payment_methods
 
     def _get_payment_method_domain(self):
@@ -86,6 +87,7 @@ class AccountPaymentMethod(models.Model):
 class AccountPaymentMethodLine(models.Model):
     _name = "account.payment.method.line"
     _description = "Payment Methods"
+    _order = 'sequence'
 
     # == Business fields ==
     name = fields.Char(compute='_compute_name', readonly=False, store=True)
@@ -104,9 +106,10 @@ class AccountPaymentMethodLine(models.Model):
         domain=lambda self: "[('deprecated', '=', False), "
                             "('company_id', '=', company_id), "
                             "('user_type_id.type', 'not in', ('receivable', 'payable')), "
-                            "('user_type_id', '=', %s)]" % self.env.ref('account.data_account_type_current_assets').id
+                            "'|', ('user_type_id', '=', %s), ('id', '=', parent.default_account_id)]"
+                            % self.env.ref('account.data_account_type_current_assets').id
     )
-    journal_id = fields.Many2one(comodel_name='account.journal', required=True, ondelete="cascade")
+    journal_id = fields.Many2one(comodel_name='account.journal', ondelete="set null")
 
     # == Display purpose fields ==
     code = fields.Char(related='payment_method_id.code')
@@ -117,4 +120,51 @@ class AccountPaymentMethodLine(models.Model):
     @api.depends('payment_method_id.name')
     def _compute_name(self):
         for method in self:
-            method.name = method.payment_method_id.name
+            if not method.name:
+                method.name = method.payment_method_id.name
+
+    @api.constrains('name')
+    def _ensure_unique_name_for_journal(self):
+        self.flush(['name'])
+        self._cr.execute('''
+            SELECT apml.name, apm.payment_type
+            FROM account_payment_method_line apml
+            JOIN account_payment_method apm ON apml.payment_method_id = apm.id
+            GROUP BY apml.name, journal_id, apm.payment_type
+            HAVING count(apml.id) > 1
+        ''')
+        res = self._cr.fetchall()
+        if res:
+            (name, payment_type) = res[0]
+            raise UserError(_("You can't have two payment method lines of the same payment type (%s) "
+                              "and with the same name (%s) on a single journal.", payment_type, name))
+
+    def unlink(self):
+        """
+        Payment method lines which are used in a payment should not be deleted from the database,
+        only the link betweend them and the journals must be broken.
+        """
+        unused_payment_method_lines = self
+        for line in self:
+            payment_count = self.env['account.payment'].search_count([('payment_method_line_id', '=', line.id)])
+            if payment_count > 0:
+                unused_payment_method_lines -= line
+
+        (self - unused_payment_method_lines).write({'journal_id': False})
+
+        return super(AccountPaymentMethodLine, unused_payment_method_lines).unlink()
+
+    def write(self, vals):
+        if 'payment_account_id' in vals:
+            account = self.env['account.account'].browse(vals['payment_account_id'])
+            if not account.reconcile:
+                account.reconcile = True
+        return super().write(vals)
+
+    @api.model
+    def create(self, vals_list):
+        if 'payment_account_id' in vals_list:
+            account = self.env['account.account'].browse(vals_list['payment_account_id'])
+            if not account.reconcile:
+                account.reconcile = True
+        return super().create(vals_list)
