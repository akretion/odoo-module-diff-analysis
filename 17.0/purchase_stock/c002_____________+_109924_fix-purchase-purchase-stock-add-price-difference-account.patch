PR: https://github.com/odoo/odoo/pull/109924

From: a022fefbaf2f9c7041d2a790661d3cba64dfff51
From: Arnold Moyaux
Date: 2023-02-13 14:15:34

Structural Changes: 3
Total Changes: 34

[FIX] purchase, purchase_stock: add price difference account

Version 16.0 removed the price different account following this pull request #99411

This decision has been made because it was only used anymore by standard cost method and real time valuation.
We thought that standard was not a valid accounting method and we didn't want to maintain code for it.

But:
- Standard could be valid if you manualy complete the accounting entries
by yourself (e.g. employees/machines cost in mrp).
- It's also valid if you record the difference between standard price and
vendo price (price diff)

If you want to have an estimation of your cogs (benefits and loss) during an
accounting period. People just do a manual correction at the end but they have
a real time reporting on the situation.

It's a too big regression to be acceptable. We apologize and reintroduce it for
16.0 and future version.

This PR reintroduce the fields in purchase and the fix module in 16.0 is
not needed anymore.

closes odoo/odoo#109924

Related: odoo/upgrade#4315
Signed-off-by: William Henrotin (whe) <whe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/purchase_stock/models/account_invoice.py
+++ b/addons/purchase_stock/models/account_invoice.py
@@ -42,8 +42,14 @@ class AccountMove(models.Model):
                     continue
 
                 # Retrieve accounts needed to generate the price difference.
-                debit_expense_account = line._get_price_diff_account()
-                if not debit_expense_account:
+                debit_pdiff_account = False
+                if line.product_id.cost_method == 'standard':
+                    debit_pdiff_account = line.product_id.property_account_creditor_price_difference \
+                        or line.product_id.categ_id.property_account_creditor_price_difference_categ
+                    debit_pdiff_account = move.fiscal_position_id.map_account(debit_pdiff_account)
+                else:
+                    debit_pdiff_account = line.product_id.product_tmpl_id.get_product_accounts(fiscal_pos=move.fiscal_position_id)['expense']
+                if not debit_pdiff_account:
                     continue
                 # Retrieve stock valuation moves.
                 valuation_stock_moves = self.env['stock.move'].search([
@@ -74,7 +80,6 @@ class AccountMove(models.Model):
                         move.company_id, valuation_date, round=False
                     )
 
-
                 price_unit = line._get_gross_unit_price()
 
                 price_unit_val_dif = price_unit - valuation_price_unit
@@ -110,7 +115,7 @@ class AccountMove(models.Model):
                             line.company_currency_id,
                             line.company_id, fields.Date.today(),
                         ),
-                        'account_id': debit_expense_account.id,
+                        'account_id': debit_pdiff_account.id,
                         'analytic_distribution': line.analytic_distribution,
                         'display_type': 'cogs',
                     }

--- a/addons/purchase_stock/models/account_move_line.py
+++ b/addons/purchase_stock/models/account_move_line.py
@@ -25,10 +25,3 @@ class AccountMoveLine(models.Model):
         total_out_and_not_invoiced_qty = max(0, out_qty - invoiced_qty)
         out_and_not_invoiced_qty = min(aml_qty, total_out_and_not_invoiced_qty)
         return self.product_id.uom_id._compute_quantity(out_and_not_invoiced_qty, self.product_uom_id)
-
-    def _get_price_diff_account(self):
-        self.ensure_one()
-        if self.product_id.cost_method == 'standard':
-            return False
-        accounts = self.product_id.product_tmpl_id.get_product_accounts(fiscal_pos=self.move_id.fiscal_position_id)
-        return accounts['expense']

--- a/addons/purchase_stock/models/product.py
+++ b/addons/purchase_stock/models/product.py
@@ -5,10 +5,24 @@ from odoo import api, fields, models
 from odoo.osv import expression
 
 
+class ProductCategory(models.Model):
+    _inherit = "product.category"
+
+    property_account_creditor_price_difference_categ = fields.Many2one(
+        'account.account', string="Price Difference Account",
+        company_dependent=True,
+        help="This account will be used to value price difference between purchase price and accounting cost.")
+
+
 class ProductTemplate(models.Model):
     _name = 'product.template'
     _inherit = 'product.template'
 
+    property_account_creditor_price_difference = fields.Many2one(
+        'account.account', string="Price Difference Account", company_dependent=True,
+        help="This account is used in automated inventory valuation to "\
+             "record the price difference between a purchase order and its related vendor bill when validating this vendor bill.")
+
     @api.model
     def _get_buy_route(self):
         buy_route = self.env.ref('purchase_stock.route_warehouse0_buy', raise_if_not_found=False)
