PR: https://github.com/odoo/odoo/pull/

From: cc552c008bb78be930937b5291853216265811e4
From: Olivier Dony
Date: 2015-10-27 14:58:47

Structural Changes: 6
Total Changes: 14

[MERGE] Forward 9.0 up to 2ec9a9c

================================= pseudo patch: =================================

--- a/addons/account/models/account.py
+++ b/addons/account/models/account.py
@@ -679,7 +679,7 @@ class AccountTax(models.Model):
     def _fix_tax_included_price(self, price, prod_taxes, line_taxes):
         """Subtract tax amount from price when corresponding "price included" taxes do not apply"""
         # FIXME get currency in param?
-        incl_tax = prod_taxes.filtered(lambda tax: tax.id not in line_taxes and tax.price_include)
+        incl_tax = prod_taxes.filtered(lambda tax: tax not in line_taxes and tax.price_include)
         if incl_tax:
             return incl_tax.compute_all(price)['total_excluded']
         return price

--- a/addons/account/models/account_invoice.py
+++ b/addons/account/models/account_invoice.py
@@ -150,6 +150,7 @@ class AccountInvoice(models.Model):
                 if payment.currency_id and amount_currency != 0:
                     amount_to_show = -amount_currency
                 else:
+                    self.with_context(date=payment.date)
                     amount_to_show = payment.company_id.currency_id.compute(-amount, self.currency_id)
                 info['content'].append({
                     'name': payment.name,

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -352,8 +352,8 @@ class AccountMoveLine(models.Model):
         help="This field is used for payable and receivable journal entries. You can put the limit date for the payment of this line.")
     date = fields.Date(related='move_id.date', string='Date', required=True, index=True, default=fields.Date.context_today, store=True, copy=False)
     analytic_line_ids = fields.One2many('account.analytic.line', 'move_id', string='Analytic lines', oldname="analytic_lines")
-    tax_ids = fields.Many2many('account.tax', string='Taxes', copy=False, readonly=True)
-    tax_line_id = fields.Many2one('account.tax', string='Originator tax', copy=False, readonly=True)
+    tax_ids = fields.Many2many('account.tax', string='Taxes', readonly=True)
+    tax_line_id = fields.Many2one('account.tax', string='Originator tax', readonly=True)
     analytic_account_id = fields.Many2one('account.analytic.account', string='Analytic Account')
     company_id = fields.Many2one('res.company', related='account_id.company_id', string='Company', store=True)
     counterpart = fields.Char("Counterpart", compute='_get_counterpart', help="Compute the counter part accounts of this journal item for this journal entry. This can be needed in reports.")
@@ -945,11 +945,12 @@ class AccountMoveLine(models.Model):
         tax_lines_vals = []
         if apply_taxes and not context.get('dont_create_taxes') and vals.get('tax_ids'):
             # Get ids from triplets : https://www.odoo.com/documentation/master/reference/orm.html#openerp.models.Model.write
-            tax_ids = map(lambda tax: tax[1], vals['tax_ids'])
+            tax_ids = [tax['id'] for tax in self.resolve_2many_commands('tax_ids', vals['tax_ids']) if tax.get('id')]
             # Since create() receives ids instead of recordset, let's just use the old-api bridge
             taxes = self.env['account.tax'].browse(tax_ids)
+            currency = self.env['res.currency'].browse(vals.get('currency_id'))
             res = taxes.compute_all(amount,
-                vals.get('currency_id'), 1, vals.get('product_id'), vals.get('partner_id'))
+                currency, 1, vals.get('product_id'), vals.get('partner_id'))
             # Adjust line amount if any tax is price_include
             if abs(res['total_excluded']) < abs(amount):
                 if vals['debit'] != 0.0: vals['debit'] = res['total_excluded']

--- a/addons/account/models/partner.py
+++ b/addons/account/models/partner.py
@@ -402,7 +402,7 @@ class ResPartner(models.Model):
     @api.one
     def _get_company_currency(self):
         if self.company_id:
-            self.currency_id = self.company_id.currency_id
+            self.currency_id = self.sudo().company_id.currency_id
         else:
             self.currency_id = self.env.user.company_id.currency_id
 

--- a/addons/account/models/account.py
+++ b/addons/account/models/account.py
@@ -218,7 +218,7 @@ class AccountJournal(models.Model):
         help="This field contains the information related to the numbering of the journal entries of this journal.", required=True, copy=False)
     refund_sequence_id = fields.Many2one('ir.sequence', string='Refund Entry Sequence',
         help="This field contains the information related to the numbering of the refund entries of this journal.", copy=False)
-    sequence = fields.Integer(help='Used to order Journals in the dashboard view')
+    sequence = fields.Integer(help='Used to order Journals in the dashboard view', default=10)
 
     #groups_id = fields.Many2many('res.groups', 'account_journal_group_rel', 'journal_id', 'group_id', string='Groups')
     currency_id = fields.Many2one('res.currency', help='The currency used to enter statement', string="Currency", oldname='currency')
@@ -466,7 +466,7 @@ class ResPartnerBank(models.Model):
     @api.constrains('journal_id')
     def _check_journal_id(self):
         if len(self.journal_id) > 1:
-            raise ValidationError(_('A bank account can anly belong to one journal.'))
+            raise ValidationError(_('A bank account can only belong to one journal.'))
 
 
 #----------------------------------------------------------

--- a/addons/account/models/account_invoice.py
+++ b/addons/account/models/account_invoice.py
@@ -210,8 +210,8 @@ class AccountInvoice(models.Model):
         ], string='Status', index=True, readonly=True, default='draft',
         track_visibility='onchange', copy=False,
         help=" * The 'Draft' status is used when a user is encoding a new and unconfirmed Invoice.\n"
-             " * The 'Pro-forma' status is used the invoice does not have an invoice number.\n"
-             " * The 'Open' status is used when user create invoice, an invoice number is generated. Its in open status till user does not pay invoice.\n"
+             " * The 'Pro-forma' status is used when the invoice does not have an invoice number.\n"
+             " * The 'Open' status is used when user creates invoice, an invoice number is generated. Its in open status till user does not pay invoice.\n"
              " * The 'Paid' status is set automatically when the invoice is paid. Its related journal entries may or may not be reconciled.\n"
              " * The 'Cancelled' status is used when user cancel invoice.")
     sent = fields.Boolean(readonly=True, default=False, copy=False,

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -171,6 +171,7 @@ class AccountChartTemplate(models.Model):
                 'default_debit_account_id': _get_default_account(journal, 'debit'),
                 'refund_sequence': True,
                 'show_on_dashboard': journal['favorite'],
+                'sequence': journal['sequence']
             }
             journal_data.append(vals)
         return journal_data
@@ -758,6 +759,7 @@ class WizardMultiChartsAccounts(models.TransientModel):
                 'type': acc.account_type,
                 'company_id': company.id,
                 'currency_id': acc.currency_id.id,
+                'sequence': 10
             })
 
 
