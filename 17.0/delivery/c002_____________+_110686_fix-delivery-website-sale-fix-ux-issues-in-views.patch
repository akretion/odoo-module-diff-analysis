PR: https://github.com/odoo/odoo/pull/110686

From: d3cddbe89aee672322524ff735b9f1742d4ca8cc
From: Valentin Vallaeys (vava)
Date: 2023-03-14 11:23:45

Structural Changes: 4
Total Changes: 59

[FIX] delivery, website_sale: fix UX issues in views

In ecommerce, the form vue of shipping methods should be improved to
easily set up fixed delivery costs. This commit improves the
user-experience and solves bugs on the fields displayed.

task-3203210

Part-of: odoo/odoo#110686

================================= pseudo patch: =================================

--- a/addons/delivery/models/delivery_carrier.py
+++ b/addons/delivery/models/delivery_carrier.py
@@ -3,7 +3,7 @@
 import psycopg2
 import re
 
-from odoo import _, api, fields, models, registry, SUPERUSER_ID
+from odoo import _, api, fields, models, registry, Command, SUPERUSER_ID
 from odoo.exceptions import UserError
 from odoo.tools.safe_eval import safe_eval
 
@@ -48,6 +48,7 @@ class DeliveryCarrier(models.Model):
     debug_logging = fields.Boolean('Debug logging', help="Log requests in order to ease debugging")
     company_id = fields.Many2one('res.company', string='Company', related='product_id.company_id', store=True, readonly=False)
     product_id = fields.Many2one('product.product', string='Delivery Product', required=True, ondelete='restrict')
+    currency_id = fields.Many2one(related='product_id.currency_id')
 
     invoice_policy = fields.Selection(
         selection=[('estimated', "Estimated cost")],
@@ -70,7 +71,11 @@ class DeliveryCarrier(models.Model):
     margin = fields.Float(help='This percentage will be added to the shipping price.')
     fixed_margin = fields.Float(help='This fixed amount will be added to the shipping price.')
     free_over = fields.Boolean('Free if order amount is above', help="If the order total amount (shipping excluded) is above or equal to this value, the customer benefits from a free shipping", default=False)
-    amount = fields.Float(string='Amount', help="Amount of the order to benefit from a free shipping, expressed in the company currency")
+    amount = fields.Float(
+        string="Amount",
+        default=1000,
+        help="Amount of the order to benefit from a free shipping, expressed in the company currency",
+    )
 
     can_generate_return = fields.Boolean(compute="_compute_can_generate_return")
     return_label_on_delivery = fields.Boolean(string="Generate Return Label", help="The return label is automatically generated at the delivery.")
@@ -88,7 +93,7 @@ class DeliveryCarrier(models.Model):
     )
 
     _sql_constraints = [
-        ('margin_not_under_100_percent', 'CHECK (margin >= -100)', 'Margin cannot be lower than -100%'),
+        ('margin_not_under_100_percent', 'CHECK (margin >= -1)', 'Margin cannot be lower than -100%'),
         ('shipping_insurance_is_percentage', 'CHECK(shipping_insurance >= 0 AND shipping_insurance <= 100)', "The shipping insurance must be a percentage between 0 and 100."),
     ]
 
@@ -153,13 +158,13 @@ class DeliveryCarrier(models.Model):
         if not self.return_label_on_delivery:
             self.get_return_label_from_portal = False
 
-    @api.onchange('state_ids')
-    def onchange_states(self):
-        self.country_ids = [(6, 0, self.country_ids.ids + self.state_ids.mapped('country_id.id'))]
-
     @api.onchange('country_ids')
-    def onchange_countries(self):
-        self.state_ids = [(6, 0, self.state_ids.filtered(lambda state: state.id in self.country_ids.mapped('state_ids').ids).ids)]
+    def _onchange_country_ids(self):
+        self.state_ids -= self.state_ids.filtered(
+            lambda state: state._origin.id not in self.country_ids.state_ids.ids
+        )
+        if not self.country_ids:
+            self.zip_prefix_ids = [Command.clear()]
 
     def _get_delivery_type(self):
         """Return the delivery type.
@@ -199,7 +204,7 @@ class DeliveryCarrier(models.Model):
                 product_currency=company.currency_id
             )
             # apply margin on computed price
-            res['price'] = float(res['price']) * (1.0 + (self.margin / 100.0)) + self.fixed_margin
+            res['price'] = float(res['price']) * (1.0 + self.margin) + self.fixed_margin
             # save the real price in case a free_over rule overide it to 0
             res['carrier_price'] = res['price']
             # free when order is large enough

--- a/addons/delivery/models/delivery_price_rule.py
+++ b/addons/delivery/models/delivery_price_rule.py
@@ -2,31 +2,53 @@
 
 from odoo import api, fields, models
 
+from odoo.tools import format_amount
+
+VARIABLE_SELECTION = [
+    ('weight', "Weight"),
+    ('volume', "Volume"),
+    ('wv', "Weight * Volume"),
+    ('price', "Price"),
+    ('quantity', "Quantity"),
+]
+
 
 class PriceRule(models.Model):
     _name = "delivery.price.rule"
     _description = "Delivery Price Rules"
     _order = 'sequence, list_price, id'
 
-    @api.depends('variable', 'operator', 'max_value', 'list_base_price', 'list_price', 'variable_factor')
+    @api.depends('variable', 'operator', 'max_value', 'list_base_price', 'list_price', 'variable_factor', 'currency_id')
     def _compute_name(self):
         for rule in self:
             name = 'if %s %s %.02f then' % (rule.variable, rule.operator, rule.max_value)
             if rule.list_base_price and not rule.list_price:
-                name = '%s fixed price %.02f' % (name, rule.list_base_price)
+                name = '%s fixed price %s' % (
+                    name, format_amount(self.env, rule.list_base_price, rule.currency_id)
+                )
             elif rule.list_price and not rule.list_base_price:
-                name = '%s %.02f times %s' % (name, rule.list_price, rule.variable_factor)
+                name = '%s %s times %s' % (name, format_amount(
+                    self.env, rule.list_price, rule.currency_id
+                ), rule.variable_factor)
             else:
-                name = '%s fixed price %.02f plus %.02f times %s' % (name, rule.list_base_price, rule.list_price, rule.variable_factor)
+                name = '%s fixed price %s plus %s times %s' % (
+                    name,
+                    format_amount(self.env, rule.list_base_price, rule.currency_id),
+                    format_amount(self.env, rule.list_price, rule.currency_id),
+                    rule.variable_factor,
+                )
             rule.name = name
 
     name = fields.Char(compute='_compute_name')
     sequence = fields.Integer(required=True, default=10)
     carrier_id = fields.Many2one('delivery.carrier', 'Carrier', required=True, ondelete='cascade')
+    currency_id = fields.Many2one(related='carrier_id.currency_id')
 
-    variable = fields.Selection([('weight', 'Weight'), ('volume', 'Volume'), ('wv', 'Weight * Volume'), ('price', 'Price'), ('quantity', 'Quantity')], required=True, default='weight')
+    variable = fields.Selection(selection=VARIABLE_SELECTION, required=True, default='quantity')
     operator = fields.Selection([('==', '='), ('<=', '<='), ('<', '<'), ('>=', '>='), ('>', '>')], required=True, default='<=')
     max_value = fields.Float('Maximum Value', required=True)
     list_base_price = fields.Float(string='Sale Base Price', digits='Product Price', required=True, default=0.0)
     list_price = fields.Float('Sale Price', digits='Product Price', required=True, default=0.0)
-    variable_factor = fields.Selection([('weight', 'Weight'), ('volume', 'Volume'), ('wv', 'Weight * Volume'), ('price', 'Price'), ('quantity', 'Quantity')], 'Variable Factor', required=True, default='weight')
+    variable_factor = fields.Selection(
+        selection=VARIABLE_SELECTION, string="Variable Factor", required=True, default='weight'
+    )
