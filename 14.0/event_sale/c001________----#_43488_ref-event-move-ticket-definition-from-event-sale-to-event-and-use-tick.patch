PR: https://github.com/odoo/odoo/pull/43488

From: 6b09c1b8c62fc8b5bbd210d4759561ec67269155
From: Thibault Delavall√©e
Date: 2020-01-30 15:18:08

Breaking data model changes score: 24.4, change matches:
-    _inherit = 'event.type'
-    use_ticketing = fields.Boolean('Ticketing')
-    event_ticket_ids = fields.One2many(
-    event_ticket_ids = fields.One2many(
-    start_sale_date = fields.Date('Start sale date', compute='_compute_start_sale_date')
-    event_ticket_id = fields.Many2one('event.event.ticket', string='Event Ticket', readonly=True, states={'draft': [('readonly', False)]})
-    name = fields.Char(string='Name', required=True, translate=True)
-    event_type_id = fields.Many2one('event.type', string='Event Category', ondelete='cascade')
-    event_id = fields.Many2one('event.event', string="Event", ondelete='cascade')
-    company_id = fields.Many2one('res.company', related='event_id.company_id')
-    product_id = fields.Many2one('product.product', string='Product',
+    product_id = fields.Many2one(
-    start_sale_date = fields.Date(string="Sales Start")
-    end_sale_date = fields.Date(string="Sales End")
-    is_expired = fields.Boolean(string='Is Expired', compute='_compute_is_expired')
-    sale_available = fields.Boolean(string='Is Available', compute='_compute_sale_available')
-    registration_ids = fields.One2many('event.registration', 'event_ticket_id', string='Registrations')
-    seats_availability = fields.Selection([('limited', 'Limited'), ('unlimited', 'Unlimited')],
-    seats_max = fields.Integer(string='Maximum Available Seats',
-    seats_reserved = fields.Integer(string='Reserved Seats', compute='_compute_seats', store=True)
-    seats_available = fields.Integer(string='Available Seats', compute='_compute_seats', store=True)
-    seats_unconfirmed = fields.Integer(string='Unconfirmed Seat Reservations', compute='_compute_seats', store=True)
-    seats_used = fields.Integer(compute='_compute_seats', store=True)

Total Changes: 255

[REF] event: move ticket definition from event_sale to event and use ticket templates

PURPOSE

Integration between event and eCommerce is required only when users handle the
entire selling process online. However users may require ticketing support
while managing payments outside of Odoo. Purpose of this commit is to support
tickets directly in event application without need of sales.

RATIONALE

Remove the need to have event_sale installed to manage basic multi ticket
event type. Integration with eCommerce is needed only when one wants to handle
the entire selling flow online, i.e. order, payment, ... Integration with
Sales is needed only when one wants to create sale orders linked to attendees.

Many event users do not need all of this. Their attendees pay through bank
transfers or they simply manage payments outside of Odoo while still
requiring tickets management.

SPECIFICATIONS

Remove the need to have event_sale installed to manage basic ticketing on
events.

Move ticket model (event.event.ticket) directly into event, copying most
fields from event_sale. Only sale specific fields and behavior should be kept
in event_sale :

  * keep product_id and price information in event_sale;
  * keep sales analysis in event_sale;

We also split tickets model used for event type (event.type.ticket) and
events (event.event.ticket). Indeed previously to this commit both are
modeled in the same table, with the following issues :

  * tickets on templates use only a subset of fields: name, seats availability,
    product, price;
  * a ticket has either an event_id, either an event_type_id, and there are
    constraints to try to avoid having lost tickets. This leads to a strange
    model where m2o fields are required only in some cases with a dual
    behavior;
  * tickets are not shared between event.type and event.event. They are copied
    and having a single model is therefore not necessary;

We therefore choose to have a light model for event.type.ticket. It is linked
to event.type when configuring template tickets. They are copied in the
onchange copying event template configuration to the event itself, leading
to event.event.ticket creation.

Some tests are moved / completed accordingly.

Access rights are copied from website_event_sale to website_even concerning
ticket access for public / portal. Currently they are kept as they are with
some rewording as it is not the purpose of this commit to rewrite them.

LINKS

Task ID 2177281
Community PR odoo/odoo#43488

================================= pseudo patch: =================================

--- a/addons/event_sale/models/event_event.py
+++ b/addons/event_sale/models/event_event.py
@@ -1,42 +1,12 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models, _
-
-
-class EventType(models.Model):
-    _inherit = 'event.type'
-
-    @api.model
-    def _get_default_event_ticket_ids(self):
-        product = self.env.ref('event_sale.product_product_event', raise_if_not_found=False)
-        if not product:
-            return False
-        return [(0, 0, {
-            'name': _('Registration'),
-            'product_id': product.id,
-            'price': 0,
-        })]
-
-    use_ticketing = fields.Boolean('Ticketing')
-    event_ticket_ids = fields.One2many(
-        'event.event.ticket', 'event_type_id',
-        string='Tickets', default=_get_default_event_ticket_ids)
-
-    @api.onchange('name')
-    def _onchange_name(self):
-        if self.name:
-            self.event_ticket_ids.filtered(lambda ticket: ticket.name == _('Registration')).update({
-                'name': _('Registration for %s') % self.name
-            })
+from odoo import api, fields, models
 
 
 class Event(models.Model):
     _inherit = 'event.event'
 
-    event_ticket_ids = fields.One2many(
-        'event.event.ticket', 'event_id', string='Event Ticket',
-        copy=True)
     sale_order_lines_ids = fields.One2many(
         'sale.order.line', 'event_id',
         string='All sale order lines pointing to this event')
@@ -44,25 +14,6 @@ class Event(models.Model):
     currency_id = fields.Many2one(
         'res.currency', string='Currency',
         related='company_id.currency_id', readonly=True)
-    start_sale_date = fields.Date('Start sale date', compute='_compute_start_sale_date')
-
-    @api.onchange('event_type_id')
-    def _onchange_type(self):
-        super(Event, self)._onchange_type()
-        if self.event_type_id.use_ticketing:
-            self.event_ticket_ids = [(5, 0, 0)] + [
-                (0, 0, {
-                    'name': self.name and _('Registration for %s') % self.name or ticket.name,
-                    'product_id': ticket.product_id.id,
-                    'price': ticket.price,
-                })
-                for ticket in self.event_type_id.event_ticket_ids]
-
-    @api.depends('event_ticket_ids.start_sale_date')
-    def _compute_start_sale_date(self):
-        for event in self:
-            start_dates = [ticket.start_sale_date for ticket in event.event_ticket_ids if ticket.start_sale_date]
-            event.start_sale_date = min(start_dates) if start_dates else False
 
     @api.depends('company_id.currency_id',
                  'sale_order_lines_ids.price_subtotal', 'sale_order_lines_ids.currency_id',
@@ -78,12 +29,6 @@ class Event(models.Model):
                 for sale_order_line_id in event.sale_order_lines_ids
             ])
 
-    @api.depends('event_ticket_ids.sale_available')
-    def _compute_event_registrations_open(self):
-        non_open_events = self.filtered(lambda event: not any(event.event_ticket_ids.mapped('sale_available')))
-        non_open_events.event_registrations_open = False
-        super(Event, self - non_open_events)._compute_event_registrations_open()
-
     def action_view_linked_orders(self):
         """ Redirects to the orders linked to the current events """
         sale_order_action = self.env.ref('sale.action_orders').read()[0]

--- a/addons/event_sale/models/event_registration.py
+++ b/addons/event_sale/models/event_registration.py
@@ -2,14 +2,12 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models, _
-from odoo.exceptions import ValidationError
 from odoo.tools import float_is_zero
 
 
 class EventRegistration(models.Model):
     _inherit = 'event.registration'
 
-    event_ticket_id = fields.Many2one('event.event.ticket', string='Event Ticket', readonly=True, states={'draft': [('readonly', False)]})
     # in addition to origin generic fields, add real relational fields to correctly
     # handle attendees linked to sales orders and their lines
     # TDE FIXME: maybe add an onchange on sale_order_id + origin
@@ -19,18 +17,6 @@ class EventRegistration(models.Model):
     source_id = fields.Many2one('utm.source', 'Source', related="sale_order_id.source_id", store=True)
     medium_id = fields.Many2one('utm.medium', 'Medium', related="sale_order_id.medium_id", store=True)
 
-    @api.onchange('event_id')
-    def _onchange_event_id(self):
-        # We reset the ticket when keeping it would lead to an inconstitent state.
-        if self.event_ticket_id and (not self.event_id or self.event_id != self.event_ticket_id.event_id):
-            self.event_ticket_id = None
-
-    @api.constrains('event_ticket_id', 'state')
-    def _check_ticket_seats_limit(self):
-        for record in self:
-            if record.event_ticket_id.seats_max and record.event_ticket_id.seats_available < 0:
-                raise ValidationError(_('No more available seats for this ticket'))
-
     def _check_auto_confirmation(self):
         res = super(EventRegistration, self)._check_auto_confirmation()
         if res:

--- a/addons/event_sale/models/event_ticket.py
+++ b/addons/event_sale/models/event_ticket.py
@@ -1,145 +1,95 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models, _
-from odoo.exceptions import ValidationError, UserError
+import logging
 
+from odoo import api, fields, models
 
-class EventTicket(models.Model):
-    _name = 'event.event.ticket'
-    _description = 'Event Ticket'
+_logger = logging.getLogger(__name__)
+
+
+class EventTemplateTicket(models.Model):
+    _inherit = 'event.type.ticket'
 
     def _default_product_id(self):
         return self.env.ref('event_sale.product_product_event', raise_if_not_found=False)
 
-    name = fields.Char(string='Name', required=True, translate=True)
-    event_type_id = fields.Many2one('event.type', string='Event Category', ondelete='cascade')
-    event_id = fields.Many2one('event.event', string="Event", ondelete='cascade')
-    company_id = fields.Many2one('res.company', related='event_id.company_id')
     # product
-    product_id = fields.Many2one('product.product', string='Product',
-        required=True, domain=[("event_ok", "=", True)],
+    product_id = fields.Many2one(
+        'product.product', string='Product', required=True, domain=[("event_ok", "=", True)],
         default=_default_product_id)
     price = fields.Float(string='Price', digits='Product Price')
     price_reduce = fields.Float(string="Price Reduce", compute="_compute_price_reduce", digits='Product Price')
-    price_reduce_taxinc = fields.Float(compute='_get_price_reduce_tax', string='Price Reduce Tax inc')
-    # sale
-    start_sale_date = fields.Date(string="Sales Start")
-    end_sale_date = fields.Date(string="Sales End")
-    is_expired = fields.Boolean(string='Is Expired', compute='_compute_is_expired')
-    sale_available = fields.Boolean(string='Is Available', compute='_compute_sale_available')
-    registration_ids = fields.One2many('event.registration', 'event_ticket_id', string='Registrations')
-    # seats fields
-    seats_availability = fields.Selection([('limited', 'Limited'), ('unlimited', 'Unlimited')],
-        string='Available Seat', required=True, store=True, compute='_compute_seats', default="limited")
-    seats_max = fields.Integer(string='Maximum Available Seats',
-       help="Define the number of available tickets. If you have too much registrations you will "
-            "not be able to sell tickets anymore. Set 0 to ignore this rule set as unlimited.")
-    seats_reserved = fields.Integer(string='Reserved Seats', compute='_compute_seats', store=True)
-    seats_available = fields.Integer(string='Available Seats', compute='_compute_seats', store=True)
-    seats_unconfirmed = fields.Integer(string='Unconfirmed Seat Reservations', compute='_compute_seats', store=True)
-    seats_used = fields.Integer(compute='_compute_seats', store=True)
-
-    def _compute_is_expired(self):
-        for ticket in self:
-            if ticket.end_sale_date:
-                current_date = fields.Date.context_today(ticket.with_context(tz=ticket.event_id.date_tz))
-                ticket.is_expired = ticket.end_sale_date < current_date
-            else:
-                ticket.is_expired = False
-
-    @api.depends('product_id.active', 'start_sale_date', 'end_sale_date')
-    def _compute_sale_available(self):
-        for ticket in self:
-            current_date = fields.Date.context_today(ticket.with_context(tz=ticket.event_id.date_tz))
-            if not ticket.product_id.active:
-                ticket.sale_available = False
-            elif ticket.start_sale_date and ticket.start_sale_date > current_date:
-                ticket.sale_available = False
-            elif ticket.end_sale_date and ticket.end_sale_date < current_date:
-                ticket.sale_available = False
-            else:
-                ticket.sale_available = True
 
+    @api.depends('product_id')
     def _compute_price_reduce(self):
         for record in self:
             product = record.product_id
             discount = product.lst_price and (product.lst_price - product.price) / product.lst_price or 0.0
             record.price_reduce = (1.0 - discount) * record.price
 
-    def _get_price_reduce_tax(self):
-        for record in self:
-            # sudo necessary here since the field is most probably accessed through the website
-            tax_ids = record.sudo().product_id.taxes_id.filtered(lambda r: r.company_id == record.event_id.company_id)
-            taxes = tax_ids.compute_all(record.price_reduce, record.event_id.company_id.currency_id, 1.0, product=record.product_id)
-            record.price_reduce_taxinc = taxes['total_included']
-
-    @api.depends('seats_max', 'registration_ids.state')
-    def _compute_seats(self):
-        """ Determine reserved, available, reserved but unconfirmed and used seats. """
-        # initialize fields to 0 + compute seats availability
-        for ticket in self:
-            ticket.seats_availability = 'unlimited' if ticket.seats_max == 0 else 'limited'
-            ticket.seats_unconfirmed = ticket.seats_reserved = ticket.seats_used = ticket.seats_available = 0
-        # aggregate registrations by ticket and by state
-        if self.ids:
-            state_field = {
-                'draft': 'seats_unconfirmed',
-                'open': 'seats_reserved',
-                'done': 'seats_used',
-            }
-            query = """ SELECT event_ticket_id, state, count(event_id)
-                        FROM event_registration
-                        WHERE event_ticket_id IN %s AND state IN ('draft', 'open', 'done')
-                        GROUP BY event_ticket_id, state
-                    """
-            self.env['event.registration'].flush(['event_id', 'event_ticket_id', 'state'])
-            self.env.cr.execute(query, (tuple(self.ids),))
-            for event_ticket_id, state, num in self.env.cr.fetchall():
-                ticket = self.browse(event_ticket_id)
-                ticket[state_field[state]] += num
-        # compute seats_available
-        for ticket in self:
-            if ticket.seats_max > 0:
-                ticket.seats_available = ticket.seats_max - (ticket.seats_reserved + ticket.seats_used)
-
-    @api.constrains('registration_ids', 'seats_max')
-    def _check_seats_limit(self):
-        for record in self:
-            if record.seats_max and record.seats_available < 0:
-                raise ValidationError(_('No more available seats for this ticket type.'))
-
-    @api.constrains('event_type_id', 'event_id')
-    def _constrains_event(self):
-        if any(ticket.event_type_id and ticket.event_id for ticket in self):
-            raise UserError(_('Ticket cannot belong to both the event category and the event itself.'))
+    @api.depends('product_id.active')
+    def _compute_sale_available(self):
+        inactive_product_tickets = self.filtered(lambda ticket: not ticket.product_id.active)
+        for ticket in inactive_product_tickets:
+            ticket.sale_available = False
+        super(EventTemplateTicket, self - inactive_product_tickets)._compute_sale_available()
 
     @api.onchange('product_id')
     def _onchange_product_id(self):
         self.price = self.product_id.list_price or 0
 
-    def _get_ticket_multiline_description_sale(self):
-        """ Compute a multiline description of this ticket, in the context of sales.
-            It will often be used as the default description of a sales order line referencing this ticket.
-
-        1. the first line is the ticket name
-        2. the second line is the event name (if it exists, which should be the case with a normal workflow) or the product name (if it exists)
+    def _init_column(self, column_name):
+        if column_name != "product_id":
+            return super(EventTemplateTicket, self)._init_column(column_name)
+
+        # fetch void columns
+        self.env.cr.execute("SELECT id FROM %s WHERE product_id IS NULL" % self._table)
+        ticket_type_ids = self.env.cr.fetchall()
+        if not ticket_type_ids:
+            return
+
+        # update existing columns
+        _logger.debug("Table '%s': setting default value of new column %s to unique values for each row",
+                      self._table, column_name)
+        default_event_product = self.env.ref('event_sale.product_product_event', raise_if_not_found=False)
+        if default_event_product:
+            product_id = default_event_product.id
+        else:
+            product_id = self.env['product.product'].create({
+                'name': 'Generic Registration Product',
+                'list_price': 0,
+                'standard_price': 0,
+                'type': 'service',
+                'default_code': 'EVENT_REG',
+                'type': 'service',
+            }).id
+            self.env['ir.model.data'].create({
+                'name': 'product_product_event',
+                'module': 'event_sale',
+                'model': 'product.product',
+                'res_id': product_id,
+            })
+        self.env.cr._obj.execute(
+            f'UPDATE {self._table} SET product_id = %s WHERE id IN %s;',
+            (product_id, tuple(ticket_type_ids))
+        )
+
+    @api.model
+    def _get_event_ticket_fields_whitelist(self):
+        """ Add sale specific fields to copy from template to ticket """
+        return super(EventTemplateTicket, self)._get_event_ticket_fields_whitelist() + ['product_id', 'price']
 
-        We decided to ignore entirely the product name and the product description_sale because they are considered to be replaced by the ticket name and event name.
-            -> the workflow of creating a new event also does not lead to filling them correctly, as the product is created through the event interface
-        """
 
-        name = self.display_name
-
-        if self.event_id:
-            name += '\n' + self.event_id.display_name
-        elif self.product_id:
-            name += '\n' + self.product_id.display_name
+class EventTicket(models.Model):
+    _inherit = 'event.event.ticket'
 
-        return name
+    # product
+    price_reduce_taxinc = fields.Float(string='Price Reduce Tax inc', compute='_compute_price_reduce_taxinc')
 
-    @api.constrains('start_sale_date', 'end_sale_date')
-    def _check_start_sale_date_and_end_sale_date(self):
-        for ticket in self:
-            if ticket.start_sale_date and ticket.end_sale_date and ticket.start_sale_date > ticket.end_sale_date:
-                raise UserError(_('The stop date cannot be earlier than the start date.'))
+    def _compute_price_reduce_taxinc(self):
+        for record in self:
+            # sudo necessary here since the field is most probably accessed through the website
+            tax_ids = record.sudo().product_id.taxes_id.filtered(lambda r: r.company_id == record.event_id.company_id)
+            taxes = tax_ids.compute_all(record.price_reduce, record.event_id.company_id.currency_id, 1.0, product=record.product_id)
+            record.price_reduce_taxinc = taxes['total_included']

--- a/addons/event_sale/models/sale_order.py
+++ b/addons/event_sale/models/sale_order.py
@@ -102,7 +102,7 @@ class SaleOrderLine(models.Model):
                 lang=self.order_id.partner_id.lang,
             )
 
-            return ticket._get_ticket_multiline_description_sale() + self._get_sale_order_line_multiline_description_variants()
+            return ticket._get_ticket_multiline_description() + self._get_sale_order_line_multiline_description_variants()
         else:
             return super(SaleOrderLine, self).get_sale_order_line_multiline_description_sale(product)
 
