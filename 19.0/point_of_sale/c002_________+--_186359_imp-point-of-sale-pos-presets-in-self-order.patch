PR: https://github.com/odoo/odoo/pull/186359

From: 25243bf841888bb319a5ab1d3df39bd87ea8b061
From: David Monnom
Date: 2024-12-09 14:20:21

Breaking data model changes scores: del:6.4 + add:1, change matches:
-    config_id = fields.Many2one('pos.config', related='session_id.config_id', string="Point of Sale", readonly=False, store=True)
+    config_id = fields.Many2one('pos.config', compute='_compute_order_config_id', string="Point of Sale", readonly=False, store=True)
-    address_on_ticket = fields.Boolean(string='Print address on ticket', default=False)
-    hour_opening = fields.Float(string='Opening hour', default=18.0, help="Opening hour for the preset.")
-    hour_closing = fields.Float(string='Closing hour', default=22.0, help="Closing hour for the preset.")
-    capacity_per_x_minutes = fields.Integer(string='Capacity', default=5)
-    x_minutes = fields.Integer(string='Minutes', default=20)
-    preparation_time_minute = fields.Integer(string='Preparation Time', default=5)
+    attendance_ids = fields.One2many(related="resource_calendar_id.attendance_ids", string="Attendances", readonly=False)

Total Changes: 185

[IMP] point_of_sale, pos_*: presets in self order

*: pos_online_payment_self_order, pos_restaurant, pos_self_order

Adding presets in self order module.

closes odoo/odoo#186359

Taskid: 4310935
Related: odoo/enterprise#73348
Related: odoo/upgrade#6743
Signed-off-by: Adrien Guilliams (adgu) <adgu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/__init__.py
+++ b/addons/point_of_sale/models/__init__.py
@@ -48,3 +48,4 @@ from . import res_currency
 from . import ir_ui_view
 from . import pos_preset
 from . import product_tag
+from . import resource_calendar_attendance

--- a/addons/point_of_sale/models/pos_config.py
+++ b/addons/point_of_sale/models/pos_config.py
@@ -534,7 +534,7 @@ class PosConfig(models.Model):
     def _get_forbidden_change_fields(self):
         forbidden_keys = ['module_pos_hr', 'module_pos_restaurant', 'available_pricelist_ids',
                           'limit_categories', 'iface_available_categ_ids', 'use_pricelist', 'module_pos_discount',
-                          'payment_method_ids', 'iface_tipproduc', 'use_presets', 'default_preset_id']
+                          'payment_method_ids', 'iface_tipproduct', 'use_presets', 'default_preset_id']
         return forbidden_keys
 
     def unlink(self):
@@ -938,11 +938,6 @@ class PosConfig(models.Model):
             'point_of_sale.pos_category_desks',
             'point_of_sale.pos_category_chairs'
         ])
-        presets = self.get_record_by_ref([
-            'point_of_sale.pos_takein_preset',
-            'point_of_sale.pos_takeout_preset',
-            'point_of_sale.pos_delivery_preset',
-        ])
         config = self.env['pos.config'].create([{
             'name': _('Furniture Shop'),
             'company_id': self.env.company.id,
@@ -950,9 +945,6 @@ class PosConfig(models.Model):
             'payment_method_ids': payment_methods_ids,
             'limit_categories': True,
             'iface_available_categ_ids': furniture_categories,
-            'use_presets': True,
-            'default_preset_id': presets[0],
-            'available_preset_ids': [(6, 0, presets[1:])],
         }])
         self.env['ir.model.data']._update_xmlids([{
             'xml_id': self._get_suffixed_ref_name(ref_name),

--- a/addons/point_of_sale/models/pos_order.py
+++ b/addons/point_of_sale/models/pos_order.py
@@ -52,8 +52,7 @@ class PosOrder(models.Model):
 
     @api.model
     def _load_pos_data_domain(self, data):
-        preset_ids = data['pos.config'][0]['available_preset_ids'] + [data['pos.config'][0]['default_preset_id']]
-        return ['|', ('preset_id', 'in', preset_ids), ('state', '=', 'draft'), ('session_id', '=', data['pos.session'][0]['id'])]
+        return [('state', '=', 'draft'), ('config_id', '=', data['pos.config'][0]['id'])]
 
     @api.model
     def _process_order(self, order, existing_order):
@@ -271,11 +270,8 @@ class PosOrder(models.Model):
     pricelist_id = fields.Many2one('product.pricelist', string='Pricelist')
     partner_id = fields.Many2one('res.partner', string='Customer', change_default=True, index='btree_not_null')
     sequence_number = fields.Integer(string='Sequence Number', help='A session-unique sequence number for the order. Negative if generated from the client', default=1)
-
-    session_id = fields.Many2one(
-        'pos.session', string='Session', required=True, index=True,
-        domain="[('state', '=', 'opened')]")
-    config_id = fields.Many2one('pos.config', related='session_id.config_id', string="Point of Sale", readonly=False, store=True)
+    session_id = fields.Many2one('pos.session', string='Session', index=True, domain="[('state', '=', 'opened')]")
+    config_id = fields.Many2one('pos.config', compute='_compute_order_config_id', string="Point of Sale", readonly=False, store=True)
     currency_id = fields.Many2one('res.currency', related='config_id.currency_id', string="Currency")
     currency_rate = fields.Float("Currency Rate", compute='_compute_currency_rate', compute_sudo=True, store=True, digits=0, readonly=True,
         help='The rate of the currency to the currency of rate applicable at the date of the order')
@@ -331,6 +327,12 @@ class PosOrder(models.Model):
     order_edit_tracking = fields.Boolean(related="config_id.order_edit_tracking", readonly=True)
     available_payment_method_ids = fields.Many2many('pos.payment.method', related='config_id.payment_method_ids', string='Available Payment Methods', readonly=True, store=False)
 
+    @api.depends('session_id')
+    def _compute_order_config_id(self):
+        for order in self:
+            if order.session_id:
+                order.config_id = order.session_id.config_id
+
     @api.depends('lines.refund_orderline_ids', 'lines.refunded_orderline_id')
     def _compute_refund_related_fields(self):
         for order in self:
@@ -479,7 +481,8 @@ class PosOrder(models.Model):
     def write(self, vals):
         for order in self:
             if vals.get('state') and vals['state'] == 'paid' and order.name == '/':
-                vals['name'] = self._compute_order_name()
+                session = self.env['pos.session'].browse(vals['session_id']) if not self.session_id and vals.get('session_id') else False
+                vals['name'] = self._compute_order_name(session)
             if vals.get('mobile'):
                 vals['mobile'] = order._phone_format(number=vals.get('mobile'),
                         country=order.partner_id.country_id or self.env.company.country_id)
@@ -972,8 +975,16 @@ class PosOrder(models.Model):
         }
 
     def action_pos_order_cancel(self):
-        cancellable_orders = self.filtered(lambda order: order.state == 'draft')
-        cancellable_orders.write({'state': 'cancel'})
+        if self.env.context.get('active_ids'):
+            orders = self.browse(self.env.context.get('active_ids'))
+            order_is_in_futur = any(order.preset_time and order.preset_time.date() > fields.Date.today() for order in orders)
+            if order_is_in_futur:
+                raise UserError(_('The order delivery / pickup date is in the future. You cannot cancel it.'))
+
+        today_orders = self.filtered(lambda order: order.state == 'draft' and (not order.preset_time or order.preset_time.date() == fields.Date.today()))
+        next_days_orders = self.filtered(lambda order: order.preset_time and order.preset_time.date() > fields.Date.today() and order.state == 'draft')
+        next_days_orders.session_id = False
+        today_orders.write({'state': 'cancel'})
 
     def _apply_invoice_payments(self, is_reverse=False):
         receivable_account = self.env["res.partner"]._find_accounting_partner(self.partner_id).with_company(self.company_id).property_account_receivable_id

--- a/addons/point_of_sale/models/pos_preset.py
+++ b/addons/point_of_sale/models/pos_preset.py
@@ -1,5 +1,5 @@
 from odoo import fields, models, api, _
-from odoo.exceptions import UserError
+from odoo.exceptions import ValidationError
 from datetime import datetime, timedelta
 from collections import defaultdict
 
@@ -11,32 +11,55 @@ class PosPreset(models.Model):
     name = fields.Char(string='Label', required=True)
     pricelist_id = fields.Many2one('product.pricelist', string='Pricelist')
     fiscal_position_id = fields.Many2one('account.fiscal.position', string='Fiscal Position')
-    address_on_ticket = fields.Boolean(string='Print address on ticket', default=False)
+    identification = fields.Selection([('none', 'Not required'), ('address', 'Address'), ('name', 'Name')], default="none", string='Identification', required=True)
+    is_return = fields.Boolean(string='Return mode', default=False, help="All quantity in the cart will be in negative. Ideal for return managment.")
     color = fields.Integer(string='Color', default=0)
+    image_128 = fields.Image(string='Image', max_width=128, max_height=128)
+    count_linked_orders = fields.Integer(compute='_compute_count_linked_orders')
+    count_linked_config = fields.Integer(compute='_compute_count_linked_config')
 
     # Timing options
-    hour_opening = fields.Float(string='Opening hour', default=18.0, help="Opening hour for the preset.")
-    hour_closing = fields.Float(string='Closing hour', default=22.0, help="Closing hour for the preset.")
     use_timing = fields.Boolean(string='Timing', default=False)
-    capacity_per_x_minutes = fields.Integer(string='Capacity', default=5)
-    x_minutes = fields.Integer(string='Minutes', default=20)
-    preparation_time_minute = fields.Integer(string='Preparation Time', default=5)
+    resource_calendar_id = fields.Many2one('resource.calendar', 'Resource')
+    attendance_ids = fields.One2many(related="resource_calendar_id.attendance_ids", string="Attendances", readonly=False)
+    slots_per_interval = fields.Integer(string='Capacity', default=5)
+    interval_time = fields.Integer(string='Interval time (in min)', default=20)
+
+    @api.constrains('attendance_ids')
+    def _check_slots(self):
+        for preset in self:
+            for attendance in preset.attendance_ids:
+                if attendance.hour_from % 24 >= attendance.hour_to % 24:
+                    raise ValidationError(_('The start time must be before the end time.'))
+
+    @api.constrains('identification')
+    def _check_identification(self):
+        config_ids = self.env['pos.config'].search([])
+        for preset in self:
+            config = config_ids.filtered(lambda c: c.default_preset_id.id == preset.id)
+            if config and preset.identification != 'none':
+                raise ValidationError(_('The identification method should be set to "None" for the default preset.'))
 
     @api.model
     def _load_pos_data_domain(self, data):
-        preset_ids = data['pos.config']['data'][0]['available_preset_ids'] + [data['pos.config']['data'][0]['default_preset_id']]
+        preset_ids = data['pos.config'][0]['available_preset_ids'] + [data['pos.config'][0]['default_preset_id']]
         return [('id', 'in', preset_ids)]
 
-    def write(self, vals):
-        config_ids = self.env['pos.config'].search_count([
-            ('has_active_session', '=', True),
-            ('default_preset_id', 'in', self.ids),
-            ('available_preset_ids', 'in', self.ids)])
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return ['id', 'name', 'pricelist_id', 'fiscal_position_id', 'is_return', 'color', 'image_128', 'identification',
+            'use_timing', 'slots_per_interval', 'interval_time', 'attendance_ids']
 
-        if config_ids:
-            raise UserError(_('You cannot modify a preset that is currently in use by a PoS session.'))
+    def _compute_count_linked_orders(self):
+        for record in self:
+            record.count_linked_orders = self.env['pos.order'].search_count([('preset_id', '=', record.id)])
 
-        return super().write(vals)
+    def _compute_count_linked_config(self):
+        for record in self:
+            record.count_linked_config = self.env['pos.config'].search_count([
+                '|', ('default_preset_id', '=', record.id),
+                ('available_preset_ids', 'in', record.id)
+            ])
 
     # Slots are created directly here in the form of dates, to avoid polluting
     # the database with a “slots” model. All we need is the slot time, and with the preset
@@ -45,24 +68,36 @@ class PosPreset(models.Model):
         self.ensure_one()
         usage = self._compute_slots_usage()
         date_now = datetime.now()
-        interval = timedelta(minutes=self.x_minutes)
-        date_now_opening = datetime(date_now.year, date_now.month, date_now.day, int(self.hour_opening), int((self.hour_opening % 1) * 60))
-        date_now_closing = datetime(date_now.year, date_now.month, date_now.day, int(self.hour_closing), int((self.hour_closing % 1) * 60))
-        slots = []
-
-        start = date_now_opening
-        keeper = 0
-        while start <= date_now_closing and keeper < 1000:
-            slots.append({
-                'datetime': start,
-                'sql_datetime': start.strftime("%Y-%m-%d %H:%M:%S"),
-                'humain_readable': start.strftime("%H:%M"),
-            })
-            keeper += 1
-            start += interval
-
-        for slot in slots:
-            slot['order_ids'] = usage.get(slot['sql_datetime'], [])
+        interval = timedelta(minutes=self.interval_time)
+        slots = {}
+
+        # Compute slots for next 7 days
+        next_7_days = [date_now + timedelta(days=i) for i in range(7)]
+        for day in next_7_days:
+            day_of_week = day.weekday()
+            date = day.strftime("%Y-%m-%d")
+            slots[date] = {}
+
+            if self.interval_time <= 0:
+                continue
+
+            for attendance_id in self.attendance_ids.filtered(lambda a: int(a.dayofweek) == day_of_week):
+                date_opening = datetime(day.year, day.month, day.day, int(attendance_id.hour_from % 24), int((attendance_id.hour_from % 1) * 60))
+                date_closing = datetime(day.year, day.month, day.day, int(attendance_id.hour_to % 24), int((attendance_id.hour_to % 1) * 60))
+
+                start = date_opening
+                while start <= date_closing:
+                    sql_datetime = start.strftime("%Y-%m-%d %H:%M:%S")
+                    slots[date][sql_datetime] = {
+                        'periode': attendance_id.day_period,
+                        'datetime': start,
+                        'sql_datetime': start.strftime("%Y-%m-%d %H:%M:%S"),
+                        'humain_readable': start.strftime("%H:%M"),
+                    }
+                    start += interval
+
+                for slot in slots[date].items():
+                    slot[1]['order_ids'] = usage.get(slot[1]['sql_datetime'], [])
 
         return slots
 
@@ -71,7 +106,9 @@ class PosPreset(models.Model):
         orders = self.env['pos.order'].search([
             ('preset_id', '=', self.id),
             ('session_id.state', '=', 'opened'),
+            ('preset_time', '!=', False),
             ('state', 'in', ['draft', 'paid', 'invoiced']),
+            ('create_date', '>=', fields.Datetime.now() - timedelta(days=1))
         ])
         for order in orders:
             sql_datetime_str = order.preset_time.strftime("%Y-%m-%d %H:%M:%S")
@@ -82,3 +119,23 @@ class PosPreset(models.Model):
             usage[sql_datetime_str].append(order.id)
 
         return usage
+
+    def action_open_linked_orders(self):
+        self.ensure_one()
+        return {
+            'name': _('Linked Orders'),
+            'view_mode': 'list',
+            'res_model': 'pos.order',
+            'type': 'ir.actions.act_window',
+            'domain': [('preset_id', '=', self.id)],
+        }
+
+    def action_open_linked_config(self):
+        self.ensure_one()
+        return {
+            'name': _('Linked POS Configurations'),
+            'view_mode': 'list',
+            'res_model': 'pos.config',
+            'type': 'ir.actions.act_window',
+            'domain': ['|', ('default_preset_id', '=', self.id), ('available_preset_ids', 'in', self.id)]
+        }

--- a/addons/point_of_sale/models/pos_session.py
+++ b/addons/point_of_sale/models/pos_session.py
@@ -131,7 +131,7 @@ class PosSession(models.Model):
 
     @api.model
     def _load_pos_data_models(self, config_id):
-        return ['pos.config', 'pos.preset', 'pos.order', 'pos.order.line', 'pos.pack.operation.lot', 'pos.payment', 'pos.payment.method', 'pos.printer',
+        return ['pos.config', 'pos.preset', 'resource.calendar.attendance', 'pos.order', 'pos.order.line', 'pos.pack.operation.lot', 'pos.payment', 'pos.payment.method', 'pos.printer',
             'pos.category', 'pos.bill', 'res.company', 'account.tax', 'account.tax.group', 'product.template', 'product.product', 'product.attribute', 'product.attribute.custom.value',
             'product.template.attribute.line', 'product.template.attribute.value', 'product.combo', 'product.combo.item', 'product.packaging', 'res.users', 'res.partner',
             'decimal.precision', 'uom.uom', 'uom.category', 'res.country', 'res.country.state', 'res.lang', 'product.pricelist', 'product.pricelist.item', 'product.category',

--- a/None
+++ b/addons/point_of_sale/models/resource_calendar_attendance.py
@@ -0,0 +1,16 @@
+from odoo import api, models
+
+
+class ResourceCalendarAttendance(models.Model):
+    _inherit = ['resource.calendar.attendance', 'pos.load.mixin']
+
+    @api.model
+    def _load_pos_data_domain(self, data):
+        attendance_ids = []
+        for preset in data['pos.preset']:
+            attendance_ids += preset['attendance_ids']
+        return [('id', 'in', attendance_ids)]
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return ['id', 'hour_from', 'hour_to', 'dayofweek', 'day_period']
