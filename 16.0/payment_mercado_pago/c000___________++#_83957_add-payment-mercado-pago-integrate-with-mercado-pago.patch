PR: https://github.com/odoo/odoo/pull/83957

From: 15058b6739d75b3fe3a203c0d5ddbfdd2cce91ce
From: Horacio Tellez
Date: 2022-08-30 18:21:54

Structural Changes: 5
Total Changes: 278

[ADD] payment_mercado_pago: integrate with Mercado Pago

Mercado Pago is the largest online payment platform in Latin America,
supports more countries, currencies and payment methods in the region
than other PSPs, and is more accessible to small businesses.

This commit integrates Odoo with a combination of the Checkout Pro and
Checkout API solutions of Mercado Pago to implement payments with
redirection to the provider's payment page.

Task - 2704764

Part-of: odoo/odoo#83957
Co-authored-by: Antoine Vandevenne (anv) <anv@odoo.com>

================================= pseudo patch: =================================

--- a/None
+++ b/addons/payment_mercado_pago/models/__init__.py
@@ -0,0 +1,5 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from . import account_payment_method
+from . import payment_acquirer
+from . import payment_transaction

--- a/None
+++ b/addons/payment_mercado_pago/models/account_payment_method.py
@@ -0,0 +1,14 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, models
+
+
+class AccountPaymentMethod(models.Model):
+    _inherit = 'account.payment.method'
+
+    @api.model
+    def _get_payment_method_information(self):
+        res = super()._get_payment_method_information()
+        res['mercado_pago'] = {'mode': 'unique', 'domain': [('type', '=', 'bank')]}
+        return res

--- a/None
+++ b/addons/payment_mercado_pago/models/payment_acquirer.py
@@ -0,0 +1,96 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import logging
+import pprint
+
+import requests
+from werkzeug import urls
+
+from odoo import _, api, fields, models
+from odoo.exceptions import ValidationError
+
+from odoo.addons.payment_mercado_pago.const import SUPPORTED_CURRENCIES
+
+
+_logger = logging.getLogger(__name__)
+
+
+class PaymentAcquirer(models.Model):
+    _inherit = 'payment.acquirer'
+
+    provider = fields.Selection(
+        selection_add=[('mercado_pago', "Mercado Pago")], ondelete={'mercado_pago': 'set default'}
+    )
+    mercado_pago_access_token = fields.Char(
+        string="Mercado Pago Access Token",
+        required_if_provider='mercado_pago',
+        groups='base.group_system',
+    )
+
+    # === BUSINESS METHODS === #
+
+    @api.model
+    def _get_compatible_acquirers(self, *args, currency_id=None, **kwargs):
+        """ Override of `payment` to unlist Mercado Pago acquirers for unsupported currencies. """
+        acquirers = super()._get_compatible_acquirers(*args, currency_id=currency_id, **kwargs)
+
+        currency = self.env['res.currency'].browse(currency_id).exists()
+        if currency and currency.name not in SUPPORTED_CURRENCIES:
+            acquirers = acquirers.filtered(lambda a: a.provider != 'mercado_pago')
+
+        return acquirers
+
+    def _mercado_pago_make_request(self, endpoint, payload=None, method='POST'):
+        """ Make a request to Mercado Pago API at the specified endpoint.
+
+        Note: self.ensure_one()
+
+        :param str endpoint: The endpoint to be reached by the request.
+        :param dict payload: The payload of the request.
+        :param str method: The HTTP method of the request.
+        :return The JSON-formatted content of the response.
+        :rtype: dict
+        :raise ValidationError: If an HTTP error occurs.
+        """
+        self.ensure_one()
+
+        url = urls.url_join('https://api.mercadopago.com', endpoint)
+        headers = {'Authorization': f'Bearer {self.mercado_pago_access_token}'}
+        try:
+            if method == 'GET':
+                response = requests.get(url, params=payload, headers=headers, timeout=10)
+            else:
+                response = requests.post(url, json=payload, headers=headers, timeout=10)
+                try:
+                    response.raise_for_status()
+                except requests.exceptions.HTTPError:
+                    _logger.exception(
+                        "Invalid API request at %s with data:\n%s", url, pprint.pformat(payload),
+                    )
+                    response_content = response.json()
+                    error_code = response_content.get('error')
+                    error_message = response_content.get('message')
+                    raise ValidationError("Mercado Pago: " + _(
+                        "The communication with the API failed. Mercado Pago gave us the following "
+                        "information: '%s' (code %s)", error_message, error_code
+                    ))
+        except (requests.exceptions.ConnectionError, requests.exceptions.Timeout):
+            _logger.exception("Unable to reach endpoint at %s", url)
+            raise ValidationError(
+                "Mercado Pago: " + _("Could not establish the connection to the API.")
+            )
+        return response.json()
+
+    def _get_default_payment_method_id(self):
+        self.ensure_one()
+
+        if self.provider != 'mercado_pago':
+            return super()._get_default_payment_method_id()
+        return self.env.ref('payment_mercado_pago.payment_method_mercado_pago').id
+
+    def _neutralize(self):
+        super()._neutralize()
+
+        self._neutralize_fields('mercado_pago', [
+            'mercado_pago_access_token',
+        ])

--- a/None
+++ b/addons/payment_mercado_pago/models/payment_transaction.py
@@ -0,0 +1,163 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import logging
+import pprint
+
+from werkzeug import urls
+
+from odoo import _, models
+from odoo.exceptions import ValidationError
+
+from odoo.addons.payment_mercado_pago.const import TRANSACTION_STATUS_MAPPING
+from odoo.addons.payment_mercado_pago.controllers.main import MercadoPagoController
+
+
+_logger = logging.getLogger(__name__)
+
+
+class PaymentTransaction(models.Model):
+    _inherit = 'payment.transaction'
+
+    def _get_specific_rendering_values(self, processing_values):
+        """ Override of `payment` to return Mercado Pago-specific rendering values.
+
+        Note: self.ensure_one() from `_get_rendering_values`.
+
+        :param dict processing_values: The generic and specific processing values of the transaction
+        :return: The dict of acquirer-specific processing values.
+        :rtype: dict
+        """
+        res = super()._get_specific_rendering_values(processing_values)
+        if self.provider != 'mercado_pago':
+            return res
+
+        # Initiate the payment and retrieve the payment link data.
+        payload = self._mercado_pago_prepare_preference_request_payload()
+        _logger.info(
+            "Sending '/checkout/preferences' request for link creation:\n%s",
+            pprint.pformat(payload),
+        )
+        api_url = self.acquirer_id._mercado_pago_make_request(
+            '/checkout/preferences', payload=payload
+        )['init_point' if self.acquirer_id.state == 'enabled' else 'sandbox_init_point']
+
+        # Extract the payment link URL and embed it in the redirect form.
+        rendering_values = {
+            'api_url': api_url,
+        }
+        return rendering_values
+
+    def _mercado_pago_prepare_preference_request_payload(self):
+        """ Create the payload for the preference request based on the transaction values.
+
+        :return: The request payload.
+        :rtype: dict
+        """
+        base_url = self.acquirer_id.get_base_url()
+        return_url = urls.url_join(base_url, MercadoPagoController._return_url)
+        webhook_url = urls.url_join(
+            base_url, f'{MercadoPagoController._webhook_url}/{self.reference}'
+        )  # Append the reference to identify the transaction from the webhook notification data.
+        return {
+            'auto_return': 'all',
+            'back_urls': {
+                'success': return_url,
+                'pending': return_url,
+                'failure': return_url,
+            },
+            'external_reference': self.reference,
+            'items': [{
+                'title': self.reference,
+                'quantity': 1,
+                'currency_id': self.currency_id.name,
+                'unit_price': self.amount,
+            }],
+            'notification_url': webhook_url,
+            'payer': {
+                'name': self.partner_name,
+                'email': self.partner_email,
+                'phone': {
+                    'number': self.partner_phone,
+                },
+                'address': {
+                    'zip_code': self.partner_zip,
+                    'street_name': self.partner_address,
+                },
+            },
+            'payment_methods': {
+                'installments': 1,  # Prevent MP from proposing several installments for a payment.
+            },
+        }
+
+    def _get_tx_from_notification_data(self, provider, notification_data):
+        """ Override of `payment` to find the transaction based on Mercado Pago data.
+
+        :param str provider: The provider of the acquirer that handled the transaction.
+        :param dict notification_data: The notification data sent by the provider.
+        :return: The transaction if found.
+        :rtype: recordset of `payment.transaction`
+        :raise ValidationError: If inconsistent data were received.
+        :raise ValidationError: If the data match no transaction.
+        """
+        tx = super()._get_tx_from_notification_data(provider, notification_data)
+        if provider != 'mercado_pago' or len(tx) == 1:
+            return tx
+
+        reference = notification_data.get('external_reference')
+        if not reference:
+            raise ValidationError("Mercado Pago: " + _("Received data with missing reference."))
+
+        tx = self.search([('reference', '=', reference), ('provider', '=', 'mercado_pago')])
+        if not tx:
+            raise ValidationError(
+                "Mercado Pago: " + _("No transaction found matching reference %s.", reference)
+            )
+        return tx
+
+    def _process_notification_data(self, notification_data):
+        """ Override of `payment` to process the transaction based on Mercado Pago data.
+
+        Note: self.ensure_one() from `_process_notification_data`
+
+        :param dict notification_data: The notification data sent by the provider.
+        :return: None
+        :raise ValidationError: If inconsistent data were received.
+        """
+        super()._process_notification_data(notification_data)
+        if self.provider != 'mercado_pago':
+            return
+
+        payment_id = notification_data.get('payment_id')
+        if not payment_id:
+            raise ValidationError("Mercado Pago: " + _("Received data with missing payment id."))
+        if self.operation != 'refund':
+            self.acquirer_reference = payment_id
+
+        # Verify the notification data.
+        verified_payment_data = self.acquirer_id._mercado_pago_make_request(
+            f'/v1/payments/{self.acquirer_reference}', method='GET'
+        )
+
+        payment_status = verified_payment_data.get('status')
+        if not payment_status:
+            raise ValidationError("Mercado Pago: " + _("Received data with missing status."))
+
+        if payment_status in TRANSACTION_STATUS_MAPPING['pending']:
+            self._set_pending()
+        elif payment_status in TRANSACTION_STATUS_MAPPING['done']:
+            self._set_done()
+
+            # Immediately post-process the transaction if it is a refund, as the post-processing
+            # will not be triggered by a customer browsing the transaction from the portal.
+            if self.operation == 'refund':
+                self.env.ref('payment.cron_post_process_payment_tx')._trigger()
+        elif payment_status in TRANSACTION_STATUS_MAPPING['canceled']:
+            self._set_canceled()
+        else:  # Classify unsupported payment status as the `error` tx state.
+            _logger.warning(
+                "Received data for transaction with reference %s with invalid payment status: %s",
+                self.reference, payment_status
+            )
+            self._set_error(
+                "Mercado Pago: " + _("Received data with invalid status: %s", payment_status)
+            )
