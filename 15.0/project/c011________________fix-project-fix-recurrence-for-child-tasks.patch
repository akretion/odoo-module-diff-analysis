PR: https://github.com/odoo/odoo/pull/

From: 808a965b4171a386f3987071c19cc27783ba0119
From: Thibault Libioulle
Date: 2021-09-24 10:30:19

Structural Changes: 1
Total Changes: 44

[FIX] project: fix recurrence for child tasks

Previously, only the direct children of a recurrent tasks were copied
during a recurrence. Also, the child tasks which had a recurrence were
copied with the recurrence_id of the initial subtask, which lead the new
subtask to be linked with the recurrence of the initial subtask.

With this commit we copy the children until the 3rd layer. Also,
we hard copy the recurrence of the initial subtask and link this new
recurrence with the new subtask, to make it decoupled from the initial
subtask recurrence. Furthermore, if several initial subtasks has been
created with a same recurrence, only the first subtask is copied.

PR: #77126

task-2522076

================================= pseudo patch: =================================

--- a/addons/project/models/project_task_recurrence.py
+++ b/addons/project/models/project_task_recurrence.py
@@ -44,9 +44,9 @@ class ProjectTaskRecurrence(models.Model):
     _name = 'project.task.recurrence'
     _description = 'Task Recurrence'
 
-    task_ids = fields.One2many('project.task', 'recurrence_id')
+    task_ids = fields.One2many('project.task', 'recurrence_id', copy=False)
     next_recurrence_date = fields.Date()
-    recurrence_left = fields.Integer(string="Number of Tasks Left to Create")
+    recurrence_left = fields.Integer(string="Number of Tasks Left to Create", copy=False)
 
     repeat_interval = fields.Integer(string='Repeat Every', default=1)
     repeat_unit = fields.Selection([
@@ -212,19 +212,43 @@ class ProjectTaskRecurrence(models.Model):
         create_values['user_ids'] = False
         return create_values
 
+    def _create_subtasks(self, task, new_task, depth=3):
+        if depth == 0 or not task.child_ids:
+            return
+        children = []
+        child_recurrence = []
+        # copy the subtasks of the original task
+        for child in task.child_ids:
+            if child.recurrence_id and child.recurrence_id.id in child_recurrence:
+                # The subtask has been generated by another subtask in the childs
+                # This subtasks is skipped as it will be meant to be a copy of the first
+                # task of the recurrence we just created.
+                continue
+            child_values = self._new_task_values(child)
+            child_values['parent_id'] = new_task.id
+            if child.recurrence_id:
+                # The subtask has a recurrence, the recurrence is thus copied rather than used
+                # with raw reference in order to decouple the recurrence of the initial subtask
+                # from the recurrence of the copied subtask which will live its own life and generate
+                # subsequent tasks.
+                child_recurrence += [child.recurrence_id.id]
+                child_values['recurrence_id'] = child.recurrence_id.copy().id
+            if child.child_ids and depth > 1:
+                # If child has childs in the following layer and we will have to copy layer, we have to
+                # first create the new_child record in order to have a new parent_id reference for the
+                # "grandchildren" tasks
+                new_child = self.env['project.task'].sudo().create(child_values)
+                self._create_subtasks(child, new_child, depth=depth - 1)
+            else:
+                children.append(child_values)
+        children_tasks = self.env['project.task'].sudo().create(children)
+
     def _create_next_task(self):
         for recurrence in self:
             task = recurrence.sudo().task_ids[-1]
             create_values = recurrence._new_task_values(task)
             new_task = self.env['project.task'].sudo().create(create_values)
-            if not new_task.parent_id and task.child_ids:
-                children = []
-                # copy the subtasks of the original task
-                for child in task.child_ids:
-                    child_values = recurrence._new_task_values(child)
-                    child_values['parent_id'] = new_task.id
-                    children.append(child_values)
-                self.env['project.task'].create(children)
+            recurrence._create_subtasks(task, new_task, depth=3)
 
     def _set_next_recurrence_date(self):
         today = fields.Date.today()
