PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Structural Changes: 4
Total Changes: 160

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_sips/models/__init__.py
+++ b/addons/payment_sips/models/__init__.py
@@ -1,4 +1,4 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_transaction

--- a/addons/payment_sips/models/payment_acquirer.py
+++ b/addons/payment_sips/models/payment_provider.py
@@ -8,10 +8,10 @@ from odoo import api, fields, models
 from .const import SUPPORTED_CURRENCIES
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('sips', "Sips")], ondelete={'sips': 'set default'})
     sips_merchant_id = fields.Char(
         string="Merchant ID", help="The ID solely used to identify the merchant account with Sips",
@@ -30,15 +30,15 @@ class PaymentAcquirer(models.Model):
         string="Interface Version", required_if_provider='sips', default="HP_2.31")
 
     @api.model
-    def _get_compatible_acquirers(self, *args, currency_id=None, **kwargs):
-        """ Override of payment to unlist Sips acquirers when the currency is not supported. """
-        acquirers = super()._get_compatible_acquirers(*args, currency_id=currency_id, **kwargs)
+    def _get_compatible_providers(self, *args, currency_id=None, **kwargs):
+        """ Override of payment to unlist Sips providers when the currency is not supported. """
+        providers = super()._get_compatible_providers(*args, currency_id=currency_id, **kwargs)
 
         currency = self.env['res.currency'].browse(currency_id).exists()
         if currency and currency.name not in SUPPORTED_CURRENCIES:
-            acquirers = acquirers.filtered(lambda a: a.provider != 'sips')
+            providers = providers.filtered(lambda p: p.code != 'sips')
 
-        return acquirers
+        return providers
 
     def _sips_generate_shasign(self, data):
         """ Generate the shasign for incoming or outgoing communications.

--- a/addons/payment_sips/models/payment_transaction.py
+++ b/addons/payment_sips/models/payment_transaction.py
@@ -20,7 +20,7 @@ class PaymentTransaction(models.Model):
     _inherit = 'payment.transaction'
 
     @api.model
-    def _compute_reference(self, provider, prefix=None, separator='-', **kwargs):
+    def _compute_reference(self, provider_code, prefix=None, separator='-', **kwargs):
         """ Override of payment to ensure that Sips requirements for references are satisfied.
 
         Sips requirements for transaction are as follows:
@@ -34,18 +34,18 @@ class PaymentTransaction(models.Model):
           transactions are created simultaneously, `_compute_reference` ensures the uniqueness of
           references by suffixing a sequence number.
 
-        :param str provider: The provider of the acquirer handling the transaction
+        :param str provider_code: The code of the provider handling the transaction
         :param str prefix: The custom prefix used to compute the full reference
         :param str separator: The custom separator used to separate the prefix from the suffix
         :return: The unique reference for the transaction
         :rtype: str
         """
-        if provider == 'sips':
+        if provider_code == 'sips':
             # We use an empty separator for cosmetic reasons: As the default prefix is 'tx', we want
             # the singularized prefix to look like 'tx2020...' and not 'txx2020...'.
             prefix = payment_utils.singularize_reference_prefix(separator='')
             separator = 'x'  # Still, we need a dedicated separator between the prefix and the seq.
-        return super()._compute_reference(provider, prefix=prefix, separator=separator, **kwargs)
+        return super()._compute_reference(provider_code, prefix=prefix, separator=separator, **kwargs)
 
     def _get_specific_rendering_values(self, processing_values):
         """ Override of payment to return Sips-specific rendering values.
@@ -53,46 +53,46 @@ class PaymentTransaction(models.Model):
         Note: self.ensure_one() from `_get_processing_values`
 
         :param dict processing_values: The generic and specific processing values of the transaction
-        :return: The dict of acquirer-specific processing values
+        :return: The dict of provider-specific processing values
         :rtype: dict
         """
         res = super()._get_specific_rendering_values(processing_values)
-        if self.provider != 'sips':
+        if self.provider_code != 'sips':
             return res
 
         base_url = self.get_base_url()
         data = {
             'amount': payment_utils.to_minor_currency_units(self.amount, self.currency_id),
             'currencyCode': SUPPORTED_CURRENCIES[self.currency_id.name],  # The ISO 4217 code
-            'merchantId': self.acquirer_id.sips_merchant_id,
+            'merchantId': self.provider_id.sips_merchant_id,
             'normalReturnUrl': urls.url_join(base_url, SipsController._return_url),
             'automaticResponseUrl': urls.url_join(base_url, SipsController._webhook_url),
             'transactionReference': self.reference,
             'statementReference': self.reference,
-            'keyVersion': self.acquirer_id.sips_key_version,
+            'keyVersion': self.provider_id.sips_key_version,
             'returnContext': json.dumps(dict(reference=self.reference)),
         }
-        api_url = self.acquirer_id.sips_prod_url if self.acquirer_id.state == 'enabled' \
-            else self.acquirer_id.sips_test_url
+        api_url = self.provider_id.sips_prod_url if self.provider_id.state == 'enabled' \
+            else self.provider_id.sips_test_url
         data = '|'.join([f'{k}={v}' for k, v in data.items()])
         return {
             'api_url': api_url,
             'Data': data,
-            'InterfaceVersion': self.acquirer_id.sips_version,
-            'Seal': self.acquirer_id._sips_generate_shasign(data),
+            'InterfaceVersion': self.provider_id.sips_version,
+            'Seal': self.provider_id._sips_generate_shasign(data),
         }
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of payment to find the transaction based on Sips data.
 
-        :param str provider: The provider of the acquirer that handled the transaction
+        :param str provider_code: The code of the provider that handled the transaction
         :param dict notification_data: The notification data sent by the provider
         :return: The transaction if found
         :rtype: recordset of `payment.transaction`
         :raise: ValidationError if the data match no transaction
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'sips' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'sips' or len(tx) == 1:
             return tx
 
         data = self._sips_notification_data_to_object(notification_data['Data'])
@@ -102,7 +102,7 @@ class PaymentTransaction(models.Model):
             return_context = json.loads(data.get('returnContext', '{}'))
             reference = return_context.get('reference')
 
-        tx = self.search([('reference', '=', reference), ('provider', '=', 'sips')])
+        tx = self.search([('reference', '=', reference), ('provider_code', '=', 'sips')])
         if not tx:
             raise ValidationError(
                 "Sips: " + _("No transaction found matching reference %s.", reference)
@@ -119,11 +119,11 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'sips':
+        if self.provider_code != 'sips':
             return
 
         data = self._sips_notification_data_to_object(notification_data.get('Data'))
-        self.acquirer_reference = data.get('transactionReference')
+        self.provider_reference = data.get('transactionReference')
         response_code = data.get('responseCode')
         if response_code in RESPONSE_CODES_MAPPING['pending']:
             status = "pending"
