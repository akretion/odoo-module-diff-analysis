PR: https://github.com/odoo/odoo/pull/

From: 7642754122185174ef6716e6d39407c604dcf8e3
From: Sanjay Jamod
Date: 2018-01-26 15:56:57

Structural Changes: 11
Total Changes: 66

[IMP] account: Added feature to create recurrent vendor bills,

- One need to first enable this from Accounting Settings to use this feature
- This feature works for Vendor Bills which are validated/paid
- Once activated, user can see one option in Vendor Bills to set particular record to be recurrent document and can define the recurrency period. This will automatically create draft documents(by mean of Scheduled Actions) as per recurrency configuration.

Was PR #21411. was task 34884.

================================= pseudo patch: =================================

--- a/addons/account/models/account_invoice.py
+++ b/addons/account/models/account_invoice.py
@@ -229,6 +229,12 @@ class AccountInvoice(models.Model):
             payment_lines.update(line.mapped('matched_debit_ids.debit_move_id.id'))
         self.payment_move_line_ids = self.env['account.move.line'].browse(list(payment_lines))
 
+    @api.depends('date_invoice', 'is_recurrency_enabled', 'recurrency_interval', 'recurrency_type')
+    def _compute_next_recurrency_date(self):
+        #initially set the recurrency_date
+        for invoice in self.filtered(lambda inv: inv.is_recurrency_enabled and inv.recurrency_interval and inv.recurrency_type and inv.date_invoice and not inv.next_recurrency_date):
+            invoice.next_recurrency_date = invoice._get_next_recurrency_date(invoice.date_invoice)
+
     name = fields.Char(string='Reference/Description', index=True,
         readonly=True, states={'draft': [('readonly', False)]}, copy=False, help='The name that will be used on account move lines')
 
@@ -367,6 +373,18 @@ class AccountInvoice(models.Model):
     #fields use to set the sequence, on the first invoice of the journal
     sequence_number_next = fields.Char(string='Next Number', compute="_get_sequence_number_next", inverse="_set_sequence_next")
     sequence_number_next_prefix = fields.Char(string='Next Number Prefix', compute="_get_sequence_prefix")
+    #recurrent vendor bills fields
+    is_recurrency_enabled = fields.Boolean(string="Generate Recurring Document(s)", copy=False, help="Tick this box to generate recurring bills. The recurring bills will only be generated if this bill is validated.")
+    recurrency_interval = fields.Integer(string='Every', default=1, copy=False, help="Define the recurrency of the vendor bill.")
+    recurrency_type = fields.Selection([
+        ('days', 'Day(s)'),
+        ('weeks', 'Week(s)'),
+        ('months', 'Month(s)'),
+        ('years', 'Year(s)'),
+    ], string="Recurrency Type", default='months', copy=False)
+    # Technical field depicting whether the document is generated by cron or by user
+    is_recurring_document = fields.Boolean(string="Recurring Document", copy=False)
+    next_recurrency_date = fields.Date(compute=_compute_next_recurrency_date, _string='Next Recurrency Date', copy=False, store=True)
 
     _sql_constraints = [
         ('number_uniq', 'unique(number, company_id, journal_id, type)', 'Invoice Number must be unique per Company!'),
@@ -450,6 +468,52 @@ class AccountInvoice(models.Model):
                 self.type == 'in_refund' and self.state == 'draft' and _('Vendor Credit Note') or \
                 self.type == 'in_refund' and _('Vendor Credit Note - %s') % (self.number)
 
+    def _get_next_recurrency_date(self, current_date):
+        """
+        This method is used to return next date based on recurrency configuration of the record.
+
+        :param current_date: Origin date from which next date is to be generated.
+        :returns: future date on which a duplicated document will be generated by crons.
+        """
+        assert self.recurrency_type, "Invalid `Recurrency` interval! Please set it to either of these: 'Day(s)', 'Week(s)', 'Month(s)' or 'Year(s)'."
+        self.ensure_one()
+        recurring_next_date = fields.Date.from_string(current_date) + relativedelta(**{self.recurrency_type: self.recurrency_interval})
+        # In case of monthly recurrent invoice, future invoices should always be created on same day as of it's main invoice but
+        # if the reference invoice was made on last day of the month, then the recurring invoice should be created on last day of next month.
+        # example, main invoice is set to 31st Jan, the next invoices should be created on 28/29th Feb, 31st Mar, 30 Apr and so on
+        if self.recurrency_type == 'months':
+            reference_invoice_day = fields.Date.from_string(self.date_invoice).day
+            recurring_next_date += relativedelta(day=reference_invoice_day)
+            if reference_invoice_day == fields.Date.from_string(self.date_invoice) + relativedelta(day=31):
+                recurring_next_date += relativedelta(day=31)
+        return recurring_next_date
+
+    @api.model
+    def _cron_generate_recurring_vendor_bill(self):
+        today = fields.Date.today()
+        domain = [
+            ('is_recurrency_enabled', '=', True),
+            ('state', 'not in', ['draft', 'cancel']),
+            ('next_recurrency_date', '<=', today)
+        ]
+        for invoice in self.search(domain):
+            while invoice.next_recurrency_date <= today:
+                invoice._create_recurrent_invoice()
+                invoice.next_recurrency_date = invoice._get_next_recurrency_date(invoice.next_recurrency_date)
+
+    def _create_recurrent_invoice(self):
+        self.ensure_one()
+        invoice = self.copy({
+            'origin': '',
+            'date_invoice': self.next_recurrency_date,
+            'is_recurring_document': True,
+        })
+        # set the due date
+        #invoice._onchange_payment_term_date_invoice()
+        link = '<a href=# data-oe-model=account.invoice data-oe-id=%d>%s</a>' % (self.id, self.number)
+        invoice.message_post(body=_('This bill has been generated by %s') % link)
+        return invoice
+
     @api.model
     def create(self, vals):
         onchanges = {

--- a/addons/account/models/res_config_settings.py
+++ b/addons/account/models/res_config_settings.py
@@ -56,10 +56,12 @@ class ResConfigSettings(models.TransientModel):
     tax_exigibility = fields.Boolean(string='Cash Basis', related='company_id.tax_exigibility')
     tax_cash_basis_journal_id = fields.Many2one('account.journal', related='company_id.tax_cash_basis_journal_id', string="Tax Cash Basis Journal")
     account_hide_setup_bar = fields.Boolean(string='Hide Setup Bar', related='company_id.account_setup_bar_closed',help="Tick if you wish to hide the setup bar on the dashboard")
+    group_allow_recurring = fields.Boolean(string="Recurring Vendor Bills", implied_group="account.group_allow_recurring")
 
     @api.multi
     def set_values(self):
         super(ResConfigSettings, self).set_values()
+        self.env.ref('account.recurrent_vendor_bills_cron').write({'active': self.group_allow_recurring})
         if self.group_multi_currency:
             self.env.ref('base.group_user').write({'implied_ids': [(4, self.env.ref('product.group_sale_pricelist').id)]})
         """ install a chart of accounts for the given company (if required) """
