PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:20 + add:0, change matches:
-    _inherit = 'base.partner.merge.automatic.wizard'
-    _inherit = 'ir.actions.server'
-    _inherit = 'ir.asset'
-    _inherit = "ir.attachment"
-    _inherit = 'ir.model.data'
-    _inherit = 'ir.qweb'
-    _inherit = 'ir.rule'
-    _inherit = 'ir.ui.menu'
-    _inherit = "res.company"
-    _inherit = 'res.config.settings'
-    _inherit = "res.lang"
-    _inherit = 'res.users'
-    _inherit = 'ir.ui.view'
-    _inherit = 'ir.asset'
-    _inherit = 'ir.attachment'
-    _inherit = 'website.menu'
-    _inherit = 'website.page'
-    _inherit = 'website'
-    _inherit = 'ir.model'
-    _inherit = 'ir.model.fields'

Total Changes: 208

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/website/models/assets.py
+++ b/addons/website/models/assets.py
@@ -9,8 +9,8 @@ from werkzeug.urls import url_parse
 from odoo import api, models
 
 
-class Assets(models.AbstractModel):
-    _inherit = 'web_editor.assets'
+class Web_EditorAssets(models.AbstractModel):
+    _inherit = ['web_editor.assets']
 
     @api.model
     def make_scss_customization(self, url, values):
@@ -144,7 +144,7 @@ class Assets(models.AbstractModel):
     @api.model
     def _get_custom_attachment(self, custom_url, op='='):
         """
-        See web_editor.Assets._get_custom_attachment
+        See web_editor.Web_EditorAssets._get_custom_attachment
         Extend to only return the attachments related to the current website.
         """
         if self.env.user.has_group('website.group_website_designer'):
@@ -162,7 +162,7 @@ class Assets(models.AbstractModel):
     @api.model
     def _get_custom_asset(self, custom_url):
         """
-        See web_editor.Assets._get_custom_asset
+        See web_editor.Web_EditorAssets._get_custom_asset
         Extend to only return the views related to the current website.
         """
         if self.env.user.has_group('website.group_website_designer'):
@@ -182,7 +182,7 @@ class Assets(models.AbstractModel):
     @api.model
     def _save_asset_attachment_hook(self):
         """
-        See web_editor.Assets._save_asset_attachment_hook
+        See web_editor.Web_EditorAssets._save_asset_attachment_hook
         Extend to add website ID at ir.attachment creation.
         """
         return self._add_website_id(super()._save_asset_attachment_hook())
@@ -190,7 +190,7 @@ class Assets(models.AbstractModel):
     @api.model
     def _save_asset_hook(self):
         """
-        See web_editor.Assets._save_asset_hook
+        See web_editor.Web_EditorAssets._save_asset_hook
         Extend to add website ID at ir.asset creation.
         """
         return self._add_website_id(super()._save_asset_hook())

--- a/addons/website/models/base_partner_merge.py
+++ b/addons/website/models/base_partner_merge.py
@@ -4,8 +4,8 @@
 from odoo import api, models
 
 
-class MergePartnerAutomatic(models.TransientModel):
-    _inherit = 'base.partner.merge.automatic.wizard'
+class BasePartnerMergeAutomaticWizard(models.TransientModel):
+    _inherit = ['base.partner.merge.automatic.wizard']
 
     @api.model
     def _update_foreign_keys(self, src_partners, dst_partner):

--- a/addons/website/models/ir_actions_server.py
+++ b/addons/website/models/ir_actions_server.py
@@ -6,11 +6,10 @@ from odoo.http import request
 from odoo.tools.json import scriptsafe as json_scriptsafe
 
 
-class ServerAction(models.Model):
+class IrActionsServer(models.Model):
     """ Add website option in server actions. """
 
-    _name = 'ir.actions.server'
-    _inherit = 'ir.actions.server'
+    _inherit = ['ir.actions.server']
 
     xml_id = fields.Char('External ID', compute='_compute_xml_id', help="ID of the action if defined in a XML file")
     website_path = fields.Char('Website Path')
@@ -45,7 +44,7 @@ class ServerAction(models.Model):
     @api.model
     def _get_eval_context(self, action):
         """ Override to add the request object in eval_context. """
-        eval_context = super(ServerAction, self)._get_eval_context(action)
+        eval_context = super()._get_eval_context(action)
         if action.state == 'code':
             eval_context['request'] = request
             eval_context['json'] = json_scriptsafe
@@ -57,5 +56,5 @@ class ServerAction(models.Model):
             returned by the basic server action behavior. Note that response has
             priority over action, avoid using both.
         """
-        res = super(ServerAction, self)._run_action_code_multi(eval_context)
+        res = super()._run_action_code_multi(eval_context)
         return eval_context.get('response', res)

--- a/addons/website/models/ir_asset.py
+++ b/addons/website/models/ir_asset.py
@@ -4,7 +4,7 @@ from odoo import fields, models
 
 
 class IrAsset(models.Model):
-    _inherit = 'ir.asset'
+    _inherit = ['ir.asset']
 
     key = fields.Char(copy=False) # used to resolve multiple assets in a multi-website environment
     website_id = fields.Many2one('website', ondelete='cascade')

--- a/addons/website/models/ir_attachment.py
+++ b/addons/website/models/ir_attachment.py
@@ -5,9 +5,9 @@ from odoo import fields, models, api
 _logger = logging.getLogger(__name__)
 
 
-class Attachment(models.Model):
+class IrAttachment(models.Model):
 
-    _inherit = "ir.attachment"
+    _inherit = ["ir.attachment"]
 
     # Technical field used to resolve multiple attachments in a multi-website environment.
     key = fields.Char()
@@ -23,7 +23,7 @@ class Attachment(models.Model):
 
     @api.model
     def get_serving_groups(self):
-        return super(Attachment, self).get_serving_groups() + ['website.group_website_designer']
+        return super().get_serving_groups() + ['website.group_website_designer']
 
     def _get_serve_attachment(self, url, extra_domain=None, order=None):
         website = self.env['website'].get_current_website()

--- a/addons/website/models/ir_binary.py
+++ b/addons/website/models/ir_binary.py
@@ -2,7 +2,7 @@ from odoo import models
 
 
 class IrBinary(models.AbstractModel):
-    _inherit = 'ir.binary'
+    _inherit = ['ir.binary']
 
     def _find_record(
             self, xmlid=None, res_model='ir.attachment', res_id=None,

--- a/addons/website/models/ir_http.py
+++ b/addons/website/models/ir_http.py
@@ -58,8 +58,8 @@ def get_request_website():
     return request and getattr(request, 'website', False) or False
 
 
-class Http(models.AbstractModel):
-    _inherit = 'ir.http'
+class IrHttp(models.AbstractModel):
+    _inherit = ['ir.http']
 
     def routing_map(self, key=None):
         if not key and request:
@@ -279,7 +279,7 @@ class Http(models.AbstractModel):
         website_id = False
         if getattr(request, 'is_frontend', True):
             website_id = self.env.get('website_id', request.website_routing)
-        return super(Http, self.with_context(website_id=website_id)).get_nearest_lang(lang_code)
+        return super(IrHttp, self.with_context(website_id=website_id)).get_nearest_lang(lang_code)
 
     @classmethod
     def _get_default_lang(cls):
@@ -426,7 +426,7 @@ class Http(models.AbstractModel):
 
     @api.model
     def get_frontend_session_info(self):
-        session_info = super(Http, self).get_frontend_session_info()
+        session_info = super().get_frontend_session_info()
         geoip_country_code = request.geoip.country_code
         geoip_phone_code = request.env['res.country']._phone_code_for(geoip_country_code) if geoip_country_code else None
         session_info.update({

--- a/addons/website/models/ir_model.py
+++ b/addons/website/models/ir_model.py
@@ -5,7 +5,9 @@ from odoo import models
 
 
 class BaseModel(models.AbstractModel):
-    _inherit = 'base'
+    _name = "base"
+
+    _inherit = ['base']
 
     def get_base_url(self):
         """

--- a/addons/website/models/ir_model_data.py
+++ b/addons/website/models/ir_model_data.py
@@ -9,7 +9,7 @@ _logger = logging.getLogger(__name__)
 
 
 class IrModelData(models.Model):
-    _inherit = 'ir.model.data'
+    _inherit = ['ir.model.data']
 
     @api.model
     def _process_end_unlink_record(self, record):

--- a/addons/website/models/ir_module_module.py
+++ b/addons/website/models/ir_module_module.py
@@ -14,7 +14,6 @@ _logger = logging.getLogger(__name__)
 
 
 class IrModuleModule(models.Model):
-    _name = "ir.module.module"
     _description = 'Module'
     _inherit = _name
 

--- a/addons/website/models/ir_qweb.py
+++ b/addons/website/models/ir_qweb.py
@@ -18,10 +18,10 @@ _logger = logging.getLogger(__name__)
 re_background_image = re.compile(r"(background-image\s*:\s*url\(\s*['\"]?\s*)([^)'\"]+)")
 
 
-class IrQWeb(models.AbstractModel):
+class IrQweb(models.AbstractModel):
     """ IrQWeb object for rendering stuff in the website context """
 
-    _inherit = 'ir.qweb'
+    _inherit = ['ir.qweb']
 
     URL_ATTRS = {
         'form': 'action',
@@ -199,7 +199,7 @@ class IrQWeb(models.AbstractModel):
         return atts
 
     def _get_bundles_to_pregenarate(self):
-        js_assets, css_assets = super(IrQWeb, self)._get_bundles_to_pregenarate()
+        js_assets, css_assets = super()._get_bundles_to_pregenarate()
         assets = {
             'website.backend_assets_all_wysiwyg',
             'website.assets_all_wysiwyg',

--- a/addons/website/models/ir_qweb_fields.py
+++ b/addons/website/models/ir_qweb_fields.py
@@ -7,12 +7,12 @@ from odoo import api, models, _
 from odoo.addons.website.tools import add_form_signature
 
 
-class Contact(models.AbstractModel):
-    _inherit = 'ir.qweb.field.contact'
+class IrQwebFieldContact(models.AbstractModel):
+    _inherit = ['ir.qweb.field.contact']
 
     @api.model
     def get_available_options(self):
-        options = super(Contact, self).get_available_options()
+        options = super().get_available_options()
         options.update(
             website_description=dict(type='boolean', string=_('Display the website description')),
             UserBio=dict(type='boolean', string=_('Display the biography')),
@@ -21,8 +21,8 @@ class Contact(models.AbstractModel):
         return options
 
 
-class HTML(models.AbstractModel):
-    _inherit = 'ir.qweb.field.html'
+class IrQwebFieldHtml(models.AbstractModel):
+    _inherit = ['ir.qweb.field.html']
 
     @api.model
     def value_to_html(self, value, options):

--- a/addons/website/models/ir_rule.py
+++ b/addons/website/models/ir_rule.py
@@ -3,7 +3,7 @@ from odoo.addons.website.models import ir_http
 
 
 class IrRule(models.Model):
-    _inherit = 'ir.rule'
+    _inherit = ['ir.rule']
 
     @api.model
     def _eval_context(self):

--- a/addons/website/models/ir_ui_menu.py
+++ b/addons/website/models/ir_ui_menu.py
@@ -5,7 +5,7 @@ from odoo.http import request
 
 
 class IrUiMenu(models.Model):
-    _inherit = 'ir.ui.menu'
+    _inherit = ['ir.ui.menu']
 
     @api.model
     @tools.ormcache_context('self._uid', keys=('lang', 'force_action',))

--- a/addons/website/models/ir_ui_view.py
+++ b/addons/website/models/ir_ui_view.py
@@ -14,9 +14,8 @@ from odoo.http import request
 _logger = logging.getLogger(__name__)
 
 
-class View(models.Model):
+class IrUiView(models.Model):
 
-    _name = "ir.ui.view"
     _inherit = ["ir.ui.view", "website.seo.metadata"]
 
     website_id = fields.Many2one('website', ondelete='cascade', string="Website")
@@ -99,7 +98,7 @@ class View(models.Model):
         '''
         current_website_id = self.env.context.get('website_id')
         if not current_website_id or self.env.context.get('no_cow'):
-            return super(View, self).write(vals)
+            return super().write(vals)
 
         # We need to consider inactive views when handling multi-website cow
         # feature (to copy inactive children views, to search for specific
@@ -117,7 +116,7 @@ class View(models.Model):
 
             # No need of COW if the view is already specific
             if view.website_id:
-                super(View, view).write(vals)
+                super(IrUiView, view).write(vals)
                 continue
 
             # Ensure the cache of the pages stay consistent when doing COW.
@@ -135,7 +134,7 @@ class View(models.Model):
                 ('website_id', '=', current_website_id)
             ], limit=1)
             if website_specific_view:
-                super(View, website_specific_view).write(vals)
+                super(IrUiView, website_specific_view).write(vals)
                 continue
 
             # Set key to avoid copy() to generate an unique key as we want the
@@ -165,7 +164,7 @@ class View(models.Model):
                     # Trigger COW on inheriting views
                     inherit_child.write({'inherit_id': website_specific_view.id})
 
-            super(View, website_specific_view).write(vals)
+            super(IrUiView, website_specific_view).write(vals)
 
         return True
 
@@ -210,7 +209,7 @@ class View(models.Model):
                 record.with_context(website_id=website_id).write({
                     'inherit_id': specific_parent_view_id,
                 })
-        super(View, self)._create_all_specific_views(processed_modules)
+        super()._create_all_specific_views(processed_modules)
 
     def unlink(self):
         '''This implements COU (copy-on-unlink). When deleting a generic page
@@ -232,7 +231,7 @@ class View(models.Model):
             for view in self.filtered(lambda view: not view.website_id):
                 specific_views += view._get_specific_views()
 
-        result = super(View, self + specific_views).unlink()
+        result = super(IrUiView, self + specific_views).unlink()
         self.env.registry.clear_cache('templates')
         return result
 
@@ -281,7 +280,7 @@ class View(models.Model):
         # method should never be called in a generic context, even for
         # tests)
         self = self.with_context(website_id=self.env['website'].get_current_website().id)
-        return super(View, self).get_related_views(key, bundles=bundles)
+        return super().get_related_views(key, bundles=bundles)
 
     def filter_duplicate(self):
         """ Filter current recordset only keeping the most suitable view per distinct key.
@@ -308,7 +307,7 @@ class View(models.Model):
 
     @api.model
     def _view_get_inherited_children(self, view):
-        extensions = super(View, self)._view_get_inherited_children(view)
+        extensions = super()._view_get_inherited_children(view)
         return extensions.filter_duplicate()
 
     @api.model
@@ -328,7 +327,7 @@ class View(models.Model):
 
     @api.model
     def _get_inheriting_views_domain(self):
-        domain = super(View, self)._get_inheriting_views_domain()
+        domain = super()._get_inheriting_views_domain()
         current_website = self.env['website'].browse(self._context.get('website_id'))
         website_views_domain = current_website.website_domain()
         # when rendering for the website we have to include inactive views
@@ -340,9 +339,9 @@ class View(models.Model):
     @api.model
     def _get_inheriting_views(self):
         if not self._context.get('website_id'):
-            return super(View, self)._get_inheriting_views()
+            return super()._get_inheriting_views()
 
-        views = super(View, self.with_context(active_test=False))._get_inheriting_views()
+        views = super(IrUiView, self.with_context(active_test=False))._get_inheriting_views()
         # prefer inactive website-specific views over active generic ones
         return views.filter_duplicate().filtered('active')
 
@@ -395,7 +394,7 @@ class View(models.Model):
                 _logger.warning("Could not find view object with xml_id '%s'", xml_id)
                 raise ValueError('View %r in website %r not found' % (xml_id, self._context['website_id']))
             return view.id
-        return super(View, self.sudo())._get_view_id(xml_id)
+        return super(IrUiView, self.sudo())._get_view_id(xml_id)
 
     @tools.ormcache('self.id', cache='templates')
     def _get_cached_visibility(self):
@@ -455,14 +454,14 @@ class View(models.Model):
             lang_code = self.env['website'].browse(website_id).default_lang_id.code
             return lang_code
         else:
-            return super(View, self).get_default_lang_code()
+            return super().get_default_lang_code()
 
     def _read_template_keys(self):
-        return super(View, self)._read_template_keys() + ['website_id']
+        return super()._read_template_keys() + ['website_id']
 
     @api.model
     def _save_oe_structure_hook(self):
-        res = super(View, self)._save_oe_structure_hook()
+        res = super()._save_oe_structure_hook()
         res['website_id'] = self.env['website'].get_current_website().id
         return res
 
@@ -473,7 +472,7 @@ class View(models.Model):
         In that case, we don't want to flag the generic view as noupdate.
         '''
         if not self._context.get('website_id'):
-            super(View, self)._set_noupdate()
+            super()._set_noupdate()
 
     def save(self, value, xpath=None):
         self.ensure_one()
@@ -491,7 +490,7 @@ class View(models.Model):
             ], limit=1)
             if website_specific_view:
                 self = website_specific_view
-        super(View, self).save(value, xpath=xpath)
+        super().save(value, xpath=xpath)
 
     @api.model
     def _get_allowed_root_attrs(self):
@@ -519,7 +518,7 @@ class View(models.Model):
         return res
 
     def _update_field_translations(self, fname, translations, digest=None, source_lang=None):
-        return super(View, self.with_context(no_cow=True))._update_field_translations(fname, translations, digest=digest, source_lang=source_lang)
+        return super(IrUiView, self.with_context(no_cow=True))._update_field_translations(fname, translations, digest=digest, source_lang=source_lang)
 
     def _get_base_lang(self):
         """ Returns the default language of the website as the base language if the record is bound to it """

--- a/addons/website/models/mixins.py
+++ b/addons/website/models/mixins.py
@@ -16,9 +16,8 @@ from odoo.tools.json import scriptsafe as json_safe
 logger = logging.getLogger(__name__)
 
 
-class SeoMetadata(models.AbstractModel):
+class WebsiteSeoMetadata(models.AbstractModel):
 
-    _name = 'website.seo.metadata'
     _description = 'SEO metadata'
 
     is_seo_optimized = fields.Boolean("SEO optimized", compute='_compute_is_seo_optimized')
@@ -98,9 +97,8 @@ class SeoMetadata(models.AbstractModel):
         }
 
 
-class WebsiteCoverPropertiesMixin(models.AbstractModel):
+class WebsiteCover_PropertiesMixin(models.AbstractModel):
 
-    _name = 'website.cover_properties.mixin'
     _description = 'Cover Properties Website Mixin'
 
     cover_properties = fields.Text('Cover Properties', default=lambda s: json_safe.dumps(s._default_cover_properties()))
@@ -149,13 +147,12 @@ class WebsiteCoverPropertiesMixin(models.AbstractModel):
             old_cover_properties = json_safe.loads(item.cover_properties)
             cover_properties['resize_class'] = old_cover_properties.get('resize_class', classes[0])
             copy_vals['cover_properties'] = json_safe.dumps(cover_properties)
-            super(WebsiteCoverPropertiesMixin, item).write(copy_vals)
+            super(WebsiteCover_PropertiesMixin, item).write(copy_vals)
         return True
 
 
 class WebsiteMultiMixin(models.AbstractModel):
 
-    _name = 'website.multi.mixin'
     _description = 'Multi Website Mixin'
 
     website_id = fields.Many2one(
@@ -177,7 +174,6 @@ class WebsiteMultiMixin(models.AbstractModel):
 
 class WebsitePublishedMixin(models.AbstractModel):
 
-    _name = "website.published.mixin"
     _description = 'Website Published Mixin'
 
     website_published = fields.Boolean('Visible on current website', related='is_published', readonly=False)
@@ -291,7 +287,6 @@ class WebsitePublishedMultiMixin(WebsitePublishedMixin):
 
 class WebsiteSearchableMixin(models.AbstractModel):
     """Mixin to be inherited by all models that need to searchable through website"""
-    _name = 'website.searchable.mixin'
     _description = 'Website Searchable Mixin'
 
     @api.model

--- a/addons/website/models/res_company.py
+++ b/addons/website/models/res_company.py
@@ -4,8 +4,8 @@ from odoo import api, fields, models, _
 from odoo.exceptions import ValidationError
 
 
-class Company(models.Model):
-    _inherit = "res.company"
+class ResCompany(models.Model):
+    _inherit = ["res.company"]
 
     website_id = fields.Many2one('website', compute='_compute_website_id', store=True)
 

--- a/addons/website/models/res_config_settings.py
+++ b/addons/website/models/res_config_settings.py
@@ -9,7 +9,7 @@ from werkzeug import urls
 
 
 class ResConfigSettings(models.TransientModel):
-    _inherit = 'res.config.settings'
+    _inherit = ['res.config.settings']
 
     def _default_website(self):
         return self.env['website'].search([('company_id', '=', self.env.company.id)], limit=1)

--- a/addons/website/models/res_lang.py
+++ b/addons/website/models/res_lang.py
@@ -6,14 +6,14 @@ from odoo.exceptions import UserError
 from odoo.http import request
 
 
-class Lang(models.Model):
-    _inherit = "res.lang"
+class ResLang(models.Model):
+    _inherit = ["res.lang"]
 
     def write(self, vals):
         if 'active' in vals and not vals['active']:
             if self.env['website'].search_count([('language_ids', 'in', self._ids)], limit=1):
                 raise UserError(_("Cannot deactivate a language that is currently used on a website."))
-        return super(Lang, self).write(vals)
+        return super().write(vals)
 
     @tools.ormcache_context(keys=("website_id",))
     def _get_frontend(self) -> LangDataDict:

--- a/addons/website/models/res_partner.py
+++ b/addons/website/models/res_partner.py
@@ -4,8 +4,8 @@ import werkzeug.urls
 
 from odoo import models, fields, api
 
-class Partner(models.Model):
-    _name = 'res.partner'
+
+class ResPartner(models.Model):
     _inherit = ['res.partner', 'website.published.multi.mixin']
 
     visitor_ids = fields.One2many('website.visitor', 'partner_id', string='Visitors')

--- a/addons/website/models/res_users.py
+++ b/addons/website/models/res_users.py
@@ -9,7 +9,7 @@ _logger = logging.getLogger(__name__)
 
 
 class ResUsers(models.Model):
-    _inherit = 'res.users'
+    _inherit = ['res.users']
 
     website_id = fields.Many2one('website', related='partner_id.website_id', store=True, related_sudo=False, readonly=False)
 

--- a/addons/website/models/theme_models.py
+++ b/addons/website/models/theme_models.py
@@ -11,8 +11,7 @@ from odoo.addons.base.models.ir_asset import AFTER_DIRECTIVE, APPEND_DIRECTIVE,
 _logger = logging.getLogger(__name__)
 
 
-class ThemeAsset(models.Model):
-    _name = 'theme.ir.asset'
+class ThemeIrAsset(models.Model):
     _description = 'Theme Asset'
 
     key = fields.Char()
@@ -49,8 +48,7 @@ class ThemeAsset(models.Model):
         return new_asset
 
 
-class ThemeView(models.Model):
-    _name = 'theme.ir.ui.view'
+class ThemeIrUiView(models.Model):
     _description = 'Theme UI View'
 
     def compute_arch_fs(self):
@@ -109,8 +107,7 @@ class ThemeView(models.Model):
         return new_view
 
 
-class ThemeAttachment(models.Model):
-    _name = 'theme.ir.attachment'
+class ThemeIrAttachment(models.Model):
     _description = 'Theme Attachments'
 
     name = fields.Char(required=True)
@@ -133,8 +130,7 @@ class ThemeAttachment(models.Model):
         return new_attach
 
 
-class ThemeMenu(models.Model):
-    _name = 'theme.website.menu'
+class ThemeWebsiteMenu(models.Model):
     _description = 'Website Theme Menu'
 
     name = fields.Char(required=True, translate=True)
@@ -174,8 +170,7 @@ class ThemeMenu(models.Model):
         return new_menu
 
 
-class ThemePage(models.Model):
-    _name = 'theme.website.page'
+class ThemeWebsitePage(models.Model):
     _description = 'Website Theme Page'
 
     url = fields.Char()
@@ -214,8 +209,7 @@ class ThemePage(models.Model):
         return new_page
 
 
-class Theme(models.AbstractModel):
-    _name = 'theme.utils'
+class ThemeUtils(models.AbstractModel):
     _description = 'Theme Utils'
     _auto = False
 
@@ -292,8 +286,8 @@ class Theme(models.AbstractModel):
 
     @api.model
     def _toggle_asset(self, key, active):
-        ThemeAsset = self.env['theme.ir.asset'].sudo().with_context(active_test=False)
-        obj = ThemeAsset.search([('key', '=', key)])
+        ThemeIrAsset = self.env['theme.ir.asset'].sudo().with_context(active_test=False)
+        obj = ThemeIrAsset.search([('key', '=', key)])
         website = self.env['website'].get_current_website()
         if obj:
             obj = obj.copy_ids.filtered(lambda x: x.website_id == website)
@@ -354,7 +348,7 @@ class Theme(models.AbstractModel):
 
 
 class IrUiView(models.Model):
-    _inherit = 'ir.ui.view'
+    _inherit = ['ir.ui.view']
 
     theme_template_id = fields.Many2one('theme.ir.ui.view', copy=False)
 
@@ -381,25 +375,25 @@ class IrUiView(models.Model):
 
 
 class IrAsset(models.Model):
-    _inherit = 'ir.asset'
+    _inherit = ['ir.asset']
 
     theme_template_id = fields.Many2one('theme.ir.asset', copy=False)
 
 
 class IrAttachment(models.Model):
-    _inherit = 'ir.attachment'
+    _inherit = ['ir.attachment']
 
     key = fields.Char(copy=False)
     theme_template_id = fields.Many2one('theme.ir.attachment', copy=False)
 
 
 class WebsiteMenu(models.Model):
-    _inherit = 'website.menu'
+    _inherit = ['website.menu']
 
     theme_template_id = fields.Many2one('theme.website.menu', copy=False)
 
 
 class WebsitePage(models.Model):
-    _inherit = 'website.page'
+    _inherit = ['website.page']
 
     theme_template_id = fields.Many2one('theme.website.page', copy=False)

--- a/addons/website/models/website.py
+++ b/addons/website/models/website.py
@@ -92,7 +92,6 @@ DEFAULT_BLOCKED_THIRD_PARTY_DOMAINS = '\n'.join([  # noqa: FLY002
 
 class Website(models.Model):
 
-    _name = "website"
     _description = "Website"
     _order = "sequence, id"
 

--- a/addons/website/models/website_configurator_feature.py
+++ b/addons/website/models/website_configurator_feature.py
@@ -8,7 +8,6 @@ from odoo.exceptions import ValidationError
 
 class WebsiteConfiguratorFeature(models.Model):
 
-    _name = 'website.configurator.feature'
     _description = 'Website Configurator Feature'
     _order = 'sequence'
 

--- a/addons/website/models/website_controller_page.py
+++ b/addons/website/models/website_controller_page.py
@@ -4,7 +4,6 @@ from odoo import api, fields, models
 
 
 class WebsiteControllerPage(models.Model):
-    _name = 'website.controller.page'
     _inherits = {'ir.ui.view': 'view_id'}
     _inherit = [
         'website.published.multi.mixin',

--- a/addons/website/models/website_form.py
+++ b/addons/website/models/website_form.py
@@ -7,8 +7,8 @@ from odoo.http import request
 from odoo.osv import expression
 
 
-class website_form_config(models.Model):
-    _inherit = 'website'
+class Website(models.Model):
+    _inherit = ['website']
 
     def _website_form_last_record(self):
         if request and request.session.form_builder_model_model:
@@ -16,10 +16,9 @@ class website_form_config(models.Model):
         return False
 
 
-class website_form_model(models.Model):
-    _name = 'ir.model'
+class IrModel(models.Model):
     _description = 'Models'
-    _inherit = 'ir.model'
+    _inherit = ['ir.model']
 
     website_form_access = fields.Boolean('Allowed to use in forms', help='Enable the form builder feature for this model.')
     website_form_default_field_id = fields.Many2one('ir.model.fields', 'Field for custom form data', domain="[('model', '=', model), ('ttype', '=', 'text')]", help="Specify the field which will contain meta and custom form fields datas.")
@@ -128,11 +127,10 @@ class website_form_model(models.Model):
         )
 
 
-class website_form_model_fields(models.Model):
+class IrModelFields(models.Model):
     """ fields configuration for form builder """
-    _name = 'ir.model.fields'
     _description = 'Fields'
-    _inherit = 'ir.model.fields'
+    _inherit = ['ir.model.fields']
 
     def init(self):
         # set all existing unset website_form_blacklisted fields to ``true``

--- a/addons/website/models/website_menu.py
+++ b/addons/website/models/website_menu.py
@@ -12,9 +12,8 @@ from odoo.http import request
 from odoo.tools.translate import html_translate
 
 
-class Menu(models.Model):
+class WebsiteMenu(models.Model):
 
-    _name = "website.menu"
     _description = "Website Menu"
 
     _parent_store = True
@@ -131,7 +130,7 @@ class Menu(models.Model):
             menus_to_remove |= self.env['website.menu'].search([('url', '=', menu.url),
                                                                 ('website_id', '!=', False),
                                                                 ('id', '!=', menu.id)])
-        return super(Menu, menus_to_remove).unlink()
+        return super(WebsiteMenu, menus_to_remove).unlink()
 
     @api.ondelete(at_uninstall=False)
     def _unlink_except_master_tags(self):

--- a/addons/website/models/website_page.py
+++ b/addons/website/models/website_page.py
@@ -9,8 +9,7 @@ from odoo.tools import escape_psql, SQL
 from odoo.tools.translate import _
 
 
-class Page(models.Model):
-    _name = 'website.page'
+class WebsitePage(models.Model):
     _inherits = {'ir.ui.view': 'view_id'}
     _inherit = [
         'website.published.multi.mixin',
@@ -160,7 +159,7 @@ class Page(models.Model):
                 if vals['visibility'] != 'restricted_group':
                     vals['groups_id'] = False
         self.env.registry.clear_cache()  # write on page == write on view that invalid cache
-        return super(Page, self).write(vals)
+        return super().write(vals)
 
     def get_website_meta(self):
         self.ensure_one()

--- a/addons/website/models/website_page_properties.py
+++ b/addons/website/models/website_page_properties.py
@@ -3,8 +3,7 @@
 from odoo import api, fields, models
 
 
-class PagePropertiesBase(models.TransientModel):
-    _name = 'website.page.properties.base'
+class WebsitePagePropertiesBase(models.TransientModel):
     _description = "Page Properties Base"
 
     target_model_id = fields.Reference(selection='_selection_target_model_id', required=True)
@@ -128,8 +127,7 @@ class PagePropertiesBase(models.TransientModel):
         return not view.visibility
 
 
-class PageProperties(models.TransientModel):
-    _name = 'website.page.properties'
+class WebsitePageProperties(models.TransientModel):
     _description = "Page Properties"
     _inherit = [
         'website.page.properties.base',

--- a/addons/website/models/website_rewrite.py
+++ b/addons/website/models/website_rewrite.py
@@ -12,7 +12,6 @@ _logger = logging.getLogger(__name__)
 
 class WebsiteRoute(models.Model):
     _rec_name = 'path'
-    _name = 'website.route'
     _description = "All Website Route"
     _order = 'path'
 
@@ -49,7 +48,6 @@ class WebsiteRoute(models.Model):
 
 
 class WebsiteRewrite(models.Model):
-    _name = 'website.rewrite'
     _description = "Website rewrite"
 
     name = fields.Char('Name', required=True)

--- a/addons/website/models/website_snippet_filter.py
+++ b/addons/website/models/website_snippet_filter.py
@@ -12,7 +12,6 @@ _logger = logging.getLogger(__name__)
 
 
 class WebsiteSnippetFilter(models.Model):
-    _name = 'website.snippet.filter'
     _inherit = ['website.published.multi.mixin']
     _description = 'Website Snippet Filter'
     _order = 'name ASC'

--- a/addons/website/models/website_visitor.py
+++ b/addons/website/models/website_visitor.py
@@ -16,7 +16,6 @@ from odoo.osv import expression
 
 
 class WebsiteTrack(models.Model):
-    _name = 'website.track'
     _description = 'Visited Pages'
     _order = 'visit_datetime DESC'
     _log_access = False
@@ -28,7 +27,6 @@ class WebsiteTrack(models.Model):
 
 
 class WebsiteVisitor(models.Model):
-    _name = 'website.visitor'
     _description = 'Website Visitor'
     _order = 'id DESC'
 
