PR: https://github.com/odoo/odoo/pull/183085

From: 76336f6123a6c4d33684c89288bae2eff76b65ff
From: Joseph (jcb)
Date: 2024-10-17 16:42:26

Breaking data model changes scores: del:2.4 + add:0, change matches:
-    tracking_number = fields.Char(string="Order Number", compute='_compute_tracking_number', search='_search_tracking_number')
+    tracking_number = fields.Char(string="Order Number", readonly=True, copy=False)
-    sequence_number = fields.Integer(string='Order Sequence Number', help='A sequence number that is incremented with each order', default=1)
-    login_number = fields.Integer(string='Login Sequence Number', help='A sequence number that is incremented each time a user resumes the pos session', default=0)

Total Changes: 111

[IMP] point_of_sale,*: revamp order pos_reference

In this commit, we are making the order numbers to be sequential across a
session. To accomplish this, we introduce `pos.session.order_seq_id` field which
points to an `ir.sequence` record. Each time an order is to be created, we first
request for a set of `pos.order` references namely `pos_reference`,
`sequence_number` an `tracking_number` that are derived from the mentioned field.

`pos_reference` is now in the form: YYLL-SSS-FOOOO where:
    * YY is the current year
    * LL is the login number (which serves as proxy to the device)
    * SSS is the session id
    * F is 1 or 0 (1 if sequence number is generated from client)
    * OOOO is the sequence number.

As a result, orders created in the same session will be assigned serialized
`sequence_number`. Deviation from the sequence (happens when order is started
from offline mode) will be explicit because we assigned `F=1` (see
`pos_reference`) and the `sequence_number` is negative.

We are also replacing the `login_number` field with a sequence
(`pos.session.login_number_seq_id`) to avoid error from concurrent update of the
`loign_number`.

closes odoo/odoo#183085

Task-id: 4141140
Related: odoo/enterprise#71632
Related: odoo/upgrade#6603
Signed-off-by: David Monnom (moda) <moda@odoo.com>

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/pos_order.py
+++ b/addons/point_of_sale/models/pos_order.py
@@ -44,7 +44,7 @@ class PosOrder(models.Model):
         _logger.warning('session %s (ID: %s) was closed but received order %s (total: %s) belonging to it',
                         closed_session.name,
                         closed_session.id,
-                        order['name'],
+                        order['uuid'],
                         order['amount_total'])
         rescue_session = PosSession.search([
             ('state', 'not in', ('closed', 'closing_control')),
@@ -52,11 +52,11 @@ class PosOrder(models.Model):
             ('config_id', '=', closed_session.config_id.id),
         ], limit=1)
         if rescue_session:
-            _logger.warning('reusing recovery session %s for saving order %s', rescue_session.name, order['name'])
+            _logger.warning('reusing recovery session %s for saving order %s', rescue_session.name, order['uuid'])
             rescue_session.write({'state': 'opened'})
             return rescue_session
 
-        _logger.warning('attempting to create recovery session for saving order %s', order['name'])
+        _logger.warning('attempting to create recovery session for saving order %s', order['uuid'])
         new_session = PosSession.create({
             'config_id': closed_session.config_id.id,
             'name': _('(RESCUE FOR %(session)s)', session=closed_session.name),
@@ -70,11 +70,6 @@ class PosOrder(models.Model):
 
         return new_session
 
-    @api.depends('sequence_number', 'session_id')
-    def _compute_tracking_number(self):
-        for record in self:
-            record.tracking_number = str((record.session_id.id % 10) * 100 + record.sequence_number % 100).zfill(3)
-
     @api.model
     def _load_pos_data_domain(self, data):
         return [('state', '=', 'draft'), ('session_id', '=', data['pos.session']['data'][0]['id'])]
@@ -108,7 +103,6 @@ class PosOrder(models.Model):
         if not existing_order:
             pos_order = self.create({
                 **{key: value for key, value in order.items() if key != 'name'},
-                'pos_reference': order.get('name')
             })
             pos_order = pos_order.with_company(pos_order.company_id)
         else:
@@ -290,7 +284,7 @@ class PosOrder(models.Model):
     country_code = fields.Char(related='company_id.account_fiscal_country_id.code')
     pricelist_id = fields.Many2one('product.pricelist', string='Pricelist')
     partner_id = fields.Many2one('res.partner', string='Customer', change_default=True, index='btree_not_null')
-    sequence_number = fields.Integer(string='Sequence Number', help='A session-unique sequence number for the order', default=1)
+    sequence_number = fields.Integer(string='Sequence Number', help='A session-unique sequence number for the order. Negative if generated from the client', default=1)
 
     session_id = fields.Many2one(
         'pos.session', string='Session', required=True, index=True,
@@ -314,7 +308,16 @@ class PosOrder(models.Model):
     floating_order_name = fields.Char(string='Order Name')
     general_note = fields.Text(string='General Note')
     nb_print = fields.Integer(string='Number of Print', readonly=True, copy=False, default=0)
-    pos_reference = fields.Char(string='Receipt Number', readonly=True, copy=False, index=True)
+    pos_reference = fields.Char(string='Receipt Number', readonly=True, copy=False, index=True, help="""
+        Human readable reference for this order.
+            * Format: YYLL-SSS-FOOOO
+            * YY is the year
+            * LL is the login number (proxy to the device)
+            * SSS is the session id
+            * F is 1 or 0 (1 if sequence number is generated from client)
+            * OOOO is the sequence number.
+    """
+    )
     sale_journal = fields.Many2one('account.journal', related='session_id.config_id.journal_id', string='Sales Journal', store=True, readonly=True, ondelete='restrict')
     fiscal_position_id = fields.Many2one(
         comodel_name='account.fiscal.position', string='Fiscal Position',
@@ -331,7 +334,7 @@ class PosOrder(models.Model):
     refunded_order_id = fields.Many2one('pos.order', compute='_compute_refund_related_fields', help="Order from which items were refunded in this order")
     has_refundable_lines = fields.Boolean('Has Refundable Lines', compute='_compute_has_refundable_lines')
     ticket_code = fields.Char(help='5 digits alphanumeric code to be used by portal user to request an invoice')
-    tracking_number = fields.Char(string="Order Number", compute='_compute_tracking_number', search='_search_tracking_number')
+    tracking_number = fields.Char(string="Order Number", readonly=True, copy=False)
     uuid = fields.Char(string='Uuid', readonly=True, default=lambda self: str(uuid4()), copy=False)
     email = fields.Char(string='Email', compute="_compute_contact_details", readonly=False, store=True)
     mobile = fields.Char(string='Mobile', compute="_compute_contact_details", readonly=False, store=True)
@@ -340,18 +343,6 @@ class PosOrder(models.Model):
     order_edit_tracking = fields.Boolean(related="config_id.order_edit_tracking", readonly=True)
     available_payment_method_ids = fields.Many2many('pos.payment.method', related='config_id.payment_method_ids', string='Available Payment Methods', readonly=True, store=False)
 
-    def _search_tracking_number(self, operator, value):
-        #search is made over the pos_reference field
-        #The pos_reference field is like 'Order 00001-001-0001'
-        if operator in ['ilike', '='] and isinstance(value, str):
-            if value[0] == '%' and value[-1] == '%':
-                value = value[1:-1]
-            value = value.zfill(3)
-            search = '% ____' + value[0] + '-___-__' + value[1:]
-            return [('pos_reference', operator, search or '')]
-        else:
-            raise NotImplementedError(_("Unsupported search operation"))
-
     @api.depends('lines.refund_orderline_ids', 'lines.refunded_orderline_id')
     def _compute_refund_related_fields(self):
         for order in self:
@@ -493,6 +484,11 @@ class PosOrder(models.Model):
         values.setdefault('pricelist_id', session.config_id.pricelist_id.id)
         values.setdefault('fiscal_position_id', session.config_id.default_fiscal_position_id.id)
         values.setdefault('company_id', session.config_id.company_id.id)
+        if values.get('tracking_number') is None and values.get('pos_reference') is None and values.get('sequence_number') is None:
+            pos_reference, sequence_number, tracking_number = session.get_next_order_refs()
+            values['pos_reference'] = pos_reference
+            values['sequence_number'] = sequence_number
+            values['tracking_number'] = tracking_number
         return values
 
     def write(self, vals):

--- a/addons/point_of_sale/models/pos_session.py
+++ b/addons/point_of_sale/models/pos_session.py
@@ -47,8 +47,8 @@ class PosSession(models.Model):
         required=True, readonly=True,
         index=True, copy=False, default='opening_control')
 
-    sequence_number = fields.Integer(string='Order Sequence Number', help='A sequence number that is incremented with each order', default=1)
-    login_number = fields.Integer(string='Login Sequence Number', help='A sequence number that is incremented each time a user resumes the pos session', default=0)
+    order_seq_id = fields.Many2one('ir.sequence', string='Order Sequence', readonly=True, copy=False, help='Used to generate the OOOO part of the pos_reference field of the pos.order model.')
+    login_number_seq_id = fields.Many2one('ir.sequence', string='Login Number Sequence', readonly=True, copy=False, help='Determines the number of times the UI is opened. It is used as proxy to the identity of the device where the UI is opened. And as such, it is the LL part of the pos_reference field of the pos.order model.')
 
     opening_notes = fields.Text(string="Opening Notes")
     closing_notes = fields.Text(string="Closing Notes")
@@ -141,7 +141,7 @@ class PosSession(models.Model):
     @api.model
     def _load_pos_data_fields(self, config_id):
         return [
-            'id', 'name', 'user_id', 'config_id', 'start_at', 'stop_at', 'sequence_number', 'login_number',
+            'id', 'name', 'user_id', 'config_id', 'start_at', 'stop_at',
             'payment_method_ids', 'state', 'update_stock_at_closing', 'cash_register_balance_start', 'access_token'
         ]
 
@@ -310,6 +310,46 @@ class PosSession(models.Model):
                 '\n'.join(f'{invoice.name} - {invoice.state}' for invoice in unposted_invoices)
             ))
 
+    def _create_sequences(self):
+        for session in self:
+            order_seq = self.env['ir.sequence'].sudo().create({
+                'name': _("PoS Order Sequence of Session %s", session.id),
+                'code': f'pos.order_{session.id}',
+            })
+            login_number_seq = self.env['ir.sequence'].sudo().create({
+                'name': _("Login Number Sequence of Session %s", session.id),
+                'code': f'pos.login_number_{session.id}',
+            })
+            session.write({
+                'order_seq_id': order_seq.id,
+                'login_number_seq_id': login_number_seq.id
+            })
+
+    def get_next_order_refs(self, login_number=0, ref_prefix=None, tracking_prefix=''):
+        """
+        Generates a consistent set of tracking_number, sequence_number and pos_reference for a new pos.order.
+        Side-effect: Calling this will increment the order_seq_id.
+        Convention: `login_number != 0` means the order is created in the classic PoS UI.
+            During self-ordering workflow (kiosk and mobile), login_number = 0 is used.
+        Returns:
+            (pos_reference: string, sequence_number: int, tracking_number: string)
+        """
+        self.ensure_one()
+
+        if ref_prefix is None:
+            ref_prefix = _("Order")
+
+        sequence_num = int(self.order_seq_id._next())
+
+        YY = fields.Datetime.now().strftime('%y')
+        LL = f"{login_number % 100:02}"
+        SSS = f"{self.id:03}"
+        F = 0  # -> means server-generated pos_reference
+        OOOO = f"{sequence_num:04}"
+        order_ref = f"{ref_prefix} {YY}{LL}-{SSS}-{F}{OOOO}"
+
+        return order_ref, sequence_num, tracking_prefix + f"{sequence_num:03}"
+
     @api.model_create_multi
     def create(self, vals_list):
         for vals in vals_list:
@@ -341,33 +381,20 @@ class PosSession(models.Model):
             sessions = super(PosSession, self.sudo()).create(vals_list)
         else:
             sessions = super().create(vals_list)
-        sessions.action_pos_session_open()
 
-        date_string = fields.Date.today().isoformat()
-        ir_sequence = self.env['ir.sequence'].sudo().search([('code', '=', f'pos.order_{date_string}')])
-        if not ir_sequence:
-            self.env['ir.sequence'].sudo().create({
-                'name': _("PoS Order"),
-                'padding': 0,
-                'code': f'pos.order_{date_string}',
-                'number_next': 1,
-                'number_increment': 1,
-                'company_id': self.env.company.id,
-            })
+        sessions._create_sequences()
+        sessions.action_pos_session_open()
 
         return sessions
 
     def unlink(self):
         self.statement_line_ids.unlink()
+        (self.order_seq_id | self.login_number_seq_id).unlink()
         return super(PosSession, self).unlink()
 
     def login(self):
         self.ensure_one()
-        login_number = self.login_number + 1
-        self.write({
-            'login_number': login_number,
-        })
-        return login_number
+        return self.login_number_seq_id._next()
 
     def action_pos_session_open(self):
         # we only open sessions that haven't already been opened
