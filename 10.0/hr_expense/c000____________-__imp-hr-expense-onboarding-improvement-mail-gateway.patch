PR: https://github.com/odoo/odoo/pull/

From: f066b1ec4f979f43467d88380bac4031c2567869
From: Yannick Tivisse
Date: 2016-06-21 12:09:48

Breaking data model changes score: 1, change matches:
-    account_id = fields.Many2one('account.account', string='Account', states={'post': [('readonly', True)], 'done': [('readonly', True)]}, default=lambda self: self.env['ir.property'].get('property_account_payable_id', 'account.chart.template'))

Total Changes: 149

[IMP] hr_expense: Onboarding improvement + mail gateway

1/ Modify the no content help message for hr_expense with a dynamic part
   which describe how to create a new expense by mail
2/ Mail gateway mechanism. New customizable email alias expense@domain
   that creates a new expense by sending an email to it. Check several things
   - Check that the email_from is the same than one of the employees or than
     on of the related users to employees. If not, send back an email to say that
     the expense will not be created.
   - If the email address is valid, check if something is between brackets '[]'
     If it is the case, check if it is linked to a product internal reference
     and set it accordingly. If nothing is found, use a default product
     'Fixed Cost'
   - If one/several float(s) are found in the mail subject, take the last
     occurence and set it as the expense total amount.
3/ If a product template is created, to not add taxes on it. We don't expect it
   to have additional taxes
4/ Under Expenses -> Configuration -> Expense Product, use a simplified product
   view with only the needed fields.
5/ When generating the account move lines, use the account defined on the expense
   line, not the sheet
6/ When creating a payment, make a reconciliation on the payable account move lines
   That way, if the total amount on the expense is paid, the expense will be set to
   paid automatically when registering a payment
7/ Add a one-page planner to explain how to use the email alias
8/ The field account_id on the expense sheet was informative. After some tests, it
   seems that it's more confusing than helping. So we removed it
9/ Add a domain on the field 'bank_journal_id' to select journals of
   type 'cash' or 'bank'
10/ If the number of expense lines is equal to 1, the expense summary on the expense
    sheet should be the same name the line. So the process can be done in one click

================================= pseudo patch: =================================

--- a/addons/hr_expense/models/__init__.py
+++ b/addons/hr_expense/models/__init__.py
@@ -4,3 +4,5 @@ import account_move_line
 import hr_department
 import hr_expense
 import product_template
+import res_config
+import web_planner

--- a/addons/hr_expense/models/hr_expense.py
+++ b/addons/hr_expense/models/hr_expense.py
@@ -1,9 +1,11 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from openerp import api, fields, models, _
-from openerp.exceptions import UserError
+import re
 
+from odoo import api, fields, models, _
+from odoo.exceptions import UserError
+from odoo.tools import email_split
 import openerp.addons.decimal_precision as dp
 
 
@@ -113,6 +115,7 @@ class HrExpense(models.Model):
             'context': {
                 'default_expense_line_ids': [line.id for line in self],
                 'default_employee_id': self[0].employee_id.id,
+                'default_name': self[0].name if len(self.ids) == 1 else ''
             }
         }
 
@@ -227,8 +230,8 @@ class HrExpense(models.Model):
     def _move_line_get(self):
         account_move = []
         for expense in self:
-            if expense.sheet_id and expense.sheet_id.account_id:
-                account = expense.sheet_id.account_id
+            if expense.account_id:
+                account = expense.account_id
             elif expense.product_id:
                 account = expense.product_id.product_tmpl_id._get_product_accounts()['expense']
                 if not account:
@@ -275,6 +278,82 @@ class HrExpense(models.Model):
         res['context'] = {'default_res_model': 'hr.expense', 'default_res_id': self.id}
         return res
 
+    @api.model
+    def get_empty_list_help(self, help_message):
+        if help_message:
+            alias_record = self.env.ref('hr_expense.mail_alias_expense')
+            if alias_record and alias_record.alias_domain and alias_record.alias_name:
+                dynamic_help = '<p>%s</p>' % _("""Create a new expense, or send receipts by email to %(link)s  to automatically create a new expense. Send an email right now and see it here.""") % {
+                    'link': "<a href='mailto:%(email)s'>%(email)s</a>" % {'email': '%s@%s' % (alias_record.alias_name, alias_record.alias_domain)}
+                }
+                return '<p class="oe_view_nocontent_create">%s</p>%s%s' % (
+                    _('Click to add a new expense'),
+                    dynamic_help,
+                    help_message)
+        return super(HrExpense, self).get_empty_list_help(help_message)
+
+    @api.model
+    def message_new(self, msg_dict, custom_values=None):
+        if custom_values is None:
+            custom_values = {}
+
+        # Retrieve the email address from the email field. The string is constructed like
+        # 'foo <bar>'. We will extract 'bar' from this
+        email_address = email_split(msg_dict.get('email_from', False))[0]
+
+        # Look after an employee who has this email address or an employee for whom the related
+        # user has this email address. In the case not employee is found, we send back an email
+        # to explain that the expense will not be created.
+        employee = self.env['hr.employee'].search([('work_email', 'ilike', email_address)], limit=1)
+        if not employee:
+            employee = self.env['hr.employee'].search([('user_id.email', 'ilike', email_address)], limit=1)
+        if not employee:
+            # Send back an email to explain why the expense has not been created
+            mail_template = self.env.ref('hr_expense.mail_template_data_expense_unknown_email_address')
+            mail_template.with_context(email_to=email_address).send_mail(self.env.ref('base.module_hr_expense').id)
+            return False
+
+        expense_description = msg_dict.get('subject', '')
+
+        # Match the first occurence of '[]' in the string and extract the content inside it
+        # Example: '[foo] bar (baz)' becomes 'foo'. This is potentially the product code
+        # of the product to encode on the expense. If not, take the default product instead
+        # which is 'Fixed Cost'
+        default_product = self.env.ref('hr_expense.product_product_fixed_cost')
+        pattern = '\[([^)]*)\]'
+        product_code = re.search(pattern, expense_description)
+        if product_code is None:
+            product = default_product
+        else:
+            expense_description = expense_description.replace(product_code.group(), '')
+            product = self.env['product.product'].search([('default_code', 'ilike', product_code.group(1))]) or default_product
+
+        pattern = '[-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?'
+        # Match the last occurence of a float in the string
+        # Example: '[foo] 50.3 bar 34.5' becomes '34.5'. This is potentially the price
+        # to encode on the expense. If not, take 1.0 instead
+        expense_price = re.findall(pattern, expense_description)
+        # TODO: International formatting
+        if not expense_price:
+            price = 1.0
+        else:
+            price = expense_price[-1][0]
+            expense_description = expense_description.replace(price, '')
+            try:
+                price = float(price)
+            except ValueError:
+                price = 1.0
+
+        custom_values.update({
+            'name': expense_description.strip(),
+            'employee_id': employee.id,
+            'product_id': product.id,
+            'product_uom_id': product.uom_id.id,
+            'quantity': 1,
+            'unit_amount': price
+        })
+        return super(HrExpense, self).message_new(msg_dict, custom_values)
+
 class HrExpenseSheet(models.Model):
 
     _name = "hr.expense.sheet"
@@ -304,7 +383,6 @@ class HrExpenseSheet(models.Model):
         help="The journal used when the expense is done.")
     bank_journal_id = fields.Many2one('account.journal', string='Bank Journal', states={'done': [('readonly', True)], 'post': [('readonly', True)]}, default=lambda self: self.env['account.journal'].search([('type', 'in', ['case', 'bank'])], limit=1), help="The payment method used when the expense is paid by the company.")
     accounting_date = fields.Date(string="Accounting Date")
-    account_id = fields.Many2one('account.account', string='Account', states={'post': [('readonly', True)], 'done': [('readonly', True)]}, default=lambda self: self.env['ir.property'].get('property_account_payable_id', 'account.chart.template'))
     account_move_id = fields.Many2one('account.move', string='Journal Entry', copy=False, track_visibility="onchange")
     department_id = fields.Many2one('hr.department', string='Department', states={'post': [('readonly', True)], 'done': [('readonly', True)]})
 
@@ -363,14 +441,6 @@ class HrExpenseSheet(models.Model):
     def _onchange_employee_id(self):
         self.address_id = self.employee_id.address_home_id
         self.department_id = self.employee_id.department_id
-        self.account_id = self.employee_id.address_home_id.id and self.employee_id.address_home_id.property_account_payable_id.id
-
-    @api.onchange('payment_mode')
-    def _onchange_payment_mode(self):
-        if self.payment_mode == 'own_account':
-            self.account_id = self.employee_id.address_home_id.property_account_payable_id.id
-        else:
-            self.account_id = self.bank_journal_id.default_credit_account_id.id        
 
     @api.one
     @api.depends('expense_line_ids')

--- a/addons/hr_expense/models/product_template.py
+++ b/addons/hr_expense/models/product_template.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from openerp import fields, models
+from openerp import api, fields, models
 
 
 class ProductTemplate(models.Model):
@@ -9,3 +9,10 @@ class ProductTemplate(models.Model):
 
     can_be_expensed = fields.Boolean(help="Specify whether the product can be selected in an HR expense.", string="Can be Expensed")
 
+    @api.model
+    def create(self, vals):
+        # When creating an expense product on the fly, you don't expect to
+        # have taxes on it
+        if vals.get('can_be_expensed', False):
+            vals.update({'supplier_taxes_id': False})
+        return super(ProductTemplate, self).create(vals)

--- a/None
+++ b/addons/hr_expense/models/res_config.py
@@ -0,0 +1,20 @@
+# -*- coding: utf-8 -*-
+
+from odoo import api, fields, models
+
+class HrExpenseConfigSettings(models.TransientModel):
+    _name = 'hr.expense.config.settings'
+    _inherit = 'res.config.settings'
+
+    alias_prefix = fields.Char('Default Alias Name for Expenses')
+    alias_domain = fields.Char('Alias Domain', default=lambda self: self.env["ir.config_parameter"].get_param("mail.catchall.domain"))
+
+    @api.model
+    def get_default_alias_prefix(self, fields):
+        alias_name = self.env.ref('hr_expense.mail_alias_expense').alias_name
+        return {'alias_prefix': alias_name}
+
+    @api.multi
+    def set_default_alias_prefix(self):
+        for record in self:
+            self.env.ref('hr_expense.mail_alias_expense').write({'alias_name': record.alias_prefix})

--- a/None
+++ b/addons/hr_expense/models/web_planner.py
@@ -0,0 +1,22 @@
+# -*- coding: utf-8 -*-
+from openerp import api, models
+
+
+class PlannerHrExpense(models.Model):
+
+    _inherit = 'web.planner'
+
+    @api.model
+    def _get_planner_application(self):
+        planner = super(PlannerHrExpense, self)._get_planner_application()
+        planner.append(['planner_hr_expense', 'Expense Planner'])
+        return planner
+
+    @api.model
+    def _prepare_planner_hr_expense_data(self):
+        # sudo is needed to avoid error message when current user's company != sale_department company
+        alias_record = self.env.ref('hr_expense.mail_alias_expense')
+        return {
+            'alias_domain': alias_record.alias_domain,
+            'alias_name': alias_record.alias_name,
+        }
