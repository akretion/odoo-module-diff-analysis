PR: https://github.com/odoo/odoo/pull/

From: cdca5d4751a979f6b694f02d88160843f81a77f5
From: Laurent Smet
Date: 2018-02-22 09:19:39

Breaking data model changes scores: del:8.4 + add:0, change matches:
-    _inherit = 'account.abstract.payment'
-    invoice_ids = fields.Many2many('account.invoice', string='Invoices', copy=False)
-    multi = fields.Boolean(string='Multi', help='Technical field indicating if the user selected invoices from multiple partners or from different types.')
-    company_id = fields.Many2one(store=True)
+    company_id = fields.Many2one('res.company', related='journal_id.company_id', string='Company', readonly=True)
-    payment_difference = fields.Monetary(compute='_compute_payment_difference', readonly=True)
-    payment_difference_handling = fields.Selection([('open', 'Keep open'), ('reconcile', 'Mark invoice as fully paid')], default='open', string="Payment Difference Handling", copy=False)
-    writeoff_account_id = fields.Many2one('account.account', string="Difference Account", domain=[('deprecated', '=', False)], copy=False)
-    writeoff_label = fields.Char(

Total Changes: 241

[IMP] account: improve the multi currency handling on register.payment.wizard

Previously, in multi-currency, the user was not allowed to register a payment on several invoices (picked in list view) and choose the currency, or to make a writeoff. This is now possible.
Also, the behavior and default amount/currency proposal is now much better in this wizard since it proposes you to register a payment in the same currency for the total amount (which is what users expect)

[FIX] account_check_printing: fix bad displayed check_amount_in_words

Was task: 34684
Was PR #20466

================================= pseudo patch: =================================

--- a/addons/account/models/account_payment.py
+++ b/addons/account/models/account_payment.py
@@ -3,6 +3,9 @@
 from odoo import models, fields, api, _
 from odoo.exceptions import UserError, ValidationError
 
+from itertools import groupby
+
+
 MAP_INVOICE_TYPE_PARTNER_TYPE = {
     'out_invoice': 'customer',
     'out_refund': 'customer',
@@ -30,6 +33,10 @@ class account_abstract_payment(models.AbstractModel):
     _name = "account.abstract.payment"
     _description = "Contains the logic shared between models which allows to register payments"
 
+    invoice_ids = fields.Many2many('account.invoice', string='Invoices', copy=False)
+    multi = fields.Boolean(string='Multi',
+                           help='Technical field indicating if the user selected invoices from multiple partners or from different types.')
+
     payment_type = fields.Selection([('outbound', 'Send Money'), ('inbound', 'Receive Money')], string='Payment Type', required=True)
     payment_method_id = fields.Many2one('account.payment.method', string='Payment Method Type', required=True, oldname="payment_method",
         help="Manual: Get paid by cash, check or any other method outside of Odoo.\n"\
@@ -48,10 +55,56 @@ class account_abstract_payment(models.AbstractModel):
     payment_date = fields.Date(string='Payment Date', default=fields.Date.context_today, required=True, copy=False)
     communication = fields.Char(string='Memo')
     journal_id = fields.Many2one('account.journal', string='Payment Journal', required=True, domain=[('type', 'in', ('bank', 'cash'))])
-    company_id = fields.Many2one('res.company', related='journal_id.company_id', string='Company', readonly=True)
 
     hide_payment_method = fields.Boolean(compute='_compute_hide_payment_method',
         help="Technical field used to hide the payment method if the selected journal has only one available which is 'manual'")
+    payment_difference = fields.Monetary(compute='_compute_payment_difference', readonly=True)
+    payment_difference_handling = fields.Selection([('open', 'Keep open'), ('reconcile', 'Mark invoice as fully paid')], default='open', string="Payment Difference Handling", copy=False)
+    writeoff_account_id = fields.Many2one('account.account', string="Difference Account", domain=[('deprecated', '=', False)], copy=False)
+    writeoff_label = fields.Char(
+        string='Journal Item Label',
+        help='Change label of the counterpart that will hold the payment difference',
+        default='Write-Off')
+
+    @api.model
+    def default_get(self, fields):
+        rec = super(account_abstract_payment, self).default_get(fields)
+        active_ids = self._context.get('active_ids')
+
+        # Check for selected invoices ids
+        if not active_ids:
+            return rec
+
+        invoices = self.env['account.invoice'].browse(active_ids)
+
+        # Check all invoices are open
+        if any(invoice.state != 'open' for invoice in invoices):
+            raise UserError(_("You can only register payments for open invoices"))
+        # Check all invoices have the same currency
+        if any(inv.currency_id != invoices[0].currency_id for inv in invoices):
+            raise UserError(_("In order to pay multiple invoices at once, they must use the same currency."))
+
+        # Look if we are mixin multiple commercial_partner or customer invoices with vendor bills
+        multi = any(inv.commercial_partner_id != invoices[0].commercial_partner_id
+            or MAP_INVOICE_TYPE_PARTNER_TYPE[inv.type] != MAP_INVOICE_TYPE_PARTNER_TYPE[invoices[0].type]
+            or inv.account_id != invoices[0].account_id
+            for inv in invoices)
+
+        currency = invoices[0].currency_id
+
+        total_amount = self._compute_payment_amount(invoices=invoices, currency=currency)
+
+        rec.update({
+            'amount': abs(total_amount),
+            'currency_id': currency.id,
+            'payment_type': total_amount > 0 and 'inbound' or 'outbound',
+            'partner_id': False if multi else invoices[0].commercial_partner_id.id,
+            'partner_type': False if multi else MAP_INVOICE_TYPE_PARTNER_TYPE[invoices[0].type],
+            'communication': ' '.join([ref for ref in invoices.mapped('reference') if ref]),
+            'invoice_ids': [(6, 0, invoices.ids)],
+            'multi': multi,
+        })
+        return rec
 
     @api.one
     @api.constrains('amount')
@@ -71,10 +124,14 @@ class account_abstract_payment(models.AbstractModel):
                 or payment.journal_id.outbound_payment_method_ids
             payment.hide_payment_method = len(journal_payment_methods) == 1 and journal_payment_methods[0].code == 'manual'
 
+    @api.depends('invoice_ids', 'amount', 'payment_date', 'currency_id')
+    def _compute_payment_difference(self):
+        for pay in self.filtered(lambda p: p.invoice_ids):
+            pay.payment_difference = pay.amount - abs(pay._compute_payment_amount())
+
     @api.onchange('journal_id')
     def _onchange_journal(self):
         if self.journal_id:
-            self.currency_id = self.journal_id.currency_id or self.company_id.currency_id
             # Set default payment method (we consider the first to be the default one)
             payment_methods = self.payment_type == 'inbound' and self.journal_id.inbound_payment_method_ids or self.journal_id.outbound_payment_method_ids
             self.payment_method_id = payment_methods and payment_methods[0] or False
@@ -83,84 +140,81 @@ class account_abstract_payment(models.AbstractModel):
             return {'domain': {'payment_method_id': [('payment_type', '=', payment_type), ('id', 'in', payment_methods.ids)]}}
         return {}
 
-    @api.model
-    def _compute_total_invoices_amount(self):
-        """ Compute the sum of the residual of invoices, expressed in the payment currency """
-        payment_currency = self.currency_id or self.journal_id.currency_id or self.journal_id.company_id.currency_id or self.env.user.company_id.currency_id
-
-        total = 0
-        for inv in self.invoice_ids:
-            if inv.currency_id == payment_currency:
-                total += inv.residual_signed
+    def _compute_journal_domain_and_types(self):
+        journal_type = ['bank', 'cash']
+        domain = []
+        if self.currency_id.is_zero(self.amount):
+            # In case of payment with 0 amount, allow to select a journal of type 'general' like
+            # 'Miscellaneous Operations' and set this journal by default.
+            journal_type = ['general']
+            self.payment_difference_handling = 'reconcile'
+        else:
+            if self.payment_type == 'inbound':
+                domain.append(('at_least_one_inbound', '=', True))
             else:
-                total += inv.company_currency_id.with_context(date=self.payment_date).compute(
-                    inv.residual_company_signed, payment_currency)
-        return abs(total)
+                domain.append(('at_least_one_outbound', '=', True))
+        return {'domain': domain, 'journal_types': set(journal_type)}
 
+    @api.onchange('amount', 'currency_id')
+    def _onchange_amount(self):
+        jrnl_filters = self._compute_journal_domain_and_types()
+        journal_types = jrnl_filters['journal_types']
+        domain_on_types = [('type', 'in', list(journal_types))]
+        if self.journal_id.type not in journal_types:
+            self.journal_id = self.env['account.journal'].search(domain_on_types, limit=1)
+        return {'domain': {'journal_id': jrnl_filters['domain'] + domain_on_types}}
 
-class account_register_payments(models.TransientModel):
-    _name = "account.register.payments"
-    _inherit = 'account.abstract.payment'
-    _description = "Register payments on multiple invoices"
+    @api.onchange('currency_id')
+    def _onchange_currency(self):
+        self.amount = abs(self._compute_payment_amount())
 
-    invoice_ids = fields.Many2many('account.invoice', string='Invoices', copy=False)
-    multi = fields.Boolean(string='Multi', help='Technical field indicating if the user selected invoices from multiple partners or from different types.')
+        # Set by default the first liquidity journal having this currency if exists.
+        journal = self.env['account.journal'].search(
+            [('type', 'in', ('bank', 'cash')), ('currency_id', '=', self.currency_id.id)], limit=1)
+        if journal:
+            return {'value': {'journal_id': journal.id}}
 
-    @api.onchange('payment_type')
-    def _onchange_payment_type(self):
-        if self.payment_type:
-            return {'domain': {'payment_method_id': [('payment_type', '=', self.payment_type)]}}
-
-    @api.model
-    def _compute_payment_amount(self, invoice_ids):
-        payment_currency = self.currency_id or self.journal_id.currency_id or self.journal_id.company_id.currency_id
+    @api.multi
+    def _compute_payment_amount(self, invoices=None, currency=None):
+        '''Compute the total amount for the payment wizard.
 
-        total = 0
-        for inv in invoice_ids:
-            if inv.currency_id == payment_currency:
-                total += MAP_INVOICE_TYPE_PAYMENT_SIGN[inv.type] * inv.residual_company_signed
+        :param invoices: If not specified, pick all the invoices.
+        :param currency: If not specified, search a default currency on wizard/journal.
+        :return: The total amount to pay the invoices.
+        '''
+        # Get the payment currency
+        if not currency:
+            currency = self.currency_id or self.journal_id.currency_id or self.journal_id.company_id.currency_id
+
+        # Get the payment invoices
+        if not invoices:
+            invoices = self.invoice_ids
+
+        # Avoid currency rounding issues by summing the amounts according to the company_currency_id before
+        total = 0.0
+        groups = groupby(invoices, lambda i: i.currency_id)
+        for payment_currency, payment_invoices in groups:
+            amount_total = sum([MAP_INVOICE_TYPE_PAYMENT_SIGN[i.type] * i.residual_signed for i in payment_invoices])
+            if payment_currency == currency:
+                total += amount_total
             else:
-                amount_residual = inv.company_currency_id.with_context(date=self.payment_date).compute(
-                    inv.residual_company_signed, payment_currency)
-                total += MAP_INVOICE_TYPE_PAYMENT_SIGN[inv.type] * amount_residual
+                total += payment_currency.with_context(date=self.payment_date).compute(amount_total, currency)
         return total
 
+
+class account_register_payments(models.TransientModel):
+    _name = "account.register.payments"
+    _inherit = 'account.abstract.payment'
+    _description = "Register payments on multiple invoices"
+
     @api.model
     def default_get(self, fields):
         rec = super(account_register_payments, self).default_get(fields)
         active_ids = self._context.get('active_ids')
 
-        # Check for selected invoices ids
         if not active_ids:
             raise UserError(_("Programming error: wizard action executed without active_ids in context."))
 
-        invoices = self.env['account.invoice'].browse(active_ids)
-
-        # Check all invoices are open
-        if any(invoice.state != 'open' for invoice in invoices):
-            raise UserError(_("You can only register payments for open invoices"))
-        # Check all invoices have the same currency
-        if any(inv.currency_id != invoices[0].currency_id for inv in invoices):
-            raise UserError(_("In order to pay multiple invoices at once, they must use the same currency."))
-
-        # Look if we are mixin multiple commercial_partner or customer invoices with vendor bills
-        multi = any(inv.commercial_partner_id != invoices[0].commercial_partner_id
-            or MAP_INVOICE_TYPE_PARTNER_TYPE[inv.type] != MAP_INVOICE_TYPE_PARTNER_TYPE[invoices[0].type]
-            or inv.account_id != invoices[0].account_id
-            for inv in invoices)
-
-        total_amount = self._compute_payment_amount(invoices)
-
-        rec.update({
-            'amount': abs(total_amount),
-            'currency_id': invoices[0].currency_id.id,
-            'payment_type': total_amount > 0 and 'inbound' or 'outbound',
-            'partner_id': False if multi else invoices[0].commercial_partner_id.id,
-            'partner_type': False if multi else MAP_INVOICE_TYPE_PARTNER_TYPE[invoices[0].type],
-            'communication': ' '.join([ref for ref in invoices.mapped('reference') if ref]),
-            'invoice_ids': [(6, 0, invoices.ids)],
-            'multi': multi,
-        })
         return rec
 
     @api.multi
@@ -189,7 +243,7 @@ class account_register_payments(models.TransientModel):
         :param invoices: The invoices that should have the same commercial partner and the same type.
         :return: The payment values as a dictionary.
         '''
-        amount = self._compute_payment_amount(invoices) if self.multi else self.amount
+        amount = self._compute_payment_amount(invoices=invoices) if self.multi else self.amount
         payment_type = ('inbound' if amount > 0 else 'outbound') if self.multi else self.payment_type
         return {
             'journal_id': self.journal_id.id,
@@ -230,15 +284,20 @@ class account_register_payments(models.TransientModel):
         for payment_vals in self.get_payments_vals():
             payments += Payment.create(payment_vals)
         payments.post()
-        return {
+
+        action_vals = {
             'name': _('Payments'),
             'domain': [('id', 'in', payments.ids), ('state', '=', 'posted')],
             'view_type': 'form',
-            'view_mode': 'tree,form',
             'res_model': 'account.payment',
             'view_id': False,
             'type': 'ir.actions.act_window',
         }
+        if len(payments) == 1:
+            action_vals.update({'res_id': payments[0].id, 'view_mode': 'form'})
+        else:
+            action_vals['view_mode'] = 'tree,form'
+        return action_vals
 
 
 class account_payment(models.Model):
@@ -262,17 +321,7 @@ class account_payment(models.Model):
                     rec = False
             payment.move_reconciled = rec
 
-    @api.one
-    @api.depends('invoice_ids', 'amount', 'payment_date', 'currency_id')
-    def _compute_payment_difference(self):
-        if len(self.invoice_ids) == 0:
-            return
-        if self.invoice_ids[0].type in ['in_invoice', 'out_refund']:
-            self.payment_difference = self.amount - self._compute_total_invoices_amount()
-        else:
-            self.payment_difference = self._compute_total_invoices_amount() - self.amount
-
-    company_id = fields.Many2one(store=True)
+    company_id = fields.Many2one('res.company', related='journal_id.company_id', string='Company', readonly=True)
     name = fields.Char(readonly=True, copy=False, default="Draft Payment") # The name is attributed upon post()
     state = fields.Selection([('draft', 'Draft'), ('posted', 'Posted'), ('sent', 'Sent'), ('reconciled', 'Reconciled'), ('cancelled', 'Cancelled')], readonly=True, default='draft', copy=False, string="Status")
 
@@ -289,13 +338,6 @@ class account_payment(models.Model):
 
     invoice_ids = fields.Many2many('account.invoice', 'account_invoice_payment_rel', 'payment_id', 'invoice_id', string="Invoices", copy=False, readonly=True)
     has_invoices = fields.Boolean(compute="_get_has_invoices", help="Technical field used for usability purposes")
-    payment_difference = fields.Monetary(compute='_compute_payment_difference', readonly=True)
-    payment_difference_handling = fields.Selection([('open', 'Keep open'), ('reconcile', 'Mark invoice as fully paid')], default='open', string="Payment Difference Handling", copy=False)
-    writeoff_account_id = fields.Many2one('account.account', string="Difference Account", domain=[('deprecated', '=', False)], copy=False)
-    writeoff_label = fields.Char(
-        string='Journal Item Label',
-        help='Change label of the counterpart that will hold the payment difference',
-        default='Write-Off')
 
     # FIXME: ondelete='restrict' not working (eg. cancel a bank statement reconciliation with a payment)
     move_line_ids = fields.One2many('account.move.line', 'payment_id', readonly=True, copy=False, ondelete='restrict')
@@ -321,37 +363,6 @@ class account_payment(models.Model):
             'context': action_context,
         }
 
-    def _compute_journal_domain_and_types(self):
-        journal_type = ['bank', 'cash']
-        domain = []
-        if self.currency_id.is_zero(self.amount):
-            # In case of payment with 0 amount, allow to select a journal of type 'general' like
-            # 'Miscellaneous Operations' and set this journal by default.
-            journal_type = ['general']
-            self.payment_difference_handling = 'reconcile'
-        else:
-            if self.payment_type == 'inbound':
-                domain.append(('at_least_one_inbound', '=', True))
-            elif self.payment_type == 'outbound':
-                domain.append(('at_least_one_outbound', '=', True))
-        return {'domain': domain, 'journal_types': set(journal_type)}
-
-    @api.onchange('amount', 'currency_id')
-    def _onchange_amount(self):
-        jrnl_filters = self._compute_journal_domain_and_types()
-        journal_types = jrnl_filters['journal_types']
-        domain_on_types = [('type', 'in', list(journal_types))]
-
-        journal_domain = jrnl_filters['domain'] + domain_on_types
-        default_journal_id = self.env.context.get('default_journal_id')
-        if not default_journal_id:
-            if self.journal_id.type not in journal_types:
-                self.journal_id = self.env['account.journal'].search(domain_on_types, limit=1)
-        else:
-            journal_domain = journal_domain.append(('id', '=', default_journal_id))
-
-        return {'domain': {'journal_id': journal_domain}}
-
     @api.one
     @api.depends('invoice_ids', 'payment_type', 'partner_type', 'partner_id')
     def _compute_destination_account_id(self):
