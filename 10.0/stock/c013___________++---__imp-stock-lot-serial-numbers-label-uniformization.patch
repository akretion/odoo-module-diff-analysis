PR: https://github.com/odoo/odoo/pull/

From: 919bee40584050412c963cc191ab3e0b6f1e95e7
From: Jainik Patel
Date: 2016-06-10 13:03:44

Structural Changes: 15
Total Changes: 34

[IMP] stock: Lot/Serial Numbers label uniformization

In master , some places the string "Lot" is used and at some places
"Serial Numbers" is used , which is very confusing for the user.

Make a common string "Lots / Serial Numbers" everywhere for the uniformity.

================================= pseudo patch: =================================

--- a/addons/stock/models/stock_inventory.py
+++ b/addons/stock/models/stock_inventory.py
@@ -241,7 +241,7 @@ class InventoryLine(models.Model):
     package_id = fields.Many2one(
         'stock.quant.package', 'Pack', index=True)
     prod_lot_id = fields.Many2one(
-        'stock.production.lot', 'Serial Number',
+        'stock.production.lot', 'Lot/Serial Number',
         domain="[('product_id','=',product_id)]")
     # TDE FIXME: necessary ? -> replace by location_id
     prodlot_name = fields.Char(

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -136,7 +136,7 @@ class StockMove(models.Model):
         help='If checked, when this move is cancelled, cancel the linked move too')
     picking_type_id = fields.Many2one('stock.picking.type', 'Picking Type')
     inventory_id = fields.Many2one('stock.inventory', 'Inventory')
-    lot_ids = fields.Many2many('stock.production.lot', string='Lots', compute='_compute_lot_ids')
+    lot_ids = fields.Many2many('stock.production.lot', string='Lots/Serial Numbers', compute='_compute_lot_ids')
     origin_returned_move_id = fields.Many2one('stock.move', 'Origin return move', copy=False, help='Move that created the return move')
     returned_move_ids = fields.One2many('stock.move', 'origin_returned_move_id', 'All returned moves', help='Optional: all returned moves created from this move')
     reserved_availability = fields.Float(
@@ -148,7 +148,7 @@ class StockMove(models.Model):
     string_availability_info = fields.Text(
         'Availability', compute='_compute_string_qty_information',
         readonly=True, help='Show various information on stock availability for this move')
-    restrict_lot_id = fields.Many2one('stock.production.lot', 'Lot', help="Technical field used to depict a restriction on the lot of quants to consider when marking this move as 'done'")
+    restrict_lot_id = fields.Many2one('stock.production.lot', 'Lot/Serial Number', help="Technical field used to depict a restriction on the lot/serial number of quants to consider when marking this move as 'done'")
     restrict_partner_id = fields.Many2one('res.partner', 'Owner ', help="Technical field used to depict a restriction on the ownership of quants to consider when marking this move as 'done'")
     route_ids = fields.Many2many('stock.location.route', 'stock_location_route_move', 'move_id', 'route_id', 'Destination route', help="Preferred route to be followed by the procurement order")
     warehouse_id = fields.Many2one('stock.warehouse', 'Warehouse', help="Technical field depicting the warehouse to consider for the route selection on the next procurement (if any).")

--- a/addons/stock/models/stock_pack_operation.py
+++ b/addons/stock/models/stock_pack_operation.py
@@ -37,7 +37,7 @@ class PackOperation(models.Model):
     # TDE FIXME: what what what what ??
     is_done = fields.Boolean(compute='_compute_is_done', inverse='_set_is_done', string='Done', oldname='processed_boolean')
     package_id = fields.Many2one('stock.quant.package', 'Source Package')
-    pack_lot_ids = fields.One2many('stock.pack.operation.lot', 'operation_id', 'Lots Used')
+    pack_lot_ids = fields.One2many('stock.pack.operation.lot', 'operation_id', 'Lots/Serial Numbers Used')
     result_package_id = fields.Many2one(
         'stock.quant.package', 'Destination Package',
         ondelete='cascade', required=False,
@@ -193,7 +193,7 @@ class PackOperation(models.Model):
             'show_reserved': any([lot for lot in self.pack_lot_ids if lot.qty_todo > 0.0])})
         view_id = self.env.ref('stock.view_pack_operation_lot_form').id
         return {
-            'name': _('Lot Details'),
+            'name': _('Lot/Serial Number Details'),
             'type': 'ir.actions.act_window',
             'view_type': 'form',
             'view_mode': 'form',
@@ -239,12 +239,12 @@ class PackOperation(models.Model):
 
 class PackOperationLot(models.Model):
     _name = "stock.pack.operation.lot"
-    _description = "Lot / Serial number for pack ops"
+    _description = "Lot/Serial number for pack ops"
 
     operation_id = fields.Many2one('stock.pack.operation')
     qty = fields.Float('Done', default=1.0)
     lot_id = fields.Many2one('stock.production.lot', 'Lot/Serial Number')
-    lot_name = fields.Char('Lot Name')
+    lot_name = fields.Char('Lot/Serial Number')
     qty_todo = fields.Float('To Do', default=0.0)
     plus_visible = fields.Boolean(compute='_compute_plus_visible', default=True)
 
@@ -263,7 +263,7 @@ class PackOperationLot(models.Model):
     @api.constrains('lot_id', 'lot_name')
     def _check_lot(self):
         if any(not lot.lot_name and not lot.lot_id for lot in self):
-            raise ValidationError(_('Lot required'))
+            raise ValidationError(_('Lot/Serial Number required'))
         return True
 
     def action_add_quantity(self, quantity):

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -35,11 +35,11 @@ class PickingType(models.Model):
         default=lambda self: self.env['stock.warehouse'].search([('company_id', '=', self.env.user.company_id.id)], limit=1))
     active = fields.Boolean('Active', default=True)
     use_create_lots = fields.Boolean(
-        'Create New Lots', default=True,
-        help="If this is checked only, it will suppose you want to create new Serial Numbers / Lots, so you can provide them in a text field. ")
+        'Create New Lots/Serial Numbers', default=True,
+        help="If this is checked only, it will suppose you want to create new Lots/Serial Numbers, so you can provide them in a text field. ")
     use_existing_lots = fields.Boolean(
-        'Use Existing Lots', default=True,
-        help="If this is checked, you will be able to choose the Serial Number / Lots. You can also decide to not put lots in this picking type.  This means it will create stock with no lot or not put a restriction on the lot taken. ")
+        'Use Existing Lots/Serial Numbers', default=True,
+        help="If this is checked, you will be able to choose the Lots/Serial Numbers. You can also decide to not put lots in this picking type.  This means it will create stock with no lot or not put a restriction on the lot taken. ")
 
     # Statistics for the kanban view
     last_done_picking = fields.Char('Last 10 Done Pickings', compute='_compute_last_done_picking')
@@ -667,7 +667,7 @@ class Picking(models.Model):
                 prod2move_ids[move.product_id.id].append({'move': move, 'remaining_qty': move.product_qty})
 
         need_rereserve = False
-        # sort the operations in order to give higher priority to those with a package, then a serial number
+        # sort the operations in order to give higher priority to those with a package, then a lot/serial number
         operations = self.pack_operation_ids
         operations = sorted(operations, key=lambda x: ((x.package_id and not x.product_id) and -4 or 0) + (x.package_id and -2 or 0) + (x.pack_lot_ids and -1 or 0))
         # delete existing operations to start again from scratch

--- a/addons/stock/models/stock_production_lot.py
+++ b/addons/stock/models/stock_production_lot.py
@@ -10,9 +10,9 @@ class ProductionLot(models.Model):
     _description = 'Lot/Serial'
 
     name = fields.Char(
-        'Serial Number', default=lambda self: self.env['ir.sequence'].next_by_code('stock.lot.serial'),
-        required=True, help="Unique Serial Number")
-    ref = fields.Char('Internal Reference', help="Internal reference number in case it differs from the manufacturer's serial number")
+        'Lot/Serial Number', default=lambda self: self.env['ir.sequence'].next_by_code('stock.lot.serial'),
+        required=True, help="Unique Lot/Serial Number")
+    ref = fields.Char('Internal Reference', help="Internal reference number in case it differs from the manufacturer's lot/serial number")
     product_id = fields.Many2one(
         'product.product', 'Product',
         domain=[('type', 'in', ['product', 'consu'])], required=True)

--- a/addons/stock/models/stock_quant.py
+++ b/addons/stock/models/stock_quant.py
@@ -38,7 +38,7 @@ class Quant(models.Model):
         index=True, readonly=True,
         help="The move the quant is reserved for")
     lot_id = fields.Many2one(
-        'stock.production.lot', 'Lot',
+        'stock.production.lot', 'Lot/Serial Number',
         index=True, ondelete="restrict", readonly=True)
     cost = fields.Float('Unit Cost')
     owner_id = fields.Many2one(
