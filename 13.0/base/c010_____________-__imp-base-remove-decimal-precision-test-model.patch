PR: https://github.com/odoo/odoo/pull/

From: dd2fae2ead6ea00dfc7e7a6e1d3a0a5624e478f7
From: Martin Trigaux
Date: 2019-07-03 11:16:24

Structural Changes: 3
Total Changes: 77

[IMP] base: remove decimal.precision.test model

It should not be a standard model but a test model

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/decimal_precision.py
+++ b/odoo/addons/base/models/decimal_precision.py
@@ -71,15 +71,6 @@ class DecimalPrecisionFloat(models.AbstractModel):
 
         return super().precision(field, options=options)
 
-class DecimalPrecisionTestModel(models.Model):
-    _name = 'decimal.precision.test'
-    _description = 'Decimal Precision Test'
-
-    float = fields.Float()
-    float_2 = fields.Float(digits=(16, 2))
-    float_4 = fields.Float(digits=(16, 4))
-
-
 # compatibility for decimal_precision.get_precision(): expose the module in addons namespace
 dp = sys.modules['odoo.addons.base.models.decimal_precision']
 odoo.addons.decimal_precision = dp

--- a/odoo/addons/base/security/ir.model.access.csv
+++ b/odoo/addons/base/security/ir.model.access.csv
@@ -1,6 +1,5 @@
 "id","name","model_id:id","group_id:id","perm_read","perm_write","perm_create","perm_unlink"
 "access_decimal_precision_config","decimal.precision configuration","model_decimal_precision","group_system",1,1,1,1
-"access_decimal_precision_test_all","decimal.precision.test","model_decimal_precision_test",,1,1,1,1
 "access_ir_attachment_group_user","ir_attachment group_user","model_ir_attachment","group_user",1,1,1,1
 "access_ir_attachment_group_portal_public","ir_attachment group_portal_public","model_ir_attachment",,0,0,0,0
 "access_ir_cron_group_cron","ir_cron group_cron","model_ir_cron","group_system",1,1,1,1

--- a/odoo/addons/base/tests/__init__.py
+++ b/odoo/addons/base/tests/__init__.py
@@ -24,7 +24,6 @@ from . import test_orm
 from . import test_ormcache
 from . import test_osv
 from . import test_qweb
-from . import test_qweb_float
 from . import test_res_config
 from . import test_res_lang
 from . import test_search

--- a/odoo/addons/base/tests/test_qweb_float.py
+++ b/None
@@ -1,66 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from odoo.tests import common
-
-
-class TestFloatExport(common.TransactionCase):
-
-    def get_converter(self, name):
-        FloatField = self.env['ir.qweb.field.float']
-        _, precision = self.env['decimal.precision.test']._fields[name].get_digits(self.env) or (None, None)
-
-        def converter(value, options=None):
-            record = self.env['decimal.precision.test'].new({name: value})
-            return FloatField.record_to_html(record, name, options or {})
-        return converter
-
-    def test_basic_float(self):
-        converter = self.get_converter('float')
-        self.assertEqual(
-            converter(42.0),
-            "42.0")
-        self.assertEqual(
-            converter(42.12345),
-            "42.12345")
-
-        converter = self.get_converter('float_2')
-        self.assertEqual(
-            converter(42.0),
-            "42.00")
-        self.assertEqual(
-            converter(42.12345),
-            "42.12")
-
-        converter = self.get_converter('float') # don't use float_4 because the field value 42.12345 is already orm converted to 42.1235
-        self.assertEqual(
-            converter(42.0, {'precision': 4}),
-            '42.0000')
-        self.assertEqual(
-            converter(42.12345, {'precision': 4}),
-            '42.1235')
-
-    def test_precision_domain(self):
-        self.env['decimal.precision'].create({
-            'name': 'A',
-            'digits': 2,
-        })
-        self.env['decimal.precision'].create({
-            'name': 'B',
-            'digits': 6,
-        })
-
-        converter = self.get_converter('float')
-        self.assertEqual(
-            converter(42.0, {'decimal_precision': 'A'}),
-            '42.00')
-        self.assertEqual(
-            converter(42.0, {'decimal_precision': 'B'}),
-            '42.000000')
-
-        converter = self.get_converter('float') # don't use float_4 because the field value 42.12345 is orm converted to 42.1235
-        self.assertEqual(
-            converter(42.12345, {'decimal_precision': 'A'}),
-            '42.12')
-        self.assertEqual(
-            converter(42.12345, {'decimal_precision': 'B'}),
-            '42.123450')
