PR: https://github.com/odoo/odoo/pull/133145

From: a9b804b1ad6c8fb34e6ac09d8134eacbce174760
From: Rob Coekaerts
Date: 2023-10-24 12:38:09

Structural Changes: 3
Total Changes: 66

[IMP] resource: add duration to resource_calendar_attendance

Before this commit, conversion between worked hours and days in
resource_calendar_attendance was calculated but in reality there is no
unambigous way to do this. Eg in Belgium the morning working period is
4 hours, the one in the afternoon is 3 hours 36 minutes, while both of
them are still counted as half days.

To mediate this, the duration in days is explicitely added to
resource.calendar.attendance, with sensible default being provided
(half a day for morning and afternoon periods, 0 for lunch).

task-3131517

Part-of: odoo/odoo#133145

================================= pseudo patch: =================================

--- a/addons/resource/models/resource_calendar.py
+++ b/addons/resource/models/resource_calendar.py
@@ -166,11 +166,12 @@ class ResourceCalendar(models.Model):
             and not attendance.resource_id and not attendance.display_type)
 
     def _get_hours_per_day(self, attendances):
+        """
+        Calculate the average hours worked per workday.
+        """
         if not attendances:
             return 0
 
-        attendances = attendances.filtered(lambda a: a.day_period != 'lunch')
-
         hour_count = 0.0
         for attendance in attendances:
             hour_count += attendance.hour_to - attendance.hour_from
@@ -470,6 +471,31 @@ class ResourceCalendar(models.Model):
     # Private Methods / Helpers
     # --------------------------------------------------
 
+    def _get_attendance_intervals_days_data(self, attendance_intervals):
+        """
+        helper function to compute duration of `intervals` that have
+        'resource.calendar.attendance' records as payload (3rd element in tuple).
+        expressed in days and hours.
+
+        resource.calendar.attendance records have durations associated
+        with them so this method merely calculates the proportion that is
+        covered by the intervals.
+        """
+        day_hours = defaultdict(float)
+        day_days = defaultdict(float)
+        for start, stop, meta in attendance_intervals:
+            # If the interval covers only a part of the original attendance, we
+            # take durations in days proportionally to what is left of the interval.
+            interval_hours = (stop - start).total_seconds() / 3600
+            day_hours[start.date()] += interval_hours
+            day_days[start.date()] += meta.duration_days * interval_hours / meta.duration_hours
+
+        return {
+            # Round the number of days to the closest 16th of a day.
+            'days': sum(float_utils.round(ROUNDING_FACTOR * day_days[day]) / ROUNDING_FACTOR for day in day_days),
+            'hours': sum(day_hours.values()),
+        }
+
     def _get_days_data(self, intervals, day_total):
         """
         helper function to compute duration of `intervals`
@@ -607,15 +633,13 @@ class ResourceCalendar(models.Model):
         from_datetime, dummy = make_aware(from_datetime)
         to_datetime, dummy = make_aware(to_datetime)
 
-        day_total = self._get_resources_day_total(from_datetime, to_datetime)[False]
-
         # actual hours per day
         if compute_leaves:
             intervals = self._work_intervals_batch(from_datetime, to_datetime, domain=domain)[False]
         else:
             intervals = self._attendance_intervals_batch(from_datetime, to_datetime, domain=domain)[False]
 
-        return self._get_days_data(intervals, day_total)
+        return self._get_attendance_intervals_days_data(intervals)
 
     def plan_hours(self, hours, day_dt, compute_leaves=False, domain=None, resource=None):
         """

--- a/addons/resource/models/resource_calendar_attendance.py
+++ b/addons/resource/models/resource_calendar_attendance.py
@@ -9,7 +9,7 @@ from odoo import api, fields, models, _
 class ResourceCalendarAttendance(models.Model):
     _name = "resource.calendar.attendance"
     _description = "Work Detail"
-    _order = 'week_type, dayofweek, hour_from'
+    _order = 'sequence, week_type, dayofweek, hour_from'
 
     name = fields.Char(required=True)
     dayofweek = fields.Selection([
@@ -27,10 +27,15 @@ class ResourceCalendarAttendance(models.Model):
         help="Start and End time of working.\n"
              "A specific value of 24:00 is interpreted as 23:59:59.999999.")
     hour_to = fields.Float(string='Work to', required=True)
+    # For the hour duration, the compute function is used to compute the value
+    # unambiguously, while the duration in days is computed for the default
+    # value based on the day_period but can be manually overridden.
+    duration_hours = fields.Float(compute='_compute_duration_hours', string='Duration (hours)')
+    duration_days = fields.Float(compute='_compute_duration_days', string='Duration (days)', store=True, readonly=False)
     calendar_id = fields.Many2one("resource.calendar", string="Resource's Calendar", required=True, ondelete='cascade')
     day_period = fields.Selection([
         ('morning', 'Morning'),
-        ('lunch', 'Lunch'),
+        ('lunch', 'Break'),
         ('afternoon', 'Afternoon')], required=True, default='morning')
     resource_id = fields.Many2one('resource.resource', 'Resource')
     week_type = fields.Selection([
@@ -64,6 +69,19 @@ class ResourceCalendarAttendance(models.Model):
         # some years have 53 weeks. Therefore, two consecutive odd week number follow each other (53 --> 1).
         return int(math.floor((date.toordinal() - 1) / 7) % 2)
 
+    @api.depends('hour_from', 'hour_to')
+    def _compute_duration_hours(self):
+        for attendance in self:
+            attendance.duration_hours = (attendance.hour_to - attendance.hour_from) if attendance.day_period != 'lunch' else 0
+
+    @api.depends('day_period', 'hour_from', 'hour_to')
+    def _compute_duration_days(self):
+        for attendance in self:
+            if attendance.day_period == 'lunch':
+                attendance.duration_days = 0
+            else:
+                attendance.duration_days = 0.5 if attendance.duration_hours <= attendance.calendar_id.hours_per_day * 3 / 4 else 1
+
     @api.depends('week_type')
     def _compute_display_name(self):
         super()._compute_display_name()

--- a/addons/resource/models/resource_mixin.py
+++ b/addons/resource/models/resource_mixin.py
@@ -104,7 +104,6 @@ class ResourceMixin(models.AbstractModel):
                 for calendar_resource in calendar_resources:
                     result[calendar_resource.id] = {'days': 0, 'hours': 0}
                 continue
-            day_total = calendar._get_resources_day_total(from_datetime, to_datetime, calendar_resources)
 
             # actual hours per day
             if compute_leaves:
@@ -113,7 +112,7 @@ class ResourceMixin(models.AbstractModel):
                 intervals = calendar._attendance_intervals_batch(from_datetime, to_datetime, calendar_resources)
 
             for calendar_resource in calendar_resources:
-                result[calendar_resource.id] = calendar._get_days_data(intervals[calendar_resource.id], day_total[calendar_resource.id])
+                result[calendar_resource.id] = calendar._get_attendance_intervals_days_data(intervals[calendar_resource.id])
 
         # convert "resource: result" into "employee: result"
         return {mapped_employees[r.id]: result[r.id] for r in resources}
@@ -142,16 +141,13 @@ class ResourceMixin(models.AbstractModel):
             mapped_resources[calendar or record.resource_calendar_id] |= record.resource_id
 
         for calendar, calendar_resources in mapped_resources.items():
-            day_total = calendar._get_resources_day_total(from_datetime, to_datetime, calendar_resources)
-
             # compute actual hours per day
             attendances = calendar._attendance_intervals_batch(from_datetime, to_datetime, calendar_resources)
             leaves = calendar._leave_intervals_batch(from_datetime, to_datetime, calendar_resources, domain)
 
             for calendar_resource in calendar_resources:
-                result[calendar_resource.id] = calendar._get_days_data(
-                    attendances[calendar_resource.id] & leaves[calendar_resource.id],
-                    day_total[calendar_resource.id]
+                result[calendar_resource.id] = calendar._get_attendance_intervals_days_data(
+                    attendances[calendar_resource.id] & leaves[calendar_resource.id]
                 )
 
         # convert "resource: result" into "employee: result"
