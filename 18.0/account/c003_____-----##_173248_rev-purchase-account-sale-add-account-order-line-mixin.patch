PR: https://github.com/odoo/odoo/pull/173248

From: 75fda76dba48ee2f9f65cfdbcb095dc8701a6d77
From: Tiffany Chang (tic)
Date: 2024-07-17 12:32:13

Breaking data model changes scores: del:34 + add:0, change matches:
-    is_downpayment = fields.Boolean()
-    is_downpayment = fields.Boolean(
-    invoice_lines = fields.One2many('account.move.line')
-    display_type = fields.Selection(
-    product_id = fields.Many2one('product.product', 'Product', change_default=True, index='btree_not_null')
-    name = fields.Text(string='Description', compute='_compute_name', required=True, store=True, readonly=False, precompute=True)
-    order_id = fields.Many2one('account.order.mixin')
-    qty_to_invoice = fields.Float('Quantity to Invoice', compute='_compute_qty_to_invoice', digits='Product Unit of Measure', store=True)
-    price_unit = fields.Float("Unit Price", digits='Product Price', compute='_compute_price_unit', required=True, readonly=False, store=True)
-    tax_id = fields.Many2many('account.tax', string="Taxes", check_company=True, context={'active_test': False})
-    product_uom = fields.Many2one('uom.uom', "Unit of Measure", domain="[('category_id', '=', product_uom_category_id)]")
-    discount = fields.Float("Discount (%)", digits='Discount', compute='_compute_discount', store=True, readonly=False, precompute=True)
-    currency_id = fields.Many2one(related='order_id.currency_id', store=True, string='Currency', readonly=True, precompute=True)
-    price_subtotal = fields.Monetary(compute='_compute_amount', string='Subtotal', store=True)
-    price_total = fields.Monetary(compute='_compute_amount', string='Total', store=True)
-    price_tax = fields.Float(compute='_compute_amount', string='Tax', store=True)
-    amount_to_invoice = fields.Monetary("Amount to invoice", compute='_compute_amount_to_invoice')
-    amount_invoiced = fields.Monetary("Amount already invoiced", compute='_compute_amount_invoiced')
-    company_id = fields.Many2one('res.company', 'Company', required=True, index=True, default=lambda self: self.env.company)
-    currency_id = fields.Many2one('res.currency', 'Currency', required=True, default=lambda self: self.env.company.currency_id.id)
-    fiscal_position_id = fields.Many2one('account.fiscal.position', string='Fiscal Position', check_company=True)
-    partner_id = fields.Many2one('res.partner', required=True, change_default=True, tracking=True, index=True, domain="[('company_id', 'in', (False, company_id))]")
-    amount_untaxed = fields.Monetary(string='Untaxed Amount', store=True, compute='_compute_amounts')
-    amount_tax = fields.Monetary(string="Taxes", store=True, compute='_compute_amounts')
-    amount_total = fields.Monetary(string='Total', store=True, compute='_compute_amounts')
-    invoice_ids = fields.Many2many('account.move')
-    order_line = fields.One2many('account.order.line.mixin')
-    invoice_status = fields.Selection([], compute='_compute_invoice_status', store=True)
-    name = fields.Char(string="Order Reference", required=True, copy=False, readonly=False, index='trigram', default=lambda self: _('New'))
-    payment_term_id = fields.Many2one('account.payment.term', 'Payment Terms', check_company=True)

Total Changes: 427

[REV] purchase, account, sale: add account.order(.line).mixin

Reverted because:

* Mixin added more complexity than simplification (i.e. more lines added
  than removed)
* Downpayment functionality for POs as is in this commit is not desired
* POs and SOs should be allowed to evolve independently of each other
  and this mixin restricts that

Because subsequent renaming was done on top of this mixin, we revert
those renamings as well to avoid painful conflicts

This reverts commit 0257fcb9cfef5bac3c267f2e85cdc04d3701c4f1.

Original task: 3600910

X-original-commit: 465da9d7e63157a312ea83b12b760520dfaf59e6
Part-of: odoo/odoo#173248
Related: odoo/enterprise#66702
Signed-off-by: Tiffany Chang (tic) <tic@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account/models/__init__.py
+++ b/addons/account/models/__init__.py
@@ -6,8 +6,6 @@ from . import ir_http
 from . import res_partner_bank
 from . import account_account_tag
 from . import account_account
-from . import account_order_line_mixin
-from . import account_order_mixin
 from . import account_journal
 from . import account_tax
 from . import account_reconcile_model

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -2910,21 +2910,10 @@ class AccountMove(models.Model):
             ))
 
     def unlink(self):
-        downpayment_lines = (
-            self.mapped('line_ids')
-                ._get_order_lines()
-                .filtered(
-                    lambda line:
-                        line.is_downpayment
-                        and line.invoice_lines <= self.mapped('line_ids')  # See https://github.com/odoo/odoo/pull/52648
-                )
-        )
         self = self.with_context(skip_invoice_sync=True, dynamic_unlink=True)  # no need to sync to delete everything
         logger_message = self._get_unlink_logger_message()
         self.line_ids.unlink()
         res = super().unlink()
-        if downpayment_lines:
-            downpayment_lines.unlink()
         if logger_message:
             _logger.info(logger_message)
         return res
@@ -4550,28 +4539,7 @@ class AccountMove(models.Model):
             }
         if other_moves:
             other_moves._post(soft=False)
-        res = False
-        # Update any linked downpayment lines
-        dp_lines = (
-            self.line_ids._get_order_lines()
-                .filtered(
-                    lambda l:
-                        l.is_downpayment and
-                        not l.display_type
-                )
-        )
-        dp_lines._compute_name()  # Update the description of DP lines (Draft -> Posted)
-        downpayment_lines = dp_lines.filtered(lambda ol: not ol.order_id._is_locked())
-        other_order_lines = downpayment_lines.order_id.order_line - downpayment_lines
-        real_invoices = set(other_order_lines.invoice_lines.move_id)
-        for dpl in downpayment_lines:
-            dpl.price_unit = sum(
-                l.price_unit if l.move_id.move_type in ('out_invoice', 'in_invoice') else -l.price_unit
-                for l in dpl.invoice_lines
-                if l.move_id.state == 'posted' and l.move_id not in real_invoices  # don't recompute with the final invoice
-            )
-            dpl.tax_id = dpl.invoice_lines.tax_ids
-        return res
+        return False
 
     def js_assign_outstanding_line(self, line_id):
         ''' Called by the 'payment' widget to reconcile a suggested journal item to the present
@@ -4641,8 +4609,6 @@ class AccountMove(models.Model):
 
         self.mapped('line_ids').remove_move_reconcile()
         self.state = 'draft'
-        # Update any linked downpayments
-        self.line_ids.filtered('is_downpayment')._get_order_lines().filtered(lambda ol: not ol.display_type)._compute_name()
 
     def button_hash(self):
         self._hash_moves(force_hash=True)
@@ -4664,8 +4630,6 @@ class AccountMove(models.Model):
             raise UserError(_("Only draft journal entries can be cancelled."))
 
         self.write({'auto_post': 'no', 'state': 'cancel'})
-        # Update any linked downpayments
-        self.line_ids.filtered('is_downpayment')._get_order_lines().filtered(lambda ol: not ol.display_type)._compute_name()
 
     def action_activate_currency(self):
         self.currency_id.filtered(lambda currency: not currency.active).write({'active': True})

--- a/addons/account/models/account_move_line.py
+++ b/addons/account/models/account_move_line.py
@@ -418,7 +418,6 @@ class AccountMoveLine(models.Model):
              "associated partner",
     )
     is_refund = fields.Boolean(compute='_compute_is_refund')
-    is_downpayment = fields.Boolean()
 
     _sql_constraints = [
         (
@@ -1187,9 +1186,6 @@ class AccountMoveLine(models.Model):
             'type': 'ir.actions.act_window',
         }
 
-    def _get_order_lines(self):
-        return self.env['account.order.line.mixin']
-
     # -------------------------------------------------------------------------
     # INVERSE METHODS
     # -------------------------------------------------------------------------

--- a/addons/account/models/account_order_line_mixin.py
+++ b/None
@@ -1,140 +0,0 @@
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models, _, api
-from odoo.tools import format_date
-
-
-class AccountOrderLineMixin(models.AbstractModel):
-    # This mixin contains the shared logic between sale order lines and purchase order lines (ex. taxes, down payments, ...)
-    _name = 'account.order.line.mixin'
-    _description = 'Account Order Line Mixin'
-
-    is_downpayment = fields.Boolean(
-        string="Is a down payment",
-        help="Down payments are made when creating account moves from an order. They are not copied when duplicating an order."
-    )
-
-    invoice_lines = fields.One2many('account.move.line')  # To override
-    display_type = fields.Selection(
-        [('line_section', "Section"), ('line_note', "Note")],
-        help="Technical field for UX purpose.",
-    )
-    product_id = fields.Many2one('product.product', 'Product', change_default=True, index='btree_not_null')
-    name = fields.Text(string='Description', compute='_compute_name', required=True, store=True, readonly=False, precompute=True)
-    order_id = fields.Many2one('account.order.mixin')
-    qty_to_invoice = fields.Float('Quantity to Invoice', compute='_compute_qty_to_invoice', digits='Product Unit of Measure', store=True)
-    price_unit = fields.Float("Unit Price", digits='Product Price', compute='_compute_price_unit', required=True, readonly=False, store=True)
-    tax_id = fields.Many2many('account.tax', string="Taxes", check_company=True, context={'active_test': False})
-    product_uom = fields.Many2one('uom.uom', "Unit of Measure", domain="[('category_id', '=', product_uom_category_id)]")
-    discount = fields.Float("Discount (%)", digits='Discount', compute='_compute_discount', store=True, readonly=False, precompute=True)
-    currency_id = fields.Many2one(related='order_id.currency_id', store=True, string='Currency', readonly=True, precompute=True)
-    price_subtotal = fields.Monetary(compute='_compute_amount', string='Subtotal', store=True)
-    price_total = fields.Monetary(compute='_compute_amount', string='Total', store=True)
-    price_tax = fields.Float(compute='_compute_amount', string='Tax', store=True)
-
-    def _has_valid_qty_to_invoice(self, final=False):
-        """
-        Returns whether this account order line has a valid quantity for creating an invoice line from it.
-        Used in account order to decide whether to create an invoice line for this entry.
-        """
-        raise NotImplementedError  # To override
-
-    def _prepare_invoice_line(self, move=False, **optional_values):
-        """
-        Returns a dictionary of values to be used for creating the invoice line from this account order line.
-        Used in account order to create the invoice lines.
-        """
-        self.ensure_one()
-        return {
-            'display_type': self.display_type or 'product',
-            'product_id': self.product_id.id,
-            'product_uom_id': self.product_uom.id,
-            'quantity': self.qty_to_invoice,
-            'discount': self.discount,
-            'is_downpayment': self.is_downpayment,
-        }
-
-    def _get_invoice_lines(self):
-        self.ensure_one()
-        if self._context.get('accrual_entry_date'):
-            return self.invoice_lines.filtered(
-                lambda l: l.move_id.invoice_date and l.move_id.invoice_date <= self._context['accrual_entry_date']
-            )
-        else:
-            return self.invoice_lines
-
-    def _get_downpayment_state(self):
-        self.ensure_one()
-
-        if self.display_type:
-            return None
-
-        invoice_lines = self._get_invoice_lines()
-        if all(line.parent_state == 'draft' for line in invoice_lines):
-            return 'draft'
-        if all(line.parent_state == 'cancel' for line in invoice_lines):
-            return 'cancel'
-
-        return None
-
-    def _compute_name(self):
-        for line in self:
-            if line.is_downpayment:
-                lang = line.order_id._get_lang()
-                if lang != self.env.lang:
-                    line = line.with_context(lang=lang)
-
-                line.name = line._get_downpayment_description()
-
-    @api.depends('price_unit', 'tax_ids', 'discount')
-    def _compute_amount(self):
-        for line in self:
-            tax_results = self.env['account.tax']._compute_taxes(
-                [line._convert_to_tax_base_line_dict()],
-                line.company_id,
-            )
-            totals = next(iter(tax_results['totals'].values()))
-            amount_untaxed = totals['amount_untaxed']
-            amount_tax = totals['amount_tax']
-
-            line.update({
-                'price_subtotal': amount_untaxed,
-                'price_tax': amount_tax,
-                'price_total': amount_untaxed + amount_tax,
-            })
-
-    def _compute_price_unit(self):
-        pass  # To override
-
-    def _compute_discount(self):
-        pass  # To override
-
-    def _compute_qty_to_invoice(self):
-        pass  # To override
-
-    def _get_downpayment_description(self):
-        self.ensure_one()
-        if self.display_type:
-            return _("Down Payments")
-
-        dp_state = self._get_downpayment_state()
-        name = _("Down Payment")
-        if dp_state == 'draft':
-            name = _(
-                "Down Payment: %(date)s (Draft)",
-                date=format_date(self.env, self.create_date.date()),
-            )
-        elif dp_state == 'cancel':
-            name = _("Down Payment (Cancelled)")
-        else:
-            invoice = self._get_invoice_lines().filtered(
-                lambda aml: aml.quantity >= 0
-            ).move_id.filtered(lambda move: move.move_type in ['out_invoice', 'in_invoice'])
-            if len(invoice) == 1 and invoice.payment_reference and invoice.invoice_date:
-                name = _(
-                    "Down Payment (ref: %(reference)s on %(date)s)",
-                    reference=invoice.payment_reference,
-                    date=format_date(self.env, invoice.invoice_date),
-                )
-
-        return name

--- a/addons/account/models/account_order_mixin.py
+++ b/None
@@ -1,243 +0,0 @@
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import Command, _, api, fields, models
-from odoo.tools import float_is_zero
-
-
-class AccountOrderMixin(models.AbstractModel):
-    # This mixin contains the shared logic between sale orders and purchase orders (ex. taxes, down payments, ...)
-    _name = 'account.order.mixin'
-    _description = 'Account Order Mixin'
-
-    amount_to_invoice = fields.Monetary("Amount to invoice", compute='_compute_amount_to_invoice')
-    amount_invoiced = fields.Monetary("Amount already invoiced", compute='_compute_amount_invoiced')
-
-    # To override
-    company_id = fields.Many2one('res.company', 'Company', required=True, index=True, default=lambda self: self.env.company)
-    currency_id = fields.Many2one('res.currency', 'Currency', required=True, default=lambda self: self.env.company.currency_id.id)
-    fiscal_position_id = fields.Many2one('account.fiscal.position', string='Fiscal Position', check_company=True)
-    partner_id = fields.Many2one('res.partner', required=True, change_default=True, tracking=True, index=True, domain="[('company_id', 'in', (False, company_id))]")
-
-    amount_untaxed = fields.Monetary(string='Untaxed Amount', store=True, compute='_compute_amounts')
-    amount_tax = fields.Monetary(string="Taxes", store=True, compute='_compute_amounts')
-    amount_total = fields.Monetary(string='Total', store=True, compute='_compute_amounts')
-
-    invoice_ids = fields.Many2many('account.move')
-    order_line = fields.One2many('account.order.line.mixin')
-
-    invoice_status = fields.Selection([], compute='_compute_invoice_status', store=True)
-    name = fields.Char(string="Order Reference", required=True, copy=False, readonly=False, index='trigram', default=lambda self: _('New'))
-    payment_term_id = fields.Many2one('account.payment.term', 'Payment Terms', check_company=True)
-
-    @api.depends('invoice_ids.state', 'currency_id', 'amount_total')
-    def _compute_amount_to_invoice(self):
-        pass  # To override
-
-    @api.depends('amount_total', 'amount_to_invoice')
-    def _compute_amount_invoiced(self):
-        for order in self:
-            order.amount_invoiced = order.amount_total - order.amount_to_invoice
-
-    @api.depends('order_line.price_subtotal', 'order_line.price_tax', 'order_line.price_total')
-    def _compute_amounts(self):
-        """Compute the total amounts of the order."""
-        for order in self:
-            order_lines = order.order_line.filtered(lambda l: not l.display_type)
-
-            if order.company_id.tax_calculation_rounding_method == 'round_globally':
-                tax_results = self.env['account.tax']._compute_taxes(
-                    [
-                        line._convert_to_tax_base_line_dict()
-                        for line in order_lines
-                    ],
-                    order.company_id,
-                )
-                totals = tax_results['totals']
-                amount_untaxed = totals.get(order.currency_id, {}).get('amount_untaxed', 0.0)
-                amount_tax = totals.get(order.currency_id, {}).get('amount_tax', 0.0)
-            else:
-                amount_untaxed = sum(order_lines.mapped('price_subtotal'))
-                amount_tax = sum(order_lines.mapped('price_tax'))
-
-            order.amount_untaxed = amount_untaxed
-            order.amount_tax = amount_tax
-            order.amount_total = order.amount_untaxed + order.amount_tax
-
-    def _compute_invoice_status(self):
-        pass  # To override
-
-    def _get_copiable_order_lines(self):
-        """Returns the order lines that can be copied to a new order."""
-        return self.order_line.filtered(lambda l: not l.is_downpayment)
-
-    def copy_data(self, default=None):
-        default = default or {}
-        default_has_no_order_line = 'order_line' not in default
-        default.setdefault('order_line', [])
-        vals_list = super().copy_data(default=default)
-        if default_has_no_order_line:
-            for order, vals in zip(self, vals_list):
-                vals['order_line'] = [
-                    Command.create(line_vals)
-                    for line_vals in order._get_copiable_order_lines().copy_data()
-                ]
-        return vals_list
-
-    def action_view_invoice(self, invoices=False):
-        """
-        Returns the action to view the provided invoices.
-        Used to display the created invoices after creation.
-        """
-        raise NotImplementedError  # To override
-
-    def _get_order_direction(self):
-        """
-        Returns the sign (1 or -1) to indicate whether the order is related to selling or buying (respectively)
-        to multiply with when calculating the amount to invoice and creating the invoice lines.
-        """
-        raise NotImplementedError  # To override
-
-    def _is_locked(self):
-        """
-        Returns whether the order is locked.
-        Used to decide which down payment lines to update the status of when posting a linked down payment invoice.
-        """
-        raise NotImplementedError  # To override
-
-    def _create_new_order_line(self, values):
-        """
-        Returns the results of a call to create() on the subrecord (sale.order.line or purchase.order.line).
-        Used to create the order lines of the correct type.
-        """
-        raise NotImplementedError  # To override
-
-    def _prepare_invoice(self):
-        """
-        Prepare the dict of values to create the new invoice for this order.
-        Used when generating the invoice from this account order.
-        """
-        self.ensure_one()
-        return {
-            'currency_id': self.currency_id.id,
-            'invoice_origin': self.name,
-            'invoice_payment_term_id': self.payment_term_id.id,
-            'invoice_line_ids': [],
-            'company_id': self.company_id.id,
-        }
-
-    def _create_invoices(self, grouped=False, final=False, date=None):
-        """
-        Create the invoices for this account order.
-        """
-        raise NotImplementedError  # To override
-
-    def _get_lang(self):
-        self.ensure_one()
-
-        if self.partner_id.lang and not self.partner_id.is_public:
-            return self.partner_id.lang
-
-        return self.env.lang
-
-    def _get_invoiceable_lines(self, final=False):
-        """Return the invoiceable lines for order `self`."""
-
-        # Keep down payment lines separately, to put them together
-        # at the end of the invoice, in a specific dedicated section.
-        down_payment_lines = []
-        invoiceable_lines = []
-        pending_section = None
-        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
-
-        for line in self.order_line:
-            if line.display_type == 'line_section':
-                # Only invoice the section if one of its lines is invoiceable
-                pending_section = line
-                continue
-            if line.display_type != 'line_note' and float_is_zero(line.qty_to_invoice, precision_digits=precision):
-                continue
-            if line._has_valid_qty_to_invoice(final) or line.display_type == 'line_note':
-                if line.is_downpayment:
-                    down_payment_lines.append(line)
-                    continue
-                if pending_section:
-                    invoiceable_lines.append(pending_section)
-                    pending_section = None
-                invoiceable_lines.append(line)
-
-        return invoiceable_lines + down_payment_lines
-
-    def _prepare_down_payment_section_line(self, **optional_values):
-        """ Prepare the values to create a new down payment section.
-
-        :param dict optional_values: any parameter that should be added to the returned down payment section
-        :return: `account.move.line` creation values
-        :rtype: dict
-        """
-        self.ensure_one()
-        # Edit the context to properly translate the section heading (https://github.com/odoo/odoo/commit/964d35207717af9e7bf42e6f9293249cb6e48991)
-        context = {'lang': self.partner_id.lang}
-        down_payments_section_line = {
-            'display_type': 'line_section',
-            'name': _("Down Payments"),
-            'product_id': False,
-            'product_uom_id': False,
-            'quantity': 0,
-            'discount': 0,
-            'price_unit': 0,
-            'account_id': False,
-            **optional_values
-        }
-        del context
-        return down_payments_section_line
-
-    def _get_order_lines_to_report(self):
-        down_payment_lines = self.order_line.filtered(
-            lambda line:
-                line.is_downpayment
-                and not line.display_type
-                and not line._get_downpayment_state()
-        )
-
-        return self.order_line.filtered(
-            lambda line:
-                not line.is_downpayment
-                or (line.display_type and down_payment_lines)
-                or line in down_payment_lines
-        )
-
-    def _generate_invoice_values(self, final=False):
-        invoice_vals_list = []
-        sequence = 0
-        for order in self:
-            order = order.with_company(order.company_id).with_context(lang=order._get_lang())
-
-            invoiceable_lines = order._get_invoiceable_lines(final)
-
-            if not any(not line.display_type for line in invoiceable_lines):
-                continue
-
-            invoice_vals = order._prepare_invoice()
-            invoice_line_vals = []
-            down_payment_section_added = False
-            for line in invoiceable_lines:
-                if not down_payment_section_added and line.is_downpayment:
-                    # Create a dedicated section for the down payments
-                    # (put at the end of the invoiceable_lines, except for the initial down payment invoice itself)
-                    invoice_line_vals.append(
-                        Command.create(
-                            order._prepare_down_payment_section_line(sequence=sequence)
-                        ),
-                    )
-                    down_payment_section_added = True
-                    sequence += 1
-                invoice_line_vals.append(
-                    Command.create(
-                        line._prepare_invoice_line(sequence=sequence)
-                    ),
-                )
-                sequence += 1
-
-            invoice_vals['invoice_line_ids'] += invoice_line_vals
-            invoice_vals_list.append(invoice_vals)
-        return invoice_vals_list
