PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:9 + add:0, change matches:
-    _inherit = 'calendar.event'
-    _inherit = 'crm.team.member'
-    _inherit = 'digest.digest'
-    _inherit = 'ir.config_parameter'
-    _inherit = "mail.activity"
-    _inherit = 'res.config.settings'
-    _inherit = 'res.partner'
-    _inherit = 'res.users'
-    _inherit = 'utm.campaign'

Total Changes: 115

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/crm/models/calendar.py
+++ b/addons/crm/models/calendar.py
@@ -5,7 +5,7 @@ from odoo import api, fields, models
 
 
 class CalendarEvent(models.Model):
-    _inherit = 'calendar.event'
+    _inherit = ['calendar.event']
 
     @api.model
     def default_get(self, fields):

--- a/addons/crm/models/crm_lead.py
+++ b/addons/crm/models/crm_lead.py
@@ -85,8 +85,7 @@ PLS_COMPUTE_BATCH_STEP = 50000  # odoo.models.PREFETCH_MAX = 1000 but larger clu
 PLS_UPDATE_BATCH_STEP = 5000
 
 
-class Lead(models.Model):
-    _name = "crm.lead"
+class CrmLead(models.Model):
     _description = "Lead/Opportunity"
     _order = "priority desc, id desc"
     _inherit = ['mail.thread.cc',
@@ -733,7 +732,7 @@ class Lead(models.Model):
         for vals in vals_list:
             if vals.get('website'):
                 vals['website'] = self.env['res.partner']._clean_website(vals['website'])
-        leads = super(Lead, self).create(vals_list)
+        leads = super().create(vals_list)
 
         for lead, values in zip(leads, vals_list):
             if any(field in ['active', 'stage_id'] for field in values):
@@ -779,16 +778,16 @@ class Lead(models.Model):
             self._handle_won_lost(vals)
 
         if not stage_is_won:
-            return super(Lead, self).write(vals)
+            return super().write(vals)
 
         # stage change between two won stages: does not change the date_closed
         leads_already_won = self.filtered(lambda lead: lead.stage_id.is_won)
         remaining = self - leads_already_won
         if remaining:
-            result = super(Lead, remaining).write(vals)
+            result = super(CrmLead, remaining).write(vals)
         if leads_already_won:
             vals.pop('date_closed', False)
-            result = super(Lead, leads_already_won).write(vals)
+            result = super(CrmLead, leads_already_won).write(vals)
         return result
 
     @api.model
@@ -879,11 +878,11 @@ class Lead(models.Model):
         in scoring frequency table.
         - From won to lost : We need to decrement corresponding won count + increment corresponding lost count
         in scoring frequency table."""
-        Lead = self.env['crm.lead']
-        leads_reach_won = Lead
-        leads_leave_won = Lead
-        leads_reach_lost = Lead
-        leads_leave_lost = Lead
+        CrmLead = self.env['crm.lead']
+        leads_reach_won = CrmLead
+        leads_leave_won = CrmLead
+        leads_reach_lost = CrmLead
+        leads_leave_lost = CrmLead
         won_stage_ids = self.env['crm.stage'].search([('is_won', '=', True)]).ids
         for lead in self:
             if 'stage_id' in vals:
@@ -935,7 +934,7 @@ class Lead(models.Model):
                 'res_id': False,
                 'res_model_id': False,
             })
-        return super(Lead, self).unlink()
+        return super().unlink()
 
     @api.model
     def _read_group_stage_ids(self, stages, domain):
@@ -986,7 +985,7 @@ class Lead(models.Model):
     def toggle_active(self):
         """ When archiving: mark probability as 0. When re-activating
         update probability again, for leads and opportunities. """
-        res = super(Lead, self).toggle_active()
+        res = super().toggle_active()
         activated = self.filtered(lambda lead: lead.active)
         archived = self.filtered(lambda lead: not lead.active)
         if activated:
@@ -1920,7 +1919,7 @@ class Lead(models.Model):
             return self.env.ref('crm.mt_lead_restored')
         elif 'active' in init_values and not self.active:
             return self.env.ref('crm.mt_lead_lost')
-        return super(Lead, self)._track_subtype(init_values)
+        return super()._track_subtype(init_values)
 
     def _notify_by_email_prepare_rendering_context(self, message, msg_vals=False, model_description=False,
                                                    force_email_company=False, force_email_lang=False):
@@ -1974,7 +1973,7 @@ class Lead(models.Model):
         res = {lead.id: aliases.get(lead.team_id.id) for lead in self}
         leftover = self.filtered(lambda rec: not rec.team_id)
         if leftover:
-            res.update(super(Lead, leftover)._notify_get_reply_to(default=default))
+            res.update(super(CrmLead, leftover)._notify_get_reply_to(default=default))
         return res
 
     def _message_get_default_recipients(self):
@@ -2025,7 +2024,7 @@ class Lead(models.Model):
             defaults['priority'] = msg_dict.get('priority')
         defaults.update(custom_values)
 
-        return super(Lead, self).message_new(msg_dict, custom_values=defaults)
+        return super().message_new(msg_dict, custom_values=defaults)
 
     def _message_post_after_hook(self, message, msg_vals):
         if self.email_from and not self.partner_id:
@@ -2043,14 +2042,14 @@ class Lead(models.Model):
                 self.search([
                     ('partner_id', '=', False), email_domain, ('stage_id.fold', '=', False)
                 ]).write({'partner_id': new_partner[0].id})
-        return super(Lead, self)._message_post_after_hook(message, msg_vals)
+        return super()._message_post_after_hook(message, msg_vals)
 
     def _message_partner_info_from_emails(self, emails, link_mail=False):
         """ Try to propose a better recipient when having only an email by populating
         it with the partner_name / contact_name field of the lead e.g. if lead
         contact_name is "Raoul" and email is "raoul@raoul.fr", suggest
         "Raoul" <raoul@raoul.fr> as recipient. """
-        result = super(Lead, self)._message_partner_info_from_emails(emails, link_mail=link_mail)
+        result = super()._message_partner_info_from_emails(emails, link_mail=link_mail)
         if not (self.partner_name or self.contact_name) or not self.email_from:
             return result
         for email, partner_info in zip(emails, result):

--- a/addons/crm/models/crm_lead_scoring_frequency.py
+++ b/addons/crm/models/crm_lead_scoring_frequency.py
@@ -2,8 +2,7 @@
 from odoo import fields, models
 
 
-class LeadScoringFrequency(models.Model):
-    _name = 'crm.lead.scoring.frequency'
+class CrmLeadScoringFrequency(models.Model):
     _description = 'Lead Scoring Frequency'
 
     variable = fields.Char('Variable', index=True)
@@ -12,8 +11,8 @@ class LeadScoringFrequency(models.Model):
     lost_count = fields.Float('Lost Count', digits=(16, 1))  # Float because we add 0.1 to avoid zero Frequency issue
     team_id = fields.Many2one('crm.team', 'Sales Team', ondelete="cascade")
 
-class FrequencyField(models.Model):
-    _name = 'crm.lead.scoring.frequency.field'
+
+class CrmLeadScoringFrequencyField(models.Model):
     _description = 'Fields that can be used for predictive lead scoring computation'
 
     name = fields.Char(related="field_id.field_description")

--- a/addons/crm/models/crm_lost_reason.py
+++ b/addons/crm/models/crm_lost_reason.py
@@ -4,8 +4,7 @@
 from odoo import fields, models, _
 
 
-class LostReason(models.Model):
-    _name = "crm.lost.reason"
+class CrmLostReason(models.Model):
     _description = 'Opp. Lost Reason'
 
     name = fields.Char('Description', required=True, translate=True)

--- a/addons/crm/models/crm_recurring_plan.py
+++ b/addons/crm/models/crm_recurring_plan.py
@@ -4,8 +4,7 @@
 from odoo import fields, models
 
 
-class RecurringPlan(models.Model):
-    _name = "crm.recurring.plan"
+class CrmRecurringPlan(models.Model):
     _description = "CRM Recurring revenue plans"
     _order = "sequence"
 

--- a/addons/crm/models/crm_stage.py
+++ b/addons/crm/models/crm_stage.py
@@ -11,13 +11,12 @@ AVAILABLE_PRIORITIES = [
 ]
 
 
-class Stage(models.Model):
+class CrmStage(models.Model):
     """ Model for case stages. This models the main stages of a document
         management flow. Main CRM objects (leads, opportunities, project
         issues, ...) will now use only stages, instead of state and stages.
         Stages are for example used to display the kanban view of records.
     """
-    _name = "crm.stage"
     _description = "CRM Stages"
     _rec_name = 'name'
     _order = "sequence, name, id"
@@ -32,7 +31,7 @@ class Stage(models.Model):
             ctx = dict(self.env.context)
             ctx.pop('default_team_id')
             self = self.with_context(ctx)
-        return super(Stage, self).default_get(fields)
+        return super().default_get(fields)
 
     name = fields.Char('Stage Name', required=True, translate=True)
     sequence = fields.Integer('Sequence', default=1, help="Used to order stages. Lower is better.")

--- a/addons/crm/models/crm_team.py
+++ b/addons/crm/models/crm_team.py
@@ -17,8 +17,7 @@ from odoo.tools.safe_eval import safe_eval
 _logger = logging.getLogger(__name__)
 
 
-class Team(models.Model):
-    _name = 'crm.team'
+class CrmTeam(models.Model):
     _inherit = ['mail.alias.mixin', 'crm.team']
     _description = 'Sales Team'
 
@@ -126,7 +125,7 @@ class Team(models.Model):
     # ------------------------------------------------------------
 
     def write(self, vals):
-        result = super(Team, self).write(vals)
+        result = super().write(vals)
         if 'use_leads' in vals or 'use_opportunities' in vals:
             for team in self:
                 alias_vals = team._alias_get_creation_values()
@@ -170,14 +169,14 @@ class Team(models.Model):
                         'variable': frequency.variable,
                         'won_count': frequency.won_count if float_compare(frequency.won_count, 0.1, 2) == 1 else 0.1,
                     })
-        return super(Team, self).unlink()
+        return super().unlink()
 
     # ------------------------------------------------------------
     # MESSAGING
     # ------------------------------------------------------------
 
     def _alias_get_creation_values(self):
-        values = super(Team, self)._alias_get_creation_values()
+        values = super()._alias_get_creation_values()
         values['alias_model_id'] = self.env['ir.model']._get('crm.lead').id
         if self.id:
             if not self.use_leads and not self.use_opportunities:
@@ -699,7 +698,7 @@ class Team(models.Model):
         return action
 
     def _compute_dashboard_button_name(self):
-        super(Team, self)._compute_dashboard_button_name()
+        super()._compute_dashboard_button_name()
         team_with_pipelines = self.filtered(lambda el: el.use_opportunities)
         team_with_pipelines.update({'dashboard_button_name': _("Pipeline")})
 
@@ -712,29 +711,29 @@ class Team(models.Model):
             }
             action['help'] = self.env['ir.ui.view']._render_template('crm.crm_action_helper', values=rcontext)
             return action
-        return super(Team,self).action_primary_channel_button()
+        return super().action_primary_channel_button()
 
     def _graph_get_model(self):
         if self.use_opportunities:
             return 'crm.lead'
-        return super(Team,self)._graph_get_model()
+        return super()._graph_get_model()
 
     def _graph_date_column(self):
         if self.use_opportunities:
             return SQL('create_date')
-        return super(Team,self)._graph_date_column()
+        return super()._graph_date_column()
 
     def _graph_y_query(self):
         if self.use_opportunities:
             return SQL('count(*)')
-        return super(Team,self)._graph_y_query()
+        return super()._graph_y_query()
 
     def _extra_sql_conditions(self):
         if self.use_opportunities:
             return SQL("type LIKE 'opportunity'")
-        return super(Team,self)._extra_sql_conditions()
+        return super()._extra_sql_conditions()
 
     def _graph_title_and_key(self):
         if self.use_opportunities:
             return ['', _('New Opportunities')] # no more title
-        return super(Team, self)._graph_title_and_key()
+        return super()._graph_title_and_key()

--- a/addons/crm/models/crm_team_member.py
+++ b/addons/crm/models/crm_team_member.py
@@ -12,8 +12,8 @@ from odoo.tools import float_round
 _logger = logging.getLogger(__name__)
 
 
-class TeamMember(models.Model):
-    _inherit = 'crm.team.member'
+class CrmTeamMember(models.Model):
+    _inherit = ['crm.team.member']
 
     # assignment
     assignment_enabled = fields.Boolean(related="crm_team_id.assignment_enabled")

--- a/addons/crm/models/digest.py
+++ b/addons/crm/models/digest.py
@@ -5,8 +5,8 @@ from odoo import api, fields, models, _
 from odoo.exceptions import AccessError
 
 
-class Digest(models.Model):
-    _inherit = 'digest.digest'
+class DigestDigest(models.Model):
+    _inherit = ['digest.digest']
 
     kpi_crm_lead_created = fields.Boolean('New Leads')
     kpi_crm_lead_created_value = fields.Integer(compute='_compute_kpi_crm_lead_created_value')
@@ -31,7 +31,7 @@ class Digest(models.Model):
         )
 
     def _compute_kpis_actions(self, company, user):
-        res = super(Digest, self)._compute_kpis_actions(company, user)
+        res = super()._compute_kpis_actions(company, user)
         res['kpi_crm_lead_created'] = 'crm.crm_lead_action_pipeline&menu_id=%s' % self.env.ref('crm.crm_menu_root').id
         res['kpi_crm_opportunities_won'] = 'crm.crm_lead_action_pipeline&menu_id=%s' % self.env.ref('crm.crm_menu_root').id
         if user.has_group('crm.group_use_lead'):

--- a/addons/crm/models/ir_config_parameter.py
+++ b/addons/crm/models/ir_config_parameter.py
@@ -5,11 +5,11 @@ from odoo import api, models
 from odoo.addons.base.models.ir_model import MODULE_UNINSTALL_FLAG
 
 
-class IrConfigParameter(models.Model):
-    _inherit = 'ir.config_parameter'
+class IrConfig_Parameter(models.Model):
+    _inherit = ['ir.config_parameter']
 
     def write(self, vals):
-        result = super(IrConfigParameter, self).write(vals)
+        result = super().write(vals)
         if any(record.key == "crm.pls_fields" for record in self):
             self.env.flush_all()
             self.env.registry.setup_models(self.env.cr)
@@ -17,7 +17,7 @@ class IrConfigParameter(models.Model):
 
     @api.model_create_multi
     def create(self, vals_list):
-        records = super(IrConfigParameter, self).create(vals_list)
+        records = super().create(vals_list)
         if any(record.key == "crm.pls_fields" for record in records):
             self.env.flush_all()
             self.env.registry.setup_models(self.env.cr)
@@ -25,7 +25,7 @@ class IrConfigParameter(models.Model):
 
     def unlink(self):
         pls_emptied = any(record.key == "crm.pls_fields" for record in self)
-        result = super(IrConfigParameter, self).unlink()
+        result = super().unlink()
         if pls_emptied and not self._context.get(MODULE_UNINSTALL_FLAG):
             self.env.flush_all()
             self.env.registry.setup_models(self.env.cr)

--- a/addons/crm/models/mail_activity.py
+++ b/addons/crm/models/mail_activity.py
@@ -5,7 +5,7 @@ from odoo import models
 
 
 class MailActivity(models.Model):
-    _inherit = "mail.activity"
+    _inherit = ["mail.activity"]
 
     def action_create_calendar_event(self):
         """ Small override of the action that creates a calendar.

--- a/addons/crm/models/res_config_settings.py
+++ b/addons/crm/models/res_config_settings.py
@@ -9,7 +9,7 @@ from odoo.tools import format_list
 
 
 class ResConfigSettings(models.TransientModel):
-    _inherit = 'res.config.settings'
+    _inherit = ['res.config.settings']
 
     group_use_lead = fields.Boolean(string="Leads", implied_group='crm.group_use_lead')
     group_use_recurring_revenues = fields.Boolean(string="Recurring Revenues", implied_group='crm.group_use_recurring_revenues')

--- a/addons/crm/models/res_partner.py
+++ b/addons/crm/models/res_partner.py
@@ -4,9 +4,8 @@ from odoo import api, fields, models
 from odoo.osv import expression
 
 
-class Partner(models.Model):
-    _name = 'res.partner'
-    _inherit = 'res.partner'
+class ResPartner(models.Model):
+    _inherit = ['res.partner']
 
     opportunity_ids = fields.One2many('crm.lead', 'partner_id', string='Opportunities', domain=[('type', '=', 'opportunity')])
     opportunity_count = fields.Integer(
@@ -17,7 +16,7 @@ class Partner(models.Model):
 
     @api.model
     def default_get(self, fields):
-        rec = super(Partner, self).default_get(fields)
+        rec = super().default_get(fields)
         active_model = self.env.context.get('active_model')
         if active_model == 'crm.lead' and len(self.env.context.get('active_ids', [])) <= 1:
             lead = self.env[active_model].browse(self.env.context.get('active_id')).exists()

--- a/addons/crm/models/res_users.py
+++ b/addons/crm/models/res_users.py
@@ -4,8 +4,8 @@
 from odoo import fields, models
 
 
-class Users(models.Model):
-    _inherit = 'res.users'
+class ResUsers(models.Model):
+    _inherit = ['res.users']
 
     target_sales_won = fields.Integer('Won in Opportunities Target')
     target_sales_done = fields.Integer('Activities Done Target')

--- a/addons/crm/models/utm.py
+++ b/addons/crm/models/utm.py
@@ -5,7 +5,7 @@ from odoo import fields, models
 
 
 class UtmCampaign(models.Model):
-    _inherit = 'utm.campaign'
+    _inherit = ['utm.campaign']
 
     use_leads = fields.Boolean('Use Leads', compute='_compute_use_leads')
     crm_lead_count = fields.Integer('Leads/Opportunities count', groups='sales_team.group_sale_salesman', compute="_compute_crm_lead_count")
