PR: https://github.com/odoo/odoo/pull/

From: bd5709c1d5df48998ed3c89ebe5bae9114bc4881
From: Siddharth Gajjar
Date: 2017-04-24 10:31:43

Structural Changes: 5
Total Changes: 33

[ADD] mail: re-introduce recommended next activity

Activities now have recommended next activities. Based on next activities
configured on activity types, it allows to implement light workflows
using next activities feature.

This feature was removed when refactoring crm activities to generic
activities. People asking to remove it were visibly wrong and it is
now implemented back as it was in v10.

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_activity.py
+++ b/addons/mail/models/mail_activity.py
@@ -14,7 +14,7 @@ class MailActivityType(models.Model):
     _name = 'mail.activity.type'
     _description = 'Activity Type'
     _rec_name = 'name'
-    _order = 'sequence'
+    _order = 'sequence, id'
 
     name = fields.Char('Name', required=True, translate=True)
     summary = fields.Char('Summary', translate=True)
@@ -27,7 +27,12 @@ class MailActivityType(models.Model):
         'ir.model', 'Model', index=True,
         help='Specify a model if the activity should be specific to a model'
              'and not available when managing activities for other models.')
-
+    next_type_ids = fields.Many2many(
+        'mail.activity.type', 'mail_activity_rel', 'activity_id', 'recommended_id',
+        string='Recommended Next Activities')
+    previous_type_ids = fields.Many2many(
+        'mail.activity.type', 'mail_activity_rel', 'recommended_id', 'activity_id',
+        string='Preceding Activities')
 
 class MailActivity(models.Model):
     """ An actual activity to perform. Activities are linked to
@@ -77,6 +82,18 @@ class MailActivity(models.Model):
         ('today', 'Today'),
         ('planned', 'Planned')], 'State',
         compute='_compute_state')
+    recommended_activity_type_id = fields.Many2one('mail.activity.type', string="Recommended Activity Type")
+    previous_activity_type_id = fields.Many2one('mail.activity.type', string='Previous Activity Type')
+    has_recommended_activities = fields.Boolean(
+        'Next activities available',
+        compute='_compute_has_recommended_activities',
+        help='Technical field for UX purpose')
+
+    @api.multi
+    @api.onchange('previous_activity_type_id')
+    def _compute_has_recommended_activities(self):
+        for record in self:
+            record.has_recommended_activities = bool(record.previous_activity_type_id.next_type_ids)
 
     @api.depends('res_model', 'res_id')
     def _compute_res_name(self):
@@ -99,10 +116,18 @@ class MailActivity(models.Model):
     @api.onchange('activity_type_id')
     def _onchange_activity_type_id(self):
         if self.activity_type_id:
-            if not self.summary:
-                self.summary = self.activity_type_id.summary
+            self.summary = self.activity_type_id.summary
             self.date_deadline = (datetime.now() + timedelta(days=self.activity_type_id.days))
 
+    @api.onchange('previous_activity_type_id')
+    def _onchange_previous_activity_type_id(self):
+        if self.previous_activity_type_id.next_type_ids:
+            self.recommended_activity_type_id = self.previous_activity_type_id.next_type_ids[0]
+
+    @api.onchange('recommended_activity_type_id')
+    def _onchange_recommended_activity_type_id(self):
+        self.activity_type_id = self.recommended_activity_type_id
+
     @api.model
     def create(self, values):
         activity = super(MailActivity, self).create(values)
