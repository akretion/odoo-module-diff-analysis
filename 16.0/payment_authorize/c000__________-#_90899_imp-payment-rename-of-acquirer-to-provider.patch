PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Breaking data model changes scores: del:2 + add:0, change matches:
-    _inherit = 'payment.acquirer'
-    provider = fields.Selection(

Total Changes: 397

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_authorize/models/__init__.py
+++ b/addons/payment_authorize/models/__init__.py
@@ -1,5 +1,5 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_token
 from . import payment_transaction

--- a/addons/payment_authorize/models/authorize_request.py
+++ b/addons/payment_authorize/models/authorize_request.py
@@ -24,20 +24,20 @@ class AuthorizeAPI:
 
     AUTH_ERROR_STATUS = '3'
 
-    def __init__(self, acquirer):
-        """Initiate the environment with the acquirer data.
+    def __init__(self, provider):
+        """Initiate the environment with the provider data.
 
-        :param recordset acquirer: payment.acquirer account that will be contacted
+        :param recordset provider: payment.provider account that will be contacted
         """
-        if acquirer.state == 'enabled':
+        if provider.state == 'enabled':
             self.url = 'https://api.authorize.net/xml/v1/request.api'
         else:
             self.url = 'https://apitest.authorize.net/xml/v1/request.api'
 
-        self.state = acquirer.state
-        self.name = acquirer.authorize_login
-        self.transaction_key = acquirer.authorize_transaction_key
-        self.payment_method_type = acquirer.authorize_payment_method_type
+        self.state = provider.state
+        self.name = provider.authorize_login
+        self.transaction_key = provider.authorize_transaction_key
+        self.payment_method_type = provider.authorize_payment_method_type
 
     def _make_request(self, operation, data=None):
         request = {
@@ -249,7 +249,7 @@ class AuthorizeAPI:
                 'profile': {
                     'customerProfileId': token.authorize_profile,
                     'paymentProfile': {
-                        'paymentProfileId': token.acquirer_ref,
+                        'paymentProfileId': token.provider_ref,
                     }
                 },
             }
@@ -334,7 +334,7 @@ class AuthorizeAPI:
         })
         return self._format_response(response, 'refund')
 
-    # Acquirer configuration: fetch authorize_client_key & currencies
+    # Provider configuration: fetch authorize_client_key & currencies
     def merchant_details(self):
         """ Retrieves the merchant details and generate a new public client key if none exists.
 

--- a/addons/payment_authorize/models/payment_acquirer.py
+++ b/addons/payment_authorize/models/payment_provider.py
@@ -12,10 +12,10 @@ from .authorize_request import AuthorizeAPI
 _logger = logging.getLogger(__name__)
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('authorize', 'Authorize.Net')], ondelete={'authorize': 'set default'})
     authorize_login = fields.Char(
         string="API Login ID", help="The ID solely used to identify the account with Authorize.Net",
@@ -43,12 +43,12 @@ class PaymentAcquirer(models.Model):
 
     @api.constrains('authorize_payment_method_type')
     def _check_payment_method_type(self):
-        for acquirer in self.filtered(lambda acq: acq.provider == "authorize"):
-            if self.env['payment.token'].search([('acquirer_id', '=', acquirer.id)], limit=1):
+        for provider in self.filtered(lambda p: p.code == "authorize"):
+            if self.env['payment.token'].search([('provider_id', '=', provider.id)], limit=1):
                 raise ValidationError(_(
-                    "There are active tokens linked to this acquirer. To change the payment method "
-                    "type, please disable the acquirer and duplicate it. Then, change the payment "
-                    "method type on the duplicated acquirer."
+                    "There are active tokens linked to this provider. To change the payment method "
+                    "type, please disable the provider and duplicate it. Then, change the payment "
+                    "method type on the duplicated provider."
                 ))
 
     #=== COMPUTE METHODS ===#
@@ -56,7 +56,7 @@ class PaymentAcquirer(models.Model):
     def _compute_feature_support_fields(self):
         """ Override of `payment` to enable additional features. """
         super()._compute_feature_support_fields()
-        self.filtered(lambda acq: acq.provider == 'authorize').update({
+        self.filtered(lambda p: p.code == 'authorize').update({
             'support_manual_capture': True,
             'support_refund': 'full_only',
             'support_tokenization': True,
@@ -87,7 +87,7 @@ class PaymentAcquirer(models.Model):
         self.ensure_one()
 
         if self.state == 'disabled':
-            raise UserError(_("This action cannot be performed while the acquirer is disabled."))
+            raise UserError(_("This action cannot be performed while the provider is disabled."))
 
         authorize_API = AuthorizeAPI(self)
 
@@ -110,17 +110,17 @@ class PaymentAcquirer(models.Model):
     # === BUSINESS METHODS ===#
 
     @api.model
-    def _get_compatible_acquirers(self, *args, currency_id=None, **kwargs):
-        """ Override of payment to unlist Authorize acquirers for unsupported currencies. """
-        acquirers = super()._get_compatible_acquirers(*args, currency_id=currency_id, **kwargs)
+    def _get_compatible_providers(self, *args, currency_id=None, **kwargs):
+        """ Override of payment to unlist Authorize providers for unsupported currencies. """
+        providers = super()._get_compatible_providers(*args, currency_id=currency_id, **kwargs)
 
         currency = self.env['res.currency'].browse(currency_id).exists()
         if currency:
-            acquirers = acquirers.filtered(
-                lambda a: a.provider != 'authorize' or currency == a.authorize_currency_id
+            providers = providers.filtered(
+                lambda p: p.code != 'authorize' or currency == p.authorize_currency_id
             )
 
-        return acquirers
+        return providers
 
     def _get_validation_amount(self):
         """ Override of payment to return the amount for Authorize.Net validation operations.
@@ -129,7 +129,7 @@ class PaymentAcquirer(models.Model):
         :rtype: float
         """
         res = super()._get_validation_amount()
-        if self.provider != 'authorize':
+        if self.code != 'authorize':
             return res
 
         return 0.01
@@ -141,7 +141,7 @@ class PaymentAcquirer(models.Model):
         :rtype: recordset of `res.currency`
         """
         res = super()._get_validation_currency()
-        if self.provider != 'authorize':
+        if self.code != 'authorize':
             return res
 
         return self.authorize_currency_id

--- a/addons/payment_authorize/models/payment_token.py
+++ b/addons/payment_authorize/models/payment_token.py
@@ -22,4 +22,3 @@ class PaymentToken(models.Model):
         help="The type of payment method this token is linked to.",
         selection=[("credit_card", "Credit Card"), ("bank_account", "Bank Account (USA Only)")],
     )
-

--- a/addons/payment_authorize/models/payment_transaction.py
+++ b/addons/payment_authorize/models/payment_transaction.py
@@ -18,16 +18,16 @@ class PaymentTransaction(models.Model):
     _inherit = 'payment.transaction'
 
     def _get_specific_processing_values(self, processing_values):
-        """ Override of payment to return an access token as acquirer-specific processing values.
+        """ Override of payment to return an access token as provider-specific processing values.
 
         Note: self.ensure_one() from `_get_processing_values`
 
         :param dict processing_values: The generic processing values of the transaction
-        :return: The dict of acquirer-specific processing values
+        :return: The dict of provider-specific processing values
         :rtype: dict
         """
         res = super()._get_specific_processing_values(processing_values)
-        if self.provider != 'authorize':
+        if self.provider_code != 'authorize':
             return res
 
         return {
@@ -46,8 +46,8 @@ class PaymentTransaction(models.Model):
         """
         self.ensure_one()
 
-        authorize_API = AuthorizeAPI(self.acquirer_id)
-        if self.acquirer_id.capture_manually or self.operation == 'validation':
+        authorize_API = AuthorizeAPI(self.provider_id)
+        if self.provider_id.capture_manually or self.operation == 'validation':
             return authorize_API.authorize(self, opaque_data=opaque_data)
         else:
             return authorize_API.auth_and_capture(self, opaque_data=opaque_data)
@@ -61,14 +61,14 @@ class PaymentTransaction(models.Model):
         :raise: UserError if the transaction is not linked to a token
         """
         super()._send_payment_request()
-        if self.provider != 'authorize':
+        if self.provider_code != 'authorize':
             return
 
         if not self.token_id.authorize_profile:
             raise UserError("Authorize.Net: " + _("The transaction is not linked to a token."))
 
-        authorize_API = AuthorizeAPI(self.acquirer_id)
-        if self.acquirer_id.capture_manually:
+        authorize_API = AuthorizeAPI(self.provider_id)
+        if self.provider_id.capture_manually:
             res_content = authorize_API.authorize(self, token=self.token_id)
             _logger.info(
                 "authorize request response for transaction with reference %s:\n%s",
@@ -94,14 +94,14 @@ class PaymentTransaction(models.Model):
         """
         self.ensure_one()
 
-        if self.provider != 'authorize':
+        if self.provider_code != 'authorize':
             return super()._send_refund_request(
                 amount_to_refund=amount_to_refund,
                 create_refund_transaction=create_refund_transaction,
             )
 
-        authorize_api = AuthorizeAPI(self.acquirer_id)
-        tx_details = authorize_api.get_transaction_details(self.acquirer_reference)
+        authorize_api = AuthorizeAPI(self.provider_id)
+        tx_details = authorize_api.get_transaction_details(self.provider_reference)
         if 'err_code' in tx_details:  # Could not retrieve the transaction details.
             raise ValidationError("Authorize.Net: " + _(
                 "Could not retrieve the transaction details. (error code: %s; error_details: %s)",
@@ -128,7 +128,7 @@ class PaymentTransaction(models.Model):
             if tx_status in TRANSACTION_STATUS_MAPPING['authorized']:
                 # The payment has not been settle on Authorize.net yet. It must be voided rather
                 # than refunded. Since the funds have not moved yet, we don't create a refund tx.
-                res_content = authorize_api.void(self.acquirer_reference)
+                res_content = authorize_api.void(self.provider_reference)
                 tx_to_process = self
             else:
                 # The payment has been settled on Authorize.net side. We can refund it.
@@ -138,7 +138,7 @@ class PaymentTransaction(models.Model):
                 )
                 rounded_amount = round(amount_to_refund, self.currency_id.decimal_places)
                 res_content = authorize_api.refund(
-                    self.acquirer_reference, rounded_amount, tx_details
+                    self.provider_reference, rounded_amount, tx_details
                 )
                 tx_to_process = refund_tx
             _logger.info(
@@ -162,12 +162,12 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._send_capture_request()
-        if self.provider != 'authorize':
+        if self.provider_code != 'authorize':
             return
 
-        authorize_API = AuthorizeAPI(self.acquirer_id)
+        authorize_API = AuthorizeAPI(self.provider_id)
         rounded_amount = round(self.amount, self.currency_id.decimal_places)
-        res_content = authorize_API.capture(self.acquirer_reference, rounded_amount)
+        res_content = authorize_API.capture(self.provider_reference, rounded_amount)
         _logger.info(
             "capture request response for transaction with reference %s:\n%s",
             self.reference, pprint.pformat(res_content)
@@ -182,31 +182,31 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._send_void_request()
-        if self.provider != 'authorize':
+        if self.provider_code != 'authorize':
             return
 
-        authorize_API = AuthorizeAPI(self.acquirer_id)
-        res_content = authorize_API.void(self.acquirer_reference)
+        authorize_API = AuthorizeAPI(self.provider_id)
+        res_content = authorize_API.void(self.provider_reference)
         _logger.info(
             "void request response for transaction with reference %s:\n%s",
             self.reference, pprint.pformat(res_content)
         )
         self._handle_notification_data('authorize', {'response': res_content})
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Find the transaction based on Authorize.net data.
 
-        :param str provider: The provider of the acquirer that handled the transaction
+        :param str provider_code: The code of the provider that handled the transaction
         :param dict notification_data: The notification data sent by the provider
         :return: The transaction if found
         :rtype: recordset of `payment.transaction`
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'authorize' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'authorize' or len(tx) == 1:
             return tx
 
         reference = notification_data.get('reference')
-        tx = self.search([('reference', '=', reference), ('provider', '=', 'authorize')])
+        tx = self.search([('reference', '=', reference), ('provider_code', '=', 'authorize')])
         if not tx:
             raise ValidationError(
                 "Authorize.Net: " + _("No transaction found matching reference %s.", reference)
@@ -222,12 +222,12 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'authorize':
+        if self.provider_code != 'authorize':
             return
 
         response_content = notification_data.get('response')
 
-        self.acquirer_reference = response_content.get('x_trans_id')
+        self.provider_reference = response_content.get('x_trans_id')
         status_code = response_content.get('x_response_code', '3')
         if status_code == '1':  # Approved
             status_type = response_content.get('x_type').lower()
@@ -282,9 +282,9 @@ class PaymentTransaction(models.Model):
         """
         self.ensure_one()
 
-        authorize_API = AuthorizeAPI(self.acquirer_id)
+        authorize_API = AuthorizeAPI(self.provider_id)
         cust_profile = authorize_API.create_customer_profile(
-            self.partner_id, self.acquirer_reference
+            self.partner_id, self.provider_reference
         )
         _logger.info(
             "create_customer_profile request response for transaction with reference %s:\n%s",
@@ -292,12 +292,12 @@ class PaymentTransaction(models.Model):
         )
         if cust_profile:
             token = self.env['payment.token'].create({
-                'acquirer_id': self.acquirer_id.id,
+                'provider_id': self.provider_id.id,
                 'payment_details': cust_profile.get('payment_details'),
                 'partner_id': self.partner_id.id,
-                'acquirer_ref': cust_profile.get('payment_profile_id'),
+                'provider_ref': cust_profile.get('payment_profile_id'),
                 'authorize_profile': cust_profile.get('profile_id'),
-                'authorize_payment_method_type': self.acquirer_id.authorize_payment_method_type,
+                'authorize_payment_method_type': self.provider_id.authorize_payment_method_type,
                 'verified': True,
             })
             self.write({
