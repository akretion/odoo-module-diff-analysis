PR: https://github.com/odoo/odoo/pull/68409

From: bdcb3d192be1e01e1141aa09c60027337009a67b
From: Arnold Moyaux
Date: 2021-04-02 11:51:38

Breaking data model changes score: 2.4, change matches:
-    _inherit = "stock.inventory"
-    accounting_date = fields.Date(
-    has_account_moves = fields.Boolean(compute='_compute_has_account_moves')
+    accounting_date = fields.Date(

Total Changes: 64

[REF] stock: move stock.inventory feature into stock.quant

This commit removes stock.inventory(.line) and moves its general
functionality into stock.quant. Some features are lost during this
switch as well.

Feature Additions:
- New single list view for inventory adjustments (no more multiple
  inventory adjustment records to keep track of!)
- Improved cyclic counts (annual inventory day setting) + next inventory
  dates are immediately viewable in view (vs auto-generated inventories
  based only on location)
- Specific quants (i.e. counts) can be assigned to users for more
  flexibility (vs only able to restrict by location + product
  combinations)
- Counts can be requested (i.e. bulk assigned to user/for a specific
  inventory date)

Feature Removals:
- Can no longer look at previous inventory adjustments linked to a
  specific record. Each quant has a history button to show inventory
  related moves. [relevant account moves are also now harder to see via
  stock as well]

Other changes:
- Bulk of changes were for demo/test
- Some changes were done to ensure "Update Quantity"/"Inventory Report"
  views still mainly function the same as before with the exception of a
  new column added to support updating quant quantities in these views.

Task: 2440026
ENT PR: odoo/enterprise#17329
Upgrade PR: odoo/upgrade#2326

closes odoo/odoo#68409

Signed-off-by: Arnold Moyaux <amoyaux@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/stock_account/models/__init__.py
+++ b/addons/stock_account/models/__init__.py
@@ -5,7 +5,6 @@ from . import account_chart_template
 from . import account_move
 from . import product
 from . import stock_move
-from . import stock_inventory
 from . import stock_location
 from . import stock_move_line
 from . import stock_picking

--- a/addons/stock_account/models/stock_inventory.py
+++ b/None
@@ -1,42 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-
-class StockInventory(models.Model):
-    _inherit = "stock.inventory"
-
-    accounting_date = fields.Date(
-        'Accounting Date',
-        help="Date at which the accounting entries will be created"
-             " in case of automated inventory valuation."
-             " If empty, the inventory date will be used.")
-    has_account_moves = fields.Boolean(compute='_compute_has_account_moves')
-
-    def _compute_has_account_moves(self):
-        for inventory in self:
-            if inventory.state == 'done' and inventory.move_ids:
-                account_move = self.env['account.move'].search_count([
-                    ('stock_move_id.id', 'in', inventory.move_ids.ids)
-                ])
-                inventory.has_account_moves = account_move > 0
-            else:
-                inventory.has_account_moves = False
-
-    def action_get_account_moves(self):
-        self.ensure_one()
-        action_data = self.env['ir.actions.act_window']._for_xml_id('account.action_move_journal_line')
-        action_data['domain'] = [('stock_move_id.id', 'in', self.move_ids.ids)]
-        action_data['context'] = dict(self._context, create=False)
-        return action_data
-
-    def post_inventory(self):
-        res = True
-        acc_inventories = self.filtered(lambda inventory: inventory.accounting_date)
-        for inventory in acc_inventories:
-            res = super(StockInventory, inventory.with_context(force_period_date=inventory.accounting_date)).post_inventory()
-        other_inventories = self - acc_inventories
-        if other_inventories:
-            res = super(StockInventory, other_inventories).post_inventory()
-        return res

--- a/addons/stock_account/models/stock_quant.py
+++ b/addons/stock_account/models/stock_quant.py
@@ -10,6 +10,11 @@ class StockQuant(models.Model):
 
     value = fields.Monetary('Value', compute='_compute_value', groups='stock.group_stock_manager')
     currency_id = fields.Many2one('res.currency', compute='_compute_value', groups='stock.group_stock_manager')
+    accounting_date = fields.Date(
+        'Accounting Date',
+        help="Date at which the accounting entries will be created"
+             " in case of automated inventory valuation."
+             " If empty, the inventory date will be used.")
 
     @api.depends('company_id', 'location_id', 'owner_id', 'product_id', 'quantity')
     def _compute_value(self):
@@ -55,3 +60,19 @@ class StockQuant(models.Model):
                 quants = self.search(group['__domain'])
                 group['value'] = sum(quant.value for quant in quants)
         return res
+
+    def _apply_inventory(self):
+        acc_inventories = self.filtered(lambda quant: quant.accounting_date)
+        for inventory in acc_inventories:
+            super(StockQuant, self.with_context(force_period_date=inventory.accounting_date))._apply_inventory()
+            inventory.write({'accounting_date': False})
+        other_inventories = self - acc_inventories
+        if other_inventories:
+            super(StockQuant, other_inventories)._apply_inventory()
+
+    @api.model
+    def _get_inventory_fields_write(self):
+        """ Returns a list of fields user can edit when editing a quant in `inventory_mode`."""
+        res = super()._get_inventory_fields_write()
+        res += ['accounting_date']
+        return res
