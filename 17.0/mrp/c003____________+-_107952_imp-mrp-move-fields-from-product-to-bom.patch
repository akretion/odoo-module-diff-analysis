PR: https://github.com/odoo/odoo/pull/107952

From: 6825c440d54e38ebee13a5c184aec1a40586de0d
From: JF Aubert
Date: 2023-03-07 00:59:16

Structural Changes: 5
Total Changes: 56

[IMP] mrp: Move fields from product to bom

Manufacturing lead time & Days to prepare are now handled at bom level

Task: 2907698
Part-of: odoo/odoo#107952

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_bom.py
+++ b/addons/mrp/models/mrp_bom.py
@@ -82,6 +82,13 @@ class MrpBom(models.Model):
     allow_operation_dependencies = fields.Boolean('Operation Dependencies',
         help="Create operation level dependencies that will influence both planning and the status of work orders upon MO confirmation. If this feature is ticked, and nothing is specified, Odoo will assume that all operations can be started simultaneously."
     )
+    produce_delay = fields.Float(
+        'Manufacturing Lead Time', default=0.0,
+        help="Average lead time in days to manufacture this product. In the case of multi-level BOM, the manufacturing lead times of the components will be added. In case the product is subcontracted, this can be used to determine the date at which components should be sent to the subcontractor.")
+    days_to_prepare_mo = fields.Float(
+        string="Days to prepare Manufacturing Order", default=0.0,
+        help="Create and confirm Manufacturing Orders these many days in advance, to have enough time to replenish components or manufacture semi-finished products.\n"
+             "Note that this does not affect the MO scheduled date, which still respects the just-in-time mechanism.")
 
     _sql_constraints = [
         ('qty_positive', 'check (product_qty > 0)', 'The quantity to produce must be positive!'),
@@ -215,6 +222,14 @@ class MrpBom(models.Model):
     def name_get(self):
         return [(bom.id, '%s%s' % (bom.code and '%s: ' % bom.code or '', bom.product_tmpl_id.display_name)) for bom in self]
 
+    def action_compute_bom_days(self):
+        company_id = self.env.context.get('default_company_id', self.env.company.id)
+        warehouse = self.env['stock.warehouse'].search([('company_id', '=', company_id)], limit=1)
+        for bom in self:
+            bom_data = self.env['report.mrp.report_bom_structure'].with_context(minimized=True)._get_bom_data(bom, warehouse, bom.product_id, ignore_stock=True)
+            availability_delay = bom_data.get('resupply_avail_delay')
+            bom.days_to_prepare_mo = availability_delay - bom_data.get('lead_time', 0) if availability_delay else 0
+
     @api.constrains('product_tmpl_id', 'product_id', 'type')
     def check_kit_has_not_orderpoint(self):
         product_ids = [pid for bom in self.filtered(lambda bom: bom.type == "phantom")

--- a/addons/mrp/models/mrp_production.py
+++ b/addons/mrp/models/mrp_production.py
@@ -683,7 +683,7 @@ class MrpProduction(models.Model):
         for production in self:
             if not production.date_planned_start or production.is_planned:
                 continue
-            days_delay = production.product_id.produce_delay
+            days_delay = production.bom_id.produce_delay
             date_planned_finished = production.date_planned_start + relativedelta(days=days_delay)
             if date_planned_finished == production.date_planned_start:
                 date_planned_finished = date_planned_finished + relativedelta(hours=1)
@@ -950,7 +950,7 @@ class MrpProduction(models.Model):
         }
 
     def _get_date_planned_finished(self):
-        date_planned_finished = self.date_planned_start + relativedelta(days=self.product_id.produce_delay)
+        date_planned_finished = self.date_planned_start + relativedelta(days=self.bom_id.produce_delay)
         if date_planned_finished == self.date_planned_start:
             date_planned_finished = date_planned_finished + relativedelta(hours=1)
         return date_planned_finished

--- a/addons/mrp/models/product.py
+++ b/addons/mrp/models/product.py
@@ -29,14 +29,7 @@ class ProductTemplate(models.Model):
         compute='_compute_used_in_bom_count', compute_sudo=False)
     mrp_product_qty = fields.Float('Manufactured', digits='Product Unit of Measure',
         compute='_compute_mrp_product_qty', compute_sudo=False)
-    produce_delay = fields.Float(
-        'Manufacturing Lead Time', default=0.0,
-        help="Average lead time in days to manufacture this product. In the case of multi-level BOM, the manufacturing lead times of the components will be added. In case the product is subcontracted, this can be used to determine the date at which components should be sent to the subcontractor.")
     is_kits = fields.Boolean(compute='_compute_is_kits', compute_sudo=False)
-    days_to_prepare_mo = fields.Float(
-        string="Days to prepare Manufacturing Order", default=0.0,
-        help="Create and confirm Manufacturing Orders these many days in advance, to have enough time to replenish components or manufacture semi-finished products.\n"
-             "Note that this does not affect the MO scheduled date, which still respects the just-in-time mechanism.")
 
     def _compute_bom_count(self):
         for product in self:
@@ -87,11 +80,6 @@ class ProductTemplate(models.Model):
         }
         return action
 
-    def action_compute_bom_days(self):
-        templates = self.filtered(lambda t: t.bom_count > 0)
-        if templates:
-            return templates.mapped('product_variant_id').action_compute_bom_days()
-
     def action_archive(self):
         filtered_products = self.env['mrp.bom.line'].search([('product_id', 'in', self.product_variant_ids.ids)]).product_id.mapped('display_name')
         res = super().action_archive()
@@ -302,15 +290,6 @@ class ProductProduct(models.Model):
             res['context'].pop('default_product_tmpl_id', None)
         return res
 
-    def action_compute_bom_days(self):
-        bom_by_products = self.env['mrp.bom']._bom_find(self)
-        company_id = self.env.context.get('default_company_id', self.env.company.id)
-        warehouse = self.env['stock.warehouse'].search([('company_id', '=', company_id)], limit=1)
-        for product in self:
-            bom_data = self.env['report.mrp.report_bom_structure'].with_context(minimized=True)._get_bom_data(bom_by_products[product], warehouse, product, ignore_stock=True)
-            availability_delay = bom_data.get('resupply_avail_delay')
-            product.days_to_prepare_mo = availability_delay - bom_data.get('lead_time', 0) if availability_delay else 0
-
     def _match_all_variant_values(self, product_template_attribute_value_ids):
         """ It currently checks that all variant values (`product_template_attribute_value_ids`)
         are in the product (`self`).

--- a/addons/mrp/models/stock_orderpoint.py
+++ b/addons/mrp/models/stock_orderpoint.py
@@ -65,7 +65,8 @@ class StockWarehouseOrderpoint(models.Model):
         res = super()._compute_days_to_order()
         for orderpoint in self:
             if 'manufacture' in orderpoint.rule_ids.mapped('action'):
-                orderpoint.days_to_order = orderpoint.product_id.days_to_prepare_mo
+                boms = (orderpoint.product_id.variant_bom_ids or orderpoint.product_id.bom_ids)
+                orderpoint.days_to_order = boms and boms[0].days_to_prepare_mo or 0
         return res
 
     def _quantity_in_progress(self):

--- a/addons/mrp/models/stock_rule.py
+++ b/addons/mrp/models/stock_rule.py
@@ -117,8 +117,8 @@ class StockRule(models.Model):
         return self.env['mrp.bom']._bom_find(product_id, picking_type=self.picking_type_id, bom_type='normal', company_id=company_id.id)[product_id]
 
     def _prepare_mo_vals(self, product_id, product_qty, product_uom, location_dest_id, name, origin, company_id, values, bom):
-        date_planned = self._get_date_planned(product_id, company_id, values)
-        date_deadline = values.get('date_deadline') or date_planned + relativedelta(days=product_id.produce_delay)
+        date_planned = self._get_date_planned(bom, values)
+        date_deadline = values.get('date_deadline') or date_planned + relativedelta(days=bom.produce_delay)
         mo_values = {
             'origin': origin,
             'product_id': product_id.id,
@@ -150,9 +150,9 @@ class StockRule(models.Model):
             })
         return mo_values
 
-    def _get_date_planned(self, product_id, company_id, values):
+    def _get_date_planned(self, bom_id, values):
         format_date_planned = fields.Datetime.from_string(values['date_planned'])
-        date_planned = format_date_planned - relativedelta(days=product_id.produce_delay)
+        date_planned = format_date_planned - relativedelta(days=bom_id.produce_delay)
         if date_planned == format_date_planned:
             date_planned = date_planned - relativedelta(hours=1)
         return date_planned
@@ -167,7 +167,8 @@ class StockRule(models.Model):
         if not manufacture_rule:
             return delay, delay_description
         manufacture_rule.ensure_one()
-        manufacture_delay = product.produce_delay
+        bom = (product.variant_bom_ids or product.bom_ids)[:1]
+        manufacture_delay = bom.produce_delay
         delay += manufacture_delay
         if not bypass_delay_description:
             delay_description.append((_('Manufacturing Lead Time'), _('+ %d day(s)', manufacture_delay)))
@@ -175,7 +176,7 @@ class StockRule(models.Model):
         delay += security_delay
         if not bypass_delay_description:
             delay_description.append((_('Manufacture Security Lead Time'), _('+ %d day(s)', security_delay)))
-        days_to_order = values.get('days_to_order', product.product_tmpl_id.days_to_prepare_mo)
+        days_to_order = values.get('days_to_order', bom.days_to_prepare_mo)
         if not bypass_delay_description:
             delay_description.append((_('Days to Supply Components'), _('+ %d day(s)', days_to_order)))
         return delay + days_to_order, delay_description
