PR: https://github.com/odoo/odoo/pull/152424

From: 4b8576b49d8eec8260e276e06b75429bd9500f8c
From: Renaud Thiry
Date: 2024-07-10 16:37:57

Breaking data model changes scores: del:2.8000000000000003 + add:0, change matches:
-    notification_type = fields.Selection([('mail', 'Mail')], string='Send', default='mail', required=True)
-    template_model_id = fields.Many2one('ir.model', string='Template Model', compute='_compute_template_model_id', compute_sudo=True)
+    notification_type = fields.Selection([('mail', 'Mail')], string='Send', compute='_compute_notification_type')
-    notification_type = fields.Selection([('mail', 'Mail')], string='Send', default='mail', required=True)
-    template_model_id = fields.Many2one('ir.model', string='Template Model', compute='_compute_template_model_id', compute_sudo=True)
+    notification_type = fields.Selection([('mail', 'Mail')], string='Send', compute='_compute_notification_type')

Total Changes: 107

[REF] event_*: keep model_ref in sync

In a recent fix at: fe80a2676a1c5f964c20740ae8097929564a1858
We stopped using a model field as the basis for a reference field
as users typically did not have access to ir.model.

However this means the reference field now falls back on its current
value to determine which model it is referencing in the m2o field used
in the front-end.

We stop using "notification_type" as it's implied by the model
of the reference field.

We also add a modified reference-field that displays its underlying model.

task-3256524

Part-of: odoo/odoo#152424
Related: odoo/enterprise#60625
Related: odoo/upgrade#5914
Signed-off-by: Warnon Aur√©lien (awa) <awa@odoo.com>

================================= pseudo patch: =================================

--- a/addons/event/models/event_event.py
+++ b/addons/event/models/event_event.py
@@ -12,7 +12,7 @@ from odoo import _, api, Command, fields, models, tools
 from odoo.addons.base.models.res_partner import _tz_get
 from odoo.exceptions import UserError, ValidationError
 from odoo.osv import expression
-from odoo.tools import format_date, format_datetime
+from odoo.tools import format_date, format_datetime, frozendict
 from odoo.tools.mail import is_html_empty, html_to_inner_content
 from odoo.tools.misc import formatLang
 from odoo.tools.translate import html_translate
@@ -33,22 +33,19 @@ class EventType(models.Model):
 
     def _default_event_mail_type_ids(self):
         return [(0, 0,
-                 {'notification_type': 'mail',
-                  'interval_nbr': 0,
+                 {'interval_nbr': 0,
                   'interval_unit': 'now',
                   'interval_type': 'after_sub',
                   'template_ref': 'mail.template, %i' % self.env.ref('event.event_subscription').id,
                  }),
                 (0, 0,
-                 {'notification_type': 'mail',
-                  'interval_nbr': 1,
+                 {'interval_nbr': 1,
                   'interval_unit': 'hours',
                   'interval_type': 'before_event',
                   'template_ref': 'mail.template, %i' % self.env.ref('event.event_reminder').id,
                  }),
                 (0, 0,
-                 {'notification_type': 'mail',
-                  'interval_nbr': 3,
+                 {'interval_nbr': 3,
                   'interval_unit': 'days',
                   'interval_type': 'before_event',
                   'template_ref': 'mail.template, %i' % self.env.ref('event.event_reminder').id,
@@ -539,11 +536,11 @@ class EventEvent(models.Model):
 
             # lines to add: those which do not have the exact copy available in lines to keep
             if event.event_type_id.event_type_mail_ids:
-                mails_to_keep_vals = {mail._prepare_event_mail_values() for mail in event.event_mail_ids - mails_to_remove}
+                mails_to_keep_vals = {frozendict(mail._prepare_event_mail_values()) for mail in event.event_mail_ids - mails_to_remove}
                 for mail in event.event_type_id.event_type_mail_ids:
-                    mail_values = mail._prepare_event_mail_values()
+                    mail_values = frozendict(mail._prepare_event_mail_values())
                     if mail_values not in mails_to_keep_vals:
-                        command.append(Command.create(mail_values._asdict()))
+                        command.append(Command.create(mail_values))
             if command:
                 event.event_mail_ids = command
 

--- a/addons/event/models/event_mail.py
+++ b/addons/event/models/event_mail.py
@@ -5,14 +5,12 @@ import logging
 import random
 import threading
 
-from collections import namedtuple
-from datetime import datetime
 from dateutil.relativedelta import relativedelta
 
-from odoo import api, fields, models, tools
+from odoo import api, fields, models
 from odoo.tools import exception_to_unicode
 from odoo.tools.translate import _
-from odoo.exceptions import MissingError, ValidationError
+from odoo.exceptions import MissingError
 
 
 _logger = logging.getLogger(__name__)
@@ -25,21 +23,15 @@ _INTERVALS = {
     'now': lambda interval: relativedelta(hours=0),
 }
 
-
 class EventTypeMail(models.Model):
     """ Template of event.mail to attach to event.type. Those will be copied
     upon all events created in that type to ease event creation. """
     _name = 'event.type.mail'
     _description = 'Mail Scheduling on Event Category'
 
-    @api.model
-    def _selection_template_model(self):
-        return [('mail.template', 'Mail')]
-
     event_type_id = fields.Many2one(
         'event.type', string='Event Type',
         ondelete='cascade', required=True)
-    notification_type = fields.Selection([('mail', 'Mail')], string='Send', default='mail', required=True)
     interval_nbr = fields.Integer('Interval', default=1)
     interval_unit = fields.Selection([
         ('now', 'Immediately'),
@@ -51,24 +43,22 @@ class EventTypeMail(models.Model):
         ('before_event', 'Before the event'),
         ('after_event', 'After the event')],
         string='Trigger', default="before_event", required=True)
-    template_model_id = fields.Many2one('ir.model', string='Template Model', compute='_compute_template_model_id', compute_sudo=True)
-    template_ref = fields.Reference(string='Template', selection='_selection_template_model', required=True)
+    notification_type = fields.Selection([('mail', 'Mail')], string='Send', compute='_compute_notification_type')
+    template_ref = fields.Reference(string='Template', ondelete={'mail.template': 'cascade'}, required=True, selection=[('mail.template', 'Mail')])
 
-    @api.depends('notification_type')
-    def _compute_template_model_id(self):
-        mail_model = self.env['ir.model']._get('mail.template')
-        for mail in self:
-            mail.template_model_id = mail_model if mail.notification_type == 'mail' else False
+    @api.depends('template_ref')
+    def _compute_notification_type(self):
+        """Assigns the type of template in use, if any is set."""
+        self.notification_type = 'mail'
 
     def _prepare_event_mail_values(self):
         self.ensure_one()
-        return namedtuple("MailValues", ['notification_type', 'interval_nbr', 'interval_unit', 'interval_type', 'template_ref'])(
-            self.notification_type,
-            self.interval_nbr,
-            self.interval_unit,
-            self.interval_type,
-            '%s,%i' % (self.template_ref._name, self.template_ref.id)
-        )
+        return {
+            'interval_nbr': self.interval_nbr,
+            'interval_unit': self.interval_unit,
+            'interval_type': self.interval_type,
+            'template_ref': '%s,%i' % (self.template_ref._name, self.template_ref.id),
+        }
 
 class EventMailScheduler(models.Model):
     """ Event automated mailing. This model replaces all existing fields and
@@ -78,23 +68,8 @@ class EventMailScheduler(models.Model):
     _rec_name = 'event_id'
     _description = 'Event Automated Mailing'
 
-    @api.model
-    def _selection_template_model(self):
-        return [('mail.template', 'Mail')]
-
-    def _selection_template_model_get_mapping(self):
-        return {'mail': 'mail.template'}
-
-    @api.onchange('notification_type')
-    def set_template_ref_model(self):
-        mail_model = self.env['mail.template']
-        if self.notification_type == 'mail':
-            record = mail_model.search([('model', '=', 'event.registration')], limit=1)
-            self.template_ref = "{},{}".format('mail.template', record.id) if record else False
-
     event_id = fields.Many2one('event.event', string='Event', required=True, ondelete='cascade')
     sequence = fields.Integer('Display order')
-    notification_type = fields.Selection([('mail', 'Mail')], string='Send', default='mail', required=True)
     interval_nbr = fields.Integer('Interval', default=1)
     interval_unit = fields.Selection([
         ('now', 'Immediately'),
@@ -116,14 +91,8 @@ class EventMailScheduler(models.Model):
         [('running', 'Running'), ('scheduled', 'Scheduled'), ('sent', 'Sent')],
         string='Global communication Status', compute='_compute_mail_state')
     mail_count_done = fields.Integer('# Sent', copy=False, readonly=True)
-    template_model_id = fields.Many2one('ir.model', string='Template Model', compute='_compute_template_model_id', compute_sudo=True)
-    template_ref = fields.Reference(string='Template', selection='_selection_template_model', required=True)
-
-    @api.depends('notification_type')
-    def _compute_template_model_id(self):
-        mail_model = self.env['ir.model']._get('mail.template')
-        for mail in self:
-            mail.template_model_id = mail_model if mail.notification_type == 'mail' else False
+    notification_type = fields.Selection([('mail', 'Mail')], string='Send', compute='_compute_notification_type')
+    template_ref = fields.Reference(string='Template', ondelete={'mail.template': 'cascade'}, required=True, selection=[('mail.template', 'Mail')])
 
     @api.depends('event_id.date_begin', 'event_id.date_end', 'interval_type', 'interval_unit', 'interval_nbr')
     def _compute_scheduled_date(self):
@@ -151,13 +120,10 @@ class EventMailScheduler(models.Model):
             else:
                 scheduler.mail_state = 'running'
 
-    @api.constrains('notification_type', 'template_ref')
-    def _check_template_ref_model(self):
-        model_map = self._selection_template_model_get_mapping()
-        for record in self.filtered('template_ref'):
-            model = model_map[record.notification_type]
-            if record.template_ref._name != model:
-                raise ValidationError(_('The template which is referenced should be coming from %(model_name)s model.', model_name=model))
+    @api.depends('template_ref')
+    def _compute_notification_type(self):
+        """Assigns the type of template in use, if any is set."""
+        self.notification_type = 'mail'
 
     def execute(self):
         for scheduler in self:
@@ -185,9 +151,6 @@ class EventMailScheduler(models.Model):
                 # before or after event -> one shot email
                 if scheduler.mail_done or scheduler.notification_type != 'mail':
                     continue
-                # no template -> ill configured, skip and avoid crash
-                if not scheduler.template_ref:
-                    continue
                 # do not send emails if the mailing was scheduled before the event but the event is over
                 if scheduler.scheduled_date <= now and (scheduler.interval_type != 'before_event' or scheduler.event_id.date_end > now):
                     scheduler.event_id.mail_attendees(scheduler.template_ref.id)
@@ -211,13 +174,12 @@ class EventMailScheduler(models.Model):
 
     def _prepare_event_mail_values(self):
         self.ensure_one()
-        return namedtuple("MailValues", ['notification_type', 'interval_nbr', 'interval_unit', 'interval_type', 'template_ref'])(
-            self.notification_type,
-            self.interval_nbr,
-            self.interval_unit,
-            self.interval_type,
-            '%s,%i' % (self.template_ref._name, self.template_ref.id)
-        )
+        return {
+            'interval_nbr': self.interval_nbr,
+            'interval_unit': self.interval_unit,
+            'interval_type': self.interval_type,
+            'template_ref': '%s,%i' % (self.template_ref._name, self.template_ref.id),
+        }
 
     @api.model
     def _warn_template_error(self, scheduler, exception):
