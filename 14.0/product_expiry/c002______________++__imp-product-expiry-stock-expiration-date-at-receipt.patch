PR: https://github.com/odoo/odoo/pull/

From: decef03acf1da95e560d6a4a1c1dd18ee4516d3d
From: svs-odoo
Date: 2019-10-25 13:50:36

Structural Changes: 6
Total Changes: 87

[IMP] product_expiry,stock: expiration_date at receipt

User can now define the lot's field `expiration_date` when he/she
receipts a tracked product using the expiration dates.

Task #1938656

================================= pseudo patch: =================================

--- a/addons/product_expiry/models/__init__.py
+++ b/addons/product_expiry/models/__init__.py
@@ -3,4 +3,6 @@
 
 from . import production_lot
 from . import product_product
+from . import stock_move_line
+from . import stock_move
 from . import stock_quant

--- a/addons/product_expiry/models/production_lot.py
+++ b/addons/product_expiry/models/production_lot.py
@@ -59,18 +59,12 @@ class StockProductionLot(models.Model):
     def _onchange_expiration_date(self):
         if not self._origin or not (self.expiration_date and self._origin.expiration_date):
             return
-        vals = {}
         time_delta = self.expiration_date - self._origin.expiration_date
         # As we compare expiration_date with _origin.expiration_date, we need to
-        # use _origin valuesto keep a stability in the values.
+        # use `_get_date_values` with _origin to keep a stability in the values.
         # Otherwise it will recompute from the updated values if the user calls
         # this onchange multiple times without save between each onchange.
-        if self.use_date and self._origin.use_date:
-            vals['use_date'] = self._origin.use_date + time_delta
-        if self.removal_date and self._origin.removal_date:
-            vals['removal_date'] = self._origin.removal_date + time_delta
-        if self.alert_date and self._origin.alert_date:
-            vals['alert_date'] = self._origin.alert_date + time_delta
+        vals = self._origin._get_date_values(time_delta)
         self.update(vals)
 
     @api.onchange('product_id')
@@ -106,6 +100,26 @@ class StockProductionLot(models.Model):
             'product_expiry_reminded': True
         })
 
+    def _update_date_values(self, new_date):
+        if new_date:
+            time_delta = new_date - self.expiration_date
+            vals = self._get_date_values(time_delta)
+            vals['expiration_date'] = new_date
+            self.write(vals)
+
+    def _get_date_values(self, time_delta):
+        ''' Return a dict with different date values updated depending of the
+        time_delta. Used in the onchange of `expiration_date` and when user
+        defines a date at the receipt. '''
+        vals = {}
+        if self.use_date:
+            vals['use_date'] = self.use_date + time_delta
+        if self.removal_date:
+            vals['removal_date'] = self.removal_date + time_delta
+        if self.alert_date:
+            vals['alert_date'] = self.alert_date + time_delta
+        return vals
+
 
 class ProcurementGroup(models.Model):
     _inherit = 'procurement.group'

--- a/None
+++ b/addons/product_expiry/models/stock_move.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class StockMove(models.Model):
+    _inherit = "stock.move"
+    use_expiration_date = fields.Boolean(
+        string='Use Expiration Date', related='product_id.use_expiration_date')

--- a/None
+++ b/addons/product_expiry/models/stock_move_line.py
@@ -0,0 +1,45 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+import datetime
+
+from odoo import api, fields, models
+
+
+class StockMoveLine(models.Model):
+    _inherit = "stock.move.line"
+
+    expiration_date_readonly = fields.Boolean(compute='_compute_expiration_date_readonly')
+    expiration_date = fields.Datetime(string='Expiration Date',
+        help='This is the date on which the goods with this Serial Number may'
+        ' become dangerous and must not be consumed.')
+
+    @api.depends('picking_id', 'product_id')
+    def _compute_expiration_date_readonly(self):
+        if not self.picking_id.picking_type_id.use_existing_lots and self.product_id.use_expiration_date:
+            self.expiration_date_readonly = False
+        else:
+            self.expiration_date_readonly = True
+
+    @api.onchange('product_id', 'product_uom_id')
+    def onchange_product_id(self):
+        res = super(StockMoveLine, self).onchange_product_id()
+        if self.picking_type_use_create_lots:
+            if self.product_id.use_expiration_date:
+                self.expiration_date = fields.Datetime.today() + datetime.timedelta(days=self.product_id.expiration_time)
+            else:
+                self.expiration_date = False
+        return res
+
+    @api.onchange('lot_id')
+    def _onchange_lot_id(self):
+        if not self.picking_type_use_existing_lots or not self.product_id.use_expiration_date:
+            return
+        if self.lot_id:
+            self.expiration_date = self.lot_id.expiration_date
+        else:
+            self.expiration_date = False
+
+    def _create_and_assign_production_lot(self):
+        super(StockMoveLine, self)._create_and_assign_production_lot()
+        self.lot_id._update_date_values(self.expiration_date)
