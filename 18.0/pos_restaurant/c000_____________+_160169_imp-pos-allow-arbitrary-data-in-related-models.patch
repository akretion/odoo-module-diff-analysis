PR: https://github.com/odoo/odoo/pull/160169

From: 02f756d061f1e52a2265e051ac57b13b311fb115
From: David Monnom (moda)
Date: 2024-04-29 23:21:31

Structural Changes: 3
Total Changes: 74

[IMP] pos_*: allow arbitrary data in related models

*: All pos related modules

This commit allows to access arbitrary data in related models. This is
useful for data that are computed on the server side and that are not
recomputed on the client side.

Before this commit, it was only possible to access data that are linked
to a field in the model.

Now custom data coming from the server can be added to any record with
the prefix `_` in the key. For example, if the server sends the
following data for `pos.order`:

Classic fields:
```
{
  id: 1,
  name: 'Order 1',
  partner_id: 1,
  partner_name: 'Partner 1',
}
```

Custom fields:
```
{
  id: 1,
  name: 'Order 1',
  partner_id: 1,
  partner_name: 'Partner 1',
  _custom_field: 'Custom value',
}
```

closes odoo/odoo#160169

Related: odoo/enterprise#60017
Signed-off-by: Adrien Guilliams (adgu) <adgu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_restaurant/models/__init__.py
+++ b/addons/pos_restaurant/models/__init__.py
@@ -7,3 +7,4 @@ from . import pos_payment
 from . import pos_restaurant
 from . import pos_session
 from . import res_config_settings
+from . import account_fiscal_position

--- a/None
+++ b/addons/pos_restaurant/models/account_fiscal_position.py
@@ -0,0 +1,12 @@
+from odoo import models, api
+from odoo.osv.expression import OR
+
+
+class AccountFiscalPosition(models.Model):
+    _inherit = 'account.fiscal.position'
+
+    @api.model
+    def _load_pos_data_domain(self, data):
+        params = super()._load_pos_data_domain(data)
+        params = OR([params, [('id', '=', data['pos.config']['data'][0]['takeaway_fp_id'])]])
+        return params

--- a/addons/pos_restaurant/models/pos_order.py
+++ b/addons/pos_restaurant/models/pos_order.py
@@ -30,12 +30,12 @@ class PosOrder(models.Model):
             ])
 
             if len(table_orders) > 0:
-                params = self.env["pos.session"]._load_data_params(table_orders[0].config_id)
-                result['pos.order'].extend(table_orders.read(params["pos.order"]["fields"], load=False))
-                result['pos.payment'].extend(table_orders.payment_ids.read(params["pos.payment"]["fields"], load=False))
-                result['pos.order.line'].extend(table_orders.lines.read(params["pos.order.line"]["fields"], load=False))
-                result['pos.pack.operation.lot'].extend(table_orders.lines.pack_lot_ids.read(params["pos.pack.operation.lot"]["fields"], load=False))
-                result["product.attribute.custom.value"].extend(table_orders.lines.custom_attribute_value_ids.read(params["product.attribute.custom.value"]["fields"], load=False))
+                config_id = table_orders[0].config_id.id
+                result['pos.order'].extend(table_orders.read(table_orders._load_pos_data_fields(config_id), load=False))
+                result['pos.payment'].extend(table_orders.payment_ids.read(table_orders.payment_ids._load_pos_data_fields(config_id), load=False))
+                result['pos.order.line'].extend(table_orders.lines.read(table_orders.lines._load_pos_data_fields(config_id), load=False))
+                result['pos.pack.operation.lot'].extend(table_orders.lines.pack_lot_ids.read(table_orders.lines.pack_lot_ids._load_pos_data_fields(config_id), load=False))
+                result["product.attribute.custom.value"].extend(table_orders.lines.custom_attribute_value_ids.read(table_orders.lines.custom_attribute_value_ids._load_pos_data_fields(config_id), load=False))
 
         return result
 

--- a/addons/pos_restaurant/models/pos_restaurant.py
+++ b/addons/pos_restaurant/models/pos_restaurant.py
@@ -10,6 +10,7 @@ class RestaurantFloor(models.Model):
     _name = 'restaurant.floor'
     _description = 'Restaurant Floor'
     _order = "sequence, name"
+    _inherit = ['pos.load.mixin']
 
     name = fields.Char('Floor Name', required=True)
     pos_config_ids = fields.Many2many('pos.config', string='Point of Sales', domain="[('module_pos_restaurant', '=', True)]")
@@ -20,6 +21,14 @@ class RestaurantFloor(models.Model):
     active = fields.Boolean(default=True)
     floor_background_image = fields.Image(string='Floor Background Image')
 
+    @api.model
+    def _load_pos_data_domain(self, data):
+        return [('pos_config_ids', '=', data['pos.config']['data'][0]['id'])]
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return ['name', 'background_color', 'table_ids', 'sequence', 'floor_background_image']
+
     @api.ondelete(at_uninstall=False)
     def _unlink_except_active_pos_session(self):
         confs = self.mapped('pos_config_ids').filtered(lambda c: c.module_pos_restaurant)
@@ -76,6 +85,7 @@ class RestaurantTable(models.Model):
 
     _name = 'restaurant.table'
     _description = 'Restaurant Table'
+    _inherit = ['pos.load.mixin']
 
     name = fields.Char('Table Name', required=True, help='An internal identification of a table')
     floor_id = fields.Many2one('restaurant.floor', string='Floor')
@@ -91,6 +101,14 @@ class RestaurantTable(models.Model):
     parent_id = fields.Many2one('restaurant.table', string='Parent Table', help="The parent table if this table is part of a group of tables")
     active = fields.Boolean('Active', default=True, help='If false, the table is deactivated and will not be available in the point of sale')
 
+    @api.model
+    def _load_pos_data_domain(self, data):
+        return [('active', '=', True), ('floor_id', 'in', [floor['id'] for floor in data['restaurant.floor']['data']])]
+
+    @api.model
+    def _load_pos_data_fields(self, config_id):
+        return ['name', 'width', 'height', 'position_h', 'position_v', 'parent_id', 'shape', 'floor_id', 'color', 'seats', 'active']
+
     def are_orders_still_in_draft(self):
         draft_orders_count = self.env['pos.order'].search_count([('table_id', 'in', self.ids), ('state', '=', 'draft')])
 

--- a/addons/pos_restaurant/models/pos_session.py
+++ b/addons/pos_restaurant/models/pos_session.py
@@ -3,35 +3,11 @@
 
 from odoo import models, Command, api
 from odoo.tools import convert
-from odoo.osv.expression import OR
 import json
 
 class PosSession(models.Model):
     _inherit = 'pos.session'
 
-    def _load_data_params(self, config_id):
-        params = super()._load_data_params(config_id)
-
-        if self.config_id.module_pos_restaurant:
-            params.update({
-                'restaurant.floor': {
-                    'domain': [('pos_config_ids', '=', self.config_id.id)],
-                    'fields': ['name', 'background_color', 'table_ids', 'sequence', 'floor_background_image'],
-                },
-                'restaurant.table': {
-                    'domain': lambda data: [('active', '=', True), ('floor_id', 'in', [floor['id'] for floor in data['restaurant.floor']])],
-                    'fields': [
-                        'name', 'width', 'height', 'position_h', 'position_v', 'parent_id',
-                        'shape', 'floor_id', 'color', 'seats', 'active'
-                    ],
-                }
-            })
-            params['account.fiscal.position']['domain'] = OR([params['account.fiscal.position']['domain'], [('id', '=', self.config_id.takeaway_fp_id.id)]])
-
-        params['pos.order.line']['fields'] += ['note']
-
-        return params
-
     def get_onboarding_data(self):
         results = super().get_onboarding_data()
 
@@ -41,6 +17,13 @@ class PosSession(models.Model):
 
         return results
 
+    @api.model
+    def _load_pos_data_models(self, config_id):
+        data = super()._load_pos_data_models(config_id)
+        if self.config_id.module_pos_restaurant:
+            data += ['restaurant.floor', 'restaurant.table']
+        return data
+
     @api.model
     def _load_onboarding_data(self):
         super()._load_onboarding_data()
