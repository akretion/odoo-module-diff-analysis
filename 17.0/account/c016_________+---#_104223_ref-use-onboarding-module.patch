PR: https://github.com/odoo/odoo/pull/104223

From: 77f9ff50db3cdb88397d0b1cc7042c772d0d417b
From: Florian Charlier
Date: 2023-06-30 21:37:50

Structural Changes: 13
Total Changes: 341

[REF] *: use onboarding module

* = account{_payment}, base, onboarding, payment{_stripe},
sale{_management}, web, website_sale

Use the dedicated onboarding module introduced in 16.0 instead of
the res.company model to store onboarding progress.

It allows
 * onboarding steps to be reused across panels
 * to support steps that should be completed per-database or per-company
 * to clean the res.company model from many fields and methods,
 * to remove many views, controllers, actions

Module-specific notes:
* account: We also clean the remaining two steps that are not
part of an accounting panel but make the most sense to be kept here.
* account_payment: Following 8e4e8eb8, the payment provider step is
added to the invoicing onboarding panel. We apply this change here too.
Also impacts the website_sale_dashboard panel (see related ENT PR).
(The "sale tax" one is currently used for to the website sale dashboard).
* payment: Note that the step was already not part of an onboarding
panel within this module.
* website_sale: We clean
  * a field not used (The website_sale dashboard onboarding panel used
  the payment_provider_onboarding_state field).
  * a method that was only called from website_sale_dashboard, so it is
  moved there. See related ENT PR.

Includes a few tests.

Moving views/templates/styling, as well as cleaning residual onboarding-related fields and methods in base, including populate.

This also includes restoring the "onboarding_complete" overlay panel
animating it to disappear after a few seconds so that it doesn't hide
text and block buttons to re-open steps.

Task-3025136

Part-of: odoo/odoo#104223

================================= pseudo patch: =================================

--- a/addons/account/models/__init__.py
+++ b/addons/account/models/__init__.py
@@ -37,5 +37,7 @@ from . import ir_actions_report
 from . import ir_module
 from . import res_currency
 from . import account_report
+from . import onboarding_onboarding
+from . import onboarding_onboarding_step
 from . import template_generic_coa
 from . import uom_uom

--- a/addons/account/models/account_journal_dashboard.py
+++ b/addons/account/models/account_journal_dashboard.py
@@ -620,7 +620,7 @@ class account_journal(models.Model):
         """ This function is called by the "Import" button of Vendor Bills,
         visible on dashboard if no bill has been created yet.
         """
-        self.env.company.sudo().set_onboarding_step_done('account_setup_bill_state')
+        self.env['onboarding.onboarding.step'].action_validate_step('account.onboarding_onboarding_step_setup_bill')
 
         new_wizard = self.env['account.tour.upload.bill'].create({})
         view_id = self.env.ref('account.account_tour_upload_bill').id
@@ -777,14 +777,3 @@ class account_journal(models.Model):
     def create_internal_transfer(self):
         """return action to create a internal transfer"""
         return self.open_payments_action('transfer', mode='form')
-
-    #####################
-    # Setup Steps Stuff #
-    #####################
-    def mark_bank_setup_as_done_action(self):
-        """ Marks the 'bank setup' step as done in the setup bar and in the company."""
-        self.company_id.sudo().set_onboarding_step_done('account_setup_bank_data_state')
-
-    def unmark_bank_setup_as_done_action(self):
-        """ Marks the 'bank setup' step as not done in the setup bar and in the company."""
-        self.company_id.account_setup_bank_data_state = 'not_done'

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -26,14 +26,6 @@ MONTH_SELECTION = [
     ('12', 'December'),
 ]
 
-ONBOARDING_STEP_STATES = [
-    ('not_done', "Not done"),
-    ('just_done', "Just done"),
-    ('done', "Done"),
-]
-DASHBOARD_ONBOARDING_STATES = ONBOARDING_STEP_STATES + [('closed', 'Closed')]
-
-
 class ResCompany(models.Model):
     _name = "res.company"
     _inherit = ["res.company", "mail.thread"]
@@ -104,20 +96,6 @@ class ResCompany(models.Model):
     account_opening_journal_id = fields.Many2one(string='Opening Journal', comodel_name='account.journal', related='account_opening_move_id.journal_id', help="Journal where the opening entry of this company's accounting has been posted.", readonly=False)
     account_opening_date = fields.Date(string='Opening Entry', default=lambda self: fields.Date.context_today(self).replace(month=1, day=1), required=True, help="That is the date of the opening entry.")
 
-    # Fields marking the completion of a setup step
-    account_setup_bank_data_state = fields.Selection(ONBOARDING_STEP_STATES, string="State of the onboarding bank data step", default='not_done')
-    account_setup_fy_data_state = fields.Selection(ONBOARDING_STEP_STATES, string="State of the onboarding fiscal year step", default='not_done')
-    account_setup_coa_state = fields.Selection(ONBOARDING_STEP_STATES, string="State of the onboarding charts of account step", default='not_done')
-    account_setup_taxes_state = fields.Selection(ONBOARDING_STEP_STATES, string="State of the onboarding Taxes step", default='not_done')
-    account_onboarding_invoice_layout_state = fields.Selection(ONBOARDING_STEP_STATES, string="State of the onboarding invoice layout step", default='not_done')
-    account_onboarding_create_invoice_state = fields.Selection(ONBOARDING_STEP_STATES, string="State of the onboarding create invoice step", compute='_compute_account_onboarding_create_invoice_state')
-    #this field must be there to ensure that the create_invoice_state stay complete and because we can't use a dependencies on account move
-    account_onboarding_create_invoice_state_flag = fields.Boolean(default=False, store=True)
-    account_onboarding_sale_tax_state = fields.Selection(ONBOARDING_STEP_STATES, string="State of the onboarding sale tax step", default='not_done')
-
-    # account dashboard onboarding
-    account_invoice_onboarding_state = fields.Selection(DASHBOARD_ONBOARDING_STATES, string="State of the account invoice onboarding panel", default='not_done')
-    account_dashboard_onboarding_state = fields.Selection(DASHBOARD_ONBOARDING_STATES, string="State of the account dashboard onboarding panel", default='not_done')
     invoice_terms = fields.Html(string='Default Terms and Conditions', translate=True)
     terms_type = fields.Selection([('plain', 'Add a Note'), ('html', 'Add a link to a Web Page')],
                                   string='Terms & Conditions format', default='plain')
@@ -125,8 +103,6 @@ class ResCompany(models.Model):
                                      sanitize_attributes=False,
                                      compute='_compute_invoice_terms_html', store=True, readonly=False)
 
-    account_setup_bill_state = fields.Selection(ONBOARDING_STEP_STATES, string="State of the onboarding bill step", default='not_done')
-
     # Needed in the Point of Sale
     account_default_pos_receivable_account_id = fields.Many2one('account.account', string="Default PoS Receivable Account")
 
@@ -232,17 +208,6 @@ class ResCompany(models.Model):
             foreign_vat_fpos = self.env['account.fiscal.position'].search([('company_id', '=', record.id), ('foreign_vat', '!=', False)])
             record.account_enabled_tax_country_ids = foreign_vat_fpos.country_id + record.account_fiscal_country_id
 
-    @api.depends('account_onboarding_create_invoice_state_flag')
-    def _compute_account_onboarding_create_invoice_state(self):
-        for record in self:
-            if record.account_onboarding_create_invoice_state_flag:
-                record.account_onboarding_create_invoice_state = 'done'
-            elif self.env['account.move'].search([('company_id', '=', record.id), ('move_type', '=', 'out_invoice')], limit=1):
-                record.account_onboarding_create_invoice_state = 'just_done'
-                record.account_onboarding_create_invoice_state_flag = True
-            else:
-                record.account_onboarding_create_invoice_state = 'not_done'
-
     @api.depends('terms_type')
     def _compute_invoice_terms_html(self):
         for company in self.filtered(lambda company: is_html_empty(company.invoice_terms_html) and company.terms_type == 'html'):
@@ -252,40 +217,6 @@ class ResCompany(models.Model):
             if html:
                 company.invoice_terms_html = html
 
-    def get_and_update_account_invoice_onboarding_state(self):
-        """ This method is called on the controller rendering method and ensures that the animations
-            are displayed only one time. """
-        return self._get_and_update_onboarding_state(
-            'account_invoice_onboarding_state',
-            self.get_account_invoice_onboarding_steps_states_names()
-        )
-
-    # YTI FIXME: Define only one method that returns {'account': [], 'sale': [], ...}
-    def get_account_invoice_onboarding_steps_states_names(self):
-        """ Necessary to add/edit steps from other modules (payment provider in this case). """
-        return [
-            'base_onboarding_company_state',
-            'account_onboarding_invoice_layout_state',
-            'account_onboarding_create_invoice_state',
-        ]
-
-    def get_and_update_account_dashboard_onboarding_state(self):
-        """ This method is called on the controller rendering method and ensures that the animations
-            are displayed only one time. """
-        return self._get_and_update_onboarding_state(
-            'account_dashboard_onboarding_state',
-            self.get_account_dashboard_onboarding_steps_states_names()
-        )
-
-    def get_account_dashboard_onboarding_steps_states_names(self):
-        """ Necessary to add/edit steps from other modules (account_winbooks_import in this case). """
-        return [
-            'account_setup_bank_data_state',
-            'account_setup_fy_data_state',
-            'account_setup_coa_state',
-            'account_setup_taxes_state',
-        ]
-
     def get_new_account_code(self, current_code, old_prefix, new_prefix):
         digits = len(current_code)
         return new_prefix + current_code.replace(old_prefix, '', 1).lstrip('0').rjust(digits-len(new_prefix), '0')
@@ -409,58 +340,17 @@ class ResCompany(models.Model):
 
     @api.model
     def setting_init_bank_account_action(self):
-        """ Called by the 'Bank Accounts' button of the setup bar."""
+        """ Called by the 'Bank Accounts' button of the setup bar or from the Financial configuration menu."""
         view_id = self.env.ref('account.setup_bank_account_wizard').id
-        return {'type': 'ir.actions.act_window',
-                'name': _('Create a Bank Account'),
-                'res_model': 'account.setup.bank.manual.config',
-                'target': 'new',
-                'view_mode': 'form',
-                'views': [[view_id, 'form']],
-        }
-
-    @api.model
-    def setting_init_fiscal_year_action(self):
-        """ Called by the 'Fiscal Year Opening' button of the setup bar."""
-        company = self.env.company
-        new_wizard = self.env['account.financial.year.op'].create({'company_id': company.id})
-        view_id = self.env.ref('account.setup_financial_year_opening_form').id
-
         return {
             'type': 'ir.actions.act_window',
-            'name': _('Accounting Periods'),
-            'view_mode': 'form',
-            'res_model': 'account.financial.year.op',
+            'name': _('Create a Bank Account'),
+            'res_model': 'account.setup.bank.manual.config',
             'target': 'new',
-            'res_id': new_wizard.id,
+            'view_mode': 'form',
             'views': [[view_id, 'form']],
         }
 
-    @api.model
-    def setting_chart_of_accounts_action(self):
-        """ Called by the 'Chart of Accounts' button of the setup bar."""
-        company = self.env.company
-        company.sudo().set_onboarding_step_done('account_setup_coa_state')
-
-        # If an opening move has already been posted, we open the tree view showing all the accounts
-        if company.opening_move_posted():
-            return 'account.action_account_form'
-
-        # Then, we open will open a custom tree view allowing to edit opening balances of the account
-        view_id = self.env.ref('account.init_accounts_tree').id
-        # Hide the current year earnings account as it is automatically computed
-        domain = [('account_type', '!=', 'equity_unaffected'), ('company_id', '=', company.id)]
-        return {
-            'type': 'ir.actions.act_window',
-            'name': _('Chart of Accounts'),
-            'res_model': 'account.account',
-            'view_mode': 'tree',
-            'limit': 99999999,
-            'search_view_id': [self.env.ref('account.view_account_search').id],
-            'views': [[view_id, 'list']],
-            'domain': domain,
-        }
-
     @api.model
     def create_op_move_if_non_existant(self):
         """ Creates an empty opening move in 'draft' state for the current company
@@ -559,53 +449,9 @@ class ResCompany(models.Model):
                         'credit': debit_diff,
                     })
 
-    @api.model
-    def action_close_account_invoice_onboarding(self):
-        """ Mark the invoice onboarding panel as closed. """
-        self.env.company.account_invoice_onboarding_state = 'closed'
-
-    @api.model
-    def action_close_account_dashboard_onboarding(self):
-        """ Mark the dashboard onboarding panel as closed. """
-        self.env.company.account_dashboard_onboarding_state = 'closed'
-
-    @api.model
-    def action_open_account_onboarding_sale_tax(self):
-        """ Onboarding step for the invoice layout. """
-        action = self.env["ir.actions.actions"]._for_xml_id("account.action_open_account_onboarding_sale_tax")
-        action['res_id'] = self.env.company.id
-        return action
-
-    @api.model
-    def action_open_account_onboarding_create_invoice(self):
-        return self.env["ir.actions.actions"]._for_xml_id("account.action_open_account_onboarding_create_invoice")
-
-    @api.model
-    def action_open_taxes_onboarding(self):
-        """ Called by the 'Taxes' button of the setup bar."""
-
-        company = self.env.company
-        company.sudo().set_onboarding_step_done('account_setup_taxes_state')
-        view_id_list = self.env.ref('account.view_onboarding_tax_tree').id
-        view_id_form = self.env.ref('account.view_tax_form').id
-
-        return {
-            'type': 'ir.actions.act_window',
-            'name': _('Taxes'),
-            'res_model': 'account.tax',
-            'target': 'current',
-            'views': [[view_id_list, 'list'], [view_id_form, 'form']],
-            'context': {'search_default_sale': True, 'search_default_purchase': True, 'active_test': False},
-        }
-
-    def action_save_onboarding_invoice_layout(self):
-        """ Set the onboarding step as done """
-        if bool(self.external_report_layout_id):
-            self.set_onboarding_step_done('account_onboarding_invoice_layout_state')
-
     def action_save_onboarding_sale_tax(self):
         """ Set the onboarding step as done """
-        self.set_onboarding_step_done('account_onboarding_sale_tax_state')
+        self.env['onboarding.onboarding.step'].action_validate_step('account.onboarding_onboarding_step_sales_tax')
 
     def get_chart_of_accounts_or_fail(self):
         account = self.env['account.account'].search([('company_id', '=', self.id)], limit=1)

--- a/None
+++ b/addons/account/models/onboarding_onboarding.py
@@ -0,0 +1,29 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, models
+
+
+class Onboarding(models.Model):
+    _inherit = 'onboarding.onboarding'
+
+    # Invoice Onboarding
+    @api.model
+    def action_close_panel_account_invoice(self):
+        self.action_close_panel('account.onboarding_onboarding_account_invoice')
+
+    def _prepare_rendering_values(self):
+        """Compute existence of invoices for company."""
+        self.ensure_one()
+        if self == self.env.ref('account.onboarding_onboarding_account_invoice', raise_if_not_found=False):
+            step = self.env.ref('account.onboarding_onboarding_step_create_invoice', raise_if_not_found=False)
+            if step and step.current_step_state == 'not_done':
+                if self.env['account.move'].search(
+                    [('company_id', '=', self.env.company.id), ('move_type', '=', 'out_invoice')], limit=1
+                ):
+                    step.action_set_just_done()
+        return super()._prepare_rendering_values()
+
+    # Dashboard Onboarding
+    @api.model
+    def action_close_panel_account_dashboard(self):
+        self.action_close_panel('account.onboarding_onboarding_account_dashboard')

--- a/None
+++ b/addons/account/models/onboarding_onboarding_step.py
@@ -0,0 +1,133 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import _, api, models
+
+
+class OnboardingStep(models.Model):
+    _inherit = 'onboarding.onboarding.step'
+
+    # COMMON STEPS
+    @api.model
+    def action_open_step_company_data(self):
+        """Set company's basic information."""
+        action = {
+            'type': 'ir.actions.act_window',
+            'name': _('Set your company data'),
+            'res_model': 'res.company',
+            'res_id': self.env.company.id,
+            'views': [(self.env.ref('account.res_company_form_view_onboarding').id, "form")],
+            'target': 'new',
+        }
+        return action
+
+    @api.model
+    def action_open_step_base_document_layout(self):
+        view_id = self.env.ref('web.view_base_document_layout').id
+        return {
+            'name': _('Configure your document layout'),
+            'type': 'ir.actions.act_window',
+            'res_model': 'base.document.layout',
+            'target': 'new',
+            'views': [(view_id, 'form')],
+        }
+
+    @api.model
+    def action_validate_step_base_document_layout(self):
+        """Set the onboarding(s) step as done only if layout is set."""
+        step = self.env.ref('account.onboarding_onboarding_step_base_document_layout', raise_if_not_found=False)
+        if not step or not self.env.company.external_report_layout_id:
+            return False
+        return self.action_validate_step('account.onboarding_onboarding_step_base_document_layout')
+
+    # INVOICE ONBOARDING
+    @api.model
+    def action_open_step_bank_account(self):
+        return self.env.company.setting_init_bank_account_action()
+
+    @api.model
+    def action_open_step_create_invoice(self):
+        return {
+            'type': 'ir.actions.act_window',
+            'name': _('Create first invoice'),
+            'views': [(self.env.ref("account.view_move_form").id, 'form')],
+            'res_model': 'account.move',
+            'context': {'default_move_type': 'out_invoice'},
+        }
+
+    # DASHBOARD ONBOARDING
+    @api.model
+    def action_open_step_fiscal_year(self):
+        company = self.env.company
+        company.create_op_move_if_non_existant()
+        new_wizard = self.env['account.financial.year.op'].create({'company_id': company.id})
+        view_id = self.env.ref('account.setup_financial_year_opening_form').id
+
+        return {
+            'type': 'ir.actions.act_window',
+            'name': _('Accounting Periods'),
+            'view_mode': 'form',
+            'res_model': 'account.financial.year.op',
+            'target': 'new',
+            'res_id': new_wizard.id,
+            'views': [[view_id, 'form']],
+        }
+
+    @api.model
+    def action_open_step_default_taxes(self):
+        """ Called by the 'Taxes' button of the setup bar."""
+        self.action_validate_step('account.onboarding_onboarding_step_default_taxes')
+
+        view_id_list = self.env.ref('account.view_onboarding_tax_tree').id
+        view_id_form = self.env.ref('account.view_tax_form').id
+
+        return {
+            'type': 'ir.actions.act_window',
+            'name': _('Taxes'),
+            'res_model': 'account.tax',
+            'target': 'current',
+            'views': [[view_id_list, 'list'], [view_id_form, 'form']],
+            'context': {'search_default_sale': True, 'search_default_purchase': True, 'active_test': False},
+        }
+
+    @api.model
+    def action_open_step_chart_of_accounts(self):
+        """ Called by the 'Chart of Accounts' button of the dashboard onboarding panel."""
+        company = self.env.company
+        self.sudo().action_validate_step('account.onboarding_onboarding_step_chart_of_accounts')
+
+        # If an opening move has already been posted, we open the tree view showing all the accounts
+        if company.opening_move_posted():
+            return 'account.action_account_form'
+
+        # Otherwise, we create the opening move
+        company.create_op_move_if_non_existant()
+
+        # Then, we open will open a custom tree view allowing to edit opening balances of the account
+        view_id = self.env.ref('account.init_accounts_tree').id
+        # Hide the current year earnings account as it is automatically computed
+        domain = [('account_type', '!=', 'equity_unaffected'), ('company_id', '=', company.id)]
+        return {
+            'type': 'ir.actions.act_window',
+            'name': _('Chart of Accounts'),
+            'res_model': 'account.account',
+            'view_mode': 'tree',
+            'limit': 99999999,
+            'search_view_id': [self.env.ref('account.view_account_search').id],
+            'views': [[view_id, 'list']],
+            'domain': domain,
+        }
+
+    # STEPS WITHOUT PANEL
+    @api.model
+    def action_open_step_sales_tax(self):
+        view_id = self.env.ref('account.res_company_form_view_onboarding_sale_tax').id
+
+        return {
+            'type': 'ir.actions.act_window',
+            'name': _('Sales tax'),
+            'res_id': self.env.company.id,
+            'res_model': 'res.company',
+            'target': 'new',
+            'view_mode': 'form',
+            'views': [[view_id, 'form']],
+        }
