PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:11 + add:0, change matches:
-    _inherit = 'barcode.rule'
-    _inherit = 'ir.actions.report'
-    _inherit = "product.product"
-    _inherit = 'product.template'
-    _inherit = 'product.category'
-    _inherit = "product.packaging"
-    _inherit = 'uom.uom'
-    _inherit = "res.company"
-    _inherit = 'res.config.settings'
-    _inherit = 'res.partner'
-    _inherit = 'res.users'

Total Changes: 99

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/stock/models/barcode.py
+++ b/addons/stock/models/barcode.py
@@ -5,7 +5,7 @@ from odoo import fields, models
 
 
 class BarcodeRule(models.Model):
-    _inherit = 'barcode.rule'
+    _inherit = ['barcode.rule']
 
     type = fields.Selection(selection_add=[
         ('weight', 'Weighted Product'),

--- a/addons/stock/models/ir_actions_report.py
+++ b/addons/stock/models/ir_actions_report.py
@@ -2,7 +2,7 @@ from odoo import models
 
 
 class IrActionsReport(models.Model):
-    _inherit = 'ir.actions.report'
+    _inherit = ['ir.actions.report']
 
     def _get_rendering_context(self, report, docids, data):
         data = super()._get_rendering_context(report, docids, data)

--- a/addons/stock/models/product.py
+++ b/addons/stock/models/product.py
@@ -23,8 +23,8 @@ OPERATORS = {
 }
 
 
-class Product(models.Model):
-    _inherit = "product.product"
+class ProductProduct(models.Model):
+    _inherit = ["product.product"]
 
     stock_quant_ids = fields.One2many('stock.quant', 'product_id') # used to compute quantities
     stock_move_ids = fields.One2many('stock.move', 'product_id') # used to compute quantities
@@ -442,7 +442,7 @@ class Product(models.Model):
 
     @api.model
     def view_header_get(self, view_id, view_type):
-        res = super(Product, self).view_header_get(view_id, view_type)
+        res = super().view_header_get(view_id, view_type)
         if not res and self._context.get('active_id') and self._context.get('active_model') == 'stock.location':
             return _(
                 'Products: %(location)s',
@@ -637,7 +637,7 @@ class Product(models.Model):
         domain = [('product_id', 'in', self.ids)]
         lines = self.env['stock.lot']._read_group(domain, ['product_id'])
         linked_product_ids = [product.id for [product] in lines]
-        return super(Product, self - self.browse(linked_product_ids))._filter_to_unlink()
+        return super(ProductProduct, self - self.browse(linked_product_ids))._filter_to_unlink()
 
     @api.model
     def _count_returned_sn_products(self, sn_lot):
@@ -660,7 +660,7 @@ class Product(models.Model):
 
 
 class ProductTemplate(models.Model):
-    _inherit = 'product.template'
+    _inherit = ['product.template']
     _check_company_auto = True
 
     is_storable = fields.Boolean(
@@ -1024,7 +1024,7 @@ class ProductTemplate(models.Model):
 
 
 class ProductCategory(models.Model):
-    _inherit = 'product.category'
+    _inherit = ['product.category']
 
     route_ids = fields.Many2many(
         'stock.route', 'stock_route_categ', 'categ_id', 'route_id', 'Routes',
@@ -1080,8 +1080,9 @@ class ProductCategory(models.Model):
                 return [('id', '=', product.categ_id.id)]
         return []
 
+
 class ProductPackaging(models.Model):
-    _inherit = "product.packaging"
+    _inherit = ["product.packaging"]
 
     package_type_id = fields.Many2one('stock.package.type', 'Package Type')
     route_ids = fields.Many2many(
@@ -1090,8 +1091,8 @@ class ProductPackaging(models.Model):
         help="Depending on the modules installed, this will allow you to define the route of the product in this packaging: whether it will be bought, manufactured, replenished on order, etc.")
 
 
-class UoM(models.Model):
-    _inherit = 'uom.uom'
+class UomUom(models.Model):
+    _inherit = ['uom.uom']
 
     def write(self, values):
         # Users can not update the factor if open stock moves are based on it
@@ -1122,7 +1123,7 @@ class UoM(models.Model):
                     ('quantity', '!=', 0),
                 ]):
                     raise UserError(error_msg)
-        return super(UoM, self).write(values)
+        return super().write(values)
 
     def _adjust_uom_quantities(self, qty, quant_uom):
         """ This method adjust the quantities of a procurement if its UoM isn't the same

--- a/addons/stock/models/product_strategy.py
+++ b/addons/stock/models/product_strategy.py
@@ -7,8 +7,7 @@ from odoo.exceptions import UserError
 from odoo.tools.float_utils import float_compare
 
 
-class RemovalStrategy(models.Model):
-    _name = 'product.removal'
+class ProductRemoval(models.Model):
     _description = 'Removal Strategy'
 
     name = fields.Char('Name', required=True, translate=True)
@@ -16,7 +15,6 @@ class RemovalStrategy(models.Model):
 
 
 class StockPutawayRule(models.Model):
-    _name = 'stock.putaway.rule'
     _order = 'sequence,product_id'
     _description = 'Putaway Rule'
     _check_company_auto = True

--- a/addons/stock/models/res_company.py
+++ b/addons/stock/models/res_company.py
@@ -5,8 +5,8 @@ import threading
 from odoo import _, api, fields, models
 
 
-class Company(models.Model):
-    _inherit = "res.company"
+class ResCompany(models.Model):
+    _inherit = ["res.company"]
     _check_company_auto = True
 
     def _default_confirmation_mail_template(self):

--- a/addons/stock/models/res_config_settings.py
+++ b/addons/stock/models/res_config_settings.py
@@ -6,7 +6,7 @@ from odoo.exceptions import UserError
 
 
 class ResConfigSettings(models.TransientModel):
-    _inherit = 'res.config.settings'
+    _inherit = ['res.config.settings']
 
     module_product_expiry = fields.Boolean("Expiration Dates",
         help="Track following dates on lots & serial numbers: best before, removal, end of life, alert. \n Such dates are set automatically at lot/serial number creation based on values set on the product (in days).")

--- a/addons/stock/models/res_partner.py
+++ b/addons/stock/models/res_partner.py
@@ -5,8 +5,8 @@ from odoo import fields, models
 from odoo.addons.base.models.res_partner import WARNING_HELP, WARNING_MESSAGE
 
 
-class Partner(models.Model):
-    _inherit = 'res.partner'
+class ResPartner(models.Model):
+    _inherit = ['res.partner']
     _check_company_auto = True
 
     property_stock_customer = fields.Many2one(

--- a/addons/stock/models/res_users.py
+++ b/addons/stock/models/res_users.py
@@ -3,8 +3,8 @@
 from odoo import models
 
 
-class Users(models.Model):
-    _inherit = 'res.users'
+class ResUsers(models.Model):
+    _inherit = ['res.users']
 
     def _get_default_warehouse_id(self):
         # !!! Any change to the following search domain should probably

--- a/addons/stock/models/stock_location.py
+++ b/addons/stock/models/stock_location.py
@@ -12,8 +12,7 @@ from odoo.osv import expression
 from odoo.tools.float_utils import float_compare
 
 
-class Location(models.Model):
-    _name = "stock.location"
+class StockLocation(models.Model):
     _description = "Inventory Locations"
     _parent_name = "location_id"
     _parent_store = True
@@ -24,7 +23,7 @@ class Location(models.Model):
 
     @api.model
     def default_get(self, fields):
-        res = super(Location, self).default_get(fields)
+        res = super().default_get(fields)
         if 'barcode' in fields and 'barcode' not in res and res.get('complete_name'):
             res['barcode'] = res['complete_name']
         return res
@@ -252,7 +251,7 @@ class Location(models.Model):
                         "You can't disable locations %s because they still contain products.",
                         ', '.join(children_quants.mapped('location_id.display_name'))))
                 else:
-                    super(Location, children_location - self).with_context(do_not_check_quant=True).write({
+                    super(StockLocation, children_location - self).with_context(do_not_check_quant=True).write({
                         'active': values['active'],
                     })
 
@@ -261,7 +260,7 @@ class Location(models.Model):
         return res
 
     def unlink(self):
-        return super(Location, self.search([('id', 'child_of', self.ids)])).unlink()
+        return super(StockLocation, self.search([('id', 'child_of', self.ids)])).unlink()
 
     @api.model
     def name_create(self, name):
@@ -497,7 +496,6 @@ class Location(models.Model):
 
 
 class StockRoute(models.Model):
-    _name = 'stock.route'
     _description = "Inventory Routes"
     _order = 'sequence'
     _check_company_auto = True

--- a/addons/stock/models/stock_lot.py
+++ b/addons/stock/models/stock_lot.py
@@ -20,7 +20,6 @@ OPERATORS = {
 
 
 class StockLot(models.Model):
-    _name = 'stock.lot'
     _inherit = ['mail.thread', 'mail.activity.mixin']
     _description = 'Lot/Serial'
     _check_company_auto = True

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -17,7 +17,6 @@ PROCUREMENT_PRIORITIES = [('0', 'Normal'), ('1', 'Urgent')]
 
 
 class StockMove(models.Model):
-    _name = "stock.move"
     _description = "Stock Move"
     _order = 'sequence, id'
 

--- a/addons/stock/models/stock_move_line.py
+++ b/addons/stock/models/stock_move_line.py
@@ -10,7 +10,6 @@ from odoo.tools.float_utils import float_compare, float_is_zero, float_round
 
 
 class StockMoveLine(models.Model):
-    _name = "stock.move.line"
     _description = "Product Moves (Stock Move Line)"
     _rec_name = "product_id"
     _order = "result_package_id desc, id"

--- a/addons/stock/models/stock_orderpoint.py
+++ b/addons/stock/models/stock_orderpoint.py
@@ -20,7 +20,6 @@ _logger = logging.getLogger(__name__)
 
 class StockWarehouseOrderpoint(models.Model):
     """ Defines Minimum stock rules. """
-    _name = "stock.warehouse.orderpoint"
     _description = "Minimum Inventory Rule"
     _check_company_auto = True
     _order = "location_id,company_id,id"

--- a/addons/stock/models/stock_package_level.py
+++ b/addons/stock/models/stock_package_level.py
@@ -7,8 +7,7 @@ from odoo import _, api, fields, models
 from odoo.tools.float_utils import float_is_zero
 
 
-class StockPackageLevel(models.Model):
-    _name = 'stock.package_level'
+class StockPackage_Level(models.Model):
     _description = 'Stock Package Level'
     _check_company_auto = True
 
@@ -161,7 +160,7 @@ class StockPackageLevel(models.Model):
         return package_levels
 
     def write(self, vals):
-        result = super(StockPackageLevel, self).write(vals)
+        result = super().write(vals)
         if vals.get('location_dest_id'):
             self.mapped('move_line_ids').write({'location_dest_id': vals['location_dest_id']})
             self.mapped('move_ids').write({'location_dest_id': vals['location_dest_id']})
@@ -170,7 +169,7 @@ class StockPackageLevel(models.Model):
     def unlink(self):
         self.mapped('move_ids').write({'package_level_id': False})
         self.mapped('move_line_ids').write({'result_package_id': False})
-        return super(StockPackageLevel, self).unlink()
+        return super().unlink()
 
     def _check_move_lines_map_quant_package(self, package, only_picked=False):
         mls = self.move_line_ids

--- a/addons/stock/models/stock_package_type.py
+++ b/addons/stock/models/stock_package_type.py
@@ -4,8 +4,7 @@
 from odoo import fields, models
 
 
-class PackageType(models.Model):
-    _name = 'stock.package.type'
+class StockPackageType(models.Model):
     _description = "Stock package type"
 
     def _get_default_length_uom(self):

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -16,8 +16,7 @@ from odoo.tools import format_datetime, format_date, format_list, groupby, SQL
 from odoo.tools.float_utils import float_compare, float_is_zero
 
 
-class PickingType(models.Model):
-    _name = "stock.picking.type"
+class StockPickingType(models.Model):
     _description = "Picking Type"
     _order = 'is_favorite desc, sequence, id'
     _rec_names_search = ['name', 'warehouse_id.name']
@@ -214,7 +213,7 @@ class PickingType(models.Model):
                     moves = self.env['stock.move'].search([('picking_type_id', 'in', picking_types.ids), ('state', 'not in', ('assigned', 'done', 'cancel'))])
                     moves.reservation_date = False
 
-        return super(PickingType, self).write(vals)
+        return super().write(vals)
 
     @api.model
     def _search_is_favorite(self, operator, value):
@@ -525,8 +524,7 @@ class PickingType(models.Model):
             picking_type.kanban_dashboard_graph = json.dumps(graph_data)
 
 
-class Picking(models.Model):
-    _name = "stock.picking"
+class StockPicking(models.Model):
     _inherit = ['mail.thread', 'mail.activity.mixin']
     _description = "Transfer"
     _order = "priority desc, scheduled_date asc, id desc"
@@ -1117,7 +1115,7 @@ class Picking(models.Model):
             for picking in self:
                 if picking.picking_type_id != picking_type:
                     picking.name = picking_type.sequence_id.next_by_id()
-        res = super(Picking, self).write(vals)
+        res = super().write(vals)
         if vals.get('signature'):
             for picking in self:
                 picking._attach_sign()
@@ -1139,7 +1137,7 @@ class Picking(models.Model):
     def unlink(self):
         self.move_ids._action_cancel()
         self.with_context(prefetch_fields=False).move_ids.unlink()  # Checks if moves are not done
-        return super(Picking, self).unlink()
+        return super().unlink()
 
     def do_print_picking(self):
         self.write({'printed': True})

--- a/addons/stock/models/stock_quant.py
+++ b/addons/stock/models/stock_quant.py
@@ -17,7 +17,6 @@ _logger = logging.getLogger(__name__)
 
 
 class StockQuant(models.Model):
-    _name = 'stock.quant'
     _description = 'Quants'
     _rec_name = 'product_id'
     _rec_names_search = ['location_id', 'lot_id', 'package_id', 'owner_id']
@@ -1517,9 +1516,8 @@ class StockQuant(models.Model):
         moves._action_done()
 
 
-class QuantPackage(models.Model):
+class StockQuantPackage(models.Model):
     """ Packages containing quants and/or other packages """
-    _name = "stock.quant.package"
     _description = "Packages"
     _order = 'name'
 

--- a/addons/stock/models/stock_replenish_mixin.py
+++ b/addons/stock/models/stock_replenish_mixin.py
@@ -3,8 +3,7 @@
 from odoo import api, fields, models
 
 
-class ProductReplenishMixin(models.AbstractModel):
-    _name = 'stock.replenish.mixin'
+class StockReplenishMixin(models.AbstractModel):
     _description = 'Product Replenish Mixin'
 
     route_id = fields.Many2one(

--- a/addons/stock/models/stock_rule.py
+++ b/addons/stock/models/stock_rule.py
@@ -29,7 +29,6 @@ class ProcurementException(Exception):
 
 class StockRule(models.Model):
     """ A rule describe what a procurement should do; produce, buy, move, ... """
-    _name = 'stock.rule'
     _description = "Stock Rule"
     _order = "sequence, id"
     _check_company_auto = True
@@ -426,7 +425,6 @@ class ProcurementGroup(models.Model):
     The name is usually the name of the original document (sales order) or a
     sequence computed if created manually.
     """
-    _name = 'procurement.group'
     _description = 'Procurement Group'
     _order = "id desc"
 

--- a/addons/stock/models/stock_scrap.py
+++ b/addons/stock/models/stock_scrap.py
@@ -8,7 +8,6 @@ from odoo.tools.misc import clean_context
 
 
 class StockScrap(models.Model):
-    _name = 'stock.scrap'
     _inherit = ['mail.thread']
     _order = 'id desc'
     _description = 'Scrap'
@@ -228,7 +227,6 @@ class StockScrap(models.Model):
 
 
 class StockScrapReasonTag(models.Model):
-    _name = 'stock.scrap.reason.tag'
     _description = 'Scrap Reason Tag'
     _order = 'sequence, id'
 

--- a/addons/stock/models/stock_storage_category.py
+++ b/addons/stock/models/stock_storage_category.py
@@ -4,8 +4,7 @@
 from odoo import api, fields, models
 
 
-class StorageCategory(models.Model):
-    _name = 'stock.storage.category'
+class StockStorageCategory(models.Model):
     _description = "Storage Category"
     _order = "name"
 
@@ -44,8 +43,7 @@ class StorageCategory(models.Model):
         return [dict(vals, name=self.env._("%s (copy)", category.name)) for category, vals in zip(self, vals_list)]
 
 
-class StorageCategoryProductCapacity(models.Model):
-    _name = 'stock.storage.category.capacity'
+class StockStorageCategoryCapacity(models.Model):
     _description = "Storage Category Capacity"
     _check_company_auto = True
     _order = "storage_category_id"

--- a/addons/stock/models/stock_warehouse.py
+++ b/addons/stock/models/stock_warehouse.py
@@ -22,8 +22,7 @@ ROUTE_NAMES = {
 }
 
 
-class Warehouse(models.Model):
-    _name = "stock.warehouse"
+class StockWarehouse(models.Model):
     _description = "Warehouse"
     _order = 'sequence,id'
     _check_company_auto = True
