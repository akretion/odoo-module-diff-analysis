PR: https://github.com/odoo/odoo/pull/186359

From: 25243bf841888bb319a5ab1d3df39bd87ea8b061
From: David Monnom
Date: 2024-12-09 14:20:21

Breaking data model changes scores: del:2 + add:0, change matches:
-    self_ordering_takeaway = fields.Boolean("Self Takeaway")
-    pos_self_ordering_takeaway = fields.Boolean(related="pos_config_id.self_ordering_takeaway", readonly=False)

Total Changes: 51

[IMP] point_of_sale, pos_*: presets in self order

*: pos_online_payment_self_order, pos_restaurant, pos_self_order

Adding presets in self order module.

closes odoo/odoo#186359

Taskid: 4310935
Related: odoo/enterprise#73348
Related: odoo/upgrade#6743
Signed-off-by: Adrien Guilliams (adgu) <adgu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_self_order/models/__init__.py
+++ b/addons/pos_self_order/models/__init__.py
@@ -12,3 +12,4 @@ from . import res_config_settings
 from . import pos_session
 from . import pos_load_mixin
 from . import account_fiscal_position
+from . import pos_preset

--- a/addons/pos_self_order/models/pos_config.py
+++ b/addons/pos_self_order/models/pos_config.py
@@ -29,7 +29,6 @@ class PosConfig(models.Model):
         store=False,
     )
     self_ordering_url = fields.Char(compute="_compute_self_ordering_url")
-    self_ordering_takeaway = fields.Boolean("Self Takeaway")
     self_ordering_mode = fields.Selection(
         [("nothing", "Disable"), ("consultation", "QR menu"), ("mobile", "QR menu + Ordering"), ("kiosk", "Kiosk")],
         string="Self Ordering Mode",
@@ -257,11 +256,11 @@ class PosConfig(models.Model):
         return encoded_images
 
     def _load_self_data_models(self):
-        return ['pos.session', 'pos.order', 'pos.order.line', 'pos.payment', 'pos.payment.method', 'res.currency', 'pos.category', 'product.template', 'product.product',
-            'pos.preset', 'product.combo', 'product.combo.item', 'res.company', 'account.tax', 'account.tax.group', 'pos.printer', 'res.country', 'product.pricelist',
-            'product.pricelist.item', 'account.fiscal.position', 'account.fiscal.position.tax', 'res.lang', 'product.attribute', 'product.attribute.custom.value',
-            'product.template.attribute.line', 'product.template.attribute.value', 'decimal.precision', 'uom.uom', 'pos.printer', 'pos_self_order.custom_link',
-            'restaurant.floor', 'restaurant.table', 'account.cash.rounding']
+        return ['pos.session', 'pos.preset', 'resource.calendar.attendance', 'pos.order', 'pos.order.line', 'pos.payment', 'pos.payment.method',
+            'res.currency', 'pos.category', 'product.template', 'product.product', 'product.combo', 'product.combo.item', 'res.company', 'account.tax',
+            'account.tax.group', 'pos.printer', 'res.country', 'product.pricelist', 'product.pricelist.item', 'account.fiscal.position', 'account.fiscal.position.tax',
+            'res.lang', 'product.attribute', 'product.attribute.custom.value', 'product.template.attribute.line', 'product.template.attribute.value',
+            'decimal.precision', 'uom.uom', 'pos.printer', 'pos_self_order.custom_link', 'restaurant.floor', 'restaurant.table', 'account.cash.rounding']
 
     def load_self_data(self):
         # Init our first record, in case of self_order is pos_config

--- a/addons/pos_self_order/models/pos_order.py
+++ b/addons/pos_self_order/models/pos_order.py
@@ -41,19 +41,6 @@ class PosOrder(models.Model):
     def _load_pos_self_data_domain(self, data):
         return [('id', '=', False)]
 
-    @api.model
-    def sync_from_ui(self, orders):
-        for order in orders:
-            if order.get('id'):
-                order_id = order['id']
-
-                if isinstance(order_id, int):
-                    old_order = self.env['pos.order'].browse(order_id)
-                    if old_order.takeaway:
-                        order['takeaway'] = old_order.takeaway
-
-        return super().sync_from_ui(orders)
-
     def _process_saved_order(self, draft):
         res = super()._process_saved_order(draft)
 

--- a/None
+++ b/addons/pos_self_order/models/pos_preset.py
@@ -0,0 +1,25 @@
+from odoo import models, api, fields
+
+
+class PosPreset(models.Model):
+    _inherit = ["pos.preset"]
+
+    available_in_self = fields.Boolean(string='Available in self', default=False)
+    service_at = fields.Selection(
+        [("counter", "Pickup zone"), ("table", "Table"), ("delivery", "Delivery")],
+        string="Service at",
+        default="counter",
+        required=True,
+    )
+
+    # will be overridden.
+    @api.model
+    def _load_pos_self_data_domain(self, data):
+        config_id = data['pos.config'][0]['available_preset_ids']
+        return ['|', ('id', '=', data['pos.config'][0]['default_preset_id']), '&', ('available_in_self', '=', True), ('id', 'in', config_id)]
+
+    @api.model
+    def _load_pos_self_data_fields(self, config_id):
+        params = super()._load_pos_self_data_fields(config_id)
+        params.append('service_at')
+        return params

--- a/addons/pos_self_order/models/res_config_settings.py
+++ b/addons/pos_self_order/models/res_config_settings.py
@@ -14,7 +14,6 @@ from werkzeug.urls import url_unquote
 class ResConfigSettings(models.TransientModel):
     _inherit = "res.config.settings"
 
-    pos_self_ordering_takeaway = fields.Boolean(related="pos_config_id.self_ordering_takeaway", readonly=False)
     pos_self_ordering_service_mode = fields.Selection(related="pos_config_id.self_ordering_service_mode", readonly=False, required=True)
     pos_self_ordering_mode = fields.Selection(related="pos_config_id.self_ordering_mode", readonly=False, required=True)
     pos_self_ordering_default_language_id = fields.Many2one(related="pos_config_id.self_ordering_default_language_id", readonly=False)
