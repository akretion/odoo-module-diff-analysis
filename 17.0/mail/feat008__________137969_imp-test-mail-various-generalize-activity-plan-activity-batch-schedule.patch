PR: https://github.com/odoo/odoo/pull/137969

From: 35d5342887f14d7863fd362cff2657fb84e00fe8
From: Pierre-Yves Dufays
Date: 2023-10-12 16:12:09
+    template_ids = fields.One2many(

Total Changes: 191

[IMP] {test_}mail, various: generalize activity plan + activity batch schedule

Generalize the hr.employee activity plan to any model, allowing to create
activity plan that can be launched on any model.

The activity can now be created in batch by selecting multiple record in the
list view and then clicking on a "clock" icon in a row similarly to the batch
records update (selecting multiple records allows to change for example their
name in batch in the list view). We implement also that functionality for the
plan, allowing to launch a plan on multiple records at once.

We also centralize the launching of activity or activity plan through either
the  "Activities" button in the chatter or the "clock" button in the view list.

Scheduling activity is now taken in charge by a wizard that can schedule a
single activity as well as a plan. We add/update tests for checking that the
wizard is launched with the right record selection (on a single record or a
batch) and add tests for checking the wizard itself.

The plan can be defined through an added menu in the technical admin menu but
also through configuration menu added in the module crm, project.

Technical notes:
In the added wizard, to determine that there is a error, we introduce the
has_error field because we cannot use easily the error field for that. Indeed,
to determine that there is no error, we have to compare it to "<p><br></p>"
(more precisely &lt;p&gt;&lt;br&gt;&lt;/p&gt;) which is not handy and may
change in the future. This is because when we write False on field error and
read it after, we get "<p><br></p>". Instead, we centralize this weird
comparison in the model in the compute method of has_error.

The ActivityListPopover still displays the activity of the record on which it
has been triggered but the button to schedule activity will launch a wizard
that create activities in batch for the selected records if more than one was
selected. For that, the ActivityListPopover component receives now an
additional prop: resIds (selected records) on top of the resId prop (record on
which the popup has been triggered). Note that when the line that trigger the
popup is not selected, the batch mode is disabled to avoid confusion.

Test are updated because the wizard is opened instead of the activity form to
schedule a new activity and as the form view is only used to edit already
existing activities, default_res_id and default_res_model are no longer passed.

We defines date_deadline and date_plan_deadline in the schedule wizard because
those date are managed differently (default value, required or not, ...).

Task-3390865

Part-of: odoo/odoo#137969

================================= pseudo patch: =================================

--- a/addons/mail/models/__init__.py
+++ b/addons/mail/models/__init__.py
@@ -23,6 +23,8 @@ from . import fetchmail
 from . import mail_notification  # keep before as decorated m2m
 from . import mail_activity_type
 from . import mail_activity
+from . import mail_activity_plan
+from . import mail_activity_plan_template
 from . import mail_blacklist
 from . import mail_followers
 from . import mail_gateway_allowed

--- a/addons/mail/models/mail_activity.py
+++ b/addons/mail/models/mail_activity.py
@@ -168,6 +168,7 @@ class MailActivity(models.Model):
             if self.activity_type_id.default_note:
                 self.note = self.activity_type_id.default_note
 
+    @api.model
     def _calculate_date_deadline(self, activity_type):
         # Date.context_today is correct because date_deadline is a Date and is meant to be
         # expressed in user TZ

--- a/None
+++ b/addons/mail/models/mail_activity_plan.py
@@ -0,0 +1,74 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from markupsafe import Markup
+
+from odoo import api, fields, models
+
+
+class MailActivityPlan(models.Model):
+    _name = 'mail.activity.plan'
+    _description = 'Activity Plan'
+    _order = 'id DESC'
+
+    def _get_model_selection(self):
+        return [
+            (model.model, model.name)
+            for model in self.env['ir.model'].sudo().search(
+                ['&', ('is_mail_thread', '=', True), ('transient', '=', False)])
+        ]
+
+    name = fields.Char('Name', required=True)
+    company_id = fields.Many2one(
+        'res.company', default=lambda self: self.env.company)
+    template_ids = fields.One2many(
+        'mail.activity.plan.template', 'plan_id', string='Activities')
+    active = fields.Boolean(default=True)
+    res_model_id = fields.Many2one(
+        'ir.model', string='Applies to',
+        compute="_compute_res_model_id", compute_sudo=True,
+        ondelete="cascade", precompute=True, readonly=False, required=True, store=True)
+    res_model = fields.Selection(
+        selection=_get_model_selection, string="Model", required=True,
+        help='Specify a model if the activity should be specific to a model'
+              ' and not available when managing activities for other models.')
+    steps_count = fields.Integer(compute='_compute_steps_count')
+    assignation_summary = fields.Html('Assignation summary', compute='_compute_assignation')
+    has_user_on_demand = fields.Boolean('Has on demand responsible', compute='_compute_has_user_on_demand')
+
+    @api.depends('res_model')
+    def _compute_res_model_id(self):
+        for plan in self:
+            plan.res_model_id = self.env['ir.model']._get_id(plan.res_model)
+
+    @api.constrains('res_model')
+    def _check_res_model_compatibility_with_templates(self):
+        self.template_ids._check_activity_type_res_model()
+
+    @api.depends('template_ids')
+    def _compute_steps_count(self):
+        for plan in self:
+            plan.steps_count = len(plan.template_ids)
+
+    @api.depends('template_ids.summary')
+    def _compute_assignation(self):
+        self.assignation_summary = ''
+        for plan in self.filtered('template_ids'):
+            resp_description = dict(self.env['mail.activity.plan.template']._fields['responsible_type']._description_selection(self.env))
+            summaries = [
+                f"{template.activity_type_id.name} - {resp_description[template.responsible_type]}" +
+                (f": {template.summary}" if template.summary else '')
+                for template in plan.template_ids
+            ]
+            if summaries:
+                plan.assignation_summary = Markup('<ul>%s</ul>') % (
+                    Markup().join(Markup('<li>%s</li>') % summary for summary in summaries)
+                )
+            else:
+                plan.assignation_summary = ''
+
+    @api.depends('template_ids.responsible_type')
+    def _compute_has_user_on_demand(self):
+        self.has_user_on_demand = False
+        for plan in self.filtered('template_ids'):
+            plan.has_user_on_demand = any(template.responsible_type == 'on_demand' for template in plan.template_ids)

--- a/None
+++ b/addons/mail/models/mail_activity_plan_template.py
@@ -0,0 +1,109 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
+
+
+class MailActivityPlanTemplate(models.Model):
+    _name = 'mail.activity.plan.template'
+    _order = 'sequence,id'
+    _description = 'Activity plan template'
+    _rec_name = 'summary'
+
+    plan_id = fields.Many2one(
+        'mail.activity.plan', string="Plan",
+        ondelete='cascade', required=True)
+    res_model = fields.Selection(related="plan_id.res_model")
+    company_id = fields.Many2one(related='plan_id.company_id')
+    sequence = fields.Integer(default=10)
+    activity_type_id = fields.Many2one(
+        'mail.activity.type', 'Activity Type',
+        default=lambda self: self.env.ref('mail.mail_activity_data_todo'),
+        domain="['|', ('res_model', '=', False), '&', ('res_model', '!=', False), ('res_model', '=', parent.res_model)]",
+        ondelete='restrict', required=True
+    )
+    summary = fields.Char('Summary', compute="_compute_summary", store=True, readonly=False)
+    responsible_type = fields.Selection([
+        ('on_demand', 'On demand'),
+        ('other', 'Other'),
+    ], default='on_demand', string='Responsible', required=True)
+    responsible_id = fields.Many2one(
+        'res.users',
+        'Other Responsible',
+        check_company=True, store=True, compute="_compute_responsible_id", readonly=False,
+        help='Specific responsible of activity if not linked to the employee.')
+    note = fields.Html('Note')
+
+    @api.constrains('activity_type_id', 'plan_id')
+    def _check_activity_type_res_model(self):
+        """ Check that the plan models are compatible with the template activity
+        type model. Note that it depends also on "activity_type_id.res_model" and
+        "plan_id.res_model". That's why this method is called by those models
+        when the mentioned fields are updated.
+        """
+        for template in self.filtered(lambda tpl: tpl.activity_type_id.res_model):
+            if template.activity_type_id.res_model != template.plan_id.res_model:
+                raise ValidationError(
+                    _('The activity type "%(activity_type_name)s" is not compatible with the plan "%(plan_name)s"'
+                      ' because it is limited to the model "%(activity_type_model)s".',
+                      activity_type_name=template.activity_type_id.name,
+                      activity_type_model=template.activity_type_id.res_model,
+                      plan_name=template.plan_id.name,
+                     )
+                )
+
+    @api.constrains('responsible_id', 'responsible_type')
+    def _check_responsible(self):
+        """ Ensure that responsible_id is set when responsible is set to "other". """
+        for template in self:
+            if template.responsible_type == 'other' and not template.responsible_id:
+                raise ValidationError(_('When selecting responsible "other", you must specify a responsible.'))
+
+    @api.depends('activity_type_id')
+    def _compute_summary(self):
+        for template in self:
+            template.summary = template.activity_type_id.summary
+
+    @api.depends('responsible_type')
+    def _compute_responsible_id(self):
+        for template in self:
+            if template.responsible_type != 'other' and template.responsible_id:
+                template.responsible_id = False
+
+    def _determine_responsible(self, on_demand_responsible, applied_on_record):
+        """ Determine the responsible for the activity based on the template
+        for the given record and on demand responsible.
+
+        Based on the responsible_type, this method will determine the responsible
+        to set on the activity for the given record (applied_on_record).
+        Following the responsible_type:
+        - on_demand: on_demand_responsible is used as responsible (allow to set it
+        when using the template)
+        - other: the responsible field is used (preset user at the template level)
+
+        Other module can extend it and base the responsible on the record on which
+        the activity will be set. Ex.: 'coach' on employee record will assign the
+        coach user of the employee.
+
+        :param <res.user> on_demand_responsible: on demand responsible
+        :param recordset applied_on_record: the record on which the activity
+            will be created
+        :return dict: {'responsible': <res.user>, error: str|False}
+        """
+        self.ensure_one()
+        error = False
+        if self.responsible_type == 'other':
+            responsible = self.responsible_id
+        elif self.responsible_type == 'on_demand':
+            responsible = on_demand_responsible
+            if not responsible:
+                error = _('No responsible specified for %(activity_type_name)s: %(activity_summary)s.',
+                          activity_type_name=self.activity_type_id.name,
+                          activity_summary=self.summary or '-')
+        else:
+            raise ValueError(f'Invalid responsible value {self.responsible_type}.')
+        return {
+            'responsible': responsible,
+            'error': error,
+        }

--- a/addons/mail/models/mail_activity_type.py
+++ b/addons/mail/models/mail_activity_type.py
@@ -77,6 +77,11 @@ class MailActivityType(models.Model):
             help='Technical field to keep track of the model at the start of editing to support UX related behaviour')
     res_model_change = fields.Boolean(string="Model has change", default=False, store=False)
 
+    @api.constrains('res_model')
+    def _check_activity_type_res_model(self):
+        self.env['mail.activity.plan.template'].search(
+            [('activity_type_id', 'in', self.ids)])._check_activity_type_res_model()
+
     @api.onchange('res_model')
     def _onchange_res_model(self):
         self.mail_template_ids = self.sudo().mail_template_ids.filtered(lambda template: template.model_id.model == self.res_model)
