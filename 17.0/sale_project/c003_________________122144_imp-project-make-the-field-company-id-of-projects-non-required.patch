PR: https://github.com/odoo/odoo/pull/122144

From: 16a07ed1bfd33a193b363f3e87aab3f9bd6f8bd0
From: damr
Date: 2023-07-19 21:17:53

Structural Changes: 1
Total Changes: 63

[IMP] project: make the field company_id of projects non required

This commit's purpose is to allow the user to set the company_id of a project to False, meaning the project is no longer restricted for the user who does not have access to the company of the project. This change induces a lot of other small behavior changes/approximation. Since some fields (currency_id, resource_calendar_id, etc) were company dependent, we had to updates some use cases.

task-3084819

closes odoo/odoo#122144

Related: odoo/enterprise#41363
Related: odoo/upgrade#4947
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_project/models/product.py
+++ b/addons/sale_project/models/product.py
@@ -33,10 +33,10 @@ class ProductTemplate(models.Model):
         creating a new project based on the selected template.")
     project_id = fields.Many2one(
         'project.project', 'Project', company_dependent=True,
-        domain="[('company_id', '=', current_company_id)]")
+        domain="['|', ('company_id', '=', False), '&', ('company_id', '=?', company_id), ('company_id', '=', current_company_id)]")
     project_template_id = fields.Many2one(
-        'project.project', 'Project Template', company_dependent=True, copy=True,
-        domain="[('company_id', '=', current_company_id)]")
+        'project.project', 'Project Template', copy=True,
+        domain="['|', ('company_id', '=', False), '&', ('company_id', '=?', company_id), ('company_id', '=', current_company_id)]")
     service_policy = fields.Selection('_selection_service_policy', string="Service Invoicing Policy", compute='_compute_service_policy', inverse='_inverse_service_policy')
     service_type = fields.Selection(selection_add=[
         ('milestones', 'Project Milestones'),

--- a/addons/sale_project/models/project.py
+++ b/addons/sale_project/models/project.py
@@ -2,13 +2,13 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 import json
+from collections import defaultdict
+from datetime import date
 
 from odoo import api, fields, models, _, _lt
 from odoo.exceptions import ValidationError, AccessError
 from odoo.osv import expression
 from odoo.tools import Query
-
-from datetime import date
 from functools import reduce
 
 from odoo.addons.project.models.project_task import CLOSED_STATES
@@ -20,7 +20,7 @@ class Project(models.Model):
     sale_line_id = fields.Many2one(
         'sale.order.line', 'Sales Order Item', copy=False,
         compute="_compute_sale_line_id", store=True, readonly=False, index='btree_not_null',
-        domain="[('is_service', '=', True), ('is_expense', '=', False), ('state', '=', 'sale'), ('order_partner_id', '=?', partner_id), '|', ('company_id', '=', False), ('company_id', '=', company_id)]",
+        domain="[('is_service', '=', True), ('is_expense', '=', False), ('state', '=', 'sale'), ('order_partner_id', '=?', partner_id)]",
         help="Sales order item that will be selected by default on the tasks and timesheets of this project,"
             " except if the employee set on the timesheets is explicitely linked to another sales order item on the project.\n"
             "It can be modified on each task and timesheet entry individually if necessary.")
@@ -38,9 +38,12 @@ class Project(models.Model):
         defaults['sale_line_id'] = False
         return defaults
 
-    @api.depends('allow_billable')
+    @api.depends('allow_billable', 'partner_id.company_id')
     def _compute_partner_id(self):
-        self.filtered(lambda project: not project.allow_billable).partner_id = False
+        for project in self:
+            # Ensures that the partner_id and its project do not have different companies set
+            if not project.allow_billable or (project.company_id and project.partner_id.company_id and project.company_id != project.partner_id.company_id):
+                project.partner_id = False
 
     @api.depends('partner_id')
     def _compute_sale_line_id(self):
@@ -394,11 +397,12 @@ class Project(models.Model):
         sequence_per_invoice_type = self._get_profitability_sequence_per_invoice_type()
         if sale_line_read_group:
             # Get conversion rate from currencies of the sale order lines to currency of project
+            convert_company = self.company_id or self.env.company
             currency_ids = list(set([currency_id.id for currency_id, *_ in sale_line_read_group] + [self.currency_id.id]))
-            rates = self.env['res.currency'].browse(currency_ids)._get_rates(self.company_id, date.today())
+            rates = self.env['res.currency'].browse(currency_ids)._get_rates(convert_company, date.today())
             conversion_rates = {cid: rates[self.currency_id.id] / rate_from for cid, rate_from in rates.items()}
 
-            sols_per_product = {}
+            sols_per_product = defaultdict(lambda: [0.0, 0.0, []])
             downpayment_amount_invoiced = 0
             downpayment_sol_ids = []
             for currency, product, is_downpayment, sol_ids, untaxed_amount_to_invoice, untaxed_amount_invoiced in sale_line_read_group:
@@ -406,13 +410,9 @@ class Project(models.Model):
                     downpayment_amount_invoiced += untaxed_amount_invoiced * conversion_rates[currency.id]
                     downpayment_sol_ids += sol_ids
                 else:
-                    sols_total_amounts = sols_per_product.setdefault(product.id, (0, 0, []))
-                    sols_current_amounts = (
-                        untaxed_amount_to_invoice * conversion_rates[currency.id],
-                        untaxed_amount_invoiced * conversion_rates[currency.id],
-                        sol_ids,
-                    )
-                    sols_per_product[product.id] = tuple(reduce(lambda x, y: x + y, pair) for pair in zip(sols_total_amounts, sols_current_amounts))
+                    sols_per_product[product.id][0] += convert_company.currency_id.round(untaxed_amount_to_invoice * conversion_rates[currency.id])
+                    sols_per_product[product.id][1] += convert_company.currency_id.round(untaxed_amount_invoiced * conversion_rates[currency.id])
+                    sols_per_product[product.id][2] += sol_ids
             if downpayment_amount_invoiced:
                 downpayments_data = {
                     'id': 'downpayments',
@@ -521,10 +521,9 @@ class Project(models.Model):
         self._cr.execute(query_string, query_param)
         invoices_move_line_read = self._cr.dictfetchall()
         if invoices_move_line_read:
-
-            # Get conversion rate from currencies to currency of the project
+            # Get conversion rate from currencies to currency of the current company
             currency_ids = {iml['currency_id'] for iml in invoices_move_line_read + [{'currency_id': self.currency_id.id}]}
-            rates = self.env['res.currency'].browse(list(currency_ids))._get_rates(self.company_id, date.today())
+            rates = self.env['res.currency'].browse(list(currency_ids))._get_rates(self.company_id or self.env.company, fields.Date.context_today(self))
             conversion_rates = {cid: rates[self.currency_id.id] / rate_from for cid, rate_from in rates.items()}
 
             move_ids = set()
@@ -602,33 +601,36 @@ class Project(models.Model):
     def _get_stat_buttons(self):
         buttons = super(Project, self)._get_stat_buttons()
         if self.user_has_groups('sales_team.group_sale_salesman_all_leads'):
+            self_sudo = self.sudo()
             buttons.append({
                 'icon': 'dollar',
                 'text': _lt('Sales Orders'),
-                'number': self.sale_order_count,
+                'number': self_sudo.sale_order_count,
                 'action_type': 'object',
                 'action': 'action_view_sos',
-                'show': self.sale_order_count > 0,
+                'show': self_sudo.sale_order_count > 0,
                 'sequence': 27,
             })
         if self.user_has_groups('account.group_account_readonly'):
+            self_sudo = self.sudo()
             buttons.append({
                 'icon': 'pencil-square-o',
                 'text': _lt('Invoices'),
-                'number': self.invoice_count,
+                'number': self_sudo.invoice_count,
                 'action_type': 'object',
                 'action': 'action_open_project_invoices',
-                'show': bool(self.analytic_account_id) and self.invoice_count > 0,
+                'show': bool(self.analytic_account_id) and self_sudo.invoice_count > 0,
                 'sequence': 30,
             })
         if self.user_has_groups('account.group_account_readonly'):
+            self_sudo = self.sudo()
             buttons.append({
                 'icon': 'pencil-square-o',
                 'text': _lt('Vendor Bills'),
-                'number': self.vendor_bill_count,
+                'number': self_sudo.vendor_bill_count,
                 'action_type': 'object',
                 'action': 'action_open_project_vendor_bills',
-                'show': self.vendor_bill_count > 0,
+                'show': self_sudo.vendor_bill_count > 0,
                 'sequence': 38,
             })
         return buttons
@@ -701,10 +703,9 @@ class ProjectTask(models.Model):
         copy=True, tracking=True, index='btree_not_null', recursive=True,
         compute='_compute_sale_line', store=True, readonly=False,
         domain="""[
-            ('company_id', '=', company_id),
             '|', ('order_partner_id', 'child_of', partner_id if partner_id else []),
                  ('order_partner_id', '=?', partner_id),
-            ('is_service', '=', True), ('is_expense', '=', False), ('state', '=', 'sale')
+            ('is_service', '=', True), ('is_expense', '=', False), ('state', '=', 'sale'),
         ]""",
         help="Sales Order Item to which the time spent on this task will be added in order to be invoiced to your customer.\n"
              "By default the sales order item set on the project will be selected. In the absence of one, the last prepaid sales order item that has time remaining will be used.\n"

--- a/addons/sale_project/models/sale_order_line.py
+++ b/addons/sale_project/models/sale_order_line.py
@@ -80,7 +80,7 @@ class SaleOrderLine(models.Model):
         if 'product_uom_qty' in values and not self.env.context.get('no_update_planned_hours', False):
             for line in self:
                 if line.task_id and line.product_id.type == 'service':
-                    planned_hours = line._convert_qty_company_hours(line.task_id.company_id)
+                    planned_hours = line._convert_qty_company_hours(line.task_id.company_id or self.env.user.company_id)
                     line.task_id.write({'planned_hours': planned_hours})
         return result
 
@@ -95,11 +95,11 @@ class SaleOrderLine(models.Model):
         """Generate project values"""
         account = self.order_id.analytic_account_id
         if not account:
-            service_products = self.order_id.order_line.product_id.filtered(lambda p: p.type == 'service' and p.default_code)
+            service_products = self.order_id.order_line.product_id.filtered(
+                lambda p: p.type == 'service' and p.default_code)
             default_code = service_products.default_code if len(service_products) == 1 else None
             self.order_id._create_analytic_account(prefix=default_code)
             account = self.order_id.analytic_account_id
-
         # create the project or duplicate one
         return {
             'name': '%s - %s' % (self.order_id.client_order_ref, self.order_id.name) if self.order_id.client_order_ref else self.order_id.name,
