PR: https://github.com/odoo/odoo/pull/70859

From: b296e076d465c9d1d5c04255584f51174aa5a967
From: Munaf Khan
Date: 2021-11-29 19:01:43

Structural Changes: 7
Total Changes: 69

[IMP] mass_mailing: enable audience segmentation

Right now, in our mass mailing, marketing users refine the audience they are
going to reach with our beautiful domain selector/editor. The problem here
is that the criteria that 'filters' audience can be very common and might be
used in many mailings.

Such filters have to be re-created manually each time they are needed unless
one duplicates a sent mailing. Another possible workaround is to access this
form view while in debug mode so that one can copy and paste those domain
expressions. Unfortunately, none of those solutions are either ideal or
convenient. Especially during the onboarding where new users are not very
familiar with those notions yet.

This commit allow users to save filters on the mass mailings. That way
favorite filters can be re-used on the next mailing. For that, we added
a new model 'mailing.filter'. We do not use existing 'ir.filter' model as
its usage is not completely the same and as we do not want to bloat view
filters with filters created on the fly in marketing application. This new
model contains the following fields:

 - name (given by user while saving the filter)
 - mailing_domain
 - mailing_model_id (m2o for the recipient model)
 - mailing_model_name (technical name of recipient model)

Users can create the filters by setting domain and then hitting hollow star
icon next to 'Filter' m2o and saving it with the name they want. Same way
to delete the saved filter, user simply have to click the filled star icon
when filter is already set. This is done through a new widget that adds its
own behavior on top of m2o widget.

The saved filters can be also managed with a new menu named 'Favorite Filters'
under 'Configuration' menu of Email marketing.

Task-2092853

closes odoo/odoo#70859

Related: odoo/enterprise#21049
Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/mass_mailing/models/__init__.py
+++ b/addons/mass_mailing/models/__init__.py
@@ -7,6 +7,7 @@ from . import mailing_contact
 from . import mailing_list
 from . import mailing_trace
 from . import mailing
+from . import mailing_filter
 from . import mail_mail
 from . import mail_render_mixin
 from . import mail_thread

--- a/addons/mass_mailing/models/mailing.py
+++ b/addons/mass_mailing/models/mailing.py
@@ -125,6 +125,11 @@ class MassMailing(models.Model):
     mailing_domain = fields.Char(
         string='Domain', compute='_compute_mailing_domain',
         readonly=False, store=True)
+    mailing_filter_id = fields.Many2one(
+        'mailing.filter', string='Favorite Filter',
+        domain="[('mailing_model_name', '=', mailing_model_name)]",
+        compute='_compute_mailing_filter_id', readonly=False, store=True)
+    mailing_filter_domain = fields.Char('Favorite filter domain', related='mailing_filter_id.mailing_domain')
     mail_server_available = fields.Boolean(
         compute='_compute_mail_server_available',
         help="Technical field used to know if the user has activated the outgoing mail server option in the settings")
@@ -178,6 +183,15 @@ class MassMailing(models.Model):
         'The A/B Testing Percentage needs to be between 0 and 100%'
     )]
 
+    @api.constrains('mailing_model_id', 'mailing_filter_id')
+    def _check_mailing_filter_model(self):
+        """Check that if the favorite filter is set, it must contain the same recipient model as mailing"""
+        for mailing in self:
+            if mailing.mailing_filter_id and mailing.mailing_model_id != mailing.mailing_filter_id.mailing_model_id:
+                raise ValidationError(
+                    _("The saved filter targets different recipients and is incompatible with this mailing.")
+                )
+
     @api.depends('mail_server_id')
     def _compute_email_from(self):
         user_email = self.env.user.email_formatted
@@ -288,11 +302,6 @@ class MassMailing(models.Model):
             if mailing.mailing_type == 'mail' and not mailing.medium_id:
                 mailing.medium_id = self.env.ref('utm.utm_medium_email').id
 
-    @api.depends('mailing_model_id')
-    def _compute_mailing_model_real(self):
-        for mailing in self:
-            mailing.mailing_model_real = (mailing.mailing_model_id.model != 'mailing.list') and mailing.mailing_model_id.model or 'mailing.contact'
-
     @api.depends('mailing_model_id')
     def _compute_reply_to_mode(self):
         """ For main models not really using chatter to gather answers (contacts
@@ -314,14 +323,26 @@ class MassMailing(models.Model):
             elif mailing.reply_to_mode == 'update':
                 mailing.reply_to = False
 
-    @api.depends('mailing_model_id', 'contact_list_ids', 'mailing_type')
+    @api.depends('mailing_model_id')
+    def _compute_mailing_model_real(self):
+        for mailing in self:
+            mailing.mailing_model_real = (mailing.mailing_model_id.model != 'mailing.list') and mailing.mailing_model_id.model or 'mailing.contact'
+
+    @api.depends('mailing_model_id', 'contact_list_ids', 'mailing_type', 'mailing_filter_id')
     def _compute_mailing_domain(self):
         for mailing in self:
             if not mailing.mailing_model_id:
                 mailing.mailing_domain = ''
+            elif mailing.mailing_filter_id:
+                mailing.mailing_domain = mailing.mailing_filter_id.mailing_domain
             else:
                 mailing.mailing_domain = repr(mailing._get_default_mailing_domain())
 
+    @api.depends('mailing_model_name')
+    def _compute_mailing_filter_id(self):
+        for mailing in self:
+            mailing.mailing_filter_id = False
+
     @api.depends('schedule_type')
     def _compute_schedule_date(self):
         for mailing in self:

--- a/None
+++ b/addons/mass_mailing/models/mailing_filter.py
@@ -0,0 +1,35 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from ast import literal_eval
+
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
+
+
+class MailingFilter(models.Model):
+    """ This model stores mass mailing or marketing campaign domain as filters
+    (quite similar to 'ir.filters' but dedicated to mailing apps). Frequently
+    used domains can be reused easily. """
+    _name = 'mailing.filter'
+    _description = 'Mailing Favorite Filters'
+    _order = 'create_date DESC'
+
+    # override create_uid field to display default value while creating filter from 'Configuration' menus
+    create_uid = fields.Many2one('res.users', 'Saved by', index=True, readonly=True, default=lambda self: self.env.user)
+    name = fields.Char(string='Filter Name', required=True)
+    mailing_domain = fields.Char(string='Filter Domain', required=True)
+    mailing_model_id = fields.Many2one('ir.model', string='Recipients Model', required=True, ondelete='cascade')
+    mailing_model_name = fields.Char(string='Recipients Model Name', related='mailing_model_id.model')
+
+    @api.constrains('mailing_domain', 'mailing_model_id')
+    def _check_mailing_domain(self):
+        """ Check that if the mailing domain is set, it is a valid one """
+        for mailing_filter in self:
+            if mailing_filter.mailing_domain != "[]":
+                try:
+                    self.env[mailing_filter.mailing_model_id.model].search_count(literal_eval(mailing_filter.mailing_domain))
+                except:
+                    raise ValidationError(
+                        _("The filter domain is not valid for this recipients.")
+                    )
