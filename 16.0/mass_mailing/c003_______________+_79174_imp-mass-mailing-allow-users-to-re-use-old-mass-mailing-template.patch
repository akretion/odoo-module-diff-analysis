PR: https://github.com/odoo/odoo/pull/79174

From: 5508ca04e12d1c6f1093921cba6bb9ccaebc9c60
From: std-odoo
Date: 2022-03-16 12:16:13

Structural Changes: 3
Total Changes: 72

[IMP] mass_mailing: allow users to re-use old mass mailing template

Purpose
=======
Allow users to re-use a design they made in a previous mailing.

Specifications
==============
Add a duplicate button when the mailing has been sent (so the users
can easily duplicate an existing mailing to re-use the template).

Allow the user to add a mailing to the favorites. When we open the web
editor for the first time, show the email bodies of the favorite
mailings. When the users click on them, load the HTML like we do for
the themes.

Task-2593231

Part-of: odoo/odoo#79174

================================= pseudo patch: =================================

--- a/addons/mass_mailing/models/mailing.py
+++ b/addons/mass_mailing/models/mailing.py
@@ -73,6 +73,9 @@ class MassMailing(models.Model):
              'Keep it empty if you prefer the first characters of your email content to appear instead.')
     email_from = fields.Char(string='Send From', required=True, store=True, readonly=False, compute='_compute_email_from',
                              default=lambda self: self.env.user.email_formatted)
+    favorite = fields.Boolean('Favorite', copy=False, tracking=True)
+    favorite_date = fields.Datetime('Favorite Date', help='When this mailing was added in the favorites',
+                                    store=True, copy=False, compute='_compute_favorite_date')
     sent_date = fields.Datetime(string='Sent Date', copy=False)
 
     schedule_type = fields.Selection([('now', 'Send now'), ('scheduled', 'Send on')], string='Schedule',
@@ -208,6 +211,12 @@ class MassMailing(models.Model):
             else:
                 mailing.email_from = mailing.email_from or user_email
 
+    @api.depends('favorite')
+    def _compute_favorite_date(self):
+        favorited = self.filtered('favorite')
+        (self - favorited).favorite_date = False
+        favorited.filtered(lambda mailing: not mailing.favorite_date).favorite_date = fields.Datetime.now()
+
     def _compute_total(self):
         for mass_mailing in self:
             total = self.env[mass_mailing.mailing_model_real].search_count(mass_mailing._parse_mailing_domain())
@@ -455,6 +464,42 @@ class MassMailing(models.Model):
     # ACTIONS
     # ------------------------------------------------------
 
+    def action_set_favorite(self):
+        """Add the current mailing in the favorites list."""
+        self.favorite = True
+
+        return {
+            'type': 'ir.actions.client',
+            'tag': 'display_notification',
+            'params': {
+                'message': _(
+                    'Design added to the %s Templates!',
+                    ', '.join(self.mapped('mailing_model_id.name')),
+                ),
+                'next': {'type': 'ir.actions.act_window_close'},
+                'sticky': False,
+                'type': 'info',
+            }
+        }
+
+    def action_remove_favorite(self):
+        """Remove the current mailing from the favorites list."""
+        self.favorite = False
+
+        return {
+            'type': 'ir.actions.client',
+            'tag': 'display_notification',
+            'params': {
+                'message': _(
+                    'Design removed from the %s Templates!',
+                    ', '.join(self.mapped('mailing_model_id.name')),
+                ),
+                'next': {'type': 'ir.actions.act_window_close'},
+                'sticky': False,
+                'type': 'info',
+            }
+        }
+
     def action_duplicate(self):
         self.ensure_one()
         mass_mailing_copy = self.copy()
@@ -1203,3 +1248,30 @@ class MassMailing(models.Model):
             return lxml.html.tostring(root, encoding='unicode')
 
         return body_html
+
+    @api.model
+    def action_fetch_favorites(self):
+        """Return all mailings set as favorite and skip mailings with empty body.
+
+        Return archived mailing templates as well, so the user can archive the templates
+        while keeping using it, without cluttering the Kanban view if they're a lot of
+        templates.
+        """
+        values_list = self.with_context(active_test=False).search_read(
+            domain=[('favorite', '=', True)],
+            fields=['id', 'subject', 'body_arch', 'user_id'],
+            order='favorite_date DESC',
+        )
+
+        values_list = [
+            values for values in values_list
+            if not tools.is_html_empty(values['body_arch'])
+        ]
+
+        # You see first the mailings without responsible, then your mailings and then the others
+        values_list.sort(
+            key=lambda values:
+            values['user_id'][0] != self.env.user.id if values['user_id'] else -1
+        )
+
+        return values_list
