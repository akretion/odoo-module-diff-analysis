PR: https://github.com/odoo/odoo/pull/

From: ddf2b21bdf38492ce075d4ae96bb9323c6ef59dd
From: Simon Lejeune
Date: 2017-07-14 15:08:22

Structural Changes: 6
Total Changes: 32

[REF] stock: adapt to rename of stock.pack.operation into stock.mode.line

================================= pseudo patch: =================================

--- a/addons/mrp/models/mrp_production.py
+++ b/addons/mrp/models/mrp_production.py
@@ -466,7 +466,7 @@ class MrpProduction(models.Model):
             if len(workorders) == len(bom.routing_id.operation_ids):
                 moves_raw |= self.move_raw_ids.filtered(lambda move: not move.operation_id)
             moves_finished = self.move_finished_ids.filtered(lambda move: move.operation_id == operation) #TODO: code does nothing, unless maybe by_products?
-            moves_raw.mapped('pack_operation_ids').write({'workorder_id': workorder.id})
+            moves_raw.mapped('move_line_ids').write({'workorder_id': workorder.id})
             (moves_finished + moves_raw).write({'workorder_id': workorder.id})
 
             workorder._generate_lot_ids()

--- a/addons/mrp/models/mrp_unbuild.py
+++ b/addons/mrp/models/mrp_unbuild.py
@@ -90,7 +90,7 @@ class MrpUnbuild(models.Model):
         consume_move = self._generate_consume_moves()[0]
         produce_moves = self._generate_produce_moves()
         if consume_move.has_tracking != 'none':
-            self.env['stock.pack.operation'].create({
+            self.env['stock.move.line'].create({
                 'move_id': consume_move.id,
                 'lot_id': self.lot_id.id,
                 'qty_done': consume_move.product_uom_qty,
@@ -106,7 +106,7 @@ class MrpUnbuild(models.Model):
         for produce_move in produce_moves:
             if produce_move.has_tracking != 'none':
                 original = original_quants.filtered(lambda quant: quant.product_id == produce_move.product_id)
-                self.env['stock.pack.operation'].create({
+                self.env['stock.move.line'].create({
                     'move_id': produce_move.id,
                     'lot_id': original.lot_id.id,
                     'qty_done': produce_move.product_uom_qty,

--- a/addons/mrp/models/mrp_workorder.py
+++ b/addons/mrp/models/mrp_workorder.py
@@ -102,11 +102,11 @@ class MrpWorkorder(models.Model):
     move_raw_ids = fields.One2many(
         'stock.move', 'workorder_id', 'Moves')
     move_line_ids = fields.One2many(
-        'stock.pack.operation', 'workorder_id', 'Moves to Track',
+        'stock.move.line', 'workorder_id', 'Moves to Track',
         domain=[('done_wo', '=', True)],
         help="Inventory moves for which you must scan a lot number at this work order")
     active_move_line_ids = fields.One2many(
-        'stock.pack.operation', 'workorder_id',
+        'stock.move.line', 'workorder_id',
         domain=[('done_wo', '=', False)])
     final_lot_id = fields.Many2one(
         'stock.production.lot', 'Current Lot', domain="[('product_id', '=', product_id)]",
@@ -199,7 +199,7 @@ class MrpWorkorder(models.Model):
                 qty_todo = new_qty - sum(move_lots.mapped('quantity'))
                 if float_compare(qty_todo, 0.0, precision_rounding=move.product_uom.rounding) > 0:
                     while float_compare(qty_todo, 0.0, precision_rounding=move.product_uom.rounding) > 0:
-                        self.active_move_line_ids += self.env['stock.pack.operation'].new({
+                        self.active_move_line_ids += self.env['stock.move.line'].new({
                             'move_id': move.id,
                             'product_id': move.product_id.id,
                             'lot_id': False,
@@ -236,7 +236,7 @@ class MrpWorkorder(models.Model):
     def _generate_lot_ids(self):
         """ Generate stock move lines """
         self.ensure_one()
-        MoveLine = self.env['stock.pack.operation']
+        MoveLine = self.env['stock.move.line']
         tracked_moves = self.move_raw_ids.filtered(
             lambda move: move.state not in ('done', 'cancel') and move.product_id.tracking != 'none' and move.product_id != self.production_id.product_id)
         for move in tracked_moves:
@@ -322,7 +322,7 @@ class MrpWorkorder(models.Model):
         if not self.next_work_order_id:
             production_move = self.production_id.move_finished_ids.filtered(lambda x: (x.product_id.id == self.production_id.product_id.id) and (x.state not in ('done', 'cancel')))
             if production_move.has_tracking != 'none':
-                move_line = production_move.pack_operation_ids.filtered(lambda x: x.lot_id.id == self.final_lot_id.id)
+                move_line = production_move.move_line_ids.filtered(lambda x: x.lot_id.id == self.final_lot_id.id)
                 if move_line:
                     move_line.product_qty += self.qty_producing
                 else:

--- a/addons/mrp/models/stock_move.py
+++ b/addons/mrp/models/stock_move.py
@@ -7,8 +7,8 @@ from odoo.tools import float_compare, float_round
 from odoo.addons import decimal_precision as dp
 
 
-class StockPackOperation(models.Model):
-    _inherit = 'stock.pack.operation'
+class StockMoveLine(models.Model):
+    _inherit = 'stock.move.line'
 
     workorder_id = fields.Many2one('mrp.workorder', 'Work Order')
     production_id = fields.Many2one('mrp.production', 'Production Order')
@@ -33,10 +33,10 @@ class StockPackOperation(models.Model):
     def write(self, vals):
         if 'lot_id' in vals:
             for movelot in self:
-                movelot.move_id.production_id.move_raw_ids.mapped('pack_operation_ids')\
+                movelot.move_id.production_id.move_raw_ids.mapped('move_line_ids')\
                     .filtered(lambda r: r.done_wo and not r.done_move and r.lot_produced_id == movelot.lot_id)\
                     .write({'lot_produced_id': vals['lot_id']})
-        return super(StockPackOperation, self).write(vals)
+        return super(StockMoveLine, self).write(vals)
 
 
 class StockMove(models.Model):
@@ -55,7 +55,7 @@ class StockMove(models.Model):
     workorder_id = fields.Many2one(
         'mrp.workorder', 'Work Order To Consume')
     # Quantities to process, in normalized UoMs
-    active_move_line_ids = fields.One2many('stock.pack.operation', 'move_id', domain=[('done_wo', '=', True)], string='Lots')
+    active_move_line_ids = fields.One2many('stock.move.line', 'move_id', domain=[('done_wo', '=', True)], string='Lots')
     bom_line_id = fields.Many2one('mrp.bom.line', 'BoM Line')
     unit_factor = fields.Float('Unit Factor')
     is_done = fields.Boolean(
@@ -80,8 +80,8 @@ class StockMove(models.Model):
     def action_assign(self):
         res = super(StockMove, self).action_assign()
         for move in self.filtered(lambda x: x.production_id or x.raw_material_production_id):
-            if move.pack_operation_ids:
-                move.pack_operation_ids.write({'production_id': move.raw_material_production_id.id, 
+            if move.move_line_ids:
+                move.move_line_ids.write({'production_id': move.raw_material_production_id.id,
                                                'workorder_id': move.workorder_id.id,})
         return res
 
@@ -99,7 +99,7 @@ class StockMove(models.Model):
         view = self.env.ref('mrp.view_stock_move_lots')
         serial = (self.has_tracking == 'serial')
         only_create = False  # Check operation type in theory
-        show_reserved = any([x for x in self.pack_operation_ids if x.product_qty > 0.0])
+        show_reserved = any([x for x in self.move_line_ids if x.product_qty > 0.0])
         ctx.update({
             'serial': serial,
             'only_create': only_create,
