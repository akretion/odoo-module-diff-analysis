PR: https://github.com/odoo/odoo/pull/

From: d9fa702d5e6183bfe57c3de9cab869dc3fa79718
From: Mahendra Barad
Date: 2015-01-29 16:39:41

Breaking data model changes score: 1, change matches:
-    seats_max = fields.Integer('Maximum Available Seats', help="You can for each event define a maximum registration level. If you have too much registrations you are not able to confirm your event. (put 0 to ignore this rule )")

Total Changes: 27

[IMP] event and event_* modules: onboarding improvements

event:
* added tip
* default subscription/reminder/thanks templates for registrations are now using
the reply_to defined on the event
* fixed check of available seats: use seats_availability field, unlimited events
should never trigger the constraint
* added a sequence on scheduled emails on events
* config: wording improvements
* various improvements in event, registration, event_mail and event_report views

event_sale:
* removed override of seats_max: should not depend on available seats in
tickets. Indeed you may have less available places than the sum of seats for
each ticket type, for example if you have 0-10 VIP and 0-20 Standard tickets
for a 20-seats event.
* removed a duplicated view override
* added a seats_availability field on tickets, same meaning as on event.
* improved event form view: registration tab is now replaced by the tickets tab
when tickets are used

website_event:
* better management of sold-out event in the front-end, when doing registrations

website_event_sale:
* removed register link on the event kanban view. There is no need to to from
the back-end to the front-end from the kanban view. The published button on the
event form view already allows to go to the front-end view on the event
* better management of sold-out event in the front-end, when doing registrations
* fixed a template that was in customize and should not

website_event_track:
* wording improvements
* small improvements in the front-end of tracks

================================= pseudo patch: =================================

--- a/addons/event_sale/models/event.py
+++ b/addons/event_sale/models/event.py
@@ -12,11 +12,6 @@ class event_event(models.Model):
     event_ticket_ids = fields.One2many(
         'event.event.ticket', 'event_id', string='Event Ticket',
         default=lambda rec: rec._default_tickets(), copy=True)
-    seats_max = fields.Integer(
-        string='Maximum Available Seats',
-        help="The maximum registration level is equal to the sum of the maximum registration of event ticket. " +
-             "If you have too much registrations you are not able to confirm your event. (0 to ignore this rule )",
-        store=True, readonly=True, compute='_compute_seats_max')
 
     badge_back = fields.Html('Badge Back', translate=True, states={'done': [('readonly', True)]})
     badge_innerleft = fields.Html('Badge Innner Left', translate=True, states={'done': [('readonly', True)]})
@@ -34,11 +29,6 @@ class event_event(models.Model):
         except ValueError:
             return self.env['event.event.ticket']
 
-    @api.one
-    @api.depends('event_ticket_ids.seats_max')
-    def _compute_seats_max(self):
-        self.seats_max = sum(ticket.seats_max for ticket in self.event_ticket_ids)
-
 
 class event_ticket(models.Model):
     _name = 'event.event.ticket'
@@ -70,8 +60,11 @@ class event_ticket(models.Model):
         #        be considered in the timezone of the event, not the timezone of the user!
         #        Until we add a TZ on the event we'll use the context's current date, more accurate
         #        than using UTC all the time.
-        current_date = fields.Date.context_today(self.with_context({'tz': self.event_id.date_tz}))
-        self.is_expired = self.deadline < current_date
+        if self.deadline:
+            current_date = fields.Date.context_today(self.with_context({'tz': self.event_id.date_tz}))
+            self.is_expired = self.deadline < current_date
+        else:
+            self.is_expired = False
 
     # FIXME non-stored fields wont ends up in _columns (and thus _all_columns), which forbid them
     #       to be used in qweb views. Waiting a fix, we create an old function field directly.
@@ -99,7 +92,12 @@ class event_ticket(models.Model):
     }
 
     # seats fields
-    seats_max = fields.Integer('Maximum Available Seats', help="You can for each event define a maximum registration level. If you have too much registrations you are not able to confirm your event. (put 0 to ignore this rule )")
+    seats_availability = fields.Selection(
+        [('limited', 'Limited'), ('unlimited', 'Unlimited')],
+        'Available Seat', required=True, store=True, compute='_compute_seats', default="limited")
+    seats_max = fields.Integer('Maximum Available Seats',
+                               help="Define the number of available tickets. If you have too much registrations you will"
+                                    "not BE able to sell tickets anymore. Set 0 to ignore this rule set as unlimited.")
     seats_reserved = fields.Integer(string='Reserved Seats', compute='_compute_seats', store=True)
     seats_available = fields.Integer(string='Available Seats', compute='_compute_seats', store=True)
     seats_unconfirmed = fields.Integer(string='Unconfirmed Seat Reservations', compute='_compute_seats', store=True)
@@ -109,8 +107,9 @@ class event_ticket(models.Model):
     @api.depends('seats_max', 'registration_ids.state')
     def _compute_seats(self):
         """ Determine reserved, available, reserved but unconfirmed and used seats. """
-        # initialize fields to 0
+        # initialize fields to 0 + compute seats availability
         for ticket in self:
+            ticket.seats_availability = 'unlimited' if ticket.seats_max == 0 else 'limited'
             ticket.seats_unconfirmed = ticket.seats_reserved = ticket.seats_used = ticket.seats_available = 0
         # aggregate registrations by ticket and by state
         if self.ids:
