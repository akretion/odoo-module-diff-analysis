PR: https://github.com/odoo/odoo/pull/70612

From: 9a5b2e2549b1029bddddbadf645d1b04f1718a70
From: Yannick Tivisse
Date: 2021-06-04 08:47:45

Structural Changes: 56
Total Changes: 655

[MOV] fleet: Split model files according to coding guidelines

closes odoo/odoo#70612

Related: odoo/upgrade#2493
Related: odoo/enterprise#18250
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/fleet/models/__init__.py
+++ b/addons/fleet/models/__init__.py
@@ -1,8 +1,16 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from . import fleet_service_type
 from . import fleet_vehicle
-from . import fleet_vehicle_cost
+from . import fleet_vehicle_assignation_log
+from . import fleet_vehicle_log_contract
+from . import fleet_vehicle_log_services
 from . import fleet_vehicle_model
+from . import fleet_vehicle_model_brand
+from . import fleet_vehicle_model_category
+from . import fleet_vehicle_odometer
+from . import fleet_vehicle_state
+from . import fleet_vehicle_tag
 from . import res_config_settings
 from . import res_partner

--- a/None
+++ b/addons/fleet/models/fleet_service_type.py
@@ -0,0 +1,15 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class FleetServiceType(models.Model):
+    _name = 'fleet.service.type'
+    _description = 'Fleet Service Type'
+
+    name = fields.Char(required=True, translate=True)
+    category = fields.Selection([
+        ('contract', 'Contract'),
+        ('service', 'Service')
+        ], 'Category', required=True, help='Choose whether the service refer to contracts, vehicle services or both')

--- a/addons/fleet/models/fleet_vehicle.py
+++ b/addons/fleet/models/fleet_vehicle.py
@@ -349,73 +349,3 @@ class FleetVehicle(models.Model):
             'domain': [('vehicle_id', '=', self.id)],
             'context': {'default_driver_id': self.driver_id.id, 'default_vehicle_id': self.id}
         }
-
-class FleetVehicleOdometer(models.Model):
-    _name = 'fleet.vehicle.odometer'
-    _description = 'Odometer log for a vehicle'
-    _order = 'date desc'
-
-    name = fields.Char(compute='_compute_vehicle_log_name', store=True)
-    date = fields.Date(default=fields.Date.context_today)
-    value = fields.Float('Odometer Value', group_operator="max")
-    vehicle_id = fields.Many2one('fleet.vehicle', 'Vehicle', required=True)
-    unit = fields.Selection(related='vehicle_id.odometer_unit', string="Unit", readonly=True)
-    driver_id = fields.Many2one(related="vehicle_id.driver_id", string="Driver", readonly=False)
-
-    @api.depends('vehicle_id', 'date')
-    def _compute_vehicle_log_name(self):
-        for record in self:
-            name = record.vehicle_id.name
-            if not name:
-                name = str(record.date)
-            elif record.date:
-                name += ' / ' + str(record.date)
-            record.name = name
-
-    @api.onchange('vehicle_id')
-    def _onchange_vehicle(self):
-        if self.vehicle_id:
-            self.unit = self.vehicle_id.odometer_unit
-
-
-class FleetVehicleState(models.Model):
-    _name = 'fleet.vehicle.state'
-    _order = 'sequence asc'
-    _description = 'Vehicle Status'
-
-    name = fields.Char(required=True, translate=True)
-    sequence = fields.Integer(help="Used to order the note stages")
-
-    _sql_constraints = [('fleet_state_name_unique', 'unique(name)', 'State name already exists')]
-
-
-class FleetVehicleTag(models.Model):
-    _name = 'fleet.vehicle.tag'
-    _description = 'Vehicle Tag'
-
-    name = fields.Char('Tag Name', required=True, translate=True)
-    color = fields.Integer('Color Index')
-
-    _sql_constraints = [('name_uniq', 'unique (name)', "Tag name already exists !")]
-
-
-class FleetServiceType(models.Model):
-    _name = 'fleet.service.type'
-    _description = 'Fleet Service Type'
-
-    name = fields.Char(required=True, translate=True)
-    category = fields.Selection([
-        ('contract', 'Contract'),
-        ('service', 'Service')
-        ], 'Category', required=True, help='Choose whether the service refer to contracts, vehicle services or both')
-
-
-class FleetVehicleAssignationLog(models.Model):
-    _name = "fleet.vehicle.assignation.log"
-    _description = "Drivers history on a vehicle"
-    _order = "create_date desc, date_start desc"
-
-    vehicle_id = fields.Many2one('fleet.vehicle', string="Vehicle", required=True)
-    driver_id = fields.Many2one('res.partner', string="Driver", required=True)
-    date_start = fields.Date(string="Start Date")
-    date_end = fields.Date(string="End Date")

--- a/None
+++ b/addons/fleet/models/fleet_vehicle_assignation_log.py
@@ -0,0 +1,15 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class FleetVehicleAssignationLog(models.Model):
+    _name = "fleet.vehicle.assignation.log"
+    _description = "Drivers history on a vehicle"
+    _order = "create_date desc, date_start desc"
+
+    vehicle_id = fields.Many2one('fleet.vehicle', string="Vehicle", required=True)
+    driver_id = fields.Many2one('res.partner', string="Driver", required=True)
+    date_start = fields.Date(string="Start Date")
+    date_end = fields.Date(string="End Date")

--- a/addons/fleet/models/fleet_vehicle_cost.py
+++ b/addons/fleet/models/fleet_vehicle_log_contract.py
@@ -1,11 +1,11 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models, _
-from odoo.exceptions import UserError
-
 from dateutil.relativedelta import relativedelta
 
+from odoo import api, fields, models
+
+
 class FleetVehicleLogContract(models.Model):
     _inherit = ['mail.thread', 'mail.activity.mixin']
     _name = 'fleet.vehicle.log.contract'
@@ -26,20 +26,22 @@ class FleetVehicleLogContract(models.Model):
     name = fields.Char(string='Name', compute='_compute_contract_name', store=True)
     active = fields.Boolean(default=True)
     user_id = fields.Many2one('res.users', 'Responsible', default=lambda self: self.env.user, index=True)
-    start_date = fields.Date('Contract Start Date', default=fields.Date.context_today,
+    start_date = fields.Date(
+        'Contract Start Date', default=fields.Date.context_today,
         help='Date when the coverage of the contract begins')
-    expiration_date = fields.Date('Contract Expiration Date', default=lambda self:
+    expiration_date = fields.Date(
+        'Contract Expiration Date', default=lambda self:
         self.compute_next_year_date(fields.Date.context_today(self)),
         help='Date when the coverage of the contract expirates (by default, one year after begin date)')
     days_left = fields.Integer(compute='_compute_days_left', string='Warning Date')
     insurer_id = fields.Many2one('res.partner', 'Vendor')
     purchaser_id = fields.Many2one(related='vehicle_id.driver_id', string='Current Driver')
     ins_ref = fields.Char('Reference', size=64, copy=False)
-    state = fields.Selection([
-        ('futur', 'Incoming'),
-        ('open', 'In Progress'),
-        ('expired', 'Expired'),
-        ('closed', 'Closed')
+    state = fields.Selection(
+        [('futur', 'Incoming'),
+         ('open', 'In Progress'),
+         ('expired', 'Expired'),
+         ('closed', 'Closed')
         ], 'Status', default='open', readonly=True,
         help='Choose whether the contract is still valid or not',
         tracking=True,
@@ -75,7 +77,7 @@ class FleetVehicleLogContract(models.Model):
                 today = fields.Date.from_string(fields.Date.today())
                 renew_date = fields.Date.from_string(record.expiration_date)
                 diff_time = (renew_date - today).days
-                record.days_left = diff_time > 0 and diff_time or 0
+                record.days_left = diff_time if diff_time > 0 else 0
             else:
                 record.days_left = -1
 
@@ -123,70 +125,3 @@ class FleetVehicleLogContract(models.Model):
 
     def run_scheduler(self):
         self.scheduler_manage_contract_expiration()
-
-class FleetVehicleLogServices(models.Model):
-    _name = 'fleet.vehicle.log.services'
-    _inherit = ['mail.thread', 'mail.activity.mixin']
-    _rec_name = 'service_type_id'
-    _description = 'Services for vehicles'
-
-    active = fields.Boolean(default=True)
-    vehicle_id = fields.Many2one('fleet.vehicle', 'Vehicle', required=True, help='Vehicle concerned by this log')
-    amount = fields.Monetary('Cost')
-    description = fields.Char('Description')
-    odometer_id = fields.Many2one('fleet.vehicle.odometer', 'Odometer', help='Odometer measure of the vehicle at the moment of this log')
-    odometer = fields.Float(compute="_get_odometer", inverse='_set_odometer', string='Odometer Value',
-        help='Odometer measure of the vehicle at the moment of this log')
-    odometer_unit = fields.Selection(related='vehicle_id.odometer_unit', string="Unit", readonly=True)
-    date = fields.Date(help='Date when the cost has been executed', default=fields.Date.context_today)
-    company_id = fields.Many2one('res.company', 'Company', default=lambda self: self.env.company)
-    currency_id = fields.Many2one('res.currency', related='company_id.currency_id')
-    purchaser_id = fields.Many2one('res.partner', string="Driver", compute='_compute_purchaser_id', readonly=False, store=True)
-    inv_ref = fields.Char('Vendor Reference')
-    vendor_id = fields.Many2one('res.partner', 'Vendor')
-    notes = fields.Text()
-    service_type_id = fields.Many2one(
-        'fleet.service.type', 'Service Type', required=True,
-        default=lambda self: self.env.ref('fleet.type_service_service_8', raise_if_not_found=False),
-    )
-    state = fields.Selection([
-        ('new', 'New'),
-        ('running', 'Running'),
-        ('done', 'Done'),
-        ('cancelled', 'Cancelled'),
-    ], default='new', string='Stage', group_expand='_expand_states')
-
-    def _get_odometer(self):
-        self.odometer = 0
-        for record in self:
-            if record.odometer_id:
-                record.odometer = record.odometer_id.value
-
-    def _set_odometer(self):
-        for record in self:
-            if not record.odometer:
-                raise UserError(_('Emptying the odometer value of a vehicle is not allowed.'))
-            odometer = self.env['fleet.vehicle.odometer'].create({
-                'value': record.odometer,
-                'date': record.date or fields.Date.context_today(record),
-                'vehicle_id': record.vehicle_id.id
-            })
-            self.odometer_id = odometer
-
-    @api.model_create_multi
-    def create(self, vals_list):
-        for data in vals_list:
-            if 'odometer' in data and not data['odometer']:
-                # if received value for odometer is 0, then remove it from the
-                # data as it would result to the creation of a
-                # odometer log with 0, which is to be avoided
-                del data['odometer']
-        return super(FleetVehicleLogServices, self).create(vals_list)
-
-    @api.depends('vehicle_id')
-    def _compute_purchaser_id(self):
-        for service in self:
-            service.purchaser_id = service.vehicle_id.driver_id
-
-    def _expand_states(self, states, domain, order):
-        return [key for key, dummy in type(self).state.selection]

--- a/None
+++ b/addons/fleet/models/fleet_vehicle_log_services.py
@@ -0,0 +1,74 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import UserError
+
+
+class FleetVehicleLogServices(models.Model):
+    _name = 'fleet.vehicle.log.services'
+    _inherit = ['mail.thread', 'mail.activity.mixin']
+    _rec_name = 'service_type_id'
+    _description = 'Services for vehicles'
+
+    active = fields.Boolean(default=True)
+    vehicle_id = fields.Many2one('fleet.vehicle', 'Vehicle', required=True, help='Vehicle concerned by this log')
+    amount = fields.Monetary('Cost')
+    description = fields.Char('Description')
+    odometer_id = fields.Many2one('fleet.vehicle.odometer', 'Odometer', help='Odometer measure of the vehicle at the moment of this log')
+    odometer = fields.Float(
+        compute="_get_odometer", inverse='_set_odometer', string='Odometer Value',
+        help='Odometer measure of the vehicle at the moment of this log')
+    odometer_unit = fields.Selection(related='vehicle_id.odometer_unit', string="Unit", readonly=True)
+    date = fields.Date(help='Date when the cost has been executed', default=fields.Date.context_today)
+    company_id = fields.Many2one('res.company', 'Company', default=lambda self: self.env.company)
+    currency_id = fields.Many2one('res.currency', related='company_id.currency_id')
+    purchaser_id = fields.Many2one('res.partner', string="Driver", compute='_compute_purchaser_id', readonly=False, store=True)
+    inv_ref = fields.Char('Vendor Reference')
+    vendor_id = fields.Many2one('res.partner', 'Vendor')
+    notes = fields.Text()
+    service_type_id = fields.Many2one(
+        'fleet.service.type', 'Service Type', required=True,
+        default=lambda self: self.env.ref('fleet.type_service_service_8', raise_if_not_found=False),
+    )
+    state = fields.Selection([
+        ('new', 'New'),
+        ('running', 'Running'),
+        ('done', 'Done'),
+        ('cancelled', 'Cancelled'),
+    ], default='new', string='Stage', group_expand='_expand_states')
+
+    def _get_odometer(self):
+        self.odometer = 0
+        for record in self:
+            if record.odometer_id:
+                record.odometer = record.odometer_id.value
+
+    def _set_odometer(self):
+        for record in self:
+            if not record.odometer:
+                raise UserError(_('Emptying the odometer value of a vehicle is not allowed.'))
+            odometer = self.env['fleet.vehicle.odometer'].create({
+                'value': record.odometer,
+                'date': record.date or fields.Date.context_today(record),
+                'vehicle_id': record.vehicle_id.id
+            })
+            self.odometer_id = odometer
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        for data in vals_list:
+            if 'odometer' in data and not data['odometer']:
+                # if received value for odometer is 0, then remove it from the
+                # data as it would result to the creation of a
+                # odometer log with 0, which is to be avoided
+                del data['odometer']
+        return super(FleetVehicleLogServices, self).create(vals_list)
+
+    @api.depends('vehicle_id')
+    def _compute_purchaser_id(self):
+        for service in self:
+            service.purchaser_id = service.vehicle_id.driver_id
+
+    def _expand_states(self, states, domain, order):
+        return [key for key, dummy in type(self).state.selection]

--- a/addons/fleet/models/fleet_vehicle_model.py
+++ b/addons/fleet/models/fleet_vehicle_model.py
@@ -48,43 +48,3 @@ class FleetVehicleModel(models.Model):
         }
 
         return view
-
-class FleetVehicleModelBrand(models.Model):
-    _name = 'fleet.vehicle.model.brand'
-    _description = 'Brand of the vehicle'
-    _order = 'name asc'
-
-    name = fields.Char('Make', required=True)
-    image_128 = fields.Image("Logo", max_width=128, max_height=128)
-    model_count = fields.Integer(compute="_compute_model_count", string="", store=True)
-    model_ids = fields.One2many('fleet.vehicle.model', 'brand_id')
-
-    @api.depends('model_ids')
-    def _compute_model_count(self):
-        Model = self.env['fleet.vehicle.model']
-        for record in self:
-            record.model_count = Model.search_count([('brand_id', '=', record.id)])
-
-    def action_brand_model(self):
-        self.ensure_one()
-        view = {
-            'type': 'ir.actions.act_window',
-            'view_mode': 'tree,form',
-            'res_model': 'fleet.vehicle.model',
-            'name': 'Models',
-            'context': {'search_default_brand_id': self.id, 'default_brand_id': self.id}
-        }
-
-        return view
-
-class FleetVehicleModelCategory(models.Model):
-    _name = 'fleet.vehicle.model.category'
-    _description = 'Category of the model'
-    _order = 'sequence asc, id asc'
-
-    _sql_constraints = [
-        ('name_uniq', 'UNIQUE (name)', 'Category name must be unique')
-    ]
-
-    name = fields.Char(required=True)
-    sequence = fields.Integer()

--- a/None
+++ b/addons/fleet/models/fleet_vehicle_model_brand.py
@@ -0,0 +1,33 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class FleetVehicleModelBrand(models.Model):
+    _name = 'fleet.vehicle.model.brand'
+    _description = 'Brand of the vehicle'
+    _order = 'name asc'
+
+    name = fields.Char('Make', required=True)
+    image_128 = fields.Image("Logo", max_width=128, max_height=128)
+    model_count = fields.Integer(compute="_compute_model_count", string="", store=True)
+    model_ids = fields.One2many('fleet.vehicle.model', 'brand_id')
+
+    @api.depends('model_ids')
+    def _compute_model_count(self):
+        Model = self.env['fleet.vehicle.model']
+        for record in self:
+            record.model_count = Model.search_count([('brand_id', '=', record.id)])
+
+    def action_brand_model(self):
+        self.ensure_one()
+        view = {
+            'type': 'ir.actions.act_window',
+            'view_mode': 'tree,form',
+            'res_model': 'fleet.vehicle.model',
+            'name': 'Models',
+            'context': {'search_default_brand_id': self.id, 'default_brand_id': self.id}
+        }
+
+        return view

--- a/None
+++ b/addons/fleet/models/fleet_vehicle_model_category.py
@@ -0,0 +1,17 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class FleetVehicleModelCategory(models.Model):
+    _name = 'fleet.vehicle.model.category'
+    _description = 'Category of the model'
+    _order = 'sequence asc, id asc'
+
+    _sql_constraints = [
+        ('name_uniq', 'UNIQUE (name)', 'Category name must be unique')
+    ]
+
+    name = fields.Char(required=True)
+    sequence = fields.Integer()

--- a/None
+++ b/addons/fleet/models/fleet_vehicle_odometer.py
@@ -0,0 +1,32 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+
+class FleetVehicleOdometer(models.Model):
+    _name = 'fleet.vehicle.odometer'
+    _description = 'Odometer log for a vehicle'
+    _order = 'date desc'
+
+    name = fields.Char(compute='_compute_vehicle_log_name', store=True)
+    date = fields.Date(default=fields.Date.context_today)
+    value = fields.Float('Odometer Value', group_operator="max")
+    vehicle_id = fields.Many2one('fleet.vehicle', 'Vehicle', required=True)
+    unit = fields.Selection(related='vehicle_id.odometer_unit', string="Unit", readonly=True)
+    driver_id = fields.Many2one(related="vehicle_id.driver_id", string="Driver", readonly=False)
+
+    @api.depends('vehicle_id', 'date')
+    def _compute_vehicle_log_name(self):
+        for record in self:
+            name = record.vehicle_id.name
+            if not name:
+                name = str(record.date)
+            elif record.date:
+                name += ' / ' + str(record.date)
+            record.name = name
+
+    @api.onchange('vehicle_id')
+    def _onchange_vehicle(self):
+        if self.vehicle_id:
+            self.unit = self.vehicle_id.odometer_unit

--- a/None
+++ b/addons/fleet/models/fleet_vehicle_state.py
@@ -0,0 +1,15 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class FleetVehicleState(models.Model):
+    _name = 'fleet.vehicle.state'
+    _order = 'sequence asc'
+    _description = 'Vehicle Status'
+
+    name = fields.Char(required=True, translate=True)
+    sequence = fields.Integer(help="Used to order the note stages")
+
+    _sql_constraints = [('fleet_state_name_unique', 'unique(name)', 'State name already exists')]

--- a/None
+++ b/addons/fleet/models/fleet_vehicle_tag.py
@@ -0,0 +1,14 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class FleetVehicleTag(models.Model):
+    _name = 'fleet.vehicle.tag'
+    _description = 'Vehicle Tag'
+
+    name = fields.Char('Tag Name', required=True, translate=True)
+    color = fields.Integer('Color Index')
+
+    _sql_constraints = [('name_uniq', 'unique (name)', "Tag name already exists !")]

--- a/addons/fleet/models/res_config_settings.py
+++ b/addons/fleet/models/res_config_settings.py
@@ -8,4 +8,3 @@ class ResConfigSettings(models.TransientModel):
     _inherit = ['res.config.settings']
 
     delay_alert_contract = fields.Integer(string='Delay alert contract outdated', default=30, config_parameter='hr_fleet.delay_alert_contract')
-
