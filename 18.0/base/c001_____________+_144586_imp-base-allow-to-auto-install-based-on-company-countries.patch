PR: https://github.com/odoo/odoo/pull/144586

From: 11f73899ef60d56f9e4258d8d9732c8954b288fb
From: william-andre
Date: 2024-01-08 14:23:15

Structural Changes: 4
Total Changes: 68

[IMP] base: allow to auto_install based on company countries

* CASE 1
  - Create a company, set a country
  - Install a module (i.e. `account`or `hr_payroll`)
  - The localization will be installed automatically through the `auto_install` feature
* CASE 2
  - Install a module (i.e. `account`or `hr_payroll`)
  - Create a company, set a country
  - There is a button shown on the company form view telling the user that some l10n
    modules can be installed, and installing them when clicking on them.

In order to have modules working with this mechanism, they need to use
the `countries` key in the manifest, which can contain 2 letter ISO country codes.
The module can then be set as `auto_install`.
If:
* there are no country code for the module: there is no change of
  behavior with before
* there are country codes:
  - at least one company is set in one of the countries: the module can
    be installed
  - no company is in one of the countries: we never install
  automatically the module

task-3621374

Part-of: odoo/odoo#144586

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/ir_module.py
+++ b/odoo/addons/base/models/ir_module.py
@@ -282,6 +282,7 @@ class Module(models.Model):
     sequence = fields.Integer('Sequence', default=100)
     dependencies_id = fields.One2many('ir.module.module.dependency', 'module_id',
                                        string='Dependencies', readonly=True)
+    country_ids = fields.Many2many('res.country', 'module_country', 'module_id', 'country_id')
     exclusion_ids = fields.One2many('ir.module.module.exclusion', 'module_id',
                                     string='Exclusions', readonly=True)
     auto_install = fields.Boolean('Automatic Installation',
@@ -384,16 +385,20 @@ class Module(models.Model):
 
     @assert_log_admin_access
     def button_install(self):
+        company_countries = self.env['res.company'].search([]).country_id
         # domain to select auto-installable (but not yet installed) modules
         auto_domain = [('state', '=', 'uninstalled'), ('auto_install', '=', True)]
 
         # determine whether an auto-install module must be installed:
         #  - all its dependencies are installed or to be installed,
         #  - at least one dependency is 'to install'
+        #  - if the module is country specific, at least one company is in one of the countries
         install_states = frozenset(('installed', 'to install', 'to upgrade'))
         def must_install(module):
             states = {dep.state for dep in module.dependencies_id if dep.auto_install_required}
-            return states <= install_states and 'to install' in states
+            return states <= install_states and 'to install' in states and (
+                not module.country_ids or module.country_ids & company_countries
+            )
 
         modules = self
         while modules:
@@ -772,6 +777,7 @@ class Module(models.Model):
                 res[1] += 1
 
             mod._update_dependencies(terp.get('depends', []), terp.get('auto_install'))
+            mod._update_countries(terp.get('countries', []))
             mod._update_exclusions(terp.get('excludes', []))
             mod._update_category(terp.get('category', 'Uncategorized'))
 
@@ -790,6 +796,16 @@ class Module(models.Model):
         self.env['ir.module.module.dependency'].invalidate_model(['auto_install_required'])
         self.invalidate_recordset(['dependencies_id'])
 
+    def _update_countries(self, countries=()):
+        existing = set(self.country_ids.ids)
+        needed = set(self.env['res.country'].search([('code', 'in', [c.upper() for c in countries])]).ids)
+        for dep in (needed - existing):
+            self._cr.execute('INSERT INTO module_country (module_id, country_id) values (%s, %s)', (self.id, dep))
+        for dep in (existing - needed):
+            self._cr.execute('DELETE FROM module_country WHERE module_id = %s and country_id = %s', (self.id, dep))
+        self.invalidate_recordset(['country_ids'])
+        self.env['res.company'].invalidate_model(['uninstalled_l10n_module_ids'])
+
     def _update_exclusions(self, excludes=None):
         self.env['ir.module.module.exclusion'].flush_model()
         existing = set(excl.name for excl in self.exclusion_ids)

--- a/odoo/addons/base/models/res_company.py
+++ b/odoo/addons/base/models/res_company.py
@@ -73,6 +73,7 @@ class Company(models.Model):
     color = fields.Integer(compute='_compute_color', inverse='_inverse_color')
     layout_background = fields.Selection([('Blank', 'Blank'), ('Geometric', 'Geometric'), ('Custom', 'Custom')], default="Blank", required=True)
     layout_background_image = fields.Binary("Background Image")
+    uninstalled_l10n_module_ids = fields.Many2many('ir.module.module', compute='_compute_uninstalled_l10n_module_ids')
     _sql_constraints = [
         ('name_uniq', 'unique (name)', 'The company name must be unique!')
     ]
@@ -182,6 +183,46 @@ class Company(models.Model):
                 if self[fname] != self.parent_id[fname]:
                     self[fname] = self.parent_id[fname]
 
+    @api.depends('country_id')
+    def _compute_uninstalled_l10n_module_ids(self):
+        # This will only compute uninstalled modules with auto-install without recursion,
+        # the rest will eventually be handled by `button_install`
+        self.env['ir.module.module'].flush_model(['auto_install', 'country_ids', 'dependencies_id'])
+        self.env['ir.module.module.dependency'].flush_model()
+        self.env.cr.execute("""
+            SELECT country.id,
+                   ARRAY_AGG(module.id)
+              FROM ir_module_module module,
+                   res_country country
+             WHERE module.auto_install
+               AND state NOT IN %(install_states)s
+               AND NOT EXISTS (
+                       SELECT 1
+                         FROM ir_module_module_dependency d
+                         JOIN ir_module_module mdep ON (d.name = mdep.name)
+                        WHERE d.module_id = module.id
+                          AND d.auto_install_required
+                          AND mdep.state NOT IN %(install_states)s
+                   )
+               AND EXISTS (
+                       SELECT 1
+                         FROM module_country mc
+                        WHERE mc.module_id = module.id
+                          AND mc.country_id = country.id
+                   )
+               AND country.id = ANY(%(country_ids)s)
+          GROUP BY country.id
+        """, {
+            'country_ids': self.country_id.ids,
+            'install_states': ('installed', 'to install', 'to upgrade'),
+        })
+        mapping = dict(self.env.cr.fetchall())
+        for company in self:
+            company.uninstalled_l10n_module_ids = self.env['ir.module.module'].browse(mapping.get(company.country_id.id))
+
+    def install_l10n_modules(self):
+        return self.uninstalled_l10n_module_ids.button_immediate_install()
+
     @api.model
     def _get_view(self, view_id=None, view_type='form', **options):
         delegated_fnames = set(self._get_company_root_delegated_field_names())

--- a/odoo/addons/base/views/res_company_views.xml
+++ b/odoo/addons/base/views/res_company_views.xml
@@ -7,6 +7,15 @@
             <field name="arch" type="xml">
                 <form string="Company" duplicate="0">
                   <field name="all_child_ids" invisible="1"/>
+                  <field name="uninstalled_l10n_module_ids" invisible="1"/>
+
+                  <div class="alert alert-info" role="alert" invisible="not uninstalled_l10n_module_ids">
+                    Localization features are available for this country:
+                    <button name="install_l10n_modules"
+                            type="object"
+                            string="Install"
+                            class="btn btn-link p-0 align-baseline"/>
+                  </div>
                   <sheet>
                     <div class="oe_button_box" name="button_box">
                         <button class="oe_stat_button"
