PR: https://github.com/odoo/odoo/pull/

From: 5cb2943cca763f977ddeea15d7d8dd89e870110d
From: Nicolas Martinelli
Date: 2015-08-27 16:10:18

Breaking data model changes score: 3, change matches:
-    analytic_journal_id = fields.Many2one('account.analytic.journal', string='Analytic Journal', help="Journal for analytic entries")
-    journal_id = fields.Many2one('account.analytic.journal', string='Analytic Journal', required=True, ondelete='restrict', index=True)
-    uos_id = fields.Many2one('product.uom', string='Unit of Measure',

Total Changes: 175

[IMP] account*: adaptation due to the new Sale module

Major changes:
- No use of UoS anymore
- No analytic journal (journal_id) on account move lines

Reason: complete rewrite of the Sale module.

Responsible: fp, dbo, nim

================================= pseudo patch: =================================

--- a/addons/account/models/account.py
+++ b/addons/account/models/account.py
@@ -224,7 +224,6 @@ class AccountJournal(models.Model):
     company_id = fields.Many2one('res.company', string='Company', required=True, index=1, default=lambda self: self.env.user.company_id,
         help="Company related to this journal")
 
-    analytic_journal_id = fields.Many2one('account.analytic.journal', string='Analytic Journal', help="Journal for analytic entries")
     refund_sequence = fields.Boolean(string='Dedicated Refund Sequence', help="Check this box if you don't want to share the same sequence for invoices and refunds made from this journal", default=True)
 
     inbound_payment_method_ids = fields.Many2many('account.payment.method', 'account_journal_inbound_payment_method_rel', 'journal_id', 'inbound_payment_method',

--- a/addons/account/models/account_analytic_line.py
+++ b/addons/account/models/account_analytic_line.py
@@ -14,119 +14,24 @@ class AccountAnalyticLine(models.Model):
     general_account_id = fields.Many2one('account.account', string='Financial Account', ondelete='restrict',
                                          related='move_id.account_id', store=True, domain=[('deprecated', '=', False)])
     move_id = fields.Many2one('account.move.line', string='Move Line', ondelete='cascade', index=True)
-    journal_id = fields.Many2one('account.analytic.journal', string='Analytic Journal', required=True, ondelete='restrict', index=True)
     code = fields.Char(size=8)
     ref = fields.Char(string='Ref.')
     currency_id = fields.Many2one('res.currency', related='move_id.currency_id', string='Account Currency', store=True, help="The related account currency if not equal to the company one.", readonly=True)
     amount_currency = fields.Monetary(related='move_id.amount_currency', store=True, help="The amount expressed in the related account currency if not equal to the company one.", readonly=True)
     partner_id = fields.Many2one('res.partner', related='account_id.partner_id', string='Partner', store=True)
 
-    # Compute the cost based on the price type define into company
-    # property_valuation_price_type property
-    @api.v7
-    def on_change_unit_amount(self, cr, uid, id, prod_id, quantity, company_id,
-            unit=False, journal_id=False, context=None):
-        if context is None:
-            context = {}
-        if not journal_id:
-            j_ids = self.pool.get('account.analytic.journal').search(cr, uid, [('type', '=', 'purchase')])
-            journal_id = j_ids and j_ids[0] or False
-        if not journal_id:
-            return {}
-        product_obj = self.pool.get('product.product')
-        analytic_journal_obj = self.pool.get('account.analytic.journal')
-        product_price_type_obj = self.pool.get('product.price.type')
-        product_uom_obj = self.pool.get('product.uom')
-        j_id = analytic_journal_obj.browse(cr, uid, journal_id, context=context)
-        prod = product_obj.browse(cr, uid, prod_id, context=context)
-        result = 0.0
-        if prod_id:
-            unit_obj = False
-            if unit:
-                unit_obj = product_uom_obj.browse(cr, uid, unit, context=context)
-            if not unit_obj or prod.uom_id.category_id.id != unit_obj.category_id.id:
-                unit = prod.uom_id.id
-            if j_id.type == 'purchase':
-                if not unit_obj or prod.uom_po_id.category_id.id != unit_obj.category_id.id:
-                    unit = prod.uom_po_id.id
-        if j_id.type <> 'sale':
-            a = prod.property_account_expense_id.id
-            if not a:
-                a = prod.categ_id.property_account_expense_categ_id.id
-        else:
-            a = prod.property_account_income_id.id
-            if not a:
-                a = prod.categ_id.property_account_income_categ_id.id
-
-        flag = False
-        # Compute based on pricetype
-        product_price_type_ids = product_price_type_obj.search(cr, uid, [('field', '=', 'standard_price')], context=context)
-        pricetype = product_price_type_obj.browse(cr, uid, product_price_type_ids, context=context)[0]
-        if journal_id:
-            journal = analytic_journal_obj.browse(cr, uid, journal_id, context=context)
-            if journal.type == 'sale':
-                product_price_type_ids = product_price_type_obj.search(cr, uid, [('field', '=', 'list_price')], context=context)
-                if product_price_type_ids:
-                    pricetype = product_price_type_obj.browse(cr, uid, product_price_type_ids, context=context)[0]
-        # Take the company currency as the reference one
-        if pricetype.field == 'list_price':
-            flag = True
-        ctx = context.copy()
-        if unit:
-            # price_get() will respect a 'uom' in its context, in order
-            # to return a default price for those units
-            ctx['uom'] = unit
-        amount_unit = prod.price_get(pricetype.field, context=ctx)
-        if amount_unit:
-            amount_unit = amount_unit[prod.id]
-        else:
-            amount_unit = 0.0
-
-        amount = amount_unit * quantity or 0.0
-        cur_record = self.browse(cr, uid, id, context=context)
-        currency = cur_record.exists() and cur_record.currency_id or prod.company_id.currency_id
-        result = round(amount, currency.decimal_places)
-        if not flag:
-            result *= -1
-        return {'value': {
-            'amount': result,
-            'general_account_id': a,
-            'product_uom_id': unit
-            }
-        }
-
     @api.v8
     @api.onchange('product_id', 'product_uom_id')
     def on_change_unit_amount(self):
         product_price_type_obj = self.env['product.price.type']
-
-        journal_id = self.journal_id
-        if not journal_id:
-            journal_id = self.env['account.analytic.journal'].search([('type', '=', 'purchase')], limit=1)
-        if not journal_id or not self.product_id:
-            return {}
-
         result = 0.0
         unit = False
         if self.product_id:
             unit = self.product_uom_id.id
             if not self.product_uom_id or self.product_id.uom_id.category_id.id != self.product_uom_id.category_id.id:
                 unit = self.product_id.uom_id.id
-            if journal_id.type == 'purchase':
-                if not self.product_uom_id or self.product_id.uom_po_id.category_id.id != self.product_uom_id.category_id.id:
-                    unit = self.product_id.uom_po_id.id
-        if journal_id.type != 'sale':
-            account = self.product_id.property_account_expense_id.id or self.product_id.categ_id.property_account_expense_categ_id.id
-            if not account:
-                raise UserError(_('There is no expense account defined ' \
-                                'for this product: "%s" (id:%d).') % \
-                                (self.product_id.name, self.product_id.id,))
-        else:
-            account = self.product_id.property_account_income_id.id or self.product_id.categ_id.property_account_income_categ_id.id
-            if not account:
-                raise UserError(_('There is no income account defined ' \
-                                'for this product: "%s" (id:%d).') % \
-                                (self.product_id.name, self.product_id.id,))
+        account = self.product_id.property_account_income_id.id or self.product_id.categ_id.property_account_income_categ_id.id
+        if not account: account = False
 
         ctx = dict(self._context or {})
         if unit:
@@ -134,17 +39,13 @@ class AccountAnalyticLine(models.Model):
             # to return a default price for those units
             ctx['uom'] = unit
 
-        # Compute based on pricetype
-        amount_unit = 0.0
         pricetype = False
+        amount_unit = 0.0
         if self.product_id:
-            if journal_id.type == 'sale':
-                pricetype = product_price_type_obj.search([('field', '=', 'list_price')], limit=1)
-            else:
-                pricetype = product_price_type_obj.search([('field', '=', 'standard_price')], limit=1)
+            # Compute based on pricetype
+            pricetype = product_price_type_obj.search([('field', '=', 'list_price')], limit=1)
             amount_unit = self.product_id.with_context(ctx).price_get(pricetype.field)[self.product_id.id]
-
-        amount = amount_unit * self.unit_amount
+        amount = amount_unit * self.unit_amount or 0.0
         result = round(amount, self.currency_id.decimal_places)
         if pricetype and pricetype.field != 'list_price':
             result *= -1

--- a/addons/account/models/account_invoice.py
+++ b/addons/account/models/account_invoice.py
@@ -70,16 +70,6 @@ class AccountInvoice(models.Model):
         journal = self._default_journal()
         return journal.currency_id or journal.company_id.currency_id
 
-    @api.model
-    @api.returns('account.analytic.journal', lambda r: r.id)
-    def _get_journal_analytic(self, inv_type):
-        """ Return the analytic journal corresponding to the given invoice type. """
-        journal_type = TYPE2JOURNAL.get(inv_type, 'sale')
-        journal = self.env['account.analytic.journal'].search([('type', '=', journal_type)], limit=1)
-        if not journal:
-            raise UserError(_("You must define an analytic journal of type '%s'!") % (journal_type,))
-        return journal
-
     @api.model
     def _get_reference_type(self):
         return [('none', _('Free Reference'))]
@@ -604,7 +594,7 @@ class AccountInvoice(models.Model):
                 'price': line.price_subtotal,
                 'account_id': line.account_id.id,
                 'product_id': line.product_id.id,
-                'uos_id': line.uos_id.id,
+                'uom_id': line.uom_id.id,
                 'account_analytic_id': line.account_analytic_id.id,
                 'tax_ids': tax_ids,
                 'invoice_id': self.id,
@@ -777,7 +767,7 @@ class AccountInvoice(models.Model):
             'currency_id': line.get('currency_id', False),
             'quantity': line.get('quantity', 1.00),
             'product_id': line.get('product_id', False),
-            'product_uom_id': line.get('uos_id', False),
+            'product_uom_id': line.get('uom_id', False),
             'analytic_account_id': line.get('account_analytic_id', False),
             'invoice_id': line.get('invoice_id', False),
             'tax_ids': line.get('tax_ids', False),
@@ -983,8 +973,6 @@ class AccountInvoiceLine(models.Model):
     @api.multi
     def _get_analytic_line(self):
         ref = self.invoice_id.number
-        if not self.invoice_id.journal_id.analytic_journal_id:
-            raise UserError(_("No Analytic Journal! You have to define an analytic journal on the '%s' journal!") % (self.invoice_id.journal_id.name,))
         return {
             'name': self.name,
             'date': self.invoice_id.date_invoice,
@@ -992,9 +980,8 @@ class AccountInvoiceLine(models.Model):
             'unit_amount': self.quantity,
             'amount': self.price_subtotal_signed,
             'product_id': self.product_id.id,
-            'product_uom_id': self.uos_id.id,
+            'product_uom_id': self.uom_id.id,
             'general_account_id': self.account_id.id,
-            'journal_id': self.invoice_id.journal_id.analytic_journal_id.id,
             'ref': ref,
         }
 
@@ -1028,7 +1015,7 @@ class AccountInvoiceLine(models.Model):
         help="Gives the sequence of this line when displaying the invoice.")
     invoice_id = fields.Many2one('account.invoice', string='Invoice Reference',
         ondelete='cascade', index=True)
-    uos_id = fields.Many2one('product.uom', string='Unit of Measure',
+    uom_id = fields.Many2one('product.uom', string='Unit of Measure',
         ondelete='set null', index=True)
     product_id = fields.Many2one('product.product', string='Product',
         ondelete='restrict', index=True)
@@ -1109,7 +1096,7 @@ class AccountInvoiceLine(models.Model):
         if not self.product_id:
             if type not in ('in_invoice', 'in_refund'):
                 self.price_unit = 0.0
-            domain['uos_id'] = []
+            domain['uom_id'] = []
         else:
             if part.lang:
                 product = self.product_id.with_context(lang=part.lang)
@@ -1130,9 +1117,9 @@ class AccountInvoiceLine(models.Model):
                 if product.description_sale:
                     self.name += '\n' + product.description_sale
 
-            if not self.uos_id or product.uom_id.category_id.id != self.uos_id.category_id.id:
-                self.uos_id = product.uom_id.id
-            domain['uos_id'] = [('category_id', '=', product.uom_id.category_id.id)]
+            if not self.uom_id or product.uom_id.category_id.id != self.uom_id.category_id.id:
+                self.uom_id = product.uom_id.id
+            domain['uom_id'] = [('category_id', '=', product.uom_id.category_id.id)]
 
             if company and currency:
                 if company.currency_id != currency:
@@ -1140,9 +1127,9 @@ class AccountInvoiceLine(models.Model):
                         self.price_unit = product.standard_price
                     self.price_unit = self.price_unit * currency.with_context(dict(self._context or {}, date=self.date_invoice)).rate
 
-                if self.uos_id and self.uos_id.id != product.uom_id.id:
+                if self.uom_id and self.uom_id.id != product.uom_id.id:
                     self.price_unit = self.env['product.uom']._compute_price(
-                        product.uom_id.id, self.price_unit, self.uos_id.id)
+                        product.uom_id.id, self.price_unit, self.uom_id.id)
         return {'domain': domain}
 
     @api.onchange('account_id')
@@ -1155,20 +1142,20 @@ class AccountInvoiceLine(models.Model):
         else:
             self._set_taxes()
 
-    @api.onchange('uos_id')
-    def _onchange_uos_id(self):
+    @api.onchange('uom_id')
+    def _onchange_uom_id(self):
         warning = {}
         result = {}
         self._onchange_product_id()
-        if not self.uos_id:
+        if not self.uom_id:
             self.price_unit = 0.0
-        if self.product_id and self.uos_id:
-            if self.product_id.uom_id.category_id.id != self.uos_id.category_id.id:
+        if self.product_id and self.uom_id:
+            if self.product_id.uom_id.category_id.id != self.uom_id.category_id.id:
                 warning = {
                     'title': _('Warning!'),
                     'message': _('The selected unit of measure is not compatible with the unit of measure of the product.'),
                 }
-                self.uos_id = self.product_id.uom_id.id
+                self.uom_id = self.product_id.uom_id.id
         if warning:
             result['warning'] = warning
         return result

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -1064,8 +1064,6 @@ class AccountMoveLine(models.Model):
         """
         for obj_line in self:
             if obj_line.analytic_account_id:
-                if not obj_line.journal_id.analytic_journal_id:
-                    raise UserError(_("You have to define an analytic journal on the '%s' journal!") % (obj_line.journal_id.name, ))
                 if obj_line.analytic_line_ids:
                     obj_line.analytic_line_ids.unlink()
                 vals_line = obj_line._prepare_analytic_line()[0]
@@ -1085,7 +1083,6 @@ class AccountMoveLine(models.Model):
             'product_uom_id': self.product_uom_id and self.product_uom_id.id or False,
             'amount': (self.credit or 0.0) - (self.debit or 0.0),
             'general_account_id': self.account_id.id,
-            'journal_id': self.journal_id.analytic_journal_id.id,
             'ref': self.ref,
             'move_id': self.id,
             'user_id': self.invoice_id.user_id.id or self._uid,

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -135,20 +135,6 @@ class AccountChartTemplate(models.Model):
 
     @api.multi
     def _prepare_all_journals(self, acc_template_ref, company, journals_dict=None):
-        def _get_analytic_journal(journal_type):
-            # Get the analytic journal
-            data = False
-            try:
-                if journal['type'] == 'sale':
-                    data = self.env.ref('account.analytic_journal_sale')
-                elif journal['type'] == 'purchase':
-                    data = self.env.ref('account.exp')
-                elif journal['type'] == 'general':
-                    pass
-            except ValueError:
-                pass
-            return data and data.id or False
-
         def _get_default_account(journal_vals, type='debit'):
             # Get the default accounts
             default_account = False
@@ -178,7 +164,6 @@ class AccountChartTemplate(models.Model):
                 'name': journal['name'],
                 'code': journal['code'],
                 'company_id': company.id,
-                'analytic_journal_id': _get_analytic_journal(journal),
                 'default_credit_account_id': _get_default_account(journal, 'credit'),
                 'default_debit_account_id': _get_default_account(journal, 'debit'),
                 'refund_sequence': True,
