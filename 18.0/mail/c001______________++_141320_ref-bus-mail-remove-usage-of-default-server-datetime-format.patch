PR: https://github.com/odoo/odoo/pull/141320

From: 3571b8f6694f235e17111762a8cb6611bbb0f2dc
From: SÃ©bastien Theys
Date: 2023-11-07 13:04:08

Structural Changes: 4
Total Changes: 22

[REF] bus, mail, *: remove usage of `DEFAULT_SERVER_DATETIME_FORMAT`

* = im_livechat, hr_holidays, test_discuss_full, test_mail

`fields.Datetime` provides helpers to handle these.

- writing on field: it's automatically converted
- using in search domain: it's automatically converted
- various ways to get the current date/time: using `now()` method
- when converting to a string is necessary: using `to_string()` method
- unused imports: simply removed

closes odoo/odoo#141320

Related: odoo/enterprise#50310
Signed-off-by: Didier Debondt (did) <did@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/discuss/discuss_channel.py
+++ b/addons/mail/models/discuss/discuss_channel.py
@@ -12,7 +12,6 @@ from odoo.addons.base.models.avatar_mixin import get_hsl_from_seed
 from odoo.exceptions import UserError, ValidationError
 from odoo.osv import expression
 from odoo.tools import html_escape, get_lang
-from odoo.tools.misc import DEFAULT_SERVER_DATETIME_FORMAT
 
 _logger = logging.getLogger(__name__)
 
@@ -656,7 +655,7 @@ class Channel(models.Model):
         # Use SQL because by calling write method, write_date is going to be updated, but we don't want pin/unpin
         # a message changes the write_date
         self.env.cr.execute("UPDATE mail_message SET pinned_at=%s WHERE id=%s",
-                            (fields.datetime.now() if pinned else None, message_to_update.id))
+                            (fields.Datetime.now() if pinned else None, message_to_update.id))
         message_to_update.invalidate_recordset(['pinned_at'])
 
         self.env['bus.bus']._sendone(self, 'mail.record/insert', {
@@ -783,11 +782,11 @@ class Channel(models.Model):
                     info['message_unread_counter'] = member.message_unread_counter
                     info['is_minimized'] = member.is_minimized
                     info['custom_notifications'] = member.custom_notifications
-                    info['mute_until_dt'] = member.mute_until_dt.strftime(DEFAULT_SERVER_DATETIME_FORMAT) if member.mute_until_dt else False
+                    info['mute_until_dt'] = fields.Datetime.to_string(member.mute_until_dt)
                     info['seen_message_id'] = member.seen_message_id.id
                     info['custom_channel_name'] = member.custom_channel_name
                     info['is_pinned'] = member.is_pinned
-                    info['last_interest_dt'] = member.last_interest_dt.strftime(DEFAULT_SERVER_DATETIME_FORMAT)
+                    info['last_interest_dt'] = fields.Datetime.to_string(member.last_interest_dt)
                     if member.rtc_inviting_session_id:
                         info['rtc_inviting_session'] = {'id': member.rtc_inviting_session_id.id}
             # add members info

--- a/addons/mail/models/mail_thread.py
+++ b/addons/mail/models/mail_thread.py
@@ -1719,7 +1719,7 @@ class MailThread(models.AbstractModel):
                              'with message-id %r, assuming current date/time.',
                              message.get('Date'), message_id)
                 stored_date = datetime.datetime.now()
-            msg_dict['date'] = stored_date.strftime(tools.DEFAULT_SERVER_DATETIME_FORMAT)
+            msg_dict['date'] = fields.Datetime.to_string(stored_date)
 
         msg_dict.update(self._message_parse_extract_from_parent(self._get_parent_message(msg_dict)))
         msg_dict.update(self._message_parse_extract_bounce(message, msg_dict))

--- a/addons/mail/models/update.py
+++ b/addons/mail/models/update.py
@@ -5,15 +5,14 @@ import datetime
 import logging
 
 import requests
-import werkzeug.urls
 
 from ast import literal_eval
 
-from odoo import api, release, SUPERUSER_ID
+from odoo import api, fields, release, SUPERUSER_ID
 from odoo.exceptions import UserError
 from odoo.models import AbstractModel
 from odoo.tools.translate import _
-from odoo.tools import config, misc, ustr
+from odoo.tools import config, ustr
 
 _logger = logging.getLogger(__name__)
 
@@ -29,16 +28,14 @@ class PublisherWarrantyContract(AbstractModel):
 
         dbuuid = IrParamSudo.get_param('database.uuid')
         db_create_date = IrParamSudo.get_param('database.create_date')
-        limit_date = datetime.datetime.now()
-        limit_date = limit_date - datetime.timedelta(15)
-        limit_date_str = limit_date.strftime(misc.DEFAULT_SERVER_DATETIME_FORMAT)
+        limit_date = fields.Datetime.now() - datetime.timedelta(15)
         nbr_users = Users.search_count([('active', '=', True)])
-        nbr_active_users = Users.search_count([("login_date", ">=", limit_date_str), ('active', '=', True)])
+        nbr_active_users = Users.search_count([("login_date", ">=", limit_date), ('active', '=', True)])
         nbr_share_users = 0
         nbr_active_share_users = 0
         if "share" in Users._fields:
             nbr_share_users = Users.search_count([("share", "=", True), ('active', '=', True)])
-            nbr_active_share_users = Users.search_count([("share", "=", True), ("login_date", ">=", limit_date_str), ('active', '=', True)])
+            nbr_active_share_users = Users.search_count([("share", "=", True), ("login_date", ">=", limit_date), ('active', '=', True)])
         user = self.env.user
         domain = [('application', '=', True), ('state', 'in', ['installed', 'to upgrade', 'to remove'])]
         apps = self.env['ir.module.module'].sudo().search_read(domain, ['name'])
