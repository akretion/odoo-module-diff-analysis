PR: https://github.com/odoo/odoo/pull/128857

From: 669b9fcc2fb82bb410e2b36e8bfa638ffd66cc2c
From: vlst
Date: 2023-07-26 21:15:05

Structural Changes: 5
Total Changes: 39

[IMP] point_of_sale: add product combos

In this PR we introduce the ability to create product combos.

Now any product can be turned into a combo meal by defining
the different combo choices it contains.

In this PR, we add the backend logic and the backoffice views
needed for this feature. Afterwards, different modules will be
able to use the platform provided by this PR in order to integrate
`product combos` in their flows. Such modules are the `point_of_sale`
and `pos_self_order`.

closes odoo/odoo#128857

Task: 3430635
Signed-off-by: Joseph Caburnay (jcb) <jcb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/__init__.py
+++ b/addons/point_of_sale/models/__init__.py
@@ -13,6 +13,8 @@ from . import pos_category
 from . import pos_config
 from . import pos_order
 from . import pos_session
+from . import pos_combo
+from . import pos_combo_line
 from . import product
 from . import res_partner
 from . import res_company

--- a/None
+++ b/addons/point_of_sale/models/pos_combo.py
@@ -0,0 +1,25 @@
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
+
+class PosCombo(models.Model):
+    """
+    This model is used to allow the pos user to create menus.
+    This means that products can be grouped together and sold as a combo.
+    """
+    _name = "pos.combo"
+    _description = "Product combo choices"
+
+    name = fields.Char(string="Name", required=True)
+    combo_line_ids = fields.One2many("pos.combo.line", "combo_id", string="Products in Combo")
+    num_of_products = fields.Integer("No of Products", compute="_compute_num_of_products")
+
+    @api.depends("combo_line_ids")
+    def _compute_num_of_products(self):
+        # optimization trick to count the number of products in each combo
+        for rec, num_of_products in self.env["pos.combo.line"]._read_group([("combo_id", "in", self.ids)], groupby=["combo_id"], aggregates=["__count"]):
+            rec.num_of_products = num_of_products
+
+    @api.constrains("combo_line_ids")
+    def _check_combo_line_ids_is_not_null(self):
+        if any(not rec.combo_line_ids for rec in self):
+            raise ValidationError(_("Please add products in combo."))

--- a/None
+++ b/addons/point_of_sale/models/pos_combo_line.py
@@ -0,0 +1,11 @@
+from odoo import fields, models
+
+
+class PosComboLine(models.Model):
+    _name = "pos.combo.line"
+    _description = "Product Combo Items"
+
+    product_id = fields.Many2one("product.product", string="Product")
+    price = fields.Float("Price Extra", default=0.0)
+    lst_price = fields.Float("Original Price", related="product_id.lst_price")
+    combo_id = fields.Many2one("pos.combo")

--- a/addons/point_of_sale/models/product.py
+++ b/addons/point_of_sale/models/product.py
@@ -15,6 +15,7 @@ class ProductTemplate(models.Model):
     pos_categ_ids = fields.Many2many(
         'pos.category', string='Point of Sale Category',
         help="Category used in the Point of Sale.")
+    combo_ids = fields.Many2many('pos.combo', string='Combinations')
 
     @api.ondelete(at_uninstall=False)
     def _unlink_except_open_session(self):
