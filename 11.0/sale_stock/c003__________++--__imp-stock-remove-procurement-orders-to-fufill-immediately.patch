PR: https://github.com/odoo/odoo/pull/

From: 0e4f3bb95991261c04c08e72b28430acfabdecd1
From: Fabien Pinckaers
Date: 2017-09-08 15:08:05

Structural Changes: 12
Total Changes: 192

[IMP] stock: remove procurement orders to fufill immediately

This removes the procurement.order model. To fufill their needs SO, PO, MO and
stock moves now call the _run method of the relevant procurement.group.

This mecanism is now only used for stockable product, tasks now uses their own
independent mecanism.

The _run method will check all the applicable rules and create directly the
needed model to fufill the need.

The modules stock, purchase, mrp, extends the _run method to implement their
specific strategy relevant for the rule type they define.

If an exception happens the message will be logged as a mail messsage on the
source model, for example, if a sales order cannot be fufilled the salesperson
will now see directly the reason.

OLD commit messages:
[WIP] procurement: removing procurement.order in stock, sale, purchase, sale_stock. WIP
fixup! [WIP] procurement: removing procurement.order in stock, sale, purchase, sale_stock. WIP
[IMP] Basic tests
[FIX] test not necessary anymore
[FIX] remove unnecessary print statement
[FIX] unnecessary test + why passing warehouse worked before?
[IMP] purchase: one move by purchase order line
[FIX] purchase: correct inventory tests and pass move_dest_ids among procurements
[FIX] because of bad cherry-pick merge
[IMP] make mrp pass by adding move_dest_ids there too
[IMP] tests of sale_mrp, no need for cancelpropagation then
[IMP] better to consistently use recordsets also for one2many
[FIX] purchase_requisition
[FIX] Exceptions should trigger errors, which should be caught in the tests
[FIX] sale_mrp: remove usage of procurement.order and use sale order name instead of sol
[FIX] stock_dropshipping: add sale_line_id on purchase_line_id
[FIX] Remove pdb
[IMP] add stock_dropshipping files
[IMP] stock: search carrier through sale line instead of procurement group
[IMP] add procrule test and preision needed when updating sol
[FIX] sale_order_dates + [IMP] procurement exceptions by scheduler
[FIX] No need to return task
[IMP] move file as name changes and add corrections
[FIX] Continue Run Schedulers wizard fix
[FIX] name issues of takss
[FIX] updating sale order line, but there is still a problem with the recompute

================================= pseudo patch: =================================

--- a/addons/sale_stock/models/__init__.py
+++ b/addons/sale_stock/models/__init__.py
@@ -2,8 +2,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from . import account_invoice
-from . import procurement
-from . import product
 from . import res_company
 from . import sale_order
 from . import res_config_settings

--- a/addons/sale_stock/models/account_invoice.py
+++ b/addons/sale_stock/models/account_invoice.py
@@ -26,8 +26,7 @@ class AccountInvoiceLine(models.Model):
                 quantity = self.uom_id._compute_quantity(self.quantity, self.product_id.uom_id)
                 # Put moves in fixed order by date executed
                 moves = self.env['stock.move']
-                for procurement in s_line.procurement_ids:
-                    moves |= procurement.move_ids
+                moves |=_line.move_ids
                 moves.sorted(lambda x: x.date)
                 # Go through all the moves and do nothing until you get to qty_done
                 # Beyond qty_done we need to calculate the average of the price_unit

--- a/addons/sale_stock/models/procurement.py
+++ b/None
@@ -1,18 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import models, fields
-
-
-class ProcurementOrder(models.Model):
-    _inherit = "procurement.order"
-
-    def _run_move_create(self):
-        vals = super(ProcurementOrder, self)._run_move_create()
-        if self.sale_line_id:
-            vals.update({'sequence': self.sale_line_id.sequence})
-        return vals
-
-class ProcurementGroup(models.Model):
-	_inherit = 'procurement.group'
-	sale_order_id = fields.Many2one('sale.order', string='Sale Order')

--- a/addons/sale_stock/models/product.py
+++ b/None
@@ -1,15 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, models
-
-
-class ProductProduct(models.Model):
-    _inherit = 'product.product'
-
-    @api.multi
-    def _need_procurement(self):
-        for product in self:
-            if product.type not in ['service', 'digital']:
-                return True
-        return super(ProductProduct, self)._need_procurement()

--- a/addons/sale_stock/models/res_config_settings.py
+++ b/addons/sale_stock/models/res_config_settings.py
@@ -15,7 +15,7 @@ class ResConfigSettings(models.TransientModel):
     use_security_lead = fields.Boolean(
         string="Security Lead Time for Sales",
         oldname='default_new_security_lead',
-        help="Margin of error for dates promised to customers. Products will be scheduled for procurement and delivery that many days earlier than the actual promised date, to cope with unexpected delays in the supply chain.")
+        help="Margin of error for dates promised to customers. Products will be scheduled for delivery that many days earlier than the actual promised date, to cope with unexpected delays in the supply chain.")
     default_picking_policy = fields.Selection([
         ('direct', 'Ship products as soon as available, with back orders'),
         ('one', 'Ship all products at once')

--- a/addons/sale_stock/models/sale_order.py
+++ b/addons/sale_stock/models/sale_order.py
@@ -29,14 +29,20 @@ class SaleOrder(models.Model):
         'stock.warehouse', string='Warehouse',
         required=True, readonly=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]},
         default=_default_warehouse_id)
-    picking_ids = fields.Many2many('stock.picking', compute='_compute_picking_ids', string='Picking associated to this sale')
+    picking_ids = fields.One2many('stock.picking', 'sale_id', string='Pickings')
     delivery_count = fields.Integer(string='Delivery Orders', compute='_compute_picking_ids')
+    procurement_group_id = fields.Many2one('procurement.group', 'Procurement Group', copy=False)
 
     @api.multi
-    @api.depends('procurement_group_id')
+    def action_confirm(self):
+        result = super(SaleOrder, self).action_confirm()
+        for order in self:
+            order.order_line._action_procurement_create()
+        return result
+
+    @api.depends('picking_ids')
     def _compute_picking_ids(self):
         for order in self:
-            order.picking_ids = self.env['stock.picking'].search([('group_id', '=', order.procurement_group_id.id)]) if order.procurement_group_id else []
             order.delivery_count = len(order.picking_ids)
 
     @api.onchange('warehouse_id')
@@ -52,18 +58,12 @@ class SaleOrder(models.Model):
         view, if there is only one delivery order to show.
         '''
         action = self.env.ref('stock.action_picking_tree_all').read()[0]
-
-        pickings = self.mapped('picking_ids')
-        if len(pickings) > 1:
-            action['domain'] = [('id', 'in', pickings.ids)]
-        elif pickings:
-            action['views'] = [(self.env.ref('stock.view_picking_form').id, 'form')]
-            action['res_id'] = pickings.id
+        action['domain'] = [('id', 'in', self.picking_ids.ids)]
         return action
 
     @api.multi
     def action_cancel(self):
-        self.mapped('order_line').mapped('procurement_ids').cancel()
+        self.picking_ids.action_cancel()
         return super(SaleOrder, self).action_cancel()
 
     @api.multi
@@ -72,11 +72,6 @@ class SaleOrder(models.Model):
         invoice_vals['incoterms_id'] = self.incoterm.id or False
         return invoice_vals
 
-    def _prepare_procurement_group(self):
-        res = super(SaleOrder, self)._prepare_procurement_group()
-        res.update({'move_type': self.picking_policy, 'partner_id': self.partner_shipping_id.id, 'sale_order_id': self.id})
-        return res
-
     @api.model
     def _get_customer_lead(self, product_tmpl_id):
         super(SaleOrder, self)._get_customer_lead(product_tmpl_id)
@@ -88,6 +83,27 @@ class SaleOrderLine(models.Model):
 
     product_packaging = fields.Many2one('product.packaging', string='Package', default=False)
     route_id = fields.Many2one('stock.location.route', string='Route', domain=[('sale_selectable', '=', True)], ondelete='restrict')
+    move_ids = fields.One2many('stock.move', 'sale_line_id', string='Stock Moves')
+
+    @api.model
+    def create(self, values):
+        line = super(SaleOrderLine, self).create(values)
+        if line.state == 'sale':
+            line._action_procurement_create()
+        return line
+
+    @api.multi
+    def write(self, values):
+        lines = False
+        if 'product_uom_qty' in values:
+            precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
+            lines = self.filtered(
+                lambda r: r.state == 'sale' and float_compare(r.product_uom_qty, values['product_uom_qty'], precision_digits=precision) == -1)
+        res = super(SaleOrderLine, self).write(values)
+        if lines:
+            lines._action_procurement_create()
+        return res
+    
 
     @api.depends('order_id.state')
     def _compute_invoice_status(self):
@@ -101,8 +117,8 @@ class SaleOrderLine(models.Model):
                     and line.invoice_status == 'no'\
                     and line.product_id.type in ['consu', 'product']\
                     and line.product_id.invoice_policy == 'delivery'\
-                    and line.procurement_ids.mapped('move_ids')\
-                    and all(move.state in ['done', 'cancel'] for move in line.procurement_ids.mapped('move_ids')):
+                    and line.move_ids \
+                    and all(move.state in ['done', 'cancel'] for move in line.move_ids):
                 line.invoice_status = 'invoiced'
 
     @api.multi
@@ -171,27 +187,59 @@ class SaleOrderLine(models.Model):
 
     @api.multi
     def _prepare_order_line_procurement(self, group_id=False):
-        vals = super(SaleOrderLine, self)._prepare_order_line_procurement(group_id=group_id)
+        self.ensure_one()
         date_planned = datetime.strptime(self.order_id.confirmation_date, DEFAULT_SERVER_DATETIME_FORMAT)\
             + timedelta(days=self.customer_lead or 0.0) - timedelta(days=self.order_id.company_id.security_lead)
-        vals.update({
-            'date_planned': date_planned.strftime(DEFAULT_SERVER_DATETIME_FORMAT),
-            'location_id': self.order_id.partner_shipping_id.property_stock_customer.id,
-            'route_ids': self.route_id and [(4, self.route_id.id)] or [],
-            'warehouse_id': self.order_id.warehouse_id and self.order_id.warehouse_id.id or False,
-            'partner_dest_id': self.order_id.partner_shipping_id.id,
+        return {
+            'name': self.name,
+            'origin': self.order_id.name,
+            'product_id': self.product_id,
+            'product_qty': self.product_uom_qty,
+            'product_uom': self.product_uom,
+            'company_id': self.order_id.company_id,
+            'group_id': group_id,
             'sale_line_id': self.id,
-        })
-        return vals
+            'date_planned': date_planned.strftime(DEFAULT_SERVER_DATETIME_FORMAT),
+            'location_id': self.order_id.partner_shipping_id.property_stock_customer,
+            'route_ids': self.route_id,
+            'warehouse_id': self.order_id.warehouse_id or False,
+            'partner_dest_id': self.order_id.partner_shipping_id
+        }
 
     @api.multi
-    def _get_delivered_qty(self):
-        """Computes the delivered quantity on sales order lines, based on done stock moves related to its procurements
+    def _action_procurement_create(self):
+        """
+        Create procurements based on quantity ordered. If the quantity is increased, new
+        procurements are created. If the quantity is decreased, no automated action is taken.
         """
+        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
+        for line in self:
+            if line.state != 'sale' or not line.product_id.type in ('consu','product'):
+                continue
+            qty = 0.0
+            for move in line.move_ids:
+                qty += move.product_qty
+            if float_compare(qty, line.product_uom_qty, precision_digits=precision) >= 0:
+                continue
+
+            if not line.order_id.procurement_group_id:
+                line.order_id.procurement_group_id = self.env["procurement.group"].create({
+                    'name': line.order_id.name, 'move_type': line.order_id.picking_policy,
+                    'sale_id': line.order_id.id
+                })
+            vals = line._prepare_order_line_procurement(group_id=line.order_id.procurement_group_id)
+            vals['product_qty'] = line.product_uom_qty - qty
+
+            new_proc = self.env["procurement.group"].run(vals)
+        return True
+
+
+    @api.multi
+    def _get_delivered_qty(self):
         self.ensure_one()
         super(SaleOrderLine, self)._get_delivered_qty()
         qty = 0.0
-        for move in self.procurement_ids.mapped('move_ids').filtered(lambda r: r.state == 'done' and not r.scrapped):
+        for move in self.move_ids.filtered(lambda r: r.state == 'done' and not r.scrapped):
             if move.location_dest_id.usage == "customer":
                 if not move.origin_returned_move_id:
                     qty += move.product_uom._compute_quantity(move.product_uom_qty, self.product_uom)
@@ -215,6 +263,7 @@ class SaleOrderLine(models.Model):
             }
         return {}
 
+
     def _check_routing(self):
         """ Verify the route of the product based on the warehouse
             return True if the product availibility in stock does not need to be verified,

--- a/addons/sale_stock/models/stock.py
+++ b/addons/sale_stock/models/stock.py
@@ -6,34 +6,29 @@ from odoo import api, fields, models
 
 class StockLocationRoute(models.Model):
     _inherit = "stock.location.route"
-
     sale_selectable = fields.Boolean("Selectable on Sales Order Line")
 
 
 class StockMove(models.Model):
     _inherit = "stock.move"
+    sale_line_id = fields.Many2one('sale.order.line', 'Sale Line')
 
     @api.multi
     def action_done(self):
         result = super(StockMove, self).action_done()
-
-        # Update delivered quantities on sales order lines
-        sale_order_lines = self.filtered(lambda move: move.procurement_id.sale_line_id and move.product_id.expense_policy == 'no').mapped('procurement_id.sale_line_id')
-        for line in sale_order_lines:
+        for line in self.mapped('sale_line_id'):
             line.qty_delivered = line._get_delivered_qty()
         return result
 
-    @api.multi
-    def assign_picking(self):
-        result = super(StockMove, self).assign_picking()
-        for move in self:
-            if move.picking_id and move.picking_id.group_id:
-                picking = move.picking_id
-                order = self.env['sale.order'].sudo().search([('procurement_group_id', '=', picking.group_id.id)])
-                picking.message_post_with_view(
-                    'mail.message_origin_link',
-                    values={'self': picking, 'origin': order},
-                    subtype_id=self.env.ref('mail.mt_note').id)
+class ProcurementGroup(models.Model):
+    _inherit = 'procurement.group'
+
+    sale_id = fields.Many2one('sale.order', 'Sale Order')
+
+    def _get_stock_move_values(self, values, rule, group_id):
+        result = super(ProcurementGroup, self)._get_stock_move_values(values, rule, group_id)
+        if values.get('sale_line_id', False):
+            result['sale_line_id'] = values['sale_line_id']
         return result
 
     @api.multi
@@ -51,25 +46,17 @@ class StockMove(models.Model):
 class StockPicking(models.Model):
     _inherit = 'stock.picking'
 
-    sale_id = fields.Many2one('sale.order', "Sales Order", compute='_compute_sale_id', store=True)
 
-    @api.one
-    @api.depends('move_lines.procurement_id.sale_line_id.order_id')
-    def _compute_sale_id(self):
-        for move in self.move_lines:
-            if move.procurement_id.sale_line_id:
-                self.sale_id = move.procurement_id.sale_line_id.order_id
-                return
+    sale_id = fields.Many2one(related="group_id.sale_id", string="Sales Order", store=True)
 
     @api.multi
     def _create_backorder(self, backorder_moves=[]):
         res = super(StockPicking, self)._create_backorder(backorder_moves)
         for picking in self.filtered(lambda pick: pick.picking_type_id.code == 'outgoing'):
             backorder = picking.search([('backorder_id', '=', picking.id)])
-            if backorder.group_id: # origin from a sale
-                order = self.env['sale.order'].search([('procurement_group_id', '=', backorder.group_id.id)])
+            if backorder.sale_id:
                 backorder.message_post_with_view(
                     'mail.message_origin_link',
-                    values={'self': backorder, 'origin': order},
+                    values={'self': backorder, 'origin': backorder.sale_id},
                     subtype_id=self.env.ref('mail.mt_note').id)
-        return res
+        return res
\ No newline at end of file
