PR: https://github.com/odoo/odoo/pull/97282

From: 1ac43fab05059b54313b87cc457ec23ae6dd4714
From: Romain Derie
Date: 2022-08-04 18:11:00

Structural Changes: 1
Total Changes: 60

[IMP] website: fix python linter errors

Just a nice to have. It will prevent those errors to be replicated when
copy pasted and will help reading the files in the IDE.

closes odoo/odoo#97282

Signed-off-by: Romain Derie (rde) <rde@odoo.com>

================================= pseudo patch: =================================

--- a/addons/website/models/ir_attachment.py
+++ b/addons/website/models/ir_attachment.py
@@ -3,8 +3,6 @@
 
 import logging
 from odoo import fields, models, api
-from odoo.exceptions import UserError
-from odoo.tools.translate import _
 _logger = logging.getLogger(__name__)
 
 

--- a/addons/website/models/ir_http.py
+++ b/addons/website/models/ir_http.py
@@ -4,7 +4,6 @@ import logging
 from lxml import etree
 import os
 import unittest
-import time
 
 import pytz
 import werkzeug
@@ -16,7 +15,7 @@ from functools import partial
 import odoo
 from odoo import api, models
 from odoo import SUPERUSER_ID
-from odoo.exceptions import AccessError, MissingError
+from odoo.exceptions import AccessError
 from odoo.http import request
 from odoo.tools.safe_eval import safe_eval
 from odoo.osv.expression import FALSE_DOMAIN

--- a/addons/website/models/ir_qweb.py
+++ b/addons/website/models/ir_qweb.py
@@ -40,11 +40,11 @@ class IrQWeb(models.AbstractModel):
     _inherit = 'ir.qweb'
 
     URL_ATTRS = {
-        'form':   'action',
-        'a':      'href',
-        'link':   'href',
+        'form': 'action',
+        'a': 'href',
+        'link': 'href',
         'script': 'src',
-        'img':    'src',
+        'img': 'src',
     }
 
     # assume cache will be invalidated by third party on write to ir.ui.view
@@ -80,7 +80,6 @@ class IrQWeb(models.AbstractModel):
                 for comp in irQweb.env.user.company_ids if comp != cur_company
             ])
 
-
         # update values
 
         values.update(dict(

--- a/addons/website/models/ir_translation.py
+++ b/addons/website/models/ir_translation.py
@@ -56,8 +56,9 @@ class IrTranslation(models.Model):
                 ON s_menu.parent_id = root_menu.id AND root_menu.parent_id IS NULL
              WHERE t.lang IN %s and t.module IN %s
                AND o_menu.website_id IS NULL AND o_menu.parent_id = %s
-               AND s_menu.website_id IS NOT NULL""" + conflict_clause.format(
-                   "(type, lang, name, res_id) WHERE type = 'model'"
+               AND s_menu.website_id IS NOT NULL
+            """ + conflict_clause.format(
+            "(type, lang, name, res_id) WHERE type = 'model'"
         ), (tuple(langs), tuple(modules), default_menu.id))
 
         return res

--- a/addons/website/models/ir_ui_view.py
+++ b/addons/website/models/ir_ui_view.py
@@ -2,13 +2,11 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 import logging
-import os
 import uuid
 import werkzeug
 
 from odoo import api, fields, models
 from odoo import tools
-from odoo.addons import website
 from odoo.exceptions import AccessError
 from odoo.osv import expression
 from odoo.http import request

--- a/addons/website/models/mixins.py
+++ b/addons/website/models/mixins.py
@@ -2,7 +2,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 import logging
-import re
 
 from werkzeug.urls import url_join
 

--- a/addons/website/models/res_partner.py
+++ b/addons/website/models/res_partner.py
@@ -22,7 +22,7 @@ class Partner(models.Model):
             'sensor': 'false',
             'key': google_maps_api_key,
         }
-        return '//maps.googleapis.com/maps/api/staticmap?'+werkzeug.urls.url_encode(params)
+        return '//maps.googleapis.com/maps/api/staticmap?' + werkzeug.urls.url_encode(params)
 
     def google_map_link(self, zoom=10):
         params = {

--- a/addons/website/models/theme_models.py
+++ b/addons/website/models/theme_models.py
@@ -119,7 +119,6 @@ class ThemeAttachment(models.Model):
     url = fields.Char()
     copy_ids = fields.One2many('ir.attachment', 'theme_template_id', 'Attachment using a copy of me', copy=False, readonly=True)
 
-
     def _convert_to_base_model(self, website, **kwargs):
         self.ensure_one()
         new_attach = {

--- a/addons/website/models/website.py
+++ b/addons/website/models/website.py
@@ -1117,11 +1117,11 @@ class Website(models.Model):
         methods = endpoint.routing.get('methods') or ['GET']
 
         converters = list(rule._converters.values())
-        if not ('GET' in methods and
-                endpoint.routing['type'] == 'http' and
-                endpoint.routing['auth'] in ('none', 'public') and
-                endpoint.routing.get('website', False) and
-                all(hasattr(converter, 'generate') for converter in converters)):
+        if not ('GET' in methods
+                and endpoint.routing['type'] == 'http'
+                and endpoint.routing['auth'] in ('none', 'public')
+                and endpoint.routing.get('website', False)
+                and all(hasattr(converter, 'generate') for converter in converters)):
             return False
 
         # dont't list routes without argument having no default value or converter
@@ -1129,11 +1129,10 @@ class Website(models.Model):
         params = list(sign.parameters.values())[1:]  # skip self
         supported_kinds = (inspect.Parameter.POSITIONAL_ONLY,
                            inspect.Parameter.POSITIONAL_OR_KEYWORD)
-        has_no_default = lambda p: p.default is inspect.Parameter.empty
 
         # check that all args have a converter
         return all(p.name in rule._converters for p in params
-                   if p.kind in supported_kinds and has_no_default(p))
+                   if p.kind in supported_kinds and p.default is inspect.Parameter.empty)
 
     def _enumerate_pages(self, query_string=None, force=False):
         """ Available pages in the website/CMS. This is mostly used for links
@@ -1460,7 +1459,7 @@ class Website(models.Model):
         snippets_assets = self._get_snippets_assets()
         html_fields = self._get_html_fields()
 
-        for snippet_module, snippet_id, asset_version, asset_type, _ in snippets_assets:
+        for snippet_module, snippet_id, asset_version, asset_type, _asset_id in snippets_assets:
             is_snippet_used = self._is_snippet_used(snippet_module, snippet_id, asset_version, asset_type, html_fields)
 
             # The regex catches XXX.scss, XXX.js and XXX_variables.scss
@@ -1773,7 +1772,7 @@ class Website(models.Model):
             for field in fields:
                 fields_domain.append([(field, '=ilike', '%s%%' % first)])
                 fields_domain.append([(field, '=ilike', '%% %s%%' % first)])
-                fields_domain.append([(field, '=ilike', '%%>%s%%' % first)]) # HTML
+                fields_domain.append([(field, '=ilike', '%%>%s%%' % first)])  # HTML
             domain.append(OR(fields_domain))
             domain = AND(domain)
             records = model.search_read(domain, fields, limit=1000)

--- a/addons/website/models/website_form.py
+++ b/addons/website/models/website_form.py
@@ -97,7 +97,8 @@ class website_form_model_fields(models.Model):
         :return: nothing of import
         """
         # postgres does *not* like ``in [EMPTY TUPLE]`` queries
-        if not fields: return False
+        if not fields:
+            return False
 
         # only allow users who can change the website structure
         if not self.env['res.users'].has_group('website.group_website_designer'):
@@ -114,6 +115,6 @@ class website_form_model_fields(models.Model):
         return True
 
     website_form_blacklisted = fields.Boolean(
-        'Blacklisted in web forms', default=True, index=True, # required=True,
+        'Blacklisted in web forms', default=True, index=True,
         help='Blacklist this field for web forms'
     )

--- a/addons/website/models/website_menu.py
+++ b/addons/website/models/website_menu.py
@@ -88,7 +88,7 @@ class Menu(models.Model):
                     'website_id': website.id,
                     'parent_id': website.menu_id.id,
                 }) for website in self.env['website'].search([])]
-                new_menu = super().create(w_vals)[-1:] # take the last one
+                new_menu = super().create(w_vals)[-1:]  # take the last one
                 # if creating a default menu, we should also save it as such
                 default_menu = self.env.ref('website.main_menu', raise_if_not_found=False)
                 if default_menu and vals.get('parent_id') == default_menu.id:
@@ -114,10 +114,10 @@ class Menu(models.Model):
     def _compute_visible(self):
         for menu in self:
             visible = True
-            if menu.page_id and not menu.user_has_groups('base.group_user') and \
-                (not menu.page_id.sudo().is_visible or
-                 (not menu.page_id.view_id._handle_visibility(do_raise=False) and
-                 menu.page_id.view_id._get_cached_visibility() != "password")):
+            if (menu.page_id and not menu.user_has_groups('base.group_user')
+                and (not menu.page_id.sudo().is_visible
+                     or (not menu.page_id.view_id._handle_visibility(do_raise=False)
+                         and menu.page_id.view_id._get_cached_visibility() != "password"))):
                 visible = False
             menu.is_visible = visible
 

--- a/addons/website/models/website_page.py
+++ b/addons/website/models/website_page.py
@@ -9,7 +9,6 @@ from odoo.addons.website.tools import text_from_html
 from odoo import api, fields, models
 from odoo.osv import expression
 from odoo.tools import escape_psql
-from odoo.tools.safe_eval import safe_eval
 from odoo.tools.translate import _
 
 

--- a/addons/website/models/website_rewrite.py
+++ b/addons/website/models/website_rewrite.py
@@ -5,7 +5,7 @@ import re
 import werkzeug
 
 from odoo import models, fields, api, _
-from odoo.exceptions import AccessDenied, ValidationError
+from odoo.exceptions import ValidationError
 
 import logging
 _logger = logging.getLogger(__name__)
