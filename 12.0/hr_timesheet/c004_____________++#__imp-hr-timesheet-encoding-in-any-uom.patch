PR: https://github.com/odoo/odoo/pull/

From: 83820a898f972f0addaf5ee579718d9601e6a35b
From: jem-odoo
Date: 2018-08-13 12:33:48

Structural Changes: 5
Total Changes: 103

[IMP] hr_timesheet: encoding in any UoM

This commit provides a mecanism to allow user
to log their timesheets using any time UoM
they want. Everything will still be stored
in hours in the database (in the UoM selected
with project_mode_time_id field of the company).
The chosen encoding UoM will provide a widget to
help the encoding (float_toggle for Days,
float_time for Hours, ...). The widget will use
the UoM rate conversion.

Task #39079

================================= pseudo patch: =================================

--- a/addons/hr_timesheet/models/__init__.py
+++ b/addons/hr_timesheet/models/__init__.py
@@ -4,7 +4,9 @@
 from . import analytic_account
 from . import hr
 from . import hr_timesheet
+from . import ir_http
 from . import res_company
 from . import res_config_settings
 from . import project
 from . import res_users
+from . import uom

--- a/addons/hr_timesheet/models/hr_timesheet.py
+++ b/addons/hr_timesheet/models/hr_timesheet.py
@@ -1,6 +1,9 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from lxml import etree
+import json
+
 from odoo import api, fields, models, _
 from odoo.exceptions import UserError
 
@@ -46,6 +49,10 @@ class AccountAnalyticLine(models.Model):
         for line in self:
             line.department_id = line.employee_id.department_id
 
+    # ----------------------------------------------------
+    # ORM overrides
+    # ----------------------------------------------------
+
     @api.model
     def create(self, values):
         # compute employee only for timesheet lines, makes no sense for other lines
@@ -70,6 +77,10 @@ class AccountAnalyticLine(models.Model):
         self.filtered(lambda t: t.project_id)._timesheet_postprocess(values)
         return result
 
+    # ----------------------------------------------------
+    # Business Methods
+    # ----------------------------------------------------
+
     def _timesheet_preprocess(self, vals):
         """ Deduce other field values from the one given.
             Overrride this to compute on the fly some field that can not be computed fields.

--- a/None
+++ b/addons/hr_timesheet/models/ir_http.py
@@ -0,0 +1,21 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models
+
+
+class Http(models.AbstractModel):
+    _inherit = 'ir.http'
+
+    def session_info(self):
+        """ The widget 'timesheet_uom' needs to know which UoM conversion factor and which javascript
+            widget to apply, depending on th ecurrent company.
+        """
+        result = super(Http, self).session_info()
+
+        company = self.env.user.company_id
+        encoding_uom = company.timesheet_encode_uom_id
+
+        result['timesheet_uom'] = encoding_uom.read(['name', 'rounding', 'timesheet_widget'])[0]
+        result['timesheet_uom_factor'] = company.project_time_mode_id._compute_quantity(1.0, encoding_uom, round=False)  # convert encoding uom into stored uom to get conversion factor
+        return result

--- a/addons/hr_timesheet/models/project.py
+++ b/addons/hr_timesheet/models/project.py
@@ -1,8 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from lxml import etree
-
 from odoo import models, fields, api, _
 from odoo.exceptions import UserError, ValidationError
 
@@ -153,43 +151,3 @@ class Task(models.Model):
                 'company_id': account_id.company_id.id,
             })
         return result
-
-    @api.model
-    def fields_view_get(self, view_id=None, view_type='form', toolbar=False, submenu=False):
-        # read uom as admin to avoid access rights issues, e.g. for portal/share users,
-        # this should be safe (no context passed to avoid side-effects)
-        obj_tm = self.env.user.company_id.project_time_mode_id
-        tm = obj_tm and obj_tm.name or 'Hours'
-
-        res = super(Task, self).fields_view_get(view_id=view_id, view_type=view_type, toolbar=toolbar, submenu=submenu)
-
-        # read uom as admin to avoid access rights issues, e.g. for portal/share users,
-        # this should be safe (no context passed to avoid side-effects)
-        obj_tm = self.env.user.company_id.project_time_mode_id
-        # using get_object to get translation value
-        uom_hour = self.env.ref('uom.product_uom_hour', False)
-        if not obj_tm or not uom_hour or obj_tm.id == uom_hour.id:
-            return res
-
-        eview = etree.fromstring(res['arch'])
-
-        # if the project_time_mode_id is not in hours (so in days), display it as a float field
-        def _check_rec(eview):
-            if eview.attrib.get('widget', '') == 'float_time':
-                eview.set('widget', 'float')
-            for child in eview:
-                _check_rec(child)
-            return True
-
-        _check_rec(eview)
-
-        res['arch'] = etree.tostring(eview, encoding='unicode')
-
-        # replace reference of 'Hours' to 'Day(s)'
-        for f in res['fields']:
-            # TODO this NOT work in different language than english
-            # the field 'Initially Planned Hours' should be replaced by 'Initially Planned Days'
-            # but string 'Initially Planned Days' is not available in translation
-            if 'Hours' in res['fields'][f]['string']:
-                res['fields'][f]['string'] = res['fields'][f]['string'].replace('Hours', obj_tm.name)
-        return res

--- a/addons/hr_timesheet/models/res_company.py
+++ b/addons/hr_timesheet/models/res_company.py
@@ -16,8 +16,21 @@ class ResCompany(models.Model):
             uom = self.env['uom.uom'].search([('measure_type', '=', 'time')], limit=1)
         return uom
 
+    @api.model
+    def _default_timesheet_encode_uom_id(self):
+        uom = self.env.ref('uom.product_uom_hour', raise_if_not_found=False)
+        if not uom:
+            uom = self.env['uom.uom'].search([('measure_type', '=', 'time'), ('uom_type', '=', 'reference')], limit=1)
+        if not uom:
+            uom = self.env['uom.uom'].search([('measure_type', '=', 'time')], limit=1)
+        return uom
+
     project_time_mode_id = fields.Many2one('uom.uom', string='Project Time Unit',
         default=_default_project_time_mode_id, domain=[('measure_type', '=', 'time')],
         help="This will set the unit of measure used in projects and tasks.\n"
              "If you use the timesheet linked to projects, don't "
              "forget to setup the right unit of measure in your employees.")
+    timesheet_encode_uom_id = fields.Many2one('uom.uom', string="Timesheet Encoding Unit",
+        default=_default_timesheet_encode_uom_id, domain=[('measure_type', '=', 'time')], required=True,
+        help="""This will set the unit of measure used to encode timesheet. This will simply provide tools
+        and widgets to help the encoding. All reporting will still be expressed in hours (default value).""")

--- a/addons/hr_timesheet/models/res_config_settings.py
+++ b/addons/hr_timesheet/models/res_config_settings.py
@@ -14,3 +14,7 @@ class ResConfigSettings(models.TransientModel):
         help="This will set the unit of measure used in projects and tasks.\n"
              "If you use the timesheet linked to projects, don't "
              "forget to setup the right unit of measure in your employees.")
+    timesheet_encode_uom_id = fields.Many2one('uom.uom', string="Encoding Unit",
+        related='company_id.timesheet_encode_uom_id',
+        help="""This will set the unit of measure used to encode timesheet. This will simply provide tools
+        and widgets to help the encoding. All reporting will still be expressed in hours (default value).""")

--- a/None
+++ b/addons/hr_timesheet/models/uom.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class Uom(models.Model):
+    _inherit = 'uom.uom'
+
+    timesheet_widget = fields.Char("Widget", help="Widget used in the webclient when this unit is the one used to encode timesheets.")
