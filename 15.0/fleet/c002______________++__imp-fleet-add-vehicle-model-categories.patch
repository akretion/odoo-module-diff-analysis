PR: https://github.com/odoo/odoo/pull/

From: 9b5768688a182825202bcb474517937115a88a5b
From: William Braeckman
Date: 2021-06-04 07:20:15

Structural Changes: 7
Total Changes: 46

[IMP] fleet: add vehicle model categories

Adds categories to vehicle models

Task ID: 2487706

================================= pseudo patch: =================================

--- a/addons/fleet/models/fleet_vehicle.py
+++ b/addons/fleet/models/fleet_vehicle.py
@@ -59,7 +59,9 @@ class FleetVehicle(models.Model):
         ('kilometers', 'km'),
         ('miles', 'mi')
         ], 'Odometer Unit', default='kilometers', help='Unit of the odometer ', required=True)
-    transmission = fields.Selection([('manual', 'Manual'), ('automatic', 'Automatic')], 'Transmission', help='Transmission Used by the vehicle')
+    transmission = fields.Selection(
+        [('manual', 'Manual'), ('automatic', 'Automatic')], 'Transmission', help='Transmission Used by the vehicle',
+        compute='_compute_transmission', store=True, readonly=False)
     fuel_type = fields.Selection([
         ('gasoline', 'Gasoline'),
         ('diesel', 'Diesel'),
@@ -165,6 +167,12 @@ class FleetVehicle(models.Model):
             record.contract_renewal_total = total - 1  # we remove 1 from the real total for display purposes
             record.contract_renewal_name = name
 
+    @api.depends('model_id')
+    def _compute_transmission(self):
+        for vehicle in self:
+            if vehicle.model_id:
+                vehicle.transmission = vehicle.model_id.transmission
+
     def _get_analytic_name(self):
         # This function is used in fleet_account and is overrided in l10n_be_hr_payroll_fleet
         return self.license_plate or _('No plate')

--- a/addons/fleet/models/fleet_vehicle_model.py
+++ b/addons/fleet/models/fleet_vehicle_model.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models, tools
+from odoo import _, api, fields, models
 
 
 class FleetVehicleModel(models.Model):
@@ -11,10 +11,13 @@ class FleetVehicleModel(models.Model):
 
     name = fields.Char('Model name', required=True)
     brand_id = fields.Many2one('fleet.vehicle.model.brand', 'Manufacturer', required=True, help='Manufacturer of the vehicle')
+    category_id = fields.Many2one('fleet.vehicle.model.category', 'Category')
     vendors = fields.Many2many('res.partner', 'fleet_vehicle_model_vendors', 'model_id', 'partner_id', string='Vendors')
     image_128 = fields.Image(related='brand_id.image_128', readonly=True)
     active = fields.Boolean(default=True)
     vehicle_type = fields.Selection([('car', 'Car'), ('bike', 'Bike')], default='car', required=True)
+    transmission = fields.Selection([('manual', 'Manual'), ('automatic', 'Automatic')], 'Transmission', help='Transmission Used by the vehicle')
+    vehicle_count = fields.Integer(compute='_compute_vehicle_count')
 
     @api.depends('name', 'brand_id')
     def name_get(self):
@@ -26,6 +29,25 @@ class FleetVehicleModel(models.Model):
             res.append((record.id, name))
         return res
 
+    def _compute_vehicle_count(self):
+        group = self.env['fleet.vehicle'].read_group(
+            [('model_id', 'in', self.ids)], ['id', 'model_id'], groupby='model_id', lazy=False,
+        )
+        count_by_model = {entry['model_id'][0]: entry['__count'] for entry in group}
+        for model in self:
+            model.vehicle_count = count_by_model.get(model.id, 0)
+
+    def action_model_vehicle(self):
+        self.ensure_one()
+        view = {
+            'type': 'ir.actions.act_window',
+            'view_mode': 'kanban,tree,form',
+            'res_model': 'fleet.vehicle',
+            'name': _('Vehicles'),
+            'context': {'search_default_model_id': self.id, 'default_model_id': self.id}
+        }
+
+        return view
 
 class FleetVehicleModelBrand(models.Model):
     _name = 'fleet.vehicle.model.brand'
@@ -54,3 +76,15 @@ class FleetVehicleModelBrand(models.Model):
         }
 
         return view
+
+class FleetVehicleModelCategory(models.Model):
+    _name = 'fleet.vehicle.model.category'
+    _description = 'Category of the model'
+    _order = 'sequence asc, id asc'
+
+    _sql_constraints = [
+        ('name_uniq', 'UNIQUE (name)', 'Category name must be unique')
+    ]
+
+    name = fields.Char(required=True)
+    sequence = fields.Integer()
