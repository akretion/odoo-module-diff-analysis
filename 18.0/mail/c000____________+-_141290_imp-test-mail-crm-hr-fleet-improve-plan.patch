PR: https://github.com/odoo/odoo/pull/141290

From: e079a3a7738be596e78af45820ba5e99cafecb99
From: Pierre-Yves Dufays
Date: 2023-11-07 13:03:58

Structural Changes: 5
Total Changes: 45

[IMP] {test_}mail, crm, hr{_fleet}: improve plan

We do the following improvement:
- some wording changes
- the activity templates can be edited directly in the list view instead of in
a popup except in hr because sub module add too many field to be edited in
directly in the list view.
- when scheduling a plan, the due date of the created activities are computed
as the plan_date_deadline + activity type delay and if the plan_date_deadline
is not specified, as today + activity type delay.
- there were 2 res_model fields in the mail_activity_plan_view_form that was
causing a selection box to appears on many form where the model shouldn't be
selectable. We remove one of them here.

Task-3558929

X-original-commit: 846dd759bd2ebd155923a1eb948d8681245e6506
Part-of: odoo/odoo#141290

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_activity.py
+++ b/addons/mail/models/mail_activity.py
@@ -185,12 +185,26 @@ class MailActivity(models.Model):
                 self.note = self.activity_type_id.default_note
 
     @api.model
-    def _calculate_date_deadline(self, activity_type):
-        # Date.context_today is correct because date_deadline is a Date and is meant to be
-        # expressed in user TZ
-        base = fields.Date.context_today(self)
-        if activity_type.delay_from == 'previous_activity' and 'activity_previous_deadline' in self.env.context:
+    def _calculate_date_deadline(self, activity_type, force_base_date=None):
+        """ Compute the activity deadline given its type, the force_base_date and the context.
+
+        The deadline is computed by adding the activity type delay to a base date defined as:
+        - the force_base_date
+        - or the activity_previous_deadline context value if the activity type delay_from is
+          previous_activity
+        - or the current date
+
+        :param activity_type: activity type
+        :param date force_base_date: if set, this force the base date for computation
+        """
+        if force_base_date:
+            # Date.context_today is correct because date_deadline is a Date and is meant to be
+            # expressed in user TZ
+            base = force_base_date
+        elif activity_type.delay_from == 'previous_activity' and 'activity_previous_deadline' in self.env.context:
             base = fields.Date.from_string(self.env.context.get('activity_previous_deadline'))
+        else:
+            base = fields.Date.context_today(self)
         return base + relativedelta(**{activity_type.delay_unit: activity_type.delay_count})
 
     @api.onchange('recommended_activity_type_id')

--- a/addons/mail/models/mail_activity_plan.py
+++ b/addons/mail/models/mail_activity_plan.py
@@ -33,7 +33,7 @@ class MailActivityPlan(models.Model):
         help='Specify a model if the activity should be specific to a model'
               ' and not available when managing activities for other models.')
     steps_count = fields.Integer(compute='_compute_steps_count')
-    assignation_summary = fields.Html('Assignation summary', compute='_compute_assignation')
+    assignation_summary = fields.Html('Plan Summary', compute='_compute_assignation_summary')
     has_user_on_demand = fields.Boolean('Has on demand responsible', compute='_compute_has_user_on_demand')
 
     @api.depends('res_model')
@@ -51,13 +51,11 @@ class MailActivityPlan(models.Model):
             plan.steps_count = len(plan.template_ids)
 
     @api.depends('template_ids.summary')
-    def _compute_assignation(self):
+    def _compute_assignation_summary(self):
         self.assignation_summary = ''
         for plan in self.filtered('template_ids'):
-            resp_description = dict(self.env['mail.activity.plan.template']._fields['responsible_type']._description_selection(self.env))
             summaries = [
-                f"{template.activity_type_id.name} - {resp_description[template.responsible_type]}" +
-                (f": {template.summary}" if template.summary else '')
+                template.activity_type_id.name + (f": {template.summary}" if template.summary else '')
                 for template in plan.template_ids
             ]
             if summaries:

--- a/addons/mail/models/mail_activity_plan_template.py
+++ b/addons/mail/models/mail_activity_plan_template.py
@@ -25,14 +25,13 @@ class MailActivityPlanTemplate(models.Model):
     )
     summary = fields.Char('Summary', compute="_compute_summary", store=True, readonly=False)
     responsible_type = fields.Selection([
-        ('on_demand', 'On demand'),
-        ('other', 'Other'),
-    ], default='on_demand', string='Responsible', required=True)
+        ('on_demand', 'Ask at launch'),
+        ('other', 'Default user'),
+    ], default='on_demand', string='Assignment', required=True)
     responsible_id = fields.Many2one(
         'res.users',
-        'Other Responsible',
-        check_company=True, store=True, compute="_compute_responsible_id", readonly=False,
-        help='Specific responsible of activity if not linked to the employee.')
+        'Assigned to',
+        check_company=True, store=True, compute="_compute_responsible_id", readonly=False)
     note = fields.Html('Note')
 
     @api.constrains('activity_type_id', 'plan_id')
@@ -58,7 +57,7 @@ class MailActivityPlanTemplate(models.Model):
         """ Ensure that responsible_id is set when responsible is set to "other". """
         for template in self:
             if template.responsible_type == 'other' and not template.responsible_id:
-                raise ValidationError(_('When selecting responsible "other", you must specify a responsible.'))
+                raise ValidationError(_('When selecting "Default user" assignment, you must specify a responsible.'))
 
     @api.depends('activity_type_id')
     def _compute_summary(self):
