PR: https://github.com/odoo/odoo/pull/98914

From: 7e3403068fc3fbc40182b3cfeb80e97a9300e8ff
From: gawa-odoo
Date: 2022-09-20 10:36:01

Structural Changes: 12
Total Changes: 50

[REF] *: Analytic Apocalypse

The goal of this commit is to get rid of the analytic tags as they were confusing, serving tag purposes as well as distribution on analytic accounts.

Everywhere analytic tags were used as a distribution have been replaced with a new widget that will dispatch distribution on analytic accounts. If there was an analytic account field next to the tags, it has been included in the distribution.

Analytic tags that were used simply as information tags have been removed.

To fill the new widget, there are now 2 kind of rules that will help fill and prefill it.
The first are applicability: previous groups have been removed, and have by replaced by plans. Each account is required to have a plan. These plans define when they are available in the widget: a default applicability per plan and applicability lines that can specify rules following the context of the widget.

The second one are distribution models, that will replace previous default rules but follow the same principles. The accounts (and so the plans) that will be given by the distribution model can override the applicability rules from before.

closes odoo/odoo#98914

Related: odoo/upgrade#3885
Related: odoo/enterprise#30743
Signed-off-by: William Andr√© (wan) <wan@odoo.com>
Co-authored-by: Habib (ayh) <ayh@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/__init__.py
+++ b/addons/project/models/__init__.py
@@ -2,7 +2,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from . import analytic_account
-from . import analytic_account_tag
 from . import project_milestone
 from . import project_project_stage
 from . import project_task_recurrence
@@ -11,6 +10,7 @@ from . import project_task_stage_personal
 from . import project
 from . import project_collaborator
 from . import project_update
+from . import company
 from . import res_config_settings
 from . import res_partner
 from . import digest

--- a/addons/project/models/analytic_account_tag.py
+++ b/None
@@ -1,10 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-class AccountAnalyticTag(models.Model):
-    _inherit = 'account.analytic.tag'
-
-    task_ids = fields.Many2many('project.task', string='Tasks')
-    project_ids = fields.Many2many('project.project', string='Projects')

--- a/None
+++ b/addons/project/models/company.py
@@ -0,0 +1,19 @@
+# -*- coding: utf-8 -*-
+from odoo import fields, models
+
+
+class ResCompany(models.Model):
+    _name = "res.company"
+    _inherit = "res.company"
+
+    analytic_plan_id = fields.Many2one(
+        'account.analytic.plan',
+        string="Default Plan",
+        check_company=True,
+        readonly=False,
+        compute="_compute_analytic_plan_id",
+        help="Default Plan for a new analytic account for projects")
+
+    def _compute_analytic_plan_id(self):
+        for company in self:
+            company.analytic_plan_id = self.env['account.analytic.plan'].with_company(company)._get_default()

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -303,7 +303,6 @@ class Project(models.Model):
         help="Analytic account to which this project is linked for financial management. "
              "Use an analytic account to record cost and revenue on your project.")
     analytic_account_balance = fields.Monetary(related="analytic_account_id.balance")
-    analytic_tag_ids = fields.Many2many('account.analytic.tag', string='Analytic Tags')
 
     favorite_user_ids = fields.Many2many(
         'res.users', 'project_favorite_user_rel', 'project_id', 'user_id',
@@ -945,11 +944,12 @@ class Project(models.Model):
 
     @api.model
     def _create_analytic_account_from_values(self, values):
+        company = self.env['res.company'].browse(values.get('company_id')) if values.get('company_id') else self.env.company
         analytic_account = self.env['account.analytic.account'].create({
             'name': values.get('name', _('Unknown Analytic Account')),
-            'company_id': values.get('company_id') or self.env.company.id,
+            'company_id': company.id,
             'partner_id': values.get('partner_id'),
-            'active': True,
+            'plan_id': company.analytic_plan_id.id,
         })
         return analytic_account
 
@@ -959,6 +959,7 @@ class Project(models.Model):
                 'name': project.name,
                 'company_id': project.company_id.id,
                 'partner_id': project.partner_id.id,
+                'plan_id': project.company_id.analytic_plan_id.id,
                 'active': True,
             })
             project.write({'analytic_account_id': analytic_account.id})
@@ -1307,8 +1308,6 @@ class Task(models.Model):
              "If empty, the analytic account of the project will be used.")
     is_analytic_account_id_changed = fields.Boolean('Is Analytic Account Manually Changed', compute='_compute_is_analytic_account_id_changed', store=True)
     project_analytic_account_id = fields.Many2one('account.analytic.account', string='Project Analytic Account', related='project_id.analytic_account_id')
-    analytic_tag_ids = fields.Many2many('account.analytic.tag', string="Analytic Tags",
-        domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]", check_company=True)
 
     @property
     def SELF_READABLE_FIELDS(self):
@@ -1835,8 +1834,6 @@ class Task(models.Model):
             project = self.env['project.project'].browse(project_id)
             if project.analytic_account_id:
                 vals['analytic_account_id'] = project.analytic_account_id.id
-            if project.analytic_tag_ids:
-                vals['analytic_tag_ids'] = [Command.set(project.analytic_tag_ids.ids)]
         else:
             vals['user_ids'] = [Command.link(self.env.user.id)]
 

--- a/addons/project/models/res_config_settings.py
+++ b/addons/project/models/res_config_settings.py
@@ -16,6 +16,14 @@ class ResConfigSettings(models.TransientModel):
     group_project_task_dependencies = fields.Boolean("Task Dependencies", implied_group="project.group_project_task_dependencies")
     group_project_milestone = fields.Boolean('Milestones', implied_group='project.group_project_milestone', group='base.group_portal,base.group_user')
 
+    # Analytic Accounting
+    analytic_plan_id = fields.Many2one(
+        comodel_name='account.analytic.plan',
+        string="Default Plan",
+        readonly=False,
+        related='company_id.analytic_plan_id',
+    )
+
     @api.model
     def _get_basic_project_domain(self):
         return []
