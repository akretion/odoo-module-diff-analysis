PR: https://github.com/odoo/odoo/pull/109216

From: 53f9e5845f34beaed523a4c6e0e2e7dd1cfd9025
From: Adrien Guilliams (adgu)
Date: 2023-03-10 17:54:52

Structural Changes: 5
Total Changes: 204

[IMP] point_of_sale, pos_restaurant: Add cross-orders feature for point_of_sale and pos_restaurant

Currently the below use-cases are hardly supportable, though quite common:

Retail: Sell product in one shop and return it in another one
Restaurant: Managing payment when having multiple checkout desks,
 and multiple waiters (only taking orders)

This because currently:

PoS orders are only known by the cashier desk (pos.config) they were created from
One floor map can only be linked to one cashier desk at a time

More over, with the Self-Service coming along the way
(where kiosk orders must be accessible from a cashier desk),
this need must be supported.

For restaurant, floor plans can be linked to multipleÂ cashier desks,
ongoing orders are shared between trusted PoS config
(through floor plans for restaurant and according to
the setting "Trusted PoS config" for the retails),
and past orders can be accessible from any desks within a same DB.

closes odoo/odoo#109216

Related: odoo/upgrade#4393
Related: odoo/enterprise#37955
Signed-off-by: Trinh Jacky (trj) <trj@odoo.com>

================================= pseudo patch: =================================

--- a/addons/pos_restaurant/models/pos_config.py
+++ b/addons/pos_restaurant/models/pos_config.py
@@ -10,7 +10,7 @@ class PosConfig(models.Model):
     iface_splitbill = fields.Boolean(string='Bill Splitting', help='Enables Bill Splitting in the Point of Sale.')
     iface_printbill = fields.Boolean(string='Bill Printing', help='Allows to print the Bill before payment.')
     iface_orderline_notes = fields.Boolean(string='Kitchen Notes', help='Allow custom kitchen notes on Orderlines.', default=True)
-    floor_ids = fields.One2many('restaurant.floor', 'pos_config_id', string='Restaurant Floors', help='The restaurant floors served by this point of sale.')
+    floor_ids = fields.Many2many('restaurant.floor', string='Restaurant Floors', help='The restaurant floors served by this point of sale.')
     printer_ids = fields.Many2many('restaurant.printer', 'pos_config_printer_rel', 'config_id', 'printer_id', string='Order Printers')
     is_table_management = fields.Boolean('Floors & Tables')
     is_order_printer = fields.Boolean('Order Printer')
@@ -26,7 +26,7 @@ class PosConfig(models.Model):
     def get_tables_order_count(self):
         """         """
         self.ensure_one()
-        tables = self.env['restaurant.table'].search([('floor_id.pos_config_id', 'in', self.ids)])
+        tables = self.env['restaurant.table'].search([('floor_id.pos_config_ids', '=', self.id)])
         domain = [('state', '=', 'draft'), ('table_id', 'in', tables.ids)]
 
         order_stats = self.env['pos.order'].read_group(domain, ['table_id'], 'table_id')

--- a/addons/pos_restaurant/models/pos_order.py
+++ b/addons/pos_restaurant/models/pos_order.py
@@ -24,144 +24,23 @@ class PosOrder(models.Model):
     customer_count = fields.Integer(string='Guests', help='The amount of customers that have been served by this order.', readonly=True)
     multiprint_resume = fields.Char(string='Multiprint Resume', help="Last printed state of the order")
 
-    def _get_pack_lot_lines(self, order_lines):
-        """Add pack_lot_lines to the order_lines.
-
-        The function doesn't return anything but adds the results directly to the order_lines.
-
-        :param order_lines: order_lines for which the pack_lot_lines are to be requested.
-        :type order_lines: pos.order.line.
-        """
-        pack_lots = self.env['pos.pack.operation.lot'].search_read(
-                domain = [('pos_order_line_id', 'in', [order_line['id'] for order_line in order_lines])],
-                fields = [
-                    'id',
-                    'lot_name',
-                    'pos_order_line_id'
-                    ])
-        for pack_lot in pack_lots:
-            pack_lot['order_line'] = pack_lot['pos_order_line_id'][0]
-            pack_lot['server_id'] = pack_lot['id']
-
-            del pack_lot['pos_order_line_id']
-            del pack_lot['id']
-
-        for order_line_id, pack_lot_ids in groupby(pack_lots, key=lambda x:x['order_line']):
-            next(order_line for order_line in order_lines if order_line['id'] == order_line_id)['pack_lot_ids'] = list(pack_lot_ids)
-
     def _get_fields_for_order_line(self):
         fields = super(PosOrder, self)._get_fields_for_order_line()
         fields.extend([
-            'id',
-            'discount',
-            'product_id',
-            'price_unit',
-            'order_id',
-            'qty',
             'note',
             'uuid',
             'mp_skip',
-            'full_product_name',
-            'customer_note',
-            'price_extra',
         ])
         return fields
 
-    def _prepare_order_line(self, order_line):
-        """Method that will allow the cleaning of values to send the correct information.
-        :param order_line: order_line that will be cleaned.
-        :type order_line: pos.order.line.
-        :returns: dict -- dict representing the order line's values.
-        """
-        order_line = super(PosOrder, self)._prepare_order_line(order_line)
-        order_line["product_id"] = order_line["product_id"][0]
-        order_line["server_id"] = order_line["id"]
-
-        del order_line["id"]
-        if not "pack_lot_ids" in order_line:
-            order_line["pack_lot_ids"] = []
-        else:
-            order_line["pack_lot_ids"] = [[0, 0, lot] for lot in order_line["pack_lot_ids"]]
-        return order_line
-
-    def _get_order_lines(self, orders):
-        """Add pos_order_lines to the orders.
-
-        The function doesn't return anything but adds the results directly to the orders.
-
-        :param orders: orders for which the order_lines are to be requested.
-        :type orders: pos.order.
-        """
-        order_lines = self.env['pos.order.line'].search_read(
-                domain = [('order_id', 'in', [to['id'] for to in orders])],
-                fields = self._get_fields_for_order_line())
-
-        if order_lines != []:
-            self._get_pack_lot_lines(order_lines)
-
-        extended_order_lines = []
-        for order_line in order_lines:
-            extended_order_lines.append([0, 0, self._prepare_order_line(order_line)])
-
-        for order_id, order_lines in groupby(extended_order_lines, key=lambda x:x[2]['order_id']):
-            next(order for order in orders if order['id'] == order_id[0])['lines'] = list(order_lines)
-
-    def _get_fields_for_payment_lines(self):
-        return [
-            'id',
-            'amount',
-            'pos_order_id',
-            'payment_method_id',
-            'card_type',
-            'cardholder_name',
-            'transaction_id',
-            'payment_status'
-            ]
-
-    def _get_payments_lines_list(self, orders):
-        payment_lines = self.env['pos.payment'].search_read(
-                domain = [('pos_order_id', 'in', [po['id'] for po in orders])],
-                fields = self._get_fields_for_payment_lines())
-
-        extended_payment_lines = []
-        for payment_line in payment_lines:
-            payment_line['server_id'] = payment_line['id']
-            payment_line['payment_method_id'] = payment_line['payment_method_id'][0]
-
-            del payment_line['id']
-            extended_payment_lines.append([0, 0, payment_line])
-        return extended_payment_lines
-
-    def _get_payment_lines(self, orders):
-        """Add account_bank_statement_lines to the orders.
-
-        The function doesn't return anything but adds the results directly to the orders.
-
-        :param orders: orders for which the payment_lines are to be requested.
-        :type orders: pos.order.
-        """
-        extended_payment_lines = self._get_payments_lines_list(orders)
-        for order_id, payment_lines in groupby(extended_payment_lines, key=lambda x:x[2]['pos_order_id']):
-            next(order for order in orders if order['id'] == order_id[0])['statement_ids'] = list(payment_lines)
-
     def _get_fields_for_draft_order(self):
-        return [
-            'id',
-            'pricelist_id',
-            'partner_id',
-            'sequence_number',
-            'session_id',
-            'pos_reference',
-            'create_uid',
-            'create_date',
-            'customer_count',
-            'fiscal_position_id',
+        fields = super()._get_fields_for_draft_order()
+        fields.extend([
             'table_id',
-            'to_invoice',
+            'customer_count',
             'multiprint_resume',
-            'access_token',
-            'ticket_code',
-        ]
+        ])
+        return fields
 
     def _get_domain_for_draft_orders(self, table_ids):
         """ Get the domain to search for draft orders on a table.
@@ -189,48 +68,16 @@ class PosOrder(models.Model):
         self._get_order_lines(table_orders)
         self._get_payment_lines(table_orders)
 
-        for order in table_orders:
-            order['pos_session_id'] = order['session_id'][0]
-            order['uid'] = search(r"\d{5,}-\d{3,}-\d{4,}", order['pos_reference']).group(0)
-            order['name'] = order['pos_reference']
-            order['creation_date'] = order['create_date']
-            order['server_id'] = order['id']
-            if order['fiscal_position_id']:
-                order['fiscal_position_id'] = order['fiscal_position_id'][0]
-            if order['pricelist_id']:
-                order['pricelist_id'] = order['pricelist_id'][0]
-            if order['partner_id']:
-                order['partner_id'] = order['partner_id'][0]
-            if order['table_id']:
-                order['table_id'] = order['table_id'][0]
-
-            if not 'lines' in order:
-                order['lines'] = []
-            if not 'statement_ids' in order:
-                order['statement_ids'] = []
-
-            del order['id']
-            del order['session_id']
-            del order['pos_reference']
-            del order['create_date']
+        self._prepare_order(table_orders)
 
         return table_orders
 
     @api.model
-    def remove_from_ui(self, server_ids):
-        """ Remove orders from the frontend PoS application
-
-        Remove orders from the server by id.
-        :param server_ids: list of the id's of orders to remove from the server.
-        :type server_ids: list.
-        :returns: list -- list of db-ids for the removed orders.
-        """
-        orders = self.search([('id', 'in', server_ids), ('state', '=', 'draft')])
-        orders.write({'state': 'cancel'})
-        # TODO Looks like delete cascade is a better solution.
-        orders.mapped('payment_ids').sudo().unlink()
-        orders.sudo().unlink()
-        return orders.ids
+    def _prepare_order(self, orders):
+        super(PosOrder, self)._prepare_order(orders)
+        for order in orders:
+            if order['table_id']:
+                order['table_id'] = order['table_id'][0]
 
     def set_tip(self, tip_line_vals):
         """Set tip to `self` based on values in `tip_line_vals`."""

--- a/addons/pos_restaurant/models/pos_restaurant.py
+++ b/addons/pos_restaurant/models/pos_restaurant.py
@@ -12,7 +12,7 @@ class RestaurantFloor(models.Model):
     _order = "sequence, name"
 
     name = fields.Char('Floor Name', required=True)
-    pos_config_id = fields.Many2one('pos.config', string='Point of Sale')
+    pos_config_ids = fields.Many2many('pos.config', string='Point of Sales', domain="[('module_pos_restaurant', '=', True)]")
     background_image = fields.Binary('Background Image')
     background_color = fields.Char('Background Color', help='The background color of the floor in a html-compatible format', default='rgb(210, 210, 210)')
     table_ids = fields.One2many('restaurant.table', 'floor_id', string='Tables')
@@ -21,7 +21,7 @@ class RestaurantFloor(models.Model):
 
     @api.ondelete(at_uninstall=False)
     def _unlink_except_active_pos_session(self):
-        confs = self.mapped('pos_config_id').filtered(lambda c: c.is_table_management == True)
+        confs = self.mapped('pos_config_ids').filtered(lambda c: c.is_table_management)
         opened_session = self.env['pos.session'].search([('config_id', 'in', confs.ids), ('state', '!=', 'closed')])
         if opened_session:
             error_msg = _("You cannot remove a floor that is used in a PoS session, close the session(s) first: \n")
@@ -34,12 +34,11 @@ class RestaurantFloor(models.Model):
 
     def write(self, vals):
         for floor in self:
-            if floor.pos_config_id.has_active_session and (vals.get('pos_config_id') or vals.get('active')) :
-                raise UserError(
-                    'Please close and validate the following open PoS Session before modifying this floor.\n'
-                    'Open session: %s' % (' '.join(floor.pos_config_id.mapped('name')),))
-            if vals.get('pos_config_id') and floor.pos_config_id.id and vals.get('pos_config_id') != floor.pos_config_id.id:
-                raise UserError(_('The %s is already used in another Pos Config.', floor.name))
+            for config in floor.pos_config_ids:
+                if config.has_active_session and (vals.get('pos_config_ids') or vals.get('active')):
+                    raise UserError(
+                        'Please close and validate the following open PoS Session before modifying this floor.\n'
+                        'Open session: %s' % (' '.join(config.mapped('name')),))
         return super(RestaurantFloor, self).write(vals)
 
 
@@ -81,7 +80,7 @@ class RestaurantTable(models.Model):
 
     @api.ondelete(at_uninstall=False)
     def _unlink_except_active_pos_session(self):
-        confs = self.mapped('floor_id').mapped('pos_config_id').filtered(lambda c: c.is_table_management == True)
+        confs = self.mapped('floor_id').mapped('pos_config_ids').filtered(lambda c: c.is_table_management)
         opened_session = self.env['pos.session'].search([('config_id', 'in', confs.ids), ('state', '!=', 'closed')])
         if opened_session:
             error_msg = _("You cannot remove a table that is used in a PoS session, close the session(s) first.")

--- a/addons/pos_restaurant/models/pos_session.py
+++ b/addons/pos_restaurant/models/pos_session.py
@@ -19,9 +19,8 @@ class PosSession(models.Model):
     def _loader_params_restaurant_floor(self):
         return {
             'search_params': {
-                'domain': [('pos_config_id', '=', self.config_id.id)],
+                'domain': [('pos_config_ids', '=', self.config_id.id)],
                 'fields': ['name', 'background_color', 'table_ids', 'sequence'],
-                'order': 'sequence',
             },
         }
 

--- a/addons/pos_restaurant/models/res_config_settings.py
+++ b/addons/pos_restaurant/models/res_config_settings.py
@@ -6,10 +6,7 @@ from odoo import fields, models, api
 class ResConfigSettings(models.TransientModel):
     _inherit = 'res.config.settings'
 
-    def _get_floors_domain(self):
-        return ['|', ('pos_config_id', 'in', self.pos_config_id.ids), ('pos_config_id', '=', False)]
-
-    pos_floor_ids = fields.One2many(related='pos_config_id.floor_ids', readonly=False, domain=lambda self: self._get_floors_domain())
+    pos_floor_ids = fields.Many2many(related='pos_config_id.floor_ids', readonly=False)
     pos_iface_orderline_notes = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False)
     pos_iface_printbill = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False)
     pos_iface_splitbill = fields.Boolean(compute='_compute_pos_module_pos_restaurant', store=True, readonly=False)
