PR: https://github.com/odoo/odoo/pull/47229

From: efd5401ee1efbdd388d9623d59a96353e93bf21d
From: Thibault Delavall√©e
Date: 2020-03-23 10:07:46

Breaking data model changes scores: del:3 + add:0, change matches:
-    campaign_id = fields.Many2one('utm.campaign', 'Campaign', related="sale_order_id.campaign_id", store=True)
-    source_id = fields.Many2one('utm.source', 'Source', related="sale_order_id.source_id", store=True)
-    medium_id = fields.Many2one('utm.medium', 'Medium', related="sale_order_id.medium_id", store=True)

Total Changes: 24

[REF] event: allow to use UTMs directly in event

PURPOSE

Allow to use UTMs directly in event, notably to be able to sort or make
statistics on registrations.

SPECIFICATIONS

Move all UTMs fields definition to event. In base event module they are
set by hand or through links (when using mass mailing for example).Shared
links with utm bits defined in it allows to track marketing statistics
on registrations.

In event_sale registrations can be linked to a sale order. UTM information
are copied from the sale order to the registration itself. Order defined utm
always erase default one coming from event.

LINKS

Task ID 2212297
Community PR odoo/odoo#47229

Related: odoo/upgrade#913
Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/event_sale/models/event_registration.py
+++ b/addons/event_sale/models/event_registration.py
@@ -12,9 +12,27 @@ class EventRegistration(models.Model):
     # TDE FIXME: maybe add an onchange on sale_order_id
     sale_order_id = fields.Many2one('sale.order', string='Source Sales Order', ondelete='cascade')
     sale_order_line_id = fields.Many2one('sale.order.line', string='Sales Order Line', ondelete='cascade')
-    campaign_id = fields.Many2one('utm.campaign', 'Campaign', related="sale_order_id.campaign_id", store=True)
-    source_id = fields.Many2one('utm.source', 'Source', related="sale_order_id.source_id", store=True)
-    medium_id = fields.Many2one('utm.medium', 'Medium', related="sale_order_id.medium_id", store=True)
+    utm_campaign_id = fields.Many2one(compute='_compute_utm_campaign_id', copy=True, readonly=False, store=True)
+    utm_source_id = fields.Many2one(compute='_compute_utm_source_id', copy=True, readonly=False, store=True)
+    utm_medium_id = fields.Many2one(compute='_compute_utm_medium_id', copy=True, readonly=False, store=True)
+
+    @api.depends('sale_order_id')
+    def _compute_utm_campaign_id(self):
+        for registration in self:
+            if registration.sale_order_id.campaign_id:
+                registration.utm_campaign_id = registration.sale_order_id.campaign_id
+
+    @api.depends('sale_order_id')
+    def _compute_utm_source_id(self):
+        for registration in self:
+            if registration.sale_order_id.source_id:
+                registration.utm_source_id = registration.sale_order_id.source_id
+
+    @api.depends('sale_order_id')
+    def _compute_utm_medium_id(self):
+        for registration in self:
+            if registration.sale_order_id.medium_id:
+                registration.utm_medium_id = registration.sale_order_id.medium_id
 
     def action_view_sale_order(self):
         action = self.env.ref('sale.action_orders').read()[0]
