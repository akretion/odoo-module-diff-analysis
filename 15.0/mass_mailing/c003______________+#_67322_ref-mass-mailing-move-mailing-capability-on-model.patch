PR: https://github.com/odoo/odoo/pull/67322

From: ed508ee1bd56847e235a4f8e487e827cc34e3a87
From: Thibault Delavall√©e
Date: 2021-05-26 07:57:47

Structural Changes: 3
Total Changes: 101

[REF] mass_mailing: move mailing capability on model

PURPOSE

Remove hardcoded list of models on which mailing is possible. Indeed it is
not modular and not really smart with enterprise code not being reachable
in community.

SPECIFICATIONS

Replace hardcoded list of models on which mailing (both mail or sms) is
possible by a computed searchable field on ``ir.model`` based on a class
attribute.

It allows to cleanly define models having mass mailing capabilities and add
this attribute in bridge modules (when existing) or directly on base model
definition to avoid bridge modules.

In this commit we introduce a basic ``_mailing_enabled`` class attribute
activating mailing on model.

Mailing models may also have a ``_mailing_get_default_domain`` method allowing
to define a custom default domain when sending a marketing mailing on records
on this class.

Mailing models can now define a ``_mailing_get_opt_out_list(_sms)`` method
allowing to define custom behavior to fetch opt-outed records. Instead of
defining a model-based behavior on Mailing itself, it now calls the model
defined one. We still have two methods, one for mailing and one for SMS
opt out computation as it relies on different underlying models and fields.

LINKS

Task ID-2431217
COM PR odoo/odoo#67322
ENT PR odoo/enterprise#16876
UPG PR odoo/upgrade#2236

================================= pseudo patch: =================================

--- a/addons/mass_mailing/models/__init__.py
+++ b/addons/mass_mailing/models/__init__.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from . import ir_model
 from . import link_tracker
 from . import mailing_contact
 from . import mailing_list
@@ -10,6 +11,7 @@ from . import mail_mail
 from . import mail_render_mixin
 from . import mail_thread
 from . import res_config_settings
+from . import res_partner
 from . import res_users
 from . import utm
 from . import res_company

--- a/None
+++ b/addons/mass_mailing/models/ir_model.py
@@ -0,0 +1,34 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models, _
+
+
+class IrModel(models.Model):
+    _inherit = 'ir.model'
+
+    is_mailing_enabled = fields.Boolean(
+        string="Mailing Enabled",
+        compute='_compute_is_mailing_enabled', search='_search_is_mailing_enabled',
+        help="Whether this model supports marketing mailing capabilities (notably email and SMS).",
+    )
+
+    def _compute_is_mailing_enabled(self):
+        for model in self:
+            model.is_mailing_enabled = getattr(self.env[model.model], '_mailing_enabled', False)
+
+    def _search_is_mailing_enabled(self, operator, value):
+        if operator not in ('=', '!='):
+            raise ValueError(_("Searching Mailing Enabled models supports only direct search using '='' or '!='."))
+
+        valid_models = self.env['ir.model']
+        for model in self.search([]):
+            if model.model not in self.env or model.is_transient():
+                continue
+            if getattr(self.env[model.model], '_mailing_enabled', False):
+                valid_models |= model
+
+        search_is_mailing_enabled = (operator == '=' and value) or (operator == '!=' and not value)
+        if search_is_mailing_enabled:
+            return [('id', 'in', valid_models.ids)]
+        return [('id', 'not in', valid_models.ids)]

--- a/addons/mass_mailing/models/mailing.py
+++ b/addons/mass_mailing/models/mailing.py
@@ -10,7 +10,6 @@ import re
 import threading
 import werkzeug.urls
 from ast import literal_eval
-from datetime import datetime
 from dateutil.relativedelta import relativedelta
 from werkzeug.urls import url_join
 
@@ -20,17 +19,6 @@ from odoo.osv import expression
 
 _logger = logging.getLogger(__name__)
 
-MASS_MAILING_BUSINESS_MODELS = [
-    'crm.lead',
-    'event.registration',
-    'hr.applicant',
-    'res.partner',
-    'event.track',
-    'sale.order',
-    'mailing.list',
-    'mailing.contact'
-]
-
 # Syntax of the data URL Scheme: https://tools.ietf.org/html/rfc2397#section-3
 # Used to find inline images
 image_re = re.compile(r"data:(image/[A-Za-z]+);base64,(.*)")
@@ -128,7 +116,7 @@ class MassMailing(models.Model):
     mailing_model_real = fields.Char(string='Recipients Real Model', compute='_compute_model')
     mailing_model_id = fields.Many2one(
         'ir.model', string='Recipients Model', ondelete='cascade', required=True,
-        domain=[('model', 'in', MASS_MAILING_BUSINESS_MODELS)],
+        domain=[('is_mailing_enabled', '=', True)],
         default=lambda self: self.env.ref('mass_mailing.model_mailing_list').id)
     mailing_model_name = fields.Char(
         string='Recipients Model Name', related='mailing_model_id.model',
@@ -485,20 +473,16 @@ class MassMailing(models.Model):
     # ------------------------------------------------------
 
     def _get_opt_out_list(self):
-        """Returns a set of emails opted-out in target model"""
+        """ Give list of opt-outed emails, depending on specific model-based
+        computation if available.
+
+        :return list: opt-outed emails, preferably normalized (aka not records)
+        """
         self.ensure_one()
         opt_out = {}
         target = self.env[self.mailing_model_real]
-        if self.mailing_model_real == "mailing.contact":
-            # if user is opt_out on One list but not on another
-            # or if two user with same email address, one opted in and the other one opted out, send the mail anyway
-            # TODO DBE Fixme : Optimise the following to get real opt_out and opt_in
-            target_list_contacts = self.env['mailing.contact.subscription'].search(
-                [('list_id', 'in', self.contact_list_ids.ids)])
-            opt_out_contacts = target_list_contacts.filtered(lambda rel: rel.opt_out).mapped('contact_id.email_normalized')
-            opt_in_contacts = target_list_contacts.filtered(lambda rel: not rel.opt_out).mapped('contact_id.email_normalized')
-            opt_out = set(c for c in opt_out_contacts if c not in opt_in_contacts)
-
+        if hasattr(self.env[self.mailing_model_name], '_mailing_get_opt_out_list'):
+            opt_out = self.env[self.mailing_model_name]._mailing_get_opt_out_list(self)
             _logger.info(
                 "Mass-mailing %s targets %s, blacklist: %s emails",
                 self, target._name, len(opt_out))
@@ -848,8 +832,8 @@ class MassMailing(models.Model):
 
     def _get_default_mailing_domain(self):
         mailing_domain = []
-        if self.mailing_model_name == 'mailing.list' and self.contact_list_ids:
-            mailing_domain = [('list_ids', 'in', self.contact_list_ids.ids)]
+        if hasattr(self.env[self.mailing_model_name], '_mailing_get_default_domain'):
+            mailing_domain = self.env[self.mailing_model_name]._mailing_get_default_domain(self)
 
         if self.mailing_type == 'mail' and 'is_blacklisted' in self.env[self.mailing_model_name]._fields:
             mailing_domain = expression.AND([[('is_blacklisted', '=', False)], mailing_domain])

--- a/addons/mass_mailing/models/mailing_contact.py
+++ b/addons/mass_mailing/models/mailing_contact.py
@@ -54,6 +54,7 @@ class MassMailingContact(models.Model):
     _inherit = ['mail.thread.blacklist']
     _description = 'Mailing Contact'
     _order = 'email'
+    _mailing_enabled = True
 
     def default_get(self, fields):
         """ When coming from a mailing list we may have a default_list_ids context

--- a/addons/mass_mailing/models/mailing_list.py
+++ b/addons/mass_mailing/models/mailing_list.py
@@ -10,6 +10,7 @@ class MassMailingList(models.Model):
     _name = 'mailing.list'
     _order = 'name'
     _description = 'Mailing List'
+    _mailing_enabled = True
 
     name = fields.Char(string='Mailing List', required=True)
     active = fields.Boolean(default=True)
@@ -224,6 +225,24 @@ class MassMailingList(models.Model):
     def close_dialog(self):
         return {'type': 'ir.actions.act_window_close'}
 
+    # ------------------------------------------------------
+    # MAILING
+    # ------------------------------------------------------
+
+    def _mailing_get_default_domain(self, mailing):
+        return [('list_ids', 'in', mailing.contact_list_ids.ids)]
+
+    def _mailing_get_opt_out_list(self, mailing):
+        """ Check subscription on all involved mailing lists. If user is opt_out
+        on one list but not on another if two users with same email address, one
+        opted in and the other one opted out, send the mail anyway. """
+        # TODO DBE Fixme : Optimize the following to get real opt_out and opt_in
+        subscriptions = self.subscription_ids if self else mailing.contact_list_ids.subscription_ids
+        opt_out_contacts = subscriptions.filtered(lambda rel: rel.opt_out).mapped('contact_id.email_normalized')
+        opt_in_contacts = subscriptions.filtered(lambda rel: not rel.opt_out).mapped('contact_id.email_normalized')
+        opt_out = set(c for c in opt_out_contacts if c not in opt_in_contacts)
+        return opt_out
+
     # ------------------------------------------------------
     # UTILITY
     # ------------------------------------------------------

--- a/None
+++ b/addons/mass_mailing/models/res_partner.py
@@ -0,0 +1,9 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models
+
+
+class Partner(models.Model):
+    _inherit = 'res.partner'
+    _mailing_enabled = True
