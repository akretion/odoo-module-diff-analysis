PR: https://github.com/odoo/odoo/pull/56415

From: c121a246f16899735306266a3a12b526e08e7620
From: Simon Genin (ges)
Date: 2020-09-01 08:58:40

Structural Changes: 15
Total Changes: 578

[IMP] base: Document layout preview improvements

The document layout preview is a complete defferent simplified template
with its own css that replicates at best the different styles.
It does not have the external layout features and lack of fidelity.

The new preview actually use the real documents templates and put the
result in an iframe. It now has a high fidelity, though not perfect.

The goal is for a better onboarding, where clients see easely how
documents will look if they had an app to generate them. Of course, the
data on the document is a false invoice.

Refactor all this from base to web.

Task ID 2304177

closes odoo/odoo#56415

Signed-off-by: Lucas Perais (lpe) <lpe@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/__manifest__.py
+++ b/odoo/addons/base/__manifest__.py
@@ -58,7 +58,6 @@ The kernel of Odoo, needed for all installation.
         'wizard/base_export_language_views.xml',
         'wizard/base_update_translations_views.xml',
         'wizard/base_partner_merge_views.xml',
-        'wizard/base_document_layout_views.xml',
         'data/ir_actions_data.xml',
         'data/ir_demo_failure_data.xml',
         'views/res_company_views.xml',

--- a/odoo/addons/base/models/ir_actions_report.py
+++ b/odoo/addons/base/models/ir_actions_report.py
@@ -819,7 +819,6 @@ class IrActionsReport(models.Model):
 
         data = data and dict(data) or {}
 
-
         if report_model is not None:
             data.update(report_model._get_report_values(docids, data=data))
         else:
@@ -866,7 +865,7 @@ class IrActionsReport(models.Model):
 
         discard_logo_check = self.env.context.get('discard_logo_check')
         if self.env.is_admin() and not self.env.company.external_report_layout_id and config and not discard_logo_check:
-            action = self.env["ir.actions.actions"]._for_xml_id("base.action_base_document_layout_configurator")
+            action = self.env["ir.actions.actions"]._for_xml_id("web.action_base_document_layout_configurator")
             ctx = action.get('context')
             py_ctx = json.loads(ctx) if ctx else {}
             report_action['close_on_report_download'] = True

--- a/odoo/addons/base/models/report_layout.py
+++ b/odoo/addons/base/models/report_layout.py
@@ -7,9 +7,11 @@ from odoo import fields, models
 class ReportLayout(models.Model):
     _name = "report.layout"
     _description = 'Report Layout'
+    _order = 'sequence'
 
     view_id = fields.Many2one('ir.ui.view', 'Document Template', required=True)
     image = fields.Char(string="Preview image src")
     pdf = fields.Char(string="Preview pdf src")
 
+    sequence = fields.Integer(default=50)
     name = fields.Char()

--- a/odoo/addons/base/security/ir.model.access.csv
+++ b/odoo/addons/base/security/ir.model.access.csv
@@ -118,4 +118,3 @@
 "access_base_update_translations","access.base.update.translations","model_base_update_translations","base.group_system",1,1,1,0
 "access_base_partner_merge_line","access.base.partner.merge.line","model_base_partner_merge_line","base.group_partner_manager",1,1,1,0
 "access_base_partner_merge_automatic_wizard","access.base.partner.merge.automatic.wizard","model_base_partner_merge_automatic_wizard","base.group_partner_manager",1,1,1,0
-"access_base_document_layout","access.base.document.layout","model_base_document_layout","base.group_system",1,1,1,0

--- a/odoo/addons/base/tests/__init__.py
+++ b/odoo/addons/base/tests/__init__.py
@@ -42,7 +42,6 @@ from . import test_res_partner_bank
 from . import test_res_users
 from . import test_reports
 from . import test_tests_tags
-from . import test_base_document_layout
 from . import test_form_create
 from . import test_cloc
 from . import test_pdf

--- a/odoo/addons/base/tests/overwatch.jpg
+++ b/odoo/addons/base/tests/overwatch.jpg
Binary files a/odoo/addons/base/tests/overwatch.jpg and /dev/null differ

--- a/odoo/addons/base/tests/test_base_document_layout.py
+++ b/None
@@ -1,212 +0,0 @@
-import os
-from PIL import Image
-from functools import partial
-
-from odoo.tests import TransactionCase, tagged, Form
-from odoo.tools import frozendict, image_to_base64, hex_to_rgb
-
-
-dir_path = os.path.dirname(os.path.realpath(__file__))
-_file_cache = {}
-
-
-class TestBaseDocumentLayoutHelpers(TransactionCase):
-    #
-    #   Public
-    #
-    def setUp(self):
-        super(TestBaseDocumentLayoutHelpers, self).setUp()
-        self.color_fields = ['primary_color', 'secondary_color']
-        self.company = self.env.company
-        self.css_color_error = 0
-        self._set_templates_and_layouts()
-        self._set_images()
-
-    def assertColors(self, checked_obj, expected):
-        _expected_getter = expected.get if isinstance(expected, dict) else partial(getattr, expected)
-        for fname in self.color_fields:
-            color1 = getattr(checked_obj, fname)
-            color2 = _expected_getter(fname)
-            if self.css_color_error:
-                self._compare_colors_rgb(color1, color2)
-            else:
-                self.assertEqual(color1, color2)
-
-    #
-    #   Private
-    #
-    def _compare_colors_rgb(self, color1, color2):
-        self.assertEqual(bool(color1), bool(color2))
-        if not color1:
-            return
-        color1 = hex_to_rgb(color1)
-        color2 = hex_to_rgb(color2)
-        self.assertEqual(len(color1), len(color2))
-        for i in range(len(color1)):
-            self.assertAlmostEqual(color1[i], color2[i], delta=self.css_color_error)
-
-    def _get_images_for_test(self):
-        return ['overwatch.jpg', 'odoo.jpg']
-
-    def _set_images(self):
-        for fname in self._get_images_for_test():
-            fname_split = fname.split('.')
-            if not fname_split[0] in _file_cache:
-                with Image.open(os.path.join(dir_path, fname), 'r') as img:
-                    base64_img = image_to_base64(img, 'JPEG')
-                    primary, secondary = self.env['base.document.layout'].create(
-                        {})._parse_logo_colors(base64_img)
-                    _img = frozendict({
-                        'img': base64_img,
-                        'colors': {
-                            'primary_color': primary,
-                            'secondary_color': secondary,
-                        },
-                    })
-                    _file_cache[fname_split[0]] = _img
-        self.company_imgs = frozendict(_file_cache)
-
-    def _set_templates_and_layouts(self):
-        self.layout_template1 = self.env['ir.ui.view'].create({
-            'name': 'layout_template1',
-            'key': 'layout_template1',
-            'type': 'qweb',
-            'arch': '''<div></div>''',
-        })
-        self.env['ir.model.data'].create({
-            'name': self.layout_template1.name,
-            'model': 'ir.ui.view',
-            'module': 'base',
-            'res_id': self.layout_template1.id,
-        })
-        self.default_colors = {
-            'primary_color': '#000000',
-            'secondary_color': '#000000',
-        }
-        self.report_layout1 = self.env['report.layout'].create({
-            'view_id': self.layout_template1.id,
-            'name': 'report_%s' % self.layout_template1.name,
-        })
-        self.layout_template2 = self.env['ir.ui.view'].create({
-            'name': 'layout_template2',
-            'key': 'layout_template2',
-            'type': 'qweb',
-            'arch': '''<div></div>''',
-        })
-        self.env['ir.model.data'].create({
-            'name': self.layout_template2.name,
-            'model': 'ir.ui.view',
-            'module': 'base',
-            'res_id': self.layout_template2.id,
-        })
-        self.report_layout2 = self.env['report.layout'].create({
-            'view_id': self.layout_template2.id,
-            'name': 'report_%s' % self.layout_template2.name,
-        })
-
-
-@tagged('document_layout')
-class TestBaseDocumentLayout(TestBaseDocumentLayoutHelpers):
-    # Logo change Tests
-    def test_company_no_color_change_logo(self):
-        """When neither a logo nor the colors are set
-        The wizard displays the colors of the report layout
-        Changing logo means the colors on the wizard change too
-        Emptying the logo works and doesn't change the colors"""
-        self.company.write({
-            'primary_color': False,
-            'secondary_color': False,
-            'logo': False,
-            'external_report_layout_id': self.env.ref('base.layout_template1').id,
-            'paperformat_id': self.env.ref('base.paperformat_us').id,
-        })
-        default_colors = self.default_colors
-        with Form(self.env['base.document.layout']) as doc_layout:
-            self.assertColors(doc_layout, default_colors)
-            self.assertEqual(doc_layout.company_id, self.company)
-            doc_layout.logo = self.company_imgs['overwatch']['img']
-
-            self.assertColors(doc_layout, self.company_imgs['overwatch']['colors'])
-
-            doc_layout.logo = ''
-            self.assertColors(doc_layout, self.company_imgs['overwatch']['colors'])
-            self.assertEqual(doc_layout.logo, '')
-
-    def test_company_no_color_but_logo_change_logo(self):
-        """When company colors are not set, but a logo is,
-        the wizard displays the computed colors from the logo"""
-        self.company.write({
-            'primary_color': '#ff0080',
-            'secondary_color': '#00ff00',
-            'logo': self.company_imgs['overwatch']['img'],
-            'paperformat_id': self.env.ref('base.paperformat_us').id,
-        })
-
-        with Form(self.env['base.document.layout']) as doc_layout:
-            self.assertColors(doc_layout, self.company)
-            doc_layout.logo = self.company_imgs['odoo']['img']
-            self.assertColors(doc_layout, self.company_imgs['odoo']['colors'])
-
-    def test_company_colors_change_logo(self):
-        """changes of the logo implies displaying the new computed colors"""
-        self.company.write({
-            'primary_color': '#ff0080',
-            'secondary_color': '#00ff00',
-            'logo': False,
-            'paperformat_id': self.env.ref('base.paperformat_us').id,
-        })
-
-        with Form(self.env['base.document.layout']) as doc_layout:
-            self.assertColors(doc_layout, self.company)
-            doc_layout.logo = self.company_imgs['odoo']['img']
-            self.assertColors(doc_layout, self.company_imgs['odoo']['colors'])
-
-    def test_company_colors_and_logo_change_logo(self):
-        """The colors of the company may differ from the one the logo computes
-        Opening the wizard in these condition displays the company's colors
-        When the logo changes, colors must change according to the logo"""
-        self.company.write({
-            'primary_color': '#ff0080',
-            'secondary_color': '#00ff00',
-            'logo': self.company_imgs['overwatch']['img'],
-            'paperformat_id': self.env.ref('base.paperformat_us').id,
-        })
-
-        with Form(self.env['base.document.layout']) as doc_layout:
-            self.assertColors(doc_layout, self.company)
-            doc_layout.logo = self.company_imgs['odoo']['img']
-            self.assertColors(doc_layout, self.company_imgs['odoo']['colors'])
-
-    # Layout change tests
-    def test_company_colors_reset_colors(self):
-        """Reset the colors when they differ from the ones originally
-        computed from the company logo"""
-        self.company.write({
-            'primary_color': '#ff0080',
-            'secondary_color': '#00ff00',
-            'logo': self.company_imgs['overwatch']['img'],
-            'paperformat_id': self.env.ref('base.paperformat_us').id,
-        })
-
-        with Form(self.env['base.document.layout']) as doc_layout:
-            self.assertColors(doc_layout, self.company)
-            doc_layout.primary_color = doc_layout.logo_primary_color
-            doc_layout.secondary_color = doc_layout.logo_secondary_color
-            self.assertColors(doc_layout, self.company_imgs['overwatch']['colors'])
-
-    # /!\ This case is NOT supported, and probably not supportable
-    # res.partner resizes manu-militari the image it is given
-    # so res.company._get_logo differs from res.partner.[default image]
-    # def test_company_no_colors_default_logo_and_layout_change_layout(self):
-    #     """When the default YourCompany logo is set, and no colors are set on company:
-    #     change wizard's color according to template"""
-    #     self.company.write({
-    #         'primary_color': False,
-    #         'secondary_color': False,
-    #         'external_report_layout_id': self.layout_template1.id,
-    #     })
-    #     default_colors = self.default_colors
-    #     with Form(self.env['base.document.layout']) as doc_layout:
-    #         self.assertColors(doc_layout, default_colors)
-    #         doc_layout.report_layout_id = self.report_layout2
-    #         self.assertColors(doc_layout, self.report_layout2)

--- a/odoo/addons/base/wizard/__init__.py
+++ b/odoo/addons/base/wizard/__init__.py
@@ -9,4 +9,3 @@ from . import base_module_uninstall
 from . import base_export_language
 from . import base_update_translations
 from . import base_partner_merge
-from . import base_document_layout

--- a/odoo/addons/base/wizard/base_document_layout.py
+++ b/None
@@ -1,189 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from odoo import api, fields, models, tools
-
-DEFAULT_PRIMARY = '#000000'
-DEFAULT_SECONDARY = '#000000'
-
-
-class BaseDocumentLayout(models.TransientModel):
-    """
-    Customise the company document layout and display a live preview
-    """
-
-    _name = 'base.document.layout'
-    _description = 'Company Document Layout'
-
-    company_id = fields.Many2one(
-        'res.company', default=lambda self: self.env.company, required=True)
-
-    logo = fields.Binary(related='company_id.logo', readonly=False)
-    preview_logo = fields.Binary(related='logo', string="Preview logo")
-    report_header = fields.Text(related='company_id.report_header', readonly=False)
-    report_footer = fields.Text(related='company_id.report_footer', readonly=False)
-    paperformat_id = fields.Many2one(related='company_id.paperformat_id', readonly=False)
-    external_report_layout_id = fields.Many2one(related='company_id.external_report_layout_id', readonly=False)
-
-    font = fields.Selection(related='company_id.font', readonly=False)
-    primary_color = fields.Char(related='company_id.primary_color', readonly=False)
-    secondary_color = fields.Char(related='company_id.secondary_color', readonly=False)
-
-    custom_colors = fields.Boolean(compute="_compute_custom_colors", readonly=False)
-    logo_primary_color = fields.Char(compute="_compute_logo_colors")
-    logo_secondary_color = fields.Char(compute="_compute_logo_colors")
-
-    report_layout_id = fields.Many2one('report.layout')
-    preview = fields.Html(compute='_compute_preview')
-
-    @api.depends('logo_primary_color', 'logo_secondary_color', 'primary_color', 'secondary_color')
-    def _compute_custom_colors(self):
-        for wizard in self:
-            logo_primary = wizard.logo_primary_color or ''
-            logo_secondary = wizard.logo_secondary_color or ''
-            # Force lower case on color to ensure that FF01AA == ff01aa
-            wizard.custom_colors = (
-                wizard.logo and wizard.primary_color and wizard.secondary_color
-                and not(
-                    wizard.primary_color.lower() == logo_primary.lower()
-                    and wizard.secondary_color.lower() == logo_secondary.lower()
-                )
-            )
-
-    @api.depends('logo')
-    def _compute_logo_colors(self):
-        for wizard in self:
-            if wizard._context.get('bin_size'):
-                wizard_for_image = wizard.with_context(bin_size=False)
-            else:
-                wizard_for_image = wizard
-            wizard.logo_primary_color, wizard.logo_secondary_color = wizard_for_image._parse_logo_colors()
-
-    @api.depends('report_layout_id', 'logo', 'font', 'primary_color', 'secondary_color')
-    def _compute_preview(self):
-        """ compute a qweb based preview to display on the wizard """
-        for wizard in self:
-            if wizard.report_layout_id:
-                ir_qweb = wizard.env['ir.qweb']
-                wizard.preview = ir_qweb._render('base.layout_preview', {'company': wizard})
-            else:
-                wizard.preview = False
-
-    @api.onchange('company_id')
-    def _onchange_company_id(self):
-        for wizard in self:
-            wizard.logo = wizard.company_id.logo
-            wizard.report_header = wizard.company_id.report_header
-            wizard.report_footer = wizard.company_id.report_footer
-            wizard.paperformat_id = wizard.company_id.paperformat_id
-            wizard.external_report_layout_id = wizard.company_id.external_report_layout_id
-            wizard.font = wizard.company_id.font
-            wizard.primary_color = wizard.company_id.primary_color
-            wizard.secondary_color = wizard.company_id.secondary_color
-            wizard_layout = wizard.env["report.layout"].search([
-                ('view_id.key', '=', wizard.company_id.external_report_layout_id.key)
-            ])
-            wizard.report_layout_id = wizard_layout or wizard_layout.search([], limit=1)
-
-            if not wizard.primary_color:
-                wizard.primary_color = wizard.logo_primary_color or DEFAULT_PRIMARY
-            if not wizard.secondary_color:
-                wizard.secondary_color = wizard.logo_secondary_color or DEFAULT_SECONDARY
-
-    @api.onchange('custom_colors')
-    def _onchange_custom_colors(self):
-        for wizard in self:
-            if wizard.logo and not wizard.custom_colors:
-                wizard.primary_color = wizard.logo_primary_color or DEFAULT_PRIMARY
-                wizard.secondary_color = wizard.logo_secondary_color or DEFAULT_SECONDARY
-
-    @api.onchange('report_layout_id')
-    def _onchange_report_layout_id(self):
-        for wizard in self:
-            wizard.external_report_layout_id = wizard.report_layout_id.view_id
-
-    @api.onchange('logo')
-    def _onchange_logo(self):
-        for wizard in self:
-            # It is admitted that if the user puts the original image back, it won't change colors
-            company = wizard.company_id
-            # at that point wizard.logo has been assigned the value present in DB
-            if wizard.logo == company.logo and company.primary_color and company.secondary_color:
-                continue
-
-            if wizard.logo_primary_color:
-                wizard.primary_color = wizard.logo_primary_color
-            if wizard.logo_secondary_color:
-                wizard.secondary_color = wizard.logo_secondary_color
-
-    def _parse_logo_colors(self, logo=None, white_threshold=225):
-        """
-        Identifies dominant colors
-
-        First resizes the original image to improve performance, then discards
-        transparent colors and white-ish colors, then calls the averaging
-        method twice to evaluate both primary and secondary colors.
-
-        :param logo: alternate logo to process
-        :param white_threshold: arbitrary value defining the maximum value a color can reach
-
-        :return colors: hex values of primary and secondary colors
-        """
-        self.ensure_one()
-        logo = logo or self.logo
-        if not logo:
-            return False, False
-
-        # The "===" gives different base64 encoding a correct padding
-        logo += b'===' if type(logo) == bytes else '==='
-        try:
-            # Catches exceptions caused by logo not being an image
-            image = tools.image_fix_orientation(tools.base64_to_image(logo))
-        except Exception:
-            return False, False
-
-        base_w, base_h = image.size
-        w = int(50 * base_w / base_h)
-        h = 50
-
-        # Converts to RGBA if no alpha detected
-        image_converted = image.convert(
-            'RGBA') if 'A' not in image.getbands() else image
-        image_resized = image_converted.resize((w, h))
-
-        colors = []
-        for color in image_resized.getcolors(w * h):
-            if not(color[1][0] > white_threshold and
-                   color[1][1] > white_threshold and
-                   color[1][2] > white_threshold) and color[1][3] > 0:
-                colors.append(color)
-
-        if not colors:  # May happen when the whole image is white
-            return False, False
-        primary, remaining = tools.average_dominant_color(colors)
-        secondary = tools.average_dominant_color(
-            remaining)[0] if len(remaining) > 0 else primary
-
-        # Lightness and saturation are calculated here.
-        # - If both colors have a similar lightness, the most colorful becomes primary
-        # - When the difference in lightness is too great, the brightest color becomes primary
-        l_primary = tools.get_lightness(primary)
-        l_secondary = tools.get_lightness(secondary)
-        if (l_primary < 0.2 and l_secondary < 0.2) or (l_primary >= 0.2 and l_secondary >= 0.2):
-            s_primary = tools.get_saturation(primary)
-            s_secondary = tools.get_saturation(secondary)
-            if s_primary < s_secondary:
-                primary, secondary = secondary, primary
-        elif l_secondary > l_primary:
-            primary, secondary = secondary, primary
-
-        return tools.rgb_to_hex(primary), tools.rgb_to_hex(secondary)
-
-    @api.model
-    def action_open_base_document_layout(self, action_ref=None):
-        if not action_ref:
-            action_ref = 'base.action_base_document_layout_configurator'
-        return self.env["ir.actions.actions"]._for_xml_id(action_ref)
-
-    def document_layout_save(self):
-        # meant to be overridden
-        return self.env.context.get('report_action') or {'type': 'ir.actions.act_window_close'}

--- a/odoo/addons/base/wizard/base_document_layout_views.xml
+++ b/None
@@ -1,168 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<odoo>
-    <data>
-        <record id="view_base_document_layout" model="ir.ui.view">
-            <field name="name">Document Layout</field>
-            <field name="model">base.document.layout</field>
-            <field name="arch" type="xml">
-                <form class="o_document_layout">
-                    <group>
-                        <group class="o_document_layout_company">
-                            <field name="company_id" invisible="1"/>
-                            <field name="external_report_layout_id" invisible="1" />
-                            <field name="logo_primary_color" invisible="1" />
-                            <field name="logo_secondary_color" invisible="1" />
-                            <field name="report_layout_id" widget="radio" string="Layout"/>
-                            <field name="logo" widget="image"/>
-                            <label for="primary_color" string="Colors" />
-                            <div class="o_document_layout_colors">
-                                <field name="primary_color" widget="color"/>
-                                <field name="secondary_color" widget="color"/>
-                                <field name="custom_colors" class="d-none" />
-                                <button class="btn btn-link" title="Reset to logo colors" attrs="{'invisible': [('custom_colors', '=', False)]}">
-                                    <label for="custom_colors" class="fa fa-refresh" string="" />
-                                </button>
-                            </div>
-                            <field name="font" widget="font"/>
-                            <field name="report_header" widget="char" placeholder="e.g. Global Business Solutions" />
-                            <field name="report_footer" string="Footer" placeholder="e.g. Opening hours, bank accounts (one per line)" />
-                            <field name="paperformat_id" required="1" />
-                        </group>
-                        <div class="o_document_layout_preview">
-                            <field name="preview_logo" widget="image" readonly="1" nolabel="1" class="o_document_layout_preview_logo" />
-                            <field name="preview" widget="html" class="o_document_layout_preview_html" />
-                        </div>
-                    </group>
-                    <footer>
-                        <button string="Save" class="btn-primary" type="object" name="document_layout_save"/>
-                        <button special="cancel" string="Cancel" />
-                    </footer>
-                </form>
-            </field>
-        </record>
-
-        <record id="action_base_document_layout_configurator" model="ir.actions.act_window">
-            <field name="type">ir.actions.act_window</field>
-            <field name="name">Configure your document layout</field>
-            <field name="view_mode">form</field>
-            <field name="target">new</field>
-            <field name="res_model">base.document.layout</field>
-            <field name="view_id" ref="base.view_base_document_layout"/>
-        </record>
-
-    <!-- this template is used by the BaseDocumentLayout wizard to display a live preview of a dummy report -->
-    <template id="layout_preview" name="layout preview">
-        <!-- compute some layout specific variables -->
-        <t t-set="footer_color" t-value="'black'" />
-        <t t-set="table_border_color" t-value="'black'" />
-
-        <t t-if="company.report_layout_id.name == 'Background'"><t t-set="footer_color" t-value="company.secondary_color" /></t>
-        <t t-if="company.report_layout_id.name in ['Background', 'Clean']"><t t-set="table_border_color" t-value="company.secondary_color" /></t>
-        <t t-if="company.report_layout_id.name != 'Standard'"><t t-set="footer_border_color" t-value="company.secondary_color" /></t>
-
-        <div t-attf-class="page o_preview_layout o_preview_{{company.report_layout_id.name.lower()}}_layout" t-attf-style="font-family: {{company.font}};">
-            <div class="header">
-                <h2 t-attf-style="color: {{company.primary_color}}">Invoice INV/2019/0005</h2>
-                <div class="row o_layout_information">
-                    <div class="col-auto">
-                        <strong>
-                            <span t-attf-style="color: {{company.secondary_color}}">Invoice Date:</span>
-                        </strong>
-                        <p>02/05/2019</p>
-                    </div>
-                    <div class="col-auto">
-                        <strong>
-                            <span t-attf-style="color: {{company.secondary_color}}">Payment Terms:</span>
-                        </strong>
-                        <p>End of the month</p>
-                    </div>
-                    <div class="col-auto">
-                        <strong>
-                            <span t-attf-style="color: {{company.secondary_color}}">Source:</span>
-                        </strong>
-                        <p>SO022</p>
-                    </div>
-                </div>
-            </div>
-            <div class="article">
-                <table class="table table-sm" t-attf-style="border-color: {{table_border_color}}">
-                    <thead>
-                        <tr t-attf-style="color: {{company.secondary_color}}">
-                            <th>Description</th>
-                            <th>Quantity</th>
-                            <th>Unit Price</th>
-                            <th>Amount</th>
-                        </tr>
-                    </thead>
-                    <tbody>
-                        <tr>
-                            <td>[SKU001] Server</td>
-                            <td>2.000</td>
-                            <td>190.00</td>
-                            <!-- fallback to white when browser does not support RRGGBBAA notation -->
-                            <td t-if="company.report_layout_id.name == 'Boxed'" class="o_price_total"
-                                t-attf-style="background-color: white;background-color: {{company.secondary_color}}19;">$ 380.00</td>
-                            <td t-else="" class="o_price_total">$ 380.00</td>
-                        </tr>
-                        <tr>
-                            <td>[SKU002] Computer</td>
-                            <td>1.000</td>
-                            <td>1250.00</td>
-                            <!-- fallback to white when browser does not support RRGGBBAA notation -->
-                            <td t-if="company.report_layout_id.name == 'Boxed'" class="o_price_total"
-                                t-attf-style="background-color: white;background-color: {{company.secondary_color}}19;">$ 1250.00</td>
-                            <td t-else="" class="o_price_total">$ 1250.00</td>
-                        </tr>
-                    </tbody>
-                </table>
-                <div>
-                    <div class="row">
-                        <div t-attf-class="col-auto ml-auto">
-                            <table class="table table-sm"  t-attf-style="border-color: {{table_border_color}}">
-                                <tr class="o_subtotal">
-                                    <td class="pr-5">
-                                        <strong t-if="company.report_layout_id.name == 'Clean'" t-attf-style="color: {{company.secondary_color}}">Subtotal</strong>
-                                        <strong t-else="" t-attf-style="color: {{company.primary_color}}">Subtotal</strong>
-                                    </td>
-                                    <td>
-                                        <span>$ 1630.00</span>
-                                    </td>
-                                </tr>
-                                <tr class="o_total">
-                                    <t t-if="company.report_layout_id.name == 'Boxed'">
-                                        <!-- fallback to primary color when browser does not support RRGGBBAA notation -->
-                                        <td t-attf-style="background-color: {{company.primary_color}};background-color: {{company.primary_color}}D0;">
-                                            <strong>Total</strong>
-                                        </td>
-                                        <td t-attf-style="background-color: {{company.primary_color}};background-color: {{company.primary_color}}D0;">
-                                            <span>$ 1630.00</span>
-                                        </td>
-                                    </t>
-                                    <t t-else="">
-                                        <td>
-                                            <strong t-if="company.report_layout_id.name == 'Clean'" t-attf-style="color: {{company.secondary_color}}">Total</strong>
-                                            <strong t-else="" t-attf-style="color: {{company.primary_color}}">Total</strong>
-                                        </td>
-                                        <td>
-                                            <span>$ 1630.00</span>
-                                        </td>
-                                    </t>
-                                </tr>
-                            </table>
-                        </div>
-                    </div>
-                </div>
-            </div>
-            <div t-attf-class="footer" t-attf-style="color: {{footer_color}}; border-color: {{footer_border_color}}">
-                <div class="text-center">
-                    <ul class="list-inline mb4">
-                        <li class="list-inline-item">+1 (650) 691-3277</li>
-                        <li class="list-inline-item">info@example.com</li>
-                        <li class="list-inline-item">example.com</li>
-                    </ul>
-                </div>
-            </div>
-        </div>
-    </template>
-    </data>
-</odoo>
