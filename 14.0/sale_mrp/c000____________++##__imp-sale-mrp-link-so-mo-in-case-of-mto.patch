PR: https://github.com/odoo/odoo/pull/

From: e1b3a17c3bda2b2d585d930386244e3f2b0bed31
From: RÃ©my Voet (ryv)
Date: 2020-01-23 15:00:01

Structural Changes: 4
Total Changes: 220

[IMP] sale_mrp: link SO<->MO in case of MTO

In case of MTO+Mufacturing on product in a confirmed sale order,
add a stat button to the MO generated by this SO. Also add the inverse,
from MO to SO source document.

task-1913392

================================= pseudo patch: =================================

--- a/addons/sale_mrp/models/__init__.py
+++ b/addons/sale_mrp/models/__init__.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import sale_mrp
+from . import sale
 from . import account_move
+from . import mrp_production

--- a/None
+++ b/addons/sale_mrp/models/mrp_production.py
@@ -0,0 +1,38 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+
+
+class MrpProduction(models.Model):
+    _inherit = 'mrp.production'
+
+    sale_order_count = fields.Integer(
+        "Count of Source SO",
+        compute='_compute_sale_order_count',
+        groups='sales_team.group_sale_salesman')
+
+    @api.depends('move_dest_ids.group_id.sale_id')
+    def _compute_sale_order_count(self):
+        for production in self:
+            production.sale_order_count = len(production.move_dest_ids.group_id.sale_id)
+
+    def action_view_sale_orders(self):
+        self.ensure_one()
+        sale_order_ids = self.move_dest_ids.group_id.sale_id.ids
+        action = {
+            'res_model': 'sale.order',
+            'type': 'ir.actions.act_window',
+        }
+        if len(sale_order_ids) == 1:
+            action.update({
+                'view_mode': 'form',
+                'res_id': sale_order_ids[0],
+            })
+        else:
+            action.update({
+                'name': _("Sources Sale Orders of %s" % self.name),
+                'domain': [('id', 'in', sale_order_ids)],
+                'view_mode': 'tree,form',
+            })
+        return action

--- a/addons/sale_mrp/models/sale_mrp.py
+++ b/addons/sale_mrp/models/sale.py
@@ -2,7 +2,40 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models, _
-from odoo.tools import float_compare, float_round
+
+
+class SaleOrder(models.Model):
+    _inherit = 'sale.order'
+
+    mrp_production_count = fields.Integer(
+        "Count of MO generated",
+        compute='_compute_mrp_production_count',
+        groups='mrp.group_mrp_user')
+
+    @api.depends('procurement_group_id.stock_move_ids.created_production_id')
+    def _compute_mrp_production_count(self):
+        for sale in self:
+            sale.mrp_production_count = len(sale.procurement_group_id.stock_move_ids.created_production_id)
+
+    def action_view_mrp_production(self):
+        self.ensure_one()
+        mrp_production_ids = self.procurement_group_id.stock_move_ids.created_production_id.ids
+        action = {
+            'res_model': 'mrp.production',
+            'type': 'ir.actions.act_window',
+        }
+        if len(mrp_production_ids) == 1:
+            action.update({
+                'view_mode': 'form',
+                'res_id': mrp_production_ids[0],
+            })
+        else:
+            action.update({
+                'name': _("Manufacturing Orders Generated by %s" % self.name),
+                'domain': [('id', 'in', mrp_production_ids)],
+                'view_mode': 'tree,form',
+            })
+        return action
 
 
 class SaleOrderLine(models.Model):
