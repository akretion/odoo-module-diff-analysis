PR: https://github.com/odoo/odoo/pull/124182

From: a88381cc1230a7942f6d8446e21613e724e649f2
From: Thibault Delavall√©e
Date: 2023-10-06 06:13:55

Structural Changes: 1
Total Changes: 45

[IMP] mail: keep tracking when unlinking fields

RATIONALE

Currently when an ir.model.fields is removed all tracking linked to it is
lost. Indeed field is required and has an ondelete cascade attribute set
to it. However we should keep tracking values as those made sense when
used and one could want to have access to this information.

SPECIFICATIONS

When removing fields set the field to False instead. Add a new field to
store fields information allowing to keep name, type and groups information
to allow displaying removed tracking values. Use this field only when a
field is removed to avoid duplicating field information when not necessary
and polluting the table.

Task-3499067 (Mail: keep tracking when unlinking fields)

Part-of: odoo/odoo#124182

================================= pseudo patch: =================================

--- a/addons/mail/models/ir_model_fields.py
+++ b/addons/mail/models/ir_model_fields.py
@@ -2,6 +2,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import fields, models
+from odoo.tools import groupby
 
 
 class IrModelField(models.Model):
@@ -30,3 +31,26 @@ class IrModelField(models.Model):
         if attrs and field_data.get('tracking'):
             attrs['tracking'] = field_data['tracking']
         return attrs
+
+    def unlink(self):
+        """ When unlinking fields populate tracking value table with relevant
+        information. That way if a field is removed (custom tracked, migration
+        or any other reason) we keep the tracking and its relevant information.
+        Do it only when unlinking fields so that we don't duplicate field
+        information for most tracking. """
+        tracked = self.filtered('tracking')
+        if tracked:
+            tracking_values = self.env['mail.tracking.value'].search(
+                [('field_id', 'in', tracked.ids)]
+            )
+            field_to_trackings = groupby(tracking_values, lambda track: track.field_id)
+            for field, trackings in field_to_trackings:
+                self.env['mail.tracking.value'].concat(*trackings).write({
+                    'field_info': {
+                        'desc': field.field_description,
+                        'name': field.name,
+                        'sequence': self.env[field.model_id.model]._mail_track_get_field_sequence(field.name),
+                        'type': field.ttype,
+                    }
+                })
+        return super().unlink()

--- a/addons/mail/models/mail_tracking_value.py
+++ b/addons/mail/models/mail_tracking_value.py
@@ -13,8 +13,9 @@ class MailTracking(models.Model):
     _order = 'id DESC'
 
     field_id = fields.Many2one(
-        'ir.model.fields', required=True, readonly=True,
-        index=True, ondelete='cascade')
+        'ir.model.fields', required=False, readonly=True,
+        index=True, ondelete='set null')
+    field_info = fields.Json('Removed field information')
     field_groups = fields.Char(compute='_compute_field_groups')
 
     old_value_integer = fields.Integer('Old Value Integer', readonly=True)
@@ -121,14 +122,24 @@ class MailTracking(models.Model):
             raise ValueError('All tracking value should belong to the same model.')
         TrackedModel = self.env[field_models[0]]
         tracked_fields = TrackedModel.fields_get(self.field_id.mapped('name'), attributes={'string', 'type'})
-        fields_col_info = (tracked_fields.get(tracking.field_id.name) for tracking in self)
-        fields_sequence_map = dict(TrackedModel._mail_track_order_fields(tracked_fields))
+        fields_col_info = (
+            tracked_fields.get(tracking.field_id.name) or {
+                'string': tracking.field_info['desc'],
+                'type': tracking.field_info['type'],
+            }
+            for tracking in self
+        )
+        fields_sequence_map = dict(
+            {tracking.field_info['name']: tracking.field_info.get('sequence', 100)
+             for tracking in self.filtered('field_info')},
+            **dict(TrackedModel._mail_track_order_fields(tracked_fields))
+        )
 
         formatted = [
             {
                 'changedField': col_info['string'],
                 'id': tracking.id,
-                'fieldName': tracking.field_id.name,
+                'fieldName': tracking.field_id.name or tracking.field_info['name'],
                 'fieldType': col_info['type'],
                 'newValue': {
                     'currencyId': tracking.currency_id.id,
