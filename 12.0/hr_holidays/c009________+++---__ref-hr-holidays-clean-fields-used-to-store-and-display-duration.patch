PR: https://github.com/odoo/odoo/pull/

From: 14491e8f9b23525f6d9017cfbc91366849a63389
From: Thibault Delavall√©e
Date: 2018-09-10 11:08:57

Structural Changes: 16
Total Changes: 164

[REF] hr_holidays: clean fields used to store and display duration

Purpose of this commit is to simplify fields used in leave and allocation
used to store the duration of the requests. We want notably to get rid
of "number of days temp" that, contrary to its name, is not temporary
at all as it stores the real number of days. We also want to clarify
the hours or days encoding that is different on leave and allocation models.

Specifications

 * number_of_days on leave and allocation is the master field holding the
   leave or allocation duration in days;
 * two fields are used for interface that are suffixed by _display in order
   to indicate they are UX only: number_of_hours_display and number_of_days_
   display. They are interface fields used for the user and correct number
   of days is computed and stored in number_of_days;
 * more specifically for leave model

  * display fields are readonly as it is computed based on dates given by
    the user, directly (from / to) or indirectly (half-day leaves for example);
  * duration field is computed through an onchange. It could be directly
    set by hand by managers if some confusion in the number of days appear;

 * more specifically for allocation model

  * display fields trigger an inverse as they are the real duration given
    by HR officers or managers;
  * duration field is computed through the inverse of display fields;

Various reports, data and use of leave / allocation models are updated to
use the correct field.

This commit is linked to task ID 1876795 and PR #26571.

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/hr.py
+++ b/addons/hr_holidays/models/hr.py
@@ -97,7 +97,7 @@ class Employee(models.Model):
                         state, employee_id
                     FROM hr_leave_allocation
                     UNION
-                    SELECT holiday_status_id, number_of_days,
+                    SELECT holiday_status_id, (number_of_days * -1) as number_of_days,
                         state, employee_id
                     FROM hr_leave
                 ) h

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -88,12 +88,6 @@ class HolidaysRequest(models.Model):
     payslip_status = fields.Boolean('Reported in last payslips', help='Green this button when the leave has been taken into account in the payslip.')
     report_note = fields.Text('HR Comments')
     user_id = fields.Many2one('res.users', string='User', related='employee_id.user_id', related_sudo=True, store=True, default=lambda self: self.env.uid, readonly=True)
-    date_from = fields.Datetime(
-        'Start Date', readonly=True, index=True, copy=False, required=True,
-        states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, track_visibility='onchange')
-    date_to = fields.Datetime(
-        'End Date', readonly=True, copy=False, required=True,
-        states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, track_visibility='onchange')
     # leave type configuration
     holiday_status_id = fields.Many2one(
         "hr.leave.type", string="Leave Type", required=True, readonly=True,
@@ -110,15 +104,24 @@ class HolidaysRequest(models.Model):
         'hr.department', string='Department', readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
     notes = fields.Text('Reasons', readonly=True, states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
-    # details
-    number_of_days_temp = fields.Float(
-        'Duration (Days)', copy=False, readonly=True,
+    # duration
+    date_from = fields.Datetime(
+        'Start Date', readonly=True, index=True, copy=False, required=True,
+        states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, track_visibility='onchange')
+    date_to = fields.Datetime(
+        'End Date', readonly=True, copy=False, required=True,
+        states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, track_visibility='onchange')
+    number_of_days = fields.Float(
+        'Duration (Days)', copy=False, readonly=True, track_visibility='onchange',
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]},
         help='Number of days of the leave request according to your working schedule.')
-    number_of_days = fields.Float('Number of Days', compute='_compute_number_of_days', store=True, track_visibility='onchange')
-    number_of_hours = fields.Float(
-        'Duration (Hours)', copy=False, readonly=True, compute='_compute_number_of_hours',
-        help='Number of hours of the leave request according to your working schedule.')
+    number_of_days_display = fields.Float(
+        'Duration in days', compute='_compute_number_of_days_display', copy=False, readonly=True,
+        help='Number of days of the leave request. Used for interface.')
+    number_of_hours_display = fields.Float(
+        'Duration in hours', compute='_compute_number_of_hours_display', copy=False, readonly=True, 
+        help='Number of hours of the leave request according to your working schedule. Used for interface.')
+    # details
     meeting_id = fields.Many2one('calendar.event', string='Meeting')
     parent_id = fields.Many2one('hr.leave', string='Parent', copy=False)
     linked_request_ids = fields.One2many('hr.leave', 'parent_id', string='Linked Requests')
@@ -158,7 +161,7 @@ class HolidaysRequest(models.Model):
         ('type_value', "CHECK( (holiday_type='employee' AND employee_id IS NOT NULL) or (holiday_type='category' AND category_id IS NOT NULL) or (holiday_type='department' AND department_id IS NOT NULL) )",
          "The employee, department or employee category of this request is missing. Please make sure that your user login is linked to an employee."),
         ('date_check2', "CHECK ((date_from <= date_to))", "The start date must be anterior to the end date."),
-        ('date_check', "CHECK ( number_of_days_temp >= 0 )", "If you want to change the number of days you should use the 'period' mode"),
+        ('duration_check', "CHECK ( number_of_days >= 0 )", "If you want to change the number of days you should use the 'period' mode"),
     ]
 
     @api.onchange('request_unit', 'request_date_from_period', 'request_date_to_period',
@@ -187,7 +190,7 @@ class HolidaysRequest(models.Model):
                 self.date_from = date_from
             if date_to:
                 self.date_to = date_to
-            self.number_of_days_temp = 0
+            self.number_of_days = 0
             return
 
         domain = [('calendar_id', '=', self.employee_id.resource_calendar_id.id)]
@@ -213,8 +216,8 @@ class HolidaysRequest(models.Model):
             date_to = fields.Datetime.from_string(date_to)
         else:
             tz = self.env.user.tz or 'UTC'
-            date_from = timezone(tz).localize(datetime.combine(first_day, hour_from)).astimezone(UTC)
-            date_to = timezone(tz).localize(datetime.combine(last_day, hour_to)).astimezone(UTC)
+            date_from = timezone(tz).localize(datetime.combine(first_day, hour_from)).astimezone(UTC).replace(tzinfo=None)
+            date_to = timezone(tz).localize(datetime.combine(last_day, hour_to)).astimezone(UTC).replace(tzinfo=None)
 
         self.date_from = date_from
         self.date_to = date_to
@@ -223,7 +226,7 @@ class HolidaysRequest(models.Model):
             date_from = date_from
             date_to = date_to
 
-        self.number_of_days_temp = self._get_number_of_days(date_from, date_to, self.employee_id.id)
+        self.number_of_days = self._get_number_of_days(date_from, date_to, self.employee_id.id)
 
     @api.onchange('holiday_type')
     def _onchange_type(self):
@@ -259,9 +262,9 @@ class HolidaysRequest(models.Model):
 
         # Compute and update the number of days
         if (date_to and date_from) and (date_from <= date_to):
-            self.number_of_days_temp = self._get_number_of_days(date_from, date_to, self.employee_id.id)
+            self.number_of_days = self._get_number_of_days(date_from, date_to, self.employee_id.id)
         else:
-            self.number_of_days_temp = 0
+            self.number_of_days = 0
 
     @api.onchange('date_to')
     def _onchange_date_to(self):
@@ -277,9 +280,9 @@ class HolidaysRequest(models.Model):
 
         # Compute and update the number of days
         if (date_to and date_from) and (date_from <= date_to):
-            self.number_of_days_temp = self._get_number_of_days(date_from, date_to, self.employee_id.id)
+            self.number_of_days = self._get_number_of_days(date_from, date_to, self.employee_id.id)
         else:
-            self.number_of_days_temp = 0
+            self.number_of_days = 0
 
     @api.onchange('employee_id')
     def _onchange_employee_id(self):
@@ -287,16 +290,16 @@ class HolidaysRequest(models.Model):
         self.department_id = self.employee_id.department_id
 
     @api.multi
-    @api.depends('number_of_days_temp')
-    def _compute_number_of_days(self):
+    @api.depends('number_of_days')
+    def _compute_number_of_days_display(self):
         for holiday in self:
-            holiday.number_of_days = -holiday.number_of_days_temp
+            holiday.number_of_days_display = holiday.number_of_days
 
     @api.multi
-    @api.depends('number_of_days_temp')
-    def _compute_number_of_hours(self):
+    @api.depends('number_of_days')
+    def _compute_number_of_hours_display(self):
         for holiday in self:
-            holiday.number_of_hours = holiday.number_of_days_temp * self.employee_id.resource_calendar_id.hours_per_day
+            holiday.number_of_hours_display = holiday.number_of_days * self.employee_id.resource_calendar_id.hours_per_day
 
     @api.multi
     @api.depends('state', 'employee_id', 'department_id')
@@ -336,7 +339,7 @@ class HolidaysRequest(models.Model):
             if nholidays:
                 raise ValidationError(_('You can not have 2 leaves that overlaps on the same day.'))
 
-    @api.constrains('state', 'number_of_days_temp', 'holiday_status_id')
+    @api.constrains('state', 'number_of_days', 'holiday_status_id')
     def _check_holidays(self):
         for holiday in self:
             if holiday.holiday_type != 'employee' or not holiday.employee_id or holiday.holiday_status_id.allocation_type == 'no':
@@ -365,9 +368,9 @@ class HolidaysRequest(models.Model):
         res = []
         for leave in self:
             if self.env.context.get('short_name'):
-                res.append((leave.id, _("%s : %.2f day(s)") % (leave.name or leave.holiday_status_id.name, leave.number_of_days_temp)))
+                res.append((leave.id, _("%s : %.2f day(s)") % (leave.name or leave.holiday_status_id.name, leave.number_of_days)))
             else:
-                res.append((leave.id, _("%s on %s : %.2f day(s)") % (leave.employee_id.name or leave.category_id.name, leave.holiday_status_id.name, leave.number_of_days_temp)))
+                res.append((leave.id, _("%s on %s : %.2f day(s)") % (leave.employee_id.name or leave.category_id.name, leave.holiday_status_id.name, leave.number_of_days)))
         return res
 
     @api.multi
@@ -486,7 +489,7 @@ class HolidaysRequest(models.Model):
             'name': self.display_name,
             'categ_ids': [(6, 0, [
                 self.holiday_status_id.categ_id.id])] if self.holiday_status_id.categ_id else [],
-            'duration': self.number_of_days_temp * self.employee_id.resource_calendar_id.hours_per_day,
+            'duration': self.number_of_days * self.employee_id.resource_calendar_id.hours_per_day,
             'description': self.notes,
             'user_id': self.user_id.id,
             'start': self.date_from,
@@ -511,7 +514,7 @@ class HolidaysRequest(models.Model):
             'date_from': self.date_from,
             'date_to': self.date_to,
             'notes': self.notes,
-            'number_of_days_temp': self.number_of_days_temp,
+            'number_of_days': self.number_of_days,
             'parent_id': self.id,
             'employee_id': employee.id
         }

--- a/addons/hr_holidays/models/hr_leave_allocation.py
+++ b/addons/hr_holidays/models/hr_leave_allocation.py
@@ -57,12 +57,18 @@ class HolidaysAllocation(models.Model):
         'hr.employee', string='Employee', index=True, readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]}, default=_default_employee, track_visibility='onchange')
     notes = fields.Text('Reasons', readonly=True, states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]})
-    number_of_days_temp = fields.Float(
-        'Duration (days)', copy=False, readonly=True,
+    # duration
+    number_of_days = fields.Float(
+        'Number of Days', track_visibility='onchange',
+        help='Duration in days. Reference field to use when necessary.')
+    number_of_days_display = fields.Float(
+        'Duration (days)', compute='_compute_number_of_days_display', inverse='_inverse_number_of_days_display',
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]},
-        help='Number of days of the leave request according to your working schedule.')
-    number_of_days = fields.Float('Number of Days', compute='_compute_number_of_days', store=True, track_visibility='onchange')
-    number_of_hours = fields.Float('Duration (hours)', help="Number of hours of the leave allocation according to your working schedule.")
+        help="UX field allowing to see and modify the allocation duration, computed in days.")
+    number_of_hours_display = fields.Float(
+        'Duration (hours)', compute='_compute_number_of_hours_display', inverse='_inverse_number_of_hours_display',
+        help="UX field allowing to see and modify the allocation duration, computed in hours.")
+    # details
     parent_id = fields.Many2one('hr.leave.allocation', string='Parent')
     linked_request_ids = fields.One2many('hr.leave.allocation', 'parent_id', string='Linked Requests')
     first_approver_id = fields.Many2one(
@@ -108,7 +114,7 @@ class HolidaysAllocation(models.Model):
     _sql_constraints = [
         ('type_value', "CHECK( (holiday_type='employee' AND employee_id IS NOT NULL) or (holiday_type='category' AND category_id IS NOT NULL) or (holiday_type='department' AND department_id IS NOT NULL) )",
          "The employee, department or employee category of this request is missing. Please make sure that your user login is linked to an employee."),
-        ('date_check', "CHECK ( number_of_days_temp >= 0 )", "The number of days must be greater than 0."),
+        ('duration_check', "CHECK ( number_of_days >= 0 )", "The number of days must be greater than 0."),
         ('number_per_interval_check', "CHECK(number_per_interval > 0)", "The number per interval should be greater than 0"),
         ('interval_number_check', "CHECK(interval_number > 0)", "The interval number should be greater than 0"),
     ]
@@ -164,29 +170,35 @@ class HolidaysAllocation(models.Model):
                 # As we encode everything in days in the database we need to convert
                 # the number of hours into days for this we use the
                 # mean number of hours set on the employee's calendar
-                days_to_give = days_to_give / holiday.employee_id.resource_calendar_id.hours_per_day or HOURS_PER_DAY
-
-            values['number_of_days_temp'] = holiday.number_of_days_temp + days_to_give * prorata
+                days_to_give = days_to_give / (holiday.employee_id.resource_calendar_id.hours_per_day or HOURS_PER_DAY)
 
+            values['number_of_days'] = holiday.number_of_days + days_to_give * prorata
             if holiday.accrual_limit > 0:
-                values['number_of_days_temp'] = min(values['number_of_days_temp'], holiday.accrual_limit)
-
-            values['number_of_hours'] = values['number_of_days_temp'] * holiday.employee_id.resource_calendar_id.hours_per_day or HOURS_PER_DAY
+                values['number_of_days'] = min(values['number_of_days'], holiday.accrual_limit)
 
             holiday.write(values)
 
     @api.multi
-    @api.depends('number_of_days_temp', 'type_request_unit', 'number_of_hours', 'holiday_status_id', 'employee_id')
-    def _compute_number_of_days(self):
-        for holiday in self:
-            number_of_days = holiday.number_of_days_temp
-            if holiday.type_request_unit == 'hour':
-                # In this case we need the number of days to reflect the number of hours taken
-                number_of_days = holiday.number_of_hours / holiday.employee_id.resource_calendar_id.hours_per_day or HOURS_PER_DAY
-            if holiday.accrual_limit > 0:
-                number_of_days = min(number_of_days, holiday.accrual_limit)
+    @api.depends('number_of_days')
+    def _compute_number_of_days_display(self):
+        for allocation in self:
+            allocation.number_of_days_display = allocation.number_of_days
 
-            holiday.number_of_days = number_of_days
+    @api.multi
+    def _inverse_number_of_days_display(self):
+        for allocation in self:
+            allocation.number_of_days = allocation.number_of_days_display
+
+    @api.multi
+    @api.depends('number_of_days', 'employee_id')
+    def _compute_number_of_hours_display(self):
+        for allocation in self:
+            allocation.number_of_hours_display = allocation.number_of_days * (allocation.employee_id.resource_calendar_id.hours_per_day or HOURS_PER_DAY)
+
+    @api.multi
+    def _inverse_number_of_hours_display(self):
+        for allocation in self:
+            allocation.number_of_days = allocation.number_of_hours_display / (allocation.employee_id.resource_calendar_id.hours_per_day or HOURS_PER_DAY)
 
     @api.multi
     @api.depends('state', 'employee_id', 'department_id')
@@ -230,20 +242,15 @@ class HolidaysAllocation(models.Model):
         if self.holiday_type == 'employee':
             self.department_id = self.employee_id.department_id
 
-    @api.onchange('number_of_days_temp')
-    def _onchange_number_of_days_temp(self):
-        self.number_of_hours = self.number_of_days_temp * self.employee_id.resource_calendar_id.hours_per_day
-
-    @api.onchange('number_of_hours')
-    def _onchange_number_of_hours(self):
-        self.number_of_days_temp = self.number_of_hours / self.employee_id.resource_calendar_id.hours_per_day
-
     @api.onchange('holiday_status_id')
     def _onchange_holiday_status_id(self):
-        self.date_to = datetime.combine(self.holiday_status_id.validity_stop, time.max)
+        if self.holiday_status_id.validity_stop and self.date_to:
+            new_date_to = datetime.combine(self.holiday_status_id.validity_stop, time.max)
+            if new_date_to < self.date_to:
+                self.date_to = new_date_to
 
         if self.accrual:
-            self.number_of_days_temp = 0
+            self.number_of_days = 0
 
             if self.holiday_status_id.request_unit == 'hour':
                 self.unit_per_interval = 'hours'
@@ -264,9 +271,9 @@ class HolidaysAllocation(models.Model):
         res = []
         for leave in self:
             if leave.type_request_unit == 'hour':
-                res.append((leave.id, _("Allocation of %s : %.2f hour(s) To %s") % (leave.holiday_status_id.name, leave.number_of_hours, leave.employee_id.name)))
+                res.append((leave.id, _("Allocation of %s : %.2f hour(s) To %s") % (leave.holiday_status_id.name, leave.number_of_hours_display, leave.employee_id.name)))
             else:
-                res.append((leave.id, _("Allocation of %s : %.2f day(s) To %s") % (leave.holiday_status_id.name, leave.number_of_days_temp, leave.employee_id.name)))
+                res.append((leave.id, _("Allocation of %s : %.2f day(s) To %s") % (leave.holiday_status_id.name, leave.number_of_days, leave.employee_id.name)))
         return res
 
     @api.multi
@@ -332,7 +339,7 @@ class HolidaysAllocation(models.Model):
             'holiday_type': 'employee',
             'holiday_status_id': self.holiday_status_id.id,
             'notes': self.notes,
-            'number_of_days_temp': self.number_of_days_temp,
+            'number_of_days': self.number_of_days,
             'parent_id': self.id,
             'employee_id': employee.id
         }

--- a/addons/hr_holidays/models/hr_leave_type.py
+++ b/addons/hr_holidays/models/hr_leave_type.py
@@ -133,10 +133,10 @@ class HolidaysType(models.Model):
 
         for request in requests:
             status_dict = result[request.holiday_status_id.id]
-            status_dict['virtual_remaining_leaves'] -= request.number_of_days_temp
+            status_dict['virtual_remaining_leaves'] -= request.number_of_days
             if request.state == 'validate':
-                status_dict['leaves_taken'] += request.number_of_days_temp
-                status_dict['remaining_leaves'] -= request.number_of_days_temp
+                status_dict['leaves_taken'] += request.number_of_days
+                status_dict['remaining_leaves'] -= request.number_of_days
 
         for allocation in allocations:
             status_dict = result[allocation.holiday_status_id.id]
@@ -144,9 +144,9 @@ class HolidaysType(models.Model):
                 # note: add only validated allocation even for the virtual
                 # count; otherwise pending then refused allocation allow
                 # the employee to create more leaves than possible
-                status_dict['virtual_remaining_leaves'] += allocation.number_of_days_temp
-                status_dict['max_leaves'] += allocation.number_of_days_temp
-                status_dict['remaining_leaves'] += allocation.number_of_days_temp
+                status_dict['virtual_remaining_leaves'] += allocation.number_of_days
+                status_dict['max_leaves'] += allocation.number_of_days
+                status_dict['remaining_leaves'] += allocation.number_of_days
 
         return result
 
@@ -173,10 +173,10 @@ class HolidaysType(models.Model):
         grouped_res = self.env['hr.leave.allocation'].read_group(
             [('holiday_status_id', 'in', self.ids), ('holiday_type', '!=', 'employee'), ('state', '=', 'validate'),
              ('date_from', '>=', fields.Datetime.to_string(datetime.datetime.now().replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)))],
-            ['holiday_status_id', 'number_of_days_temp'],
+            ['holiday_status_id', 'number_of_days'],
             ['holiday_status_id'],
         )
-        grouped_dict = dict((data['holiday_status_id'][0], data['number_of_days_temp']) for data in grouped_res)
+        grouped_dict = dict((data['holiday_status_id'][0], data['number_of_days']) for data in grouped_res)
         for allocation in self:
             allocation.group_days_allocation = grouped_dict.get(allocation.id, 0)
 
