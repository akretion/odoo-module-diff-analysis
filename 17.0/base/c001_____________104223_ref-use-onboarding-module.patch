PR: https://github.com/odoo/odoo/pull/104223

From: 77f9ff50db3cdb88397d0b1cc7042c772d0d417b
From: Florian Charlier
Date: 2023-06-30 21:37:50

Breaking data model changes scores: del:1 + add:0, change matches:
-    base_onboarding_company_state = fields.Selection([

Total Changes: 36

[REF] *: use onboarding module

* = account{_payment}, base, onboarding, payment{_stripe},
sale{_management}, web, website_sale

Use the dedicated onboarding module introduced in 16.0 instead of
the res.company model to store onboarding progress.

It allows
 * onboarding steps to be reused across panels
 * to support steps that should be completed per-database or per-company
 * to clean the res.company model from many fields and methods,
 * to remove many views, controllers, actions

Module-specific notes:
* account: We also clean the remaining two steps that are not
part of an accounting panel but make the most sense to be kept here.
* account_payment: Following 8e4e8eb8, the payment provider step is
added to the invoicing onboarding panel. We apply this change here too.
Also impacts the website_sale_dashboard panel (see related ENT PR).
(The "sale tax" one is currently used for to the website sale dashboard).
* payment: Note that the step was already not part of an onboarding
panel within this module.
* website_sale: We clean
  * a field not used (The website_sale dashboard onboarding panel used
  the payment_provider_onboarding_state field).
  * a method that was only called from website_sale_dashboard, so it is
  moved there. See related ENT PR.

Includes a few tests.

Moving views/templates/styling, as well as cleaning residual onboarding-related fields and methods in base, including populate.

This also includes restoring the "onboarding_complete" overlay panel
animating it to disappear after a few seconds so that it doesn't hide
text and block buttons to re-open steps.

Task-3025136

Part-of: odoo/odoo#104223

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/res_company.py
+++ b/odoo/addons/base/models/res_company.py
@@ -68,8 +68,6 @@ class Company(models.Model):
     company_registry = fields.Char(related='partner_id.company_registry', string="Company ID", readonly=False)
     paperformat_id = fields.Many2one('report.paperformat', 'Paper format', default=lambda self: self.env.ref('base.paperformat_euro', raise_if_not_found=False))
     external_report_layout_id = fields.Many2one('ir.ui.view', 'Document Template')
-    base_onboarding_company_state = fields.Selection([
-        ('not_done', "Not done"), ('just_done', "Just done"), ('done', "Done")], string="State of the onboarding company step", default='not_done')
     font = fields.Selection([("Lato", "Lato"), ("Roboto", "Roboto"), ("Open_Sans", "Open Sans"), ("Montserrat", "Montserrat"), ("Oswald", "Oswald"), ("Raleway", "Raleway"), ('Tajawal', 'Tajawal')], default="Lato")
     primary_color = fields.Char()
     secondary_color = fields.Char()
@@ -284,40 +282,6 @@ class Company(models.Model):
             return (self.env['ir.actions.report'].search([('report_name', '=', report_name)], limit=1)
                         .report_action(docids))
 
-    @api.model
-    def action_open_base_onboarding_company(self):
-        """ Onboarding step for company basic information. """
-        action = self.env["ir.actions.actions"]._for_xml_id("base.action_open_base_onboarding_company")
-        action['res_id'] = self.env.company.id
-        return action
-
-    def set_onboarding_step_done(self, step_name):
-        if self[step_name] == 'not_done':
-            self[step_name] = 'just_done'
-
-    def _get_and_update_onboarding_state(self, onboarding_state, steps_states):
-        """ Needed to display onboarding animations only one time. """
-        old_values = {}
-        all_done = True
-        for step_state in steps_states:
-            old_values[step_state] = self[step_state]
-            if self[step_state] == 'just_done':
-                self[step_state] = 'done'
-            all_done = all_done and self[step_state] == 'done'
-
-        if all_done:
-            if self[onboarding_state] == 'not_done':
-                # string `onboarding_state` instead of variable name is not an error
-                old_values['onboarding_state'] = 'just_done'
-            else:
-                old_values['onboarding_state'] = 'done'
-            self[onboarding_state] = 'done'
-        return old_values
-
-    def action_save_onboarding_company_step(self):
-        if bool(self.street):
-            self.set_onboarding_step_done('base_onboarding_company_state')
-
     @api.model
     def _get_main_company(self):
         try:
