PR: https://github.com/odoo/odoo/pull/

From: 8f3a5068ca6c5e65fb97b968701c5c883eb5c132
From: Lucas Lef√®vre
Date: 2019-11-22 15:58:38

Breaking data model changes score: 1, change matches:
-    validation_type = fields.Selection([

Total Changes: 79

[IMP] hr_holidays: Add specific approval for allocations

Purpose
=======

We want to allow different approvals for allocations and leaves of a same type.

e.g. In case of compensation days, a manager would approve the
allocation request, but would later not approve leave requests.

Specification
=============

Allocation modes
*---------------
No change here except renames.
1. No limit (employee doesn't need an allocation to request a leave)
2. Allow employee requests
3. Fixed by Time Off Officer

Allocation approval
*------------------
A radio field to choose the approval mechanism
appears if the employee is allowed to request an allocation.
The following approval modes are possible:
1. Time Off Officer
2. Employee's Time Off Manager (leave_responsible_id)
3. Employee's Time Off Manager and Time Off Officer

These options are the same as leave approval options
(except the missing "No Validation").

If option 1 or 2 is selected, a o2m field should
allow to select which Time Off Officer is responsible
for approving those allocations.

Allocation approval policy is the same as the leave approval policy.

Task id: 1936742

Access rights based on task 1950998

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/hr_leave.py
+++ b/addons/hr_holidays/models/hr_leave.py
@@ -77,7 +77,7 @@ class HolidaysRequest(models.Model):
         lt = LeaveType.search([('valid', '=', True)], limit=1)
 
         defaults['holiday_status_id'] = lt.id if lt else defaults.get('holiday_status_id')
-        defaults['state'] = 'confirm' if lt and lt.validation_type != 'no_validation' else 'draft'
+        defaults['state'] = 'confirm' if lt and lt.leave_validation_type != 'no_validation' else 'draft'
         return defaults
 
     def _default_employee(self):
@@ -126,7 +126,7 @@ class HolidaysRequest(models.Model):
         "hr.leave.type", string="Time Off Type", required=True, readonly=True,
         states={'draft': [('readonly', False)], 'confirm': [('readonly', False)]},
         domain=[('valid', '=', True)])
-    validation_type = fields.Selection('Validation Type', related='holiday_status_id.validation_type', readonly=False)
+    validation_type = fields.Selection('Validation Type', related='holiday_status_id.leave_validation_type', readonly=False)
     # HR data
     employee_id = fields.Many2one(
         'hr.employee', string='Employee', index=True, readonly=True, ondelete="restrict",
@@ -501,7 +501,7 @@ class HolidaysRequest(models.Model):
     def _compute_can_approve(self):
         for holiday in self:
             try:
-                if holiday.state == 'confirm' and holiday.holiday_status_id.validation_type == 'both':
+                if holiday.state == 'confirm' and holiday.validation_type == 'both':
                     holiday._check_approval_update('validate1')
                 else:
                     holiday._check_approval_update('validate')
@@ -637,11 +637,11 @@ class HolidaysRequest(models.Model):
                 values.update({'department_id': self.env['hr.employee'].browse(employee_id).department_id.id})
 
             # Handle no_validation
-            if leave_type.validation_type == 'no_validation':
+            if leave_type.leave_validation_type == 'no_validation':
                 values.update({'state': 'confirm'})
 
             # Handle double validation
-            if leave_type.validation_type == 'both':
+            if leave_type.leave_validation_type == 'both':
                 self._check_double_validation_rules(employee_id, values.get('state', False))
 
         holiday = super(HolidaysRequest, self.with_context(mail_create_nosubscribe=True)).create(values)
@@ -662,7 +662,7 @@ class HolidaysRequest(models.Model):
             holiday_sudo.add_follower(employee_id)
             if holiday.validation_type == 'manager':
                 holiday_sudo.message_subscribe(partner_ids=holiday.employee_id.leave_manager_id.partner_id.ids)
-            if leave_type.validation_type == 'no_validation':
+            if holiday.validation_type == 'no_validation':
                 # Automatic validation should be done in sudo, because user might not have the rights to do it by himself
                 holiday_sudo.action_validate()
                 holiday_sudo.message_subscribe(partner_ids=[holiday._get_responsible_for_approval().partner_id.id])
@@ -924,16 +924,16 @@ class HolidaysRequest(models.Model):
         is_manager = self.env.user.has_group('hr_holidays.group_hr_holidays_manager')
 
         for holiday in self:
-            val_type = holiday.holiday_status_id.validation_type
+            val_type = holiday.validation_type
 
             if not is_manager and state != 'confirm':
                 if state == 'draft':
                     if holiday.state == 'refuse':
-                        raise UserError(_('Only a Leave Manager can reset a refused leave.'))
+                        raise UserError(_('Only a Time Off Manager can reset a refused leave.'))
                     if holiday.date_from.date() <= fields.Date.today():
-                        raise UserError(_('Only a Leave Manager can reset a started leave.'))
+                        raise UserError(_('Only a Time Off Manager can reset a started leave.'))
                     if holiday.employee_id != current_employee:
-                        raise UserError(_('Only a Leave Manager can reset other people leaves.'))
+                        raise UserError(_('Only a Time Off Manager can reset other people leaves.'))
                 else:
                     if val_type == 'no_validation' and current_employee == holiday.employee_id:
                         continue
@@ -942,11 +942,11 @@ class HolidaysRequest(models.Model):
 
                     # This handles states validate1 validate and refuse
                     if holiday.employee_id == current_employee:
-                        raise UserError(_('Only a Leave Manager can approve/refuse its own requests.'))
+                        raise UserError(_('Only a Time Off Manager can approve/refuse its own requests.'))
 
                     if (state == 'validate1' and val_type == 'both') or (state == 'validate' and val_type == 'manager') and holiday.holiday_type == 'employee':
                         if not is_officer and self.env.user != holiday.employee_id.leave_manager_id:
-                            raise UserError(_('You must be either %s\'s manager or Leave manager to approve this leave') % (holiday.employee_id.name))
+                            raise UserError(_('You must be either %s\'s manager or Time off Manager to approve this leave') % (holiday.employee_id.name))
 
     # ------------------------------------------------------------
     # Activity methods

--- a/addons/hr_holidays/models/hr_leave_allocation.py
+++ b/addons/hr_holidays/models/hr_leave_allocation.py
@@ -86,11 +86,11 @@ class HolidaysAllocation(models.Model):
     linked_request_ids = fields.One2many('hr.leave.allocation', 'parent_id', string='Linked Requests')
     first_approver_id = fields.Many2one(
         'hr.employee', string='First Approval', readonly=True, copy=False,
-        help='This area is automatically filled by the user who validate the allocation')
+        help='This area is automatically filled by the user who validates the allocation')
     second_approver_id = fields.Many2one(
         'hr.employee', string='Second Approval', readonly=True, copy=False,
-        help='This area is automatically filled by the user who validate the allocation with second level (If allocation type need second validation)')
-    validation_type = fields.Selection('Validation Type', related='holiday_status_id.validation_type', readonly=True)
+        help='This area is automaticly filled by the user who validates the allocation with second level (If allocation type need second validation)')
+    validation_type = fields.Selection('Validation Type', related='holiday_status_id.allocation_validation_type', readonly=True)
     can_reset = fields.Boolean('Can reset', compute='_compute_can_reset')
     can_approve = fields.Boolean('Can Approve', compute='_compute_can_approve')
     type_request_unit = fields.Selection(related='holiday_status_id.request_unit', readonly=True)
@@ -251,7 +251,7 @@ class HolidaysAllocation(models.Model):
     def _compute_can_approve(self):
         for allocation in self:
             try:
-                if allocation.state == 'confirm' and allocation.holiday_status_id.validation_type == 'both':
+                if allocation.state == 'confirm' and allocation.validation_type == 'both':
                     allocation._check_approval_update('validate1')
                 else:
                     allocation._check_approval_update('validate')
@@ -489,7 +489,7 @@ class HolidaysAllocation(models.Model):
                 ).create(self._prepare_holiday_values(employee))
             # TODO is it necessary to interleave the calls?
             childs.action_approve()
-            if childs and self.holiday_status_id.validation_type == 'both':
+            if childs and self.validation_type == 'both':
                 childs.action_validate()
         return childs
 
@@ -518,7 +518,7 @@ class HolidaysAllocation(models.Model):
         is_officer = self.env.user.has_group('hr_holidays.group_hr_holidays_user')
         is_manager = self.env.user.has_group('hr_holidays.group_hr_holidays_manager')
         for holiday in self:
-            val_type = holiday.holiday_status_id.validation_type
+            val_type = holiday.holiday_status_id.allocation_validation_type
             if state == 'confirm':
                 continue
 
@@ -541,12 +541,12 @@ class HolidaysAllocation(models.Model):
                 if self.env.user == holiday.employee_id.leave_manager_id and self.env.user != holiday.employee_id.user_id:
                     continue
                 manager = holiday.employee_id.parent_id or holiday.employee_id.department_id.manager_id
-                if (manager and manager != current_employee) and not self.env.user.has_group('hr_holidays.group_hr_holidays_manager'):
+                if (manager != current_employee) and not is_manager:
                     raise UserError(_('You must be either %s\'s manager or time off manager to approve this time off') % (holiday.employee_id.name))
 
             if state == 'validate' and val_type == 'both':
-                if not self.env.user.has_group('hr_holidays.group_hr_holidays_manager'):
-                    raise UserError(_('Only a Time off Manager can apply the second approval on allocation requests.'))
+                if not is_officer:
+                    raise UserError(_('Only a Time off Approver can apply the second approval on allocation requests.'))
 
     # ------------------------------------------------------------
     # Activity methods
@@ -554,15 +554,14 @@ class HolidaysAllocation(models.Model):
 
     def _get_responsible_for_approval(self):
         self.ensure_one()
-        responsible = self.env['res.users']
+        responsible = self.env.user
 
-        if self.validation_type == 'hr' or (self.validation_type == 'both' and self.state == 'validate1'):
+        if self.validation_type == 'manager' or (self.validation_type == 'both' and self.state == 'confirm'):
+            if self.employee_id.leave_manager_id:
+                responsible = self.employee_id.leave_manager_id
+        elif self.validation_type == 'hr' or (self.validation_type == 'both' and self.state == 'validate1'):
             if self.holiday_status_id.responsible_id:
                 responsible = self.holiday_status_id.responsible_id
-        if self.state == 'confirm' and self.employee_id.parent_id.user_id:
-            responsible = self.employee_id.parent_id.user_id
-        elif self.department_id.manager_id.user_id:
-            responsible = self.department_id.manager_id.user_id
 
         return responsible
 

--- a/addons/hr_holidays/models/hr_leave_type.py
+++ b/addons/hr_holidays/models/hr_leave_type.py
@@ -70,21 +70,25 @@ class HolidaysType(models.Model):
     company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company)
     responsible_id = fields.Many2one('res.users', 'Responsible',
         domain=lambda self: [('groups_id', 'in', self.env.ref('hr_holidays.group_hr_holidays_user').id)],
-        help="This user will be responsible for approving this type of times off"
+        help="This user will be responsible for approving this type of times off. "
         "This is only used when validation is 'hr' or 'both'",)
-    validation_type = fields.Selection([
+    leave_validation_type = fields.Selection([
         ('no_validation', 'No Validation'),
-        ('hr', 'Time Off Officer'),
-        ('manager', 'Team Leader'),
-        ('both', 'Team Leader and Time Off Officer')], default='hr', string='Validation')
+        ('hr', 'By Time Off Officer'),
+        ('manager', "By Employee's Manager"),
+        ('both', "By Employee's Manager and Time Off Officer")], default='hr', string='Leave Validation')
+    allocation_validation_type = fields.Selection([
+        ('hr', 'By Time Off Officer'),
+        ('manager', "By Employee's Manager"),
+        ('both', "By Employee's Manager and Time Off Officer")], default='manager', string='Allocation Validation')
     allocation_type = fields.Selection([
-        ('no', 'No Allocation Needed'),
-        ('fixed_allocation', 'Free Allocation Request'),
-        ('fixed', 'Allocated by HR only')],
+        ('no', 'No Limit'),
+        ('fixed_allocation', 'Allow Employees Requests'),
+        ('fixed', 'Fixed by Time Off Officer')],
         default='no', string='Mode',
-        help='\tNo Allocation Needed: no allocation by default, users can freely request time off;'
-             '\tFree Allocation Request: allocated by HR and users can request time off and allocations;'
-             '\tAllocated by HR only: allocated by HR and cannot be bypassed; users can request time off;')
+        help='\tNo Limit: no allocation by default, users can freely request time off; '
+             '\tAllow Employees Requests: allocated by HR and users can request time off and allocations; '
+             '\tFixed by Time Off Officer: allocated by HR and cannot be bypassed; users can request time off;')
     validity_start = fields.Date("From",
                                  help='Adding validity to types of time off so that it cannot be selected outside this time period')
     validity_stop = fields.Date("To")
