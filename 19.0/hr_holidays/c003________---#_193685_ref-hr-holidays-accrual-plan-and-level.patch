PR: https://github.com/odoo/odoo/pull/193685

From: 85ec84f3b69eae8e405cd5ef42e9ecd76500ef04
From: MÃ©lanie
Date: 2025-04-24 04:10:19

Breaking data model changes scores: del:12 + add:0, change matches:
-    carryover_day = fields.Integer(default=1)
-    carryover_day_display = fields.Selection(
-    first_day = fields.Integer(default=1)
-    first_day_display = fields.Selection(
-    second_day = fields.Integer(default=15)
-    second_day_display = fields.Selection(
-    first_month_day = fields.Integer(default=1)
-    first_month_day_display = fields.Selection(
-    second_month_day = fields.Integer(default=1)
-    second_month_day_display = fields.Selection(
-    yearly_day = fields.Integer(default=1)
-    yearly_day_display = fields.Selection(

Total Changes: 349

[REF] hr_holidays: accrual plan and level

The accrual plan and accrual plan level have been refactor with this commit.
    - The selection month "jan" is changed to "0" (avoid a dictionary to convert the trigram to an integer)
    - It's possible now to select 30 october
    - Widget day_selection displays only the available days in the selected month

Part-of: odoo/odoo#193685
Related: odoo/enterprise#77149
Related: odoo/upgrade#7185
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_holidays/models/hr_leave_accrual_plan.py
+++ b/addons/hr_holidays/models/hr_leave_accrual_plan.py
@@ -1,14 +1,11 @@
-# -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
+from calendar import monthrange
 
 from odoo import api, fields, models, _
 from odoo.exceptions import ValidationError
 
 from odoo.addons.hr_holidays.models.hr_leave_accrual_plan_level import _get_selection_days
 
-DAY_SELECT_VALUES = [str(i) for i in range(1, 29)] + ['last']
-DAY_SELECT_SELECTION_NO_LAST = tuple(zip(DAY_SELECT_VALUES, (str(i) for i in range(1, 29))))
-
 
 class HrLeaveAccrualPlan(models.Model):
     _name = 'hr.leave.accrual.plan'
@@ -45,23 +42,22 @@ class HrLeaveAccrualPlan(models.Model):
         ("allocation", "At the allocation date"),
         ("other", "Other")],
         default="year_start", required=True, string="Carry-Over Time")
-    carryover_day = fields.Integer(default=1)
-    carryover_day_display = fields.Selection(
-        _get_selection_days, compute='_compute_carryover_day_display', inverse='_inverse_carryover_day_display')
+    carryover_day = fields.Selection(
+        _get_selection_days, compute='_compute_carryover_day', store=True, readonly=False, default='1')
     carryover_month = fields.Selection([
-        ("jan", "January"),
-        ("feb", "February"),
-        ("mar", "March"),
-        ("apr", "April"),
-        ("may", "May"),
-        ("jun", "June"),
-        ("jul", "July"),
-        ("aug", "August"),
-        ("sep", "September"),
-        ("oct", "October"),
-        ("nov", "November"),
-        ("dec", "December")
-    ], default="jan")
+        ("1", "January"),
+        ("2", "February"),
+        ("3", "March"),
+        ("4", "April"),
+        ("5", "May"),
+        ("6", "June"),
+        ("7", "July"),
+        ("8", "August"),
+        ("9", "September"),
+        ("10", "October"),
+        ("11", "November"),
+        ("12", "December")
+    ], default=lambda self: str((fields.Date.today()).month))
     added_value_type = fields.Selection([('day', 'Days'), ('hour', 'Hours')], compute='_compute_added_value_type', store=True)
 
     @api.depends('level_ids')
@@ -113,18 +109,11 @@ class HrLeaveAccrualPlan(models.Model):
             if plan.level_ids:
                 plan.added_value_type = plan.level_ids[0].added_value_type
 
-    @api.depends("carryover_day")
-    def _compute_carryover_day_display(self):
-        days_select = _get_selection_days(self)
-        for plan in self:
-            plan.carryover_day_display = days_select[min(plan.carryover_day - 1, 28)][0]
-
-    def _inverse_carryover_day_display(self):
+    @api.depends("carryover_month")
+    def _compute_carryover_day(self):
         for plan in self:
-            if plan.carryover_day_display == 'last':
-                plan.carryover_day = 31
-            else:
-                plan.carryover_day = DAY_SELECT_VALUES.index(plan.carryover_day_display) + 1
+            # 2020 is a leap year, so monthrange(2020, february) will return [2, 29]
+            plan.carryover_day = str(min(monthrange(2020, int(plan.carryover_month))[1], int(plan.carryover_day)))
 
     def action_open_accrual_plan_employees(self):
         self.ensure_one()

--- a/addons/hr_holidays/models/hr_leave_accrual_plan_level.py
+++ b/addons/hr_holidays/models/hr_leave_accrual_plan_level.py
@@ -1,19 +1,13 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
-
+from calendar import monthrange
 from dateutil.relativedelta import relativedelta
 
 from odoo import _, api, fields, models
-from odoo.exceptions import UserError
-
+from odoo.exceptions import ValidationError, UserError
 
-DAYS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']
-MONTHS = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
-# Used for displaying the days and reversing selection -> integer
-DAY_SELECT_VALUES = [str(i) for i in range(1, 29)] + ['last']
-DAY_SELECT_SELECTION_NO_LAST = tuple(zip(DAY_SELECT_VALUES, (str(i) for i in range(1, 29))))
 
 def _get_selection_days(self):
-    return DAY_SELECT_SELECTION_NO_LAST + (("last", _("last day")),)
+    return [(str(i), str(i)) for i in range(1, 32)]
 
 
 class HrLeaveAccrualLevel(models.Model):
@@ -54,59 +48,52 @@ class HrLeaveAccrualLevel(models.Model):
         ('yearly', 'Yearly'),
     ], default='daily', required=True, string="Frequency")
     week_day = fields.Selection([
-        ('mon', 'Monday'),
-        ('tue', 'Tuesday'),
-        ('wed', 'Wednesday'),
-        ('thu', 'Thursday'),
-        ('fri', 'Friday'),
-        ('sat', 'Saturday'),
-        ('sun', 'Sunday'),
-    ], default='mon', required=True, string="Allocation on")
-    first_day = fields.Integer(default=1)
-    first_day_display = fields.Selection(
-        _get_selection_days, compute='_compute_days_display', inverse='_inverse_first_day_display')
-    second_day = fields.Integer(default=15)
-    second_day_display = fields.Selection(
-        _get_selection_days, compute='_compute_days_display', inverse='_inverse_second_day_display')
-    first_month_day = fields.Integer(default=1)
-    first_month_day_display = fields.Selection(
-        _get_selection_days, compute='_compute_days_display', inverse='_inverse_first_month_day_display')
+        ('0', 'Monday'),
+        ('1', 'Tuesday'),
+        ('2', 'Wednesday'),
+        ('3', 'Thursday'),
+        ('4', 'Friday'),
+        ('5', 'Saturday'),
+        ('6', 'Sunday'),
+    ], default='0', required=True, string="Allocation on")
+    first_day = fields.Selection(_get_selection_days, default='1')
+    second_day = fields.Selection(_get_selection_days, default='15')
+    first_month_day = fields.Selection(
+        _get_selection_days, compute='_compute_first_month_day', store=True, readonly=False, default='1')
     first_month = fields.Selection([
-        ('jan', 'January'),
-        ('feb', 'February'),
-        ('mar', 'March'),
-        ('apr', 'April'),
-        ('may', 'May'),
-        ('jun', 'June'),
-    ], default="jan")
-    second_month_day = fields.Integer(default=1)
-    second_month_day_display = fields.Selection(
-        _get_selection_days, compute='_compute_days_display', inverse='_inverse_second_month_day_display')
+        ('1', 'January'),
+        ('2', 'February'),
+        ('3', 'March'),
+        ('4', 'April'),
+        ('5', 'May'),
+        ('6', 'June'),
+    ], default="1")
+    second_month_day = fields.Selection(
+        _get_selection_days, compute='_compute_second_month_day', store=True, readonly=False, default='1')
     second_month = fields.Selection([
-        ('jul', 'July'),
-        ('aug', 'August'),
-        ('sep', 'September'),
-        ('oct', 'October'),
-        ('nov', 'November'),
-        ('dec', 'December')
-    ], default="jul")
+        ('7', 'July'),
+        ('8', 'August'),
+        ('9', 'September'),
+        ('10', 'October'),
+        ('11', 'November'),
+        ('12', 'December')
+    ], default="7")
     yearly_month = fields.Selection([
-        ('jan', 'January'),
-        ('feb', 'February'),
-        ('mar', 'March'),
-        ('apr', 'April'),
-        ('may', 'May'),
-        ('jun', 'June'),
-        ('jul', 'July'),
-        ('aug', 'August'),
-        ('sep', 'September'),
-        ('oct', 'October'),
-        ('nov', 'November'),
-        ('dec', 'December')
-    ], default="jan")
-    yearly_day = fields.Integer(default=1)
-    yearly_day_display = fields.Selection(
-        _get_selection_days, compute='_compute_days_display', inverse='_inverse_yearly_day_display')
+        ('1', 'January'),
+        ('2', 'February'),
+        ('3', 'March'),
+        ('4', 'April'),
+        ('5', 'May'),
+        ('6', 'June'),
+        ('7', 'July'),
+        ('8', 'August'),
+        ('9', 'September'),
+        ('10', 'October'),
+        ('11', 'November'),
+        ('12', 'December')
+    ], default="1")
+    yearly_day = fields.Selection(
+        _get_selection_days, compute='_compute_yearly_day', store=True, readonly=False, default='1')
     cap_accrued_time = fields.Boolean("Cap accrued time", default=True,
         help="When the field is checked the balance of an allocation using this accrual plan will never exceed the specified amount.")
     maximum_leave = fields.Float(
@@ -137,10 +124,6 @@ class HrLeaveAccrualLevel(models.Model):
         default='day', string="Accrual Validity Type", required=True,
         help="This field defines the unit of time after which the accrual ends.")
 
-    _check_dates = models.Constraint(
-        "CHECK( (frequency IN ('daily', 'hourly')) or(week_day IS NOT NULL AND frequency = 'weekly') or (first_day > 0 AND second_day > first_day AND first_day <= 31 AND second_day <= 31 AND frequency = 'bimonthly') or (first_day > 0 AND first_day <= 31 AND frequency = 'monthly')or (first_month_day > 0 AND first_month_day <= 31 AND second_month_day > 0 AND second_month_day <= 31 AND frequency = 'biyearly') or (yearly_day > 0 AND yearly_day <= 31 AND frequency = 'yearly'))",
-        "The dates you've set up aren't correct. Please check them.",
-    )
     _start_count_check = models.Constraint(
         'CHECK( start_count >= 0 )',
         'You can not start an accrual in the past.',
@@ -154,6 +137,17 @@ class HrLeaveAccrualLevel(models.Model):
         'You cannot have a cap on yearly accrued time without setting a maximum amount.',
     )
 
+    @api.constrains('first_day', 'second_day', 'week_day', 'frequency')
+    def _check_dates(self):
+        error_message = ''
+        for level in self:
+            if level.frequency == 'weekly' and not level.week_day:
+                error_message = _("Weekday must be selected to use the frequency weekly")
+            elif level.frequency == 'bimonthly' and level.first_day >= level.second_day:
+                error_message = _("The first day must be lower than the second day.")
+        if error_message:
+            raise error_message
+
     @api.constrains('cap_accrued_time', 'maximum_leave')
     def _check_maximum_leave(self):
         for level in self:
@@ -184,55 +178,27 @@ class HrLeaveAccrualLevel(models.Model):
             elif level.accrual_plan_id.level_ids and level.accrual_plan_id.level_ids[0] != level:
                 level.added_value_type = level.accrual_plan_id.level_ids[0].added_value_type
 
-    @api.depends('first_day', 'second_day', 'first_month_day', 'second_month_day', 'yearly_day')
-    def _compute_days_display(self):
-        days_select = _get_selection_days(self)
+    def _set_day(self, day_field, month_field):
         for level in self:
-            level.first_day_display = days_select[min(level.first_day - 1, 28)][0]
-            level.second_day_display = days_select[min(level.second_day - 1, 28)][0]
-            level.first_month_day_display = days_select[min(level.first_month_day - 1, 28)][0]
-            level.second_month_day_display = days_select[min(level.second_month_day - 1, 28)][0]
-            level.yearly_day_display = days_select[min(level.yearly_day - 1, 28)][0]
+            # 2020 is a leap year, so monthrange(2020, february) will return [2, 29]
+            level[day_field] = str(min(monthrange(2020, int(level[month_field]))[1], int(level[day_field])))
 
-    @api.depends('cap_accrued_time')
-    def _compute_maximum_leave(self):
-        for level in self:
-            level.maximum_leave = 100 if level.cap_accrued_time else 0
-
-    def _inverse_first_day_display(self):
-        for level in self:
-            if level.first_day_display == 'last':
-                level.first_day = 31
-            else:
-                level.first_day = DAY_SELECT_VALUES.index(level.first_day_display) + 1
+    @api.depends("first_month")
+    def _compute_first_month_day(self):
+        self._set_day("first_month_day", "first_month")
 
-    def _inverse_second_day_display(self):
-        for level in self:
-            if level.second_day_display == 'last':
-                level.second_day = 31
-            else:
-                level.second_day = DAY_SELECT_VALUES.index(level.second_day_display) + 1
+    @api.depends("second_month")
+    def _compute_second_month_day(self):
+        self._set_day("second_month_day", "second_month")
 
-    def _inverse_first_month_day_display(self):
-        for level in self:
-            if level.first_month_day_display == 'last':
-                level.first_month_day = 31
-            else:
-                level.first_month_day = DAY_SELECT_VALUES.index(level.first_month_day_display) + 1
-
-    def _inverse_second_month_day_display(self):
-        for level in self:
-            if level.second_month_day_display == 'last':
-                level.second_month_day = 31
-            else:
-                level.second_month_day = DAY_SELECT_VALUES.index(level.second_month_day_display) + 1
+    @api.depends("yearly_month")
+    def _compute_yearly_day(self):
+        self._set_day("yearly_day", "yearly_month")
 
-    def _inverse_yearly_day_display(self):
+    @api.depends('cap_accrued_time')
+    def _compute_maximum_leave(self):
         for level in self:
-            if level.yearly_day_display == 'last':
-                level.yearly_day = 31
-            else:
-                level.yearly_day = DAY_SELECT_VALUES.index(level.yearly_day_display) + 1
+            level.maximum_leave = 100 if level.cap_accrued_time else 0
 
     def _get_next_date(self, last_call):
         """
@@ -241,45 +207,42 @@ class HrLeaveAccrualLevel(models.Model):
         self.ensure_one()
         if self.frequency in ['hourly', 'daily']:
             return last_call + relativedelta(days=1)
-        elif self.frequency == 'weekly':
-            daynames = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
-            weekday = daynames.index(self.week_day)
-            return last_call + relativedelta(days=1, weekday=weekday)
-        elif self.frequency == 'bimonthly':
-            first_date = last_call + relativedelta(day=self.first_day)
-            second_date = last_call + relativedelta(day=self.second_day)
+
+        if self.frequency == 'weekly':
+            return last_call + relativedelta(days=1, weekday=int(self.week_day))
+
+        if self.frequency == 'bimonthly':
+            first_date = last_call + relativedelta(day=int(self.first_day))
+            second_date = last_call + relativedelta(day=int(self.second_day))
             if last_call < first_date:
                 return first_date
-            elif last_call < second_date:
+            if last_call < second_date:
                 return second_date
-            else:
-                return last_call + relativedelta(months=1, day=self.first_day)
-        elif self.frequency == 'monthly':
-            date = last_call + relativedelta(day=self.first_day)
+            return last_call + relativedelta(day=int(self.first_day), months=1)
+
+        if self.frequency == 'monthly':
+            date = last_call + relativedelta(day=int(self.first_day))
             if last_call < date:
                 return date
-            else:
-                return last_call + relativedelta(months=1, day=self.first_day)
-        elif self.frequency == 'biyearly':
-            first_month = MONTHS.index(self.first_month) + 1
-            second_month = MONTHS.index(self.second_month) + 1
-            first_date = last_call + relativedelta(month=first_month, day=self.first_month_day)
-            second_date = last_call + relativedelta(month=second_month, day=self.second_month_day)
+            return last_call + relativedelta(day=int(self.first_day), months=1)
+
+        if self.frequency == 'biyearly':
+            first_date = last_call + relativedelta(month=int(self.first_month), day=int(self.first_month_day))
+            second_date = last_call + relativedelta(month=int(self.second_month), day=int(self.second_month_day))
             if last_call < first_date:
                 return first_date
-            elif last_call < second_date:
+            if last_call < second_date:
                 return second_date
-            else:
-                return last_call + relativedelta(years=1, month=first_month, day=self.first_month_day)
-        elif self.frequency == 'yearly':
-            month = MONTHS.index(self.yearly_month) + 1
-            date = last_call + relativedelta(month=month, day=self.yearly_day)
+            return last_call + relativedelta(month=int(self.first_month), day=int(self.first_month_day), years=1)
+
+        if self.frequency == 'yearly':
+            date = last_call + relativedelta(month=int(self.yearly_month), day=int(self.yearly_day))
             if last_call < date:
                 return date
-            else:
-                return last_call + relativedelta(years=1, month=month, day=self.yearly_day)
-        else:
-            return False
+            return last_call + relativedelta(month=int(self.yearly_month), day=int(self.yearly_day), years=1)
+
+        raise ValidationError(_("Your frequency selection is not correct: please choose a frequency between theses options:"
+            "Hourly, Daily, Weekly, Twice a month, Monthly, Twice a year and Yearly."))
 
     def _get_previous_date(self, last_call):
         """
@@ -290,45 +253,42 @@ class HrLeaveAccrualLevel(models.Model):
         self.ensure_one()
         if self.frequency in ['hourly', 'daily']:
             return last_call
-        elif self.frequency == 'weekly':
-            daynames = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
-            weekday = daynames.index(self.week_day)
-            return last_call + relativedelta(days=-6, weekday=weekday)
-        elif self.frequency == 'bimonthly':
-            second_date = last_call + relativedelta(day=self.second_day)
-            first_date = last_call + relativedelta(day=self.first_day)
+
+        if self.frequency == 'weekly':
+            return last_call + relativedelta(days=-6, weekday=int(self.week_day))
+
+        if self.frequency == 'bimonthly':
+            first_date = last_call + relativedelta(day=int(self.first_day))
+            second_date = last_call + relativedelta(day=int(self.second_day))
             if last_call >= second_date:
                 return second_date
-            elif last_call >= first_date:
+            if last_call >= first_date:
                 return first_date
-            else:
-                return last_call + relativedelta(months=-1, day=self.second_day)
-        elif self.frequency == 'monthly':
-            date = last_call + relativedelta(day=self.first_day)
+            return last_call + relativedelta(day=int(self.second_day), months=-1)
+
+        if self.frequency == 'monthly':
+            date = last_call + relativedelta(day=int(self.first_day))
             if last_call >= date:
                 return date
-            else:
-                return last_call + relativedelta(months=-1, day=self.first_day)
-        elif self.frequency == 'biyearly':
-            first_month = MONTHS.index(self.first_month) + 1
-            second_month = MONTHS.index(self.second_month) + 1
-            first_date = last_call + relativedelta(month=first_month, day=self.first_month_day)
-            second_date = last_call + relativedelta(month=second_month, day=self.second_month_day)
+            return last_call + relativedelta(day=int(self.first_day), months=-1)
+
+        if self.frequency == 'biyearly':
+            first_date = last_call + relativedelta(month=int(self.first_month), day=int(self.first_month_day))
+            second_date = last_call + relativedelta(month=int(self.second_month), day=int(self.second_month_day))
             if last_call >= second_date:
                 return second_date
-            elif last_call >= first_date:
+            if last_call >= first_date:
                 return first_date
-            else:
-                return last_call + relativedelta(years=-1, month=second_month, day=self.second_month_day)
-        elif self.frequency == 'yearly':
-            month = MONTHS.index(self.yearly_month) + 1
-            year_date = last_call + relativedelta(month=month, day=self.yearly_day)
+            return last_call + relativedelta(month=int(self.second_month), day=int(self.second_month_day), years=-1)
+
+        if self.frequency == 'yearly':
+            year_date = last_call + relativedelta(month=int(self.yearly_month), day=int(self.yearly_day))
             if last_call >= year_date:
                 return year_date
-            else:
-                return last_call + relativedelta(years=-1, month=month, day=self.yearly_day)
-        else:
-            return False
+            return last_call + relativedelta(month=int(self.yearly_month), day=int(self.yearly_day), years=-1)
+
+        raise ValidationError(_("Your frequency selection is not correct: please choose a frequency between theses options:"
+            "Hourly, Daily, Weekly, Twice a month, Monthly, Twice a year and Yearly."))
 
     def _get_level_transition_date(self, allocation_start):
         if self.start_type == 'day':

--- a/addons/hr_holidays/models/hr_leave_allocation.py
+++ b/addons/hr_holidays/models/hr_leave_allocation.py
@@ -1,7 +1,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 # Copyright (c) 2005-2006 Axelor SARL. (http://www.axelor.com)
-
+from calendar import monthrange
 from datetime import datetime, date, time
 from dateutil.relativedelta import relativedelta
 
@@ -13,9 +13,6 @@ from odoo.tools.float_utils import float_round
 from odoo.tools.date_utils import get_timedelta
 
 
-MONTHS_TO_INTEGER = {"jan": 1, "feb": 2, "mar": 3, "apr": 4, "may": 5, "jun": 6, "jul": 7, "aug": 8, "sep": 9, "oct": 10, "nov": 11, "dec": 12}
-
-
 class HrLeaveAllocation(models.Model):
     """ Allocation Requests Access specifications: similar to leave requests """
     _name = 'hr.leave.allocation'
@@ -307,7 +304,10 @@ class HrLeaveAllocation(models.Model):
         elif carryover_time == 'allocation':
             carryover_date = date(date_from.year, self.date_from.month, self.date_from.day)
         else:
-            carryover_date = date(date_from.year, MONTHS_TO_INTEGER[accrual_plan.carryover_month], accrual_plan.carryover_day)
+            month = int(accrual_plan.carryover_month)
+            # 2020/2/31 will be changed to 2020/2/29
+            day = min(monthrange(date_from.year, month)[1], int(accrual_plan.carryover_day))
+            carryover_date = date(date_from.year, month, day)
         if date_from > carryover_date:
             carryover_date += relativedelta(years=1)
         return carryover_date
