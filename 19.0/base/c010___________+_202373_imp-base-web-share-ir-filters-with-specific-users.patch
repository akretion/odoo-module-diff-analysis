PR: https://github.com/odoo/odoo/pull/202373

From: 414e55cf7c3971a7ba0a7c96855db4c23e77a5c4
From: Julien Carion (juca)
Date: 2025-04-07 19:11:37

Breaking data model changes scores: del:1 + add:1, change matches:
-    user_id = fields.Many2one('res.users', string='User', ondelete='cascade')
+    user_ids = fields.Many2many('res.users', string='Users', ondelete='cascade', help="The users the filter is shared with. If empty, the filter is shared with all users.")

Total Changes: 87

[IMP] base, web, *: Share ir.filters with specific users

This commit enhances how ir.filters can be shared with other users by
making the process more flexible and intuitive:

* Removes the "Shared" checkbox at filter creation, as sharing favorites
with all users by default was often unnecessary.
* Adds an "Edit" button next to "Save," allowing users to directly access
the form view of the favorite after creation.
* Replaces the user_id many2one field with a many2many field, enabling
selective sharing of favorites with specific users.
* Defaults to the current user at creation, while keeping the option to
share the favorite with all users if no specific users are selected.

task-4610809

closes odoo/odoo#202373

Related: odoo/enterprise#81709
Related: odoo/upgrade#7430
Signed-off-by: Mathieu Duckerts-Antoine (dam) <dam@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/ir_filters.py
+++ b/odoo/addons/base/models/ir_filters.py
@@ -2,7 +2,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models
-from odoo.exceptions import UserError
 from odoo.tools.safe_eval import safe_eval, datetime
 
 
@@ -12,7 +11,7 @@ class IrFilters(models.Model):
     _order = 'model_id, name, id desc'
 
     name = fields.Char(string='Filter Name', required=True)
-    user_id = fields.Many2one('res.users', string='User', ondelete='cascade')
+    user_ids = fields.Many2many('res.users', string='Users', ondelete='cascade', help="The users the filter is shared with. If empty, the filter is shared with all users.")
     domain = fields.Text(default='[]', required=True)
     context = fields.Text(default='{}', required=True)
     sort = fields.Char(default='[]', required=True)
@@ -26,12 +25,8 @@ class IrFilters(models.Model):
     embedded_parent_res_id = fields.Integer(help="id of the record the filter should be applied to. Only used in combination with embedded actions")
     active = fields.Boolean(default=True)
 
-    # Partial constraint, complemented by unique index (see below). Still
-    # useful to keep because it provides a proper error message when a
-    # violation occurs, as it shares the same prefix as the unique index.
-    _name_model_uid_unique = models.Constraint(
-        'UNIQUE (model_id, user_id, action_id, embedded_action_id, embedded_parent_res_id, name)',
-        "Filter names must be unique",
+    _get_filters_index = models.Index(
+        '(model_id, action_id, embedded_action_id, embedded_parent_res_id)',
     )
     # The embedded_parent_res_id can only be defined when the embedded_action_id field is set.
     # As the embedded model is linked to only one res_model, It ensure the unicity of the filter regarding the
@@ -44,11 +39,6 @@ class IrFilters(models.Model):
         "CHECK(sort IS NULL OR jsonb_typeof(sort::jsonb) = 'array')",
         "Invalid sort definition",
     )
-    # Use unique index to implement unique constraint on the lowercase name (not possible using a constraint)
-    _name_model_uid_unique_action_index = models.UniqueIndex(
-        '(model_id, COALESCE(user_id, -1), COALESCE(action_id, -1), '
-        'lower(name), embedded_parent_res_id, COALESCE(embedded_action_id,-1))',
-    )
 
     @api.model
     def _list_all_models(self):
@@ -100,83 +90,22 @@ class IrFilters(models.Model):
             The action does not have to correspond to the model, it may only be
             a contextual action.
         :return: list of :meth:`~osv.read`-like dicts containing the
-            ``name``, ``is_default``, ``domain``, ``user_id`` (m2o tuple),
+            ``name``, ``is_default``, ``domain``, ``user_ids`` (m2m),
             ``action_id`` (m2o tuple), ``embedded_action_id`` (m2o tuple), ``embedded_parent_res_id``
             and ``context`` of the matching ``ir.filters``.
         """
-        # available filters: private filters (user_id=uid) and public filters (uid=NULL),
+        # available filters: private filters (user_ids=uids) and public filters (uids=NULL),
         # and filters for the action (action_id=action_id) or global (action_id=NULL)
         user_context = self.env['res.users'].context_get()
         action_domain = self._get_action_domain(action_id, embedded_action_id, embedded_parent_res_id)
         return self.with_context(user_context).search_read(
-            action_domain + [('model_id', '=', model), ('user_id', 'in', [self._uid, False])],
-            ['name', 'is_default', 'domain', 'context', 'user_id', 'sort', 'embedded_action_id', 'embedded_parent_res_id'],
+            action_domain + [('model_id', '=', model), ('user_ids', 'in', [self._uid, False])],
+            ['name', 'is_default', 'domain', 'context', 'user_ids', 'sort', 'embedded_action_id', 'embedded_parent_res_id'],
         )
 
     @api.model
-    def _check_global_default(self, vals: dict, matching_filters: list[dict]) -> None:
-        """Checks if there is a global default for the model_id requested.
-
-        If there is, and the default is different than the record being written
-        (-> we're not updating the current global default), raise an error
-        to avoid users unknowingly overwriting existing global defaults (they
-        have to explicitly remove the current default before setting a new one)
-
-        This method should only be called if ``vals`` is trying to set
-        ``is_default``
-
-        :raises odoo.exceptions.UserError: if there is an existing default and
-                                            we're not updating it
-        """
-        domain = self._get_action_domain(vals.get('action_id'), vals.get('embedded_action_id'), vals.get('embedded_parent_res_id'))
-        defaults = self.search(domain + [
-            ('model_id', '=', vals['model_id']),
-            ('user_id', '=', False),
-            ('is_default', '=', True),
-        ])
-
-        if not defaults:
-            return
-        if matching_filters and (matching_filters[0]['id'] == defaults.id):
-            return
-
-        raise UserError(self.env._("There is already a shared filter set as default for %(model)s, delete or change it before setting a new default", model=vals.get('model_id')))
-
-    @api.model
-    def create_or_replace(self, vals):
-        action_id = vals.get('action_id')
+    def create_filter(self, vals):
         embedded_action_id = vals.get('embedded_action_id')
         if not embedded_action_id and 'embedded_parent_res_id' in vals:
             del vals['embedded_parent_res_id']
-        embedded_parent_res_id = vals.get('embedded_parent_res_id')
-        current_filters = self.get_filters(vals['model_id'], action_id, embedded_action_id, embedded_parent_res_id)
-        matching_filters = [f for f in current_filters
-                            if f['name'].lower() == vals['name'].lower()
-                            # next line looks for matching user_ids (specific or global), i.e.
-                            # f.user_id is False and vals.user_id is False or missing,
-                            # or f.user_id.id == vals.user_id
-                            if (f['user_id'] and f['user_id'][0]) == vals.get('user_id')]
-
-        if vals.get('is_default'):
-            if vals.get('user_id'):
-                # Setting new default: any other default that belongs to the user
-                # should be turned off
-                domain = self._get_action_domain(action_id, embedded_action_id, embedded_parent_res_id)
-                defaults = self.search(domain + [
-                    ('model_id', '=', vals['model_id']),
-                    ('user_id', '=', vals['user_id']),
-                    ('is_default', '=', True),
-                ])
-                if defaults:
-                    defaults.write({'is_default': False})
-            else:
-                self._check_global_default(vals, matching_filters)
-
-        # When a filter exists for the same (name, model, user) triple, we simply
-        # replace its definition (considering action_id irrelevant here)
-        if matching_filters:
-            matching_filter = self.browse(matching_filters[0]['id'])
-            matching_filter.write(vals)
-            return matching_filter
-
         return self.create(vals)
