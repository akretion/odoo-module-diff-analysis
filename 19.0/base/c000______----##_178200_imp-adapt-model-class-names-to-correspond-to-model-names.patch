PR: https://github.com/odoo/odoo/pull/178200

From: 33690a980ec7681d582e77e5d9c31208d46a3fa8
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:19 + add:0, change matches:
-    _inherit = 'ir.actions.actions'
-    _inherit = 'ir.actions.actions'
-    _inherit = 'ir.actions.actions'
-    _inherit = 'ir.actions.actions'
-    _inherit = 'ir.actions.actions'
-    _inherit = 'ir.actions.actions'
-    _inherit = 'ir.qweb.field'
-    _inherit = 'ir.qweb.field.image'
-    _inherit = 'ir.qweb.field'
-    _inherit = 'ir.qweb.field'
-    _inherit = 'ir.qweb.field'
-    _inherit = 'ir.qweb.field'
-    _inherit = 'ir.qweb.field'
-    _inherit = 'res.groups'
-    _inherit = 'res.users'
-    _inherit = 'res.groups'
-    _inherit = "ir.module.category"
-    _inherit = 'res.users'
-    _inherit = 'res.users'

Total Changes: 442

[IMP] *: adapt model class names to correspond to model names

The purpose is to remove the attribute `_name` from model classes, and derive the model name from its class name.  This will lead to more consistent class naming, and will ease the process of making Odoo code more Pythonic.

The script updates every class name to match the new convention. The name of a model (**dotcase**) is determined by the name of its class (**camelcase**) as follows. Each capital letter is lowercased and is preceded by a period, unless it is the first one or is itself preceded by an underscore. The use of underscores in model names is now discouraged.
```
res.users <=> ResUsers
ir.ui.view <=> IrUiView
ir.config_parameter <=> IrConfig_parameter
e.g <=> EG
```

The `_name` attribute on model classes are removed, except in the case where the model name cannot be derived from the class name. The `_inherit` attribute is no longer used as a fallback for the model name, and only the `list` variant is now accepted.

For instance,
```py
class FieldConverter(models.AbstractModel):
    _name = 'ir.qweb.field'

class IntegerConverter(models.AbstractModel):
    _name = 'ir.qweb.field.integer'
    _inherit = 'ir.qweb.field'

class Integer(models.AbstractModel):
    _name = 'ir.qweb.field.integer'
    _inherit = 'ir.qweb.field.integer'
```
becomes:
```py
class IrQwebField(models.AbstractModel):

class IrQwebFieldInteger(models.AbstractModel):
    _inherit = ['ir.qweb.field']

class IrQwebFieldInteger(models.AbstractModel):
    _inherit = ['ir.qweb.field.integer']
```

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/avatar_mixin.py
+++ b/odoo/addons/base/models/avatar_mixin.py
@@ -19,7 +19,6 @@ def get_hsl_from_seed(seed):
 
 
 class AvatarMixin(models.AbstractModel):
-    _name = 'avatar.mixin'
     _inherit = ['image.mixin']
     _description = "Avatar Mixin"
     _avatar_name_field = "name"

--- a/odoo/addons/base/models/decimal_precision.py
+++ b/odoo/addons/base/models/decimal_precision.py
@@ -15,7 +15,6 @@ def get_precision(application):
 
 
 class DecimalPrecision(models.Model):
-    _name = 'decimal.precision'
     _description = 'Decimal Precision'
 
     name = fields.Char('Usage', required=True)

--- a/odoo/addons/base/models/image_mixin.py
+++ b/odoo/addons/base/models/image_mixin.py
@@ -5,7 +5,6 @@ from odoo import models, fields
 
 
 class ImageMixin(models.AbstractModel):
-    _name = 'image.mixin'
     _description = "Image Mixin"
 
     # all image fields are base64 encoded and PIL-supported

--- a/odoo/addons/base/models/ir_actions.py
+++ b/odoo/addons/base/models/ir_actions.py
@@ -49,8 +49,7 @@ class LoggerProxy:
         _server_action_logger.exception(message, *args, stack_info=stack_info, exc_info=exc_info)
 
 
-class IrActions(models.Model):
-    _name = 'ir.actions.actions'
+class IrActionsActions(models.Model):
     _description = 'Actions'
     _table = 'ir_actions'
     _order = 'name'
@@ -103,13 +102,13 @@ class IrActions(models.Model):
 
     @api.model_create_multi
     def create(self, vals_list):
-        res = super(IrActions, self).create(vals_list)
+        res = super().create(vals_list)
         # self.get_bindings() depends on action records
         self.env.registry.clear_cache()
         return res
 
     def write(self, vals):
-        res = super(IrActions, self).write(vals)
+        res = super().write(vals)
         # self.get_bindings() depends on action records
         self.env.registry.clear_cache()
         return res
@@ -121,7 +120,7 @@ class IrActions(models.Model):
         todos.unlink()
         filters = self.env['ir.filters'].search([('action_id', 'in', self.ids)])
         filters.unlink()
-        res = super(IrActions, self).unlink()
+        res = super().unlink()
         # self.get_bindings() depends on action records
         self.env.registry.clear_cache()
         return res
@@ -256,7 +255,7 @@ class IrActionsActWindow(models.Model):
     _name = 'ir.actions.act_window'
     _description = 'Action Window'
     _table = 'ir_act_window'
-    _inherit = 'ir.actions.actions'
+    _inherit = ['ir.actions.actions']
     _order = 'name'
     _allow_sudo_commands = False
 
@@ -426,10 +425,10 @@ class IrActionsActWindowView(models.Model):
         return res
 
 
-class IrActionsActWindowclose(models.Model):
+class IrActionsActWindowClose(models.Model):
     _name = 'ir.actions.act_window_close'
     _description = 'Action Window Close'
-    _inherit = 'ir.actions.actions'
+    _inherit = ['ir.actions.actions']
     _table = 'ir_actions'
     _allow_sudo_commands = False
 
@@ -447,7 +446,7 @@ class IrActionsActUrl(models.Model):
     _name = 'ir.actions.act_url'
     _description = 'Action URL'
     _table = 'ir_act_url'
-    _inherit = 'ir.actions.actions'
+    _inherit = ['ir.actions.actions']
     _order = 'name'
     _allow_sudo_commands = False
 
@@ -500,10 +499,9 @@ class IrActionsServer(models.Model):
     - 'Execute several actions': define an action that triggers several other
       server actions
     """
-    _name = 'ir.actions.server'
     _description = 'Server Actions'
     _table = 'ir_act_server'
-    _inherit = 'ir.actions.actions'
+    _inherit = ['ir.actions.actions']
     _order = 'sequence,name'
     _allow_sudo_commands = False
 
@@ -1076,7 +1074,6 @@ class IrActionsTodo(models.Model):
     """
     Configuration Wizards
     """
-    _name = 'ir.actions.todo'
     _description = "Configuration Wizards"
     _rec_name = 'action_id'
     _order = "sequence, id"
@@ -1151,10 +1148,9 @@ class IrActionsTodo(models.Model):
         return self.write({'state': 'open'})
 
 
-class IrActionsActClient(models.Model):
-    _name = 'ir.actions.client'
+class IrActionsClient(models.Model):
     _description = 'Client Action'
-    _inherit = 'ir.actions.actions'
+    _inherit = ['ir.actions.actions']
     _table = 'ir_act_client'
     _order = 'name'
     _allow_sudo_commands = False
@@ -1185,7 +1181,7 @@ class IrActionsActClient(models.Model):
             record.params_store = repr(params) if isinstance(params, dict) else params
 
     def _get_default_form_view(self):
-        doc = super(IrActionsActClient, self)._get_default_form_view()
+        doc = super()._get_default_form_view()
         params = doc.find(".//field[@name='params']")
         params.getparent().remove(params)
         params_store = doc.find(".//field[@name='params_store']")

--- a/odoo/addons/base/models/ir_actions_report.py
+++ b/odoo/addons/base/models/ir_actions_report.py
@@ -134,9 +134,8 @@ else:
         _logger.info('Wkhtmltoimage seems to be broken.')
 
 class IrActionsReport(models.Model):
-    _name = 'ir.actions.report'
     _description = 'Report Action'
-    _inherit = 'ir.actions.actions'
+    _inherit = ['ir.actions.actions']
     _table = 'ir_act_report_xml'
     _order = 'name, id'
     _allow_sudo_commands = False

--- a/odoo/addons/base/models/ir_asset.py
+++ b/odoo/addons/base/models/ir_asset.py
@@ -58,7 +58,6 @@ class IrAsset(models.Model):
         2. It allows to create 'ir.asset' records to add additional directives
         to certain bundles.
     """
-    _name = 'ir.asset'
     _description = 'Asset'
     _order = 'sequence, id'
     _allow_sudo_commands = False

--- a/odoo/addons/base/models/ir_attachment.py
+++ b/odoo/addons/base/models/ir_attachment.py
@@ -38,7 +38,6 @@ class IrAttachment(models.Model):
     The default implementation is the file:dirname location that stores files
     on the local filesystem using name based on their sha1 hash
     """
-    _name = 'ir.attachment'
     _description = 'Attachment'
     _order = 'id desc'
 

--- a/odoo/addons/base/models/ir_autovacuum.py
+++ b/odoo/addons/base/models/ir_autovacuum.py
@@ -17,9 +17,8 @@ def is_autovacuum(func):
     return callable(func) and getattr(func, '_autovacuum', False)
 
 
-class AutoVacuum(models.AbstractModel):
+class IrAutovacuum(models.AbstractModel):
     """ Helper model to the ``@api.autovacuum`` method decorator. """
-    _name = 'ir.autovacuum'
     _description = 'Automatic Vacuum'
 
     def _run_vacuum_cleaner(self):

--- a/odoo/addons/base/models/ir_binary.py
+++ b/odoo/addons/base/models/ir_binary.py
@@ -16,7 +16,6 @@ _logger = logging.getLogger(__name__)
 
 
 class IrBinary(models.AbstractModel):
-    _name = 'ir.binary'
     _description = "File streaming helper model for controllers"
 
     def _find_record(

--- a/odoo/addons/base/models/ir_cron.py
+++ b/odoo/addons/base/models/ir_cron.py
@@ -51,7 +51,7 @@ class CompletionStatus:  # inherit from enum.StrEnum in 3.11
     FAILED = 'failed'
 
 
-class ir_cron(models.Model):
+class IrCron(models.Model):
     """ Model describing cron jobs (also called actions or tasks).
     """
 
@@ -60,7 +60,6 @@ class ir_cron(models.Model):
     # loaded yet or was already unloaded (e.g. 'force_db_wakeup' or something)
     # See also odoo.cron
 
-    _name = "ir.cron"
     _order = 'cron_name'
     _description = 'Scheduled Actions'
     _allow_sudo_commands = False
@@ -109,7 +108,7 @@ class ir_cron(models.Model):
         # only 'code' state is supported for cron job so set it as default
         if not self._context.get('default_state'):
             self = self.with_context(default_state='code')
-        return super(ir_cron, self).default_get(fields_list)
+        return super().default_get(fields_list)
 
     def method_direct_trigger(self):
         self.ensure_one()
@@ -608,11 +607,11 @@ class ir_cron(models.Model):
         self._try_lock()
         if ('nextcall' in vals or vals.get('active')) and os.getenv('ODOO_NOTIFY_CRON_CHANGES'):
             self._cr.postcommit.add(self._notifydb)
-        return super(ir_cron, self).write(vals)
+        return super().write(vals)
 
     def unlink(self):
         self._try_lock(lockfk=True)
-        return super(ir_cron, self).unlink()
+        return super().unlink()
 
     def try_write(self, values):
         try:
@@ -626,7 +625,7 @@ class ir_cron(models.Model):
         except psycopg2.OperationalError:
             pass
         else:
-            return super(ir_cron, self).write(values)
+            return super().write(values)
         return False
 
     @api.model
@@ -703,7 +702,7 @@ class ir_cron(models.Model):
     def _notifydb(self):
         """ Wake up the cron workers
         The ODOO_NOTIFY_CRON_CHANGES environment variable allows to force the notifydb on both
-        ir_cron modification and on trigger creation (regardless of call_at)
+        IrCron modification and on trigger creation (regardless of call_at)
         """
         with odoo.sql_db.db_connect('postgres').cursor() as cr:
             cr.execute(SQL("SELECT %s('cron_trigger', %s)", SQL.identifier(ODOO_NOTIFY_FUNCTION), self.env.cr.dbname))
@@ -748,8 +747,7 @@ class ir_cron(models.Model):
         })
 
 
-class ir_cron_trigger(models.Model):
-    _name = 'ir.cron.trigger'
+class IrCronTrigger(models.Model):
     _description = 'Triggered actions'
     _rec_name = 'cron_id'
     _allow_sudo_commands = False
@@ -762,8 +760,7 @@ class ir_cron_trigger(models.Model):
         self.search([('call_at', '<', datetime.now() + relativedelta(weeks=-1))]).unlink()
 
 
-class ir_cron_progress(models.Model):
-    _name = 'ir.cron.progress'
+class IrCronProgress(models.Model):
     _description = 'Progress of Scheduled Actions'
     _rec_name = 'cron_id'
 

--- a/odoo/addons/base/models/ir_default.py
+++ b/odoo/addons/base/models/ir_default.py
@@ -11,7 +11,6 @@ from odoo.tools import SQL
 
 class IrDefault(models.Model):
     """ User-defined default values for fields. """
-    _name = 'ir.default'
     _description = 'Default Values'
     _rec_name = 'field_id'
     _allow_sudo_commands = False

--- a/odoo/addons/base/models/ir_demo.py
+++ b/odoo/addons/base/models/ir_demo.py
@@ -6,7 +6,6 @@ from odoo.addons.base.models.ir_module import assert_log_admin_access
 
 class IrDemo(models.TransientModel):
 
-    _name = 'ir.demo'
     _description = 'Demo'
 
     @assert_log_admin_access

--- a/odoo/addons/base/models/ir_demo_failure.py
+++ b/odoo/addons/base/models/ir_demo_failure.py
@@ -1,7 +1,7 @@
 from odoo import api, fields, models
 
 
-class DemoFailure(models.TransientModel):
+class IrDemoFailure(models.TransientModel):
     """ Stores modules for which we could not install demo data
     """
     _name = 'ir.demo_failure'
@@ -11,7 +11,7 @@ class DemoFailure(models.TransientModel):
     error = fields.Char(string="Error")
     wizard_id = fields.Many2one('ir.demo_failure.wizard')
 
-class DemoFailureWizard(models.TransientModel):
+class IrDemoFailureWizard(models.TransientModel):
     _name = 'ir.demo_failure.wizard'
     _description = 'Demo Failure wizard'
 

--- a/odoo/addons/base/models/ir_embedded_actions.py
+++ b/odoo/addons/base/models/ir_embedded_actions.py
@@ -6,7 +6,6 @@ from ast import literal_eval
 
 
 class IrEmbeddedActions(models.Model):
-    _name = 'ir.embedded.actions'
     _description = 'Embedded Actions'
     _order = 'sequence, id'
 

--- a/odoo/addons/base/models/ir_exports.py
+++ b/odoo/addons/base/models/ir_exports.py
@@ -5,7 +5,6 @@ from odoo import fields, models
 
 
 class IrExports(models.Model):
-    _name = "ir.exports"
     _description = 'Exports'
     _order = 'name'
 
@@ -15,7 +14,6 @@ class IrExports(models.Model):
 
 
 class IrExportsLine(models.Model):
-    _name = 'ir.exports.line'
     _description = 'Exports Line'
     _order = 'id'
 

--- a/odoo/addons/base/models/ir_fields.py
+++ b/odoo/addons/base/models/ir_fields.py
@@ -43,7 +43,6 @@ class ConversionNotFound(ValueError):
     pass
 
 class IrFieldsConverter(models.AbstractModel):
-    _name = 'ir.fields.converter'
     _description = 'Fields Converter'
 
     @api.model

--- a/odoo/addons/base/models/ir_filters.py
+++ b/odoo/addons/base/models/ir_filters.py
@@ -7,7 +7,6 @@ from odoo.tools.safe_eval import safe_eval, datetime
 
 
 class IrFilters(models.Model):
-    _name = 'ir.filters'
     _description = 'Filters'
     _order = 'model_id, name, id desc'
 

--- a/odoo/addons/base/models/ir_http.py
+++ b/odoo/addons/base/models/ir_http.py
@@ -134,7 +134,6 @@ class FasterRule(werkzeug.routing.Rule):
 
 
 class IrHttp(models.AbstractModel):
-    _name = 'ir.http'
     _description = "HTTP Routing"
 
     @classmethod

--- a/odoo/addons/base/models/ir_logging.py
+++ b/odoo/addons/base/models/ir_logging.py
@@ -3,7 +3,6 @@ from odoo import api, fields, models
 
 
 class IrLogging(models.Model):
-    _name = 'ir.logging'
     _description = 'Logging'
     _order = 'id DESC'
     _allow_sudo_commands = False

--- a/odoo/addons/base/models/ir_model.py
+++ b/odoo/addons/base/models/ir_model.py
@@ -188,7 +188,6 @@ def upsert_en(model, fnames, rows, conflict):
 #
 class Base(models.AbstractModel):
     """ The base model, which is implicitly inherited by all models. """
-    _name = 'base'
     _description = 'Base'
 
 
@@ -202,7 +201,6 @@ class Unknown(models.AbstractModel):
 
 
 class IrModel(models.Model):
-    _name = 'ir.model'
     _description = "Models"
     _order = 'model'
     _rec_names_search = ['name', 'model']
@@ -519,7 +517,6 @@ FIELD_TYPES = [(key, key) for key in sorted(fields.Field.by_type)]
 
 
 class IrModelFields(models.Model):
-    _name = 'ir.model.fields'
     _description = "Fields"
     _order = "name"
     _rec_name = 'field_description'
@@ -1382,8 +1379,7 @@ class IrModelFields(models.Model):
         return [(sel.value, sel.name) for sel in field.selection_ids]
 
 
-class ModelInherit(models.Model):
-    _name = "ir.model.inherit"
+class IrModelInherit(models.Model):
     _description = "Model Inheritance Tree"
     _log_access = False
 
@@ -1469,8 +1465,7 @@ class ModelInherit(models.Model):
         self.env["ir.model.data"]._update_xmlids(data_list)
 
 
-class IrModelSelection(models.Model):
-    _name = 'ir.model.fields.selection'
+class IrModelFieldsSelection(models.Model):
     _order = 'sequence, id'
     _description = "Fields Selection"
     _allow_sudo_commands = False
@@ -1787,7 +1782,6 @@ class IrModelConstraint(models.Model):
     This model tracks PostgreSQL foreign keys and constraints used by Odoo
     models.
     """
-    _name = 'ir.model.constraint'
     _description = 'Model Constraint'
     _allow_sudo_commands = False
 
@@ -1941,7 +1935,6 @@ class IrModelRelation(models.Model):
     This model tracks PostgreSQL tables used to implement Odoo many2many
     relations.
     """
-    _name = 'ir.model.relation'
     _description = 'Relation Model'
     _allow_sudo_commands = False
 
@@ -2003,7 +1996,6 @@ class IrModelRelation(models.Model):
 
 
 class IrModelAccess(models.Model):
-    _name = 'ir.model.access'
     _description = 'Model Access'
     _order = 'model_id,group_id,name,id'
     _allow_sudo_commands = False
@@ -2159,7 +2151,6 @@ class IrModelData(models.Model):
              modules themselves, thus making it possible to later
              update them seamlessly.
     """
-    _name = 'ir.model.data'
     _description = 'Model Data'
     _order = 'module, model, name'
     _allow_sudo_commands = False
@@ -2636,8 +2627,7 @@ class IrModelData(models.Model):
             xid.noupdate = not xid.noupdate
 
 
-class WizardModelMenu(models.TransientModel):
-    _name = 'wizard.ir.model.menu.create'
+class WizardIrModelMenuCreate(models.TransientModel):
     _description = 'Create Menu Wizard'
 
     menu_id = fields.Many2one('ir.ui.menu', string='Parent Menu', required=True, ondelete='cascade')

--- a/odoo/addons/base/models/ir_module.py
+++ b/odoo/addons/base/models/ir_module.py
@@ -75,8 +75,7 @@ def assert_log_admin_access(method):
         return method(self, *args, **kwargs)
     return decorator(check_and_log, method)
 
-class ModuleCategory(models.Model):
-    _name = "ir.module.category"
+class IrModuleCategory(models.Model):
     _description = "Application"
     _order = 'name'
     _allow_sudo_commands = False
@@ -148,8 +147,7 @@ XML_DECLARATION = (
 )
 
 
-class Module(models.Model):
-    _name = "ir.module.module"
+class IrModuleModule(models.Model):
     _rec_name = "shortdesc"
     _rec_names_search = ['name', 'shortdesc', 'summary']
     _description = "Module"
@@ -336,7 +334,7 @@ class Module(models.Model):
 
     def unlink(self):
         self.env.registry.clear_cache()
-        return super(Module, self).unlink()
+        return super().unlink()
 
     def _get_modules_to_load_domain(self):
         """ Domain to retrieve the modules that should be loaded by the registry. """
@@ -942,7 +940,7 @@ class Module(models.Model):
                 'values': list(values_range.values()),
             }
 
-        return super(Module, self).search_panel_select_range(field_name, **kwargs)
+        return super().search_panel_select_range(field_name, **kwargs)
 
     @api.model
     def _load_module_terms(self, modules, langs, overwrite=False, imported_module=False):
@@ -969,8 +967,7 @@ class Module(models.Model):
 
 DEP_STATES = STATES + [('unknown', 'Unknown')]
 
-class ModuleDependency(models.Model):
-    _name = "ir.module.module.dependency"
+class IrModuleModuleDependency(models.Model):
     _description = "Module dependency"
     _log_access = False  # inserts are done manually, create and write uid, dates are always null
     _allow_sudo_commands = False
@@ -1034,8 +1031,7 @@ class ModuleDependency(models.Model):
         return res
 
 
-class ModuleExclusion(models.Model):
-    _name = "ir.module.module.exclusion"
+class IrModuleModuleExclusion(models.Model):
     _description = "Module exclusion"
     _allow_sudo_commands = False
 

--- a/odoo/addons/base/models/ir_profile.py
+++ b/odoo/addons/base/models/ir_profile.py
@@ -18,7 +18,6 @@ _logger = logging.getLogger(__name__)
 
 
 class IrProfile(models.Model):
-    _name = 'ir.profile'
     _description = 'Profiling results'
     _log_access = False  # avoid useless foreign key on res_user
     _order = 'session desc, id desc'
@@ -123,8 +122,7 @@ class IrProfile(models.Model):
         }
 
 
-class EnableProfilingWizard(models.TransientModel):
-    _name = 'base.enable.profiling.wizard'
+class BaseEnableProfilingWizard(models.TransientModel):
     _description = "Enable profiling for some time"
 
     duration = fields.Selection([

--- a/odoo/addons/base/models/ir_qweb.py
+++ b/odoo/addons/base/models/ir_qweb.py
@@ -1,7 +1,7 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 """
 ================
-IrQWeb / ir.qweb
+IrQweb / ir.qweb
 ================
 
 Preamble
@@ -552,7 +552,7 @@ class QWebException(Exception):
 ####################################
 
 
-class IrQWeb(models.AbstractModel):
+class IrQweb(models.AbstractModel):
     """ Base QWeb rendering engine
     * to customize ``t-field`` rendering, subclass ``ir.qweb.field`` and
       create new models called :samp:`ir.qweb.field.{widget}`
@@ -561,7 +561,6 @@ class IrQWeb(models.AbstractModel):
     inheriting from ``ir.qweb`` and customize that.
     """
 
-    _name = 'ir.qweb'
     _description = 'Qweb'
 
     @QwebTracker.wrap_render
@@ -2695,7 +2694,7 @@ def render(template_name, values, load, **options):
             _Registry__caches_groups.setdefault(cache_name.split('.')[0], []).append(cache)
 
 
-    class MockIrQWeb(IrQWeb):
+    class MockIrQWeb(IrQweb):
         _register = False               # not visible in real registry
 
         pool = MockPool()

--- a/odoo/addons/base/models/ir_qweb_fields.py
+++ b/odoo/addons/base/models/ir_qweb_fields.py
@@ -43,7 +43,7 @@ def nl2br_enclose(string: str, enclosure_tag: str = 'div') -> Markup:
 # QWeb Fields converters
 #--------------------------------------------------------------------
 
-class FieldConverter(models.AbstractModel):
+class IrQwebField(models.AbstractModel):
     """ Used to convert a t-field specification into an output HTML field.
 
     :meth:`~.to_html` is the entry point of this conversion from QWeb, it:
@@ -53,7 +53,6 @@ class FieldConverter(models.AbstractModel):
       result node
     * generates the root result node itself through :meth:`~.render_element`
     """
-    _name = 'ir.qweb.field'
     _description = 'Qweb Field'
 
     @api.model
@@ -146,14 +145,13 @@ class FieldConverter(models.AbstractModel):
         return self.env['res.lang'].browse(get_lang(self.env).id)
 
 
-class IntegerConverter(models.AbstractModel):
-    _name = 'ir.qweb.field.integer'
+class IrQwebFieldInteger(models.AbstractModel):
     _description = 'Qweb Field Integer'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def get_available_options(self):
-        options = super(IntegerConverter, self).get_available_options()
+        options = super().get_available_options()
         options.update(
             format_decimalized_number=dict(type='boolean', string=_('Decimalized number')),
             precision_digits=dict(type='integer', string=_('Precision Digits')),
@@ -167,14 +165,13 @@ class IntegerConverter(models.AbstractModel):
         return self.user_lang().format('%d', value, grouping=True).replace(r'-', '-\N{ZERO WIDTH NO-BREAK SPACE}')
 
 
-class FloatConverter(models.AbstractModel):
-    _name = 'ir.qweb.field.float'
+class IrQwebFieldFloat(models.AbstractModel):
     _description = 'Qweb Field Float'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def get_available_options(self):
-        options = super(FloatConverter, self).get_available_options()
+        options = super().get_available_options()
         options.update(
             precision=dict(type='integer', string=_('Rounding precision')),
         )
@@ -209,17 +206,16 @@ class FloatConverter(models.AbstractModel):
         if 'precision' not in options and 'decimal_precision' not in options:
             _, precision = record._fields[field_name].get_digits(record.env) or (None, None)
             options = dict(options, precision=precision)
-        return super(FloatConverter, self).record_to_html(record, field_name, options)
+        return super().record_to_html(record, field_name, options)
 
 
-class DateConverter(models.AbstractModel):
-    _name = 'ir.qweb.field.date'
+class IrQwebFieldDate(models.AbstractModel):
     _description = 'Qweb Field Date'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def get_available_options(self):
-        options = super(DateConverter, self).get_available_options()
+        options = super().get_available_options()
         options.update(
             format=dict(type='string', string=_('Date format'))
         )
@@ -230,14 +226,13 @@ class DateConverter(models.AbstractModel):
         return format_date(self.env, value, date_format=options.get('format'))
 
 
-class DateTimeConverter(models.AbstractModel):
-    _name = 'ir.qweb.field.datetime'
+class IrQwebFieldDatetime(models.AbstractModel):
     _description = 'Qweb Field Datetime'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def get_available_options(self):
-        options = super(DateTimeConverter, self).get_available_options()
+        options = super().get_available_options()
         options.update(
             format=dict(type='string', string=_('Pattern to format')),
             tz_name=dict(type='char', string=_('Optional timezone name')),
@@ -288,10 +283,9 @@ class DateTimeConverter(models.AbstractModel):
             return babel.dates.format_datetime(value, format=pattern, tzinfo=tzinfo, locale=locale)
 
 
-class TextConverter(models.AbstractModel):
-    _name = 'ir.qweb.field.text'
+class IrQwebFieldText(models.AbstractModel):
     _description = 'Qweb Field Text'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def value_to_html(self, value, options):
@@ -301,14 +295,13 @@ class TextConverter(models.AbstractModel):
         return nl2br(value) if value else ''
 
 
-class SelectionConverter(models.AbstractModel):
-    _name = 'ir.qweb.field.selection'
+class IrQwebFieldSelection(models.AbstractModel):
     _description = 'Qweb Field Selection'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def get_available_options(self):
-        options = super(SelectionConverter, self).get_available_options()
+        options = super().get_available_options()
         options.update(
             selection=dict(type='selection', string=_('Selection'), description=_('By default the widget uses the field information'), required=True)
         )
@@ -327,13 +320,12 @@ class SelectionConverter(models.AbstractModel):
     def record_to_html(self, record, field_name, options):
         if 'selection' not in options:
             options = dict(options, selection=dict(record._fields[field_name].get_description(self.env)['selection']))
-        return super(SelectionConverter, self).record_to_html(record, field_name, options)
+        return super().record_to_html(record, field_name, options)
 
 
-class ManyToOneConverter(models.AbstractModel):
-    _name = 'ir.qweb.field.many2one'
+class IrQwebFieldMany2one(models.AbstractModel):
     _description = 'Qweb Field Many to One'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def value_to_html(self, value, options):
@@ -345,10 +337,9 @@ class ManyToOneConverter(models.AbstractModel):
         return nl2br(value)
 
 
-class ManyToManyConverter(models.AbstractModel):
-    _name = 'ir.qweb.field.many2many'
+class IrQwebFieldMany2many(models.AbstractModel):
     _description = 'Qweb field many2many'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def value_to_html(self, value, options):
@@ -358,10 +349,9 @@ class ManyToManyConverter(models.AbstractModel):
         return nl2br(text)
 
 
-class HTMLConverter(models.AbstractModel):
-    _name = 'ir.qweb.field.html'
+class IrQwebFieldHtml(models.AbstractModel):
     _description = 'Qweb Field HTML'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def value_to_html(self, value, options):
@@ -378,7 +368,7 @@ class HTMLConverter(models.AbstractModel):
         return Markup(etree.tostring(body, encoding='unicode', method='html')[6:-7])
 
 
-class ImageConverter(models.AbstractModel):
+class IrQwebFieldImage(models.AbstractModel):
     """ ``image`` widget rendering, inserts a data:uri-using image tag in the
     document. May be overridden by e.g. the website module to generate links
     instead.
@@ -387,9 +377,8 @@ class ImageConverter(models.AbstractModel):
               reports may need embedded images or FS links whereas website
               needs website-aware
     """
-    _name = 'ir.qweb.field.image'
     _description = 'Qweb Field Image'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def _get_src_data_b64(self, value, options):
@@ -415,19 +404,19 @@ class ImageConverter(models.AbstractModel):
     def value_to_html(self, value, options):
         return Markup('<img src="%s">') % self._get_src_data_b64(value, options)
 
-class ImageUrlConverter(models.AbstractModel):
+class IrQwebFieldImageUrl(models.AbstractModel):
     """ ``image_url`` widget rendering, inserts an image tag in the
     document.
     """
     _name = 'ir.qweb.field.image_url'
     _description = 'Qweb Field Image'
-    _inherit = 'ir.qweb.field.image'
+    _inherit = ['ir.qweb.field.image']
 
     @api.model
     def value_to_html(self, value, options):
         return Markup('<img src="%s">' % (value))
 
-class MonetaryConverter(models.AbstractModel):
+class IrQwebFieldMonetary(models.AbstractModel):
     """ ``monetary`` converter, has a mandatory option
     ``display_currency`` only if field is not of type Monetary.
     Otherwise, if we are in presence of a monetary field, the field definition must
@@ -441,13 +430,12 @@ class MonetaryConverter(models.AbstractModel):
               options mapping, so that the context is available to callees.
               It's set under the ``_values`` key.
     """
-    _name = 'ir.qweb.field.monetary'
     _description = 'Qweb Field Monetary'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def get_available_options(self):
-        options = super(MonetaryConverter, self).get_available_options()
+        options = super().get_available_options()
         options.update(
             from_currency=dict(type='model', params='res.currency', string=_('Original currency')),
             display_currency=dict(type='model', params='res.currency', string=_('Display currency'), required="value_to_html"),
@@ -516,7 +504,7 @@ class MonetaryConverter(models.AbstractModel):
         if 'company_id' not in options:
             options['company_id'] = record._context.get('company_id')
 
-        return super(MonetaryConverter, self).record_to_html(record, field_name, options)
+        return super().record_to_html(record, field_name, options)
 
 
 TIMEDELTA_UNITS = (
@@ -530,7 +518,7 @@ TIMEDELTA_UNITS = (
 )
 
 
-class FloatTimeConverter(models.AbstractModel):
+class IrQwebFieldFloatTime(models.AbstractModel):
     """ ``float_time`` converter, to display integral or fractional values as
     human-readable time spans (e.g. 1.5 as "01:30").
 
@@ -538,23 +526,22 @@ class FloatTimeConverter(models.AbstractModel):
     """
     _name = 'ir.qweb.field.float_time'
     _description = 'Qweb Field Float Time'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def value_to_html(self, value, options):
         return format_duration(value)
 
 
-class TimeConverter(models.AbstractModel):
+class IrQwebFieldTime(models.AbstractModel):
     """ ``time`` converter, to display integer or fractional value as
     human-readable time (e.g. 1.5 as "1:30 AM"). The unit of this value
     is in hours.
 
     Can be used on any numerical field between: 0 <= value < 24
     """
-    _name = 'ir.qweb.field.time'
     _description = 'QWeb Field Time'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def value_to_html(self, value, options):
@@ -571,7 +558,7 @@ class TimeConverter(models.AbstractModel):
         return babel.dates.format_time(t, format=pattern, tzinfo=None, locale=locale)
 
 
-class DurationConverter(models.AbstractModel):
+class IrQwebFieldDuration(models.AbstractModel):
     """ ``duration`` converter, to display integral or fractional values as
     human-readable time spans (e.g. 1.5 as "1 hour 30 minutes").
 
@@ -587,13 +574,12 @@ class DurationConverter(models.AbstractModel):
 
     Sub-second values will be ignored.
     """
-    _name = 'ir.qweb.field.duration'
     _description = 'Qweb Field Duration'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def get_available_options(self):
-        options = super(DurationConverter, self).get_available_options()
+        options = super().get_available_options()
         unit = [(value, str(label)) for value, label, ratio in TIMEDELTA_UNITS]
         options.update(
             digital=dict(type="boolean", string=_('Digital formatting')),
@@ -678,14 +664,13 @@ class DurationConverter(models.AbstractModel):
         return u' '.join(sections)
 
 
-class RelativeDatetimeConverter(models.AbstractModel):
-    _name = 'ir.qweb.field.relative'
+class IrQwebFieldRelative(models.AbstractModel):
     _description = 'Qweb Field Relative'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def get_available_options(self):
-        options = super(RelativeDatetimeConverter, self).get_available_options()
+        options = super().get_available_options()
         options.update(
             now=dict(type='datetime', string=_('Reference date'), description=_('Date to compare with the field value, by default use the current date.'))
         )
@@ -707,21 +692,20 @@ class RelativeDatetimeConverter(models.AbstractModel):
     def record_to_html(self, record, field_name, options):
         if 'now' not in options:
             options = dict(options, now=record._fields[field_name].now())
-        return super(RelativeDatetimeConverter, self).record_to_html(record, field_name, options)
+        return super().record_to_html(record, field_name, options)
 
 
-class BarcodeConverter(models.AbstractModel):
+class IrQwebFieldBarcode(models.AbstractModel):
     """ ``barcode`` widget rendering, inserts a data:uri-using image tag in the
     document. May be overridden by e.g. the website module to generate links
     instead.
     """
-    _name = 'ir.qweb.field.barcode'
     _description = 'Qweb Field Barcode'
-    _inherit = 'ir.qweb.field'
+    _inherit = ['ir.qweb.field']
 
     @api.model
     def get_available_options(self):
-        options = super(BarcodeConverter, self).get_available_options()
+        options = super().get_available_options()
         options.update(
             symbology=dict(type='string', string=_('Barcode symbology'), description=_('Barcode type, eg: UPCA, EAN13, Code128'), default_value='Code128'),
             width=dict(type='integer', string=_('Width'), default_value=600),
@@ -754,14 +738,13 @@ class BarcodeConverter(models.AbstractModel):
         return Markup(html.tostring(img_element, encoding='unicode'))
 
 
-class Contact(models.AbstractModel):
-    _name = 'ir.qweb.field.contact'
+class IrQwebFieldContact(models.AbstractModel):
     _description = 'Qweb Field Contact'
-    _inherit = 'ir.qweb.field.many2one'
+    _inherit = ['ir.qweb.field.many2one']
 
     @api.model
     def get_available_options(self):
-        options = super(Contact, self).get_available_options()
+        options = super().get_available_options()
         contact_fields = [
             {'field_name': 'name', 'label': _('Name'), 'default': True},
             {'field_name': 'address', 'label': _('Address'), 'default': True},
@@ -833,10 +816,9 @@ class Contact(models.AbstractModel):
         return self.env['ir.qweb']._render('base.contact', val, minimal_qcontext=True)
 
 
-class QwebView(models.AbstractModel):
-    _name = 'ir.qweb.field.qweb'
+class IrQwebFieldQweb(models.AbstractModel):
     _description = 'Qweb Field qweb'
-    _inherit = 'ir.qweb.field.many2one'
+    _inherit = ['ir.qweb.field.many2one']
 
     @api.model
     def record_to_html(self, record, field_name, options):

--- a/odoo/addons/base/models/ir_rule.py
+++ b/odoo/addons/base/models/ir_rule.py
@@ -10,7 +10,6 @@ from odoo.tools.safe_eval import safe_eval, time
 
 _logger = logging.getLogger(__name__)
 class IrRule(models.Model):
-    _name = 'ir.rule'
     _description = 'Record Rule'
     _order = 'model_id DESC,id'
     _MODES = ['read', 'write', 'create', 'unlink']

--- a/odoo/addons/base/models/ir_sequence.py
+++ b/odoo/addons/base/models/ir_sequence.py
@@ -86,7 +86,6 @@ class IrSequence(models.Model):
     way.
 
     """
-    _name = 'ir.sequence'
     _description = 'Sequence'
     _order = 'name'
     _allow_sudo_commands = False

--- a/odoo/addons/base/models/ir_ui_menu.py
+++ b/odoo/addons/base/models/ir_ui_menu.py
@@ -17,7 +17,6 @@ NUMBER_PARENS = re.compile(r"\(([0-9]+)\)")
 
 
 class IrUiMenu(models.Model):
-    _name = 'ir.ui.menu'
     _description = 'Menu'
     _order = "sequence,id"
     _parent_store = True

--- a/odoo/addons/base/models/ir_ui_view.py
+++ b/odoo/addons/base/models/ir_ui_view.py
@@ -63,8 +63,7 @@ def att_names(name):
     yield f"t-attf-{name}"
 
 
-class ViewCustom(models.Model):
-    _name = 'ir.ui.view.custom'
+class IrUiViewCustom(models.Model):
     _description = 'Custom View'
     _order = 'create_date desc'  # search(limit=1) should return the last customization
     _rec_name = 'user_id'
@@ -75,7 +74,7 @@ class ViewCustom(models.Model):
     arch = fields.Text(string='View Architecture', required=True)
 
     def _auto_init(self):
-        res = super(ViewCustom, self)._auto_init()
+        res = super()._auto_init()
         tools.create_index(self._cr, 'ir_ui_view_custom_user_id_ref_id',
                            self._table, ['user_id', 'ref_id'])
         return res
@@ -140,8 +139,7 @@ TRANSLATED_ATTRS_RE = re.compile(r"@(%s)\b" % "|".join(TRANSLATED_ATTRS))
 WRONGCLASS = re.compile(r"(@class\s*=|=\s*@class|contains\(@class)")
 
 
-class View(models.Model):
-    _name = 'ir.ui.view'
+class IrUiView(models.Model):
     _description = 'View'
     _order = "priority,name,id"
     _allow_sudo_commands = False
@@ -445,7 +443,7 @@ actual arch.
     ]
 
     def _auto_init(self):
-        res = super(View, self)._auto_init()
+        res = super()._auto_init()
         tools.create_index(self._cr, 'ir_ui_view_model_type_inherit_id',
                            self._table, ['model', 'inherit_id'])
         return res
@@ -511,7 +509,7 @@ actual arch.
             values.update(self._compute_defaults(values))
 
         self.env.registry.clear_cache('templates')
-        result = super(View, self.with_context(ir_ui_view_partial_validation=True)).create(vals_list)
+        result = super(IrUiView, self.with_context(ir_ui_view_partial_validation=True)).create(vals_list)
         return result.with_env(self.env)
 
     def write(self, vals):
@@ -530,7 +528,7 @@ actual arch.
         if 'arch_db' in vals and not self.env.context.get('no_save_prev'):
             vals['arch_prev'] = self.arch_db
 
-        res = super(View, self).write(self._compute_defaults(vals))
+        res = super().write(self._compute_defaults(vals))
 
         # Check the xml of the view if it gets re-activated.
         # Ideally, `active` shoud have been added to the `api.constrains` of `_check_xml`,
@@ -550,10 +548,10 @@ actual arch.
         if self.env.context.get('_force_unlink', False) and self.inherit_children_ids:
             self.inherit_children_ids.unlink()
         self.env.registry.clear_cache('templates')
-        return super(View, self).unlink()
+        return super().unlink()
 
     def _update_field_translations(self, fname, translations, digest=None, source_lang=None):
-        return super(View, self.with_context(no_save_prev=True))._update_field_translations(fname, translations, digest=digest, source_lang=source_lang)
+        return super(IrUiView, self.with_context(no_save_prev=True))._update_field_translations(fname, translations, digest=digest, source_lang=source_lang)
 
     def copy_data(self, default=None):
         has_default_without_key = default and 'key' not in default
@@ -2267,7 +2265,7 @@ actual arch.
                     self._load_records_write_on_cow(cow_view, inherit_id, authorized_vals)
                 else:
                     cow_view.with_context(no_cow=True).write(authorized_vals)
-        super(View, self)._load_records_write(values)
+        super()._load_records_write(values)
 
     def _load_records_write_on_cow(self, cow_view, inherit_id, values):
         # for modules updated before `website`, we need to
@@ -2283,7 +2281,6 @@ actual arch.
 
 class ResetViewArchWizard(models.TransientModel):
     """ A wizard to compare and reset views architecture. """
-    _name = "reset.view.arch.wizard"
     _description = "Reset View Architecture Wizard"
 
     view_id = fields.Many2one('ir.ui.view', string='View')
@@ -2363,8 +2360,10 @@ class ResetViewArchWizard(models.TransientModel):
         return {'type': 'ir.actions.act_window_close'}
 
 
-class Model(models.AbstractModel):
-    _inherit = 'base'
+class Base(models.AbstractModel):
+    _name = "base"
+
+    _inherit = ['base']
 
     _date_name = 'date'         #: field to use for default calendar view
 
@@ -2626,7 +2625,7 @@ class Model(models.AbstractModel):
             if no view exists for that model, and no method `_get_default_[view_type]_view` exists for the view type
 
         """
-        View = self.env['ir.ui.view'].sudo()
+        IrUiView = self.env['ir.ui.view'].sudo()
 
         # try to find a view_id if none provided
         if not view_id:
@@ -2652,15 +2651,15 @@ class Model(models.AbstractModel):
 
             if not view_id:
                 # otherwise try to find the lowest priority matching ir.ui.view
-                view_id = View.default_view(self._name, view_type)
+                view_id = IrUiView.default_view(self._name, view_type)
 
         if view_id:
             # read the view with inherited views applied
-            view = View.browse(view_id)
+            view = IrUiView.browse(view_id)
             arch = view._get_combined_arch()
         else:
             # fallback on default views methods if no ir.ui.view could be found
-            view = View.browse()
+            view = IrUiView.browse()
             try:
                 arch = getattr(self, '_get_default_%s_view' % view_type)()
             except AttributeError:

--- a/odoo/addons/base/models/report_layout.py
+++ b/odoo/addons/base/models/report_layout.py
@@ -5,7 +5,6 @@ from odoo import fields, models
 
 
 class ReportLayout(models.Model):
-    _name = "report.layout"
     _description = 'Report Layout'
     _order = 'sequence'
 

--- a/odoo/addons/base/models/report_paperformat.py
+++ b/odoo/addons/base/models/report_paperformat.py
@@ -163,8 +163,7 @@ PAPER_SIZES = [
 ]
 
 
-class report_paperformat(models.Model):
-    _name = "report.paperformat"
+class ReportPaperformat(models.Model):
     _description = "Paper Format Config"
 
     name = fields.Char('Name', required=True)

--- a/odoo/addons/base/models/res_bank.py
+++ b/odoo/addons/base/models/res_bank.py
@@ -12,9 +12,8 @@ def sanitize_account_number(acc_number):
     return False
 
 
-class Bank(models.Model):
+class ResBank(models.Model):
     _description = 'Bank'
-    _name = 'res.bank'
     _order = 'name'
     _rec_names_search = ['name', 'bic']
 
@@ -58,7 +57,6 @@ class Bank(models.Model):
 
 
 class ResPartnerBank(models.Model):
-    _name = 'res.partner.bank'
     _rec_name = 'acc_number'
     _description = 'Bank Accounts'
     _order = 'sequence, id'

--- a/odoo/addons/base/models/res_company.py
+++ b/odoo/addons/base/models/res_company.py
@@ -14,8 +14,7 @@ from odoo.tools import html2plaintext, file_open, ormcache
 _logger = logging.getLogger(__name__)
 
 
-class Company(models.Model):
-    _name = "res.company"
+class ResCompany(models.Model):
     _description = 'Companies'
     _order = 'sequence, name'
     _inherit = ['format.address.mixin', 'format.vat.label.mixin']
@@ -88,7 +87,7 @@ class Company(models.Model):
             paperformat_euro = self.env.ref('base.paperformat_euro', False)
             if paperformat_euro:
                 company.write({'paperformat_id': paperformat_euro.id})
-        sup = super(Company, self)
+        sup = super()
         if hasattr(sup, 'init'):
             sup.init()
 
@@ -361,7 +360,7 @@ class Company(models.Model):
             if not currency.active:
                 currency.write({'active': True})
 
-        res = super(Company, self).write(values)
+        res = super().write(values)
 
         # Archiving a company should also archive all of its branches
         if values.get('active') is False:

--- a/odoo/addons/base/models/res_config.py
+++ b/odoo/addons/base/models/res_config.py
@@ -29,14 +29,13 @@ class ResConfigModuleInstallationMixin(object):
         return result
 
 
-class ResConfigConfigurable(models.TransientModel):
+class ResConfig(models.TransientModel):
     ''' Base classes for new-style configuration items
 
     Configuration items should inherit from this class, implement
     the execute method (and optionally the cancel one) and have
     their view inherit from the related res_config_view_base view.
     '''
-    _name = 'res.config'
     _description = 'Config'
 
     def start(self):
@@ -165,7 +164,6 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
         It also invokes all methods with a name that starts with 'get_default_';
         such methods can be defined to provide current values for other fields.
     """
-    _name = 'res.config.settings'
     _description = 'Config Settings'
 
     def _valid_field_parameter(self, field, name):

--- a/odoo/addons/base/models/res_country.py
+++ b/odoo/addons/base/models/res_country.py
@@ -29,8 +29,7 @@ NO_FLAG_COUNTRIES = [
 ]
 
 
-class Country(models.Model):
-    _name = 'res.country'
+class ResCountry(models.Model):
     _description = 'Country'
     _order = 'name'
     _rec_names_search = ['name', 'code']
@@ -110,7 +109,7 @@ class Country(models.Model):
         for vals in vals_list:
             if vals.get('code'):
                 vals['code'] = vals['code'].upper()
-        return super(Country, self).create(vals_list)
+        return super().create(vals_list)
 
     def write(self, vals):
         if vals.get('code'):
@@ -148,18 +147,16 @@ class Country(models.Model):
                 except (ValueError, KeyError):
                     raise UserError(_('The layout contains an invalid format key'))
 
-class CountryGroup(models.Model):
+class ResCountryGroup(models.Model):
     _description = "Country Group"
-    _name = 'res.country.group'
 
     name = fields.Char(required=True, translate=True)
     country_ids = fields.Many2many('res.country', 'res_country_res_country_group_rel',
                                    'res_country_group_id', 'res_country_id', string='Countries')
 
 
-class CountryState(models.Model):
+class ResCountryState(models.Model):
     _description = "Country state"
-    _name = 'res.country.state'
     _order = 'code'
     _rec_names_search = ['name', 'code']
 

--- a/odoo/addons/base/models/res_currency.py
+++ b/odoo/addons/base/models/res_currency.py
@@ -19,8 +19,7 @@ except ImportError:
     num2words = None
 
 
-class Currency(models.Model):
-    _name = "res.currency"
+class ResCurrency(models.Model):
     _description = "Currency"
     _rec_names_search = ['name', 'full_name']
     _order = 'active desc, name'
@@ -327,8 +326,7 @@ class Currency(models.Model):
         return arch, view
 
 
-class CurrencyRate(models.Model):
-    _name = "res.currency.rate"
+class ResCurrencyRate(models.Model):
     _description = "Currency Rate"
     _rec_names_search = ['name', 'rate']
     _order = "name desc"

--- a/odoo/addons/base/models/res_device.py
+++ b/odoo/addons/base/models/res_device.py
@@ -14,7 +14,6 @@ _logger = logging.getLogger(__name__)
 
 
 class ResDeviceLog(models.Model):
-    _name = 'res.device.log'
     _description = 'Device Log'
     _rec_names_search = ['platform', 'browser']
 
@@ -130,7 +129,6 @@ class ResDeviceLog(models.Model):
 
 
 class ResDevice(models.Model):
-    _name = "res.device"
     _inherit = ["res.device.log"]
     _description = "Devices"
     _auto = False

--- a/odoo/addons/base/models/res_lang.py
+++ b/odoo/addons/base/models/res_lang.py
@@ -47,8 +47,7 @@ class LangDataDict(frozendict):
         return LangData(dict.fromkeys(some_lang, False))
 
 
-class Lang(models.Model):
-    _name = "res.lang"
+class ResLang(models.Model):
     _description = "Languages"
     _order = "active desc,name"
     _allow_sudo_commands = False
@@ -317,7 +316,7 @@ class Lang(models.Model):
         for vals in vals_list:
             if not vals.get('url_code'):
                 vals['url_code'] = vals.get('iso_code') or vals['code']
-        return super(Lang, self).create(vals_list)
+        return super().create(vals_list)
 
     def write(self, vals):
         lang_codes = self.mapped('code')
@@ -333,7 +332,7 @@ class Lang(models.Model):
             # delete linked ir.default specifying default partner's language
             self.env['ir.default'].discard_values('res.partner', 'lang', lang_codes)
 
-        res = super(Lang, self).write(vals)
+        res = super().write(vals)
 
         if vals.get('active'):
             # If we activate a lang, set it's url_code to the shortest version
@@ -371,7 +370,7 @@ class Lang(models.Model):
 
     def unlink(self):
         self.env.registry.clear_cache()
-        return super(Lang, self).unlink()
+        return super().unlink()
 
     def copy_data(self, default=None):
         default = dict(default or {})

--- a/odoo/addons/base/models/res_partner.py
+++ b/odoo/addons/base/models/res_partner.py
@@ -47,7 +47,6 @@ def _tz_get(self):
 
 
 class FormatVATLabelMixin(models.AbstractModel):
-    _name = "format.vat.label.mixin"
     _description = "Country Specific VAT Label"
 
     @api.model
@@ -62,7 +61,6 @@ class FormatVATLabelMixin(models.AbstractModel):
         return arch, view
 
 class FormatAddressMixin(models.AbstractModel):
-    _name = "format.address.mixin"
     _description = 'Address Format'
 
     def _extract_fields_from_address(self, address_line):
@@ -81,8 +79,8 @@ class FormatAddressMixin(models.AbstractModel):
         if address_view_id and not self._context.get('no_address_format') and (not address_view_id.model or address_view_id.model == self._name):
             #render the partner address accordingly to address_view_id
             for address_node in arch.xpath("//div[hasclass('o_address_format')]"):
-                Partner = self.env['res.partner'].with_context(no_address_format=True)
-                sub_arch, _sub_view = Partner._get_view(address_view_id.id, 'form')
+                ResPartner = self.env['res.partner'].with_context(no_address_format=True)
+                sub_arch, _sub_view = ResPartner._get_view(address_view_id.id, 'form')
                 #if the model is different than res.partner, there are chances that the view won't work
                 #(e.g fields not present on the model). In that case we just return arch
                 if self._name != 'res.partner':
@@ -136,9 +134,8 @@ class FormatAddressMixin(models.AbstractModel):
         return arch, view
 
 
-class PartnerCategory(models.Model):
+class ResPartnerCategory(models.Model):
     _description = 'Partner Tags'
-    _name = 'res.partner.category'
     _order = 'name'
     _parent_store = True
 
@@ -178,8 +175,7 @@ class PartnerCategory(models.Model):
             return [('id', 'child_of', self._search(domain))]
         return domain
 
-class PartnerTitle(models.Model):
-    _name = 'res.partner.title'
+class ResPartnerTitle(models.Model):
     _order = 'name'
     _description = 'Partner Title'
 
@@ -187,10 +183,9 @@ class PartnerTitle(models.Model):
     shortcut = fields.Char(string='Abbreviation', translate=True)
 
 
-class Partner(models.Model):
+class ResPartner(models.Model):
     _description = 'Contact'
     _inherit = ['format.address.mixin', 'format.vat.label.mixin', 'avatar.mixin']
-    _name = "res.partner"
     _order = "complete_name ASC, id DESC"
     _rec_names_search = ['complete_name', 'email', 'ref', 'vat', 'company_registry']  # TODO vat must be sanitized the same way for storing/searching
     _allow_sudo_commands = False
@@ -338,7 +333,7 @@ class Partner(models.Model):
 
     def _compute_avatar(self, avatar_field, image_field):
         partners_with_internal_user = self.filtered(lambda partner: partner.user_ids - partner.user_ids.filtered('share'))
-        super(Partner, partners_with_internal_user)._compute_avatar(avatar_field, image_field)
+        super(ResPartner, partners_with_internal_user)._compute_avatar(avatar_field, image_field)
         partners_without_image = (self - partners_with_internal_user).filtered(lambda p: not p[image_field])
         for _, group in tools.groupby(partners_without_image, key=lambda p: p._avatar_get_placeholder_path()):
             group_partners = self.env['res.partner'].concat(*group)
@@ -407,7 +402,7 @@ class Partner(models.Model):
             partner_id = partner._origin.id
             #active_test = False because if a partner has been deactivated you still want to raise the error,
             #so that you can reactivate it instead of creating a new one, which would loose its history.
-            Partner = self.with_context(active_test=False).sudo()
+            ResPartner = self.with_context(active_test=False).sudo()
             domain = [
                 ('vat', '=', partner.vat),
             ]
@@ -417,7 +412,7 @@ class Partner(models.Model):
                 domain += [('id', '!=', partner_id), '!', ('id', 'child_of', partner_id)]
             # For VAT number being only one character, we will skip the check just like the regular check_vat
             should_check_vat = partner.vat and len(partner.vat) != 1
-            partner.same_vat_partner_id = should_check_vat and not partner.parent_id and Partner.search(domain, limit=1)
+            partner.same_vat_partner_id = should_check_vat and not partner.parent_id and ResPartner.search(domain, limit=1)
             # check company_registry
             domain = [
                 ('company_registry', '=', partner.company_registry),
@@ -425,7 +420,7 @@ class Partner(models.Model):
             ]
             if partner_id:
                 domain += [('id', '!=', partner_id), '!', ('id', 'child_of', partner_id)]
-            partner.same_company_registry_partner_id = bool(partner.company_registry) and not partner.parent_id and Partner.search(domain, limit=1)
+            partner.same_company_registry_partner_id = bool(partner.company_registry) and not partner.parent_id and ResPartner.search(domain, limit=1)
 
     @api.depends(lambda self: self._display_address_depends())
     def _compute_contact_address(self):
@@ -746,7 +741,7 @@ class Partner(models.Model):
         result = True
         # To write in SUPERUSER on field is_company and avoid access rights problems.
         if 'is_company' in vals and not self.env.su and self.env.user.has_group('base.group_partner_manager'):
-            result = super(Partner, self.sudo()).write({'is_company': vals.get('is_company')})
+            result = super(ResPartner, self.sudo()).write({'is_company': vals.get('is_company')})
             del vals['is_company']
         result = result and super().write(vals)
         for partner in self:
@@ -794,7 +789,7 @@ class Partner(models.Model):
                                     'Linked active users :\n%(names)s', names=", ".join([u.display_name for u in users])))
 
     def _load_records_create(self, vals_list):
-        partners = super(Partner, self.with_context(_partners_skip_fields_sync=True))._load_records_create(vals_list)
+        partners = super(ResPartner, self.with_context(_partners_skip_fields_sync=True))._load_records_create(vals_list)
 
         # batch up first part of _fields_sync
         # group partners by commercial_partner_id (if not self) and parent_id (if type == contact)
@@ -1074,7 +1069,6 @@ class Partner(models.Model):
 
 class ResPartnerIndustry(models.Model):
     _description = 'Industry'
-    _name = "res.partner.industry"
     _order = "name"
 
     name = fields.Char('Name', translate=True)

--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -172,8 +172,7 @@ def check_identity(fn):
 # Basic res.groups and res.users
 #----------------------------------------------------------
 
-class Groups(models.Model):
-    _name = "res.groups"
+class ResGroups(models.Model):
     _description = "Access Groups"
     _rec_name = 'full_name'
     _order = 'name'
@@ -273,7 +272,7 @@ class Groups(models.Model):
         # DLE P139
         if self.ids:
             self.env['ir.model.access'].call_cache_clearing_methods()
-        return super(Groups, self).write(vals)
+        return super().write(vals)
 
     def _ensure_xml_id(self):
         """Return the groups external identifiers, creating the external identifier for groups missing one"""
@@ -297,7 +296,6 @@ class Groups(models.Model):
 
 
 class ResUsersLog(models.Model):
-    _name = 'res.users.log'
     _order = 'id desc'
     _description = 'Users Log'
     # Uses the magical fields `create_uid` and `create_date` for recording logins.
@@ -315,7 +313,7 @@ class ResUsersLog(models.Model):
         _logger.info("GC'd %d user log entries", self._cr.rowcount)
 
 
-class Users(models.Model):
+class ResUsers(models.Model):
     """ User class. A res.users record models an OpenERP user and is different
         from an employee.
 
@@ -323,7 +321,6 @@ class Users(models.Model):
         used to store the data related to the partner: lang, name, address,
         avatar, ... The user model is now dedicated to technical data.
     """
-    _name = "res.users"
     _description = 'User'
     _inherits = {'res.partner': 'partner_id'}
     _order = 'name, login'
@@ -427,9 +424,9 @@ class Users(models.Model):
           AND password !~ '^\$[^$]+\$[^$]+\$.'
         """)
         if self.env.cr.rowcount:
-            Users = self.sudo()
+            ResUsers = self.sudo()
             for uid, pw in cr.fetchall():
-                Users.browse(uid).password = pw
+                ResUsers.browse(uid).password = pw
 
     def _set_password(self):
         ctx = self._crypt_context()
@@ -640,7 +637,7 @@ class Users(models.Model):
         for user in self:
             if not user.active and not user.partner_id.active:
                 user.partner_id.toggle_active()
-        super(Users, self).toggle_active()
+        super().toggle_active()
 
     def onchange(self, values, field_names, fields_spec):
         # Hacky fix to access fields in `SELF_READABLE_FIELDS` in the onchange logic.
@@ -654,7 +651,7 @@ class Users(models.Model):
         if fields and self == self.env.user and all(key in readable or key.startswith('context_') for key in fields):
             # safe fields only, so we read as super-user to bypass access rights
             self = self.sudo()
-        return super(Users, self).read(fields=fields, load=load)
+        return super().read(fields=fields, load=load)
 
     @api.model
     def check_field_access_rights(self, operation, field_names):
@@ -662,7 +659,7 @@ class Users(models.Model):
         if field_names and self == self.env.user and all(key in readable or key.startswith('context_') for key in field_names):
             # safe fields only, so we read as super-user to bypass access rights
             self = self.sudo()
-        return super(Users, self).check_field_access_rights(operation, field_names)
+        return super().check_field_access_rights(operation, field_names)
 
     @api.model
     def _read_group_select(self, aggregate_spec, query):
@@ -692,7 +689,7 @@ class Users(models.Model):
 
     @api.model_create_multi
     def create(self, vals_list):
-        users = super(Users, self).create(vals_list)
+        users = super().create(vals_list)
         setting_vals = []
         for user in users:
             if not user.res_users_settings_ids and user._is_internal():
@@ -745,7 +742,7 @@ class Users(models.Model):
             # the new ones to other existing users
             old_groups = self._default_groups()
 
-        res = super(Users, self).write(values)
+        res = super().write(values)
 
         if old_groups:
             # new elements in _default_groups() means new groups for default users
@@ -1438,8 +1435,8 @@ class Users(models.Model):
 # to the implied groups (transitively).
 #
 
-class GroupsImplied(models.Model):
-    _inherit = 'res.groups'
+class ResGroups(models.Model):
+    _inherit = ['res.groups']
 
     implied_ids = fields.Many2many('res.groups', 'res_groups_implied_rel', 'gid', 'hid',
         string='Inherits', help='Users of this group automatically inherit those groups')
@@ -1457,7 +1454,7 @@ class GroupsImplied(models.Model):
     @api.model_create_multi
     def create(self, vals_list):
         user_ids_list = [vals.pop('users', None) for vals in vals_list]
-        groups = super(GroupsImplied, self).create(vals_list)
+        groups = super().create(vals_list)
         for group, user_ids in zip(groups, user_ids_list):
             if user_ids:
                 # delegate addition of users to add implied groups
@@ -1466,7 +1463,7 @@ class GroupsImplied(models.Model):
         return groups
 
     def write(self, values):
-        res = super(GroupsImplied, self).write(values)
+        res = super().write(values)
         if values.get('users') or values.get('implied_ids'):
             # add all implied groups (to all users of each group)
             for group in self:
@@ -1555,7 +1552,8 @@ class GroupsImplied(models.Model):
 
 
 class UsersImplied(models.Model):
-    _inherit = 'res.users'
+    _name = 'res.users'
+    _inherit = ['res.users']
 
     @api.model_create_multi
     def create(self, vals_list):
@@ -1566,13 +1564,13 @@ class UsersImplied(models.Model):
                 gs = user.groups_id._origin
                 gs = gs | gs.trans_implied_ids
                 values['groups_id'] = self._fields['groups_id'].convert_to_write(gs, user)
-        return super(UsersImplied, self).create(vals_list)
+        return super().create(vals_list)
 
     def write(self, values):
         if not values.get('groups_id'):
-            return super(UsersImplied, self).write(values)
+            return super().write(values)
         users_before = self.filtered(lambda u: u._is_internal())
-        res = super(UsersImplied, self).write(values)
+        res = super().write(values)
         demoted_users = users_before.filtered(lambda u: not u._is_internal())
         if demoted_users:
             # demoted users are restricted to the assigned groups only
@@ -1610,8 +1608,8 @@ class UsersImplied(models.Model):
 #       ID is in 'groups_id' and ID is maximal in the set {ID1, ..., IDk}
 #
 
-class GroupsView(models.Model):
-    _inherit = 'res.groups'
+class ResGroups(models.Model):
+    _inherit = ['res.groups']
 
     @api.model_create_multi
     def create(self, vals_list):
@@ -1625,7 +1623,7 @@ class GroupsView(models.Model):
         # determine which values the "user groups view" depends on
         VIEW_DEPS = ('category_id', 'implied_ids')
         view_values0 = [g[name] for name in VIEW_DEPS if name in values for g in self]
-        res = super(GroupsView, self).write(values)
+        res = super().write(values)
         # update the "user groups view" only if necessary
         view_values1 = [g[name] for name in VIEW_DEPS if name in values for g in self]
         if view_values0 != view_values1:
@@ -1635,7 +1633,7 @@ class GroupsView(models.Model):
         return res
 
     def unlink(self):
-        res = super(GroupsView, self).unlink()
+        res = super().unlink()
         self._update_user_groups_view()
         # actions.get_bindings() depends on action records
         self.env.registry.clear_cache()
@@ -1830,8 +1828,8 @@ class GroupsView(models.Model):
         return res
 
 
-class ModuleCategory(models.Model):
-    _inherit = "ir.module.category"
+class IrModuleCategory(models.Model):
+    _inherit = ["ir.module.category"]
 
     def write(self, values):
         res = super().write(values)
@@ -1845,8 +1843,8 @@ class ModuleCategory(models.Model):
         return res
 
 
-class UsersView(models.Model):
-    _inherit = 'res.users'
+class ResUsers(models.Model):
+    _inherit = ['res.users']
 
     user_group_warning = fields.Text(string="User Group Warning", compute="_compute_user_group_warning")
 
@@ -1865,7 +1863,7 @@ class UsersView(models.Model):
         new_vals_list = []
         for values in vals_list:
             new_vals_list.append(self._remove_reified_groups(values))
-        users = super(UsersView, self).create(new_vals_list)
+        users = super().create(new_vals_list)
         group_multi_company_id = self.env['ir.model.data']._xmlid_to_res_id(
             'base.group_multi_company', raise_if_not_found=False)
         if group_multi_company_id:
@@ -1878,7 +1876,7 @@ class UsersView(models.Model):
 
     def write(self, values):
         values = self._remove_reified_groups(values)
-        res = super(UsersView, self).write(values)
+        res = super().write(values)
         if 'company_ids' not in values:
             return res
         group_multi_company = self.env.ref('base.group_multi_company', False)
@@ -1982,7 +1980,7 @@ class UsersView(models.Model):
     def default_get(self, fields):
         group_fields, fields = partition(is_reified_group, fields)
         fields1 = (fields + ['groups_id']) if group_fields else fields
-        values = super(UsersView, self).default_get(fields1)
+        values = super().default_get(fields1)
         self._add_reified_groups(group_fields, values)
         return values
 
@@ -2033,7 +2031,7 @@ class UsersView(models.Model):
         else:
             other_fields = fields
 
-        res = super(UsersView, self).read(other_fields, load=load)
+        res = super().read(other_fields, load=load)
 
         # post-process result to add reified group fields
         if group_fields:
@@ -2065,7 +2063,7 @@ class UsersView(models.Model):
 
     @api.model
     def fields_get(self, allfields=None, attributes=None):
-        res = super(UsersView, self).fields_get(allfields, attributes=attributes)
+        res = super().fields_get(allfields, attributes=attributes)
         # add reified groups fields
         for app, kind, gs, category_name in self.env['res.groups'].sudo().get_groups_by_application():
             if kind == 'selection':
@@ -2107,13 +2105,14 @@ class UsersView(models.Model):
         if allfields:
             missing = missing.intersection(allfields)
         if missing:
+            self = self.sudo()  # to use super without changing class name.
             res.update({
                 key: dict(values, readonly=key not in self.SELF_WRITEABLE_FIELDS, searchable=False)
-                for key, values in super(UsersView, self.sudo()).fields_get(missing, attributes).items()
+                for key, values in super().fields_get(missing, attributes).items()
             })
         return res
 
-class CheckIdentity(models.TransientModel):
+class ResUsersIdentitycheck(models.TransientModel):
     """ Wizard used to re-check the user's credentials (password) and eventually
     revoke access to his account to every device he has an active session on.
 
@@ -2122,7 +2121,6 @@ class CheckIdentity(models.TransientModel):
     some of the risk of a third party using such an unattended device to manipulate
     the account.
     """
-    _name = 'res.users.identitycheck'
     _description = "Password Check Wizard"
 
     request = fields.Char(readonly=True, groups=fields.NO_ACCESS)
@@ -2160,7 +2158,6 @@ class CheckIdentity(models.TransientModel):
 
 class ChangePasswordWizard(models.TransientModel):
     """ A wizard to manage the change of users' passwords. """
-    _name = "change.password.wizard"
     _description = "Change Password Wizard"
     _transient_max_hours = 0.2
 
@@ -2183,7 +2180,6 @@ class ChangePasswordWizard(models.TransientModel):
 
 class ChangePasswordUser(models.TransientModel):
     """ A model to configure users in the change password wizard. """
-    _name = 'change.password.user'
     _description = 'User, Change Password Wizard'
 
     wizard_id = fields.Many2one('change.password.wizard', string='Wizard', required=True, ondelete='cascade')
@@ -2199,7 +2195,6 @@ class ChangePasswordUser(models.TransientModel):
         self.write({'new_passwd': False})
 
 class ChangePasswordOwn(models.TransientModel):
-    _name = "change.password.own"
     _description = "User, change own password wizard"
     _transient_max_hours = 0.1
 
@@ -2228,8 +2223,8 @@ KEY_CRYPT_CONTEXT = CryptContext(
     # attacks on API keys isn't much of a concern
     ['pbkdf2_sha512'], pbkdf2_sha512__rounds=6000,
 )
-class APIKeysUser(models.Model):
-    _inherit = 'res.users'
+class ResUsers(models.Model):
+    _inherit = ['res.users']
 
     api_key_ids = fields.One2many('res.users.apikeys', 'user_id', string="API Keys")
 
@@ -2282,8 +2277,7 @@ class APIKeysUser(models.Model):
             'views': [(False, 'form')],
         }
 
-class APIKeys(models.Model):
-    _name = 'res.users.apikeys'
+class ResUsersApikeys(models.Model):
     _description = 'Users API Keys'
     _auto = False # so we can have a secret column
     _allow_sudo_commands = False
@@ -2405,8 +2399,7 @@ class APIKeys(models.Model):
         """, SQL.identifier(self._table)))
         _logger.info("GC %r delete %d entries", self._name, self.env.cr.rowcount)
 
-class APIKeyDescription(models.TransientModel):
-    _name = 'res.users.apikeys.description'
+class ResUsersApikeysDescription(models.TransientModel):
     _description = 'API Key Description'
 
     def _selection_duration(self):
@@ -2482,8 +2475,7 @@ class APIKeyDescription(models.TransientModel):
         if not self.env.user._is_internal():
             raise AccessError(_("Only internal users can create API keys"))
 
-class APIKeyShow(models.AbstractModel):
-    _name = 'res.users.apikeys.show'
+class ResUsersApikeysShow(models.AbstractModel):
     _description = 'Show API Key'
 
     # the field 'id' is necessary for the onchange that returns the value of 'key'

--- a/odoo/addons/base/models/res_users_deletion.py
+++ b/odoo/addons/base/models/res_users_deletion.py
@@ -20,7 +20,6 @@ class ResUsersDeletion(models.Model):
     must deal with other consideration (archiving, blacklist email...).
     """
 
-    _name = 'res.users.deletion'
     _description = 'Users Deletion Request'
     _rec_name = 'user_id'
 

--- a/odoo/addons/base/models/res_users_settings.py
+++ b/odoo/addons/base/models/res_users_settings.py
@@ -5,7 +5,6 @@ from odoo import api, fields, models
 
 
 class ResUsersSettings(models.Model):
-    _name = 'res.users.settings'
     _description = 'User Settings'
     _rec_name = 'user_id'
 
