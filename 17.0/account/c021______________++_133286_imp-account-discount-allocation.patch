PR: https://github.com/odoo/odoo/pull/133286

From: 8afae04c351c84fb9f44607c432043e08fd56104
From: hupo-odoo
Date: 2023-09-05 12:22:17

Structural Changes: 7
Total Changes: 89

[IMP] account: discount allocation

Provides the possibility for the user to enter defaults accounts for discounts allocation. If provided, discounts on Customer Invoices and Vendor BIlls will be allocation on the specified account instead of the product account.

Example:
Create a journal entry with one product with the following attributes:
quantity: 1
price unit: 100
discount 5

We expect the following account move line:
Without an account set in the settings for discount allocation:
ACCOUNT                                             DEBIT     CREDIT
700000 Sales rendered in Belgium (marchandises)      0         95
400000 Trade debtors within one year - Customer      95        0

With discount allocation account set to "657000 Discount Given":
ACCOUNT                                             DEBIT     CREDIT
700000 Sales rendered in Belgium (marchandises)      0         95
700000 Sales rendered in Belgium (marchandises)      0         5
657000 Discounts Given                               5         0
400000 Trade debtors within one year - Customer      95        0

closes odoo/odoo#133286

Note: the discount is added on another line than the one of the product even though it is the same account because it does not include taxes and analytic distributions.
Task: 3278827
Signed-off-by: William Andr√© (wan) <wan@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -2315,6 +2315,13 @@ class AccountMove(models.Model):
                 ))
                 stack.enter_context(self._sync_unbalanced_lines(misc_container))
                 stack.enter_context(self._sync_rounding_lines(invoice_container))
+                stack.enter_context(self._sync_dynamic_line(
+                    existing_key_fname='discount_allocation_key',
+                    needed_vals_fname='line_ids.discount_allocation_needed',
+                    needed_dirty_fname='line_ids.discount_allocation_dirty',
+                    line_type='discount',
+                    container=invoice_container,
+                ))
                 stack.enter_context(self._sync_dynamic_line(
                     existing_key_fname='tax_key',
                     needed_vals_fname='line_ids.compute_all_tax',
@@ -4375,6 +4382,13 @@ class AccountMove(models.Model):
 
         return res
 
+    def _get_discount_allocation_account(self):
+        if self.is_sale_document(include_receipts=True) and self.company_id.account_discount_expense_allocation_id:
+            return self.company_id.account_discount_expense_allocation_id
+        if self.is_purchase_document(include_receipts=True) and self.company_id.account_discount_income_allocation_id:
+            return self.company_id.account_discount_income_allocation_id
+        return None
+
     # -------------------------------------------------------------------------
     # TOOLING
     # -------------------------------------------------------------------------

--- a/addons/account/models/account_move_line.py
+++ b/addons/account/models/account_move_line.py
@@ -287,6 +287,7 @@ class AccountMoveLine(models.Model):
             ('product', 'Product'),
             ('cogs', 'Cost of Goods Sold'),
             ('tax', 'Tax'),
+            ('discount', "Discount"),
             ('rounding', "Rounding"),
             ('payment_term', 'Payment Term'),
             ('line_section', 'Section'),
@@ -361,6 +362,9 @@ class AccountMoveLine(models.Model):
     epd_key = fields.Binary(compute='_compute_epd_key', exportable=False)
     epd_needed = fields.Binary(compute='_compute_epd_needed', exportable=False)
     epd_dirty = fields.Boolean(compute='_compute_epd_needed')
+    discount_allocation_key = fields.Binary(compute='_compute_discount_allocation_key', exportable=False)
+    discount_allocation_needed = fields.Binary(compute='_compute_discount_allocation_needed', exportable=False)
+    discount_allocation_dirty = fields.Boolean(compute='_compute_discount_allocation_needed')
 
     # === Analytic fields === #
     analytic_line_ids = fields.One2many(
@@ -960,6 +964,55 @@ class AccountMoveLine(models.Model):
                     'tax_tag_ids': [(6, 0, compute_all_currency['base_tags'])],
                 }
 
+    @api.depends('account_id', 'company_id')
+    def _compute_discount_allocation_key(self):
+        for line in self:
+            if line.display_type == 'discount':
+                line.discount_allocation_key = frozendict({
+                    'account_id': line.account_id.id,
+                    'move_id': line.move_id.id,
+                })
+            else:
+                line.discount_allocation_key = False
+
+    @api.depends('account_id', 'company_id', 'discount', 'price_unit', 'quantity')
+    def _compute_discount_allocation_needed(self):
+        for line in self:
+            line.discount_allocation_dirty = True
+            discount_allocation_account = line.move_id._get_discount_allocation_account()
+
+            if not discount_allocation_account or line.display_type != 'product' or line.currency_id.is_zero(line.discount):
+                line.discount_allocation_needed = False
+                continue
+
+            discounted_amount_currency = line.currency_id.round(line.move_id.direction_sign * line.quantity * line.price_unit * line.discount/100)
+            discount_allocation_needed = {}
+            discount_allocation_needed_vals = discount_allocation_needed.setdefault(
+                frozendict({
+                    'account_id': line.account_id.id,
+                    'move_id': line.move_id.id,
+                }),
+                {
+                    'display_type': 'discount',
+                    'name': _("Discount"),
+                    'amount_currency': 0.0,
+                },
+            )
+            discount_allocation_needed_vals['amount_currency'] += discounted_amount_currency
+            discount_allocation_needed_vals = discount_allocation_needed.setdefault(
+                frozendict({
+                    'move_id': line.move_id.id,
+                    'account_id': discount_allocation_account.id,
+                }),
+                {
+                    'display_type': 'discount',
+                    'name': _("Discount"),
+                    'amount_currency': 0.0,
+                },
+            )
+            discount_allocation_needed_vals['amount_currency'] -= discounted_amount_currency
+            line.discount_allocation_needed = {k: frozendict(v) for k, v in discount_allocation_needed.items()}
+
     @api.depends('tax_ids', 'account_id', 'company_id')
     def _compute_epd_key(self):
         for line in self:
@@ -1265,7 +1318,7 @@ class AccountMoveLine(models.Model):
     def check_field_access_rights(self, operation, field_names):
         result = super().check_field_access_rights(operation, field_names)
         if not fields:
-            weirdos = ['term_key', 'tax_key', 'compute_all_tax', 'epd_key', 'epd_needed']
+            weirdos = ['term_key', 'tax_key', 'compute_all_tax', 'epd_key', 'epd_needed', 'discount_allocation_key', 'discount_allocation_needed']
             result = [fname for fname in result if fname not in weirdos]
         return result
 

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -179,6 +179,10 @@ class ResCompany(models.Model):
             ('out_and_in_invoices', 'Customer Invoices and Vendor Bills')],
         string="Quick encoding")
 
+    # Separate account for allocation of discounts
+    account_discount_income_allocation_id = fields.Many2one(comodel_name='account.account', string='Separate account for income discount')
+    account_discount_expense_allocation_id = fields.Many2one(comodel_name='account.account', string='Separate account for expense discount')
+
     def _get_company_root_delegated_field_names(self):
         return super()._get_company_root_delegated_field_names() + [
             'fiscalyear_last_day',

--- a/addons/account/models/res_config_settings.py
+++ b/addons/account/models/res_config_settings.py
@@ -191,6 +191,22 @@ class ResConfigSettings(models.TransientModel):
         domain="[('deprecated', '=', False), ('account_type', 'in', ('income', 'income_other', 'expense'))]",
     )
 
+    # Accounts for allocation of discounts
+    account_discount_income_allocation_id = fields.Many2one(
+        comodel_name='account.account',
+        string='Vendor Bills Discounts Account',
+        readonly=False,
+        related='company_id.account_discount_income_allocation_id',
+        domain="[('account_type', 'in', ('income', 'expense'))]",
+    )
+    account_discount_expense_allocation_id = fields.Many2one(
+        comodel_name='account.account',
+        string='Customer Invoices Discounts Account',
+        readonly=False,
+        related='company_id.account_discount_expense_allocation_id',
+        domain="[('account_type', 'in', ('income', 'expense'))]",
+    )
+
     def set_values(self):
         super().set_values()
         # install a chart of accounts for the given company (if required)
