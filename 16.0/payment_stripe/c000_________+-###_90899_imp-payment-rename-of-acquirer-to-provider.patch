PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Structural Changes: 4
Total Changes: 886

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_stripe/models/__init__.py
+++ b/addons/payment_stripe/models/__init__.py
@@ -1,5 +1,5 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_token
 from . import payment_transaction

--- a/addons/payment_stripe/models/payment_acquirer.py
+++ b/addons/payment_stripe/models/payment_provider.py
@@ -18,10 +18,10 @@ from odoo.addons.payment_stripe.controllers.main import StripeController
 _logger = logging.getLogger(__name__)
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('stripe', "Stripe")], ondelete={'stripe': 'set default'})
     stripe_publishable_key = fields.Char(
         string="Publishable Key", help="The key solely used to identify the account with Stripe",
@@ -39,7 +39,7 @@ class PaymentAcquirer(models.Model):
     def _compute_feature_support_fields(self):
         """ Override of `payment` to enable additional features. """
         super()._compute_feature_support_fields()
-        self.filtered(lambda acq: acq.provider == 'stripe').update({
+        self.filtered(lambda p: p.code == 'stripe').update({
             'support_express_checkout': True,
             'support_manual_capture': True,
             'support_refund': 'partial',
@@ -50,7 +50,7 @@ class PaymentAcquirer(models.Model):
 
     @api.constrains('state', 'stripe_publishable_key', 'stripe_secret_key')
     def _check_state_of_connected_account_is_never_test(self):
-        """ Check that the acquirer of a connected account can never been set to 'test'.
+        """ Check that the provider of a connected account can never been set to 'test'.
 
         This constraint is defined in the present module to allow the export of the translation
         string of the `ValidationError` should it be raised by modules that would fully implement
@@ -62,20 +62,20 @@ class PaymentAcquirer(models.Model):
 
         :return: None
         """
-        for acquirer in self:
-            if acquirer.state == 'test' and acquirer._stripe_has_connected_account():
+        for provider in self:
+            if provider.state == 'test' and provider._stripe_has_connected_account():
                 raise ValidationError(_(
-                    "You cannot set the acquirer to Test Mode while it is linked with your Stripe "
+                    "You cannot set the provider to Test Mode while it is linked with your Stripe "
                     "account."
                 ))
 
     def _stripe_has_connected_account(self):
-        """ Return whether the acquirer is linked to a connected Stripe account.
+        """ Return whether the provider is linked to a connected Stripe account.
 
         Note: This method serves as a hook for modules that would fully implement Stripe Connect.
         Note: self.ensure_one()
 
-        :return: Whether the acquirer is linked to a connected Stripe account
+        :return: Whether the provider is linked to a connected Stripe account
         :rtype: bool
         """
         self.ensure_one()
@@ -86,10 +86,10 @@ class PaymentAcquirer(models.Model):
     def action_stripe_connect_account(self, menu_id=None):
         """ Create a Stripe Connect account and redirect the user to the next onboarding step.
 
-        If the acquirer is already enabled, close the current window. Otherwise, generate a Stripe
+        If the provider is already enabled, close the current window. Otherwise, generate a Stripe
         Connect onboarding link and redirect the user to it. If provided, the menu id is included in
         the URL the user is redirected to when coming back on Odoo after the onboarding. If the link
-        generation failed, redirect the user to the acquirer form.
+        generation failed, redirect the user to the provider form.
 
         Note: This method serves as a hook for modules that would fully implement Stripe Connect.
         Note: self.ensure_one()
@@ -111,8 +111,8 @@ class PaymentAcquirer(models.Model):
             # Link generation
             if not menu_id:
                 # Fall back on `account_payment`'s menu if it is installed. If not, the user is
-                # redirected to the acquirer's form view but without any menu in the breadcrumb.
-                menu = self.env.ref('account_payment.payment_acquirer_menu', False)
+                # redirected to the provider's form view but without any menu in the breadcrumb.
+                menu = self.env.ref('account_payment.payment_provider_menu', False)
                 menu_id = menu and menu.id  # Only set if `account_payment` is installed.
 
             account_link_url = self._stripe_create_account_link(connected_account['id'], menu_id)
@@ -125,7 +125,7 @@ class PaymentAcquirer(models.Model):
             else:
                 action = {
                     'type': 'ir.actions.act_window',
-                    'model': 'payment.acquirer',
+                    'model': 'payment.provider',
                     'views': [[False, 'form']],
                     'res_id': self.id,
                 }
@@ -338,7 +338,7 @@ class PaymentAcquirer(models.Model):
         base_url = self.company_id.get_base_url()
         return_url = OnboardingController._onboarding_return_url
         refresh_url = OnboardingController._onboarding_refresh_url
-        return_params = dict(acquirer_id=self.id, menu_id=menu_id)
+        return_params = dict(provider_id=self.id, menu_id=menu_id)
         refresh_params = dict(**return_params, account_id=connected_account_id)
 
         account_link = self._stripe_make_proxy_request('account_links', payload={

--- a/addons/payment_stripe/models/payment_token.py
+++ b/addons/payment_stripe/models/payment_token.py
@@ -30,10 +30,10 @@ class PaymentToken(models.Model):
         self.ensure_one()
 
         # Fetch the available payment method of type 'card' for the given customer
-        response_content = self.acquirer_id._stripe_make_request(
+        response_content = self.provider_id._stripe_make_request(
             'payment_methods',
             payload={
-                'customer': self.acquirer_ref,
+                'customer': self.provider_ref,
                 'type': 'card',
                 'limit': 1,  # A new customer is created for each new token. Never > 1 card.
             },

--- a/addons/payment_stripe/models/payment_transaction.py
+++ b/addons/payment_stripe/models/payment_transaction.py
@@ -28,17 +28,17 @@ class PaymentTransaction(models.Model):
         Note: self.ensure_one() from `_get_processing_values`
 
         :param dict processing_values: The generic processing values of the transaction
-        :return: The dict of acquirer-specific processing values
+        :return: The dict of provider-specific processing values
         :rtype: dict
         """
         res = super()._get_specific_processing_values(processing_values)
-        if self.provider != 'stripe' or self.operation == 'online_token':
+        if self.provider_code != 'stripe' or self.operation == 'online_token':
             return res
 
         if self.operation == 'online_redirect':
             checkout_session = self._stripe_create_checkout_session()
             return {
-                'publishable_key': stripe_utils.get_publishable_key(self.acquirer_id),
+                'publishable_key': stripe_utils.get_publishable_key(self.provider_id),
                 'session_id': checkout_session['id'],
             }
         else:  # Express checkout.
@@ -56,11 +56,11 @@ class PaymentTransaction(models.Model):
         """
         # Filter payment method types by available payment method
         existing_pms = [pm.name.lower() for pm in self.env['payment.icon'].search([])]
-        linked_pms = [pm.name.lower() for pm in self.acquirer_id.payment_icon_ids]
+        linked_pms = [pm.name.lower() for pm in self.provider_id.payment_icon_ids]
         pm_filtered_pmts = filter(
             lambda pmt: pmt.name == 'card'
             # If the PM (payment.icon) record related to a PMT doesn't exist, don't filter out the
-            # PMT because the user couldn't even have linked it to the acquirer in the first place.
+            # PMT because the user couldn't even have linked it to the provider in the first place.
             or (pmt.name in linked_pms or pmt.name not in existing_pms),
             PAYMENT_METHOD_TYPES
         )
@@ -89,7 +89,7 @@ class PaymentTransaction(models.Model):
         # Create the session according to the operation and return it
         customer = self._stripe_create_customer()
         common_session_values = self._get_common_stripe_session_values(pmt_values, customer)
-        base_url = self.acquirer_id.get_base_url()
+        base_url = self.provider_id.get_base_url()
         if self.operation == 'online_redirect':
             return_url = f'{urls.url_join(base_url, StripeController._checkout_return_url)}' \
                          f'?reference={urls.url_quote_plus(self.reference)}'
@@ -97,8 +97,8 @@ class PaymentTransaction(models.Model):
             # 1. attach the payment method to the created customer
             # 2. trigger a 3DS check if one if required, while the customer is still present
             future_usage = 'off_session' if self.tokenize else None
-            capture_method = 'manual' if self.acquirer_id.capture_manually else 'automatic'
-            checkout_session = self.acquirer_id._stripe_make_request(
+            capture_method = 'manual' if self.provider_id.capture_manually else 'automatic'
+            checkout_session = self.provider_id._stripe_make_request(
                 'checkout/sessions', payload={
                     **common_session_values,
                     'mode': 'payment',
@@ -121,7 +121,7 @@ class PaymentTransaction(models.Model):
             return_url = f'{urls.url_join(base_url, StripeController._validation_return_url)}' \
                          f'?reference={urls.url_quote_plus(self.reference)}' \
                          f'&checkout_session_id={{CHECKOUT_SESSION_ID}}'
-            checkout_session = self.acquirer_id._stripe_make_request(
+            checkout_session = self.provider_id._stripe_make_request(
                 'checkout/sessions', payload={
                     **common_session_values,
                     'mode': 'setup',
@@ -138,7 +138,7 @@ class PaymentTransaction(models.Model):
         :return: The Customer
         :rtype: dict
         """
-        customer = self.acquirer_id._stripe_make_request(
+        customer = self.provider_id._stripe_make_request(
             'customers', payload={
                 'address[city]': self.partner_city or None,
                 'address[country]': self.partner_country_id.code or None,
@@ -181,7 +181,7 @@ class PaymentTransaction(models.Model):
         :raise: UserError if the transaction is not linked to a token
         """
         super()._send_payment_request()
-        if self.provider != 'stripe':
+        if self.provider_code != 'stripe':
             return
 
         if not self.token_id:
@@ -214,13 +214,13 @@ class PaymentTransaction(models.Model):
             if not self.token_id.stripe_payment_method:  # Pre-SCA token -> migrate it
                 self.token_id._stripe_sca_migrate_customer()
 
-            response = self.acquirer_id._stripe_make_request(
+            response = self.provider_id._stripe_make_request(
                 'payment_intents',
                 payload=self._stripe_prepare_payment_intent_payload(payment_by_token=True),
                 offline=self.operation == 'offline',
             )
         else:  # 'online_direct' (express checkout).
-            response = self.acquirer_id._stripe_make_request(
+            response = self.provider_id._stripe_make_request(
                 'payment_intents',
                 payload=self._stripe_prepare_payment_intent_payload(),
             )
@@ -251,12 +251,12 @@ class PaymentTransaction(models.Model):
             'amount': payment_utils.to_minor_currency_units(self.amount, self.currency_id),
             'currency': self.currency_id.name.lower(),
             'description': self.reference,
-            'capture_method': 'manual' if self.acquirer_id.capture_manually else 'automatic',
+            'capture_method': 'manual' if self.provider_id.capture_manually else 'automatic',
         }
         if payment_by_token:
             payment_intent_payload.update(
                 confirm=True,
-                customer=self.token_id.acquirer_ref,
+                customer=self.token_id.provider_ref,
                 off_session=True,
                 payment_method=self.token_id.stripe_payment_method,
             )
@@ -273,7 +273,7 @@ class PaymentTransaction(models.Model):
         :return: The refund transaction, if any.
         :rtype: recordset of `payment.transaction`
         """
-        if self.provider != 'stripe':
+        if self.provider_code != 'stripe':
             return super()._send_refund_request(
                 amount_to_refund=amount_to_refund,
                 create_refund_transaction=create_refund_transaction,
@@ -283,9 +283,9 @@ class PaymentTransaction(models.Model):
         )
 
         # Make the refund request to stripe.
-        data = self.acquirer_id._stripe_make_request(
+        data = self.provider_id._stripe_make_request(
             'refunds', payload={
-                'charge': self.acquirer_reference,
+                'charge': self.provider_reference,
                 'amount': payment_utils.to_minor_currency_units(
                     -refund_tx.amount,  # Refund transactions' amount is negative, inverse it.
                     refund_tx.currency_id,
@@ -311,11 +311,11 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._send_capture_request()
-        if self.provider != 'stripe':
+        if self.provider_code != 'stripe':
             return
 
         # Make the capture request to Stripe
-        payment_intent = self.acquirer_id._stripe_make_request(
+        payment_intent = self.provider_id._stripe_make_request(
             f'payment_intents/{self.stripe_payment_intent}/capture'
         )
         _logger.info(
@@ -338,11 +338,11 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._send_void_request()
-        if self.provider != 'stripe':
+        if self.provider_code != 'stripe':
             return
 
         # Make the void request to Stripe
-        payment_intent = self.acquirer_id._stripe_make_request(
+        payment_intent = self.provider_id._stripe_make_request(
             f'payment_intents/{self.stripe_payment_intent}/cancel'
         )
         _logger.info(
@@ -357,29 +357,29 @@ class PaymentTransaction(models.Model):
         )
         self._handle_notification_data('stripe', notification_data)
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of payment to find the transaction based on Stripe data.
 
-        :param str provider: The provider of the acquirer that handled the transaction
+        :param str provider_code: The code of the provider that handled the transaction
         :param dict notification_data: The notification data sent by the provider
         :return: The transaction if found
         :rtype: recordset of `payment.transaction`
         :raise: ValidationError if inconsistent data were received
         :raise: ValidationError if the data match no transaction
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'stripe' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'stripe' or len(tx) == 1:
             return tx
 
         reference = notification_data.get('reference')
         if reference:
-            tx = self.search([('reference', '=', reference), ('provider', '=', 'stripe')])
+            tx = self.search([('reference', '=', reference), ('provider_code', '=', 'stripe')])
         elif notification_data.get('event_type') == 'charge.refund.updated':
             # The webhook notifications sent for `charge.refund.updated` events only contain a
             # refund object that has no 'description' (the merchant reference) field. We thus search
-            # the transaction by its acquirer reference which is the refund id for refund txs.
+            # the transaction by its provider reference which is the refund id for refund txs.
             refund_id = notification_data['object_id']  # The object is a refund.
-            tx = self.search([('acquirer_reference', '=', refund_id), ('provider', '=', 'stripe')])
+            tx = self.search([('provider_reference', '=', refund_id), ('provider_code', '=', 'stripe')])
         else:
             raise ValidationError("Stripe: " + _("Received data with missing merchant reference"))
 
@@ -403,18 +403,18 @@ class PaymentTransaction(models.Model):
         :raise: ValidationError if inconsistent data were received
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'stripe':
+        if self.provider_code != 'stripe':
             return
 
-        # Handle the acquirer reference and the status.
+        # Handle the provider reference and the status.
         if self.operation == 'validation':
             status = notification_data.get('setup_intent', {}).get('status')
         elif self.operation == 'refund':
-            self.acquirer_reference = notification_data['refund']['id']
+            self.provider_reference = notification_data['refund']['id']
             status = notification_data['refund']['status']
         else:  # 'online_redirect', 'online_token', 'offline'
             if 'charge' in notification_data:  # The online_redirect operation may include a charge.
-                self.acquirer_reference = notification_data['charge']['id']
+                self.provider_reference = notification_data['charge']['id']
             status = notification_data.get('payment_intent', {}).get('status')
         if not status:
             raise ValidationError(
@@ -481,10 +481,10 @@ class PaymentTransaction(models.Model):
             return
 
         token = self.env['payment.token'].create({
-            'acquirer_id': self.acquirer_id.id,
+            'provider_id': self.provider_id.id,
             'payment_details': payment_method['card'].get('last4'),
             'partner_id': self.partner_id.id,
-            'acquirer_ref': customer_id,
+            'provider_ref': customer_id,
             'verified': True,
             'stripe_payment_method': payment_method_id,
         })
