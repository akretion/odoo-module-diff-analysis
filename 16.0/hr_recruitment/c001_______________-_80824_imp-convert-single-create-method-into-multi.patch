PR: https://github.com/odoo/odoo/pull/80824

From: 18952cdc76070f2a70789f2fa25e4fa0d546d470
From: Yannick Tivisse
Date: 2021-12-14 19:13:18

Structural Changes: 3
Total Changes: 77

[IMP] *: Convert single create method into multi

Taskid: 2703085
Part-of: odoo/odoo#80824
Co-authored-by: Victor Feyens <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_recruitment/models/hr_employee.py
+++ b/addons/hr_recruitment/models/hr_employee.py
@@ -23,12 +23,13 @@ class HrEmployee(models.Model):
         ])
         return [('id', 'in', employees.ids)]
 
-    @api.model
-    def create(self, vals):
-        new_employee = super(HrEmployee, self).create(vals)
-        if new_employee.applicant_id:
-            new_employee.applicant_id.message_post_with_view(
-                        'hr_recruitment.applicant_hired_template',
-                        values={'applicant': new_employee.applicant_id},
-                        subtype_id=self.env.ref("hr_recruitment.mt_applicant_hired").id)
-        return new_employee
+    @api.model_create_multi
+    def create(self, vals_list):
+        employees = super().create(vals_list)
+        for employee in employees:
+            if employee.applicant_id:
+                employee.applicant_id.message_post_with_view(
+                    'hr_recruitment.applicant_hired_template',
+                    values={'applicant': employee.applicant_id},
+                    subtype_id=self.env.ref("hr_recruitment.mt_applicant_hired").id)
+        return employees

--- a/addons/hr_recruitment/models/hr_job.py
+++ b/addons/hr_recruitment/models/hr_job.py
@@ -120,18 +120,19 @@ class Job(models.Model):
             })
         return values
 
-    @api.model
-    def create(self, vals):
-        vals['favorite_user_ids'] = vals.get('favorite_user_ids', []) + [(4, self.env.uid)]
-        new_job = super(Job, self).create(vals)
+    @api.model_create_multi
+    def create(self, vals_list):
+        for vals in vals_list:
+            vals['favorite_user_ids'] = vals.get('favorite_user_ids', []) + [(4, self.env.uid)]
+        jobs = super().create(vals_list)
         utm_linkedin = self.env.ref("utm.utm_source_linkedin", raise_if_not_found=False)
         if utm_linkedin:
-            source_vals = {
+            source_vals = [{
                 'source_id': utm_linkedin.id,
-                'job_id': new_job.id,
-            }
+                'job_id': job.id,
+            } for job in jobs]
             self.env['hr.recruitment.source'].create(source_vals)
-        return new_job
+        return jobs
 
     def write(self, vals):
         res = super().write(vals)

--- a/addons/hr_recruitment/models/hr_recruitment.py
+++ b/addons/hr_recruitment/models/hr_recruitment.py
@@ -340,31 +340,30 @@ class Applicant(models.Model):
             if not applicant.stage_id.hired_stage:
                 applicant.date_closed = False
 
-    @api.model
-    def create(self, vals):
-        if vals.get('department_id') and not self._context.get('default_department_id'):
-            self = self.with_context(default_department_id=vals.get('department_id'))
-        if vals.get('user_id'):
-            vals['date_open'] = fields.Datetime.now()
-        if vals.get('email_from'):
-            vals['email_from'] = vals['email_from'].strip()
-        res = super().create(vals)
+    @api.model_create_multi
+    def create(self, vals_list):
+        for vals in vals_list:
+            if vals.get('user_id'):
+                vals['date_open'] = fields.Datetime.now()
+            if vals.get('email_from'):
+                vals['email_from'] = vals['email_from'].strip()
+        applicants = super().create(vals_list)
         # Record creation through calendar, creates the calendar event directly, it will also create the activity.
         if 'default_activity_date_deadline' in self.env.context:
             deadline = fields.Datetime.to_datetime(self.env.context.get('default_activity_date_deadline'))
-            partners = res.partner_id | res.user_id.partner_id | res.department_id.manager_id.user_id.partner_id
-
             category = self.env.ref('hr_recruitment.categ_meet_interview')
-            self.env['calendar.event'].sudo().with_context(default_applicant_id=res.id).create({
-                'applicant_id': res.id,
-                'partner_ids': [(6, 0, partners.ids)],
-                'user_id': self.env.uid,
-                'name': res.name,
-                'categ_ids': [category.id],
-                'start': deadline,
-                'stop': deadline + relativedelta(minutes=30),
-            })
-        return res
+            for applicant in applicants:
+                partners = applicant.partner_id | applicant.user_id.partner_id | applicant.department_id.manager_id.user_id.partner_id
+                self.env['calendar.event'].sudo().with_context(default_applicant_id=applicant.id).create({
+                    'applicant_id': applicant.id,
+                    'partner_ids': [(6, 0, partners.ids)],
+                    'user_id': self.env.uid,
+                    'name': applicant.name,
+                    'categ_ids': [category.id],
+                    'start': deadline,
+                    'stop': deadline + relativedelta(minutes=30),
+                })
+        return applicants
 
     def write(self, vals):
         # user_id change: update date_open
