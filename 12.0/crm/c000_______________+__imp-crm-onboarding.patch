PR: https://github.com/odoo/odoo/pull/

From: 1734b8f8de685288660f4440d0483cc94b39a8eb
From: RomainLibert
Date: 2018-01-15 09:23:13

Structural Changes: 3
Total Changes: 31

[IMP] crm: onboarding

- Add missing tour stage in crm creating opportunity and minor fixes
- Label, Placeholder and Tip IMP
- Restrict Create new sales channel
- No Content Help Improvements
- Schedule Activity Button Layout Change
- Chatter Log IMP

================================= pseudo patch: =================================

--- a/addons/crm/models/crm_lead.py
+++ b/addons/crm/models/crm_lead.py
@@ -909,18 +909,27 @@ class Lead(models.Model):
     @api.model
     def get_empty_list_help(self, help):
         if help:
-            alias_record = self.env.ref("crm.mail_alias_lead_info", raise_if_not_found=False)
+            help_title = ""
+            if self._context.get('default_type') == 'lead':
+                help_title = _('Click here to add new Leads')
+            else:
+                help_title = _('Create a new opportunity to add it to your pipeline')
+            alias_record = self.env['mail.alias'].search([
+                ('alias_name', '!=', False),
+                ('alias_name', '!=', ''),
+                ('alias_model_id.model', '=', 'crm.lead'),
+                ('alias_parent_model_id.model', '=', 'crm.team'),
+                ('alias_force_thread_id', '=', False)
+            ], limit=1)
             if alias_record and alias_record.alias_domain and alias_record.alias_name:
                 email = '%s@%s' % (alias_record.alias_name, alias_record.alias_domain)
                 email_link = "<a href='mailto:%s'>%s</a>" % (email, email)
-                dynamic_help = _("""All email incoming to %s will automatically
-                    create new opportunity. Update your business card, phone book, social media,...
-                    Send an email right now and see it here.""") % (email_link,)
-                return '<p class="oe_view_nocontent_create">%s</p>%s<p>%s</p>' % (_('Click to add a new opportunity'), help, dynamic_help)
+                help_title = _('%s or send an email to %s') % (help_title, email_link)
+            return '<p class="oe_view_nocontent_create">%s</p><p>%s</p>' % (help_title, help)
         return super(Lead, self.with_context(
             empty_list_help_model='crm.team',
             empty_list_help_id=self._context.get('default_team_id', False),
-            empty_list_help_document_name=_("opportunities"),
+            empty_list_help_document_name= _('leads') if self._context.get('default_type') == 'lead' else _('opportunities'),
         )).get_empty_list_help(help)
 
     @api.multi

--- a/addons/crm/models/crm_stage.py
+++ b/addons/crm/models/crm_stage.py
@@ -37,9 +37,17 @@ class Stage(models.Model):
     probability = fields.Float('Probability (%)', required=True, default=10.0, help="This percentage depicts the default/average probability of the Case for this stage to be a success")
     on_change = fields.Boolean('Change Probability Automatically', help="Setting this stage will change the probability automatically on the opportunity.")
     requirements = fields.Text('Requirements', help="Enter here the internal requirements for this stage (ex: Offer sent to customer). It will appear as a tooltip over the stage's name.")
-    team_id = fields.Many2one('crm.team', string='Team', ondelete='set null',
+    team_id = fields.Many2one('crm.team', string='Sales Channel', ondelete='set null',
         help='Specific team that uses this stage. Other teams will not be able to see or use this stage.')
     legend_priority = fields.Text('Priority Management Explanation', translate=True,
         help='Explanation text to help users using the star and priority mechanism on stages or issues that are in this stage.')
     fold = fields.Boolean('Folded in Pipeline',
         help='This stage is folded in the kanban view when there are no records in that stage to display.')
+
+    #This field for interface only
+    team_count = fields.Integer('team_count', compute='_compute_team_count')
+
+    @api.multi
+    def _compute_team_count(self):
+        for stage in self:
+            stage.team_count = self.env['crm.team'].search_count([])
