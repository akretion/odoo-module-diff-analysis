PR: https://github.com/odoo/odoo/pull/80824

From: 18952cdc76070f2a70789f2fa25e4fa0d546d470
From: Yannick Tivisse
Date: 2021-12-14 19:13:18

Structural Changes: 2
Total Changes: 203

[IMP] *: Convert single create method into multi

Taskid: 2703085
Part-of: odoo/odoo#80824
Co-authored-by: Victor Feyens <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/ir_attachment.py
+++ b/odoo/addons/base/models/ir_attachment.py
@@ -621,7 +621,7 @@ class IrAttachment(models.Model):
         for record_tuple in record_tuple_set:
             (res_model, res_id) = record_tuple
             self.check('create', values={'res_model':res_model, 'res_id':res_id})
-        return super(IrAttachment, self).create(vals_list)
+        return super().create(vals_list)
 
     def _post_add_create(self):
         pass

--- a/odoo/addons/base/models/ir_cron.py
+++ b/odoo/addons/base/models/ir_cron.py
@@ -65,12 +65,13 @@ class ir_cron(models.Model):
     lastcall = fields.Datetime(string='Last Execution Date', help="Previous time the cron ran successfully, provided to the job through the context on the `lastcall` key")
     priority = fields.Integer(default=5, help='The priority of the job, as an integer: 0 means higher priority, 10 means lower priority.')
 
-    @api.model
-    def create(self, values):
-        values['usage'] = 'ir_cron'
+    @api.model_create_multi
+    def create(self, vals_list):
+        for vals in vals_list:
+            vals['usage'] = 'ir_cron'
         if os.getenv('ODOO_NOTIFY_CRON_CHANGES'):
             self._cr.postcommit.add(self._notifydb)
-        return super(ir_cron, self).create(values)
+        return super().create(vals_list)
 
     @api.model
     def default_get(self, fields_list):

--- a/odoo/addons/base/models/ir_module.py
+++ b/odoo/addons/base/models/ir_module.py
@@ -724,18 +724,18 @@ class Module(models.Model):
             'to_buy': False
         }
 
-    @api.model
-    def create(self, vals):
-        new = super(Module, self).create(vals)
-        module_metadata = {
-            'name': 'module_%s' % vals['name'],
+    @api.model_create_multi
+    def create(self, vals_list):
+        modules = super().create(vals_list)
+        module_metadata_list = [{
+            'name': 'module_%s' % module.name,
             'model': 'ir.module.module',
             'module': 'base',
-            'res_id': new.id,
+            'res_id': module.id,
             'noupdate': True,
-        }
-        self.env['ir.model.data'].create(module_metadata)
-        return new
+        } for module in modules]
+        self.env['ir.model.data'].create(module_metadata_list)
+        return modules
 
     # update the list of available packages
     @assert_log_admin_access

--- a/odoo/addons/base/models/ir_sequence.py
+++ b/odoo/addons/base/models/ir_sequence.py
@@ -150,14 +150,15 @@ class IrSequence(models.Model):
     use_date_range = fields.Boolean(string='Use subsequences per date_range')
     date_range_ids = fields.One2many('ir.sequence.date_range', 'sequence_id', string='Subsequences')
 
-    @api.model
-    def create(self, values):
+    @api.model_create_multi
+    def create(self, vals_list):
         """ Create a sequence, in implementation == standard a fast gaps-allowed PostgreSQL sequence is used.
         """
-        seq = super(IrSequence, self).create(values)
-        if values.get('implementation', 'standard') == 'standard':
-            _create_sequence(self._cr, "ir_sequence_%03d" % seq.id, values.get('number_increment', 1), values.get('number_next', 1))
-        return seq
+        seqs = super().create(vals_list)
+        for seq in seqs:
+            if seq.implementation == 'standard':
+                _create_sequence(self._cr, "ir_sequence_%03d" % seq.id, seq.number_increment or 1, seq.number_next or 1)
+        return seqs
 
     def unlink(self):
         _drop_sequences(self._cr, ["ir_sequence_%03d" % x.id for x in self])
@@ -356,15 +357,16 @@ class IrSequenceDateRange(models.Model):
         for seq in self:
             _alter_sequence(self._cr, "ir_sequence_%03d_%03d" % (seq.sequence_id.id, seq.id), number_increment=number_increment, number_next=number_next)
 
-    @api.model
-    def create(self, values):
+    @api.model_create_multi
+    def create(self, vals_list):
         """ Create a sequence, in implementation == standard a fast gaps-allowed PostgreSQL sequence is used.
         """
-        seq = super(IrSequenceDateRange, self).create(values)
-        main_seq = seq.sequence_id
-        if main_seq.implementation == 'standard':
-            _create_sequence(self._cr, "ir_sequence_%03d_%03d" % (main_seq.id, seq.id), main_seq.number_increment, values.get('number_next_actual', 1))
-        return seq
+        seqs = super().create(vals_list)
+        for seq in seqs:
+            main_seq = seq.sequence_id
+            if main_seq.implementation == 'standard':
+                _create_sequence(self._cr, "ir_sequence_%03d_%03d" % (main_seq.id, seq.id), main_seq.number_increment, seq.number_next_actual or 1)
+        return seqs
 
     def unlink(self):
         _drop_sequences(self._cr, ["ir_sequence_%03d_%03d" % (x.sequence_id.id, x.id) for x in self])

--- a/odoo/addons/base/models/res_company.py
+++ b/odoo/addons/base/models/res_company.py
@@ -198,37 +198,51 @@ class Company(models.Model):
     def cache_restart(self):
         self.clear_caches()
 
-    @api.model
-    def create(self, vals):
-        if not vals.get('favicon'):
-            vals['favicon'] = self._get_default_favicon()
-        if not vals.get('name') or vals.get('partner_id'):
-            self.clear_caches()
-            return super(Company, self).create(vals)
-        partner = self.env['res.partner'].create({
-            'name': vals['name'],
-            'is_company': True,
-            'image_1920': vals.get('logo'),
-            'email': vals.get('email'),
-            'phone': vals.get('phone'),
-            'website': vals.get('website'),
-            'vat': vals.get('vat'),
-            'country_id': vals.get('country_id'),
-        })
-        # compute stored fields, for example address dependent fields
-        partner.flush()
-        vals['partner_id'] = partner.id
+    @api.model_create_multi
+    def create(self, vals_list):
+        # add default favicon
+        for vals in vals_list:
+            if not vals.get('favicon'):
+                vals['favicon'] = self._get_default_favicon()
+
+        # create missing partners
+        no_partner_vals_list = [
+            vals
+            for vals in vals_list
+            if vals.get('name') and not vals.get('partner_id')
+        ]
+        if no_partner_vals_list:
+            partners = self.env['res.partner'].create([
+                {
+                    'name': vals['name'],
+                    'is_company': True,
+                    'image_1920': vals.get('logo'),
+                    'email': vals.get('email'),
+                    'phone': vals.get('phone'),
+                    'website': vals.get('website'),
+                    'vat': vals.get('vat'),
+                    'country_id': vals.get('country_id'),
+                }
+                for vals in no_partner_vals_list
+            ])
+            # compute stored fields, for example address dependent fields
+            partners.flush()
+            for vals, partner in zip(no_partner_vals_list, partners):
+                vals['partner_id'] = partner.id
+
         self.clear_caches()
-        company = super(Company, self).create(vals)
+        companies = super().create(vals_list)
+
         # The write is made on the user to set it automatically in the multi company group.
-        self.env.user.write({'company_ids': [Command.link(company.id)]})
+        if companies:
+            self.env.user.write({
+                'company_ids': [Command.link(company.id) for company in companies],
+            })
 
-        # Make sure that the selected currency is enabled
-        if vals.get('currency_id'):
-            currency = self.env['res.currency'].browse(vals['currency_id'])
-            if not currency.active:
-                currency.write({'active': True})
-        return company
+        # Make sure that the selected currencies are enabled
+        companies.currency_id.sudo().filtered(lambda c: not c.active).active = True
+
+        return companies
 
     def write(self, values):
         self.clear_caches()

--- a/odoo/addons/base/models/res_config.py
+++ b/odoo/addons/base/models/res_config.py
@@ -765,34 +765,35 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
             return RedirectWarning(msg % values, action_id, _('Go to the configuration panel'))
         return UserError(msg % values)
 
-    @api.model
-    def create(self, values):
+    @api.model_create_multi
+    def create(self, vals_list):
         # Optimisation: saving a res.config.settings even without changing any
         # values will trigger the write of all related values. This in turn may
         # trigger chain of further recomputation. To avoid it, delete values
         # that were not changed.
-        for field in self._fields.values():
-            if not (field.name in values and field.related and not field.readonly):
-                continue
-            # we write on a related field like
-            # qr_code = fields.Boolean(related='company_id.qr_code', readonly=False)
-            fname0, *fnames = field.related.split(".")
-            if fname0 not in values:
-                continue
+        for vals in vals_list:
+            for field in self._fields.values():
+                if not (field.name in vals and field.related and not field.readonly):
+                    continue
+                # we write on a related field like
+                # qr_code = fields.Boolean(related='company_id.qr_code', readonly=False)
+                fname0, *fnames = field.related.split(".")
+                if fname0 not in vals:
+                    continue
 
-            # determine the current value
-            field0 = self._fields[fname0]
-            old_value = field0.convert_to_record(
-                field0.convert_to_cache(values[fname0], self), self)
-            for fname in fnames:
-                old_value = next(iter(old_value), old_value)[fname]
+                # determine the current value
+                field0 = self._fields[fname0]
+                old_value = field0.convert_to_record(
+                    field0.convert_to_cache(vals[fname0], self), self)
+                for fname in fnames:
+                    old_value = next(iter(old_value), old_value)[fname]
 
-            # determine the new value
-            new_value = field.convert_to_record(
-                field.convert_to_cache(values[field.name], self), self)
+                # determine the new value
+                new_value = field.convert_to_record(
+                    field.convert_to_cache(vals[field.name], self), self)
 
-            # drop if the value is the same
-            if old_value == new_value:
-                values.pop(field.name)
+                # drop if the value is the same
+                if old_value == new_value:
+                    vals.pop(field.name)
 
-        return super(ResConfigSettings, self).create(values)
+        return super().create(vals_list)

--- a/odoo/addons/base/models/res_users.py
+++ b/odoo/addons/base/models/res_users.py
@@ -1162,13 +1162,13 @@ class UsersImplied(models.Model):
 class GroupsView(models.Model):
     _inherit = 'res.groups'
 
-    @api.model
-    def create(self, values):
-        user = super(GroupsView, self).create(values)
+    @api.model_create_multi
+    def create(self, vals_list):
+        groups = super().create(vals_list)
         self._update_user_groups_view()
         # actions.get_bindings() depends on action records
         self.env['ir.actions.actions'].clear_caches()
-        return user
+        return groups
 
     def write(self, values):
         # determine which values the "user groups view" depends on

--- a/odoo/addons/base/tests/common.py
+++ b/odoo/addons/base/tests/common.py
@@ -8,27 +8,6 @@ from odoo.tests.common import TransactionCase, HttpCase
 from odoo import Command
 
 
-class PerformanceCommon(TransactionCase):
-
-    def assertModelCreateMulti(self, model_name, vals_list=None):
-        """Ensures model_name records can be created in batch.
-
-        :param str model_name: name of the model on which batch record creation should be verified
-        :param list vals_list: example list of values, if needed
-        """
-        vals_list = vals_list or [dict(), dict()]
-        if not isinstance(vals_list, list):
-            raise ValueError("Invalid arguments for assertModelCreateMulti")
-        assert len(vals_list) > 1, "Batch creation cannot be tested with only one value."
-        def patched_create(self, values_list):
-            if len(values_list) != len(vals_list):
-                raise ValueError(f"Model {model_name} doesn't support batch records creation.")
-            # Do not create anything
-            return self
-        with patch('odoo.models.BaseModel.create', patched_create):
-            self.env[model_name].create(vals_list)
-
-
 class TransactionCaseWithUserDemo(TransactionCase):
 
     def setUp(self):
