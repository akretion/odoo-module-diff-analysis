PR: https://github.com/odoo/odoo/pull/98914

From: 7e3403068fc3fbc40182b3cfeb80e97a9300e8ff
From: gawa-odoo
Date: 2022-09-20 10:36:01

Breaking data model changes score: 34.19999999999997, change matches:
-    account_id = fields.Many2one('account.analytic.account', string='Analytic Account', required=True)
-    percentage = fields.Float(string='Percentage', required=True, default=100.0)
-    tag_id = fields.Many2one('account.analytic.tag', string="Parent tag", required=True)
-    name = fields.Char(string='Analytic Tag', index='trigram', required=True)
-    color = fields.Integer('Color Index')
-    active = fields.Boolean(default=True, help="Set active to false to hide the Analytic Tag without removing it.")
-    active_analytic_distribution = fields.Boolean('Analytic Distribution')
-    analytic_distribution_ids = fields.One2many('account.analytic.distribution', 'tag_id', string="Analytic Accounts")
-    company_id = fields.Many2one('res.company', string='Company')
-    name = fields.Char(required=True)
-    parent_id = fields.Many2one('account.analytic.group', string="Parent", ondelete='cascade', domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
-    parent_path = fields.Char(index='btree', unaccent=False)
-    children_ids = fields.One2many('account.analytic.group', 'parent_id', string="Childrens")
-    complete_name = fields.Char('Complete Name', compute='_compute_complete_name', recursive=True, store=True)
-    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company)
+    name = fields.Char(
+    active = fields.Boolean(
+    color = fields.Integer(
+    line_ids = fields.One2many(
+    company_id = fields.Many2one(
-    name = fields.Char(string='Analytic Account', index='trigram', required=True, tracking=True)
-    code = fields.Char(string='Reference', index='btree', tracking=True)
-    active = fields.Boolean('Active', help="If the active field is set to False, it will allow you to hide the account without removing it.", default=True)
-    group_id = fields.Many2one('account.analytic.group', string='Group', check_company=True)
-    line_ids = fields.One2many('account.analytic.line', 'account_id', string="Analytic Lines")
-    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company)
-    partner_id = fields.Many2one('res.partner', string='Customer', auto_join=True, tracking=True, check_company=True)
-    balance = fields.Monetary(compute='_compute_debit_credit_balance', string='Balance',  groups='account.group_account_readonly')
-    debit = fields.Monetary(compute='_compute_debit_credit_balance', string='Debit', groups='account.group_account_readonly')
-    credit = fields.Monetary(compute='_compute_debit_credit_balance', string='Credit', groups='account.group_account_readonly')
-    currency_id = fields.Many2one(related="company_id.currency_id", string="Currency", readonly=True)
-    name = fields.Char('Description', required=True)
-    date = fields.Date('Date', required=True, index=True, default=fields.Date.context_today)
-    amount = fields.Monetary('Amount', required=True, default=0.0)
-    unit_amount = fields.Float('Quantity', default=0.0)
-    product_uom_id = fields.Many2one('uom.uom', string='Unit of Measure', domain="[('category_id', '=', product_uom_category_id)]")
-    product_uom_category_id = fields.Many2one(related='product_uom_id.category_id', string='UoM Category', readonly=True)
-    account_id = fields.Many2one('account.analytic.account', 'Analytic Account', required=True, ondelete='restrict', index=True, check_company=True)
-    partner_id = fields.Many2one('res.partner', string='Partner', check_company=True)
-    user_id = fields.Many2one('res.users', string='User', default=_default_user, index=True)
-    tag_ids = fields.Many2many('account.analytic.tag', 'account_analytic_line_tag_rel', 'line_id', 'tag_id', string='Tags', copy=True, check_company=True)
-    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, default=lambda self: self.env.company)
-    currency_id = fields.Many2one(related="company_id.currency_id", string="Currency", readonly=True, store=True, compute_sudo=True)
-    group_id = fields.Many2one('account.analytic.group', related='account_id.group_id', store=True, readonly=True, compute_sudo=True)
-    category = fields.Selection([('other', 'Other')], default='other')
+    partner_id = fields.Many2one(
+    company_id = fields.Many2one(
+    name = fields.Char(
+    date = fields.Date(
+    amount = fields.Monetary(
+    unit_amount = fields.Float(
+    product_uom_id = fields.Many2one(
+    product_uom_category_id = fields.Many2one(
+    account_id = fields.Many2one(
+    partner_id = fields.Many2one(
+    user_id = fields.Many2one(
+    company_id = fields.Many2one(
+    currency_id = fields.Many2one(
+    category = fields.Selection(
+    parent_id = fields.Many2one(
+    parent_path = fields.Char(
+    children_ids = fields.One2many(
+    complete_name = fields.Char(
+    company_id = fields.Many2one(
+    account_ids = fields.One2many(
+    color = fields.Integer(
+    applicability_ids = fields.One2many(

Total Changes: 678

[REF] *: Analytic Apocalypse

The goal of this commit is to get rid of the analytic tags as they were confusing, serving tag purposes as well as distribution on analytic accounts.

Everywhere analytic tags were used as a distribution have been replaced with a new widget that will dispatch distribution on analytic accounts. If there was an analytic account field next to the tags, it has been included in the distribution.

Analytic tags that were used simply as information tags have been removed.

To fill the new widget, there are now 2 kind of rules that will help fill and prefill it.
The first are applicability: previous groups have been removed, and have by replaced by plans. Each account is required to have a plan. These plans define when they are available in the widget: a default applicability per plan and applicability lines that can specify rules following the context of the widget.

The second one are distribution models, that will replace previous default rules but follow the same principles. The accounts (and so the plans) that will be given by the distribution model can override the applicability rules from before.

closes odoo/odoo#98914

Related: odoo/upgrade#3885
Related: odoo/enterprise#30743
Signed-off-by: William Andr√© (wan) <wan@odoo.com>
Co-authored-by: Habib (ayh) <ayh@odoo.com>

================================= pseudo patch: =================================

--- a/addons/analytic/models/__init__.py
+++ b/addons/analytic/models/__init__.py
@@ -1,5 +1,9 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from . import analytic_plan
 from . import analytic_account
+from . import analytic_line
+from . import analytic_mixin
+from . import analytic_distribution_model
 from . import res_config_settings

--- a/addons/analytic/models/analytic_account.py
+++ b/addons/analytic/models/analytic_account.py
@@ -3,56 +3,8 @@
 
 from collections import defaultdict
 from odoo import api, fields, models, _
-from odoo.osv import expression
-from odoo.exceptions import ValidationError
-
-
-class AccountAnalyticDistribution(models.Model):
-    _name = 'account.analytic.distribution'
-    _description = 'Analytic Account Distribution'
-    _rec_name = 'account_id'
-
-    account_id = fields.Many2one('account.analytic.account', string='Analytic Account', required=True)
-    percentage = fields.Float(string='Percentage', required=True, default=100.0)
-    name = fields.Char(string='Name', related='account_id.name', readonly=False)
-    tag_id = fields.Many2one('account.analytic.tag', string="Parent tag", required=True)
-
-    _sql_constraints = [
-        ('check_percentage', 'CHECK(percentage >= 0 AND percentage <= 100)',
-         'The percentage of an analytic distribution should be between 0 and 100.')
-    ]
-
-class AccountAnalyticTag(models.Model):
-    _name = 'account.analytic.tag'
-    _description = 'Analytic Tags'
-    name = fields.Char(string='Analytic Tag', index='trigram', required=True)
-    color = fields.Integer('Color Index')
-    active = fields.Boolean(default=True, help="Set active to false to hide the Analytic Tag without removing it.")
-    active_analytic_distribution = fields.Boolean('Analytic Distribution')
-    analytic_distribution_ids = fields.One2many('account.analytic.distribution', 'tag_id', string="Analytic Accounts")
-    company_id = fields.Many2one('res.company', string='Company')
-
-class AccountAnalyticGroup(models.Model):
-    _name = 'account.analytic.group'
-    _description = 'Analytic Categories'
-    _parent_store = True
-    _rec_name = 'complete_name'
-
-    name = fields.Char(required=True)
-    description = fields.Text(string='Description')
-    parent_id = fields.Many2one('account.analytic.group', string="Parent", ondelete='cascade', domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
-    parent_path = fields.Char(index='btree', unaccent=False)
-    children_ids = fields.One2many('account.analytic.group', 'parent_id', string="Childrens")
-    complete_name = fields.Char('Complete Name', compute='_compute_complete_name', recursive=True, store=True)
-    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company)
-
-    @api.depends('name', 'parent_id.complete_name')
-    def _compute_complete_name(self):
-        for group in self:
-            if group.parent_id:
-                group.complete_name = '%s / %s' % (group.parent_id.complete_name, group.name)
-            else:
-                group.complete_name = group.name
+from odoo.exceptions import UserError
+
 
 class AccountAnalyticAccount(models.Model):
     _name = 'account.analytic.account'
@@ -62,6 +14,118 @@ class AccountAnalyticAccount(models.Model):
     _check_company_auto = True
     _rec_names_search = ['name', 'code', 'partner_id']
 
+    name = fields.Char(
+        string='Analytic Account',
+        index='trigram',
+        required=True,
+        tracking=True,
+    )
+    code = fields.Char(
+        string='Reference',
+        index='btree',
+        tracking=True,
+    )
+    active = fields.Boolean(
+        'Active',
+        help="Deactivate the account.",
+        default=True,
+        tracking=True,
+    )
+
+    plan_id = fields.Many2one(
+        'account.analytic.plan',
+        string='Plan',
+        check_company=True,
+        required=True,
+    )
+    root_plan_id = fields.Many2one(
+        'account.analytic.plan',
+        string='Root Plan',
+        check_company=True,
+        compute="_compute_root_plan",
+        store=True,
+    )
+    color = fields.Integer(
+        'Color Index',
+        related='plan_id.color',
+    )
+
+    line_ids = fields.One2many(
+        'account.analytic.line',
+        'account_id',
+        string="Analytic Lines",
+    )
+
+    company_id = fields.Many2one(
+        'res.company',
+        string='Company',
+        default=lambda self: self.env.company,
+    )
+
+    # use auto_join to speed up name_search call
+    partner_id = fields.Many2one(
+        'res.partner',
+        string='Customer',
+        auto_join=True,
+        tracking=True,
+        check_company=True,
+    )
+
+    balance = fields.Monetary(
+        compute='_compute_debit_credit_balance',
+        string='Balance',
+        groups='account.group_account_readonly',
+    )
+    debit = fields.Monetary(
+        compute='_compute_debit_credit_balance',
+        string='Debit',
+        groups='account.group_account_readonly',
+    )
+    credit = fields.Monetary(
+        compute='_compute_debit_credit_balance',
+        string='Credit',
+        groups='account.group_account_readonly',
+    )
+
+    currency_id = fields.Many2one(
+        related="company_id.currency_id",
+        string="Currency",
+    )
+
+    @api.constrains('company_id')
+    def _check_company_consistency(self):
+        analytic_accounts = self.filtered('company_id')
+
+        if not analytic_accounts:
+            return
+
+        self.flush_recordset(['company_id'])
+        self.env['account.analytic.line'].flush_model(['account_id', 'company_id'])
+
+        self._cr.execute('''
+        SELECT line.id, line.company_id, line.account_id FROM account_analytic_line line''')
+
+        self._cr.execute('''
+            SELECT line.account_id
+            FROM account_analytic_line line
+            JOIN account_analytic_account account ON line.account_id = account.id
+            WHERE line.company_id != account.company_id and account.company_id IS NOT NULL
+        ''')
+
+        if self._cr.fetchone():
+            raise UserError(_("You can't set a different company on your analytic account since there are some analytic items linked to it."))
+
+    def name_get(self):
+        res = []
+        for analytic in self:
+            name = analytic.name
+            if analytic.code:
+                name = f'[{analytic.code}]{name}'
+            if analytic.partner_id.commercial_partner_id.name:
+                name = f'{name} - {analytic.partner_id.commercial_partner_id.name} - '
+            res.append((analytic.id, name))
+        return res
+
     @api.model
     def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):
         """
@@ -92,9 +156,6 @@ class AccountAnalyticAccount(models.Model):
             domain.append(('date', '>=', self._context['from_date']))
         if self._context.get('to_date', False):
             domain.append(('date', '<=', self._context['to_date']))
-        if self._context.get('tag_ids'):
-            tag_domain = expression.OR([[('tag_ids', 'in', [tag])] for tag in self._context['tag_ids']])
-            domain = expression.AND([domain, tag_domain])
 
         user_currency = self.env.company.currency_id
         credit_groups = analytic_line_obj.read_group(
@@ -124,64 +185,7 @@ class AccountAnalyticAccount(models.Model):
             account.credit = data_credit.get(account.id, 0.0)
             account.balance = account.credit - account.debit
 
-    name = fields.Char(string='Analytic Account', index='trigram', required=True, tracking=True)
-    code = fields.Char(string='Reference', index='btree', tracking=True)
-    active = fields.Boolean('Active', help="If the active field is set to False, it will allow you to hide the account without removing it.", default=True)
-
-    group_id = fields.Many2one('account.analytic.group', string='Group', check_company=True)
-
-    line_ids = fields.One2many('account.analytic.line', 'account_id', string="Analytic Lines")
-
-    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company)
-
-    # use auto_join to speed up name_search call
-    partner_id = fields.Many2one('res.partner', string='Customer', auto_join=True, tracking=True, check_company=True)
-
-    balance = fields.Monetary(compute='_compute_debit_credit_balance', string='Balance',  groups='account.group_account_readonly')
-    debit = fields.Monetary(compute='_compute_debit_credit_balance', string='Debit', groups='account.group_account_readonly')
-    credit = fields.Monetary(compute='_compute_debit_credit_balance', string='Credit', groups='account.group_account_readonly')
-
-    currency_id = fields.Many2one(related="company_id.currency_id", string="Currency", readonly=True)
-
-    def name_get(self):
-        res = []
-        for analytic in self:
-            name = analytic.name
-            if analytic.code:
-                name = '[' + analytic.code + '] ' + name
-            if analytic.partner_id.commercial_partner_id.name:
-                name = name + ' - ' + analytic.partner_id.commercial_partner_id.name
-            res.append((analytic.id, name))
-        return res
-
-
-class AccountAnalyticLine(models.Model):
-    _name = 'account.analytic.line'
-    _description = 'Analytic Line'
-    _order = 'date desc, id desc'
-    _check_company_auto = True
-
-    @api.model
-    def _default_user(self):
-        return self.env.context.get('user_id', self.env.user.id)
-
-    name = fields.Char('Description', required=True)
-    date = fields.Date('Date', required=True, index=True, default=fields.Date.context_today)
-    amount = fields.Monetary('Amount', required=True, default=0.0)
-    unit_amount = fields.Float('Quantity', default=0.0)
-    product_uom_id = fields.Many2one('uom.uom', string='Unit of Measure', domain="[('category_id', '=', product_uom_category_id)]")
-    product_uom_category_id = fields.Many2one(related='product_uom_id.category_id', string='UoM Category', readonly=True)
-    account_id = fields.Many2one('account.analytic.account', 'Analytic Account', required=True, ondelete='restrict', index=True, check_company=True)
-    partner_id = fields.Many2one('res.partner', string='Partner', check_company=True)
-    user_id = fields.Many2one('res.users', string='User', default=_default_user, index=True)
-    tag_ids = fields.Many2many('account.analytic.tag', 'account_analytic_line_tag_rel', 'line_id', 'tag_id', string='Tags', copy=True, check_company=True)
-    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, default=lambda self: self.env.company)
-    currency_id = fields.Many2one(related="company_id.currency_id", string="Currency", readonly=True, store=True, compute_sudo=True)
-    group_id = fields.Many2one('account.analytic.group', related='account_id.group_id', store=True, readonly=True, compute_sudo=True)
-    category = fields.Selection([('other', 'Other')], default='other')
-
-    @api.constrains('company_id', 'account_id')
-    def _check_company_id(self):
-        for line in self:
-            if line.account_id.company_id and line.company_id.id != line.account_id.company_id.id:
-                raise ValidationError(_('The selected account belongs to another company than the one you\'re trying to create an analytic item for'))
+    @api.depends('plan_id', 'plan_id.parent_path')
+    def _compute_root_plan(self):
+        for account in self:
+            account.root_plan_id = int(account.plan_id.parent_path[:-1].split('/')[0]) if account.plan_id.parent_path else None

--- a/None
+++ b/addons/analytic/models/analytic_distribution_model.py
@@ -0,0 +1,79 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+import json
+
+class AccountAnalyticDistributionModel(models.Model):
+    _name = 'account.analytic.distribution.model'
+    _inherit = 'analytic.mixin'
+    _description = 'Analytic Distribution Model'
+    _rec_name = 'create_date'
+    _order = 'id desc'
+
+    partner_id = fields.Many2one(
+        'res.partner',
+        string='Partner',
+        ondelete='cascade',
+        help="Select a partner for which the analytic distribution will be used (e.g. create new customer invoice or Sales order if we select this partner, it will automatically take this as an analytic account)",
+    )
+    partner_category_id = fields.Many2one(
+        'res.partner.category',
+        string='Partner Category',
+        ondelete='cascade',
+        help="Select a partner category for which the analytic distribution will be used (e.g. create new customer invoice or Sales order if we select this partner, it will automatically take this as an analytic account)",
+    )
+    company_id = fields.Many2one(
+        'res.company',
+        string='Company',
+        ondelete='cascade',
+        help="Select a company for which the analytic distribution will be used (e.g. create new customer invoice or Sales order if we select this company, it will automatically take this as an analytic account)",
+    )
+
+    @api.model
+    def _get_distribution(self, vals):
+        """ Returns the distribution model that has the most fields that corresponds to the vals given
+            This method should be called to prefill analytic distribution field on several models """
+        domain = []
+        for fname, value in vals.items():
+            domain += self._create_domain(fname, value) or []
+        best_score = 0
+        res = {}
+        for rec in self.search(domain):
+            score = 0
+            for key, value in vals.items():
+                if value and rec[key]:
+                    if rec._check_score(key, value) == 1:
+                        score += 1
+                    else:
+                        score = -1
+                        break
+            if score > best_score:
+                res = rec.analytic_distribution
+                best_score = score
+        return res
+
+    def _check_score(self, key, value):
+        self.ensure_one()
+        if key == 'partner_category_id':
+            if self[key].id in value:
+                return 1
+        if value == self[key].id:
+            return 1
+        else:
+            return -1
+
+    def _create_domain(self, fname, value):
+        if not value:
+            return False
+        if fname == 'partner_category_id':
+            value += [False]
+            return [(fname, 'in', value)]
+        else:
+            return [(fname, 'in', [value, False])]
+
+    @api.model
+    def _get_distributionjson(self, vals):
+        """ Returns the distribution model as a json for the compute_analytic_distribution_stored_char functions"""
+        distribution = self._get_distribution(vals)
+        return json.dumps(distribution) if distribution else None

--- a/None
+++ b/addons/analytic/models/analytic_line.py
@@ -0,0 +1,92 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError
+
+
+class AccountAnalyticLine(models.Model):
+    _name = 'account.analytic.line'
+    _description = 'Analytic Line'
+    _order = 'date desc, id desc'
+    _check_company_auto = True
+
+    name = fields.Char(
+        'Description',
+        required=True,
+    )
+    date = fields.Date(
+        'Date',
+        required=True,
+        index=True,
+        default=fields.Date.context_today,
+    )
+    amount = fields.Monetary(
+        'Amount',
+        required=True,
+        default=0.0,
+    )
+    unit_amount = fields.Float(
+        'Quantity',
+        default=0.0,
+    )
+    product_uom_id = fields.Many2one(
+        'uom.uom',
+        string='Unit of Measure',
+        domain="[('category_id', '=', product_uom_category_id)]",
+    )
+    product_uom_category_id = fields.Many2one(
+        related='product_uom_id.category_id',
+        string='UoM Category',
+        readonly=True,
+    )
+    account_id = fields.Many2one(
+        'account.analytic.account',
+        'Analytic Account',
+        required=True,
+        ondelete='restrict',
+        index=True,
+        check_company=True,
+    )
+    partner_id = fields.Many2one(
+        'res.partner',
+        string='Partner',
+        check_company=True,
+    )
+    user_id = fields.Many2one(
+        'res.users',
+        string='User',
+        default=lambda self: self.env.context.get('user_id', self.env.user.id),
+        index=True,
+    )
+    company_id = fields.Many2one(
+        'res.company',
+        string='Company',
+        required=True,
+        readonly=True,
+        default=lambda self: self.env.company,
+    )
+    currency_id = fields.Many2one(
+        related="company_id.currency_id",
+        string="Currency",
+        readonly=True,
+        store=True,
+        compute_sudo=True,
+    )
+    plan_id = fields.Many2one(
+        'account.analytic.plan',
+        related='account_id.plan_id',
+        store=True,
+        readonly=True,
+        compute_sudo=True,
+    )
+    category = fields.Selection(
+        [('other', 'Other')],
+        default='other',
+    )
+
+    @api.constrains('company_id', 'account_id')
+    def _check_company_id(self):
+        for line in self:
+            if line.account_id.company_id and line.company_id.id != line.account_id.company_id.id:
+                raise ValidationError(_('The selected account belongs to another company than the one you\'re trying to create an analytic item for'))

--- a/None
+++ b/addons/analytic/models/analytic_mixin.py
@@ -0,0 +1,49 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+from odoo import models, fields, api
+import json
+from odoo.tools import float_repr
+
+
+class AnalyticMixin(models.AbstractModel):
+    _name = 'analytic.mixin'
+    _description = 'Analytic Mixin'
+
+    # We create 2 different fields, with a computed binary field, so we don't have to decode encode each time the json.
+    # We also format the float values of the stored field, so we can use it as key (for tax detail for ex.)
+    analytic_distribution_stored_char = fields.Char(
+        compute="_compute_analytic_distribution_stored_char", store=True, copy=True)
+    analytic_distribution = fields.Binary(
+        string="Analytic",
+        compute="_compute_analytic_distribution",
+        inverse="_inverse_analytic_distribution",
+        readonly=False,
+    )
+
+    def _compute_analytic_distribution_stored_char(self):
+        pass
+
+    @api.depends('analytic_distribution_stored_char')
+    def _compute_analytic_distribution(self):
+        for record in self:
+            if record.analytic_distribution_stored_char:
+                distribution_to_return = {}
+                distribution_json = json.loads(record.analytic_distribution_stored_char)
+                for account, distribution in distribution_json.items():
+                    distribution_to_return[int(account)] = float(distribution)
+                # Check if the account exists, can be removed when we have a constraint between account and model
+                account_ids = self.env['account.analytic.account'].browse(distribution_to_return.keys()).exists().ids
+                record.analytic_distribution = {account_id: distribution_to_return[account_id] for account_id in account_ids}
+
+    @api.onchange('analytic_distribution')
+    def _inverse_analytic_distribution(self):
+        decimal_precision = self.env['decimal.precision'].precision_get('Percentage Analytic')
+        self.env.remove_to_compute(self._fields['analytic_distribution_stored_char'], self)
+        for record in self:
+            if not record.analytic_distribution:
+                record.analytic_distribution_stored_char = None
+            else:
+                distribution_to_return = {}
+                for account, distribution in record.analytic_distribution.items():
+                    distribution_to_return[account] = float_repr(distribution, decimal_precision)
+                record.analytic_distribution_stored_char = json.dumps(distribution_to_return)

--- a/None
+++ b/addons/analytic/models/analytic_plan.py
@@ -0,0 +1,222 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from random import randint
+
+
+class AccountAnalyticPlan(models.Model):
+    _name = 'account.analytic.plan'
+    _description = 'Analytic Plans'
+    _parent_store = True
+    _rec_name = 'complete_name'
+
+    def _default_color(self):
+        return randint(1, 11)
+
+    name = fields.Char(required=True)
+    description = fields.Text(string='Description')
+    parent_id = fields.Many2one(
+        'account.analytic.plan',
+        string="Parent",
+        ondelete='cascade',
+        domain="[('id', '!=', id), ('company_id', 'in', [False, company_id])]",
+    )
+    parent_path = fields.Char(
+        index='btree',
+        unaccent=False,
+    )
+    children_ids = fields.One2many(
+        'account.analytic.plan',
+        'parent_id',
+        string="Childrens",
+    )
+    children_count = fields.Integer(
+        'Children Plans Count',
+        compute='_compute_children_count',
+    )
+    complete_name = fields.Char(
+        'Complete Name',
+        compute='_compute_complete_name',
+        recursive=True,
+        store=True,
+    )
+    company_id = fields.Many2one(
+        'res.company',
+        string='Company',
+        default=lambda self: self.env.company,
+    )
+    account_ids = fields.One2many(
+        'account.analytic.account',
+        'plan_id',
+        string="Accounts",
+    )
+    account_count = fields.Integer(
+        'Analytic Accounts Count',
+        compute='_compute_analytic_account_count',
+    )
+    all_account_count = fields.Integer(
+        'All Analytic Accounts Count',
+        compute='_compute_all_analytic_account_count',
+    )
+    color = fields.Integer(
+        'Color',
+        default=_default_color,
+    )
+
+    default_applicability = fields.Selection(
+        selection=[
+            ('optional', 'Optional'),
+            ('mandatory', 'Mandatory'),
+            ('unavailable', 'Unavailable'),
+        ],
+        string="Default Applicability",
+        required=True,
+        default='optional',
+        readonly=False,
+    )
+    applicability_ids = fields.One2many(
+        'account.analytic.applicability',
+        'analytic_plan_id',
+        string='Applicability',
+    )
+
+    @api.depends('name', 'parent_id.complete_name')
+    def _compute_complete_name(self):
+        for plan in self:
+            if plan.parent_id:
+                plan.complete_name = '%s / %s' % (plan.parent_id.complete_name, plan.name)
+            else:
+                plan.complete_name = plan.name
+
+    @api.depends('account_ids')
+    def _compute_analytic_account_count(self):
+        for plan in self:
+            plan.account_count = len(plan.account_ids)
+
+    @api.depends('account_ids', 'children_ids')
+    def _compute_all_analytic_account_count(self):
+        for plan in self:
+            plan.all_account_count = len(plan.account_ids) + len(plan.children_ids.account_ids)
+
+    @api.depends('children_ids')
+    def _compute_children_count(self):
+        for plan in self:
+            plan.children_count = len(plan.children_ids)
+
+    def action_view_analytical_accounts(self):
+        result = {
+            "type": "ir.actions.act_window",
+            "res_model": "account.analytic.account",
+            "domain": [('id', 'in', self.account_ids.ids)],
+            "context": {'default_plan_id': self.id},
+            "name": _("Analytical Accounts"),
+            'view_mode': 'list,form',
+        }
+        return result
+
+    def action_view_children_plans(self):
+        result = {
+            "type": "ir.actions.act_window",
+            "res_model": "account.analytic.plan",
+            "domain": [('id', 'in', self.children_ids.ids)],
+            "context": {'default_parent_id': self.id,
+                        'default_color': self.color},
+            "name": _("Analytical Plans"),
+            'view_mode': 'list,form',
+        }
+        return result
+
+    @api.model
+    def get_relevant_plans(self, **kwargs):
+        """ Returns the list of plans that should be available.
+            This list is computed based on the applicabilities of root plans. """
+        list_plans = []
+        set_plan_ids = {}
+        all_plans = self.search([('parent_id', '=', False), '|', ('account_ids', '!=', False), ('children_ids.account_ids', '!=', False)])
+        for plan in all_plans:
+            applicability = plan._get_applicability(**kwargs)
+            if applicability != 'unavailable':
+                set_plan_ids[plan.id] = plan
+                list_plans.append(
+                    {
+                        "id": plan.id,
+                        "name": plan.name,
+                        "color": plan.color,
+                        "applicability": applicability,
+                        "all_account_count": plan.all_account_count
+                    })
+        # If we have accounts that are already selected (before the applicability rules changed or from a model),
+        # we want the plans that were unavailable to be shown in the list (and in optional, because the previous
+        # percentage could be different from 0)
+        record_account_ids = kwargs.get('existing_account_ids', [])
+        forced_plans = self.env['account.analytic.account'].browse(record_account_ids).mapped('root_plan_id')
+        for plan in forced_plans.filtered(lambda plan: plan.id not in set_plan_ids):
+            list_plans.append({
+                    "id": plan.id,
+                    "name": plan.name,
+                    "color": plan.color,
+                    "applicability": 'optional',
+                    "all_account_count": plan.all_account_count
+                })
+        return sorted(list_plans, key=lambda d: (d['applicability'], d['id']))
+
+    def _get_applicability(self, **kwargs):
+        """ Returns the applicability of the best applicability line or the default applicability """
+        self.ensure_one()
+        if 'applicability' in kwargs:
+            # For models for example, we want all plans to be visible, so we force the applicability
+            return kwargs['applicability']
+        else:
+            score = 0
+            applicability = self.default_applicability
+            for applicability_rule in self.applicability_ids:
+                score_rule = applicability_rule._get_score(**kwargs)
+                if score_rule > score:
+                    applicability = applicability_rule.applicability
+                    score = score_rule
+            return applicability
+
+    def _get_default(self):
+        plan = self.env['account.analytic.plan'].sudo().search(
+            ['|', ('company_id', '=', False), ('company_id', '=', self.env.company.id)],
+            limit=1)
+        if plan:
+            return plan
+        else:
+            return self.env['account.analytic.plan'].create({
+                'name': 'Default',
+                'company_id': self.env.company.id,
+            })
+
+
+class AccountAnalyticApplicability(models.Model):
+    _name = 'account.analytic.applicability'
+    _description = "Analytic Plan's Applicabilities"
+
+    analytic_plan_id = fields.Many2one('account.analytic.plan')
+    business_domain = fields.Selection(
+        selection=[
+            ('sale', 'Sales'),
+            ('purchase', 'Purchase'),
+            ('general', 'Miscellaneous'),
+        ],
+        required=True,
+        string='Domain',
+    )
+    applicability = fields.Selection([
+        ('optional', 'Optional'),
+        ('mandatory', 'Mandatory'),
+        ('unavailable', 'Unavailable'),
+    ],
+        required=True,
+        string="Applicability",
+    )
+
+    def _get_score(self, **kwargs):
+        """ Gives the score of an applicability with the parameters of kwargs """
+        self.ensure_one()
+        if not kwargs.get('business_domain'):
+            return 0
+        else:
+            return 1 if kwargs.get('business_domain') == self.business_domain else -1
