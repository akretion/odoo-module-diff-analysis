PR: https://github.com/odoo/odoo/pull/

From: db8ed9aa47acedff4c584e55b567a84c8e7b4480
From: Christophe Matthieu
Date: 2018-08-13 15:09:28

Structural Changes: 6
Total Changes: 37

[IMP] report: render report without editable mode

Before this change, the reports were generated in editable mode for branding
to be applied. The branding is used to cut the report and add on each
selected record for generating the pdf.
Applied branding and editing options takes a useless time and branding
was also applied by widgets even if branding was not requested.

================================= pseudo patch: =================================

--- a/addons/web_editor/models/ir_qweb.py
+++ b/addons/web_editor/models/ir_qweb.py
@@ -146,10 +146,11 @@ class ManyToOne(models.AbstractModel):
     @api.model
     def attributes(self, record, field_name, options, values):
         attrs = super(ManyToOne, self).attributes(record, field_name, options, values)
-        many2one = getattr(record, field_name)
-        if many2one:
-            attrs['data-oe-many2one-id'] = many2one.id
-            attrs['data-oe-many2one-model'] = many2one._name
+        if options.get('inherit_branding'):
+            many2one = getattr(record, field_name)
+            if many2one:
+                attrs['data-oe-many2one-id'] = many2one.id
+                attrs['data-oe-many2one-model'] = many2one._name
         return attrs
 
     @api.model
@@ -175,8 +176,9 @@ class Contact(models.AbstractModel):
     @api.model
     def attributes(self, record, field_name, options, values):
         attrs = super(Contact, self).attributes(record, field_name, options, values)
-        options.pop('template_options') # remove options not specific to this widget
-        attrs['data-oe-contact-options'] = json.dumps(options)
+        if options.get('inherit_branding'):
+            options.pop('template_options') # remove options not specific to this widget
+            attrs['data-oe-contact-options'] = json.dumps(options)
         return attrs
 
     # helper to call the rendering of contact field
@@ -192,7 +194,8 @@ class Date(models.AbstractModel):
     @api.model
     def attributes(self, record, field_name, options, values):
         attrs = super(Date, self).attributes(record, field_name, options, values)
-        attrs['data-oe-original'] = record[field_name]
+        if options.get('inherit_branding'):
+            attrs['data-oe-original'] = record[field_name]
         return attrs
 
     @api.model
@@ -211,14 +214,15 @@ class DateTime(models.AbstractModel):
     @api.model
     def attributes(self, record, field_name, options, values):
         attrs = super(DateTime, self).attributes(record, field_name, options, values)
-        value = record[field_name]
-        if isinstance(value, pycompat.string_types):
-            value = fields.Datetime.from_string(value)
-        if value:
-            # convert from UTC (server timezone) to user timezone
-            value = fields.Datetime.context_timestamp(self, timestamp=value)
-            value = fields.Datetime.to_string(value)
-        attrs['data-oe-original'] = value
+        if options.get('inherit_branding'):
+            value = record[field_name]
+            if isinstance(value, pycompat.string_types):
+                value = fields.Datetime.from_string(value)
+            if value:
+                # convert from UTC (server timezone) to user timezone
+                value = fields.Datetime.context_timestamp(self, timestamp=value)
+                value = fields.Datetime.to_string(value)
+            attrs['data-oe-original'] = value
         return attrs
 
     @api.model
@@ -398,7 +402,8 @@ class Duration(models.AbstractModel):
     @api.model
     def attributes(self, record, field_name, options, values):
         attrs = super(Duration, self).attributes(record, field_name, options, values)
-        attrs['data-oe-original'] = record[field_name]
+        if options.get('inherit_branding'):
+            attrs['data-oe-original'] = record[field_name]
         return attrs
 
     @api.model
