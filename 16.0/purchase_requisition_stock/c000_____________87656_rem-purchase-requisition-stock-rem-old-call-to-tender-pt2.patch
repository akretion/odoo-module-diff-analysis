PR: https://github.com/odoo/odoo/pull/87656

From: 00689e7fc61ac08a2f75d856dc077a9ef46b2b26
From: Tiffany Chang (tic)
Date: 2022-06-20 10:15:58

Breaking data model changes score: 1, change matches:
-    procurement_group_id = fields.Many2one('procurement.group', 'Procurement Group')

Total Changes: 37

[REM] purchase_requisition{_stock}: rem old call to tender pt2

This commit removes the call for tender feature via a
purchase.requisition. This feature is to be replaced with the ability to
directly compare prices/options of POs/RFQs within a PO to remove extra
steps to compare them. The linkage between POs previously provided by a
purchase.requistion is replaced by the POs being directly linked to each
other. Feature to auto-create call to tenders via a product option is
removed and the user is expected to know/be responsible for when they
should do a call to tender themselves.

All references to old Call to Tenders replaced with Blanket Order, and
we remove/rename the menu items since Blanket Order is now the only
purchase.requisition.type option (we expect minimal customizated types).
Follow-on refactoring to switch purchase.requisition to
purchase.blanket.order to come later. Follow-on refactoring to switch
purchase.requisition to purchase.blanket.order to come later.

Part of Task: 2695116
Upgrade PR: odoo/upgrade#3586

Part-of: odoo/odoo#87656

================================= pseudo patch: =================================

--- a/addons/purchase_requisition_stock/models/purchase_requisition.py
+++ b/addons/purchase_requisition_stock/models/purchase_requisition.py
@@ -14,24 +14,6 @@ class PurchaseRequisition(models.Model):
     picking_type_id = fields.Many2one(
         'stock.picking.type', 'Operation Type', required=True, default=_default_picking_type_id,
         domain="['|',('warehouse_id', '=', False), ('warehouse_id.company_id', '=', company_id)]")
-    procurement_group_id = fields.Many2one('procurement.group', 'Procurement Group')
-
-    def _prepare_tender_values(self, product_id, product_qty, product_uom, location_id, name, origin, company_id, values):
-        return {
-            'origin': origin,
-            'date_end': values['date_planned'],
-            'user_id': False,
-            'warehouse_id': values.get('warehouse_id') and values['warehouse_id'].id or False,
-            'procurement_group_id': values.get('group_id') and values['group_id'].id or False,
-            'company_id': company_id.id,
-            'line_ids': [(0, 0, {
-                'product_id': product_id.id,
-                'product_uom_id': product_uom.id,
-                'product_qty': product_qty,
-                'product_description_variants': values.get('product_description_variants'),
-                'move_dest_id': values.get('move_dest_ids') and values['move_dest_ids'][0].id or False
-            })],
-        }
 
 
 class PurchaseRequisitionLine(models.Model):

--- a/addons/purchase_requisition_stock/models/stock.py
+++ b/addons/purchase_requisition_stock/models/stock.py
@@ -1,29 +1,12 @@
 # -*- encoding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from collections import defaultdict
-
-from odoo import api, fields, models
+from odoo import fields, models
 
 
 class StockRule(models.Model):
     _inherit = 'stock.rule'
 
-    @api.model
-    def _run_buy(self, procurements):
-        requisitions_values_by_company = defaultdict(list)
-        other_procurements = []
-        for procurement, rule in procurements:
-            if procurement.product_id.purchase_requisition == 'tenders':
-                values = self.env['purchase.requisition']._prepare_tender_values(*procurement)
-                values['picking_type_id'] = rule.picking_type_id.id
-                requisitions_values_by_company[procurement.company_id.id].append(values)
-            else:
-                other_procurements.append((procurement, rule))
-        for company_id, requisitions_values in requisitions_values_by_company.items():
-            self.env['purchase.requisition'].sudo().with_company(company_id).create(requisitions_values)
-        return super(StockRule, self)._run_buy(other_procurements)
-
     def _prepare_purchase_order(self, company_id, origins, values):
         res = super(StockRule, self)._prepare_purchase_order(company_id, origins, values)
         values = values[0]
