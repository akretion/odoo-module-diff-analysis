PR: https://github.com/odoo/odoo/pull/106284

From: 57f95e1a172c9fdc051d6a27490e1433d7a6e923
From: Adesh Jolhe
Date: 2023-06-05 11:31:01

Structural Changes: 8
Total Changes: 33

[IMP] sale_(project,hr)_timesheet: bring generic improvements for project

The purpose of this PR is to improve the generic usage of the project app.

So in this PR done following changes:
 - switched Sales Orders button and planning, document button from their place in
   the project kanban card burger menu
 - In milestone form view added decoration-danger on quantity % if it is equal
   to 0 and there is an SOL set
 - On milestone creation the SOL of the project set default if it is of
   milestone type
 - In the product form view Uom is set as 'hours' if the service is either
   prepaid or invoiced based on timesheets.
- In project.milestone list view changed quantity_percentage label to
   to Quantity(%).
- Added product_uom_qty field in project.milestone list view .
 - In project.sharing improved remaining hours widget now only the frame is
   displayed in orange/red, not the background (as in the back-end)
 - project.update right-side panel added the ref of the SO in the nameget
   of the SOL
 - In project.update right-side panel added Confirmation when trying to delete
   a milestone
 - Reduced the size of project and task sharing wizard

task-2989828

closes odoo/odoo#106284

Related: odoo/upgrade#4198
Related: odoo/enterprise#34322
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_project/models/project_milestone.py
+++ b/addons/sale_project/models/project_milestone.py
@@ -7,18 +7,43 @@ class ProjectMilestone(models.Model):
     _name = 'project.milestone'
     _inherit = 'project.milestone'
 
+    def _default_sale_line_id(self):
+        project_id = self._context.get('default_project_id')
+        if not project_id:
+            return []
+        project = self.env['project.project'].browse(project_id)
+        return self.env['sale.order.line'].search([
+            ('order_id', '=', project.sale_order_id.id),
+            ('qty_delivered_method', '=', 'milestones'),
+        ], limit=1)
+
     allow_billable = fields.Boolean(related='project_id.allow_billable')
     project_partner_id = fields.Many2one(related='project_id.partner_id')
 
-    sale_line_id = fields.Many2one('sale.order.line', 'Sales Order Item', help='Sales Order Item that will be updated once the milestone is reached.',
+    sale_line_id = fields.Many2one('sale.order.line', 'Sales Order Item', default=_default_sale_line_id, help='Sales Order Item that will be updated once the milestone is reached.',
         domain="[('order_partner_id', '=?', project_partner_id), ('qty_delivered_method', '=', 'milestones')]")
-    quantity_percentage = fields.Float('Quantity', help='Percentage of the ordered quantity that will automatically be delivered once the milestone is reached.')
+    quantity_percentage = fields.Float('Quantity (%)', compute="_compute_quantity_percentage", store=True, help='Percentage of the ordered quantity that will automatically be delivered once the milestone is reached.')
+
+    sale_line_display_name = fields.Char("Sale Line Display Name", related='sale_line_id.display_name')
+    product_uom = fields.Many2one(related="sale_line_id.product_uom")
+    product_uom_qty = fields.Float("Quantity", compute="_compute_product_uom_qty", readonly=False)
+
+    @api.depends('sale_line_id.product_uom_qty', 'product_uom_qty')
+    def _compute_quantity_percentage(self):
+        for milestone in self:
+            milestone.quantity_percentage = milestone.sale_line_id.product_uom_qty and milestone.product_uom_qty / milestone.sale_line_id.product_uom_qty
 
-    sale_line_name = fields.Text(related='sale_line_id.name')
+    @api.depends('sale_line_id', 'quantity_percentage')
+    def _compute_product_uom_qty(self):
+        for milestone in self:
+            if milestone.quantity_percentage:
+                milestone.product_uom_qty = milestone.quantity_percentage * milestone.sale_line_id.product_uom_qty
+            else:
+                milestone.product_uom_qty = milestone.sale_line_id.product_uom_qty
 
     @api.model
     def _get_fields_to_export(self):
-        return super()._get_fields_to_export() + ['allow_billable', 'quantity_percentage', 'sale_line_name']
+        return super()._get_fields_to_export() + ['allow_billable', 'quantity_percentage', 'sale_line_display_name']
 
     def action_view_sale_order(self):
         self.ensure_one()
