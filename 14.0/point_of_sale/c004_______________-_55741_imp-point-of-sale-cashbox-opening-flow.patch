PR: https://github.com/odoo/odoo/pull/55741

From: d21420d87ad8a269a0f30b3d9c0a3cee8c46cb14
From: Robin Heinz
Date: 2020-08-12 12:56:23

Structural Changes: 3
Total Changes: 33

[IMP] point_of_sale: cashbox opening flow.

This commit switch the cash control opening mangement from the backend to the front end of the point of sale.

task_id: 2258817

closes odoo/odoo#55741

Signed-off-by: pimodoo <pimodoo@users.noreply.github.com>

================================= pseudo patch: =================================

--- a/addons/point_of_sale/models/pos_config.py
+++ b/addons/point_of_sale/models/pos_config.py
@@ -143,7 +143,7 @@ class PosConfig(models.Model):
         help="The product categories will be displayed with pictures.")
     restrict_price_control = fields.Boolean(string='Restrict Price Modifications to Managers',
         help="Only users with Manager access rights for PoS app can modify the product prices on orders.")
-    cash_control = fields.Boolean(string='Cash Control', help="Check the amount of the cashbox at opening and closing.")
+    cash_control = fields.Boolean(string='Advanced Cash Control', help="Check the amount of the cashbox at opening and closing.")
     receipt_header = fields.Text(string='Receipt Header', help="A short text that will be inserted as a header in the printed receipt.")
     receipt_footer = fields.Text(string='Receipt Footer', help="A short text that will be inserted as a footer in the printed receipt.")
     proxy_ip = fields.Char(string='IP Address', size=45,
@@ -296,7 +296,7 @@ class PosConfig(models.Model):
     @api.depends('session_ids')
     def _compute_current_session_user(self):
         for pos_config in self:
-            session = pos_config.session_ids.filtered(lambda s: s.state in ['new_session', 'opening_control', 'opened', 'closing_control'] and not s.rescue)
+            session = pos_config.session_ids.filtered(lambda s: s.state in ['opening_control', 'opened', 'closing_control'] and not s.rescue)
             if session:
                 pos_config.pos_session_username = session[0].user_id.sudo().name
                 pos_config.pos_session_state = session[0].state
@@ -601,9 +601,7 @@ class PosConfig(models.Model):
                 'user_id': self.env.uid,
                 'config_id': self.id
             })
-            if self.current_session_id.state == 'opened':
-                return self.open_ui()
-        return self._open_session(self.current_session_id.id)
+        return self.open_ui()
 
     def open_existing_session_cb(self):
         """ close session button

--- a/addons/point_of_sale/models/pos_session.py
+++ b/addons/point_of_sale/models/pos_session.py
@@ -16,7 +16,6 @@ class PosSession(models.Model):
     _inherit = ['mail.thread', 'mail.activity.mixin']
 
     POS_SESSION_STATE = [
-        ('new_session', 'New Session'),
         ('opening_control', 'Opening Control'),  # method action_pos_session_open
         ('opened', 'In Progress'),               # method action_pos_session_closing_control
         ('closing_control', 'Closing Control'),  # method action_pos_session_close
@@ -46,7 +45,7 @@ class PosSession(models.Model):
     state = fields.Selection(
         POS_SESSION_STATE, string='Status',
         required=True, readonly=True,
-        index=True, copy=False, default='new_session')
+        index=True, copy=False, default='opening_control')
 
     sequence_number = fields.Integer(string='Order Sequence Number', help='A sequence number that is incremented with each order', default=1)
     login_number = fields.Integer(string='Login Sequence Number', help='A sequence number that is incremented each time a user resumes the pos session', default=0)
@@ -223,8 +222,7 @@ class PosSession(models.Model):
             res = super(PosSession, self.with_context(ctx).sudo()).create(values)
         else:
             res = super(PosSession, self.with_context(ctx)).create(values)
-        if not pos_config.cash_control:
-            res.action_pos_session_open()
+        res.action_pos_session_open()
 
         return res
 
@@ -248,7 +246,14 @@ class PosSession(models.Model):
             values = {}
             if not session.start_at:
                 values['start_at'] = fields.Datetime.now()
-            values['state'] = 'opened'
+            if session.config_id.cash_control:
+                last_sessions = self.env['pos.session'].search([('config_id', '=', self.config_id.id)]).ids
+                # last session includes the new one already.
+                if len(last_sessions) > 1:
+                    self.cash_register_id.balance_start = self.env['pos.session'].browse(last_sessions[1]).cash_register_id.balance_end_real
+                values['state'] = 'opening_control'
+            else:
+                values['state'] = 'opened'
             session.write(values)
         return True
 
@@ -1005,6 +1010,16 @@ class PosSession(models.Model):
         action['context']['default_pos_id'] = self.config_id.id
         return action
 
+    def set_cashbox_pos(self, cashbox_value, notes):
+        self.state = 'opened'
+        self.cash_register_id.balance_start = cashbox_value
+        if notes:
+            self.env['mail.message'].create({
+                        'body': notes,
+                        'model': 'account.bank.statement',
+                        'res_id': self.cash_register_id.id,
+                    })
+
     def action_view_order(self):
         return {
             'name': _('Orders'),
