PR: https://github.com/odoo/odoo/pull/

From: 91617bfc78e3da94be2276fe1c82c4ce47eeb896
From: Thibault Delavall√©e
Date: 2017-03-03 12:09:53

Breaking data model changes score: 5, change matches:
-    _inherit = 'event.event'
+    event_ticket_ids = fields.One2many(
-    event_ticket_ids = fields.One2many('event.event.ticket', 'event_id', string='Event Ticket',
+    event_ticket_ids = fields.One2many(

Total Changes: 56

[IMP] event: ease event configuration and management through categories

This commit improve event.type (Event Categories) model and views in order
to ease event configuration through more detailed categories. The purpose
is to be able to define categories holding default data for website,
tickets, attendee mailing, ... Choosing a category on a new event takes
those default values to help users creating finely-tuned events.

Main configuration on event.type is

 * auto confirmation, replacing the old system-wide auto confirmation
   parameter
 * seats limitation
 * location: online events, timezone
 * communication: reply-to email address, twitter hashtag, automated
   mailing of attendees
 * ticketing
 * website parameters: display on website, display tracks, allow track
   proposal
 * question to attendees

================================= pseudo patch: =================================

--- a/addons/event_sale/models/event.py
+++ b/addons/event_sale/models/event.py
@@ -2,26 +2,56 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models, _
-from odoo.exceptions import ValidationError
+from odoo.exceptions import ValidationError, UserError
 
 import odoo.addons.decimal_precision as dp
 
 
-class Event(models.Model):
-    _inherit = 'event.event'
+class EventType(models.Model):
+    _inherit = 'event.type'
 
-    def _default_tickets(self):
+    @api.model
+    def _get_default_event_ticket_ids(self):
         product = self.env.ref('event_sale.product_product_event', raise_if_not_found=False)
         if not product:
-            return self.env['event.event.ticket']
-        return [{
+            return False
+        return [(0, 0, {
             'name': _('Registration'),
             'product_id': product.id,
             'price': 0,
-        }]
+        })]
+
+    use_ticketing = fields.Boolean('Ticketing')
+    event_ticket_ids = fields.One2many(
+        'event.event.ticket', 'event_type_id',
+        string='Tickets', default=_get_default_event_ticket_ids)
+
+    @api.onchange('name')
+    def _onchange_name(self):
+        if self.name:
+            self.event_ticket_ids.filtered(lambda ticket: ticket.name == _('Registration')).update({
+                'name': _('Registration for %s') % self.name
+            })
+
 
-    event_ticket_ids = fields.One2many('event.event.ticket', 'event_id', string='Event Ticket',
-        default=lambda self: self._default_tickets(), copy=True)
+class Event(models.Model):
+    _inherit = 'event.event'
+
+    event_ticket_ids = fields.One2many(
+        'event.event.ticket', 'event_id', string='Event Ticket',
+        copy=True)
+
+    @api.onchange('event_type_id')
+    def _onchange_type(self):
+        super(Event, self)._onchange_type()
+        if self.event_type_id.use_ticketing:
+            self.event_ticket_ids = [(5, 0, 0)] + [
+                (0, 0, {
+                    'name': self.name and _('Registration for %s') % self.name or ticket.name,
+                    'product_id': ticket.product_id.id,
+                    'price': ticket.price,
+                })
+                for ticket in self.event_type_id.event_ticket_ids]
 
 
 class EventTicket(models.Model):
@@ -32,7 +62,8 @@ class EventTicket(models.Model):
         return self.env.ref('event_sale.product_product_event', raise_if_not_found=False)
 
     name = fields.Char(string='Name', required=True, translate=True)
-    event_id = fields.Many2one('event.event', string="Event", required=True, ondelete='cascade')
+    event_type_id = fields.Many2one('event.type', string='Event Category', ondelete='cascade')
+    event_id = fields.Many2one('event.event', string="Event", ondelete='cascade')
     product_id = fields.Many2one('product.product', string='Product',
         required=True, domain=[("event_ok", "=", True)],
         default=_default_product_id)
@@ -113,6 +144,11 @@ class EventTicket(models.Model):
             if record.seats_max and record.seats_available < 0:
                 raise ValidationError(_('No more available seats for the ticket'))
 
+    @api.constrains('event_type_id', 'event_id')
+    def _constrains_event(self):
+        if any(ticket.event_type_id and ticket.event_id for ticket in self):
+            raise UserError(_('Ticket should belong to either event category or event but not both'))
+
     @api.onchange('product_id')
     def _onchange_product_id(self):
         self.price = self.product_id.list_price or 0
