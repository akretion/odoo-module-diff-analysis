PR: https://github.com/odoo/odoo/pull/

From: 1da63f0ab0fb4212bee46f960c6bbe8ca9251cac
From: qmo-odoo
Date: 2018-12-05 15:32:53

Breaking data model changes scores: del:3 + add:0, change matches:
-    use_quotations = fields.Boolean(string='Quotations', help="Check this box if you send quotations to your customers rather than confirming orders straight away. "
-    use_invoices = fields.Boolean('Set Invoicing Target', help="Check this box to set an invoicing target for this Sales Team.")
-    dashboard_graph_model = fields.Selection(selection_add=[

Total Changes: 129

[IMP] salesteam: Simplify sales team config and improved team dashboard
Reason:
  *Sales team configuration is too complex with fields you
   don't understand and that bring no added value
  *Remove the team type, every team should be able to handle
   a POS or a website for example
Contains:
  *Removal of the team_type, use_quotations, use_leads fields
  *Removal of the graph configuration fields
  *Adapting the filters that were based on the team_type
  *Clear distinction between the team dashboard behavior in crm
   from the one in sales
  *Cleansing of now dead code due to the removal of the previously
   mentionned fields

Task: #1830105
Enterprise PR: #3006
Closes: #28063

================================= pseudo patch: =================================

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -734,7 +734,7 @@ class SaleOrder(models.Model):
         return report_pages
 
     def has_to_be_signed(self, also_in_draft=False):
-        return (self.state == 'sent' or (self.state == 'draft' and also_in_draft)) and not self.is_expired and self.require_signature and not self.signature and self.team_id.team_type != 'website'
+        return (self.state == 'sent' or (self.state == 'draft' and also_in_draft)) and not self.is_expired and self.require_signature and not self.signature
 
     def has_to_be_paid(self, also_in_draft=False):
         transaction = self.get_portal_last_transaction()

--- a/addons/sale/models/sales_team.py
+++ b/addons/sale/models/sales_team.py
@@ -9,9 +9,6 @@ from odoo import api, fields, models, _
 class CrmTeam(models.Model):
     _inherit = 'crm.team'
 
-    use_quotations = fields.Boolean(string='Quotations', help="Check this box if you send quotations to your customers rather than confirming orders straight away. "
-                                                              "This will add specific action buttons to your dashboard.")
-    use_invoices = fields.Boolean('Set Invoicing Target', help="Check this box to set an invoicing target for this Sales Team.")
     invoiced = fields.Integer(
         compute='_compute_invoiced',
         string='Invoiced This Month', readonly=True,
@@ -31,36 +28,31 @@ class CrmTeam(models.Model):
     sales_to_invoice_count = fields.Integer(
         compute='_compute_sales_to_invoice',
         string='Number of sales to invoice', readonly=True)
-    dashboard_graph_model = fields.Selection(selection_add=[
-        ('sale.report', 'Sales'),
-        ('account.invoice.report', 'Invoices'),
-    ])
+
 
     def _compute_quotations_to_invoice(self):
-        non_website_teams = self.filtered(lambda team: team.team_type != 'website')
-        if non_website_teams:
-            query = self.env['sale.order']._where_calc([
-                ('team_id', 'in', non_website_teams.ids),
-                ('state', 'in', ['draft', 'sent']),
-            ])
-            self.env['sale.order']._apply_ir_rules(query, 'read')
-            _, where_clause, where_clause_args = query.get_sql()
-            select_query = """
-                SELECT team_id, count(*), sum(amount_total /
-                    CASE COALESCE(currency_rate, 0)
-                    WHEN 0 THEN 1.0
-                    ELSE currency_rate
-                    END
-                ) as amount_total
-                FROM sale_order
-                WHERE %s
-                GROUP BY team_id
-            """ % where_clause
-            self.env.cr.execute(select_query, where_clause_args)
-            quotation_data = self.env.cr.dictfetchall()
-            for datum in quotation_data:
-                self.browse(datum['team_id']).quotations_amount = datum['amount_total']
-                self.browse(datum['team_id']).quotations_count = datum['count']
+        query = self.env['sale.order']._where_calc([
+            ('team_id', 'in', self.ids),
+            ('state', 'in', ['draft', 'sent']),
+        ])
+        self.env['sale.order']._apply_ir_rules(query, 'read')
+        _, where_clause, where_clause_args = query.get_sql()
+        select_query = """
+            SELECT team_id, count(*), sum(amount_total /
+                CASE COALESCE(currency_rate, 0)
+                WHEN 0 THEN 1.0
+                ELSE currency_rate
+                END
+            ) as amount_total
+            FROM sale_order
+            WHERE %s
+            GROUP BY team_id
+        """ % where_clause
+        self.env.cr.execute(select_query, where_clause_args)
+        quotation_data = self.env.cr.dictfetchall()
+        for datum in quotation_data:
+            self.browse(datum['team_id']).quotations_amount = datum['amount_total']
+            self.browse(datum['team_id']).quotations_count = datum['count']
 
     @api.multi
     def _compute_sales_to_invoice(self):
@@ -68,8 +60,9 @@ class CrmTeam(models.Model):
             ('team_id', 'in', self.ids),
             ('order_line.qty_to_invoice', '>', 0),
         ], ['team_id'], ['team_id'])
-        for datum in sale_order_data:
-            self.browse(datum['team_id'][0]).invoiced = datum['team_id_count']
+        data_map = {datum['team_id'][0]: datum['team_id_count'] for datum in sale_order_data }
+        for team in self:
+            team.sales_to_invoice_count = data_map.get(team.id,0.0)
 
     @api.multi
     def _compute_invoiced(self):
@@ -80,67 +73,45 @@ class CrmTeam(models.Model):
             ('date', '>=', date.today().replace(day=1)),
             ('type', 'in', ['out_invoice', 'out_refund']),
         ], ['amount_untaxed_signed', 'team_id'], ['team_id'])
-        for datum in invoice_data:
-            self.browse(datum['team_id'][0]).invoiced = datum['amount_untaxed_signed']
+        data_map = { datum['team_id'][0]: datum['amount_untaxed_signed'] for datum in invoice_data}
+        for team in self:
+            team.invoiced = data_map.get(team.id,0.0)
+    
+    def _graph_get_model(self):
+        if self._context.get('in_sales_app'):
+            return 'sale.report'
+        return super(CrmTeam,self)._graph_get_model()
 
     def _graph_date_column(self):
-        if self.dashboard_graph_model == 'sale.report':
+        if self._context.get('in_sales_app'):
             return 'confirmation_date'
-        elif self.dashboard_graph_model == 'account.invoice.report':
-            return 'date'
-        return super(CrmTeam, self)._graph_date_column()
+        return super(CrmTeam,self)._graph_date_column()
 
     def _graph_y_query(self):
-        if self.dashboard_graph_model == 'sale.report':
+        if self._context.get('in_sales_app'):
             return 'SUM(price_subtotal)'
-        elif self.dashboard_graph_model == 'account.invoice.report':
-            return 'SUM(price_total)'
-        return super(CrmTeam, self)._graph_y_query()
+        return super(CrmTeam,self)._graph_y_query()
 
     def _extra_sql_conditions(self):
-        if self.dashboard_graph_model == 'sale.report':
-            return "AND state in ('sale', 'done')"
-        elif self.dashboard_graph_model == 'account.invoice.report':
-            return "AND state in ('open', 'in_payment', 'paid')"
-        return super(CrmTeam, self)._extra_sql_conditions()
+        if self._context.get('in_sales_app'):
+            return "AND state in ('sale', 'done', 'pos_done')"
+        return super(CrmTeam,self)._extra_sql_conditions()
 
     def _graph_title_and_key(self):
-        if self.dashboard_graph_model == 'sale.report':
+        if self._context.get('in_sales_app'):
             return ['', _('Sales: Untaxed Total')] # no more title
-        elif self.dashboard_graph_model == 'account.invoice.report':
-            return ['', _('Invoices: Untaxed Total')]
         return super(CrmTeam, self)._graph_title_and_key()
 
     def _compute_dashboard_button_name(self):
-        quotation_teams = self.filtered('use_quotations')
-        quotation_teams.update({'dashboard_button_name': _("Quotations")})
-        (self - quotation_teams).update({'dashboard_button_name': _("Sales Orders")})
+        super(CrmTeam,self)._compute_dashboard_button_name()
+        if self._context.get('in_sales_app'):
+            self.update({'dashboard_button_name': _("Sales Analysis")})
 
     def action_primary_channel_button(self):
-        if hasattr(self, 'use_opportunities') and self.use_opportunities:
-            return super(CrmTeam, self).action_primary_channel_button()
-        elif self.use_quotations:
-            action = self.env.ref('sale.action_quotations_salesteams').read()[0]
-            action['context'] = {'search_default_team_id': self.id}
-            return action
-        else:
-            action = self.env.ref('sale.action_orders_salesteams').read()[0]
-            action['context'] = {'search_default_team_id': self.id}
-            return action
-
-    @api.onchange('team_type')
-    def _onchange_team_type(self):
-        if self.team_type == 'sales':
-            self.use_quotations = True
-            self.use_invoices = True
-            if not self.dashboard_graph_model:
-                self.dashboard_graph_model = 'sale.report'
-        else:
-            self.use_quotations = False
-            self.use_invoices = False
-            self.dashboard_graph_model = 'sale.report'
-        return super(CrmTeam, self)._onchange_team_type()
-
+        if self._context.get('in_sales_app'):
+            return self.env.ref('sale.action_order_report_so_salesteam').read()[0]
+        return super(CrmTeam, self).action_primary_channel_button()
+            
     @api.multi
     def update_invoiced_target(self, value):
         return self.write({'invoiced_target': round(float(value or 0))})
