PR: https://github.com/odoo/odoo/pull/135145

From: ba1a5509fa49fd846739252d16083dd8cb334b53
From: Gorash
Date: 2023-09-21 16:52:10

Structural Changes: 4.8
Total Changes: 115

[IMP] base: Remove context dependencies from get_views method

In this viewtiverse, the heroes remove the context dependencies for
`get_views`, from the views and python fields (such as domain). To reduce
inconsistencies and the number of rpc.

Current issues:
* There may be inconsistencies in views at the JavaScript level. Some
overrides modify the behavior of get_views or domains on fields via
context keys, therefore by changing the action, the rendering may be
different. However, these views are cached. However, the cache key
(Javascript) does not reflect the entire context, and requires additional
post-processing from the server.
* Multiple rpc for the same rendering. get_views being dependent on the
context, as soon as it changes, a new rpc is performed. In most cases,
when JavaScript needs the same view, there is no change depending on the
context, the rpc is useless.
* Inconsistency when rendering subviews, some views could be different
depending on the context, this context can be modified in the view itself
via the context attributes. However, the JavaScript client does not redo
an rpc for each change of these sub-contexts. Therefore the result may be
inconsistent.

Solution:
Limit as much as possible the number of context keys provided when calling
get_views, and use the context provided as a cache key. The authorized
keys are 'lang' and '*_view_ref'. For the cache key, options are added in
the get_views method.
Instead of using the context, it is inserted into python expressions.
This will be evaluated by JavaScript and thus avoids inconsistencies.

task-3414108
task-3414068

closes odoo/odoo#135145

Related: odoo/enterprise#47584
Signed-off-by: Raphael Collet <rco@odoo.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/product.py
+++ b/addons/stock/models/product.py
@@ -1014,6 +1014,7 @@ class ProductCategory(models.Model):
         ('partial', 'Reserve Partial Packagings'),], string="Reserve Packagings", default='partial',
         help="Reserve Only Full Packagings: will not reserve partial packagings. If customer orders 2 pallets of 1000 units each and you only have 1600 in stock, then only 1000 will be reserved\n"
              "Reserve Partial Packagings: allow reserving partial packagings. If customer orders 2 pallets of 1000 units each and you only have 1600 in stock, then 1600 will be reserved")
+    filter_for_stock_putaway_rule = fields.Boolean('stock.putaway.rule', store=False, search='_search_filter_for_stock_putaway_rule')
 
     def _compute_total_route_ids(self):
         for category in self:
@@ -1024,6 +1025,17 @@ class ProductCategory(models.Model):
                 routes |= base_cat.route_ids
             category.total_route_ids = routes
 
+    def _search_filter_for_stock_putaway_rule(self, operator, value):
+        assert operator == '='
+        assert value
+
+        active_model = self.env.context.get('active_model')
+        if active_model in ('product.template', 'product.product') and self.env.context.get('active_id'):
+            product = self.env[active_model].browse(self.env.context.get('active_id'))
+            product = product.exists()
+            if product:
+                return [('id', '=', product.categ_id.id)]
+        return []
 
 class ProductPackaging(models.Model):
     _inherit = "product.packaging"

--- a/addons/stock/models/product_strategy.py
+++ b/addons/stock/models/product_strategy.py
@@ -41,26 +41,13 @@ class StockPutawayRule(models.Model):
         elif self.env.context.get('active_model') == 'product.product':
             return self.env.context.get('active_id')
 
-    def _domain_category_id(self):
-        active_model = self.env.context.get('active_model')
-        if active_model in ('product.template', 'product.product') and self.env.context.get('active_id'):
-            product = self.env[active_model].browse(self.env.context.get('active_id'))
-            product = product.exists()
-            if product:
-                return [('id', '=', product.categ_id.id)]
-        return []
-
-    def _domain_product_id(self):
-        domain = "[('type', '!=', 'service')]"
-        if self.env.context.get('active_model') == 'product.template':
-            return [('product_tmpl_id', '=', self.env.context.get('active_id'))]
-        return domain
-
     product_id = fields.Many2one(
         'product.product', 'Product', check_company=True,
-        default=_default_product_id, domain=_domain_product_id, ondelete='cascade')
+        default=_default_product_id,
+        domain="[('product_tmpl_id', '=', context.get('active_id', False))] if context.get('active_model') == 'product.template' else [('type', '!=', 'service')]",
+        ondelete='cascade')
     category_id = fields.Many2one('product.category', 'Product Category',
-        default=_default_category_id, domain=_domain_category_id, ondelete='cascade')
+        default=_default_category_id, domain=[('filter_for_stock_putaway_rule', '=', True)], ondelete='cascade')
     location_in_id = fields.Many2one(
         'stock.location', 'When product arrives in', check_company=True,
         domain="[('child_ids', '!=', False)]",

--- a/addons/stock/models/stock_lot.py
+++ b/addons/stock/models/stock_lot.py
@@ -26,7 +26,9 @@ class StockLot(models.Model):
     ref = fields.Char('Internal Reference', help="Internal reference number in case it differs from the manufacturer's lot/serial number")
     product_id = fields.Many2one(
         'product.product', 'Product', index=True,
-        domain=lambda self: self._domain_product_id(), required=True, check_company=True)
+        domain=("[('tracking', '!=', 'none'), ('type', '=', 'product')] +"
+            " ([('product_tmpl_id', '=', context['default_product_tmpl_id'])] if context.get('default_product_tmpl_id') else [])"),
+        required=True, check_company=True)
     product_uom_id = fields.Many2one(
         'uom.uom', 'Unit of Measure',
         related='product_id.uom_id', store=True)
@@ -88,17 +90,6 @@ class StockLot(models.Model):
         if error_message_lines:
             raise ValidationError(_('The combination of serial number and product must be unique across a company.\nFollowing combination contains duplicates:\n') + '\n'.join(error_message_lines))
 
-    def _domain_product_id(self):
-        domain = [
-            "('tracking', '!=', 'none')",
-            "('type', '=', 'product')",
-        ]
-        if self.env.context.get('default_product_tmpl_id'):
-            domain.insert(0,
-                ("('product_tmpl_id', '=', %s)" % self.env.context['default_product_tmpl_id'])
-            )
-        return '[' + ', '.join(domain) + ']'
-
     def _check_create(self):
         active_picking_id = self.env.context.get('active_picking_id', False)
         if active_picking_id:

--- a/addons/stock/models/stock_orderpoint.py
+++ b/addons/stock/models/stock_orderpoint.py
@@ -23,17 +23,6 @@ class StockWarehouseOrderpoint(models.Model):
     _check_company_auto = True
     _order = "location_id,company_id,id"
 
-    @api.model
-    def _domain_product_id(self):
-        domain = "('type', '=', 'product')"
-        if self.env.context.get('active_model') == 'product.template':
-            product_template_id = self.env.context.get('active_id', False)
-            domain = f"('product_tmpl_id', '=', {product_template_id})"
-        elif self.env.context.get('default_product_id', False):
-            product_id = self.env.context.get('default_product_id', False)
-            domain = f"('id', '=', {product_id})"
-        return f"[{domain}]"
-
     name = fields.Char(
         'Name', copy=False, required=True, readonly=True,
         default=lambda self: self.env['ir.sequence'].next_by_code('stock.orderpoint'))
@@ -54,7 +43,9 @@ class StockWarehouseOrderpoint(models.Model):
     product_tmpl_id = fields.Many2one('product.template', related='product_id.product_tmpl_id')
     product_id = fields.Many2one(
         'product.product', 'Product',
-        domain=lambda self: self._domain_product_id(),
+        domain=("[('product_tmpl_id', '=', context.get('active_id', False))] if context.get('active_model') == 'product.template' else"
+            " [('id', '=', context.get('default_product_id', False))] if context.get('default_product_id') else"
+            " [('type', '=', 'product')]"),
         ondelete='cascade', required=True, check_company=True)
     product_category_id = fields.Many2one('product.category', name='Product Category', related='product_id.categ_id', store=True)
     product_uom = fields.Many2one(

--- a/addons/stock/models/stock_quant.py
+++ b/addons/stock/models/stock_quant.py
@@ -23,32 +23,24 @@ class StockQuant(models.Model):
     _rec_name = 'product_id'
 
     def _domain_location_id(self):
-        if not self._is_inventory_mode():
-            return
-        return [('usage', 'in', ['internal', 'transit'])]
+        if self.user_has_groups('stock.group_stock_user'):
+            return "[('usage', 'in', ['internal', 'transit'])] if context.get('inventory_mode') else []"
+        return "[]"
 
     def _domain_lot_id(self):
-        if not self._is_inventory_mode():
-            return
-        domain = []
-        if self.env.context.get('active_model') == 'product.product':
-            domain.insert(0, "('product_id', '=', %s)" % self.env.context.get('active_id'))
-        elif self.env.context.get('active_model') == 'product.template':
-            product_template = self.env['product.template'].browse(self.env.context.get('active_id'))
-            if product_template.exists():
-                domain.insert(0, "('product_id', 'in', %s)" % product_template.product_variant_ids.ids)
-        else:
-            domain.insert(0, "('product_id', '=', product_id)")
-        return '[' + ', '.join(domain) + ']'
+        if self.user_has_groups('stock.group_stock_user'):
+            return ("[] if not context.get('inventory_mode') else"
+                " [('product_id', '=', context.get('active_id', False))] if context.get('active_model') == 'product.product' else"
+                " [('product_id.product_tmpl_id', '=', context.get('active_id', False))] if context.get('active_model') == 'product.template' else"
+                " [('product_id', '=', product_id)]")
+        return "[]"
 
     def _domain_product_id(self):
-        if not self._is_inventory_mode():
-            return
-        domain = [('type', '=', 'product')]
-        if self.env.context.get('product_tmpl_ids') or self.env.context.get('product_tmpl_id'):
-            products = self.env.context.get('product_tmpl_ids', []) + [self.env.context.get('product_tmpl_id', 0)]
-            domain = expression.AND([domain, [('product_tmpl_id', 'in', products)]])
-        return domain
+        if self.user_has_groups('stock.group_stock_user'):
+            return ("[] if not context.get('inventory_mode') else"
+                " [('type', '=', 'product'), ('product_tmpl_id', 'in', context.get('product_tmpl_ids', []) + [context.get('product_tmpl_id', 0)])] if context.get('product_tmpl_ids') or context.get('product_tmpl_id') else"
+                " [('type', '=', 'product')]")
+        return "[]"
 
     product_id = fields.Many2one(
         'product.product', 'Product',

--- a/addons/stock/models/stock_storage_category.py
+++ b/addons/stock/models/stock_storage_category.py
@@ -51,19 +51,11 @@ class StorageCategoryProductCapacity(models.Model):
     _check_company_auto = True
     _order = "storage_category_id"
 
-    @api.model
-    def _domain_product_id(self):
-        domain = "('type', '=', 'product')"
-        if self.env.context.get('active_model') == 'product.template':
-            product_template_id = self.env.context.get('active_id', False)
-            domain = f"('product_tmpl_id', '=', {product_template_id})"
-        elif self.env.context.get('default_product_id', False):
-            product_id = self.env.context.get('default_product_id', False)
-            domain = f"('id', '=', {product_id})"
-        return f"[{domain}]"
-
     storage_category_id = fields.Many2one('stock.storage.category', ondelete='cascade', required=True, index=True)
-    product_id = fields.Many2one('product.product', 'Product', domain=lambda self: self._domain_product_id(), ondelete='cascade', check_company=True)
+    product_id = fields.Many2one('product.product', 'Product', ondelete='cascade', check_company=True,
+        domain=("[('product_tmpl_id', '=', context.get('active_id', False))] if context.get('active_model') == 'product.template' else"
+            " [('id', '=', context.get('default_product_id', False))] if context.get('default_product_id') else"
+            " [('type', '=', 'product')]"))
     package_type_id = fields.Many2one('stock.package.type', 'Package Type', ondelete='cascade', check_company=True)
     quantity = fields.Float('Quantity', required=True)
     product_uom_id = fields.Many2one(related='product_id.uom_id')
