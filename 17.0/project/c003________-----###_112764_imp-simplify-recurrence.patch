PR: https://github.com/odoo/odoo/pull/112764

From: 85e9290711c5376660941122dffb3b335b223091
From: Audric Onockx (auon)
Date: 2023-03-13 16:45:21

Structural Changes: 45
Total Changes: 557

[IMP] *: simplify recurrence

*=hr_timesheet,project,sale_project,sale_timesheet

Currently, the configuration of the recurrence is quite complete
and allows a lot of flexibility, but it is costly
in terms of implementation as it requires a lot of fields.
The goal of this task is thus to simplify this implementation.

In addition, a lot of people are complaining
that tasks are only generated when the recurrence date is reached,
as it doesn't allow to anticipate the planning of field serviceÂ tasks.
In this task, we are thus going to immediately generate a new task
once the previous one is marked as done.

Concretely, we:
- describe a recurrence in terms of
"once every n day/week/month/year for ever/until a date"
and delete all fields that don't fit into it.

- remove the cron. The new occurrence is created when
marking the last task as done, and copied from the latter.
Deleting the last task deletes the recurrence.
The recurrence fields stay useful, as they form a delta t
that will be added to deadline/planned dates fields to get the new
values.

- use an boolean icon button to activate recurrence,
and place it at the end of deadline field's line.
The recurrence fields appear on the next line.

- delete in the form: the div explaining when the next tasks will be
created and the header to choose how to save the changes in the
recurrence.

task-3084945

closes odoo/odoo#112764

Related: odoo/upgrade#4343
Related: odoo/enterprise#37114
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -16,7 +16,6 @@ from odoo.exceptions import UserError, ValidationError, AccessError
 from odoo.osv import expression
 from odoo.tools.misc import get_lang, format_date
 
-from .project_task_recurrence import DAYS, WEEKS
 from .project_update import STATUS_COLOR
 
 
@@ -49,7 +48,6 @@ PROJECT_TASK_READABLE_FIELDS = {
     'dependent_ids',
     'message_is_follower',
     'recurring_task',
-    'recurrence_template_id',
 }
 
 PROJECT_TASK_WRITABLE_FIELDS = {
@@ -1140,7 +1138,7 @@ class Task(models.Model):
         ('03_approved', 'Approved'),
         *CLOSED_STATES.items(),
         ('04_waiting_normal', 'Waiting'),
-    ], string='Status', copy=False, default='01_in_progress', required=True, compute='_compute_state', readonly=False, store=True, recursive=True, task_dependency_tracking=True, tracking=True)
+    ], string='Status', copy=False, default='01_in_progress', required=True, compute='_compute_state', inverse='_inverse_state', readonly=False, store=True, recursive=True, task_dependency_tracking=True, tracking=True)
 
     create_date = fields.Datetime("Created On", readonly=True)
     write_date = fields.Datetime("Last Updated On", readonly=True)
@@ -1260,13 +1258,6 @@ class Task(models.Model):
     recurring_task = fields.Boolean(string="Recurrent")
     recurring_count = fields.Integer(string="Tasks in Recurrence", compute='_compute_recurring_count')
     recurrence_id = fields.Many2one('project.task.recurrence', copy=False)
-    recurrence_update = fields.Selection([
-        ('this', 'This task'),
-        ('future', 'This and future tasks'),
-    ], default='this', store=False)
-    recurrence_message = fields.Char(string='Next Recurrencies', compute='_compute_recurrence_message')
-    recurrence_template_id = fields.Many2one('project.task')
-
     repeat_interval = fields.Integer(string='Repeat Every', default=1, compute='_compute_repeat', readonly=False)
     repeat_unit = fields.Selection([
         ('day', 'Days'),
@@ -1276,67 +1267,9 @@ class Task(models.Model):
     ], default='week', compute='_compute_repeat', readonly=False)
     repeat_type = fields.Selection([
         ('forever', 'Forever'),
-        ('until', 'End Date'),
-        ('after', 'Number of Repetitions'),
+        ('until', 'Until'),
     ], default="forever", string="Until", compute='_compute_repeat', readonly=False)
     repeat_until = fields.Date(string="End Date", compute='_compute_repeat', readonly=False)
-    repeat_number = fields.Integer(string="Repetitions", default=1, compute='_compute_repeat', readonly=False)
-
-    repeat_on_month = fields.Selection([
-        ('date', 'Date of the Month'),
-        ('day', 'Day of the Month'),
-    ], default='date', compute='_compute_repeat', readonly=False)
-
-    repeat_on_year = fields.Selection([
-        ('date', 'Date of the Year'),
-        ('day', 'Day of the Year'),
-    ], default='date', compute='_compute_repeat', readonly=False)
-
-    mon = fields.Boolean(string="Mon", compute='_compute_repeat', readonly=False)
-    tue = fields.Boolean(string="Tue", compute='_compute_repeat', readonly=False)
-    wed = fields.Boolean(string="Wed", compute='_compute_repeat', readonly=False)
-    thu = fields.Boolean(string="Thu", compute='_compute_repeat', readonly=False)
-    fri = fields.Boolean(string="Fri", compute='_compute_repeat', readonly=False)
-    sat = fields.Boolean(string="Sat", compute='_compute_repeat', readonly=False)
-    sun = fields.Boolean(string="Sun", compute='_compute_repeat', readonly=False)
-
-    repeat_day = fields.Selection([
-        (str(i), str(i)) for i in range(1, 32)
-    ], compute='_compute_repeat', readonly=False)
-    repeat_week = fields.Selection([
-        ('first', 'First'),
-        ('second', 'Second'),
-        ('third', 'Third'),
-        ('last', 'Last'),
-    ], default='first', compute='_compute_repeat', readonly=False)
-    repeat_weekday = fields.Selection([
-        ('mon', 'Monday'),
-        ('tue', 'Tuesday'),
-        ('wed', 'Wednesday'),
-        ('thu', 'Thursday'),
-        ('fri', 'Friday'),
-        ('sat', 'Saturday'),
-        ('sun', 'Sunday'),
-    ], string='Day Of The Week', compute='_compute_repeat', readonly=False)
-    repeat_month = fields.Selection([
-        ('january', 'January'),
-        ('february', 'February'),
-        ('march', 'March'),
-        ('april', 'April'),
-        ('may', 'May'),
-        ('june', 'June'),
-        ('july', 'July'),
-        ('august', 'August'),
-        ('september', 'September'),
-        ('october', 'October'),
-        ('november', 'November'),
-        ('december', 'December'),
-    ], compute='_compute_repeat', readonly=False)
-
-    repeat_show_dow = fields.Boolean(compute='_compute_repeat_visibility')
-    repeat_show_day = fields.Boolean(compute='_compute_repeat_visibility')
-    repeat_show_week = fields.Boolean(compute='_compute_repeat_visibility')
-    repeat_show_month = fields.Boolean(compute='_compute_repeat_visibility')
 
     # Account analytic
     analytic_account_id = fields.Many2one('account.analytic.account', ondelete='set null', compute='_compute_analytic_account_id', store=True, readonly=False,
@@ -1420,6 +1353,12 @@ class Task(models.Model):
     def is_blocked_by_dependences(self):
         return any(blocking_task.state not in CLOSED_STATES for blocking_task in self.depend_on_ids)
 
+    def _inverse_state(self):
+        last_task_id_per_recurrence_id = self.recurrence_id._get_last_task_id_per_recurrence_id()
+        for task in self:
+            if task.state in CLOSED_STATES and task.id == last_task_id_per_recurrence_id.get(task.recurrence_id.id):
+                task.recurrence_id._create_next_occurrence(task)
+
     @api.depends_context('uid')
     @api.depends('user_ids')
     def _compute_personal_stage_id(self):
@@ -1490,17 +1429,12 @@ class Task(models.Model):
 
     @api.model
     def _get_recurrence_fields(self):
-        return ['repeat_interval', 'repeat_unit', 'repeat_type', 'repeat_until', 'repeat_number',
-                'repeat_on_month', 'repeat_on_year', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat',
-                'sun', 'repeat_day', 'repeat_week', 'repeat_month', 'repeat_weekday']
-
-    @api.depends('recurring_task', 'repeat_unit', 'repeat_on_month', 'repeat_on_year')
-    def _compute_repeat_visibility(self):
-        for task in self:
-            task.repeat_show_day = task.recurring_task and (task.repeat_unit == 'month' and task.repeat_on_month == 'date') or (task.repeat_unit == 'year' and task.repeat_on_year == 'date')
-            task.repeat_show_week = task.recurring_task and (task.repeat_unit == 'month' and task.repeat_on_month == 'day') or (task.repeat_unit == 'year' and task.repeat_on_year == 'day')
-            task.repeat_show_dow = task.recurring_task and task.repeat_unit == 'week'
-            task.repeat_show_month = task.recurring_task and task.repeat_unit == 'year'
+        return [
+            'repeat_interval',
+            'repeat_unit',
+            'repeat_type',
+            'repeat_until',
+        ]
 
     @api.depends('recurring_task')
     def _compute_repeat(self):
@@ -1509,66 +1443,16 @@ class Task(models.Model):
         for task in self:
             for f in rec_fields:
                 if task.recurrence_id:
-                    task[f] = task.recurrence_id[f]
+                    task[f] = task.recurrence_id.sudo()[f]
                 else:
                     if task.recurring_task:
                         task[f] = defaults.get(f)
                     else:
                         task[f] = False
 
-    def _get_weekdays(self, n=1):
-        self.ensure_one()
-        if self.repeat_unit == 'week':
-            return [fn(n) for day, fn in DAYS.items() if self[day]]
-        return [DAYS.get(self.repeat_weekday)(n)]
-
-    @api.depends(
-        'recurring_task', 'repeat_interval', 'repeat_unit', 'repeat_type', 'repeat_until',
-        'repeat_number', 'repeat_on_month', 'repeat_on_year', 'mon', 'tue', 'wed', 'thu', 'fri',
-        'sat', 'sun', 'repeat_day', 'repeat_week', 'repeat_month', 'repeat_weekday')
-    def _compute_recurrence_message(self):
-        self.recurrence_message = False
-        for task in self.filtered(lambda t: t.recurring_task and t._is_recurrence_valid()):
-            delta = task.repeat_interval if task.repeat_unit == 'day' else 1
-            if task.recurrence_id and task.recurrence_id.next_recurrence_date > fields.Date.today():
-                date = task.recurrence_id.next_recurrence_date
-            else:
-                date = fields.Date.today() + timedelta(days=delta)
-            recurrence_left = task.recurrence_id.recurrence_left if task.recurrence_id  else task.repeat_number
-            number_occurrences = min(5, recurrence_left if task.repeat_type == 'after' else 5)
-            recurring_dates = self.env['project.task.recurrence']._get_next_recurring_dates(
-                date,
-                task.repeat_interval,
-                task.repeat_unit,
-                task.repeat_type,
-                task.repeat_until,
-                task.repeat_on_month,
-                task.repeat_on_year,
-                task._get_weekdays(WEEKS.get(task.repeat_week)),
-                task.repeat_day,
-                task.repeat_week,
-                task.repeat_month,
-                count=number_occurrences)
-            date_format = self.env['res.lang']._lang_get(self.env.user.lang).date_format
-            if recurrence_left == 0:
-                recurrence_title = _('There are no more occurrences.')
-            else:
-                recurrence_title = _('A new task will be created on the following dates:')
-            task.recurrence_message = '<p><span class="fa fa-check-circle"></span> %s</p><ul>' % recurrence_title
-            task.recurrence_message += ''.join(['<li>%s %s</li>' % (
-                format_date(self.env, date, date_format="EEE"), date.strftime(date_format)
-            ) for date in recurring_dates[:5]])
-            if task.repeat_type == 'after' and recurrence_left > 5 or task.repeat_type == 'forever' or len(recurring_dates) > 5:
-                task.recurrence_message += '<li>...</li>'
-            task.recurrence_message += '</ul>'
-            if task.repeat_type == 'until':
-                task.recurrence_message += _('<p><em>Number of tasks: %(tasks_count)s</em></p>') % {'tasks_count': len(recurring_dates)}
-
     def _is_recurrence_valid(self):
         self.ensure_one()
         return self.repeat_interval > 0 and\
-                (not self.repeat_show_dow or self._get_weekdays()) and\
-                (self.repeat_type != 'after' or self.repeat_number) and\
                 (self.repeat_type != 'until' or self.repeat_until and self.repeat_until > fields.Date.today())
 
     @api.depends('recurrence_id')
@@ -1912,19 +1796,8 @@ class Task(models.Model):
     def default_get(self, default_fields):
         vals = super(Task, self).default_get(default_fields)
 
-        days = list(DAYS.keys())
-        week_start = fields.Datetime.today().weekday()
-
-        if all(d in default_fields for d in days):
-            vals[days[week_start]] = True
-        if 'repeat_day' in default_fields:
-            vals['repeat_day'] = str(fields.Datetime.today().day)
-        if 'repeat_month' in default_fields:
-            vals['repeat_month'] = self._fields.get('repeat_month').selection[fields.Datetime.today().month - 1][0]
         if 'repeat_until' in default_fields:
             vals['repeat_until'] = fields.Date.today() + timedelta(days=7)
-        if 'repeat_weekday' in default_fields:
-            vals['repeat_weekday'] = self._fields.get('repeat_weekday').selection[week_start][0]
 
         if 'partner_id' in vals and not vals['partner_id']:
             # if the default_partner_id=False or no default_partner_id then we search the partner based on the project and parent
@@ -2043,7 +1916,6 @@ class Task(models.Model):
         if is_portal_user:
             self.check_access_rights('create')
         default_stage = dict()
-        recurrences = self.env['project.task.recurrence']
         for vals in vals_list:
             if not vals.get('name') and vals.get('display_name'):
                 vals['name'] = vals['display_name']
@@ -2085,10 +1957,8 @@ class Task(models.Model):
             rec_fields = vals.keys() & self._get_recurrence_fields()
             if rec_fields and vals.get('recurring_task') is True:
                 rec_values = {rec_field: vals[rec_field] for rec_field in rec_fields}
-                rec_values['next_recurrence_date'] = fields.Datetime.today()
                 recurrence = self.env['project.task.recurrence'].create(rec_values)
                 vals['recurrence_id'] = recurrence.id
-                recurrences += recurrence
         # The sudo is required for a portal user as the record creation
         # requires the read access on other models, as mail.template
         # in order to compute the field tracking
@@ -2119,8 +1989,6 @@ class Task(models.Model):
                 task.message_subscribe(follower.partner_id.ids, follower.subtype_ids.ids)
             if current_partner not in task.message_partner_ids:
                 task.message_subscribe(current_partner.ids)
-        for recurrence in recurrences:
-            recurrence._create_task(task_from=recurrence.task_ids[-1])
         return tasks
 
     def write(self, vals):
@@ -2151,36 +2019,23 @@ class Task(models.Model):
 
         # recurrence fields
         rec_fields = vals.keys() & self._get_recurrence_fields()
-        task_for_recurrence = {}
         if rec_fields:
             rec_values = {rec_field: vals[rec_field] for rec_field in rec_fields}
             for task in self:
                 if task.recurrence_id:
                     task.recurrence_id.write(rec_values)
                 elif vals.get('recurring_task'):
-                    rec_values['next_recurrence_date'] = fields.Datetime.today()
                     recurrence = self.env['project.task.recurrence'].create(rec_values)
                     task.recurrence_id = recurrence.id
-                    task_for_recurrence[recurrence] = task
 
         if 'recurring_task' in vals and not vals.get('recurring_task'):
             self.recurrence_id.unlink()
 
-        tasks = self
-        recurrence_update = vals.pop('recurrence_update', 'this')
-        if recurrence_update == 'future':
-            for task in self:
-                ancestor_id = task
-                while ancestor_id.parent_id:
-                    ancestor_id = ancestor_id.parent_id
-                recurrent_task = ancestor_id if ancestor_id.recurring_task else task
-                task_for_recurrence[recurrent_task.recurrence_id] = task
-
         # The sudo is required for a portal user as the record update
         # requires the write access on others models, as rating.rating
         # in order to keep the same name than the task.
         if portal_can_write:
-            tasks = tasks.sudo()
+            self = self.sudo()
 
         # Track user_ids to send assignment notifications
         old_user_ids = {t: t.user_ids for t in self}
@@ -2188,10 +2043,10 @@ class Task(models.Model):
         if "personal_stage_type_id" in vals and not vals['personal_stage_type_id']:
             del vals['personal_stage_type_id']
 
-        result = super(Task, tasks).write(vals)
+        result = super().write(vals)
 
         if 'user_ids' in vals:
-            tasks._populate_missing_personal_stages()
+            self._populate_missing_personal_stages()
 
         # user_ids change: update date_assign
         if 'user_ids' in vals:
@@ -2203,7 +2058,7 @@ class Task(models.Model):
 
         # rating on stage
         if 'stage_id' in vals and vals.get('stage_id'):
-            tasks.filtered(lambda x: x.project_id.rating_active and x.project_id.rating_status == 'stage')._send_task_rating_mail(force_send=True)
+            self.filtered(lambda x: x.project_id.rating_active and x.project_id.rating_status == 'stage')._send_task_rating_mail(force_send=True)
         for task in self:
             if task.display_project_id != task.project_id and not task.parent_id:
                 # We must make the display_project_id follow the project_id if no parent_id set
@@ -2219,10 +2074,15 @@ class Task(models.Model):
                 task.date_last_stage_update = now
 
         self._task_message_auto_subscribe_notify({task: task.user_ids - old_user_ids[task] - self.env.user for task in self})
-        for recurrence, task in task_for_recurrence.items():
-            recurrence._create_task(task_from=task)
         return result
 
+    def unlink(self):
+        last_task_id_per_recurrence_id = self.recurrence_id._get_last_task_id_per_recurrence_id()
+        for task in self:
+            if task.id == last_task_id_per_recurrence_id.get(task.recurrence_id.id):
+                task.recurrence_id.unlink()
+        return super().unlink()
+
     def unlink_task_and_subtasks_recursively(self):
         childs = self.with_context(active_test=False).child_ids
         if childs:
@@ -2702,9 +2562,6 @@ class Task(models.Model):
         self.recurrence_id.task_ids.recurring_task = False
         self.recurrence_id.unlink()
 
-    def action_unlink_task_from_recurrence(self):
-        self.recurrence_template_id.unlink_task_and_subtasks_recursively()
-
     # ---------------------------------------------------
     # Rating business
     # ---------------------------------------------------

--- a/addons/project/models/project_task_recurrence.py
+++ b/addons/project/models/project_task_recurrence.py
@@ -1,53 +1,16 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import _, api, fields, models
+from odoo import _, api, fields, models, Command
 from odoo.exceptions import ValidationError
 
-from calendar import monthrange
 from dateutil.relativedelta import relativedelta
-from dateutil.rrule import rrule, rruleset, DAILY, WEEKLY, MONTHLY, YEARLY, MO, TU, WE, TH, FR, SA, SU
-
-MONTHS = {
-    'january': 31,
-    'february': 28,
-    'march': 31,
-    'april': 30,
-    'may': 31,
-    'june': 30,
-    'july': 31,
-    'august': 31,
-    'september': 30,
-    'october': 31,
-    'november': 30,
-    'december': 31,
-}
-
-DAYS = {
-    'mon': MO,
-    'tue': TU,
-    'wed': WE,
-    'thu': TH,
-    'fri': FR,
-    'sat': SA,
-    'sun': SU,
-}
-
-WEEKS = {
-    'first': 1,
-    'second': 2,
-    'third': 3,
-    'last': 4,
-}
 
 class ProjectTaskRecurrence(models.Model):
     _name = 'project.task.recurrence'
     _description = 'Task Recurrence'
 
-    task_template_id = fields.Many2one('project.task')
     task_ids = fields.One2many('project.task', 'recurrence_id', copy=False)
-    next_recurrence_date = fields.Date()
-    recurrence_left = fields.Integer(string="Number of Tasks Left to Create", copy=False)
 
     repeat_interval = fields.Integer(string='Repeat Every', default=1)
     repeat_unit = fields.Selection([
@@ -58,286 +21,91 @@ class ProjectTaskRecurrence(models.Model):
     ], default='week')
     repeat_type = fields.Selection([
         ('forever', 'Forever'),
-        ('until', 'End Date'),
-        ('after', 'Number of Repetitions'),
+        ('until', 'Until'),
     ], default="forever", string="Until")
     repeat_until = fields.Date(string="End Date")
-    repeat_number = fields.Integer(string="Repetitions")
-
-    repeat_on_month = fields.Selection([
-        ('date', 'Date of the Month'),
-        ('day', 'Day of the Month'),
-    ])
-
-    repeat_on_year = fields.Selection([
-        ('date', 'Date of the Year'),
-        ('day', 'Day of the Year'),
-    ])
-
-    mon = fields.Boolean(string="Mon")
-    tue = fields.Boolean(string="Tue")
-    wed = fields.Boolean(string="Wed")
-    thu = fields.Boolean(string="Thu")
-    fri = fields.Boolean(string="Fri")
-    sat = fields.Boolean(string="Sat")
-    sun = fields.Boolean(string="Sun")
-
-    repeat_day = fields.Selection([
-        (str(i), str(i)) for i in range(1, 32)
-    ])
-    repeat_week = fields.Selection([
-        ('first', 'First'),
-        ('second', 'Second'),
-        ('third', 'Third'),
-        ('last', 'Last'),
-    ])
-    repeat_weekday = fields.Selection([
-        ('mon', 'Monday'),
-        ('tue', 'Tuesday'),
-        ('wed', 'Wednesday'),
-        ('thu', 'Thursday'),
-        ('fri', 'Friday'),
-        ('sat', 'Saturday'),
-        ('sun', 'Sunday'),
-    ], string='Day Of The Week', readonly=False)
-    repeat_month = fields.Selection([
-        ('january', 'January'),
-        ('february', 'February'),
-        ('march', 'March'),
-        ('april', 'April'),
-        ('may', 'May'),
-        ('june', 'June'),
-        ('july', 'July'),
-        ('august', 'August'),
-        ('september', 'September'),
-        ('october', 'October'),
-        ('november', 'November'),
-        ('december', 'December'),
-    ])
-
-    @api.constrains('repeat_unit', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun')
-    def _check_recurrence_days(self):
-        for project in self.filtered(lambda p: p.repeat_unit == 'week'):
-            if not any([project.mon, project.tue, project.wed, project.thu, project.fri, project.sat, project.sun]):
-                raise ValidationError(_('You should select a least one day'))
 
     @api.constrains('repeat_interval')
     def _check_repeat_interval(self):
         if self.filtered(lambda t: t.repeat_interval <= 0):
             raise ValidationError(_('The interval should be greater than 0'))
 
-    @api.constrains('repeat_number', 'repeat_type')
-    def _check_repeat_number(self):
-        if self.filtered(lambda t: t.repeat_type == 'after' and t.repeat_number <= 0):
-            raise ValidationError(_('Should repeat at least once'))
-
     @api.constrains('repeat_type', 'repeat_until')
     def _check_repeat_until_date(self):
         today = fields.Date.today()
         if self.filtered(lambda t: t.repeat_type == 'until' and t.repeat_until < today):
             raise ValidationError(_('The end date should be in the future'))
 
-    @api.constrains('repeat_unit', 'repeat_on_month', 'repeat_day', 'repeat_type', 'repeat_until')
-    def _check_repeat_until_month(self):
-        if self.filtered(lambda r: r.repeat_type == 'until' and r.repeat_unit == 'month' and r.repeat_until and r.repeat_on_month == 'date'
-           and int(r.repeat_day) > r.repeat_until.day and monthrange(r.repeat_until.year, r.repeat_until.month)[1] != r.repeat_until.day):
-            raise ValidationError(_('The end date should be after the day of the month or the last day of the month'))
-
     @api.model
-    def _get_recurring_fields(self):
-        return ['message_partner_ids', 'company_id', 'description', 'displayed_image_id', 'email_cc',
-                'parent_id', 'partner_id', 'partner_phone', 'planned_hours',
-                'project_id', 'display_project_id', 'project_privacy_visibility', 'sequence', 'tag_ids', 'recurrence_id',
-                'name', 'recurring_task', 'analytic_account_id', 'user_ids']
-
-    def _get_weekdays(self, n=1):
-        self.ensure_one()
-        if self.repeat_unit == 'week':
-            return [fn(n) for day, fn in DAYS.items() if self[day]]
-        return [DAYS.get(self.repeat_weekday)(n)]
+    def _get_recurring_fields_to_copy(self):
+        return [
+            'analytic_account_id',
+            'company_id',
+            'description',
+            'displayed_image_id',
+            'email_cc',
+            'message_partner_ids',
+            'name',
+            'parent_id',
+            'partner_id',
+            'partner_phone',
+            'planned_hours',
+            'project_id',
+            'display_project_id',
+            'project_privacy_visibility',
+            'recurrence_id',
+            'recurring_task',
+            'sequence',
+            'tag_ids',
+            'user_ids',
+        ]
 
     @api.model
-    def _get_next_recurring_dates(self, date_start, repeat_interval, repeat_unit, repeat_type, repeat_until, repeat_on_month, repeat_on_year, weekdays, repeat_day, repeat_week, repeat_month, **kwargs):
-        count = kwargs.get('count', 1)
-        rrule_kwargs = {'interval': repeat_interval or 1, 'dtstart': date_start}
-        repeat_day = int(repeat_day)
-        start = False
-        dates = []
-        if repeat_type == 'until':
-            rrule_kwargs['until'] = repeat_until if repeat_until else fields.Date.today()
-        else:
-            rrule_kwargs['count'] = count
-
-        if repeat_unit == 'week'\
-            or (repeat_unit == 'month' and repeat_on_month == 'day')\
-            or (repeat_unit == 'year' and repeat_on_year == 'day'):
-            rrule_kwargs['byweekday'] = weekdays
+    def _get_recurring_fields_to_postpone(self):
+        return [
+            'date_deadline',
+        ]
+
+    def _get_last_task_id_per_recurrence_id(self):
+        return {} if not self else {
+            record['recurrence_id'][0]: record['max_id']
+            for record in self.env['project.task'].sudo()._read_group(
+                [('recurrence_id', 'in', self.ids)],
+                ['max_id:max(id)'],
+                ['recurrence_id'],
+            )
+        }
 
-        if repeat_unit == 'day':
-            rrule_kwargs['freq'] = DAILY
-        elif repeat_unit == 'month':
-            rrule_kwargs['freq'] = MONTHLY
-            if repeat_on_month == 'date':
-                start = date_start - relativedelta(days=1)
-                start = start.replace(day=min(repeat_day, monthrange(start.year, start.month)[1]))
-                if start < date_start:
-                    # Ensure the next recurrence is in the future
-                    start += relativedelta(months=repeat_interval)
-                    start = start.replace(day=min(repeat_day, monthrange(start.year, start.month)[1]))
-                can_generate_date = (lambda: start <= repeat_until) if repeat_type == 'until' else (lambda: len(dates) < count)
-                while can_generate_date():
-                    dates.append(start)
-                    start += relativedelta(months=repeat_interval)
-                    start = start.replace(day=min(repeat_day, monthrange(start.year, start.month)[1]))
-                return dates
-        elif repeat_unit == 'year':
-            rrule_kwargs['freq'] = YEARLY
-            month = list(MONTHS.keys()).index(repeat_month) + 1 if repeat_month else date_start.month
-            repeat_month = repeat_month or list(MONTHS.keys())[month - 1]
-            rrule_kwargs['bymonth'] = month
-            if repeat_on_year == 'date':
-                rrule_kwargs['bymonthday'] = min(repeat_day, MONTHS.get(repeat_month))
-                rrule_kwargs['bymonth'] = month
-        else:
-            rrule_kwargs['freq'] = WEEKLY
+    def _get_recurrence_delta(self):
+        return relativedelta(**{
+            f"{self.repeat_unit}s": self.repeat_interval
+        })
 
-        rules = rrule(**rrule_kwargs)
-        return list(rules) if rules else []
+    def _create_next_occurrence(self, occurrence_from):
+        self.ensure_one()
+        if occurrence_from.allow_recurring_tasks:
+            self.env['project.task'].sudo().create(
+                self._create_next_occurrence_values(occurrence_from)
+            )
 
-    def _new_task_values(self, task_from, to_template=False):
+    def _create_next_occurrence_values(self, occurrence_from):
         self.ensure_one()
-        fields_to_copy = self._get_recurring_fields()
-        task_values = task_from.read(fields_to_copy).pop()
+        fields_to_copy = occurrence_from.read(self._get_recurring_fields_to_copy()).pop()
         create_values = {
-            field: value[0] if isinstance(value, tuple) else value for field, value in task_values.items()
+            field: value[0] if isinstance(value, tuple) else value
+            for field, value in fields_to_copy.items()
         }
-        create_values['stage_id'] = task_from.project_id.type_ids[0].id if task_from.project_id.type_ids\
-                               else task_from.stage_id.id
-        create_values['date_deadline'] = self._get_postponed_date(task_from, 'date_deadline', to_template=to_template)
-        create_values['active'] = not to_template
-        create_values['recurrence_template_id'] = not to_template and task_from.id
-        return create_values
-
-    def _create_subtasks(self, task_from, task_to, to_template=False):
-        self.ensure_one()
-        childs_from = task_from.with_context(active_test=False).child_ids
-        if to_template:
-            childs_to = task_from.recurrence_template_id.with_context(active_test=False).child_ids
-            childs_from_to_create = childs_from.filtered(lambda t: not t.recurrence_template_id)
-            childs_to_to_delete = childs_to.filtered(lambda t: t not in childs_from.recurrence_template_id)
-            childs_to_to_delete.unlink_task_and_subtasks_recursively()
-            (childs_to - childs_to_to_delete).parent_id = task_to
-        else:
-            childs_from_to_create = childs_from
-        # copy the subtasks of the original task
-        for child_from in childs_from_to_create:
-            child_values = self._new_task_values(child_from, to_template=to_template)
-            child_values['parent_id'] = task_to.id
-            child_to = self.env['project.task'].sudo().create(child_values)
-            if to_template:
-                child_from.recurrence_template_id = child_to
-            if child_from.with_context(active_test=False).child_ids:
-                self._create_subtasks(child_from, child_to, to_template=to_template)
-
-    def _create_task(self, task_from=False):
-        self.ensure_one()
-        to_template = bool(task_from)
-        task_from = task_from or self.task_template_id
-        create_values = self._new_task_values(task_from, to_template=to_template)
-        task_to = self.env['project.task'].sudo().create(create_values)
-        self._create_subtasks(task_from, task_to, to_template=to_template)
-        if to_template:
-            task_from.recurrence_template_id.unlink()
-            task_from.recurrence_template_id = task_to
-            if task_from.parent_id:
-                task_to.parent_id = task_from.parent_id.recurrence_template_id
-            else:
-                self.task_template_id.unlink_task_and_subtasks_recursively()
-                self.task_template_id = task_to
-
-    def _set_next_recurrence_date(self, date_start=None):
-        today = fields.Date.today()
-        if not date_start:
-            date_start = today + relativedelta(days=1)
-        for recurrence in self.filtered(
-            lambda r:
-            r.repeat_type == 'after' and r.recurrence_left >= 0
-            or r.repeat_type == 'until' and r.repeat_until >= today
-            or r.repeat_type == 'forever'
-        ):
-            if recurrence.repeat_type == 'after' and recurrence.recurrence_left == 0:
-                recurrence.next_recurrence_date = False
-            else:
-                next_date = self._get_next_recurring_dates(date_start, recurrence.repeat_interval, recurrence.repeat_unit, recurrence.repeat_type, recurrence.repeat_until, recurrence.repeat_on_month, recurrence.repeat_on_year, recurrence._get_weekdays(), recurrence.repeat_day, recurrence.repeat_week, recurrence.repeat_month, count=1)
-                recurrence.next_recurrence_date = next_date[0] if next_date else False
-
-    @api.model
-    def _cron_create_recurring_tasks(self):
-        if not self.env.user.has_group('project.group_project_recurring_tasks'):
-            return
-        today = fields.Date.today()
-        recurring_today = self.search([('next_recurrence_date', '<=', today)])
-        recurrence_ids = []  # to set the next recurrence date
-        for recurrence in recurring_today:
-            if not recurrence.task_template_id.project_id.allow_recurring_tasks:
-                continue
-            recurrence_ids.append(recurrence.id)
-            recurrence._create_task()
-            if recurrence.repeat_type == 'after':
-                recurrence.recurrence_left -= 1
-        self.browse(recurrence_ids)._set_next_recurrence_date()
-
-    @api.model_create_multi
-    def create(self, vals_list):
-        for vals in vals_list:
-            if vals.get('repeat_number'):
-                vals['recurrence_left'] = vals.get('repeat_number')
-        recurrences = super().create(vals_list)
-        recurrences._set_next_recurrence_date()
-        return recurrences
 
-    def write(self, vals):
-        if vals.get('repeat_number'):
-            vals['recurrence_left'] = vals.get('repeat_number')
-
-        res = super(ProjectTaskRecurrence, self).write(vals)
-
-        if 'next_recurrence_date' not in vals:
-            self._set_next_recurrence_date()
-        return res
-
-    def unlink(self):
-        self.task_template_id.unlink_task_and_subtasks_recursively()
-        return super().unlink()
-
-    def _get_postponed_date(self, task_from, field, to_template=False):
-        # We cannot just apply the recurrence's repeat interval to the task's deadline because,
-        # if the recurrence is created later than the task, the planned date won't be set as expected.
-        # Instead, we'll apply the delta create-deadline of the previous task to the new one's create date.
-
-        # Apply the repeat interval to the create date :                # ~ the repeat interval
-        #   p1~p2~p3   ?  ?                                             # / the expected delta create-deadline
-        #  /          /  /     => p2 should be set at ?                 # c the create dates
-        # c1---------c2~c3                                              # p the deadline
-        #            ^ Recurrence initiation
-
-        # Apply the previous delta create-deadline to the create date :
-        #   p1         p2 p3
-        #  /          /  /     => p2 is set as expected
-        # c1---------c2~c3
-        #            ^ Recurrence initiation
-        self.ensure_one()
-        if not task_from[field]:
-            return False
-        field_is_datetime = task_from._fields[field].type == 'datetime'
-        datetime = task_from[field]
-        date = datetime.date() if field_is_datetime else datetime
-        delta = date - task_from.create_date.date()
-        if to_template:
-            next_recurrence_date = (self.task_template_id.create_date or self.create_date).date()
-        else:
-            next_recurrence_date = self.next_recurrence_date or fields.Date.today()
-        postponed_date = next_recurrence_date + relativedelta(days=delta.days)
-        if field_is_datetime:
-            postponed_date += relativedelta(hour=datetime.hour, minute=datetime.minute, second=datetime.second)
-        return postponed_date
+        fields_to_postpone = occurrence_from.read(self._get_recurring_fields_to_postpone()).pop()
+        fields_to_postpone.pop('id', None)
+        create_values.update({
+            field: value and value + self._get_recurrence_delta()
+            for field, value in fields_to_postpone.items()
+        })
+
+        create_values['stage_id'] = occurrence_from.project_id.type_ids[0].id if occurrence_from.project_id.type_ids else occurrence_from.stage_id.id
+        if occurrence_from.allow_subtasks:
+            create_values['child_ids'] = [
+                Command.create(self._create_next_occurrence_values(child)) for child in occurrence_from.with_context(active_test=False).child_ids
+            ]
+        return create_values
