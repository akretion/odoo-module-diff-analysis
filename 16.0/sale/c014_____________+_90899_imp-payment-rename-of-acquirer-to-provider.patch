PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Structural Changes: 2
Total Changes: 62

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale/models/__init__.py
+++ b/addons/sale/models/__init__.py
@@ -5,7 +5,7 @@ from . import analytic
 from . import account_move
 from . import account_move_line
 from . import crm_team
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_transaction
 from . import product_product
 from . import product_template

--- a/addons/sale/models/payment_acquirer.py
+++ b/addons/sale/models/payment_provider.py
@@ -4,8 +4,8 @@
 from odoo import fields, models
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
     so_reference_type = fields.Selection(string='Communication',
         selection=[

--- a/addons/sale/models/payment_transaction.py
+++ b/addons/sale/models/payment_transaction.py
@@ -19,10 +19,10 @@ class PaymentTransaction(models.Model):
 
     def _compute_sale_order_reference(self, order):
         self.ensure_one()
-        if self.acquirer_id.so_reference_type == 'so_name':
+        if self.provider_id.so_reference_type == 'so_name':
             return order.name
         else:
-            # self.acquirer_id.so_reference_type == 'partner'
+            # self.provider_id.so_reference_type == 'partner'
             identification_number = order.partner_id.id
             return '%s/%s' % ('CUST', str(identification_number % 97).rjust(2, '0'))
 
@@ -39,7 +39,7 @@ class PaymentTransaction(models.Model):
             sales_orders = record.sale_order_ids.filtered(lambda so: so.state in ['draft', 'sent'])
             sales_orders.filtered(lambda so: so.state == 'draft').with_context(tracking_disable=True).write({'state': 'sent'})
 
-            if record.acquirer_id.provider == 'custom':
+            if record.provider_id.code == 'custom':
                 for so in record.sale_order_ids:
                     so.reference = record._compute_sale_order_reference(so)
             # send order confirmation mail
@@ -72,7 +72,7 @@ class PaymentTransaction(models.Model):
                         _logger.warning(
                             '<%(provider)s> transaction AMOUNT MISMATCH for order %(so_name)s '
                             '(ID %(so_id)s): expected %(so_amount)s, got %(tx_amount)s', {
-                                'provider': tx.provider,
+                                'provider': tx.provider_code,
                                 'so_name': quotation.name,
                                 'so_id': quotation.id,
                                 'so_amount': format_amount(
@@ -173,14 +173,14 @@ class PaymentTransaction(models.Model):
                 tx.invoice_ids = [Command.set(invoices.ids)]
 
     @api.model
-    def _compute_reference_prefix(self, provider, separator, **values):
+    def _compute_reference_prefix(self, provider_code, separator, **values):
         """ Override of payment to compute the reference prefix based on Sales-specific values.
 
         If the `values` parameter has an entry with 'sale_order_ids' as key and a list of (4, id, O)
         or (6, 0, ids) X2M command as value, the prefix is computed based on the sales order name(s)
         Otherwise, the computation is delegated to the super method.
 
-        :param str provider: The provider of the acquirer handling the transaction
+        :param str provider_code: The code of the provider handling the transaction
         :param str separator: The custom separator used to separate data references
         :param dict values: The transaction values used to compute the reference prefix. It should
                             have the structure {'sale_order_ids': [(X2M command), ...], ...}.
@@ -194,7 +194,7 @@ class PaymentTransaction(models.Model):
             orders = self.env['sale.order'].browse(order_ids).exists()
             if len(orders) == len(order_ids):  # All ids are valid
                 return separator.join(orders.mapped('name'))
-        return super()._compute_reference_prefix(provider, separator, **values)
+        return super()._compute_reference_prefix(provider_code, separator, **values)
 
     def action_view_sales_orders(self):
         action = {

--- a/addons/sale/models/res_company.py
+++ b/addons/sale/models/res_company.py
@@ -22,7 +22,7 @@ class ResCompany(models.Model):
         ('digital_signature', 'Sign online'),
         ('paypal', 'PayPal'),
         ('stripe', 'Stripe'),
-        ('other', 'Pay with another payment acquirer'),
+        ('other', 'Pay with another payment provider'),
         ('manual', 'Manual Payment'),
     ], string="Sale onboarding selected payment method")
 
@@ -32,10 +32,10 @@ class ResCompany(models.Model):
         self.env.company.sale_quotation_onboarding_state = 'closed'
 
     @api.model
-    def action_open_sale_onboarding_payment_acquirer(self):
+    def action_open_sale_onboarding_payment_provider(self):
         """ Called by onboarding panel above the quotation list."""
         self.env.company.get_chart_of_accounts_or_fail()
-        action = self.env["ir.actions.actions"]._for_xml_id("sale.action_open_sale_onboarding_payment_acquirer_wizard")
+        action = self.env["ir.actions.actions"]._for_xml_id("sale.action_open_sale_payment_provider_onboarding_wizard")
         return action
 
     def _mark_payment_onboarding_step_as_done(self):

--- a/addons/sale/models/res_config_settings.py
+++ b/addons/sale/models/res_config_settings.py
@@ -27,9 +27,9 @@ class ResConfigSettings(models.TransientModel):
     automatic_invoice = fields.Boolean(
         string="Automatic Invoice",
         help="The invoice is generated automatically and available in the customer portal when the "
-             "transaction is confirmed by the payment acquirer.\nThe invoice is marked as paid and "
+             "transaction is confirmed by the payment provider.\nThe invoice is marked as paid and "
              "the payment is registered in the payment journal defined in the configuration of the "
-             "payment acquirer.\nThis mode is advised if you issue the final invoice at the order "
+             "payment provider.\nThis mode is advised if you issue the final invoice at the order "
              "and not after the delivery.",
         config_parameter='sale.automatic_invoice',
     )

--- a/addons/sale/models/sale_order.py
+++ b/addons/sale/models/sale_order.py
@@ -843,7 +843,7 @@ class SaleOrder(models.Model):
     def action_done(self):
         for order in self:
             tx = order.sudo().transaction_ids._get_last()
-            if tx and tx.state == 'pending' and tx.acquirer_id.provider == 'transfer':
+            if tx and tx.state == 'pending' and tx.provider_id.code == 'transfer':
                 tx._set_done()
                 tx.write({'is_post_processed': True})
         self.write({'state': 'done'})
@@ -1270,13 +1270,13 @@ class SaleOrder(models.Model):
     def payment_action_capture(self):
         """ Capture all transactions linked to this sale order. """
         payment_utils.check_rights_on_recordset(self)
-        # In sudo mode because we need to be able to read on acquirer fields.
+        # In sudo mode because we need to be able to read on provider fields.
         self.authorized_transaction_ids.sudo().action_capture()
 
     def payment_action_void(self):
         """ Void all transactions linked to this sale order. """
         payment_utils.check_rights_on_recordset(self)
-        # In sudo mode because we need to be able to read on acquirer fields.
+        # In sudo mode because we need to be able to read on provider fields.
         self.authorized_transaction_ids.sudo().action_void()
 
     def get_portal_last_transaction(self):
