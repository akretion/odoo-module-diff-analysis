PR: https://github.com/odoo/odoo/pull/69819

From: c53724ebc35150d9111e165ef5089beb26bedc29
From: Leonardo Pavan Rocha
Date: 2021-06-01 14:36:23

Breaking data model changes score: 3.600000000000001, change matches:
-    _inherit = ['hr.employee.base', 'mail.thread', 'mail.activity.mixin', 'resource.mixin', 'image.mixin']
-    image_1920 = fields.Image("Original Image", compute='_compute_image', compute_sudo=True)
-    image_1024 = fields.Image("Image 1024", compute='_compute_image', compute_sudo=True)
-    image_512 = fields.Image("Image 512", compute='_compute_image', compute_sudo=True)
-    image_256 = fields.Image("Image 256", compute='_compute_image', compute_sudo=True)
-    image_128 = fields.Image("Image 128", compute='_compute_image', compute_sudo=True)
+    image_1024 = fields.Image("Image 1024", related='employee_id.image_1024', compute_sudo=True)
+    image_512 = fields.Image("Image 512", related='employee_id.image_512', compute_sudo=True)
+    image_256 = fields.Image("Image 256", related='employee_id.image_256', compute_sudo=True)
+    image_128 = fields.Image("Image 128", related='employee_id.image_128', compute_sudo=True)

Total Changes: 69

[IMP] *: adds generic user avatar

Description of the issue/feature this PR addresses:
It is currently quite difficult to differentiate users. Most of the time, people
don't take the time to upload an actual avatar so everybody looks the same. This
PR generates a custom avatar with the users initials and random color to
differentiate them. For res.users, res.partner and hr.employee, image fields now
hold the binary image and avatar are used to show the image or svg.

Current behavior before PR:
Avatar had only random colors and was being saved in database, being inefficient

Desired behavior after PR is merged:
A new mixin defines image fields and in case no image is set, it generates an
SVG image with the user's initials and random color.

closes odoo/odoo#69819

Task: 2404630
Related: odoo/enterprise#18199
Signed-off-by: SÃ©bastien Theys (seb) <seb@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr/models/hr_employee.py
+++ b/addons/hr/models/hr_employee.py
@@ -10,9 +10,8 @@ from dateutil.relativedelta import relativedelta
 from odoo import api, fields, models, _
 from odoo.osv.query import Query
 from odoo.exceptions import ValidationError, AccessError
-from odoo.modules.module import get_module_resource
-from odoo.tools.misc import format_date
 from odoo.osv import expression
+from odoo.tools.misc import format_date
 
 
 class HrEmployeePrivate(models.Model):
@@ -26,7 +25,7 @@ class HrEmployeePrivate(models.Model):
     _name = "hr.employee"
     _description = "Employee"
     _order = 'name'
-    _inherit = ['hr.employee.base', 'mail.thread', 'mail.activity.mixin', 'resource.mixin', 'image.mixin']
+    _inherit = ['hr.employee.base', 'mail.thread', 'mail.activity.mixin', 'resource.mixin', 'avatar.mixin']
     _mail_post_access = 'read'
 
     # resource and user
@@ -100,7 +99,6 @@ class HrEmployeePrivate(models.Model):
     km_home_work = fields.Integer(string="Home-Work Distance", groups="hr.group_hr_user", tracking=True)
 
     job_id = fields.Many2one(tracking=True)
-    image_1920 = fields.Image()
     phone = fields.Char(related='address_home_id.phone', related_sudo=False, readonly=False, string="Private Phone", groups="hr.group_hr_user")
     # employee in company
     child_ids = fields.One2many('hr.employee', 'parent_id', string='Direct subordinates')
@@ -125,11 +123,35 @@ class HrEmployeePrivate(models.Model):
         ('user_uniq', 'unique (user_id, company_id)', "A user cannot be linked to multiple employees in the same company.")
     ]
 
-    def _get_placeholder_filename(self, field=None):
-        image_fields = ['image_%s' % size for size in [1920, 1024, 512, 256, 128]]
-        if field in image_fields:
-            return 'hr/static/src/img/default_image.png'
-        return super()._get_placeholder_filename(field=field)
+    @api.depends('name', 'user_id.avatar_1920', 'image_1920')
+    def _compute_avatar_1920(self):
+        super()._compute_avatar_1920()
+
+    @api.depends('name', 'user_id.avatar_1024', 'image_1024')
+    def _compute_avatar_1024(self):
+        super()._compute_avatar_1024()
+
+    @api.depends('name', 'user_id.avatar_512', 'image_512')
+    def _compute_avatar_512(self):
+        super()._compute_avatar_512()
+
+    @api.depends('name', 'user_id.avatar_256', 'image_256')
+    def _compute_avatar_256(self):
+        super()._compute_avatar_256()
+
+    @api.depends('name', 'user_id.avatar_128', 'image_128')
+    def _compute_avatar_128(self):
+        super()._compute_avatar_128()
+
+    def _compute_avatar(self, avatar_field, image_field):
+        for employee in self:
+            avatar = employee[image_field]
+            if not avatar:
+                if employee.user_id:
+                    avatar = employee.user_id[avatar_field]
+                else:
+                    avatar = employee._avatar_get_placeholder()
+            employee[avatar_field] = avatar
 
     def name_get(self):
         if self.check_access_rights('read', raise_exception=False):

--- a/addons/hr/models/hr_employee_public.py
+++ b/addons/hr/models/hr_employee_public.py
@@ -32,26 +32,29 @@ class HrEmployeePublic(models.Model):
     color = fields.Integer(readonly=True)
     employee_type = fields.Selection(readonly=True)
 
+    employee_id = fields.Many2one('hr.employee', 'Employee', compute="_compute_employee_id", search="_search_employee_id", compute_sudo=True)
     # hr.employee.public specific fields
     child_ids = fields.One2many('hr.employee.public', 'parent_id', string='Direct subordinates', readonly=True)
-    image_1920 = fields.Image("Original Image", compute='_compute_image', compute_sudo=True)
-    image_1024 = fields.Image("Image 1024", compute='_compute_image', compute_sudo=True)
-    image_512 = fields.Image("Image 512", compute='_compute_image', compute_sudo=True)
-    image_256 = fields.Image("Image 256", compute='_compute_image', compute_sudo=True)
-    image_128 = fields.Image("Image 128", compute='_compute_image', compute_sudo=True)
+    image_1920 = fields.Image("Image", related='employee_id.image_1920', compute_sudo=True)
+    image_1024 = fields.Image("Image 1024", related='employee_id.image_1024', compute_sudo=True)
+    image_512 = fields.Image("Image 512", related='employee_id.image_512', compute_sudo=True)
+    image_256 = fields.Image("Image 256", related='employee_id.image_256', compute_sudo=True)
+    image_128 = fields.Image("Image 128", related='employee_id.image_128', compute_sudo=True)
+    avatar_1920 = fields.Image("Avatar", related='employee_id.avatar_1920', compute_sudo=True)
+    avatar_1024 = fields.Image("Avatar 1024", related='employee_id.avatar_1024', compute_sudo=True)
+    avatar_512 = fields.Image("Avatar 512", related='employee_id.avatar_512', compute_sudo=True)
+    avatar_256 = fields.Image("Avatar 256", related='employee_id.avatar_256', compute_sudo=True)
+    avatar_128 = fields.Image("Avatar 128", related='employee_id.avatar_128', compute_sudo=True)
     parent_id = fields.Many2one('hr.employee.public', 'Manager', readonly=True)
     coach_id = fields.Many2one('hr.employee.public', 'Coach', readonly=True)
     user_partner_id = fields.Many2one(related='user_id.partner_id', related_sudo=False, string="User's partner")
 
-    def _compute_image(self):
+    def _search_employee_id(self, operator, value):
+        return [('id', operator, value)]
+
+    def _compute_employee_id(self):
         for employee in self:
-            # We have to be in sudo to have access to the images
-            employee_id = self.sudo().env['hr.employee'].browse(employee.id)
-            employee.image_1920 = employee_id.image_1920
-            employee.image_1024 = employee_id.image_1024
-            employee.image_512 = employee_id.image_512
-            employee.image_256 = employee_id.image_256
-            employee.image_128 = employee_id.image_128
+            employee.employee_id = self.env['hr.employee'].browse(employee.id)
 
     @api.model
     def _get_fields(self):
