PR: https://github.com/odoo/odoo/pull/63093

From: 2520bfe625dde6869ad80b3e81d00827f533c9da
From: Thibault DelavallÃ©e
Date: 2021-03-24 11:18:47

Breaking data model changes score: 2, change matches:
-    mail_sent = fields.Boolean('Mail Sent on Event', copy=False)
-    done = fields.Boolean('Sent', compute='_compute_done', store=True, copy=False)

Total Changes: 124

[REF] event: manually update completion of mail schedulers

Purpose of this commit is to remove the "done" field computation. Indeed
it is based on either

  * mail_sent field if scheduler is global to the event (before or after
    event). This computation is light as this field changes only once
    when emails are scheduled and sent;
  * status of event registrations compared to all sent communication on
    those registrations. This is costly as adding a new registration changes

In this commit we therefore

  * rename ``done`` to ``mail_done`` to ease grep and understanding;
  * remove ``mail_sent`` as it is integrated within ``done``;
  * manually update ``mail_done`` when updating schedulers instead of doing
    it through a compute method;

Some code cleaning is performed to make it clearer and easier to understand.

LINKS

Task ID-2414658
COM PR odoo/odoo#63093
UPG PR odoo/upgrade#2014

================================= pseudo patch: =================================

--- a/addons/event/models/event_event.py
+++ b/addons/event/models/event_event.py
@@ -398,7 +398,7 @@ class EventEvent(models.Model):
 
             # lines to keep: those with already sent emails or registrations
             mails_to_remove = event.event_mail_ids.filtered(
-                lambda mail: not(mail._origin.mail_sent or mail._origin.mail_registration_ids)
+                lambda mail: not(mail._origin.mail_done) and not(mail._origin.mail_registration_ids)
             )
             command = [Command.unlink(mail.id) for mail in mails_to_remove]
             if event.event_type_id.use_mail_schedule:

--- a/addons/event/models/event_mail.py
+++ b/addons/event/models/event_mail.py
@@ -82,23 +82,17 @@ class EventMailScheduler(models.Model):
         'mail.template', string='Email Template',
         domain=[('model', '=', 'event.registration')], ondelete='restrict',
         help='This field contains the template of the mail that will be automatically sent')
-    scheduled_date = fields.Datetime('Scheduled Sent Mail', compute='_compute_scheduled_date', store=True)
-    mail_registration_ids = fields.One2many('event.mail.registration', 'scheduler_id')
-    mail_sent = fields.Boolean('Mail Sent on Event', copy=False)
-    done = fields.Boolean('Sent', compute='_compute_done', store=True, copy=False)
+    scheduled_date = fields.Datetime('Schedule Date', compute='_compute_scheduled_date', store=True)
+    # contact and status
+    mail_registration_ids = fields.One2many(
+        'event.mail.registration', 'scheduler_id',
+        help='Communication related to event registrations')
+    mail_done = fields.Boolean("Sent", copy=False, readonly=True)
     mail_state = fields.Selection(
         [('running', 'Running'), ('scheduled', 'Scheduled'), ('sent', 'Sent')],
         string='Global communication Status', compute='_compute_mail_state')
     mail_count_done = fields.Integer('# Sent', copy=False, readonly=True)
 
-    @api.depends('mail_sent', 'interval_type', 'event_id.registration_ids', 'mail_registration_ids.mail_sent')
-    def _compute_done(self):
-        for mail in self:
-            if mail.interval_type in ['before_event', 'after_event']:
-                mail.done = mail.mail_sent
-            else:
-                mail.done = len(mail.mail_registration_ids) == len(mail.event_id.registration_ids) and all(mail.mail_sent for mail in mail.mail_registration_ids)
-
     @api.depends('event_id.date_begin', 'event_id.date_end', 'interval_type', 'interval_unit', 'interval_nbr')
     def _compute_scheduled_date(self):
         for scheduler in self:
@@ -111,14 +105,14 @@ class EventMailScheduler(models.Model):
 
             scheduler.scheduled_date = date + _INTERVALS[scheduler.interval_unit](sign * scheduler.interval_nbr) if date else False
 
-    @api.depends('interval_type', 'scheduled_date', 'event_mail_sent')
+    @api.depends('interval_type', 'scheduled_date', 'mail_done')
     def _compute_mail_state(self):
         for scheduler in self:
             # registrations based
             if scheduler.interval_type == 'after_sub':
                 scheduler.mail_state = 'running'
             # global event based
-            elif scheduler.event_mail_sent:
+            elif scheduler.mail_done:
                 scheduler.mail_state = 'sent'
             elif scheduler.scheduled_date:
                 scheduler.mail_state = 'scheduled'
@@ -126,29 +120,48 @@ class EventMailScheduler(models.Model):
                 scheduler.mail_state = 'running'
 
     def execute(self):
-        for mail in self:
+        for scheduler in self:
             now = fields.Datetime.now()
-            if mail.interval_type == 'after_sub':
-                # update registration lines
-                lines = [
-                    (0, 0, {'registration_id': registration.id})
-                    for registration in (mail.event_id.registration_ids - mail.mapped('mail_registration_ids.registration_id'))
-                ]
-                if lines:
-                    mail.write({'mail_registration_ids': lines})
+            if scheduler.interval_type == 'after_sub':
+                new_registrations = scheduler.event_id.registration_ids.filtered_domain(
+                    [('state', 'not in', ('cancel', 'draft'))]
+                ) - scheduler.mail_registration_ids.registration_id
+                scheduler._create_missing_mail_registrations(new_registrations)
+
                 # execute scheduler on registrations
-                mail.mail_registration_ids.execute()
-                mail.mail_count_done = len(mail.mail_registration_ids.filtered(lambda reg: reg.mail_sent))
+                scheduler.mail_registration_ids.execute()
+                total_sent = len(scheduler.mail_registration_ids.filtered(lambda reg: reg.mail_sent))
+                scheduler.update({
+                    'mail_done': total_sent >= (scheduler.event_id.seats_reserved + scheduler.event_id.seats_used),
+                    'mail_count_done': total_sent,
+                })
             else:
-                # Do not send emails if the mailing was scheduled before the event but the event is over
-                if not mail.mail_sent and mail.scheduled_date <= now and mail.notification_type == 'mail' and \
-                        (mail.interval_type != 'before_event' or mail.event_id.date_end > now):
-                    mail.event_id.mail_attendees(mail.template_id.id)
-                    mail.write({'mail_sent': True})
-                    mail.mail_count_done = len(mail.event_id.registration_ids.filtered(lambda reg: reg.state != 'cancel'))
-
+                # before or after event -> one shot email
+                if scheduler.mail_done or scheduler.notification_type != 'mail':
+                    continue
+                # no template -> ill configured, skip and avoid crash
+                if not scheduler.template_id:
+                    continue
+                # do not send emails if the mailing was scheduled before the event but the event is over
+                if scheduler.scheduled_date <= now and (scheduler.interval_type != 'before_event' or scheduler.event_id.date_end > now):
+                    scheduler.event_id.mail_attendees(scheduler.template_id.id)
+                    scheduler.update({
+                        'mail_done': True,
+                        'mail_count_done': scheduler.event_id.seats_reserved + scheduler.event_id.seats_used,
+                    })
         return True
 
+    def _create_missing_mail_registrations(self, registrations):
+        new = []
+        for scheduler in self:
+            new += [{
+                'registration_id': registration.id,
+                'scheduler_id': scheduler.id,
+            } for registration in registrations]
+        if new:
+            return self.env['event.mail.registration'].create(new)
+        return self.env['event.mail.registration']
+
     @api.model
     def _warn_template_error(self, scheduler, exception):
         # We warn ~ once by hour ~ instead of every 10 min if the interval unit is more than 'hours'.
@@ -189,7 +202,17 @@ You receive this email because you are:
 
     @api.model
     def run(self, autocommit=False):
-        schedulers = self.search([('done', '=', False), ('scheduled_date', '<=', datetime.strftime(fields.datetime.now(), tools.DEFAULT_SERVER_DATETIME_FORMAT))])
+        """ Backward compatible method, notably if crons are not updated when
+        migrating for some reason. """
+        return self.schedule_communications(autocommit=autocommit)
+
+    @api.model
+    def schedule_communications(self, autocommit=False):
+        schedulers = self.search([
+            ('mail_done', '=', False),
+            ('scheduled_date', '<=', fields.Datetime.now())
+        ])
+
         for scheduler in schedulers:
             try:
                 with self.env.cr.savepoint():

--- a/addons/event/models/event_registration.py
+++ b/addons/event/models/event_registration.py
@@ -149,18 +149,25 @@ class EventRegistration(models.Model):
     @api.model_create_multi
     def create(self, vals_list):
         registrations = super(EventRegistration, self).create(vals_list)
+
+        # auto_confirm if possible; if not automatically confirmed, call mail schedulers in case
+        # some were created already open
         if registrations._check_auto_confirmation():
             registrations.sudo().action_confirm()
+        else:
+            registrations._update_mail_schedulers()
 
         return registrations
 
     def write(self, vals):
+        pre_draft = self.env['event.registration']
+        if vals.get('state') == 'open':
+            pre_draft = self.filtered(lambda registration: registration.state == 'draft')
+
         ret = super(EventRegistration, self).write(vals)
 
         if vals.get('state') == 'open':
-            # auto-trigger after_sub (on subscribe) mail schedulers, if needed
-            onsubscribe_schedulers = self.mapped('event_id.event_mail_ids').filtered(lambda s: s.interval_type == 'after_sub')
-            onsubscribe_schedulers.sudo().execute()
+            pre_draft._update_mail_schedulers()
 
         return ret
 
@@ -234,6 +241,26 @@ class EventRegistration(models.Model):
             'context': ctx,
         }
 
+    def _update_mail_schedulers(self):
+        """ Update schedulers to set them as running again, and cron to be called
+        as soon as possible. """
+        open_registrations = self.filtered(lambda registration: registration.state == 'open')
+        if not open_registrations:
+            return
+
+        onsubscribe_schedulers = self.env['event.mail'].sudo().search([
+            ('event_id', 'in', open_registrations.event_id.ids),
+            ('interval_type', '=', 'after_sub')
+        ])
+        if not onsubscribe_schedulers:
+            return
+
+        onsubscribe_schedulers.update({'mail_done': False})
+        # we could simply call _create_missing_mail_registrations and let cron do their job
+        # but it currently leads to several delays. We therefore call execute until
+        # cron triggers are correctly used
+        onsubscribe_schedulers.execute()
+
     # ------------------------------------------------------------
     # MAILING / GATEWAY
     # ------------------------------------------------------------
