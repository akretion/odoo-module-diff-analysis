PR: https://github.com/odoo/odoo/pull/75269

From: 3d10c7c70884993f1290a4fd430a1c52247a8420
From: William Braeckman
Date: 2021-10-28 15:27:36

Structural Changes: 4
Total Changes: 78

[IMP] project,*: improve project UX

* = hr_timesheet, sale_project, test_main_flows

Smaller changes:
 - Projects created on the fly (through `name_create`) will now come with a
   default `new` stage in order for them to not be empty.
 - Removed task auto assign upon creation besides in FSM's 'My tasks' menu.
 - Allow the reordering of projects without needing to group by
   anything.
 - Make `project.task`.`description` and `project.tags`.`name`
   translatable.
 - Disable the creation of records in the view when clicking on `Tasks
   in recurrence` stat button.
 - Track the planned date of the task in the chatter
 - Disable the creation of records in the view when clicking on
   'invoices' stat button and add the kanban view to that action.
 - Make milestones completely available to regular project users.
 - Remove the 'Documents' button in the project's kanban settings menu.
 - Add kanban, pivot and graph views to the 'Hours Recorded' stat button
   on projects
 - Add the calendar view on the 'Hours Forecast' stat button on projects
 - The 'Sales Orders' stat button on the `project.project`'s form view
   will now display the amount of sales order linked to the whole
   project. So the one linked to the project itself if it exists + all
   the tasks. It will also open them, form view if 1 else list view.
 - Fix a typo in the settings 'projets' => 'projects'
 - The analytic account  of the project will now be assigned to the
   sales order when a task is created through the 'Create a task in an
   existing project' option.

Changed the portal task view to include a sidebar similar to sales
orders, with a simple menu leading to different parts of the screen.

Changed the `project.task` 'rating' stat button:
 - The icon will now represent the latest review.
 - The action will directly lead to the record's form view if there is
   only 1 rating.
 - Make some fields readonly in the form view.
 - Display the % of satisfaction instead of the number of ratings.

Reorder all stat buttons on the `project.task` form view in this order:
 - Products, Worksheet, Sales Order(s), Invoices, Ratings, Hours
   Forecast, Parent Task, Tasks in recurrence, Tickets, Quotations and
   lastly Customer Preview

Make the status of the project editable directly through the kanban
view. A new widget has been added to handle that properly. When editing
the status through that means, a `project.update` will be created with
the current date and the appropriate status. In addition to that a new
status has been added (only on `project.task`, not `project.status`)
namely `to_define` in order to differentiate new and running projects.
Projects now start with the `to_define` status.

The `project.project`'s  rating stat button has been changed in the
following ways:
 - The icon will now change in function of the satisfaction percentage,
   smile above 66%, meh between 33% and 66% and frown below 33%.
 - The color will also change depending on the rate, smile is green, meh
   is orange and frown is red.
 - The ratings will now be in function of the last 30 days instead of
   all time and the action will also filter on those 30 days.
 - Change the action name from 'Rating' to 'Ratings'.

`project.project` ticket stat button:
 - Will now open the form view when there is only one record.
 - Added the activity view.
 - Disable the creation of new records.
 - Rename the action to 'Tickets'.

Closes: odoo/odoo#75269

See: odoo/enterprise#20334

Task ID: 2611006

Signed-off-by: Laurent Stukkens (ltu) <ltu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -11,6 +11,7 @@ from odoo import api, Command, fields, models, tools, SUPERUSER_ID, _
 from odoo.exceptions import UserError, ValidationError, AccessError
 from odoo.tools import format_amount
 from odoo.osv.expression import OR
+from odoo.tools.misc import get_lang
 
 from .project_task_recurrence import DAYS, WEEKS
 from .project_update import STATUS_COLOR
@@ -144,7 +145,7 @@ class Project(models.Model):
     _description = "Project"
     _inherit = ['portal.mixin', 'mail.alias.mixin', 'mail.thread', 'mail.activity.mixin', 'rating.parent.mixin']
     _order = "sequence, name, id"
-    _rating_satisfaction_days = False  # takes all existing ratings
+    _rating_satisfaction_days = 30  # takes 30 days by default
     _check_company_auto = True
 
     def _compute_attached_docs_count(self):
@@ -174,20 +175,6 @@ class Project(models.Model):
             project.task_count = result_wo_subtask[project.id]
             project.task_count_with_subtasks = result_with_subtasks[project.id]
 
-    def attachment_tree_view(self):
-        action = self.env['ir.actions.act_window']._for_xml_id('base.action_attachment')
-        action['domain'] = str([
-            '|',
-            '&',
-            ('res_model', '=', 'project.project'),
-            ('res_id', 'in', self.ids),
-            '&',
-            ('res_model', '=', 'project.task'),
-            ('res_id', 'in', self.task_ids.ids)
-        ])
-        action['context'] = "{'default_res_model': '%s','default_res_id': %d}" % (self._name, self.id)
-        return action
-
     def _default_stage_id(self):
         # Since project stages are order by sequence first, this should fetch the one with the lowest sequence number.
         return self.env['project.project.stage'].search([], limit=1)
@@ -314,8 +301,9 @@ class Project(models.Model):
         ('on_track', 'On Track'),
         ('at_risk', 'At Risk'),
         ('off_track', 'Off Track'),
-        ('on_hold', 'On Hold')
-    ], default='on_track', compute='_compute_last_update_status', store=True)
+        ('on_hold', 'On Hold'),
+        ('to_define', 'Set Status'),
+    ], default='to_define', compute='_compute_last_update_status', store=True, readonly=False, required=True)
     last_update_color = fields.Integer(compute='_compute_last_update_color')
     milestone_ids = fields.One2many('project.milestone', 'project_id')
     milestone_count = fields.Integer(compute='_compute_milestone_count')
@@ -375,7 +363,7 @@ class Project(models.Model):
     @api.depends('last_update_id.status')
     def _compute_last_update_status(self):
         for project in self:
-            project.last_update_status = project.last_update_id.status or 'on_track'
+            project.last_update_status = project.last_update_id.status or 'to_define'
 
     @api.depends('last_update_status')
     def _compute_last_update_color(self):
@@ -450,6 +438,14 @@ class Project(models.Model):
             self.map_tasks(project.id)
         return project
 
+    @api.model
+    def name_create(self, name):
+        res = super().name_create(name)
+        if res:
+            # We create a default stage `new` for projects created on the fly.
+            self.browse(res[0]).type_ids += self.env['project.task.type'].sudo().create({'name': _('New')})
+        return res
+
     @api.model
     def create(self, vals):
         # Prevent double project creation
@@ -464,6 +460,16 @@ class Project(models.Model):
         if 'is_favorite' in vals:
             vals.pop('is_favorite')
             self._fields['is_favorite'].determine_inverse(self)
+
+        if 'last_update_status' in vals and vals['last_update_status'] != 'to_define':
+            for project in self:
+                # This does not benefit from multi create, this is to allow the default description from being built.
+                # This does seem ok since last_update_status should only be updated on one record at once.
+                self.env['project.update'].with_context(default_project_id=project.id).create({
+                    'name': _('Status Update - ') + fields.Date.today().strftime(get_lang(self.env).date_format),
+                    'status': vals.get('last_update_status'),
+                })
+            vals.pop('last_update_status')
         res = super(Project, self).write(vals) if vals else True
 
         if 'allow_recurring_tasks' in vals and not vals.get('allow_recurring_tasks'):
@@ -604,11 +610,18 @@ class Project(models.Model):
     def action_view_all_rating(self):
         """ return the action to see all the rating of the project and activate default filters"""
         action = self.env['ir.actions.act_window']._for_xml_id('project.rating_rating_action_view_project_rating')
-        action['name'] = _('Ratings of %s') % (self.name,)
+        action['name'] = _('Ratings')
         action_context = ast.literal_eval(action['context']) if action['context'] else {}
         action_context.update(self._context)
-        action_context['search_default_parent_res_name'] = self.name
+        action_context['search_default_rating_last_30_days'] = 1
         action_context.pop('group_by', None)
+        action['domain'] = [('consumed', '=', True), ('parent_res_model', '=', 'project.project'), ('parent_res_id', '=', self.id)]
+        if self.rating_count == 1:
+            action.update({
+                'view_mode': 'form',
+                'views': [(False, 'form')],
+                'res_id': self.rating_ids[0].id, # [0] since rating_ids might be > then rating_count
+            })
         return dict(action, context=action_context)
 
     def action_view_tasks_analysis(self):
@@ -652,7 +665,7 @@ class Project(models.Model):
         self.ensure_one()
         labels = dict(self._fields['last_update_status']._description_selection(self.env))
         return {
-            'status': labels[self.last_update_status],
+            'status': labels.get(self.last_update_status, _('Set Status')),
             'color': self.last_update_color,
         }
 
@@ -955,8 +968,7 @@ class Task(models.Model):
     subtask_planned_hours = fields.Float("Sub-tasks Planned Hours", compute='_compute_subtask_planned_hours',
         help="Sum of the time planned of all the sub-tasks linked to this task. Usually less than or equal to the initially planned time of this task.")
     # Tracking of this field is done in the write function
-    user_ids = fields.Many2many('res.users', relation='project_task_user_rel', column1='task_id', column2='user_id',
-        string='Assignees', default=lambda self: self.env.user)
+    user_ids = fields.Many2many('res.users', relation='project_task_user_rel', column1='task_id', column2='user_id', string='Assignees')
     # User names displayed in project sharing views
     portal_user_names = fields.Char(compute='_compute_portal_user_names', compute_sudo=True, search='_search_portal_user_names')
     # Second Many2many containing the actual personal stage for the current user
@@ -2091,9 +2103,21 @@ class Task(models.Model):
             'type': 'ir.actions.act_window',
             'res_model': 'project.task',
             'view_mode': 'tree,form,kanban,calendar,pivot,graph,gantt,activity,map',
+            'context': {'create': False},
             'domain': [('recurrence_id', 'in', self.recurrence_id.ids)],
         }
 
+    def action_open_ratings(self):
+        self.ensure_one()
+        action = self.env['ir.actions.act_window']._for_xml_id('project.rating_rating_action_task')
+        if self.rating_count == 1:
+            action['view_mode'] = 'form'
+            action['res_id'] = self.rating_ids[0].id
+            action['views'] = [[self.env.ref('project.rating_rating_view_form_project').id, 'form']]
+            return action
+        else:
+            return action
+
     def action_stop_recurrence(self):
         tasks = self.env['project.task'].with_context(active_test=False).search([('recurrence_id', 'in', self.recurrence_id.ids)])
         tasks.write({'recurring_task': False})
@@ -2148,7 +2172,7 @@ class ProjectTags(models.Model):
     def _get_default_color(self):
         return randint(1, 11)
 
-    name = fields.Char('Name', required=True)
+    name = fields.Char('Name', required=True, translate=True)
     color = fields.Integer(string='Color', default=_get_default_color)
 
     _sql_constraints = [

--- a/addons/project/models/project_update.py
+++ b/addons/project/models/project_update.py
@@ -15,6 +15,8 @@ STATUS_COLOR = {
     'off_track': 23,  # red / danger
     'on_hold': 4,  # light blue
     False: 0,  # default grey -- for studio
+    # Only used in project.task
+    'to_define': 0,
 }
 
 class ProjectUpdate(models.Model):
@@ -34,7 +36,9 @@ class ProjectUpdate(models.Model):
             if 'description' in fields and not result.get('description'):
                 result['description'] = self._build_description(project)
             if 'status' in fields and not result.get('status'):
-                result['status'] = project.last_update_status
+                # `to_define` is not an option for self.status, here we actually want to default to `on_track`
+                # the goal of `to_define` is for a project to start without an actual status.
+                result['status'] = project.last_update_status if project.last_update_status != 'to_define' else 'on_track'
         return result
 
     name = fields.Char("Title", required=True, tracking=True)
