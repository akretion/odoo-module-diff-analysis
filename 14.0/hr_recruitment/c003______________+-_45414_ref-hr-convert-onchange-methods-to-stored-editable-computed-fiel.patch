PR: https://github.com/odoo/odoo/pull/45414

From: 3bd345597fa932abdaf780f72bacf331690f549b
From: Anh Thao Pham (pta)
Date: 2020-04-20 10:32:45

Structural Changes: 6
Total Changes: 38

[REF] hr*: convert onchange methods to stored-editable computed fields

Impacted modules:
hr, hr_contract, hr_recruitment, hr_payroll, fleet, hr_skills, hr_appraisal, ....

Several onchanges have been converted to computed fields in the following modules :
    Community :
        - hr
        - hr_contract
        - hr_recruitment
        - hr_work_entry
        - hr_maintenance
        - hr_expense
        - hr_expense_check
        - hr_holidays
        - sale_expense
        - account_analytic_default_hr_expense

    Enterprise:
        - hr_contract_salary
        - hr_referral
        - hr_payroll
        - hr_payroll_expense
        - test_l10n_be_hr_payroll_account

There are still 2 onchanges with complex behavior that couldn't be converted easily:
- an onchange that updates "tz" (timezone) that is defined as a related field
  to "resource_id.tz". Apparently it is useless except to initialize the default
  value of "tz".
- an onchange that updates "name" that is defined as a related field to
  "resource_id.name".
  the applicant.

closes odoo/odoo#45414

Taskid: 2169099
Related: odoo/enterprise#8572
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_recruitment/models/hr_recruitment.py
+++ b/addons/hr_recruitment/models/hr_recruitment.py
@@ -98,7 +98,8 @@ class Applicant(models.Model):
     name = fields.Char("Subject / Application Name", required=True)
     active = fields.Boolean("Active", default=True, help="If the active field is set to false, it will allow you to hide the case without removing it.")
     description = fields.Text("Description")
-    email_from = fields.Char("Email", size=128, help="Applicant email", compute='_compute_partner_phone_email', store=True, readonly=False)
+    email_from = fields.Char("Email", size=128, help="Applicant email", compute='_compute_partner_phone_email',
+        inverse='_inverse_partner_email', store=True)
     probability = fields.Float("Probability")
     partner_id = fields.Many2one('res.partner', "Contact", copy=False)
     create_date = fields.Datetime("Creation Date", readonly=True, index=True)
@@ -125,8 +126,10 @@ class Applicant(models.Model):
     salary_expected = fields.Float("Expected Salary", group_operator="avg", help="Salary Expected by Applicant", tracking=True)
     availability = fields.Date("Availability", help="The date at which the applicant will be available to start working", tracking=True)
     partner_name = fields.Char("Applicant's Name")
-    partner_phone = fields.Char("Phone", size=32, compute='_compute_partner_phone_email', store=True, readonly=False)
-    partner_mobile = fields.Char("Mobile", size=32, compute='_compute_partner_phone_email', store=True, readonly=False)
+    partner_phone = fields.Char("Phone", size=32, compute='_compute_partner_phone_email',
+        inverse='_inverse_partner_phone', store=True)
+    partner_mobile = fields.Char("Mobile", size=32, compute='_compute_partner_phone_email',
+        inverse='_inverse_partner_mobile', store=True)
     type_id = fields.Many2one('hr.recruitment.degree', "Degree")
     department_id = fields.Many2one(
         'hr.department', "Department", compute='_compute_department', store=True, readonly=False,
@@ -240,22 +243,6 @@ class Applicant(models.Model):
         for applicant in self.filtered(lambda a: a.job_id):
             applicant.user_id = applicant.job_id.user_id.id
 
-
-    @api.onchange('email_from')
-    def onchange_email_from(self):
-        if self.partner_id and self.email_from and not self.partner_id.email:
-            self.partner_id.email = self.email_from
-
-    @api.onchange('partner_phone')
-    def onchange_partner_phone(self):
-        if self.partner_id and self.partner_phone and not self.partner_id.phone:
-            self.partner_id.phone = self.partner_phone
-
-    @api.onchange('partner_mobile')
-    def onchange_partner_mobile(self):
-        if self.partner_id and self.partner_mobile and not self.partner_id.mobile:
-            self.partner_id.mobile = self.partner_mobile
-
     @api.depends('partner_id')
     def _compute_partner_phone_email(self):
         for applicant in self:
@@ -263,6 +250,18 @@ class Applicant(models.Model):
             applicant.partner_mobile = applicant.partner_id.mobile
             applicant.email_from = applicant.partner_id.email
 
+    def _inverse_partner_email(self):
+        for applicant in self.filtered(lambda a: a.partner_id and a.email_from and not a.partner_id.email):
+            applicant.partner_id.email = applicant.email_from
+
+    def _inverse_partner_phone(self):
+        for applicant in self.filtered(lambda a: a.partner_id and a.partner_phone and not a.partner_id.phone):
+            applicant.partner_id.phone = applicant.partner_phone
+
+    def _inverse_partner_mobile(self):
+        for applicant in self.filtered(lambda a: a.partner_id and a.partner_mobile and not a.partner_id.mobile):
+            applicant.partner_id.mobile = applicant.partner_mobile
+
     @api.depends('stage_id')
     def _compute_date_closed(self):
         for applicant in self:
@@ -438,6 +437,7 @@ class Applicant(models.Model):
                     'phone': applicant.partner_phone,
                     'mobile': applicant.partner_mobile
                 })
+                applicant.partner_id = new_partner_id
                 address_id = new_partner_id.address_get(['contact'])['contact']
             if applicant.partner_name or contact_name:
                 employee = self.env['hr.employee'].create({
