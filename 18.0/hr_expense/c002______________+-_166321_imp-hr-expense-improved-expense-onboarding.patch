PR: https://github.com/odoo/odoo/pull/166321

From: 92993d7790bb641e5822a5358db35c7fcc7bd091
From: Hesham
Date: 2024-05-28 21:43:08

Structural Changes: 4
Total Changes: 60

[IMP] hr_expense: Improved expense onboarding

Improved onboarding, flow, and UX on desktop and mobile for expense.
A more detailed overview could be found here https://app.excalidraw.com/l/65VNwvy7c4X/73HONs7UUCz

task-3919542

closes odoo/odoo#166321

Related: odoo/upgrade#6055
Related: odoo/enterprise#62964
Signed-off-by: Julien Van Roy (juvr) <juvr@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_expense/models/hr_expense.py
+++ b/addons/hr_expense/models/hr_expense.py
@@ -108,6 +108,7 @@ class HrExpense(models.Model):
     approved_by = fields.Many2one(comodel_name='res.users', string="Approved By", related='sheet_id.user_id', tracking=False)
     approved_on = fields.Datetime(string="Approved On", related='sheet_id.approval_date')
     duplicate_expense_ids = fields.Many2many(comodel_name='hr.expense', compute='_compute_duplicate_expense_ids')  # Used to trigger warnings
+    same_receipt_expense_ids = fields.Many2many(comodel_name='hr.expense', compute='_compute_same_receipt_expense_ids')  # Used to trigger warnings
 
     # Amount fields
     tax_amount_currency = fields.Monetary(
@@ -435,6 +436,29 @@ class HrExpense(models.Model):
             for expense in self:
                 expense.employee_id = self.env.user.with_company(expense.company_id).employee_id
 
+    @api.depends('attachment_ids')
+    def _compute_same_receipt_expense_ids(self):
+        self.same_receipt_expense_ids = [Command.clear()]
+
+        expenses_with_attachments = self.filtered(lambda expense: expense.attachment_ids)
+        if not expenses_with_attachments:
+            return
+
+        expenses_groupby_checksum = dict(self.env['ir.attachment']._read_group(domain=[
+            ('res_model', '=', 'hr.expense'),
+            ('checksum', 'in', expenses_with_attachments.attachment_ids.mapped('checksum'))],
+            groupby=['checksum'],
+            aggregates=['res_id:array_agg'],
+        ))
+
+        for expense in expenses_with_attachments:
+            same_receipt_ids = set()
+            for attachment in expense.attachment_ids:
+                same_receipt_ids.update(expenses_groupby_checksum[attachment.checksum])
+            same_receipt_ids.remove(expense.id)
+
+            expense.same_receipt_expense_ids = [Command.set(list(same_receipt_ids))]
+
     @api.depends('employee_id', 'product_id', 'total_amount_currency')
     def _compute_duplicate_expense_ids(self):
         self.duplicate_expense_ids = [Command.clear()]
@@ -504,6 +528,7 @@ class HrExpense(models.Model):
         """When an attachment is uploaded as a receipt, set it as the main attachment."""
         self.message_main_attachment_id = kwargs['attachment_ids'][-1]
 
+    @api.model
     def create_expense_from_attachments(self, attachment_ids=None, view_type='list'):
         """
             Create the expenses from files.
@@ -529,7 +554,7 @@ class HrExpense(models.Model):
             vals = {
                 'name': attachment_name,
                 'price_unit': 0,
-                'product_id': self.env.company.expense_product_id.id or product.id,
+                'product_id': product.id,
             }
             if product.property_account_expense_id:
                 vals['account_id'] = product.property_account_expense_id.id
@@ -543,7 +568,7 @@ class HrExpense(models.Model):
             'res_model': 'hr.expense',
             'type': 'ir.actions.act_window',
             'views': [[False, view_type], [False, "form"]],
-            'context': {'search_default_my_expenses': 1, 'search_default_no_report': 1},
+            'domain': [('id', 'in', expenses.ids)],
         }
 
     # ----------------------------------------
@@ -642,18 +667,27 @@ class HrExpense(models.Model):
             # encode, but force %20 encoding for space instead of a + (URL / mailto difference)
             params = werkzeug.urls.url_encode({'subject': _("Lunch with customer $12.32")}).replace('+', '%20')
             return Markup(
-                """<p>%(send_string)s <a href="mailto:%(alias_email)s?%(params)s">%(alias_email)s</a></p>"""
+                """<div class="text-muted mt-4">%(send_string)s <a class="text-body" href="mailto:%(alias_email)s?%(params)s">%(alias_email)s</a></div>"""
             ) % {
                 'alias_email': expense_alias.display_name,
                 'params': params,
-                'send_string': _("Or send your receipts at"),
+                'send_string': _("Tip: try sending receipts by email"),
             }
         return ""
 
+    def get_expense_attachments(self):
+        return self.attachment_ids.mapped('image_src')
+
     # ----------------------------------------
     # Actions
     # ----------------------------------------
 
+    def action_show_same_receipt_expense_ids(self):
+        self.ensure_one()
+        return self.same_receipt_expense_ids._get_records_action(
+            name=_("Expenses with a similar receipt to %(other_expense_name)s", other_expense_name=self.name),
+        )
+
     def action_view_sheet(self):
         self.ensure_one()
         return {

--- a/addons/hr_expense/models/product_template.py
+++ b/addons/hr_expense/models/product_template.py
@@ -17,6 +17,7 @@ class ProductTemplate(models.Model):
 
     can_be_expensed = fields.Boolean(string="Expenses", compute='_compute_can_be_expensed',
         store=True, readonly=False, help="Specify whether the product can be selected in an expense.")
+    purchase_ok = fields.Boolean('Purchase', default=True, compute='_compute_purchase_ok', store=True, readonly=False)
 
     def _auto_init(self):
         if not column_exists(self.env.cr, "product_template", "can_be_expensed"):
@@ -30,6 +31,12 @@ class ProductTemplate(models.Model):
             )
         return super()._auto_init()
 
-    @api.depends('type')
+    @api.depends('type', 'purchase_ok')
     def _compute_can_be_expensed(self):
-        self.filtered(lambda p: p.type not in ['consu', 'service']).update({'can_be_expensed': False})
+        self.filtered(lambda p: p.type not in ['consu', 'service'] or not p.purchase_ok).update({'can_be_expensed': False})
+
+    @api.depends('can_be_expensed')
+    def _compute_purchase_ok(self):
+        for record in self:
+            if record.can_be_expensed:
+                record.purchase_ok = True

--- a/addons/hr_expense/models/res_company.py
+++ b/addons/hr_expense/models/res_company.py
@@ -6,12 +6,6 @@ from odoo import fields, models
 class ResCompany(models.Model):
     _inherit = "res.company"
 
-    expense_product_id = fields.Many2one(
-        "product.product",
-        string="Default Expense Category",
-        check_company=True,
-        domain="[('can_be_expensed', '=', True)]",
-    )
     expense_journal_id = fields.Many2one(
         "account.journal",
         string="Default Expense Journal",

--- a/addons/hr_expense/models/res_config_settings.py
+++ b/addons/hr_expense/models/res_config_settings.py
@@ -15,7 +15,6 @@ class ResConfigSettings(models.TransientModel):
                                              config_parameter='hr_expense.use_mailgateway')
     module_hr_payroll_expense = fields.Boolean(string='Reimburse Expenses in Payslip')
     module_hr_expense_extract = fields.Boolean(string='Send bills to OCR to generate expenses')
-    expense_product_id = fields.Many2one('product.product', related='company_id.expense_product_id', readonly=False, check_company=True)
     expense_journal_id = fields.Many2one('account.journal', related='company_id.expense_journal_id', readonly=False, check_company=True)
     company_expense_allowed_payment_method_line_ids = fields.Many2many(
         comodel_name='account.payment.method.line',
