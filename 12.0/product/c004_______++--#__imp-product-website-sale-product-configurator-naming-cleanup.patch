PR: https://github.com/odoo/odoo/pull/

From: 326dabce09d634e029e68281694ec695fa665666
From: Aur√©lien Warnon
Date: 2018-09-26 13:08:18

Breaking data model changes score: 9, change matches:
-    product_attribute_value_ids = fields.Many2many(
+    product_template_attribute_value_ids = fields.Many2many(
-    exclude_for = fields.Many2many(
-    product_value_ids = fields.Many2many(
+    product_template_value_ids = fields.Many2many(
+    exclude_for = fields.One2many(

Total Changes: 203

[IMP] product,(website_)sale: Product configurator naming/cleanup

Targets commit d3530eb07e24278117ab396ecb86a59deecc312d

Purpose
=======

[Follow up AL review]
Code cleanup and some improved models naming for the product configurator feature (see targeted commit).
Mostly changes the "product.attribute" related models.

Updated models:

* "product.product.attribute.value" to "product.template.attribute.value"
* "product.attribute.filter.line" to "product.template.attribute.exclusion"
* "product.attribute.line" to "product.template.attribute.line"

Updated fields:

* [sale_order_line in sale/sale.py] "product_custom_variant_values" to "product_custom_attribute_value_ids"
* [product_template_attribute_value in product/product_attribute.py] excluded_for is now a o2m instead of a m2m
* [product.attribute in sale/product_product.py] "create_variant" field is now a Selection with "no_variant" (old false), "always" (old true), "dynamic" (new value)
* [product in product/product.py] "product_attribute_value_ids" to "product_template_attribute_value_ids"

================================= pseudo patch: =================================

--- a/addons/product/models/product.py
+++ b/addons/product/models/product.py
@@ -109,9 +109,9 @@ class ProductProduct(models.Model):
         'Barcode', copy=False, oldname='ean13',
         help="International Article Number used for product identification.")
     attribute_value_ids = fields.Many2many(
-        'product.attribute.value', string='Attributes', ondelete='restrict')
-    product_attribute_value_ids = fields.Many2many(
-        'product.product.attribute.value', string='Attribute Values', compute="_compute_product_attribute_value_ids")
+        'product.attribute.value', string='Attribute Values', ondelete='restrict')
+    product_template_attribute_value_ids = fields.Many2many(
+        'product.template.attribute.value', string='Template Attribute Values', compute="_compute_product_template_attribute_value_ids")
     # image: all image fields are base64 encoded and PIL-supported
     image_variant = fields.Binary(
         "Variant Image", attachment=True,
@@ -195,10 +195,10 @@ class ProductProduct(models.Model):
             value -= product.price_extra
             product.write({'list_price': value})
 
-    @api.depends('product_attribute_value_ids.price_extra')
+    @api.depends('product_template_attribute_value_ids.price_extra')
     def _compute_product_price_extra(self):
         for product in self:
-            product.price_extra = sum(product.mapped('product_attribute_value_ids.price_extra'))
+            product.price_extra = sum(product.mapped('product_template_attribute_value_ids.price_extra'))
 
     @api.depends('list_price', 'price_extra')
     def _compute_product_lst_price(self):
@@ -273,9 +273,9 @@ class ProductProduct(models.Model):
         else:
             self.product_tmpl_id.image = image
 
-    def _compute_product_attribute_value_ids(self):
+    def _compute_product_template_attribute_value_ids(self):
         for product in self:
-            product.product_attribute_value_ids = self.env['product.product.attribute.value']._search([
+            product.product_template_attribute_value_ids = self.env['product.template.attribute.value']._search([
                 ('product_tmpl_id', '=', product.product_tmpl_id.id),
                 ('product_attribute_value_id', 'in', product.attribute_value_ids.ids)])
 

--- a/addons/product/models/product_attribute.py
+++ b/addons/product/models/product_attribute.py
@@ -15,9 +15,9 @@ class ProductAttribute(models.Model):
     name = fields.Char('Attribute', required=True, translate=True)
     value_ids = fields.One2many('product.attribute.value', 'attribute_id', 'Values', copy=True)
     sequence = fields.Integer('Sequence', help="Determine the display order")
-    attribute_line_ids = fields.One2many('product.attribute.line', 'attribute_id', 'Lines')
+    attribute_line_ids = fields.One2many('product.template.attribute.line', 'attribute_id', 'Lines')
     create_variant = fields.Selection([
-        ('never', 'Never'),
+        ('no_variant', 'Never'),
         ('always', 'Always'),
         ('dynamic', 'Only when the product is added to a sales order')],
         default='always',
@@ -56,54 +56,22 @@ class ProductAttributeValue(models.Model):
         return super(ProductAttributeValue, self).unlink()
 
 
-class ProductProductAttributeValue(models.Model):
-    _name = "product.product.attribute.value"
-    _order = 'sequence, attribute_id, id'
-    _description = 'Product Attribute Value'
-
-    name = fields.Char('Value', related="product_attribute_value_id.name")
-    product_attribute_value_id = fields.Many2one('product.attribute.value', string='Attribute Value', required=True, ondelete='cascade', index=True)
-    product_tmpl_id = fields.Many2one('product.template', string='Product Template', required=True, ondelete='cascade', index=True)
-    attribute_id = fields.Many2one('product.attribute', string='Attribute', related="product_attribute_value_id.attribute_id")
-    sequence = fields.Integer('Sequence', related="product_attribute_value_id.sequence")
-    price_extra = fields.Float(
-        string='Attribute Price Extra', default=0.0, digits=dp.get_precision('Product Price'),
-        help="Price Extra: Extra price for the variant with this attribute value on sale price. eg. 200 price extra, 1000 + 200 = 1200.")
-    exclude_for = fields.Many2many(
-        'product.attribute.filter.line', string="Exclude for", relation="product_attribute_value_exclusion",
-        help="Make this attribute value not compatible with other values of the product or some attribute values of optional and accessory products.")
-
-    @api.multi
-    def name_get(self):
-        if not self._context.get('show_attribute', True):  # TDE FIXME: not used
-            return super(ProductAttributeValue, self).name_get()
-        return [(value.id, "%s: %s" % (value.attribute_id.name, value.name)) for value in self]
-
-
-class ProductAttributeFilterLine(models.Model):
-    _name = "product.attribute.filter.line"
-    _description = 'Product Attribute Filter Line'
-
-    product_tmpl_id = fields.Many2one('product.template', string='Product Template', ondelete='cascade', required=True)
-    value_ids = fields.Many2many(
-        'product.product.attribute.value', relation="product_attr_filter_line_value_ids_rel",
-        string='Attribute Values', domain="[('product_tmpl_id', '=', product_tmpl_id)]")
+class ProductTemplateAttributeLine(models.Model):
+    """Attributes available on product.template with their selected values in a m2m.
+    Used as a configuration model to generate the appropriate product.template.attribute.value"""
 
-
-class ProductAttributeLine(models.Model):
-    _name = "product.attribute.line"
+    _name = "product.template.attribute.line"
     _rec_name = 'attribute_id'
-    _description = 'Product Attribute Line'
+    _description = 'Product Template Attribute Line'
 
     product_tmpl_id = fields.Many2one('product.template', string='Product Template', ondelete='cascade', required=True)
     attribute_id = fields.Many2one('product.attribute', string='Attribute', ondelete='restrict', required=True)
     value_ids = fields.Many2many('product.attribute.value', string='Attribute Values')
-    product_value_ids = fields.Many2many(
-        'product.product.attribute.value',
+    product_template_value_ids = fields.Many2many(
+        'product.template.attribute.value',
         string='Product Attribute Values',
-        compute="_set_product_value_ids",
-        store=False
-    )
+        compute="_set_product_template_value_ids",
+        store=False)
 
     @api.constrains('value_ids', 'attribute_id')
     def _check_valid_attribute(self):
@@ -113,63 +81,63 @@ class ProductAttributeLine(models.Model):
 
     @api.model
     def create(self, values):
-        res = super(ProductAttributeLine, self).create(values)
-        res._update_product_product_attribute_values()
+        res = super(ProductTemplateAttributeLine, self).create(values)
+        res._update_product_template_attribute_values()
         return res
 
     def write(self, values):
-        res = super(ProductAttributeLine, self).write(values)
-        self._update_product_product_attribute_values()
+        res = super(ProductTemplateAttributeLine, self).write(values)
+        self._update_product_template_attribute_values()
         return res
 
     @api.depends('value_ids')
-    def _set_product_value_ids(self):
-        for product_attribute_line in self:
-            product_attribute_line.product_value_ids = self.env['product.product.attribute.value'].search([
-                ('product_tmpl_id', 'in', product_attribute_line.product_tmpl_id.ids),
-                ('product_attribute_value_id.attribute_id', 'in', product_attribute_line.value_ids.mapped('attribute_id').ids)]
+    def _set_product_template_value_ids(self):
+        for product_template_attribute_line in self:
+            product_template_attribute_line.product_template_value_ids = self.env['product.template.attribute.value'].search([
+                ('product_tmpl_id', 'in', product_template_attribute_line.product_tmpl_id.ids),
+                ('product_attribute_value_id.attribute_id', 'in', product_template_attribute_line.value_ids.mapped('attribute_id').ids)]
             ).sorted(lambda product_product_attribute: product_product_attribute.sequence)
 
     @api.multi
     def unlink(self):
-        for product_attribute_line in self:
-            self.env['product.product.attribute.value'].search([
-                ('product_tmpl_id', 'in', product_attribute_line.product_tmpl_id.ids),
-                ('product_attribute_value_id.attribute_id', 'in', product_attribute_line.value_ids.mapped('attribute_id').ids)]).unlink()
+        for product_template_attribute_line in self:
+            self.env['product.template.attribute.value'].search([
+                ('product_tmpl_id', 'in', product_template_attribute_line.product_tmpl_id.ids),
+                ('product_attribute_value_id.attribute_id', 'in', product_template_attribute_line.value_ids.mapped('attribute_id').ids)]).unlink()
 
-        return super(ProductAttributeLine, self).unlink()
+        return super(ProductTemplateAttributeLine, self).unlink()
 
-    def _update_product_product_attribute_values(self):
+    def _update_product_template_attribute_values(self):
         """
-        Create or unlink product.product.attribute.value based on the attribute lines.
-        If the product.attribute.value is removed, remove the corresponding product.product.attribute.value
-        If no product.product.attribute.value exists for the newly added product.attribute.value, create it.
+        Create or unlink product.template.attribute.value based on the attribute lines.
+        If the product.attribute.value is removed, remove the corresponding product.template.attribute.value
+        If no product.template.attribute.value exists for the newly added product.attribute.value, create it.
         """
         for attribute_line in self:
-            # All existing product.product.attribute.value for this template
-            product_product_attribute_values_to_remove = self.env['product.product.attribute.value'].search([
+            # All existing product.template.attribute.value for this template
+            product_template_attribute_values_to_remove = self.env['product.template.attribute.value'].search([
                 ('product_tmpl_id', '=', attribute_line.product_tmpl_id.id),
                 ('product_attribute_value_id.attribute_id', 'in', attribute_line.value_ids.mapped('attribute_id').ids)])
             # All existing product.attribute.value shared by all products
             # eg (Yellow, Red, Blue, Small, Large)
-            existing_product_attribute_values = product_product_attribute_values_to_remove.mapped('product_attribute_value_id')
+            existing_product_attribute_values = product_template_attribute_values_to_remove.mapped('product_attribute_value_id')
 
             # Loop on product.attribute.values for the line (eg: Yellow, Red, Blue)
             for product_attribute_value in attribute_line.value_ids:
                 if product_attribute_value in existing_product_attribute_values:
                     # property is already existing: don't touch, remove it from list to avoid unlinking it
-                    product_product_attribute_values_to_remove = product_product_attribute_values_to_remove.filtered(
+                    product_template_attribute_values_to_remove = product_template_attribute_values_to_remove.filtered(
                         lambda value: product_attribute_value not in value.mapped('product_attribute_value_id')
                     )
                 else:
                     # property does not exist: create it
-                    self.env['product.product.attribute.value'].create({
+                    self.env['product.template.attribute.value'].create({
                         'product_attribute_value_id': product_attribute_value.id,
                         'product_tmpl_id': attribute_line.product_tmpl_id.id})
 
             # at this point, existing properties can be removed to reflect the modifications on value_ids
-            if product_product_attribute_values_to_remove:
-                product_product_attribute_values_to_remove.unlink()
+            if product_template_attribute_values_to_remove:
+                product_template_attribute_values_to_remove.unlink()
 
     @api.model
     def _name_search(self, name, args=None, operator='ilike', limit=100, name_get_uid=None):
@@ -180,4 +148,57 @@ class ProductAttributeLine(models.Model):
             args = expression.AND([['|', ('attribute_id', operator, name), ('value_ids', operator, name)], args])
             attribute_ids = self._search(args, limit=limit, access_rights_uid=name_get_uid)
             return self.browse(attribute_ids).name_get()
-        return super(ProductAttributeLine, self)._name_search(name=name, args=args, operator=operator, limit=limit, name_get_uid=name_get_uid)
+        return super(ProductTemplateAttributeLine, self)._name_search(name=name, args=args, operator=operator, limit=limit, name_get_uid=name_get_uid)
+
+
+class ProductTemplateAttributeValue(models.Model):
+    """Materialized relationship between attribute values
+    and product template generated by the product.template.attribute.line"""
+
+    _name = "product.template.attribute.value"
+    _order = 'sequence, attribute_id, id'
+    _description = 'Product Attribute Value'
+
+    name = fields.Char('Value', related="product_attribute_value_id.name")
+    product_attribute_value_id = fields.Many2one(
+        'product.attribute.value', string='Attribute Value',
+        required=True, ondelete='cascade', index=True)
+    product_tmpl_id = fields.Many2one(
+        'product.template', string='Product Template',
+        required=True, ondelete='cascade', index=True)
+    attribute_id = fields.Many2one(
+        'product.attribute', string='Attribute',
+        related="product_attribute_value_id.attribute_id")
+    sequence = fields.Integer('Sequence', related="product_attribute_value_id.sequence")
+    price_extra = fields.Float(
+        string='Attribute Price Extra',
+        default=0.0,
+        digits=dp.get_precision('Product Price'),
+        help="""Price Extra: Extra price for the variant with
+        this attribute value on sale price. eg. 200 price extra, 1000 + 200 = 1200.""")
+    exclude_for = fields.One2many(
+        'product.template.attribute.exclusion',
+        'product_template_attribute_value_id',
+        string="Exclude for",
+        relation="product_template_attribute_exclusion",
+        help="""Make this attribute value not compatible with
+        other values of the product or some attribute values of optional and accessory products.""")
+
+    @api.multi
+    def name_get(self):
+        if not self._context.get('show_attribute', True):  # TDE FIXME: not used
+            return super(ProductAttributeValue, self).name_get()
+        return [(value.id, "%s: %s" % (value.attribute_id.name, value.name)) for value in self]
+
+
+class ProductTemplateAttributeExclusion(models.Model):
+    _name = "product.template.attribute.exclusion"
+    _description = 'Product Template Attribute Exclusion'
+
+    product_template_attribute_value_id = fields.Many2one(
+        'product.template.attribute.value', string="Attribute Value", ondelete='cascade')
+    product_tmpl_id = fields.Many2one(
+        'product.template', string='Product Template', ondelete='cascade', required=True)
+    value_ids = fields.Many2many(
+        'product.template.attribute.value', relation="product_attr_exclusion_value_ids_rel",
+        string='Attribute Values', domain="[('product_tmpl_id', '=', product_tmpl_id)]")

--- a/addons/product/models/product_template.py
+++ b/addons/product/models/product_template.py
@@ -114,7 +114,7 @@ class ProductTemplate(models.Model):
     color = fields.Integer('Color Index')
 
     is_product_variant = fields.Boolean(string='Is a product variant', compute='_compute_is_product_variant')
-    attribute_line_ids = fields.One2many('product.attribute.line', 'product_tmpl_id', 'Product Attributes')
+    attribute_line_ids = fields.One2many('product.template.attribute.line', 'product_tmpl_id', 'Product Attributes')
     product_variant_ids = fields.One2many('product.product', 'product_tmpl_id', 'Products', required=True)
     # performance: product_variant_id provides prefetching on the first product variant only
     product_variant_id = fields.Many2one('product.product', 'Product', compute='_compute_product_variant_id')
@@ -454,11 +454,11 @@ class ProductTemplate(models.Model):
             # iterator of n-uple of product.attribute.value *ids*
             variant_matrix = [
                 AttributeValues.browse(value_ids)
-                for value_ids in itertools.product(*(line.value_ids.ids for line in tmpl_id.attribute_line_ids if line.value_ids[:1].attribute_id.create_variant != 'never'))
+                for value_ids in itertools.product(*(line.value_ids.ids for line in tmpl_id.attribute_line_ids if line.value_ids[:1].attribute_id.create_variant != 'no_variant'))
             ]
 
             # get the value (id) sets of existing variants
-            existing_variants = {frozenset(variant.attribute_value_ids.filtered(lambda r: r.attribute_id.create_variant != 'never').ids) for variant in tmpl_id.product_variant_ids}
+            existing_variants = {frozenset(variant.attribute_value_ids.filtered(lambda r: r.attribute_id.create_variant != 'no_variant').ids) for variant in tmpl_id.product_variant_ids}
             # -> for each value set, create a recordset of values to create a
             #    variant for if the value set isn't already a variant
             for value_ids in variant_matrix:
@@ -476,9 +476,9 @@ class ProductTemplate(models.Model):
 
             # check product
             for product_id in tmpl_id.product_variant_ids:
-                if not product_id.active and product_id.attribute_value_ids.filtered(lambda r: r.attribute_id.create_variant != 'never') in variant_matrix:
+                if not product_id.active and product_id.attribute_value_ids.filtered(lambda r: r.attribute_id.create_variant != 'no_variant') in variant_matrix:
                     variants_to_activate.append(product_id)
-                elif product_id.attribute_value_ids.filtered(lambda r: r.attribute_id.create_variant != 'never') not in variant_matrix:
+                elif product_id.attribute_value_ids.filtered(lambda r: r.attribute_id.create_variant != 'no_variant') not in variant_matrix:
                     variants_to_unlink.append(product_id)
 
         if variants_to_activate:
@@ -521,30 +521,30 @@ class ProductTemplate(models.Model):
             The filtered list of product variants
         """
         self.ensure_one()
-        product_product_attribute_values = self.env['product.product.attribute.value'].search([('product_tmpl_id', '=', self.id)])
+        product_template_attribute_values = self.env['product.template.attribute.value'].search([('product_tmpl_id', '=', self.id)])
         if reference_product:
             # append the reference_product if provided
-            product_product_attribute_values |= reference_product.product_attribute_value_ids
+            product_template_attribute_values |= reference_product.product_template_attribute_value_ids
         product_variants = self.product_variant_ids
 
-        for product_product_attribute_value in product_product_attribute_values:
+        for product_template_attribute_value in product_template_attribute_values:
             # CASE 1: The whole product is excluded when no attribute values are selected in the parent product
             # returns empty recordset of product.product if so. What is checked is:
             # If the product_attribute value doesn't belong to self (i.e. belongs to the reference product)
             # and self is the excluded product template on the exclusion lines
             # and the exclusions is on the product without specified product attribute values (i.e. the whole product is excluded)
-            if product_product_attribute_value.product_tmpl_id != self \
-                    and self in product_product_attribute_value.exclude_for.mapped('product_tmpl_id') \
+            if product_template_attribute_value.product_tmpl_id != self \
+                    and self in product_template_attribute_value.exclude_for.mapped('product_tmpl_id') \
                     and any(not exclude_for.value_ids
-                            for exclude_for in product_product_attribute_value.exclude_for.filtered(
+                            for exclude_for in product_template_attribute_value.exclude_for.filtered(
                                 lambda excluded_product_attribute_value: excluded_product_attribute_value.product_tmpl_id == self)):
                 return self.env['product.product']
 
-            # CASE 2: Check if some of the product.product.attribute.value of the product are excluded
+            # CASE 2: Check if some of the product.template.attribute.value of the product are excluded
             # for this prodcut. A variant could be excluded:
             # - Either by itself (eg: The office chair with iron legs excludes the color white)
             # - Or by the reference product (eg: The customizable desk with iron legs excludes the office chair with aluminium legs)
-            for excluded in product_product_attribute_value.exclude_for.filtered(
+            for excluded in product_template_attribute_value.exclude_for.filtered(
                     lambda excluded_product_attribute_value: excluded_product_attribute_value.product_tmpl_id == self):
                 product_variants -= product_variants.filtered(
                     lambda variant:
@@ -553,9 +553,9 @@ class ProductTemplate(models.Model):
                     # OR the restriction is on a product_attribute_value that this variant has, eg:
                     # if the office chair with iron legs excludes the color white, we must check
                     # that this variant has iron legs to check the exclusion
-                    (product_product_attribute_value.product_tmpl_id != self or product_product_attribute_value in variant.product_attribute_value_ids) and
+                    (product_template_attribute_value.product_tmpl_id != self or product_template_attribute_value in variant.product_template_attribute_value_ids) and
                     # 2/ Check the variant has one of the excluded attribute values
-                    any(attribute_value in excluded.value_ids for attribute_value in variant.product_attribute_value_ids))
+                    any(attribute_value in excluded.value_ids for attribute_value in variant.product_template_attribute_value_ids))
 
         return product_variants
 
