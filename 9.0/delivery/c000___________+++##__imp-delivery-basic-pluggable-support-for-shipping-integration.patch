PR: https://github.com/odoo/odoo/pull/

From: 3098ab7fd101b1bc5caa7ad8fd3200c0b5e66310
From: Richard Mathot
Date: 2015-06-24 11:54:31

Structural Changes: 9
Total Changes: 335

[IMP] delivery: basic pluggable support for shipping integration

Add a `delivery_type` selection field on delivery.carrier.
The default is `grid` i.e. a static pricing grid with rules
to compute the delivery costs.

Future module will however be able to extend the `delivery_type`
selection to add new keys, such as `fedex` or `ups` and provide
custom implementations for the various API methods, as described
below.

In order to add your own external provider, follow these steps:

 1. Create your model MyProvider that _inherits `delivery.carrier`
 2. Extend the selection field `delivery_type` with a pair
    ('<my_provider' , 'My Provider')
 3. Implement API methods as required:
    <my_provider>_get_shipping_price_from_so
    <my_provider>_send_shipping
    <my_provider>_open_tracking_page
    <my_provider>_cancel_shipment

================================= pseudo patch: =================================

--- a/None
+++ b/addons/delivery/models/__init__.py
@@ -0,0 +1,24 @@
+# -*- coding: utf-8 -*-
+##############################################################################
+#
+#    Odoo, Open Source Business Applications
+#    Copyright (c) 2015 Odoo S.A. <http://openerp.com>
+#
+#    This program is free software: you can redistribute it and/or modify
+#    it under the terms of the GNU Affero General Public License as
+#    published by the Free Software Foundation, either version 3 of the
+#    License, or (at your option) any later version.
+#
+#    This program is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU Affero General Public License for more details.
+#
+#    You should have received a copy of the GNU Affero General Public License
+#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+#
+##############################################################################
+
+import delivery_carrier
+import sale_order
+import stock_picking

--- a/None
+++ b/addons/delivery/models/delivery_carrier.py
@@ -0,0 +1,125 @@
+# -*- coding: utf-8 -*-
+##############################################################################
+#
+#    Odoo, Open Source Business Applications
+#    Copyright (c) 2015 Odoo S.A. <http://openerp.com>
+#
+#    This program is free software: you can redistribute it and/or modify
+#    it under the terms of the GNU Affero General Public License as
+#    published by the Free Software Foundation, either version 3 of the
+#    License, or (at your option) any later version.
+#
+#    This program is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU Affero General Public License for more details.
+#
+#    You should have received a copy of the GNU Affero General Public License
+#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+#
+##############################################################################
+
+import logging
+from openerp import models, fields, api
+from openerp.exceptions import UserError
+
+_logger = logging.getLogger(__name__)
+
+
+class DeliveryCarrier(models.Model):
+    _inherit = 'delivery.carrier'
+    ''' A Shipping Provider
+
+    In order to add your own external provider, follow these steps:
+
+    1. Create your model MyProvider that _inherit 'delivery.carrier'
+    2. Extend the selection of the field "delivery_type" with a pair
+       ('<my_provider>', 'My Provider')
+    3. Add your methods:
+       <my_provider>_get_shipping_price_from_so
+       <my_provider>_send_shipping
+       <my_provider>_open_tracking_page
+       <my_provider>_cancel_shipment
+       (they are documented hereunder)
+    '''
+
+    # -------------------------------- #
+    # Internals for shipping providers #
+    # -------------------------------- #
+
+    delivery_type = fields.Selection([('grid', 'Default Delivery')], string="Delivery Type", default='grid', required='True')
+
+    price = fields.Float(compute='get_price')
+    available = fields.Boolean(compute='get_price')
+
+    @api.one
+    def get_price(self):
+        SaleOrder = self.env['sale.order']
+
+        self.available = False
+        self.price = False
+
+        order_id = self.env.context.get('order_id')
+        if order_id:
+            # FIXME: temporary hack until we refactor the delivery API in master
+
+            if self.delivery_type != 'grid':
+                try:
+                    order = SaleOrder.browse(order_id)
+                    self.price = self.get_shipping_price_from_so(order)[0]
+                    self.available = True
+                except UserError as e:
+                        # no suitable delivery method found, probably configuration error
+                        _logger.info("Carrier %s: %s, not found", self.name, e.name)
+                        self.price = 0.0
+            else:
+                res = super(DeliveryCarrier, self).get_price('price', [])
+                self.available = res[self.id]['available']
+                self.price = res[self.id]['price']
+
+    # -------------------------- #
+    # API for external providers #
+    # -------------------------- #
+
+    # TODO define and handle exceptions that could be thrown by providers
+
+    def get_shipping_price_from_so(self, orders):
+        ''' For every sale order, compute the price of the shipment
+
+        :param orders: A recordset of sale orders
+        :return list: A list of floats, containing the estimated price for the shipping of the sale order
+        '''
+        self.ensure_one()
+        if hasattr(self, '%s_get_shipping_price_from_so' % self.delivery_type):
+            return getattr(self, '%s_get_shipping_price_from_so' % self.delivery_type)(orders)
+
+    def send_shipping(self, pickings):
+        ''' Send the package to the service provider
+
+        :param pickings: A recordset of pickings
+        :return list: A list of dictionaries (one per picking) containing of the form::
+                         { 'exact_price': price,
+                           'tracking_number': number }
+        '''
+        self.ensure_one()
+        if hasattr(self, '%s_send_shipping' % self.delivery_type):
+            return getattr(self, '%s_send_shipping' % self.delivery_type)(pickings)
+
+    def get_tracking_link(self, pickings):
+        ''' Ask the tracking link to the service provider
+
+        :param pickings: A recordset of pickings
+        :return list: A list of string URLs, containing the tracking links for every picking
+        '''
+        self.ensure_one()
+        if hasattr(self, '%s_get_tracking_link' % self.delivery_type):
+            return getattr(self, '%s_get_tracking_link' % self.delivery_type)(pickings)
+
+    def cancel_shipment(self, pickings):
+        ''' Cancel a shipment
+
+        :param pickings: A recordset of pickings
+        '''
+        self.ensure_one()
+        if hasattr(self, '%s_cancel_shipment' % self.delivery_type):
+            return getattr(self, '%s_cancel_shipment' % self.delivery_type)(pickings)

--- a/None
+++ b/addons/delivery/models/sale_order.py
@@ -0,0 +1,76 @@
+# -*- coding: utf-8 -*-
+##############################################################################
+#
+#    Odoo, Open Source Business Applications
+#    Copyright (c) 2015 Odoo S.A. <http://openerp.com>
+#
+#    This program is free software: you can redistribute it and/or modify
+#    it under the terms of the GNU Affero General Public License as
+#    published by the Free Software Foundation, either version 3 of the
+#    License, or (at your option) any later version.
+#
+#    This program is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU Affero General Public License for more details.
+#
+#    You should have received a copy of the GNU Affero General Public License
+#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+#
+##############################################################################
+
+from openerp import models, fields, api, _
+from openerp.exceptions import UserError
+
+
+class SaleOrder(models.Model):
+    _inherit = 'sale.order'
+
+    delivery_price = fields.Float(string='Estimated Delivery Price', compute='_compute_delivery_price')
+
+    @api.depends('carrier_id', 'partner_id', 'order_line')
+    def _compute_delivery_price(self):
+        for order in self:
+            order.delivery_price = order.carrier_id.with_context(order_id=order.id).price
+
+    @api.multi
+    def delivery_set(self):
+
+        SaleOrderLine = self.env['sale.order.line']
+
+        # Remove delivery products from the sale order
+        self._delivery_unset()
+
+        for order in self:
+            if order.carrier_id and order.carrier_id.delivery_type != 'grid':
+                # Shipping providers are used when delivery_type is other than 'grid'
+
+                if order.state not in ('draft', 'sent'):
+                    raise UserError(_('The order state have to be draft to add delivery lines.'))
+
+                carrier = order.carrier_id
+                account_id = carrier.product_id.property_account_income.id
+                if not account_id:
+                    account_id = carrier.product_id.categ_id.property_account_income_categ.id
+
+                # Apply fiscal position
+                taxes = carrier.product_id.taxes_id
+                taxes_ids = taxes.ids
+                if order.partner_id and order.fiscal_position:
+                    account_id = order.fiscal_position.map_account(account_id)
+                    taxes_ids = order.fiscal_position.map_tax(taxes).ids
+
+                SaleOrderLine.create({
+                    'order_id': order.id,
+                    'name': order.carrier_id.name,
+                    'product_uom_qty': 1,
+                    'product_uom': order.carrier_id.product_id.uom_id.id,
+                    'product_id': order.carrier_id.product_id.id,
+                    'price_unit': order.carrier_id.get_shipping_price_from_so(order)[0],
+                    'tax_id': [(6, 0, taxes_ids)],
+                    'is_delivery': True
+                })
+
+            else:
+                # Classic grid-based carriers
+                super(SaleOrder, self).delivery_set()

--- a/None
+++ b/addons/delivery/models/stock_picking.py
@@ -0,0 +1,110 @@
+# -*- coding: utf-8 -*-
+##############################################################################
+#
+#    Odoo, Open Source Business Applications
+#    Copyright (c) 2015 Odoo S.A. <http://openerp.com>
+#
+#    This program is free software: you can redistribute it and/or modify
+#    it under the terms of the GNU Affero General Public License as
+#    published by the Free Software Foundation, either version 3 of the
+#    License, or (at your option) any later version.
+#
+#    This program is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU Affero General Public License for more details.
+#
+#    You should have received a copy of the GNU Affero General Public License
+#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+#
+##############################################################################
+
+from openerp import models, fields, api
+
+class StockPicking(models.Model):
+    _inherit = 'stock.picking'
+
+    carrier_price = fields.Float(string="Shipping Cost", readonly=True)
+    delivery_type = fields.Selection(related='carrier_id.delivery_type', readonly=True)
+
+    @api.multi
+    def do_transfer(self):
+        res = super(StockPicking, self).do_transfer()
+
+        if self.carrier_id and self.carrier_id.delivery_type != 'grid':
+            self.send_to_shipper()
+        return res
+
+    # Signature due to strange old api methods
+    @api.model
+    def _prepare_shipping_invoice_line(self, picking, invoice):
+        picking.ensure_one()
+        invoice.ensure_one()
+
+        carrier = picking.carrier_id
+
+        # No carrier
+        if not carrier:
+            return None
+        # Carrier already invoiced on the sale order
+        if any(inv_line.product_id.id == carrier.product_id.id for inv_line in invoice.invoice_line):
+            return None
+
+        # Classic carrier
+        if carrier.delivery_type == 'grid':
+            return super(StockPicking, self)._prepare_shipping_invoice_line(picking, invoice)
+
+        # Shipping provider
+        price = picking.carrier_price
+
+        account_id = carrier.product_id.property_account_income.id
+        if not account_id:
+            account_id = carrier.product_id.categ_id.property_account_income_categ.id
+
+        taxes = carrier.product_id.taxes_id
+        taxes_ids = taxes.ids
+
+        # Apply original SO fiscal position
+        if picking.sale_id.fiscal_position:
+            fpos = picking.sale_id.fiscal_position
+            account_id = fpos.map_account(account_id)
+            taxes_ids = fpos.map_tax(taxes).ids
+
+        res = {
+            'name': carrier.name,
+            'invoice_id': invoice.id,
+            'uos_id': carrier.product_id.uos_id.id,
+            'product_id': carrier.product_id.id,
+            'account_id': account_id,
+            'price_unit': price,
+            'quantity': 1,
+            'invoice_line_tax_id': [(6, 0, taxes_ids)],
+        }
+
+        return res
+
+    @api.one
+    def send_to_shipper(self):
+        res = self.carrier_id.send_shipping(self)[0]
+        self.carrier_price = res['exact_price']
+        self.carrier_tracking_ref = res['tracking_number']
+        msg = "Shipment sent to carrier %s for expedition with tracking number %s" % (self.carrier_id.name, self.carrier_tracking_ref)
+        self.message_post(body=msg)
+
+    @api.multi
+    def open_website_url(self):
+        self.ensure_one()
+
+        client_action = {'type': 'ir.actions.act_url',
+                         'name': "Shipment Tracking Page",
+                         'target': 'new',
+                         'url': self.carrier_id.get_tracking_link(self)[0]
+                         }
+        return client_action
+
+    @api.one
+    def cancel_shipment(self):
+        self.carrier_id.cancel_shipment(self)
+        msg = "Shipment %s cancelled" % self.carrier_tracking_ref
+        self.message_post(body=msg)
+        self.carrier_tracking_ref = False
