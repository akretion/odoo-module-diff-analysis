PR: https://github.com/odoo/odoo/pull/

From: 4c31a758cf0715b1c1ff2f5b3cef18fec92c2d84
From: jpr-odoo
Date: 2018-08-13 19:53:19

Structural Changes: 49
Total Changes: 448

[REF] various: move sale_payment and website_quote into sale and sale_management

[MOV] move sale_payment into sale
=================================

Almost all use cases of sale require sale_payment down the line.

There is only one case which does not: using sale_management without website_sale or website_quote.

However, since we want to move most of the features of website_quote into sale_management, moving sale_payement first will make the task easier.

[MOV] move website_quote into sale and sale_management
======================================================

We want to use some features of website_quote without having to install the whole module.

The main issue with website_quote was that it had a requirement on website.

What is common to website_sale and sale_management has been moved into sale. This is primarily the sales order portal view.

What is only related to sale_management has been moved into it. This is notably: sales order templates, optional products, sign and pay, ...

Everything that requires website has been moved into a new module named sale_quotation_builder. This is related to using the HTML builder to customize the quotation view.

Models, files and routes have been renamed to better convey their purpose and to follow guidelines more closely.

[IMP] merge sales order portal views
====================================

The old sales order view on the portal has been merged into the one from website_quote. The new view contains features of the two.

A lot of fixes and improvements have also been done, related to BS4 issues but also to improve the sales order view in general.

[IMP] add new settings
======================

The commit adds new settings related to activating the features that previously were activated by installing website_quote.

PR: #26345
Task: 49205, 1838924

================================= pseudo patch: =================================

--- a/addons/sale_management/models/__init__.py
+++ b/addons/sale_management/models/__init__.py
@@ -1,3 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 from . import digest
+from . import res_config_settings
+from . import res_users
+from . import sale_order
+from . import sale_order_template

--- a/None
+++ b/addons/sale_management/models/res_config_settings.py
@@ -0,0 +1,17 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models, api
+
+
+class ResConfigSettings(models.TransientModel):
+    _inherit = 'res.config.settings'
+
+    group_sale_order_template = fields.Boolean("Quotation Templates", implied_group='sale_management.group_sale_order_template')
+    default_sale_order_template_id = fields.Many2one('sale.order.template', default_model='sale.order', string='Default Template')
+    module_sale_quotation_builder = fields.Boolean("Quotation Builder")
+
+    @api.onchange('group_sale_order_template')
+    def _onchange_group_sale_order_template(self):
+        if not self.group_sale_order_template:
+            self.module_sale_quotation_builder = False

--- a/None
+++ b/addons/sale_management/models/res_users.py
@@ -0,0 +1,13 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import fields, models
+
+
+class ResUsers(models.Model):
+    _inherit = 'res.users'
+
+    has_group_sale_order_template = fields.Boolean(
+        "Quotation Templates",
+        compute='_compute_groups_id', inverse='_inverse_groups_id',
+        group_xml_id='sale_management.group_sale_order_template')

--- a/None
+++ b/addons/sale_management/models/sale_order.py
@@ -0,0 +1,283 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from datetime import datetime, timedelta
+
+from odoo import api, fields, models, _
+from odoo.addons import decimal_precision as dp
+from odoo.exceptions import UserError
+
+from werkzeug.urls import url_encode
+
+
+class SaleOrder(models.Model):
+    _inherit = 'sale.order'
+
+    def _get_default_sale_order_template(self):
+        if not self.env.user.has_group('sale_management.group_sale_order_template'):
+            return False
+        template = self.env.ref('sale_management.sale_order_template_default', raise_if_not_found=False)
+        return template if template and template.active else False
+
+    def _get_default_require_signature(self):
+        default_template = self._get_default_sale_order_template()
+        if default_template:
+            return default_template.require_signature
+        else:
+            return False
+
+    def _get_default_require_payment(self):
+        default_template = self._get_default_sale_order_template()
+        if default_template:
+            return default_template.require_payment
+        else:
+            return False
+
+    sale_order_template_id = fields.Many2one(
+        'sale.order.template', 'Quotation Template',
+        readonly=True,
+        states={'draft': [('readonly', False)], 'sent': [('readonly', False)]},
+        default=_get_default_sale_order_template)
+    sale_order_option_ids = fields.One2many(
+        'sale.order.option', 'order_id', 'Optional Products Lines',
+        copy=True, readonly=True,
+        states={'draft': [('readonly', False)], 'sent': [('readonly', False)]})
+    require_signature = fields.Boolean('Online Signature', default=_get_default_require_signature,
+                                       states={'sale': [('readonly', True)], 'done': [('readonly', True)]},
+                                       help='Request a online signature to the customer in order to confirm orders automatically.')
+    require_payment = fields.Boolean('Electronic Payment', default=_get_default_require_payment,
+                                     states={'sale': [('readonly', True)], 'done': [('readonly', True)]},
+                                     help='Request an electronic payment to the customer in order to confirm orders automatically.')
+
+    @api.multi
+    @api.returns('self', lambda value: value.id)
+    def copy(self, default=None):
+        if self.sale_order_template_id and self.sale_order_template_id.number_of_days > 0:
+            default = dict(default or {})
+            default['validity_date'] = fields.Date.to_string(datetime.now() + timedelta(self.sale_order_template_id.number_of_days))
+        return super(SaleOrder, self).copy(default=default)
+
+    @api.onchange('partner_id')
+    def onchange_partner_id(self):
+        super(SaleOrder, self).onchange_partner_id()
+        self.note = self.sale_order_template_id.note or self.note
+
+    def _compute_line_data_for_template_change(self, line):
+        return {
+            'display_type': line.display_type,
+            'name': line.name,
+            'state': 'draft',
+        }
+
+    def _compute_option_data_for_template_change(self, option):
+        if self.pricelist_id:
+            price = self.pricelist_id.with_context(uom=option.uom_id.id).get_product_price(option.product_id, 1, False)
+        else:
+            price = option.price_unit
+        return {
+            'product_id': option.product_id.id,
+            'name': option.name,
+            'quantity': option.quantity,
+            'uom_id': option.uom_id.id,
+            'price_unit': price,
+            'discount': option.discount,
+        }
+
+    @api.onchange('sale_order_template_id')
+    def onchange_sale_order_template_id(self):
+        if not self.sale_order_template_id:
+            self.require_signature = False
+            self.require_payment = False
+            return
+        template = self.sale_order_template_id.with_context(lang=self.partner_id.lang)
+
+        order_lines = [(5, 0, 0)]
+        for line in template.sale_order_template_line_ids:
+            data = self._compute_line_data_for_template_change(line)
+            if line.product_id:
+                discount = 0
+                if self.pricelist_id:
+                    price = self.pricelist_id.with_context(uom=line.product_uom_id.id).get_product_price(line.product_id, 1, False)
+                    if self.pricelist_id.discount_policy == 'without_discount' and line.price_unit:
+                        discount = (line.price_unit - price) / line.price_unit * 100
+                        price = line.price_unit
+
+                else:
+                    price = line.price_unit
+
+                data.update({
+                    'price_unit': price,
+                    'discount': 100 - ((100 - discount) * (100 - line.discount) / 100),
+                    'product_uom_qty': line.product_uom_qty,
+                    'product_id': line.product_id.id,
+                    'product_uom': line.product_uom_id.id,
+                    'customer_lead': self._get_customer_lead(line.product_id.product_tmpl_id),
+                })
+                if self.pricelist_id:
+                    data.update(self.env['sale.order.line']._get_purchase_price(self.pricelist_id, line.product_id, line.product_uom_id, fields.Date.context_today(self)))
+            order_lines.append((0, 0, data))
+
+        self.order_line = order_lines
+        self.order_line._compute_tax_id()
+
+        option_lines = []
+        for option in template.sale_order_template_option_ids:
+            data = self._compute_option_data_for_template_change(option)
+            option_lines.append((0, 0, data))
+        self.sale_order_option_ids = option_lines
+
+        if template.number_of_days > 0:
+            self.validity_date = fields.Date.to_string(datetime.now() + timedelta(template.number_of_days))
+
+        self.require_signature = template.require_signature
+        self.require_payment = template.require_payment
+
+        if template.note:
+            self.note = template.note
+
+    @api.multi
+    def preview_sale_order(self):
+        self.ensure_one()
+        return {
+            'type': 'ir.actions.act_url',
+            'target': 'self',
+            'url': self.get_portal_url(),
+        }
+
+    @api.multi
+    def get_access_action(self, access_uid=None):
+        """ Instead of the classic form view, redirect to the online quote if it exists. """
+        self.ensure_one()
+        user = access_uid and self.env['res.users'].sudo().browse(access_uid) or self.env.user
+
+        if not self.sale_order_template_id or (not user.share and not self.env.context.get('force_website')):
+            return super(SaleOrder, self).get_access_action(access_uid)
+        return {
+            'type': 'ir.actions.act_url',
+            'url': self.get_portal_url(),
+            'target': 'self',
+            'res_id': self.id,
+        }
+
+    def _get_share_url(self, redirect=False, signup_partner=False):
+        self.ensure_one()
+        if self.state not in ['sale', 'done']:
+            auth_param = url_encode(self.partner_id.signup_get_auth_param()[self.partner_id.id])
+            return self.get_portal_url() + '&%s' % auth_param
+        return super(SaleOrder, self)._get_share_url(redirect)
+
+    def get_portal_confirmation_action(self):
+        """ Template override default behavior of pay / sign chosen in sales settings """
+        if self.sale_order_template_id:
+            if self.require_signature and not self.signature:
+                return 'sign'
+            elif self.require_payment:
+                return 'pay'
+            else:
+                return 'none'
+        return super(SaleOrder, self).get_portal_confirmation_action()
+
+    def has_to_be_signed(self):
+        res = super(SaleOrder, self).has_to_be_signed()
+        return self.require_signature if self.sale_order_template_id else res
+
+    def has_to_be_paid(self):
+        res = super(SaleOrder, self).has_to_be_paid()
+        return self.require_payment if self.sale_order_template_id else res
+
+    @api.multi
+    def action_confirm(self):
+        res = super(SaleOrder, self).action_confirm()
+        for order in self:
+            if order.sale_order_template_id and order.sale_order_template_id.mail_template_id:
+                self.sale_order_template_id.mail_template_id.send_mail(order.id)
+        return res
+
+    @api.multi
+    def _get_payment_type(self):
+        self.ensure_one()
+        return 'form_save' if self.require_payment else 'form'
+
+
+class SaleOrderLine(models.Model):
+    _inherit = "sale.order.line"
+    _description = "Sales Order Line"
+
+    sale_order_option_ids = fields.One2many('sale.order.option', 'line_id', 'Optional Products Lines')
+
+    # Take the description on the order template if the product is present in it
+    @api.onchange('product_id')
+    def product_id_change(self):
+        domain = super(SaleOrderLine, self).product_id_change()
+        if self.product_id and self.order_id.sale_order_template_id:
+            for line in self.order_id.sale_order_template_id.sale_order_template_line_ids:
+                if line.product_id == self.product_id:
+                    self.name = line.name
+                    break
+        return domain
+
+
+class SaleOrderOption(models.Model):
+    _name = "sale.order.option"
+    _description = "Sale Options"
+    _order = 'sequence, id'
+
+    order_id = fields.Many2one('sale.order', 'Sales Order Reference', ondelete='cascade', index=True)
+    line_id = fields.Many2one('sale.order.line', on_delete="set null")
+    name = fields.Text('Description', required=True)
+    product_id = fields.Many2one('product.product', 'Product', domain=[('sale_ok', '=', True)])
+    price_unit = fields.Float('Unit Price', required=True, digits=dp.get_precision('Product Price'))
+    discount = fields.Float('Discount (%)', digits=dp.get_precision('Discount'))
+    uom_id = fields.Many2one('uom.uom', 'Unit of Measure ', required=True)
+    quantity = fields.Float('Quantity', required=True, digits=dp.get_precision('Product UoS'), default=1)
+    sequence = fields.Integer('Sequence', help="Gives the sequence order when displaying a list of suggested product.")
+
+    @api.onchange('product_id', 'uom_id')
+    def _onchange_product_id(self):
+        if not self.product_id:
+            return
+        product = self.product_id.with_context(lang=self.order_id.partner_id.lang)
+        self.price_unit = product.list_price
+        self.name = product.name
+        if product.description_sale:
+            self.name += '\n' + product.description_sale
+        self.uom_id = self.uom_id or product.uom_id
+        pricelist = self.order_id.pricelist_id
+        if pricelist and product:
+            partner_id = self.order_id.partner_id.id
+            self.price_unit = pricelist.with_context(uom=self.uom_id.id).get_product_price(product, self.quantity, partner_id)
+        domain = {'uom_id': [('category_id', '=', self.product_id.uom_id.category_id.id)]}
+        return {'domain': domain}
+
+    @api.multi
+    def button_add_to_order(self):
+        self.add_option_to_order()
+        return {'type': 'ir.actions.client', 'tag': 'reload'}
+
+    @api.multi
+    def add_option_to_order(self):
+        self.ensure_one()
+
+        sale_order = self.order_id
+
+        if sale_order.state not in ['draft', 'sent']:
+            raise UserError(_('You cannot add options to a confirmed order.'))
+
+        values = self._get_values_to_add_to_order()
+        order_line = self.env['sale.order.line'].create(values)
+        order_line._compute_tax_id()
+
+        self.write({'line_id': order_line.id})
+
+    @api.multi
+    def _get_values_to_add_to_order(self):
+        self.ensure_one()
+        return {
+            'order_id': self.order_id.id,
+            'price_unit': self.price_unit,
+            'name': self.name,
+            'product_id': self.product_id.id,
+            'product_uom_qty': self.quantity,
+            'product_uom': self.uom_id.id,
+            'discount': self.discount,
+        }

--- a/None
+++ b/addons/sale_management/models/sale_order_template.py
@@ -0,0 +1,131 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+from odoo.addons import decimal_precision as dp
+from odoo.exceptions import UserError
+
+
+class SaleOrderTemplate(models.Model):
+    _name = "sale.order.template"
+    _description = "Quotation Template"
+
+    def _get_default_require_signature(self):
+        # A confirmation mode (sign or pay) is mandatory on a quotation template
+        # If none has been activated in the settings, we force 'sign' as confirmation mode
+        if not self.env.user.company_id.portal_confirmation_pay:
+            return True
+        return self.env.user.company_id.portal_confirmation_sign
+
+    def _get_default_require_payment(self):
+        return self.env.user.company_id.portal_confirmation_pay
+
+    name = fields.Char('Quotation Template', required=True)
+    sale_order_template_line_ids = fields.One2many('sale.order.template.line', 'sale_order_template_id', 'Lines', copy=True)
+    note = fields.Text('Terms and conditions')
+    sale_order_template_option_ids = fields.One2many('sale.order.template.option', 'sale_order_template_id', 'Optional Lines', copy=True)
+    number_of_days = fields.Integer('Quotation Duration',
+        help='Number of days for the validity date computation of the quotation')
+    require_signature = fields.Boolean('Online Signature', default=_get_default_require_signature, help='Request a online signature to the customer in order to confirm orders automatically.')
+    require_payment = fields.Boolean('Electronic Payment', default=_get_default_require_payment, help='Request an electronic payment to the customer in order to confirm orders automatically.')
+    mail_template_id = fields.Many2one(
+        'mail.template', 'Confirmation Mail',
+        domain=[('model', '=', 'sale.order')],
+        help="This e-mail template will be sent on confirmation. Leave empty to send nothing.")
+    active = fields.Boolean(default=True, help="If unchecked, it will allow you to hide the quotation template without removing it.")
+
+
+class SaleOrderTemplateLine(models.Model):
+    _name = "sale.order.template.line"
+    _description = "Quotation Template Line"
+    _order = 'sale_order_template_id, sequence, id'
+
+    sequence = fields.Integer('Sequence', help="Gives the sequence order when displaying a list of sale quote lines.",
+        default=10)
+    sale_order_template_id = fields.Many2one('sale.order.template', 'Quotation Template Reference', required=True,
+        ondelete='cascade', index=True)
+    name = fields.Text('Description', required=True, translate=True)
+    product_id = fields.Many2one('product.product', 'Product', domain=[('sale_ok', '=', True)])
+    price_unit = fields.Float('Unit Price', required=True, digits=dp.get_precision('Product Price'))
+    discount = fields.Float('Discount (%)', digits=dp.get_precision('Discount'), default=0.0)
+    product_uom_qty = fields.Float('Quantity', required=True, digits=dp.get_precision('Product UoS'), default=1)
+    product_uom_id = fields.Many2one('uom.uom', 'Unit of Measure')
+
+    display_type = fields.Selection([
+        ('line_section', "Section"),
+        ('line_note', "Note")], default=False, help="Technical field for UX purpose.")
+
+    @api.onchange('product_id')
+    def _onchange_product_id(self):
+        self.ensure_one()
+        if self.product_id:
+            name = self.product_id.name_get()[0][1]
+            if self.product_id.description_sale:
+                name += '\n' + self.product_id.description_sale
+            self.name = name
+            self.price_unit = self.product_id.lst_price
+            self.product_uom_id = self.product_id.uom_id.id
+            domain = {'product_uom_id': [('category_id', '=', self.product_id.uom_id.category_id.id)]}
+            return {'domain': domain}
+
+    @api.onchange('product_uom_id')
+    def _onchange_product_uom(self):
+        if self.product_id and self.product_uom_id:
+            self.price_unit = self.product_id.uom_id._compute_price(self.product_id.lst_price, self.product_uom_id)
+
+    @api.model
+    def create(self, values):
+        if values.get('display_type', self.default_get(['display_type'])['display_type']):
+            values.update(product_id=False, price_unit=0, product_uom_qty=0, product_uom_id=False)
+        return super(SaleOrderTemplateLine, self).create(values)
+
+    @api.multi
+    def write(self, values):
+        if 'display_type' in values and self.filtered(lambda line: line.display_type != values.get('display_type')):
+            raise UserError("You cannot change the type of a sale quote line. Instead you should delete the current line and create a new line of the proper type.")
+        return super(SaleOrderTemplateLine, self).write(values)
+
+    _sql_constraints = [
+        ('accountable_product_id_required',
+            "CHECK(display_type IS NOT NULL OR (product_id IS NOT NULL AND product_uom_id IS NOT NULL))",
+            "Missing required product and UoM on accountable sale quote line."),
+
+        ('non_accountable_fields_null',
+            "CHECK(display_type IS NULL OR (product_id IS NULL AND price_unit = 0 AND product_uom_qty = 0 AND product_uom_id IS NULL))",
+            "Forbidden product, unit price, quantity, and UoM on non-accountable sale quote line"),
+    ]
+
+
+class SaleOrderTemplateOption(models.Model):
+    _name = "sale.order.template.option"
+    _description = "Quotation Template Option"
+
+    sale_order_template_id = fields.Many2one('sale.order.template', 'Quotation Template Reference', ondelete='cascade',
+        index=True, required=True)
+    name = fields.Text('Description', required=True, translate=True)
+    product_id = fields.Many2one('product.product', 'Product', domain=[('sale_ok', '=', True)], required=True)
+    price_unit = fields.Float('Unit Price', required=True, digits=dp.get_precision('Product Price'))
+    discount = fields.Float('Discount (%)', digits=dp.get_precision('Discount'))
+    uom_id = fields.Many2one('uom.uom', 'Unit of Measure ', required=True)
+    quantity = fields.Float('Quantity', required=True, digits=dp.get_precision('Product UoS'), default=1)
+
+    @api.onchange('product_id')
+    def _onchange_product_id(self):
+        if not self.product_id:
+            return
+        product = self.product_id
+        self.price_unit = product.list_price
+        self.name = product.name
+        self.uom_id = product.uom_id
+        domain = {'uom_id': [('category_id', '=', self.product_id.uom_id.category_id.id)]}
+        return {'domain': domain}
+
+    @api.onchange('uom_id')
+    def _onchange_product_uom(self):
+        if not self.product_id:
+            return
+        if not self.uom_id:
+            self.price_unit = 0.0
+            return
+        if self.uom_id.id != self.product_id.uom_id.id:
+            self.price_unit = self.product_id.uom_id._compute_price(self.price_unit, self.uom_id)
