PR: https://github.com/odoo/odoo/pull/67331

From: 04522f01e6fdbf82a657b32b312449fd7d756f79
From: Nicolas (vin)
Date: 2021-06-03 10:00:26

Breaking data model changes scores: del:3 + add:1, change matches:
-    _inherit = 'account.chart.template'
-    related_partner_ids = fields.Many2many(
+    suitable_payment_token_ids = fields.Many2many(

Total Changes: 244

[IMP] account: allows multiple payment acquirers on a journal.

Users may want to be able to have transactions coming from multiple
payment acquirers to be registered in the same journal.

This will allows that.

Task id #2414749

closes odoo/odoo#67331

Related: odoo/upgrade#2500
Related: odoo/enterprise#17258
Signed-off-by: William Andr√© (wan) <wan@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment/models/__init__.py
+++ b/addons/payment/models/__init__.py
@@ -1,6 +1,5 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import account_chart_template
 from . import account_payment
 from . import account_move
 from . import ir_http
@@ -11,3 +10,4 @@ from . import payment_token
 from . import payment_transaction
 from . import res_company
 from . import res_partner
+from . import account_journal

--- a/addons/payment/models/account_chart_template.py
+++ b/None
@@ -1,13 +0,0 @@
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import models
-
-
-class AccountChartTemplate(models.Model):
-    _inherit = 'account.chart.template'
-
-    def _create_bank_journals(self, company, acc_template_ref):
-        res = super()._create_bank_journals(company, acc_template_ref)
-
-        # Try to generate the missing journals
-        return res + self.env['payment.acquirer']._create_missing_journals(company=company)

--- a/None
+++ b/addons/payment/models/account_journal.py
@@ -0,0 +1,32 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import _, api, models
+from odoo.exceptions import UserError
+
+
+class AccountJournal(models.Model):
+    _inherit = "account.journal"
+
+    @api.constrains('inbound_payment_method_line_ids')
+    def _check_inbound_payment_method_line_ids(self):
+        """
+        Check and ensure that the user do not remove a apml that is linked to an acquirer in the test or enabled state.
+        """
+        self.env['account.payment.method'].flush(['code', 'payment_type'])
+        self.env['account.payment.method.line'].flush(['payment_method_id'])
+        self.env['payment.acquirer'].flush(['provider', 'state'])
+
+        self._cr.execute('''
+            SELECT acquirer.id
+            FROM payment_acquirer acquirer
+            JOIN account_payment_method apm ON apm.code = acquirer.provider
+            LEFT JOIN account_payment_method_line apml ON apm.id = apml.payment_method_id
+            WHERE acquirer.state IN ('enabled', 'test') AND apm.payment_type = 'inbound'
+            AND apml.id IS NULL
+        ''')
+        ids = [r[0] for r in self._cr.fetchall()]
+        acquirers = self.env['payment.acquirer'].browse(ids)
+        if acquirers:
+            raise UserError(_("You can't delete a payment method that is linked to an acquirer in the enabled or test state.\n"
+                              "Linked acquirer(s): %s", ', '.join(a.display_name for a in acquirers)))

--- a/addons/payment/models/account_payment.py
+++ b/addons/payment/models/account_payment.py
@@ -1,35 +1,58 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import _, api, fields, models
+from odoo import _, api, Command, fields, models
 from odoo.exceptions import ValidationError
 
 
 class AccountPayment(models.Model):
     _inherit = 'account.payment'
 
+    # == Business fields ==
     payment_transaction_id = fields.Many2one(
         string="Payment Transaction", comodel_name='payment.transaction', readonly=True)
     payment_token_id = fields.Many2one(
         string="Saved Payment Token", comodel_name='payment.token', domain="""[
-            (payment_method_code == 'electronic', '=', 1),
-            ('company_id', '=', company_id),
-            ('acquirer_id.capture_manually', '=', False),
-            ('acquirer_id.journal_id', '=', journal_id),
-            ('partner_id', 'in', related_partner_ids),
+            ('id', 'in', suitable_payment_token_ids),
         ]""",
         help="Note that only tokens from acquirers allowing to capture the amount are available.")
-    related_partner_ids = fields.Many2many(
-        comodel_name='res.partner', compute='_compute_related_partners')
 
-    @api.depends('partner_id.commercial_partner_id.child_ids')
-    def _compute_related_partners(self):
+    # == Display purpose fields ==
+    suitable_payment_token_ids = fields.Many2many(
+        comodel_name='payment.token',
+        compute='_compute_suitable_payment_token_ids'
+    )
+    use_electronic_payment_method = fields.Boolean(
+        compute='_compute_use_electronic_payment_method',
+        help='Technical field used to hide or show the payment_token_id if needed.'
+    )
+
+    @api.depends('payment_method_id')
+    def _compute_suitable_payment_token_ids(self):
         for payment in self:
-            payment.related_partner_ids = (
+            related_partner_ids = (
                     payment.partner_id
                     | payment.partner_id.commercial_partner_id
                     | payment.partner_id.commercial_partner_id.child_ids
             )._origin
 
+            if payment.use_electronic_payment_method:
+                payment.suitable_payment_token_ids = self.env['payment.token'].search([
+                    ('company_id', '=', payment.company_id.id),
+                    ('acquirer_id.capture_manually', '=', False),
+                    ('partner_id', 'in', related_partner_ids.ids),
+                ]).filtered(lambda t: t.acquirer_id.journal_id == payment.journal_id.id)
+            else:
+                payment.suitable_payment_token_ids = [Command.clear()]
+
+    @api.depends('payment_method_id')
+    def _compute_use_electronic_payment_method(self):
+        for payment in self:
+            # Get a list of all electronic payment method codes.
+            # These codes are comprised of 'electronic' and the providers of each payment acquirer.
+            codes = [key for key in dict(self.env['payment.acquirer']._fields['provider']._description_selection(self.env))]
+            codes.append('electronic')
+            payment.use_electronic_payment_method = payment.payment_method_code in codes
+
     @api.onchange('partner_id', 'payment_method_id', 'journal_id')
     def _onchange_set_payment_token_id(self):
         if not (self.payment_method_code == 'electronic' and self.partner_id and self.journal_id):

--- a/addons/payment/models/payment_acquirer.py
+++ b/addons/payment/models/payment_acquirer.py
@@ -1,7 +1,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 import logging
-import psycopg2
 
 from odoo import _, api, fields, models, SUPERUSER_ID
 from odoo.exceptions import ValidationError
@@ -10,12 +9,6 @@ from odoo.osv import expression
 _logger = logging.getLogger(__name__)
 
 
-def create_missing_journals(cr, registry):
-    """ Post-init hook responsible for the creation of a journal for all acquirers missing one. """
-    env = api.Environment(cr, SUPERUSER_ID, {})
-    env['payment.acquirer']._create_missing_journals()
-
-
 class PaymentAcquirer(models.Model):
     _name = 'payment.acquirer'
     _description = 'Payment Acquirer'
@@ -66,9 +59,9 @@ class PaymentAcquirer(models.Model):
              "If none is set, it is available for all countries.")
     journal_id = fields.Many2one(
         string="Payment Journal", comodel_name='account.journal',
-        copy=False,
+        compute='_compute_journal_id', inverse='_inverse_journal_id',
         help="The journal in which the successful transactions are posted",
-        domain="[('type', 'in', ['bank', 'cash']), ('company_id', '=', company_id)]")
+        domain="[('type', '=', 'bank'), ('company_id', '=', company_id)]")
 
     # Fees fields
     fees_active = fields.Boolean(string="Add Extra Fees")
@@ -171,30 +164,33 @@ class PaymentAcquirer(models.Model):
             'show_cancel_msg': True,
         })
 
-    #=== ONCHANGE METHODS ===#
-
-    @api.onchange('state')
-    def _onchange_state(self):
-        """ Only enable dashboard display for journals of enabled acquirers.
-
-        :return: None
-        """
+    def _compute_journal_id(self):
         for acquirer in self:
-            acquirer.journal_id.show_on_dashboard = acquirer.state == 'enabled'
-
-    @api.onchange('allow_tokenization')
-    def _onchange_allow_tokenization(self):
-        """ Add (remove) the electronic payment method for acquirers (not) allowing tokenization.
+            payment_method = self.env['account.payment.method.line'].search([
+                ('journal_id.company_id', '=', acquirer.company_id.id),
+                ('code', '=', acquirer.provider)
+            ], limit=1)
+            if payment_method:
+                acquirer.journal_id = payment_method.journal_id
+            else:
+                acquirer.journal_id = False
 
-        :return: None
-        """
-        electronic = self.env.ref('payment.account_payment_method_electronic_in')
+    def _inverse_journal_id(self):
         for acquirer in self:
-            if acquirer.allow_tokenization:
-                if electronic not in acquirer.journal_id.inbound_payment_method_ids:
-                    acquirer.journal_id.inbound_payment_method_ids = [(4, electronic.id)]
-            elif electronic in acquirer.journal_id.inbound_payment_method_ids:
-                acquirer.journal_id.inbound_payment_method_ids = [(3, electronic.id)]
+            payment_method = self.env['account.payment.method.line'].search([
+                ('journal_id.company_id', '=', acquirer.company_id.id),
+                ('code', '=', acquirer.provider)
+            ], limit=1)
+            if acquirer.journal_id:
+                if not payment_method:
+                    self.env['account.payment.method.line'].create({
+                        'payment_method_id': self._get_default_payment_method(),
+                        'journal_id': self.journal_id.id,
+                    })
+                else:
+                    payment_method.journal_id = acquirer.journal_id
+            elif payment_method:
+                payment_method.unlink()
 
     #=== CONSTRAINT METHODS ===#
 
@@ -250,95 +246,6 @@ class PaymentAcquirer(models.Model):
                 _("The following fields must be filled: %s", ", ".join(field_names))
             )
 
-    @api.model
-    def _create_missing_journals(self, company=None):
-        """ Create a journal for installed acquirers missing one.
-
-        Each acquirer must have its own journal. It can't however be created along the
-        `payment.acquirer` record because there is no guarantee that the chart template is already
-        installed.
-
-        :param recordset company: The company for which the journals are created, as a `res.company`
-                                  recordset
-        :return: The created journals
-        :rtype: recordset of `account.journal`
-        """
-        # Search for installed acquirer modules having no journal for the current company
-        company = company or self.env.company
-        acquirers = self.env['payment.acquirer'].search([
-            ('journal_id', '=', False),
-            ('company_id', '=', company.id),
-            ('module_state', 'in', ('to install', 'installed')),
-        ])
-
-        # Create or find the missing journals.
-        # This is done in this order and not the other way around because the most common cause for
-        # a missing journal is the first install of an acquirer's module. The other (less common)
-        # cause is a re-install. In this last case, the creation will fail because of a unique
-        # constraint violation, we catch the error, and fallback on searching the previous journal.
-        Journal = journals = self.env['account.journal']
-        for acquirer in acquirers.filtered('company_id.chart_template_id'):
-            try:
-                with self.env.cr.savepoint():
-                    journal = Journal.create(acquirer._get_journal_create_values())
-            except psycopg2.IntegrityError as error:  # Journal already exists
-                if error.pgcode == psycopg2.errorcodes.UNIQUE_VIOLATION:
-                    journal = Journal.search(acquirer._get_journal_search_domain(), limit=1)
-                else:
-                    raise error
-            acquirer.journal_id = journal
-            journals += journal
-        return journals
-
-    def _get_journal_create_values(self):
-        """ Return a dict of values to create the acquirer's journal.
-
-        Note: self.ensure_one()
-
-        :return: The dict of create values for `account.journal`
-        :rtype: dict
-        """
-        self.ensure_one()
-
-        account_vals = self.company_id.chart_template_id. \
-            _prepare_transfer_account_for_direct_creation(self.name, self.company_id)
-        account = self.env['account.account'].create(account_vals)
-        inbound_payment_method_ids = []
-        if self.allow_tokenization:
-            inbound_payment_method_ids.append(
-                (4, self.env.ref('payment.account_payment_method_electronic_in').id)
-            )
-        return {
-            'name': self.name,
-            'code': self.name.upper(),
-            'sequence': 999,
-            'type': 'bank',
-            'company_id': self.company_id.id,
-            'default_account_id': account.id,
-            # Show the journal on dashboard if the acquirer is published on the website.
-            'show_on_dashboard': self.state == 'enabled',
-            # Don't show payment methods in the backend
-            'inbound_payment_method_ids': inbound_payment_method_ids,
-            'outbound_payment_method_ids': [],
-        }
-
-    def _get_journal_search_domain(self):
-        """ Return a domain for searching a journal corresponding to the acquirer.
-
-        Note: self.ensure_one()
-
-        :return: The search domain
-        :rtype: list
-        """
-        self.ensure_one()
-
-        code_cutoff = self.env['account.journal']._fields['code'].size
-        return [
-            ('name', '=', self.name),
-            ('code', '=', self.name.upper()[:code_cutoff]),
-            ('company_id', '=', self.company_id.id),
-        ]
-
     #=== ACTION METHODS ===#
 
     def button_immediate_install(self):
@@ -481,3 +388,7 @@ class PaymentAcquirer(models.Model):
         """
         self.ensure_one()
         return self.journal_id.currency_id or self.company_id.currency_id
+
+    def _get_default_payment_method(self):
+        self.ensure_one()
+        return self.env.ref('account.account_payment_method_manual_in').id

--- a/addons/payment/models/payment_transaction.py
+++ b/addons/payment/models/payment_transaction.py
@@ -819,6 +819,7 @@ class PaymentTransaction(models.Model):
         """
         self.ensure_one()
 
+        payment_method = self.env['account.payment.method'].search([('code', '=', self.acquirer_id.provider)], limit=1)
         payment_values = {
             'amount': self.amount,
             'payment_type': 'inbound' if self.amount > 0 else 'outbound',
@@ -827,7 +828,7 @@ class PaymentTransaction(models.Model):
             'partner_type': 'customer',
             'journal_id': self.acquirer_id.journal_id.id,
             'company_id': self.acquirer_id.company_id.id,
-            'payment_method_id': self.env.ref('payment.account_payment_method_electronic_in').id,
+            'payment_method_id': payment_method.id,
             'payment_token_id': self.token_id.id,
             'payment_transaction_id': self.id,
             'ref': self.reference,
