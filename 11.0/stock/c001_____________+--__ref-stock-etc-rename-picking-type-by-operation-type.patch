PR: https://github.com/odoo/odoo/pull/

From: 5c837dec2aa913e38f974a8d6c742199bda490ea
From: Dhaval Panchal
Date: 2017-02-17 12:21:58

Structural Changes: 9
Total Changes: 32

[REF] stock, etc: rename picking type by operation type

As picking types aren't always used in a picking context, and picking
aren't really meanigful for a lot of people, we rename this concept as
"operation type" in views and in the planner.

================================= pseudo patch: =================================

--- a/addons/stock/models/procurement.py
+++ b/addons/stock/models/procurement.py
@@ -34,9 +34,9 @@ class ProcurementRule(models.Model):
         help="""Determines the procurement method of the stock move that will be generated: whether it will need to 'take from the available stock' in its source location or needs to ignore its stock and create a procurement over there.""")
     route_sequence = fields.Integer('Route Sequence', related='route_id.sequence', store=True)
     picking_type_id = fields.Many2one(
-        'stock.picking.type', 'Picking Type',
+        'stock.picking.type', 'Operation Type',
         required=True,
-        help="Picking Type determines the way the picking should be shown in the view, reports, ...")
+        help="Operation Type determines the way the picking should be shown in the view, reports, ...")
     delay = fields.Integer('Number of Days', default=0)
     partner_address_id = fields.Many2one('res.partner', 'Partner Address')
     propagate = fields.Boolean(

--- a/addons/stock/models/stock_config_settings.py
+++ b/addons/stock/models/stock_config_settings.py
@@ -70,7 +70,7 @@ class StockConfigSettings(models.TransientModel):
     @api.multi
     def set_group_stock_multi_locations(self):
         """ If we are not in multiple locations, we can deactivate the internal
-        picking types of the warehouses, so they won't appear in the dashboard.
+        operation types of the warehouses, so they won't appear in the dashboard.
         Otherwise, activate them.
         """
         for config in self:

--- a/addons/stock/models/stock_location.py
+++ b/addons/stock/models/stock_location.py
@@ -187,8 +187,8 @@ class PushedFlow(models.Model):
         help="The new location where the goods need to go")
     delay = fields.Integer('Delay (days)', default=0, help="Number of days needed to transfer the goods")
     picking_type_id = fields.Many2one(
-        'stock.picking.type', 'Picking Type', required=True,
-        help="This is the picking type that will be put on the stock moves")
+        'stock.picking.type', 'Operation Type', required=True,
+        help="This is the operation type that will be put on the stock moves")
     auto = fields.Selection([
         ('manual', 'Manual Operation'),
         ('transparent', 'Automatic No Step Added')], string='Automatic Move',

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -133,7 +133,7 @@ class StockMove(models.Model):
     propagate = fields.Boolean(
         'Propagate cancel and split', default=True,
         help='If checked, when this move is cancelled, cancel the linked move too')
-    picking_type_id = fields.Many2one('stock.picking.type', 'Picking Type')
+    picking_type_id = fields.Many2one('stock.picking.type', 'Operation Type')
     inventory_id = fields.Many2one('stock.inventory', 'Inventory')
     lot_ids = fields.Many2many('stock.production.lot', string='Lots/Serial Numbers', compute='_compute_lot_ids')
     origin_returned_move_id = fields.Many2one('stock.move', 'Origin return move', copy=False, help='Move that created the return move')

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -14,21 +14,21 @@ from odoo.exceptions import UserError
 
 class PickingType(models.Model):
     _name = "stock.picking.type"
-    _description = "The picking type determines the picking view"
+    _description = "The operation type determines the picking view"
     _order = 'sequence, id'
 
-    name = fields.Char('Picking Type Name', required=True, translate=True)
+    name = fields.Char('Operation Types Name', required=True, translate=True)
     color = fields.Integer('Color')
     sequence = fields.Integer('Sequence', help="Used to order the 'All Operations' kanban view")
     sequence_id = fields.Many2one('ir.sequence', 'Reference Sequence', required=True)
     default_location_src_id = fields.Many2one(
         'stock.location', 'Default Source Location',
-        help="This is the default source location when you create a picking manually with this picking type. It is possible however to change it or that the routes put another location. If it is empty, it will check for the supplier location on the partner. ")
+        help="This is the default source location when you create a picking manually with this operation type. It is possible however to change it or that the routes put another location. If it is empty, it will check for the supplier location on the partner. ")
     default_location_dest_id = fields.Many2one(
         'stock.location', 'Default Destination Location',
-        help="This is the default destination location when you create a picking manually with this picking type. It is possible however to change it or that the routes put another location. If it is empty, it will check for the customer location on the partner. ")
+        help="This is the default destination location when you create a picking manually with this operation type. It is possible however to change it or that the routes put another location. If it is empty, it will check for the customer location on the partner. ")
     code = fields.Selection([('incoming', 'Vendors'), ('outgoing', 'Customers'), ('internal', 'Internal')], 'Type of Operation', required=True)
-    return_picking_type_id = fields.Many2one('stock.picking.type', 'Picking Type for Returns')
+    return_picking_type_id = fields.Many2one('stock.picking.type', 'Operation Type for Returns')
     show_entire_packs = fields.Boolean('Allow moving packs', help="If checked, this shows the packs to be moved as a whole in the Operations tab all the time, even if there was no entire pack reserved.")
     warehouse_id = fields.Many2one(
         'stock.warehouse', 'Warehouse', ondelete='cascade',
@@ -39,7 +39,7 @@ class PickingType(models.Model):
         help="If this is checked only, it will suppose you want to create new Lots/Serial Numbers, so you can provide them in a text field. ")
     use_existing_lots = fields.Boolean(
         'Use Existing Lots/Serial Numbers', default=True,
-        help="If this is checked, you will be able to choose the Lots/Serial Numbers. You can also decide to not put lots in this picking type.  This means it will create stock with no lot or not put a restriction on the lot taken. ")
+        help="If this is checked, you will be able to choose the Lots/Serial Numbers. You can also decide to not put lots in this operation type.  This means it will create stock with no lot or not put a restriction on the lot taken. ")
 
     # Statistics for the kanban view
     last_done_picking = fields.Char('Last 10 Done Pickings', compute='_compute_last_done_picking')
@@ -239,7 +239,7 @@ class Picking(models.Model):
     has_scrap_move = fields.Boolean(
         'Has Scrap Moves', compute='_has_scrap_move')
     picking_type_id = fields.Many2one(
-        'stock.picking.type', 'Picking Type',
+        'stock.picking.type', 'Operation Type',
         required=True,
         states={'done': [('readonly', True)], 'cancel': [('readonly', True)]})
     picking_type_code = fields.Selection([

--- a/addons/stock/models/stock_warehouse.py
+++ b/addons/stock/models/stock_warehouse.py
@@ -107,7 +107,7 @@ class Warehouse(models.Model):
 
         # actually create WH
         warehouse = super(Warehouse, self).create(vals)
-        # create sequences and picking types
+        # create sequences and operation types
         new_vals = warehouse.create_sequences_and_picking_types()
         warehouse.write(new_vals)  # TDE FIXME: use super ?
         # create routes and push/procurement rules
@@ -186,7 +186,7 @@ class Warehouse(models.Model):
 
         input_loc, output_loc = self._get_input_output_locations(self.reception_steps, self.delivery_steps)
 
-        # choose the next available color for the picking types of this warehouse
+        # choose the next available color for the operation types of this warehouse
         all_used_colors = [res['color'] for res in PickingType.search_read([('warehouse_id', '!=', False), ('color', '!=', False)], ['color'], order='color')]
         available_colors = [zef for zef in [0, 3, 4, 5, 6, 7, 8, 1, 2] if zef not in all_used_colors]
         color = available_colors and available_colors[0] or 0
@@ -553,7 +553,7 @@ class Warehouse(models.Model):
     @api.multi
     def _update_routes(self):
         routes_data = self.get_routes_dict()
-        # change the default source and destination location and (de)activate picking types
+        # change the default source and destination location and (de)activate operation types
         self._update_picking_type()
         # update delivery route and rules: unlink the existing rules of the warehouse delivery route and recreate it
         self._create_or_update_delivery_route(routes_data)
