PR: https://github.com/odoo/odoo/pull/127092

From: d3fda38f00b5a104f8481a8824672e2bccd54751
From: aliya
Date: 2023-07-13 17:28:04

Structural Changes: 14
Total Changes: 443

[IMP] account_peppol: improve participant onboarding

This commit adds several improvements in Peppol onboarding process:
- Adds a phone number verification process
- Adds a possibility to migrate away/cancel the registration
- Adds a possibility to update contact details for the participant
- UX improvements like autosave
- Set 0208 as the default EAS code for Belgium
- Add a check for certain peppol endpoint numbers (based on Peppol schematron rules)

task-3060814

closes odoo/odoo#127092

Signed-off-by: Florian Gilbert (flg) <flg@odoo.com>

================================= pseudo patch: =================================

--- a/addons/account_peppol/models/account_edi_proxy_user.py
+++ b/addons/account_peppol/models/account_edi_proxy_user.py
@@ -3,9 +3,9 @@
 
 import logging
 
-from odoo import fields, models, tools, _
-from odoo.addons.account_edi_proxy_client.models.account_edi_proxy_user import AccountEdiProxyError
+from odoo import _, fields, models, tools
 from odoo.exceptions import UserError
+from odoo.addons.account_edi_proxy_client.models.account_edi_proxy_user import AccountEdiProxyError
 
 _logger = logging.getLogger(__name__)
 
@@ -13,10 +13,16 @@ _logger = logging.getLogger(__name__)
 class AccountEdiProxyClientUser(models.Model):
     _inherit = 'account_edi_proxy_client.user'
 
+    peppol_migration_key = fields.Char(string="Migration Key")
+    peppol_verification_code = fields.Char(string='SMS verification code')
     proxy_type = fields.Selection(
         selection_add=[('peppol', 'PEPPOL')],
     )
 
+    # -------------------------------------------------------------------------
+    # HELPER METHODS
+    # -------------------------------------------------------------------------
+
     def _get_proxy_urls(self):
         urls = super()._get_proxy_urls()
         urls['peppol'] = {
@@ -38,6 +44,15 @@ class AccountEdiProxyClientUser(models.Model):
 
         return super()._get_server_url(proxy_type, edi_mode)
 
+    def _get_proxy_identification(self, company):
+        if not company.peppol_eas or not company.peppol_endpoint:
+            raise UserError(_("Please fill in the EAS code and the Participant ID code."))
+        return f'{company.peppol_eas}:{company.peppol_endpoint}'
+
+    # -------------------------------------------------------------------------
+    # COMPUTE METHODS
+    # -------------------------------------------------------------------------
+
     def _compute_proxy_type(self):
         # Extends account_edi_proxy_client
         super()._compute_proxy_type()
@@ -45,11 +60,9 @@ class AccountEdiProxyClientUser(models.Model):
             if user.company_id.is_account_peppol_participant:
                 user.proxy_type = 'peppol'
 
-    def _get_proxy_identification(self, company):
-        if not company.peppol_eas or not company.peppol_endpoint:
-            raise UserError(
-                _("Please fill in the EAS code and the Participant ID code in the company's partner form."))
-        return f'{company.peppol_eas}:{company.peppol_endpoint}'
+    # -------------------------------------------------------------------------
+    # BUSINESS ACTIONS
+    # -------------------------------------------------------------------------
 
     def _cron_peppol_get_new_documents(self):
         # Retrieve all new Peppol documents for every edi user in the database
@@ -136,6 +149,7 @@ class AccountEdiProxyClientUser(models.Model):
                     else:
                         move._message_log(
                             body=_('Peppol document has been received successfully'))
+                # pylint: disable=broad-except
                 except Exception:
                     # if the invoice creation fails for any reason,
                     # we want to create an empty invoice with the attachment
@@ -205,7 +219,7 @@ class AccountEdiProxyClientUser(models.Model):
 
     def _cron_peppol_get_participant_status(self):
         edi_users = self.env['account_edi_proxy_client.user'].search(
-            [('company_id.account_peppol_proxy_state', 'in', ('pending', 'manually_approved'))])
+            [('company_id.account_peppol_proxy_state', '=', 'pending')])
 
         for edi_user in edi_users:
             try:
@@ -215,5 +229,5 @@ class AccountEdiProxyClientUser(models.Model):
                 _logger.error('Error while updating Peppol participant status: %s', e)
                 continue
 
-            if proxy_user['peppol_state'] != 'draft':
+            if proxy_user['peppol_state'] in {'active', 'rejected', 'canceled'}:
                 edi_user.company_id.account_peppol_proxy_state = proxy_user['peppol_state']

--- a/addons/account_peppol/models/res_company.py
+++ b/addons/account_peppol/models/res_company.py
@@ -1,23 +1,66 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models
+import re
+from stdnum import get_cc_module, ean
+
+from odoo import _, api, fields, models
+from odoo.exceptions import ValidationError
+from odoo.addons.account_edi_ubl_cii.models.account_edi_common import EAS_MAPPING
+
+try:
+    import phonenumbers
+except ImportError:
+    phonenumbers = None
+
+# at the moment, only phone numbers in European countries are accepted
+PHONE_ALLOWED_COUNTRIES = set(EAS_MAPPING.keys()) - {'AU', 'SG', 'NZ'}
+
+PEPPOL_ENDPOINT_RULES = {
+    '0007': ['se', 'orgnr'],
+    '0088': ['ean'],
+    '0184': ['dk', 'cvr'],
+    '0192': ['no', 'orgnr'],
+    '0208': ['be', 'vat'],
+}
+
+PEPPOL_ENDPOINT_WARNING = {
+    '0201': ['regex', '[0-9a-zA-Z]{6}$'],
+    '0210': ['it', 'codicefiscale'],
+    '0211': ['it', 'iva'],
+    '9906': ['it', 'iva'],
+    '9907': ['it', 'codicefiscale'],
+    '0151': ['au', 'abn'],
+}
 
 
 class ResCompany(models.Model):
     _inherit = 'res.company'
 
+    # to be removed once the module is available
     account_peppol_attachment_ids = fields.Many2many(
         comodel_name='ir.attachment',
         string='Peppol Identification Documents',
     )
+    account_peppol_contact_email = fields.Char(
+        string='Primary contact email',
+        compute='_compute_account_peppol_contact_email', store=True, readonly=False,
+        help='Primary contact email for Peppol-related communication',
+    )
+    account_peppol_phone_number = fields.Char(
+        string='Phone number (for validation)',
+        help='You will receive a verification code to this phone number',
+    )
     account_peppol_proxy_state = fields.Selection(
         selection=[
             ('not_registered', 'Not registered'),
+            ('not_verified', 'Not verified'),
+            ('sent_verification', 'Verification code sent'),
             ('pending', 'Pending'),
             ('manually_approved', 'Approved'),
             ('active', 'Active'),
             ('rejected', 'Rejected'),
+            ('canceled', 'Canceled'),
         ],
         string='PEPPOL status',
         compute='_compute_account_peppol_proxy_state', required=True, readonly=False, store=True, precompute=True,
@@ -32,6 +75,73 @@ class ResCompany(models.Model):
         compute='_compute_peppol_purchase_journal_id', store=True, readonly=False,
     )
 
+    # -------------------------------------------------------------------------
+    # HELPER METHODS
+    # -------------------------------------------------------------------------
+
+    def _sanitize_peppol_phone_number(self):
+        self.ensure_one()
+
+        error_message = _(
+            "Please enter the phone number in the correct international format.\n"
+            "For example: +32123456789, where +32 is the country code.\n"
+            "Currently, only European countries are supported.")
+
+        if not phonenumbers:
+            raise ValidationError(error_message)
+
+        phone_number = self.account_peppol_phone_number
+        if not phone_number.startswith('+'):
+            phone_number = f'+{phone_number}'
+
+        try:
+            phone_nbr = phonenumbers.parse(phone_number)
+        except phonenumbers.phonenumberutil.NumberParseException:
+            raise ValidationError(error_message)
+
+        country_code = phonenumbers.phonenumberutil.region_code_for_number(phone_nbr)
+        if country_code not in PHONE_ALLOWED_COUNTRIES or not phonenumbers.is_valid_number(phone_nbr):
+            raise ValidationError(error_message)
+
+    def _check_peppol_endpoint_number(self, warning=False):
+        self.ensure_one()
+
+        peppol_dict = PEPPOL_ENDPOINT_WARNING if warning else PEPPOL_ENDPOINT_RULES
+        endpoint_rule = peppol_dict.get(self.peppol_eas)
+        if not endpoint_rule:
+            return True
+
+        if endpoint_rule[0] == 'regex':
+            return bool(re.match(endpoint_rule[1], self.peppol_endpoint))
+
+        if endpoint_rule[0] == 'ean':
+            check_module = ean
+        else:
+            check_module = get_cc_module(endpoint_rule[0], endpoint_rule[1])
+        return check_module.is_valid(self.peppol_endpoint)
+
+    # -------------------------------------------------------------------------
+    # CONSTRAINTS
+    # -------------------------------------------------------------------------
+
+    @api.constrains('account_peppol_phone_number')
+    def _check_account_peppol_phone_number(self):
+        for company in self:
+            if company.account_peppol_phone_number:
+                company._sanitize_peppol_phone_number()
+
+    @api.constrains('peppol_endpoint')
+    def _check_peppol_endpoint(self):
+        for company in self:
+            if not company.peppol_endpoint:
+                continue
+            if not company._check_peppol_endpoint_number(PEPPOL_ENDPOINT_RULES):
+                raise ValidationError(_("The Peppol endpoint identification number is not correct."))
+
+    # -------------------------------------------------------------------------
+    # COMPUTE METHODS
+    # -------------------------------------------------------------------------
+
     @api.depends('is_account_peppol_participant')
     def _compute_account_peppol_proxy_state(self):
         for company in self:
@@ -48,3 +158,40 @@ class ResCompany(models.Model):
                 )
             else:
                 company.peppol_purchase_journal_id = False
+
+    @api.depends('email')
+    def _compute_account_peppol_contact_email(self):
+        for company in self:
+            if not company.account_peppol_contact_email:
+                company.account_peppol_contact_email = company.email
+
+    # -------------------------------------------------------------------------
+    # LOW-LEVEL METHODS
+    # -------------------------------------------------------------------------
+
+    @api.model
+    def _sanitize_peppol_endpoint(self, vals, eas=False, endpoint=False):
+        if 'peppol_eas' not in vals and 'peppol_endpoint' not in vals:
+            return vals
+
+        peppol_eas = vals['peppol_eas'] if 'peppol_eas' in vals else eas # let users remove the value
+        peppol_endpoint = vals['peppol_endpoint'] if 'peppol_endpoint' in vals else endpoint
+        if not peppol_eas or not peppol_endpoint:
+            return vals
+
+        if peppol_eas == '0208':
+            cbe_match = re.search('[0-9]{10}', peppol_endpoint)
+            if bool(cbe_match):
+                vals['peppol_endpoint'] = cbe_match.group(0)
+        return vals
+
+    @api.model_create_multi
+    def create(self, vals_list):
+        for vals in vals_list:
+            vals = self._sanitize_peppol_endpoint(vals)
+        return super().create(vals_list)
+
+    def write(self, vals):
+        for company in self:
+            vals = self._sanitize_peppol_endpoint(vals, company.peppol_eas, company.peppol_endpoint)
+        return super().write(vals)

--- a/addons/account_peppol/models/res_config_settings.py
+++ b/addons/account_peppol/models/res_config_settings.py
@@ -1,25 +1,43 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from base64 import b64encode
+from odoo import _, api, fields, models, modules, tools
+from odoo.exceptions import UserError, ValidationError
 
-from odoo import api, fields, models, _
 from odoo.addons.account_edi_proxy_client.models.account_edi_proxy_user import AccountEdiProxyError
-from odoo.exceptions import UserError, ValidationError
+from odoo.addons.account_edi_ubl_cii.models.account_edi_common import EAS_MAPPING
+
+# at the moment, only European countries are accepted
+ALLOWED_COUNTRIES = set(EAS_MAPPING.keys()) - {'AU', 'SG', 'NZ'}
 
 
 class ResConfigSettings(models.TransientModel):
     _inherit = 'res.config.settings'
 
+    account_peppol_edi_user = fields.Many2one(
+        comodel_name='account_edi_proxy_client.user',
+        string='EDI user',
+        compute='_compute_account_peppol_edi_user',
+    )
+    account_peppol_contact_email = fields.Char(related='company_id.account_peppol_contact_email', readonly=False)
     account_peppol_eas = fields.Selection(related='company_id.peppol_eas', readonly=False)
+    account_peppol_edi_identification = fields.Char(related='account_peppol_edi_user.edi_identification')
     account_peppol_endpoint = fields.Char(related='company_id.peppol_endpoint', readonly=False)
-    account_peppol_proxy_state = fields.Selection(related='company_id.account_peppol_proxy_state')
+    account_peppol_endpoint_warning = fields.Char(
+        string="Warning",
+        compute="_compute_account_peppol_endpoint_warning",
+    )
+    account_peppol_migration_key = fields.Char(related='account_peppol_edi_user.peppol_migration_key', readonly=False)
+    account_peppol_phone_number = fields.Char(related='company_id.account_peppol_phone_number', readonly=False)
+    account_peppol_proxy_state = fields.Selection(related='company_id.account_peppol_proxy_state', readonly=False)
     account_peppol_purchase_journal_id = fields.Many2one(related='company_id.peppol_purchase_journal_id', readonly=False)
+    # to be removed once the module is available
     account_peppol_attachment_ids = fields.Many2many(
         comodel_name='ir.attachment',
         string='Peppol Identification Documents',
         related='company_id.account_peppol_attachment_ids', readonly=False,
     )
+    account_peppol_verification_code = fields.Char(related='account_peppol_edi_user.peppol_verification_code', readonly=False)
     is_account_peppol_eligible = fields.Boolean(
         string='PEPPOL eligible',
         compute='_compute_is_account_peppol_eligible',
@@ -30,46 +48,238 @@ class ResConfigSettings(models.TransientModel):
         help='Register as a PEPPOL user',
     )
 
+    # -------------------------------------------------------------------------
+    # HELPER METHODS
+    # -------------------------------------------------------------------------
+
+    def _call_peppol_proxy(self, endpoint, params, edi_user=None):
+        if not edi_user:
+            edi_user = self.company_id.account_edi_proxy_client_ids[0]
+
+        try:
+            response = edi_user._make_request(
+                f"{edi_user._get_server_url()}{endpoint}",
+                params=params,
+            )
+        except AccountEdiProxyError as e:
+            raise UserError(e.message)
+
+        if 'error' in response:
+            raise UserError(response['error'].get('message') or response['error']['data']['message'])
+        return response
+
+    # -------------------------------------------------------------------------
+    # COMPUTE METHODS
+    # -------------------------------------------------------------------------
+
     @api.depends("company_id.country_id")
     def _compute_is_account_peppol_eligible(self):
-        # we want to show Peppol settings only to BE and LU customers at first
+        # we want to show Peppol settings only to customers that are eligible for Peppol,
+        # except countries that are not in Europe
         # but keeping an option to see them for testing purposes using a config param
         for config in self:
             peppol_param = config.env['ir.config_parameter'].sudo().get_param(
                 'account_peppol.edi.mode', False
             )
-            config.is_account_peppol_eligible = config.company_id.country_id.code in {'BE', 'LU'} \
+            config.is_account_peppol_eligible = config.company_id.country_id.code in ALLOWED_COUNTRIES \
                 or peppol_param == 'test'
 
+    @api.depends("company_id.account_edi_proxy_client_ids")
+    def _compute_account_peppol_edi_user(self):
+        for config in self:
+            config.account_peppol_edi_user = config.company_id.account_edi_proxy_client_ids.filtered(
+                lambda u: u.proxy_type == 'peppol')
+
+    @api.depends('account_peppol_eas', 'account_peppol_endpoint')
+    def _compute_account_peppol_endpoint_warning(self):
+        for config in self:
+            if (
+                not config.account_peppol_eas
+                or config.company_id._check_peppol_endpoint_number(warning=True)
+            ):
+                config.account_peppol_endpoint_warning = False
+            else:
+                config.account_peppol_endpoint_warning = _("The endpoint number might not be correct. "
+                                                           "Please check if you entered the right identification number.")
+
+    # -------------------------------------------------------------------------
+    # BUSINESS ACTIONS
+    # -------------------------------------------------------------------------
+
     def button_create_peppol_proxy_user(self):
+        """
+        The first step of the Peppol onboarding.
+        - Creates an EDI proxy user on the iap side, then the client side
+        - Calls /activate_participant to mark the EDI user as peppol user
+        """
         self.ensure_one()
 
         if self.account_peppol_proxy_state != 'not_registered':
             raise UserError(
                 _('Cannot register a user with a %s application', self.account_peppol_proxy_state))
 
-        if not self.company_id.account_peppol_attachment_ids:
-            raise ValidationError(
-                _('Please upload a document that would help verifying your application'))
+        if not self.account_peppol_phone_number:
+            raise ValidationError(_("Please enter a phone number to verify your application."))
+
+        company = self.company_id
         edi_proxy_client = self.env['account_edi_proxy_client.user']
-        edi_identification = edi_proxy_client._get_proxy_identification(self.company_id)
+        edi_identification = edi_proxy_client._get_proxy_identification(company)
         edi_user = edi_proxy_client.sudo()._register_proxy_user(
-            self.company_id, 'peppol', 'prod', edi_identification)
+            company, 'peppol', 'prod', edi_identification)
+        self.account_peppol_proxy_state = 'not_verified'
 
-        params = {'documents': []}
-        for attachment in self.company_id.account_peppol_attachment_ids:
-            params['documents'].append((attachment.name, b64encode(attachment.raw).decode()))
+        # if there is an error when activating the participant below,
+        # the client side is rolled back and the edi user is deleted on the client side
+        # but remains on the proxy side.
+        # it is important to keep these two in sync, so commit before activating.
+        if not tools.config['test_enable'] and not modules.module.current_test:
+            self.env.cr.commit()
 
-        try:
-            response = edi_user._make_request(
-                f"{edi_user._get_server_url()}/api/peppol/1/activate_participant",
+        company_details = {
+            'peppol_company_name': company.display_name,
+            'peppol_company_vat': company.vat,
+            'peppol_company_street': company.street,
+            'peppol_company_city': company.city,
+            'peppol_company_zip': company.zip,
+            'peppol_country_code': company.country_id.code,
+            'peppol_phone_number': self.account_peppol_phone_number,
+            'peppol_contact_email': self.account_peppol_contact_email,
+        }
+
+        params = {
+            'migration_key': self.account_peppol_migration_key,
+            'company_details': company_details,
+        }
+
+        self._call_peppol_proxy(
+            endpoint='/api/peppol/1/activate_participant',
+            params=params,
+            edi_user=edi_user,
+        )
+        # once we sent the migration key over, we don't need it
+        # but we need the field for future in case the user decided to migrate away from Odoo
+        self.account_peppol_migration_key = False
+
+    def button_update_peppol_user_data(self):
+        """
+        Action for the user to be able to update their contact details any time
+        Calls /update_user on the iap server
+        """
+        self.ensure_one()
+
+        if not self.account_peppol_contact_email or not self.account_peppol_phone_number:
+            raise ValidationError(_("Contact email and phone number are required."))
+
+        params = {
+            'update_data': {
+                'peppol_phone_number': self.account_peppol_phone_number,
+                'peppol_contact_email': self.account_peppol_contact_email,
+            }
+        }
+
+        self._call_peppol_proxy(
+            endpoint='/api/peppol/1/update_user',
+            params=params,
+        )
+
+    def button_send_peppol_verification_code(self):
+        """
+        Request user verification via SMS
+        Calls the /send_verification_code to send the 6-digit verification code
+        """
+        self.ensure_one()
+
+        # update contact details in case the user made changes
+        self.button_update_peppol_user_data()
+
+        self._call_peppol_proxy(
+            endpoint='/api/peppol/1/send_verification_code',
+            params={'message': _("Your confirmation code is")},
+        )
+        self.account_peppol_proxy_state = 'sent_verification'
+
+    def button_check_peppol_verification_code(self):
+        """
+        Calls /verify_phone_number to compare user's input and the
+        code generated on the IAP server
+        """
+        self.ensure_one()
+
+        if len(self.account_peppol_verification_code) != 6:
+            raise ValidationError(_("The verification code should contain six digits."))
+
+        self._call_peppol_proxy(
+            endpoint='/api/peppol/1/verify_phone_number',
+            params={'verification_code': self.account_peppol_verification_code},
+        )
+        self.account_peppol_proxy_state = 'pending'
+        self.account_peppol_verification_code = False
+
+    def button_cancel_peppol_registration(self):
+        """
+        Sets the peppol registration to canceled
+        - If the user is active on the SMP, we can't just cancel it.
+          They have to request a migration key using the `button_migrate_peppol_registration` action
+        - 'not_registered', 'rejected', 'canceled' proxy states mean that canceling the registration
+          makes no sense, so we don't do it
+        - Calls the IAP server first before setting the state as canceled on the client side,
+          in case they've been activated on the IAP side in the meantime
+        """
+        self.ensure_one()
+
+        if self.account_peppol_proxy_state == 'active':
+            raise UserError(_("Can't cancel an active registration. Please request a migration instead."))
+
+        if self.account_peppol_proxy_state in {'not_registered', 'rejected', 'canceled'}:
+            raise UserError(_(
+                "Can't cancel registration with this status: %s", self.account_peppol_proxy_state
+            ))
+
+        self._call_peppol_proxy(
+            endpoint='/api/peppol/1/cancel_peppol_registration',
+            params={},
+        )
+        self.account_peppol_proxy_state = 'canceled'
+
+    def button_reopen_peppol_registration(self):
+        """
+        Reopen a canceled or rejected peppol application.
+        This means that the EDI user already exists in the DB and on the IAP proxy.
+        So, reopening resets the user to the stage after validating (not_verified).
+        The user then needs to verify their phone number, even if they verified before canceling.
+        """
+        self.ensure_one()
+
+        if self.account_peppol_proxy_state in {'rejected', 'canceled'}:
+            params = {
+                'update_data': {
+                    'peppol_state': 'draft',
+                }
+            }
+
+            self._call_peppol_proxy(
+                endpoint='/api/peppol/1/update_user',
                 params=params,
             )
-        except AccountEdiProxyError as e:
-            raise UserError(e.message)
-        if 'error' in response:
-            raise UserError(response['error'])
 
-        self.company_id.account_peppol_proxy_state = 'pending'
-        # we don't need to store the attachments once they've been sent to the proxy
-        self.company_id.account_peppol_attachment_ids.unlink()
+            self.account_peppol_proxy_state = 'not_verified'
+
+    def button_migrate_peppol_registration(self):
+        """
+        If the user is active, they need to request a migration key, generated on the IAP server.
+        The migration key is then displayed in Peppol settings.
+        Currently, reopening after migrating away is not supported.
+        """
+        self.ensure_one()
+
+        if self.account_peppol_proxy_state != 'active':
+            raise UserError(_(
+                "Can't migrate registration with this status: %s", self.account_peppol_proxy_state
+            ))
+
+        response = self._call_peppol_proxy(
+            endpoint='/api/peppol/1/migrate_peppol_registration',
+            params={},
+        )
+        self.account_peppol_proxy_state = 'canceled'
+        self.account_peppol_migration_key = response['migration_key']

--- a/addons/account_peppol/models/res_partner.py
+++ b/addons/account_peppol/models/res_partner.py
@@ -65,7 +65,9 @@ class ResPartner(models.Model):
         participant = f'{self.peppol_eas}:{self.peppol_endpoint}'.lower()
         hash_participant = md5(participant.lower().encode()).hexdigest()
         endpoint_participant = parse.quote_plus(f"iso6523-actorid-upis::{participant}")
-        smp_url = f"http://B-{hash_participant}.iso6523-actorid-upis.edelivery.tech.ec.europa.eu/{endpoint_participant}"
+        peppol_param = self.env['ir.config_parameter'].sudo().get_param('account_peppol.edi.mode', False)
+        sml_zone = 'acc.edelivery' if peppol_param == 'test' else 'edelivery'
+        smp_url = f"http://B-{hash_participant}.iso6523-actorid-upis.{sml_zone}.tech.ec.europa.eu/{endpoint_participant}"
         self.account_peppol_validity_last_check = fields.Date.context_today(self)
         try:
             response = requests.get(smp_url, timeout=TIMEOUT)
