PR: https://github.com/odoo/odoo/pull/81684

From: d161d287823983cd611892727ac21d8ef5299695
From: Vincent Larcin
Date: 2022-02-28 13:52:41

Structural Changes: 8
Total Changes: 161

[IMP] sale_timesheet: link milestones to SOLs

Currently, a service can be configured to be invoiced on milestones.
This means that the user has to manually update the delivered quantity on the SO in order to invoice it.

We now also have the notion of milestones in the project module.
It would be nice to have a link in between the milestone and the corresponding SOL, so that the delivered quantity is automatically updated when the milestone is reached.
This would help the users save time, limit the risk of error and reduce the confusion of having unrelated milestones at two different places.

To this end, this commit adds a new "milestones" invoice policy that computes the delivered quantity of a SOL based on the milestones that have been reached, and renames the previous "milestones" policy into "manual".

Task-2558889

Closes https://github.com/odoo/odoo/pull/81684

closes odoo/odoo#81684

Related: odoo/upgrade#3265
Signed-off-by: Laurent Stukkens (ltu) <ltu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_project/models/__init__.py
+++ b/addons/sale_project/models/__init__.py
@@ -2,5 +2,6 @@
 
 from . import product
 from . import project
+from . import project_milestone
 from . import sale_order
 from . import sale_order_line

--- a/addons/sale_project/models/product.py
+++ b/addons/sale_project/models/product.py
@@ -7,15 +7,10 @@ from odoo.exceptions import ValidationError
 
 SERVICE_POLICY = [
     # (service_policy, string)
-    ('ordered_timesheet', 'Prepaid/Fixed Price'),
+    ('ordered_prepaid', 'Prepaid/Fixed Price'),
+    ('delivered_milestones', 'Based on Milestones'),
     ('delivered_manual', 'Based on Delivered Quantity (Manual)'),
 ]
-SERVICE_TO_GENERAL = {
-    # service_policy: (invoice_policy, service_type)
-    'ordered_timesheet': ('order', 'manual'),
-    'delivered_manual': ('delivery', 'manual'),
-}
-GENERAL_TO_SERVICE = {value: key for key, value in SERVICE_TO_GENERAL.items()}
 
 
 class ProductTemplate(models.Model):
@@ -42,69 +37,104 @@ class ProductTemplate(models.Model):
         domain="[('company_id', '=', current_company_id)]",
         help='Select a billable project to be the skeleton of the new created project when selling the current product. Its stages and tasks will be duplicated.')
     service_policy = fields.Selection(SERVICE_POLICY, string="Service Invoicing Policy", compute='_compute_service_policy', inverse='_inverse_service_policy')
+    service_type = fields.Selection(selection_add=[
+        ('milestones', 'Project Milestones'),
+    ])
 
-    @api.depends('service_tracking', 'type')
+    @api.depends('invoice_policy', 'service_type', 'type')
+    def _compute_service_policy(self):
+        for product in self:
+            product.service_policy = self._get_general_to_service(product.invoice_policy, product.service_type)
+            if not product.service_policy and product.type == 'service':
+                product.service_policy = 'ordered_prepaid'
+
+    @api.depends('service_tracking', 'service_policy', 'type')
     def _compute_product_tooltip(self):
         super()._compute_product_tooltip()
         for record in self.filtered(lambda record: record.type == 'service'):
-            if record.service_policy == 'ordered_timesheet':
+            if record.service_policy == 'ordered_prepaid':
                 if record.service_tracking == 'no':
                     record.product_tooltip = _(
                         "Invoice ordered quantities as soon as this service is sold."
                     )
                 elif record.service_tracking == 'task_global_project':
                     record.product_tooltip = _(
-                        "Invoice as soon as this service is sold, and create a task in an existing "
-                        "project to track the time spent."
+                        "Invoice ordered quantities as soon as this service is sold. "
+                        "Create a task in an existing project to track the time spent."
                     )
                 elif record.service_tracking == 'task_in_project':
                     record.product_tooltip = _(
-                        "Invoice ordered quantities as soon as this service is sold, and create a "
-                        "project for the order with a task for each sales order line to track the time"
-                        " spent."
+                        "Invoice ordered quantities as soon as this service is sold. "
+                        "Create an empty project for the order to track the time spent."
                     )
                 elif record.service_tracking == 'project_only':
                     record.product_tooltip = _(
-                        "Invoice ordered quantities as soon as this service is sold, and create an "
-                        "empty project for the order to track the time spent."
+                        "Invoice ordered quantities as soon as this service is sold. "
+                        "Create a project for the order with a task for each sales order line "
+                        "to track the time spent."
+                    )
+            elif record.service_policy == 'delivered_milestones':
+                if record.service_tracking == 'no':
+                    record.product_tooltip = _(
+                        "Invoice your milestones when they are reached."
+                    )
+                elif record.service_tracking == 'task_global_project':
+                    record.product_tooltip = _(
+                        "Invoice your milestones when they are reached. "
+                        "Create a task in an existing project to track the time spent."
+                    )
+                elif record.service_tracking == 'task_in_project':
+                    record.product_tooltip = _(
+                        "Invoice your milestones when they are reached. "
+                        "Create an empty project for the order to track the time spent."
+                    )
+                elif record.service_tracking == 'project_only':
+                    record.product_tooltip = _(
+                        "Invoice your milestones when they are reached. "
+                        "Create a project for the order with a task for each sales order line "
+                        "to track the time spent."
                     )
             elif record.service_policy == 'delivered_manual':
                 if record.service_tracking == 'no':
                     record.product_tooltip = _(
-                        "Sales order lines define milestones of the project to invoice by setting "
-                        "the delivered quantity."
+                        "Invoice this service when it is delivered (set the quantity by hand on your sales order lines). "
                     )
                 elif record.service_tracking == 'task_global_project':
                     record.product_tooltip = _(
-                        "Sales order lines define milestones of the project to invoice by setting "
-                        "the delivered quantity. Create a task in an existing project to track the"
-                        " time spent."
+                        "Invoice this service when it is delivered (set the quantity by hand on your sales order lines). "
+                        "Create a task in an existing project to track the time spent."
                     )
                 elif record.service_tracking == 'task_in_project':
                     record.product_tooltip = _(
-                        "Sales order lines define milestones of the project to invoice by setting "
-                        "the delivered quantity. Create an empty project for the order to track "
-                        "the time spent."
+                        "Invoice this service when it is delivered (set the quantity by hand on your sales order lines). "
+                        "Create an empty project for the order to track the time spent."
                     )
                 elif record.service_tracking == 'project_only':
                     record.product_tooltip = _(
-                        "Sales order lines define milestones of the project to invoice by setting "
-                        "the delivered quantity. Create a project for the order with a task for "
-                        "each sales order line to track the time spent."
+                        "Invoice this service when it is delivered (set the quantity by hand on your sales order lines). "
+                        "Create a project for the order with a task for each sales order line to track the time spent."
                     )
 
-    @api.depends('invoice_policy', 'service_type', 'type')
-    def _compute_service_policy(self):
-        for product in self:
-            product.service_policy = GENERAL_TO_SERVICE.get((product.invoice_policy, product.service_type), False)
-            if not product.service_policy and product.type == 'service':
-                product.service_policy = 'ordered_timesheet'
+    def _get_service_to_general_map(self):
+        return {
+            # service_policy: (invoice_policy, service_type)
+            'ordered_prepaid': ('order', 'manual'),
+            'delivered_milestones': ('delivery', 'milestones'),
+            'delivered_manual': ('delivery', 'manual'),
+        }
+
+    def _get_service_to_general(self, service_policy):
+        return self._get_service_to_general_map().get(service_policy, (False, False))
+
+    def _get_general_to_service(self, invoice_policy, service_type):
+        general_to_service = {v: k for k, v in self._get_service_to_general_map().items()}
+        return general_to_service.get((invoice_policy, service_type), False)
 
     @api.onchange('service_policy')
     def _inverse_service_policy(self):
         for product in self:
             if product.service_policy:
-                product.invoice_policy, product.service_type = SERVICE_TO_GENERAL.get(product.service_policy, (False, False))
+                product.invoice_policy, product.service_type = self._get_service_to_general(product.service_policy)
 
     @api.constrains('project_id', 'project_template_id')
     def _check_project_and_template(self):

--- a/addons/sale_project/models/project.py
+++ b/addons/sale_project/models/project.py
@@ -19,7 +19,7 @@ class Project(models.Model):
         "Only applies on tasks without sale order item defined, and if the employee is not in the 'Employee/Sales Order Item Mapping' of the project.")
     sale_order_id = fields.Many2one(string='Sales Order', related='sale_line_id.order_id', help="Sales order to which the project is linked.")
     has_any_so_to_invoice = fields.Boolean('Has SO to Invoice', compute='_compute_has_any_so_to_invoice')
-    sale_order_count = fields.Integer(compute='_compute_sale_order_count')
+    sale_order_count = fields.Integer(compute='_compute_sale_order_count', groups='sales_team.group_sale_salesman')
     has_any_so_with_nothing_to_invoice = fields.Boolean('Has a SO with an invoice status of No', compute='_compute_has_any_so_with_nothing_to_invoice')
 
     @api.model
@@ -74,7 +74,7 @@ class Project(models.Model):
 
     def _get_all_sales_orders(self):
         self.ensure_one()
-        return self.sale_order_id | self.task_ids.sale_order_id
+        return self.sale_order_id | self.task_ids.sale_order_id | self.milestone_ids.sale_line_id.order_id
 
     @api.depends('sale_order_id', 'task_ids.sale_order_id')
     def _compute_sale_order_count(self):

--- a/None
+++ b/addons/sale_project/models/project_milestone.py
@@ -0,0 +1,28 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models
+
+class ProjectMilestone(models.Model):
+    _name = 'project.milestone'
+    _inherit = 'project.milestone'
+
+    allow_billable = fields.Boolean(related='project_id.allow_billable')
+    project_partner_id = fields.Many2one(related='project_id.partner_id')
+
+    sale_line_id = fields.Many2one('sale.order.line', 'Sales Order Item', help='Sales Order Item that will be updated once the milestone is reached.',
+        domain="[('order_partner_id', '=?', project_partner_id), ('qty_delivered_method', '=', 'milestones')]")
+    quantity_percentage = fields.Float('Quantity (%)', help='Percentage of the ordered quantity that will automatically be delivered once the milestone is reached.')
+
+    sale_line_name = fields.Text(related='sale_line_id.name')
+
+    @api.model
+    def _get_fields_to_export(self):
+        return super()._get_fields_to_export() + ['allow_billable', 'quantity_percentage', 'sale_line_name']
+
+    def action_get_list_view(self):
+        view = super().action_get_list_view()
+        project = self.env['project.project'].browse(self.env.context.get('active_id'))
+        if project.allow_billable:
+            view['views'] = [(self.env.ref('sale_project.project_milestone_view_tree').id, 'tree'), (False, 'form')]
+        return view

--- a/addons/sale_project/models/sale_order_line.py
+++ b/addons/sale_project/models/sale_order_line.py
@@ -8,6 +8,7 @@ from odoo.tools.sql import column_exists, create_column
 class SaleOrderLine(models.Model):
     _inherit = "sale.order.line"
 
+    qty_delivered_method = fields.Selection(selection_add=[('milestones', 'Milestones')])
     project_id = fields.Many2one(
         'project.project', 'Generated Project',
         index=True, copy=False, help="Project generated by the sales order item")
@@ -15,6 +16,7 @@ class SaleOrderLine(models.Model):
         'project.task', 'Generated Task',
         index=True, copy=False, help="Task generated by the sales order item")
     is_service = fields.Boolean("Is a Service", compute='_compute_is_service', store=True, compute_sudo=True, help="Sales Order item should generate a task and/or a project, depending on the product settings.")
+    reached_milestones_ids = fields.One2many('project.milestone', 'sale_line_id', string='Reached Milestones', domain=[('is_reached', '=', True)])
 
     @api.depends('product_id')
     def _compute_is_service(self):
@@ -44,6 +46,34 @@ class SaleOrderLine(models.Model):
             """)
         return super()._auto_init()
 
+    @api.depends('product_id')
+    def _compute_qty_delivered_method(self):
+        milestones_lines = self.filtered(lambda sol:
+            not sol.is_expense
+            and sol.product_id.type == 'service'
+            and sol.product_id.service_type == 'milestones'
+        )
+        milestones_lines.qty_delivered_method = 'milestones'
+        super(SaleOrderLine, self - milestones_lines)._compute_qty_delivered_method()
+
+    @api.depends('qty_delivered_method', 'product_uom_qty', 'reached_milestones_ids.quantity_percentage')
+    def _compute_qty_delivered(self):
+        lines_by_milestones = self.filtered(lambda sol: sol.qty_delivered_method == 'milestones')
+        super(SaleOrderLine, self - lines_by_milestones)._compute_qty_delivered()
+
+        if not lines_by_milestones:
+            return
+
+        project_milestone_read_group = self.env['project.milestone'].read_group(
+            [('sale_line_id', 'in', lines_by_milestones.ids), ('is_reached', '=', True)],
+            ['sale_line_id', 'quantity_percentage'],
+            ['sale_line_id'],
+        )
+        reached_milestones_per_sol = {res['sale_line_id'][0]: res['quantity_percentage'] for res in project_milestone_read_group}
+        for line in lines_by_milestones:
+            sol_id = line.id or line._origin.id
+            line.qty_delivered = reached_milestones_per_sol.get(sol_id, 0.0) * line.product_uom_qty
+
     @api.model_create_multi
     def create(self, vals_list):
         lines = super().create(vals_list)
