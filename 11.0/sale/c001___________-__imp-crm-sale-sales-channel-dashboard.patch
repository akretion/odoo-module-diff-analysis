PR: https://github.com/odoo/odoo/pull/

From: eed8a3468639aff82360a7552f9c7a1216b89345
From: Denis Vermylen (dve)
Date: 2017-01-03 18:04:34

Breaking data model changes score: 2, change matches:
-    sales_to_invoice_amount = fields.Integer(
-    currency_id = fields.Many2one("res.currency", related='company_id.currency_id',

Total Changes: 125

[IMP] crm_*, sale_*: sales channel dashboard

        Functional
        ==========

Sales teams become sales channels. Their dashboard cards now include a graph
displaying customizable data for managers (comparable to those in accounting).

By default, you now have the following sales channels (non-demo):

      Direct Sales      (with installation of crm or sale)

  Sales Channel type: Sales
  Works same as before, what's changed is:
    - their cards display one big button directing to the start of their
      workflow
    - the links on the right-hand side have been reworked, and are only
      displayed when there is at least one item requiring attention.
    - 'More' tab remains unchanged.

      Website           (with installation of website_sale)

  Sales Channel type: Website
  Differences lies in the links displayed in the dashboard card:
    - it displays abandoned carts, awaiting payments and payments to capture
  Default Channel linked to all sales made from the eCommerce.

      Point of Sale     (with installation of sale and point_of_sale
                                              -> auto-installs pos_sale)

  Sales Channel type: Point of Sale
  Linked to pos.configs and their pos.sessions and pos.orders.
    - only links to their linked pos.config dashboard and open sessions
    - can't use opportunities, lead or invoicing and can only display
      pos.order data in the graph.
  Default Channel linked to the default pos.config.

        Technical
        =========

* Add a channel type: sales, pos, website that have different actions/settings
* Add a graphs to the kanban cards in the sales/crm dashboard, configurable in
  the form view in the new dashboard page.
* Rename sales teams to sales channels, rename and add default and demo sales
  channels
* Change dashboard links depending on the channel type and add a related
  computed fields on crm.team
* Rename strings and improve channel form view.
* Leads are now checked by default once activated for 'sales' type channels
* Disable checking "leads" without using "opportunities".
* Hide invoicing and invoicing target depending on channel type.
* Move currency_id to sales_team

================================= pseudo patch: =================================

--- a/addons/sale/models/account_invoice.py
+++ b/addons/sale/models/account_invoice.py
@@ -17,7 +17,7 @@ class AccountInvoice(models.Model):
         if invoice_type == 'out_invoice':
             return self.env.user.company_id.sale_note
 
-    team_id = fields.Many2one('crm.team', string='Sales Team', default=_get_default_team, oldname='section_id')
+    team_id = fields.Many2one('crm.team', string='Sales Channel', default=_get_default_team, oldname='section_id')
     comment = fields.Text(default=_default_comment)
     partner_shipping_id = fields.Many2one(
         'res.partner',

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -145,7 +145,7 @@ class SaleOrder(models.Model):
     payment_term_id = fields.Many2one('account.payment.term', string='Payment Terms', oldname='payment_term')
     fiscal_position_id = fields.Many2one('account.fiscal.position', oldname='fiscal_position', string='Fiscal Position')
     company_id = fields.Many2one('res.company', 'Company', default=lambda self: self.env['res.company']._company_default_get('sale.order'))
-    team_id = fields.Many2one('crm.team', 'Sales Team', change_default=True, default=_get_default_team, oldname='section_id')
+    team_id = fields.Many2one('crm.team', 'Sales Channel', change_default=True, default=_get_default_team, oldname='section_id')
     procurement_group_id = fields.Many2one('procurement.group', 'Procurement Group', copy=False)
 
     product_id = fields.Many2one('product.product', related='order_line.product_id', string='Product')

--- a/addons/sale/models/sales_team.py
+++ b/addons/sale/models/sales_team.py
@@ -3,41 +3,55 @@
 
 from datetime import date
 
-from odoo import api, fields, models
+from odoo import api, fields, models, _
 
 
 class CrmTeam(models.Model):
     _inherit = 'crm.team'
 
-    use_quotations = fields.Boolean('Quotations', default=True,
-        help="Check this box to manage quotations in this sales team.")
-    use_invoices = fields.Boolean('Invoices',
-        help="Check this box to manage invoices in this sales team.")
+    use_quotations = fields.Boolean(string='Quotations', help="Check this box to manage quotations in this sales channel.")
+    use_invoices = fields.Boolean('Set Invoicing Target', help="Check this box to set an invoicing target for this sales channel.")
     invoiced = fields.Integer(
         compute='_compute_invoiced',
         string='Invoiced This Month', readonly=True,
         help="Invoice revenue for the current month. This is the amount the sales "
-                "team has invoiced this month. It is used to compute the progression ratio "
+                "channel has invoiced this month. It is used to compute the progression ratio "
                 "of the current and target revenue on the kanban view.")
     invoiced_target = fields.Integer(
-        string='Invoice Target',
+        string='Invoicing Target',
         help="Target of invoice revenue for the current month. This is the amount the sales "
-             "team estimates to be able to invoice this month.")
-    sales_to_invoice_amount = fields.Integer(
-        compute='_compute_sales_to_invoice_amount',
-        string='Amount of sales to invoice', readonly=True,
-    )
-    currency_id = fields.Many2one("res.currency", related='company_id.currency_id',
-        string="Currency", readonly=True, required=True)
+             "channel estimates to be able to invoice this month.")
+    quotations_to_invoice_count = fields.Integer(
+        compute='_compute_quotations_to_invoice',
+        string='Number of quotations to invoice', readonly=True)
+    quotations_to_invoice_amount = fields.Integer(
+        compute='_compute_quotations_to_invoice',
+        string='Amount of quotations to invoice', readonly=True)
+    sales_to_invoice_count = fields.Integer(
+        compute='_compute_sales_to_invoice',
+        string='Number of sales to invoice', readonly=True)
+    dashboard_graph_model = fields.Selection(selection_add=[
+        ('sales', 'Sales'),
+        ('invoices', 'Invoices'),
+    ])
+
+    def _compute_quotations_to_invoice(self):
+        amounts = self.env['sale.report'].read_group([
+            ('team_id', 'in', self.filtered(lambda team: team.team_type != 'website').ids),
+            ('state', 'in', ['draft', 'sent']),
+        ], ['price_total', 'team_id', 'name'], ['team_id', 'name'], lazy=False)
+        for rec in amounts:
+            self.browse(rec['team_id'][0]).quotations_to_invoice_amount += rec['price_total']
+            self.browse(rec['team_id'][0]).quotations_to_invoice_count += 1
 
     @api.multi
-    def _compute_sales_to_invoice_amount(self):
-        amounts = self.env['sale.order'].read_group([
+    def _compute_sales_to_invoice(self):
+        amounts = self.env['sale.report'].read_group([
             ('team_id', 'in', self.ids),
-            ('invoice_status', '=', 'to invoice'),
-        ], ['amount_total', 'team_id'], ['team_id'])
+            ('qty_to_invoice', '>', 0),
+        ], ['team_id', 'name'], ['team_id', 'name'], lazy=False)
         for rec in amounts:
-            self.browse(rec['team_id'][0]).sales_to_invoice_amount = rec['amount_total']
+            self.browse(rec['team_id'][0]).sales_to_invoice_count += 1
 
     @api.multi
     def _compute_invoiced(self):
@@ -51,11 +65,70 @@ class CrmTeam(models.Model):
             ])
             team.invoiced = sum(invoices.mapped('amount_untaxed_signed'))
 
+    def _graph_date_column(self):
+        if self.dashboard_graph_model in ['sales', 'invoices']:
+            return 'date'
+        return super(CrmTeam, self)._graph_date_column()
+
+    def _graph_y_query(self):
+        if self.dashboard_graph_model == 'sales':
+            return 'SUM(price_subtotal)'
+        elif self.dashboard_graph_model == 'invoices':
+            return 'SUM(price_total)'
+        return super(CrmTeam, self)._graph_y_query()
+
+    def _graph_sql_table(self):
+        if self.dashboard_graph_model == 'sales':
+            return 'sale_report'
+        elif self.dashboard_graph_model == 'invoices':
+            return 'account_invoice_report'
+        return super(CrmTeam, self)._graph_sql_table()
+
+    def _extra_sql_conditions(self):
+        if self.dashboard_graph_model == 'sales':
+            return "AND state in ('sale', 'done')"
+        elif self.dashboard_graph_model == 'invoices':
+            return "AND state = 'paid'"
+        return super(CrmTeam, self)._extra_sql_conditions()
+
+    def _graph_title_and_key(self):
+        if self.dashboard_graph_model == 'sales':
+            return [_('Sales'), _('Untaxed Total')]
+        elif self.dashboard_graph_model == 'invoices':
+            return [_('Invoices'), _('Untaxed Total')]
+        return super(CrmTeam, self)._graph_title_and_key()
+
+    def _compute_dashboard_button_name(self):
+        quotation_teams = self.filtered('use_quotations')
+        quotation_teams.update({'dashboard_button_name': _("Quotations")})
+        (self - quotation_teams).update({'dashboard_button_name': _("Sales Orders")})
+
+    def action_primary_channel_button(self):
+        if hasattr(self, 'use_opportunities') and self.use_opportunities:
+            return super(CrmTeam, self).action_primary_channel_button()
+        elif self.use_quotations:
+            action = self.env.ref('sale.action_quotations_salesteams').read()[0]
+            action['context'] = {'search_default_team_id': self.id}
+            return action
+        else:
+            action = self.env.ref('sale.action_orders_salesteams').read()[0]
+            action['context'] = {'search_default_team_id': self.id}
+            return action
+
+    @api.onchange('team_type')
+    def _onchange_team_type(self):
+        if self.team_type == 'sales':
+            self.use_quotations = True
+            self.use_invoices = True
+            # do not override dashboard_graph_model 'pipeline' if crm is installed
+            if not self.dashboard_graph_model:
+                self.dashboard_graph_model = 'sales'
+        else:
+            self.use_quotations = False
+            self.use_invoices = False
+            self.dashboard_graph_model = 'sales'
+        return super(CrmTeam, self)._onchange_team_type()
+
     @api.multi
     def update_invoiced_target(self, value):
         return self.write({'invoiced_target': round(float(value or 0))})
-
-    @api.onchange('use_quotations')
-    def _onchange_use_quotation(self):
-        if self.use_quotations:
-            self.use_invoices = True
