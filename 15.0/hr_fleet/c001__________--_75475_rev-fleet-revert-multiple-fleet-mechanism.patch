PR: https://github.com/odoo/odoo/pull/75475

From: 24713b76b597345abcbf57925e9085b6e34fe187
From: Yannick Tivisse
Date: 2021-08-25 12:20:39

Breaking data model changes scores: del:6 + add:0, change matches:
-    _inherit = 'fleet.category'
-    internal = fields.Boolean(default=True)
-    fleet_is_internal = fields.Boolean(related='fleet_id.internal')
-    fleet_is_internal = fields.Boolean(related='vehicle_id.fleet_is_internal')
-    fleet_is_internal = fields.Boolean(related='vehicle_id.fleet_is_internal')
-    fleet_is_internal = fields.Boolean(related='vehicle_id.fleet_is_internal')

Total Changes: 160

[REV] fleet: Revert multiple fleet mechanism

I don't get why you don't get it...

Partial revert of the taskID: 2415309
Com PR: https://github.com/odoo/odoo/pull/70313
Ent PR: https://github.com/odoo/enterprise/pull/18114
Upg PR: https://github.com/odoo/upgrade/pull/2447

closes odoo/odoo#75475

Related: odoo/enterprise#20406
Related: odoo/upgrade#2765
Signed-off-by: Yannick Tivisse (yti) <yti@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_fleet/models/__init__.py
+++ b/addons/hr_fleet/models/__init__.py
@@ -4,7 +4,6 @@
 from . import employee
 from . import res_users
 from . import fleet_vehicle_assignation_log
-from . import fleet_category
 from . import fleet_vehicle
 from . import fleet_vehicle_log_contract
 from . import fleet_vehicle_log_services

--- a/addons/hr_fleet/models/employee.py
+++ b/addons/hr_fleet/models/employee.py
@@ -46,7 +46,6 @@ class Employee(models.Model):
         no_address = self.filtered(lambda r: not r.address_home_id)
         car_ids = self.env['fleet.vehicle'].sudo().search([
             ('driver_employee_id', 'in', no_address.ids),
-            ('fleet_id.internal', '=', True),
         ])
         # Prevent from removing employee address when linked to a car
         if car_ids:
@@ -60,7 +59,6 @@ class Employee(models.Model):
             car_ids = self.env['fleet.vehicle'].sudo().search([
                 ('driver_employee_id', 'in', self.ids),
                 ('driver_id', 'in', self.mapped('address_home_id').ids),
-                ('fleet_id.internal', '=', True),
             ])
             if car_ids:
                 car_ids.write({'driver_id': vals['address_home_id']})

--- a/addons/hr_fleet/models/fleet_category.py
+++ b/None
@@ -1,23 +0,0 @@
-# -*- coding:utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import fields, models
-
-class FleetCategory(models.Model):
-    _inherit = 'fleet.category'
-
-    internal = fields.Boolean(default=True)
-
-    def action_view_vehicles(self):
-        res = super().action_view_vehicles()
-        res['context']['internal'] = self.internal
-        return res
-
-    def write(self, vals):
-        res = super().write(vals)
-        if 'internal' in vals and not vals['internal']:
-            self.vehicle_ids.write({
-                'driver_employee_id': False,
-                'future_driver_employee_id': False,
-            })
-        return res

--- a/addons/hr_fleet/models/fleet_vehicle.py
+++ b/addons/hr_fleet/models/fleet_vehicle.py
@@ -10,15 +10,37 @@ class FleetVehicle(models.Model):
     mobility_card = fields.Char(compute='_compute_mobility_card', store=True)
     driver_employee_id = fields.Many2one(
         'hr.employee', 'Driver (Employee)',
+        compute='_compute_driver_employee_id', store=True,
         domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]",
         tracking=True,
     )
+    driver_employee_name = fields.Char(related="driver_employee_id.name")
     future_driver_employee_id = fields.Many2one(
         'hr.employee', 'Future Driver (Employee)',
+        compute='_compute_future_driver_employee_id', store=True,
         domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]",
         tracking=True,
     )
-    fleet_is_internal = fields.Boolean(related='fleet_id.internal')
+
+    @api.depends('driver_id')
+    def _compute_driver_employee_id(self):
+        for vehicle in self:
+            if vehicle.driver_id:
+                vehicle.driver_employee_id = self.env['hr.employee'].search([
+                    ('address_home_id', '=', vehicle.driver_id.id),
+                ], limit=1)
+            else:
+                vehicle.driver_employee_id = False
+
+    @api.depends('future_driver_id')
+    def _compute_future_driver_employee_id(self):
+        for vehicle in self:
+            if vehicle.future_driver_id:
+                vehicle.future_driver_employee_id = self.env['hr.employee'].search([
+                    ('address_home_id', '=', vehicle.future_driver_id.id),
+                ], limit=1)
+            else:
+                vehicle.future_driver_employee_id = False
 
     @api.depends('driver_id')
     def _compute_mobility_card(self):
@@ -30,57 +52,14 @@ class FleetVehicle(models.Model):
                     employee = employee.search([('user_id.partner_id', '=', vehicle.driver_id.id)], limit=1)
             vehicle.mobility_card = employee.mobility_card
 
-    @api.constrains('driver_employee_id', 'future_driver_employee_id')
-    def _constrain_employee_has_address(self):
-        wrongs = self.filtered(lambda v: (
-            (v.driver_employee_id and not v.driver_employee_id.address_home_id) or
-            (v.future_driver_employee_id and not v.future_driver_employee_id.address_home_id)
-        ))
-        if wrongs:
-            raise ValidationError(_(
-                'The following vehicles have invalid employees: %s\n'
-                'Please assign addresses to the employees you want to assign a car to.'
-            ) % wrongs.mapped('name'))
-
-    def _get_driver_history_data(self, vals):
-        res = super()._get_driver_history_data(vals)
-        if self.fleet_is_internal and 'driver_employee_id' in vals:
-            res['driver_employee_id'] = vals['driver_employee_id']
-        return res
-
-    def action_accept_driver_change(self):
-        super(FleetVehicle, self.filtered(lambda v: not v.fleet_id.internal)).action_accept_driver_change()
-        #Unfortunate code duplication to avoid creating unwanted vehicle logs
-        internals = self.filtered(lambda v: v.fleet_id.internal)
-        for vehicle in internals:
-            if vehicle.vehicle_type == 'bike':
-                vehicle.future_driver_id.sudo().write({'plan_to_change_bike': False})
-            if vehicle.vehicle_type == 'car':
-                vehicle.future_driver_id.sudo().write({'plan_to_change_car': False})
-            vehicle.driver_employee_id = vehicle.future_driver_employee_id
-            vehicle.future_driver_employee_id = False
-
     def _update_create_write_vals(self, vals):
-        # wbr NOTE: can't use inverse without breaking history
-        # We do not want to link vehicles to employee when their fleet is not internal
-        #  but since this method is called within the write function we are not guaranteed
-        #  to always have one record, check if all fleet are internal
-        # This is an edge case, it is better not to link an employee to a car when they should than to link
-        #  against cars when they shouldn't, usually you will not update multiple vehicles from many different fleets
-        is_internal = len(self) > 0 and len(self.filtered(lambda v: not v.fleet_id.internal)) == 0
-        # Use fleet_id in vals if it gets updated
-        if 'fleet_id' in vals:
-            fleet_id = self.env['fleet.category'].sudo().browse(vals['fleet_id'])
-            is_internal = fleet_id.internal
-
-        # Compute partner from employee
         if 'driver_employee_id' in vals:
             partner = False
             if vals['driver_employee_id']:
                 employee = self.env['hr.employee'].sudo().browse(vals['driver_employee_id'])
                 partner = employee.address_home_id.id
             vals['driver_id'] = partner
-        elif 'driver_id' in vals and is_internal:
+        elif 'driver_id' in vals:
             # Reverse the process if we can find a single employee
             employee = False
             if vals['driver_id']:
@@ -99,7 +78,7 @@ class FleetVehicle(models.Model):
                 employee = self.env['hr.employee'].sudo().browse(vals['future_driver_employee_id'])
                 partner = employee.address_home_id.id
             vals['future_driver_id'] = partner
-        elif 'future_driver_id' in vals and is_internal:
+        elif 'future_driver_id' in vals:
             # Reverse the process if we can find a single employee
             employee = False
             if vals['future_driver_id']:
@@ -111,44 +90,6 @@ class FleetVehicle(models.Model):
                     employee = employee_ids[0].id
             vals['future_driver_employee_id'] = employee
 
-        # Cases when fleet_id changes but driver_id and future_driver_id do not
-        # 1: not internal -> remove eployee related data
-        # 2: internal -> compute employee for each vehicle in the case no employee can be computed for the address
-        #       we remove it's current driver_id
-        if 'fleet_id' in vals:
-            if not is_internal:
-                vals['driver_employee_id'] = False
-                vals['future_driver_employee_id'] = False
-            else:
-                # Prefetch all employees we will need
-                employees = self.env['hr.employee'].search([
-                    ('address_home_id', 'in', (self.driver_id | self.future_driver_id).ids),
-                ])
-                for vehicle in self:
-                    if 'driver_employee_id' not in vals:
-                        driver_id = vals['driver_id'] if 'driver_id' in vals else vehicle.driver_id.id
-                        driver_employee_id = employees.filtered(lambda e: e.address_home_id.id == driver_id)
-                        if len(driver_employee_id) == 1:
-                            vehicle.driver_employee_id = driver_employee_id
-                        else:
-                            vehicle.write({
-                                'driver_id': False,
-                                'driver_employee_id': False,
-                            })
-                    if 'future_driver_employee_id' not in vals:
-                        future_driver_id = vals['future_driver_id'] if 'future_driver_id' in vals else \
-                            vehicle.future_driver_id.id
-                        future_driver_employee_id = employees.filtered(lambda e: (
-                            e.address_home_id.id == future_driver_id
-                        ))
-                        if len(future_driver_employee_id) == 1:
-                            vehicle.future_driver_employee_id = future_driver_employee_id
-                        else:
-                            vehicle.write({
-                                'future_driver_id': False,
-                                'future_driver_employee_id': False,
-                            })
-
     @api.model
     def create(self, vals):
         self._update_create_write_vals(vals)
@@ -165,3 +106,13 @@ class FleetVehicle(models.Model):
                         partners_to_unsubscribe.append(employee.user_id.partner_id.id)
                     vehicle.message_unsubscribe(partner_ids=partners_to_unsubscribe)
         return super().write(vals)
+
+    def action_open_employee(self):
+        self.ensure_one()
+        return {
+            'name': _('Related Employee'),
+            'type': 'ir.actions.act_window',
+            'res_model': 'hr.employee',
+            'view_mode': 'form',
+            'res_id': self.driver_employee_id.id,
+        }

--- a/addons/hr_fleet/models/fleet_vehicle_assignation_log.py
+++ b/addons/hr_fleet/models/fleet_vehicle_assignation_log.py
@@ -7,8 +7,7 @@ from odoo import fields, models
 class FleetVehicleAssignationLog(models.Model):
     _inherit = 'fleet.vehicle.assignation.log'
 
-    driver_employee_id = fields.Many2one('hr.employee', 'Driver (Employee)')
-    fleet_is_internal = fields.Boolean(related='vehicle_id.fleet_is_internal')
+    driver_employee_id = fields.Many2one(related="vehicle_id.driver_employee_id", string='Driver (Employee)')
     attachment_number = fields.Integer('Number of Attachments', compute='_compute_attachment_number')
 
     def _compute_attachment_number(self):

--- a/addons/hr_fleet/models/fleet_vehicle_log_contract.py
+++ b/addons/hr_fleet/models/fleet_vehicle_log_contract.py
@@ -8,6 +8,5 @@ class FleetVehicleLogContract(models.Model):
 
     purchaser_employee_id = fields.Many2one(
         related='vehicle_id.driver_employee_id',
-        string='Current Driver (Employee)',
+        string='Driver (Employee)',
     )
-    fleet_is_internal = fields.Boolean(related='vehicle_id.fleet_is_internal')

--- a/addons/hr_fleet/models/fleet_vehicle_log_services.py
+++ b/addons/hr_fleet/models/fleet_vehicle_log_services.py
@@ -10,13 +10,12 @@ class FleetVehicleLogServices(models.Model):
         'hr.employee', string="Driver (Employee)",
         compute='_compute_purchaser_employee_id', readonly=False, store=True,
     )
-    fleet_is_internal = fields.Boolean(related='vehicle_id.fleet_is_internal')
 
     @api.depends('vehicle_id', 'purchaser_employee_id')
     def _compute_purchaser_id(self):
-        internal = self.filtered(lambda r: r.fleet_is_internal)
-        super(FleetVehicleLogServices, (self - internal))._compute_purchaser_id()
-        for service in internal:
+        internals = self.filtered(lambda r: r.purchaser_employee_id)
+        super(FleetVehicleLogServices, (self - internals))._compute_purchaser_id()
+        for service in internals:
             service.purchaser_id = service.purchaser_employee_id.address_home_id
 
     @api.depends('vehicle_id')

--- a/addons/hr_fleet/models/fleet_vehicle_odometer.py
+++ b/addons/hr_fleet/models/fleet_vehicle_odometer.py
@@ -8,6 +8,6 @@ class FleetVehicleOdometer(models.Model):
     _inherit = 'fleet.vehicle.odometer'
 
     driver_employee_id = fields.Many2one(
-        related='vehicle_id.driver_employee_id', string='Current Driver (Employee)',
+        related='vehicle_id.driver_employee_id', string='Driver (Employee)',
         readonly=True,
     )
