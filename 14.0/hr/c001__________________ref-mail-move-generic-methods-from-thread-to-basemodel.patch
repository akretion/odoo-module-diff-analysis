PR: https://github.com/odoo/odoo/pull/

From: f5df1ed912455e5ed52a65df3149f30a9d424de0
From: Thibault Delavall√©e
Date: 2020-08-27 14:29:54

Structural Changes: 2
Total Changes: 42

[REF] mail: move generic methods from thread to BaseModel

PURPOSE

Since v13 some commits added code in mail thread file. This file is already
quite long and keeping it organized allow to understand its content.

SPECIFICATIONS

Some methods defined on mail.thread may actually be called on models
not inheriting from mail.thread . Instead of having model methods on mail
thread receiving a records parameter it seems better to have those available
directly on BaseModel.

Move static_message_track on BaseModel in models.py. This method is now called
_mail_track, to be coherent with othe rmail-related naming. It is used in
accounting to track values in line model that does not inherit from mail.
thread. Update accounting accordingly (followup of d862965).

Move _message_get_default_recipients_on_records in models.py. Renaming it
_message_get_default_recipients() allow to be compatible with current behavior
and current override available in some addons (like CRM, event, ...).

Move _notify_get_reply_to_on_records in models.py. Renaming it
_notify_get_reply_to() allows to be shorter and coherent.

Move _alias_check_contact_on_record in models.py. Renaming it
_alias_check_contact_() allows to be shorter and coherent. Its override in
hr is also moved on BaseModel.

Backward compatibility is kept for those methods as this PR target a mostly
stable version.

LINKS

Task ID-2327096 (code cleaning)
PR #56631

================================= pseudo patch: =================================

--- a/addons/hr/models/__init__.py
+++ b/addons/hr/models/__init__.py
@@ -10,6 +10,7 @@ from . import hr_job
 from . import hr_plan
 from . import mail_alias
 from . import mail_channel
+from . import models
 from . import res_config_settings
 from . import res_partner
 from . import res_users

--- a/addons/hr/models/mail_alias.py
+++ b/addons/hr/models/mail_alias.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import fields, models, tools, _
+from odoo import fields, models, _
 
 
 class Alias(models.Model):
@@ -16,21 +16,4 @@ class Alias(models.Model):
             return _("""Hi,<br/>
 Your document has not been created because your email address is not recognized.<br/>
 Please send emails with the email address recorded on your employee information, or contact your HR manager.""")
-        else:
-            return super(Alias, self)._get_alias_bounced_body_fallback(message_dict)
-
-
-class AliasMixin(models.AbstractModel):
-    _inherit = 'mail.alias.mixin'
-
-    def _alias_check_contact_on_record(self, record, message, message_dict, alias):
-        if alias.alias_contact == 'employees':
-            email_from = tools.decode_message_header(message, 'From')
-            email_address = tools.email_split(email_from)[0]
-            employee = self.env['hr.employee'].search([('work_email', 'ilike', email_address)], limit=1)
-            if not employee:
-                employee = self.env['hr.employee'].search([('user_id.email', 'ilike', email_address)], limit=1)
-            if not employee:
-                return _('restricted to employees')
-            return True
-        return super(AliasMixin, self)._alias_check_contact_on_record(record, message, message_dict, alias)
+        return super(Alias, self)._get_alias_bounced_body_fallback(message_dict)

--- a/None
+++ b/addons/hr/models/models.py
@@ -0,0 +1,20 @@
+# -*- coding: utf-8 -*-
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import models, tools, _
+
+
+class BaseModel(models.AbstractModel):
+    _inherit = 'base'
+
+    def _alias_get_error_message(self, message, message_dict, alias):
+        if alias.alias_contact == 'employees':
+            email_from = tools.decode_message_header(message, 'From')
+            email_address = tools.email_split(email_from)[0]
+            employee = self.env['hr.employee'].search([('work_email', 'ilike', email_address)], limit=1)
+            if not employee:
+                employee = self.env['hr.employee'].search([('user_id.email', 'ilike', email_address)], limit=1)
+            if not employee:
+                return _('restricted to employees')
+            return True
+        return super(BaseModel, self)._alias_get_error_message(message, message_dict, alias)
