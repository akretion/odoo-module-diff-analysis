PR: https://github.com/odoo/odoo/pull/191963

From: fc5f31b5882d78d9294e420af5e6a9258d407539
From: Gorash
Date: 2024-12-28 08:04:34

Breaking data model changes scores: del:4 + add:0, change matches:
-    _inherit = ['ir.config_parameter']
-    _inherit = ["ir.qweb"]
-    _inherit = ['res.config.settings']
-    _inherit = ['res.users']

Total Changes: 34

[IMP] orm/all: Make _name or _inherit mandatory

This is a request following the revert of the use of class names
(concerning the python inheritance and typing project)

closes odoo/odoo#191963

X-original-commit: d6bf6df30095a27eac0315ea78bb57b721efdd5e
Related: odoo/enterprise#76269
Related: odoo/design-themes#1040
Signed-off-by: Raphael Collet <rco@odoo.com>

================================= pseudo patch: =================================

--- a/addons/mail/models/fetchmail.py
+++ b/addons/mail/models/fetchmail.py
@@ -56,6 +56,7 @@ for name in POP3_ATTRIBUTES:
 
 class FetchmailServer(models.Model):
     """Incoming POP/IMAP mail server account"""
+    _name = 'fetchmail.server'
     _description = 'Incoming Mail Server'
     _order = 'priority'
 

--- a/addons/mail/models/ir_actions_server.py
+++ b/addons/mail/models/ir_actions_server.py
@@ -9,6 +9,7 @@ from odoo.exceptions import ValidationError
 
 class IrActionsServer(models.Model):
     """ Add mail.thread related options in server actions. """
+    _name = 'ir.actions.server'
     _description = 'Server Action'
     _inherit = ['ir.actions.server']
 

--- a/addons/mail/models/ir_config_parameter.py
+++ b/addons/mail/models/ir_config_parameter.py
@@ -75,7 +75,7 @@ class IrConfig_Parameter(models.Model):
     #     sfu_server_key': rtc server usage and configuration;
     #   * 'discuss.tenor_api_key', 'discuss.tenor_gif_limit' and 'discuss.
     #     tenor_content_filter' used for gif fetch service;
-    _inherit = ['ir.config_parameter']
+    _inherit = 'ir.config_parameter'
 
     @api.model
     def set_param(self, key, value):

--- a/addons/mail/models/ir_qweb.py
+++ b/addons/mail/models/ir_qweb.py
@@ -10,7 +10,7 @@ class IrQweb(models.AbstractModel):
     is allowed for the given model.
     """
 
-    _inherit = ["ir.qweb"]
+    _inherit = "ir.qweb"
 
     allowed_directives = (
         "out",

--- a/addons/mail/models/mail_activity.py
+++ b/addons/mail/models/mail_activity.py
@@ -23,6 +23,7 @@ class MailActivity(models.Model):
     that can be used in kanban view to display a status. Once done activities
     are unlinked and a message is posted. This message has a new activity_type_id
     field that indicates the activity linked to the message. """
+    _name = 'mail.activity'
     _description = 'Activity'
     _order = 'date_deadline ASC, id ASC'
     _rec_name = 'summary'

--- a/addons/mail/models/mail_activity_mixin.py
+++ b/addons/mail/models/mail_activity_mixin.py
@@ -36,6 +36,7 @@ class MailActivityMixin(models.AbstractModel):
        no automated activities will be generated, updated or unlinked, allowing
        to save computation and avoid generating unwanted activities;
     """
+    _name = 'mail.activity.mixin'
     _description = 'Activity Mixin'
 
     def _default_activity_type(self):

--- a/addons/mail/models/mail_activity_type.py
+++ b/addons/mail/models/mail_activity_type.py
@@ -12,6 +12,7 @@ class MailActivityType(models.Model):
     kind of activity e.g. call, mail, meeting. An activity can be generic i.e.
     available for all models using activities; or specific to a model in which
     case res_model field should be used. """
+    _name = 'mail.activity.type'
     _description = 'Activity Type'
     _order = 'sequence, id'
     _rec_name = 'name'

--- a/addons/mail/models/mail_alias.py
+++ b/addons/mail/models/mail_alias.py
@@ -29,6 +29,7 @@ class MailAlias(models.Model):
        on the company's mail server, so that as soon as a new mail.alias is
        created, it becomes immediately usable and Odoo will accept email for it.
      """
+    _name = 'mail.alias'
     _description = "Email Aliases"
     _order = 'alias_model_id, alias_name'
     _rec_name = 'alias_name'

--- a/addons/mail/models/mail_alias_domain.py
+++ b/addons/mail/models/mail_alias_domain.py
@@ -12,6 +12,7 @@ class MailAliasDomain(models.Model):
 
     This replaces ``mail.alias.domain`` configuration parameter use until v16.
     """
+    _name = 'mail.alias.domain'
     _description = "Email Domain"
     _order = 'sequence ASC, id ASC'
 

--- a/addons/mail/models/mail_alias_mixin.py
+++ b/addons/mail/models/mail_alias_mixin.py
@@ -11,6 +11,7 @@ _logger = logging.getLogger(__name__)
 class MailAliasMixin(models.AbstractModel):
     """ A mixin for models that inherits mail.alias to have a one-to-one relation
     between the model and its alias. """
+    _name = 'mail.alias.mixin'
     _inherit = ['mail.alias.mixin.optional']
     _inherits = {'mail.alias': 'alias_id'}
     _description = 'Email Aliases Mixin'

--- a/addons/mail/models/mail_alias_mixin_optional.py
+++ b/addons/mail/models/mail_alias_mixin_optional.py
@@ -14,6 +14,7 @@ class MailAliasMixinOptional(models.AbstractModel):
     based on given 'alias_name', allowing to gradually populate the alias table
     without having void aliases as when used with an inherits-like implementation.
     """
+    _name = 'mail.alias.mixin.optional'
     _description = 'Email Aliases Mixin (light)'
     ALIAS_WRITEABLE_FIELDS = ['alias_domain_id', 'alias_name', 'alias_contact', 'alias_defaults', 'alias_bounced_content']
 

--- a/addons/mail/models/mail_blacklist.py
+++ b/addons/mail/models/mail_blacklist.py
@@ -7,6 +7,7 @@ from odoo.exceptions import UserError
 
 class MailBlacklist(models.Model):
     """ Model of blacklisted email addresses to stop sending emails."""
+    _name = 'mail.blacklist'
     _inherit = ['mail.thread']
     _description = 'Mail Blacklist'
     _rec_name = 'email'

--- a/addons/mail/models/mail_canned_response.py
+++ b/addons/mail/models/mail_canned_response.py
@@ -7,6 +7,7 @@ from odoo.addons.mail.tools.discuss import Store
 class MailCannedResponse(models.Model):
     """ Canned Response: content that automatically replaces shortcuts of your
     choosing. This content can still be adapted before sending your message. """
+    _name = 'mail.canned.response'
     _description = "Canned Response"
     _order = "id desc"
     _rec_name = "source"

--- a/addons/mail/models/mail_composer_mixin.py
+++ b/addons/mail/models/mail_composer_mixin.py
@@ -16,6 +16,7 @@ class MailComposerMixin(models.AbstractModel):
     It is meant to evolve in a near future with upcoming support of qweb and fine
     grain control of rendering access.
     """
+    _name = 'mail.composer.mixin'
     _inherit = ['mail.render.mixin']
     _description = 'Mail Composer Mixin'
 

--- a/addons/mail/models/mail_followers.py
+++ b/addons/mail/models/mail_followers.py
@@ -17,6 +17,7 @@ class MailFollowers(models.Model):
     :param: res_model: model of the followed objects
     :param: res_id: ID of resource (may be 0 for every objects)
     """
+    _name = 'mail.followers'
     _rec_name = 'partner_id'
     _log_access = False
     _description = 'Document Followers'

--- a/addons/mail/models/mail_gateway_allowed.py
+++ b/addons/mail/models/mail_gateway_allowed.py
@@ -17,6 +17,7 @@ class MailGatewayAllowed(models.Model):
     from an automated-source. This model stores those trusted source and this restriction
     won't apply to them.
     """
+    _name = 'mail.gateway.allowed'
     _description = 'Mail Gateway Allowed'
 
     email = fields.Char('Email Address', required=True)

--- a/addons/mail/models/mail_mail.py
+++ b/addons/mail/models/mail_mail.py
@@ -25,6 +25,7 @@ _UNFOLLOW_REGEX = re.compile(r'<span\s.*(t-if="\w.*")?\s.*id="mail_unfollow".*?<
 class MailMail(models.Model):
     """ Model holding RFC2822 email messages to send. This model also provides
         facilities to queue and send new email messages.  """
+    _name = 'mail.mail'
     _description = 'Outgoing Mails'
     _inherits = {'mail.message': 'mail_message_id'}
     _order = 'id desc'

--- a/addons/mail/models/mail_message.py
+++ b/addons/mail/models/mail_message.py
@@ -65,6 +65,7 @@ class MailMessage(models.Model):
     See ``mailing.trace`` model in mass_mailing application for mailing trace
     information.
     """
+    _name = 'mail.message'
     _inherit = ["bus.listener.mixin"]
     _description = 'Message'
     _order = 'id desc'

--- a/addons/mail/models/mail_message_schedule.py
+++ b/addons/mail/models/mail_message_schedule.py
@@ -19,6 +19,7 @@ class MailMessageSchedule(models.Model):
     exists on the <mail.mail> but it does not allow us to delay the sending
     of the <bus.bus> notifications.
     """
+    _name = 'mail.message.schedule'
     _description = 'Scheduled Messages'
     _order = 'scheduled_datetime DESC, id DESC'
     _rec_name = 'mail_message_id'

--- a/addons/mail/models/mail_message_subtype.py
+++ b/addons/mail/models/mail_message_subtype.py
@@ -8,6 +8,7 @@ class MailMessageSubtype(models.Model):
     """ Class holding subtype definition for messages. Subtypes allow to tune
         the follower subscription, allowing only some subtypes to be pushed
         on the Wall. """
+    _name = 'mail.message.subtype'
     _description = 'Message subtypes'
     _order = 'sequence, id'
 

--- a/addons/mail/models/mail_scheduled_message.py
+++ b/addons/mail/models/mail_scheduled_message.py
@@ -27,6 +27,7 @@ class MailScheduledMessage(models.Model):
     have static notification parameters, but some will become dynamic when adding mass_mail support
     such as 'email_from' and 'force_email_lang'.
     """
+    _name = 'mail.scheduled.message'
     _description = 'Scheduled Message'
 
     # content

--- a/addons/mail/models/mail_template.py
+++ b/addons/mail/models/mail_template.py
@@ -17,6 +17,7 @@ _logger = logging.getLogger(__name__)
 
 class MailTemplate(models.Model):
     "Templates for sending email"
+    _name = 'mail.template'
     _inherit = ['mail.render.mixin', 'template.reset.mixin']
     _description = 'Email Templates'
     _order = 'user_id, name, id'

--- a/addons/mail/models/mail_thread.py
+++ b/addons/mail/models/mail_thread.py
@@ -87,6 +87,7 @@ class MailThread(models.AbstractModel):
      - ``mail_notify_force_send``: if less than 50 email notifications to send,
        send them directly instead of using the queue; True by default
     '''
+    _name = 'mail.thread'
     _description = 'Email Thread'
     _mail_flat_thread = True  # flatten the discussion history
     _mail_post_access = 'write'  # access required on the document to post on it

--- a/addons/mail/models/mail_thread_blacklist.py
+++ b/addons/mail/models/mail_thread_blacklist.py
@@ -26,6 +26,7 @@ class MailThreadBlacklist(models.AbstractModel):
 
     Mail Thread capabilities are required for this mixin. """
 
+    _name = 'mail.thread.blacklist'
     _inherit = ['mail.thread']
     _description = 'Mail Blacklist mixin'
     _primary_email = 'email'

--- a/addons/mail/models/mail_thread_main_attachment.py
+++ b/addons/mail/models/mail_thread_main_attachment.py
@@ -8,6 +8,7 @@ from odoo.addons.mail.tools.discuss import Store
 class MailThreadMainAttachment(models.AbstractModel):
     """ Mixin that adds main attachment support to the MailThread class. """
 
+    _name = 'mail.thread.main.attachment'
     _inherit = ['mail.thread']
     _description = 'Mail Main Attachment management'
 

--- a/addons/mail/models/mail_tracking_duration_mixin.py
+++ b/addons/mail/models/mail_tracking_duration_mixin.py
@@ -22,6 +22,7 @@ class MailTrackingDurationMixin(models.AbstractModel):
 
             e.g.
             class MyModel(models.Model):
+                _name = 'my.model'
                 _track_duration_field = "tracked_field"
 
                 tracked_field = fields.Many2one('tracked.model', tracking=True)

--- a/addons/mail/models/res_config_settings.py
+++ b/addons/mail/models/res_config_settings.py
@@ -10,7 +10,7 @@ from odoo.exceptions import UserError
 class ResConfigSettings(models.TransientModel):
     """ Inherit the base settings to add a counter of failed email + configure
     the alias domain. """
-    _inherit = ['res.config.settings']
+    _inherit = 'res.config.settings'
 
     external_email_server_default = fields.Boolean(
         "Use Custom Email Servers",

--- a/addons/mail/models/res_partner.py
+++ b/addons/mail/models/res_partner.py
@@ -12,6 +12,7 @@ from odoo.addons.mail.tools.discuss import Store
 class ResPartner(models.Model):
     """ Update partner to add a field about notification preferences. Add a generic opt-out field that can be used
        to restrict usage of automatic email templates. """
+    _name = 'res.partner'
     _inherit = ['res.partner', 'mail.activity.mixin', 'mail.thread.blacklist']
     _mail_flat_thread = False
 

--- a/addons/mail/models/res_users.py
+++ b/addons/mail/models/res_users.py
@@ -14,7 +14,7 @@ class ResUsers(models.Model):
         - add a welcome message
         - add suggestion preference
     """
-    _inherit = ['res.users']
+    _inherit = 'res.users'
 
     notification_type = fields.Selection([
         ('email', 'Handle by Emails'),

--- a/addons/mail/models/res_users_settings_volumes.py
+++ b/addons/mail/models/res_users_settings_volumes.py
@@ -6,6 +6,7 @@ from odoo import api, fields, models
 
 class ResUsersSettingsVolumes(models.Model):
     """ Represents the volume of the sound that the user of user_setting_id will receive from partner_id. """
+    _name = 'res.users.settings.volumes'
     _description = 'User Settings Volumes'
 
     user_setting_id = fields.Many2one('res.users.settings', required=True, ondelete='cascade', index=True)
