PR: https://github.com/odoo/odoo/pull/129177

From: 0baaa4b65489727354e566435fd33f9b5a2ede9e
From: Audric Onockx (auon)
Date: 2023-09-28 07:50:02

Structural Changes: 4
Total Changes: 70

[IMP] project,hr_timesheet: improve project update

Add a new column, after tasks that shows the following information :

Tasks: Total done tasks /  Total tasks (ratio in percentage)
Timesheet: Hours spent/ allocated hours (ratio in percentage) 
\> visibility: only show if the timesheet setting is activated.

Right side panel  :

Add the Done icon before Tasks 
Add hours spent/allocated hours information under the Timesheet
Extra time: Add a new stat button that shows
the overall extra time used for the project. 
visible if hours spent > allocated hours.
By clicking on this it will redirect to the same view
as we have for the timesheet stat button.

task-3432102

closes odoo/odoo#129177

Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/project_project.py
+++ b/addons/project/models/project_project.py
@@ -49,19 +49,23 @@ class Project(models.Model):
             project.doc_count = docs_count.get(project.id, 0)
 
     def _compute_task_count(self):
-        task_count_per_project = {
-            project.id: count
-            for project, count in self.env['project.task'].with_context(
-                active_test=any(project.active for project in self)
-            )._read_group(
-                [('state', 'not in', list(CLOSED_STATES)), ('project_id', 'in', self.ids)],
-                ['project_id'],
-                ['__count'],
-            )
-        }
+        project_and_state_counts = self.env['project.task'].with_context(
+            active_test=any(project.active for project in self)
+        )._read_group(
+            [('project_id', 'in', self.ids)],
+            ['project_id', 'state'],
+            ['__count'],
+        )
+        task_counts_per_project_id = defaultdict(lambda: {
+            'open_task_count': 0,
+            'closed_task_count': 0,
+        })
+        for project, state, count in project_and_state_counts:
+            task_counts_per_project_id[project.id]['closed_task_count' if state in CLOSED_STATES else 'open_task_count'] += count
         for project in self:
-            task_count = task_count_per_project.get(project.id, 0)
-            project.task_count = task_count
+            open_task_count, closed_task_count = task_counts_per_project_id[project.id].values()
+            project.closed_task_count = closed_task_count
+            project.task_count = open_task_count + closed_task_count
 
     def _default_stage_id(self):
         # Since project stages are order by sequence first, this should fetch the one with the lowest sequence number.
@@ -125,6 +129,7 @@ class Project(models.Model):
         'resource.calendar', string='Working Time', compute='_compute_resource_calendar_id')
     type_ids = fields.Many2many('project.task.type', 'project_task_type_rel', 'project_id', 'type_id', string='Tasks Stages')
     task_count = fields.Integer(compute='_compute_task_count', string="Task Count")
+    closed_task_count = fields.Integer(compute='_compute_task_count', string="Closed Task Count")
     task_ids = fields.One2many('project.task', 'project_id', string='Tasks',
                                domain=[('state', 'not in', list(CLOSED_STATES))])
     color = fields.Integer(string='Color Index')
@@ -820,10 +825,23 @@ class Project(models.Model):
 
     def _get_stat_buttons(self):
         self.ensure_one()
+        if self.task_count:
+            number = _lt(
+                "%(closed_task_count)s / %(task_count)s (%(closed_rate)s%%)",
+                closed_task_count=self.closed_task_count,
+                task_count=self.task_count,
+                closed_rate=round(100 * self.closed_task_count / self.task_count),
+            )
+        else:
+            number = _lt(
+                "%(closed_task_count)s / %(task_count)s",
+                closed_task_count=self.closed_task_count,
+                task_count=self.task_count,
+            )
         buttons = [{
-            'icon': 'tasks',
+            'icon': 'check',
             'text': _lt('Tasks'),
-            'number': self.task_count,
+            'number': number,
             'action_type': 'object',
             'action': 'action_view_tasks',
             'show': True,

--- a/addons/project/models/project_update.py
+++ b/addons/project/models/project_update.py
@@ -23,7 +23,7 @@ STATUS_COLOR = {
 class ProjectUpdate(models.Model):
     _name = 'project.update'
     _description = 'Project Update'
-    _order = 'date desc'
+    _order = 'id desc'
     _inherit = ['mail.thread.cc', 'mail.activity.mixin']
 
     def default_get(self, fields):
@@ -58,6 +58,9 @@ class ProjectUpdate(models.Model):
     date = fields.Date(default=fields.Date.context_today, tracking=True)
     project_id = fields.Many2one('project.project', required=True)
     name_cropped = fields.Char(compute="_compute_name_cropped")
+    task_count = fields.Integer("Task Count", readonly=True)
+    closed_task_count = fields.Integer("Closed Task Count", readonly=True)
+    closed_task_percentage = fields.Integer("Closed Task Percentage", compute="_compute_closed_task_percentage")
 
     @api.depends('status')
     def _compute_color(self):
@@ -66,13 +69,17 @@ class ProjectUpdate(models.Model):
 
     @api.depends('progress')
     def _compute_progress_percentage(self):
-        for u in self:
-            u.progress_percentage = u.progress / 100
+        for update in self:
+            update.progress_percentage = update.progress / 100
 
     @api.depends('name')
     def _compute_name_cropped(self):
-        for u in self:
-            u.name_cropped = (u.name[:57] + '...') if len(u.name) > 60 else u.name
+        for update in self:
+            update.name_cropped = (update.name[:57] + '...') if len(update.name) > 60 else update.name
+
+    def _compute_closed_task_percentage(self):
+        for update in self:
+            update.closed_task_percentage = update.task_count and round(update.closed_task_count * 100 / update.task_count)
 
     # ---------------------------------
     # ORM Override
@@ -81,7 +88,12 @@ class ProjectUpdate(models.Model):
     def create(self, vals_list):
         updates = super().create(vals_list)
         for update in updates:
-            update.project_id.sudo().last_update_id = update
+            project = update.project_id
+            project.sudo().last_update_id = update
+            update.write({
+                "task_count": project.task_count,
+                "closed_task_count": project.closed_task_count,
+            })
         return updates
 
     def unlink(self):
