PR: https://github.com/odoo/odoo/pull/75535

From: 2dee29a7dc6db5cd1f9cc62989b905cff5466f3b
From: Arnaud Gony
Date: 2021-09-06 13:17:48

Structural Changes: 3
Total Changes: 32

[IMP] auth_totp: 2FA Trusted Devices

+ Added the 'Trusted Devices' feature
+ Added 'Remember this Device' checkbox on /web/login/totp
+ Added trusted device's OS / browser on Profile > Account Security

Added '2FA Trusted Devices' feature to allow users to remember their
device to bypass the 2FA for the next connections. The trusted devices
are displayed in a 'Trusted Devices' One2Many under the 'Developer API
Keys'. It is possible to revoke all the trusted devices at once with a
special button. It is also possible to revoke one at a time on the
desired one.

Task-id 2523092

closes odoo/odoo#75535

Related: odoo/upgrade#2800
Signed-off-by: Martin Trigaux (mat) <mat@odoo.com>
Co-authored-by: Martin Trigaux <mat@odoo.com>

================================= pseudo patch: =================================

--- a/addons/auth_totp/models/__init__.py
+++ b/addons/auth_totp/models/__init__.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
+from . import auth_totp
 from . import ir_http
 from . import res_users
 from . import totp

--- a/None
+++ b/addons/auth_totp/models/auth_totp.py
@@ -0,0 +1,14 @@
+# -*- coding: utf-8 -*-
+from odoo import models
+
+
+class AuthTotpDevice(models.Model):
+
+    # init is overriden in res.users.apikeys to create a secret column 'key'
+    # use a different model to benefit from the secured methods while not mixing
+    # two different concepts
+
+    _name = "auth_totp.device"
+    _inherit = "res.users.apikeys"
+    _description = "Authentication Device"
+    _auto = False

--- a/addons/auth_totp/models/res_users.py
+++ b/addons/auth_totp/models/res_users.py
@@ -22,10 +22,12 @@ class Users(models.Model):
 
     totp_secret = fields.Char(copy=False, groups=fields.NO_ACCESS)
     totp_enabled = fields.Boolean(string="Two-factor authentication", compute='_compute_totp_enabled')
+    totp_trusted_device_ids = fields.One2many('auth_totp.device', 'user_id', string="Trusted Devices")
 
     @property
     def SELF_READABLE_FIELDS(self):
-        return super().SELF_READABLE_FIELDS + ['totp_enabled']
+        return super().SELF_READABLE_FIELDS + ['totp_enabled', 'totp_trusted_device_ids']
+
 
     def _mfa_url(self):
         r = super()._mfa_url()
@@ -120,7 +122,9 @@ class Users(models.Model):
             _logger.info("2FA disable: REJECT for %s (%s) by uid #%s", self, logins, self.env.user.id)
             return False
 
+        self.revoke_all_devices()
         self.sudo().write({'totp_secret': False})
+
         if request and self == self.env.user:
             self.flush()
             # update session token so the user does not get logged out (cache cleared by change)
@@ -163,3 +167,14 @@ class Users(models.Model):
             'views': [(False, 'form')],
             'context': self.env.context,
         }
+
+    @check_identity
+    def revoke_all_devices(self):
+        self._revoke_all_devices()
+
+    def _revoke_all_devices(self):
+        self.totp_trusted_device_ids._remove()
+
+    def change_password(self, old_passwd, new_passwd):
+        self.env.user._revoke_all_devices()
+        return super().change_password(old_passwd, new_passwd)
