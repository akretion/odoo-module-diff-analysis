PR: https://github.com/odoo/odoo/pull/

From: 59676002968294a3cf3dbf7ffaef31e14bf00dd4
From: qdp-odoo
Date: 2017-06-29 15:05:19

Structural Changes: 7
Total Changes: 39

[IMP] account: implement account.account hierarchies

This information will be used by account.report to render accounts in hierarchies.

Was PR #17367

================================= pseudo patch: =================================

--- a/addons/account/models/account.py
+++ b/addons/account/models/account.py
@@ -74,6 +74,7 @@ class AccountAccount(models.Model):
     company_id = fields.Many2one('res.company', string='Company', required=True,
         default=lambda self: self.env['res.company']._company_default_get('account.account'))
     tag_ids = fields.Many2many('account.account.tag', 'account_account_account_tag', string='Tags', help="Optional tags you may want to assign for custom reporting")
+    group_id = fields.Many2one('account.group')
 
     _sql_constraints = [
         ('code_company_uniq', 'unique (code,company_id)', 'The code of the account must be unique per company !')
@@ -112,6 +113,22 @@ class AccountAccount(models.Model):
         if self.internal_type in ('receivable', 'payable'):
             self.reconcile = True
 
+    @api.onchange('code')
+    def onchange_code(self):
+        AccountGroup = self.env['account.group']
+
+        group = False
+        code_prefix = self.code
+
+        # find group with longest matching prefix
+        while code_prefix:
+            matching_group = AccountGroup.search([('code_prefix', '=', code_prefix)], limit=1)
+            if matching_group:
+                group = matching_group
+                break
+            code_prefix = code_prefix[:-1]
+        self.group_id = group
+
     @api.multi
     @api.depends('name', 'code')
     def name_get(self):
@@ -177,6 +194,27 @@ class AccountAccount(models.Model):
         }
 
 
+class AccountGroup(models.Model):
+    _name = "account.group"
+
+    _parent_store = True
+    _order = 'code_prefix'
+
+    parent_id = fields.Many2one('account.group', index=True, ondelete='cascade')
+    parent_left = fields.Integer('Left Parent', index=True)
+    parent_right = fields.Integer('Right Parent', index=True)
+    name = fields.Char(required=True)
+    code_prefix = fields.Char()
+
+    def name_get(self):
+        result = []
+        for group in self:
+            name = group.name
+            if group.code_prefix:
+                name = group.code_prefix + ' ' + name
+            result.append((group.id, name))
+        return result
+
 class AccountJournal(models.Model):
     _name = "account.journal"
     _description = "Journal"

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -71,6 +71,7 @@ class AccountAccountTemplate(models.Model):
         help="This optional field allow you to link an account template to a specific chart template that may differ from the one its root parent belongs to. This allow you "
             "to define chart templates that extend another and complete it with few new accounts (You don't need to define the whole structure that is common to both several times).")
     tag_ids = fields.Many2many('account.account.tag', 'account_account_template_account_tag', string='Account tag', help="Optional tags you may want to assign for custom reporting")
+    group_id = fields.Many2one('account.group')
 
     @api.multi
     @api.depends('name', 'code')
