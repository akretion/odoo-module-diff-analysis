PR: https://github.com/odoo/odoo/pull/178200

From: f10bd8ddcf99c9247dca417fefbc260454d74ea1
From: Gorash
Date: 2024-10-15 09:33:02

Breaking data model changes scores: del:7 + add:0, change matches:
-    _inherit = 'digest.digest'
-    _inherit = 'discuss.channel.member'
-    _inherit = 'mail.message'
-    _inherit = "rating.rating"
-    _inherit = 'res.partner'
-    _inherit = 'res.users'
-    _inherit = 'res.users.settings'

Total Changes: 47

[IMP] *: adapt model class names to correspond to model names (apply script)

Part-of: odoo/odoo#178200
Related: odoo/enterprise#69762
Related: odoo/documentation#11115
Related: odoo/upgrade#6577
Related: odoo/design-themes#988
Related: odoo/upgrade-util#143

================================= pseudo patch: =================================

--- a/addons/im_livechat/models/chatbot_message.py
+++ b/addons/im_livechat/models/chatbot_message.py
@@ -4,13 +4,12 @@
 from odoo import models, fields
 
 
-class ChatbotMailMessage(models.Model):
+class ChatbotMessage(models.Model):
     """ Chatbot Mail Message
         We create a new model to store the related step to a mail.message and the user's answer.
         We do this in a new model to avoid bloating the 'mail.message' model.
     """
 
-    _name = 'chatbot.message'
     _description = 'Chatbot Message'
     _order = 'create_date desc, id desc'
     _rec_name = 'discuss_channel_id'

--- a/addons/im_livechat/models/chatbot_script.py
+++ b/addons/im_livechat/models/chatbot_script.py
@@ -7,7 +7,6 @@ from odoo.tools import email_normalize, get_lang, html2plaintext, is_html_empty,
 
 
 class ChatbotScript(models.Model):
-    _name = 'chatbot.script'
     _description = 'Chatbot Script'
     _inherit = ['image.mixin', 'utm.source.mixin']
     _rec_name = 'title'

--- a/addons/im_livechat/models/chatbot_script_answer.py
+++ b/addons/im_livechat/models/chatbot_script_answer.py
@@ -9,7 +9,6 @@ import textwrap
 
 
 class ChatbotScriptAnswer(models.Model):
-    _name = 'chatbot.script.answer'
     _description = 'Chatbot Script Answer'
     _order = 'script_step_id, sequence, id'
 

--- a/addons/im_livechat/models/chatbot_script_step.py
+++ b/addons/im_livechat/models/chatbot_script_step.py
@@ -13,7 +13,6 @@ from markupsafe import Markup
 
 
 class ChatbotScriptStep(models.Model):
-    _name = 'chatbot.script.step'
     _description = 'Chatbot Script Step'
     _order = 'sequence, id'
     _rec_name = 'message'

--- a/addons/im_livechat/models/digest.py
+++ b/addons/im_livechat/models/digest.py
@@ -4,8 +4,8 @@
 from odoo import fields, models
 
 
-class Digest(models.Model):
-    _inherit = 'digest.digest'
+class DigestDigest(models.Model):
+    _inherit = ['digest.digest']
 
     kpi_livechat_rating = fields.Boolean('% of Happiness')
     kpi_livechat_rating_value = fields.Float(digits=(16, 2), compute='_compute_kpi_livechat_rating_value')
@@ -43,7 +43,7 @@ class Digest(models.Model):
         self.kpi_livechat_response_value = response_time[0][0]
 
     def _compute_kpis_actions(self, company, user):
-        res = super(Digest, self)._compute_kpis_actions(company, user)
+        res = super()._compute_kpis_actions(company, user)
         res['kpi_livechat_rating'] = 'im_livechat.rating_rating_action_livechat_report'
         res['kpi_livechat_conversations'] = 'im_livechat.im_livechat_report_operator_action'
         res['kpi_livechat_response'] = 'im_livechat.im_livechat_report_channel_time_to_answer_action'

--- a/addons/im_livechat/models/discuss_channel.py
+++ b/addons/im_livechat/models/discuss_channel.py
@@ -13,7 +13,6 @@ class DiscussChannel(models.Model):
         It extends the base method for anonymous usage.
     """
 
-    _name = 'discuss.channel'
     _inherit = ['rating.mixin', 'discuss.channel']
 
     anonymous_name = fields.Char('Anonymous Name')

--- a/addons/im_livechat/models/discuss_channel_member.py
+++ b/addons/im_livechat/models/discuss_channel_member.py
@@ -6,8 +6,8 @@ from odoo import api, models, fields
 from odoo.addons.mail.tools.discuss import Store
 
 
-class ChannelMember(models.Model):
-    _inherit = 'discuss.channel.member'
+class DiscussChannelMember(models.Model):
+    _inherit = ['discuss.channel.member']
 
     @api.autovacuum
     def _gc_unpin_livechat_sessions(self):

--- a/addons/im_livechat/models/im_livechat_channel.py
+++ b/addons/im_livechat/models/im_livechat_channel.py
@@ -9,14 +9,13 @@ from odoo.addons.mail.tools.discuss import Store
 from odoo.addons.bus.websocket import WebsocketConnectionHandler
 
 
-class ImLivechatChannel(models.Model):
+class Im_LivechatChannel(models.Model):
     """ Livechat Channel
         Define a communication channel, which can be accessed with 'script_external' (script tag to put on
         external website), 'script_internal' (code to be integrated with odoo website) or via 'web_page' link.
         It provides rating tools, and access rules for anonymous people.
     """
 
-    _name = 'im_livechat.channel'
     _inherit = ['rating.parent.mixin']
     _description = 'Livechat Channel'
     _rating_satisfaction_days = 14  # include only last 14 days to compute satisfaction
@@ -338,13 +337,12 @@ class ImLivechatChannel(models.Model):
         store.add(self._name, self._read_format(fields))
 
 
-class ImLivechatChannelRule(models.Model):
+class Im_LivechatChannelRule(models.Model):
     """ Channel Rules
         Rules defining access to the channel (countries, and url matching). It also provide the 'auto pop'
         option to open automatically the conversation.
     """
 
-    _name = 'im_livechat.channel.rule'
     _description = 'Livechat Channel Rules'
     _order = 'sequence asc'
 

--- a/addons/im_livechat/models/ir_binary.py
+++ b/addons/im_livechat/models/ir_binary.py
@@ -4,7 +4,7 @@ from odoo import models
 
 
 class IrBinary(models.AbstractModel):
-    _inherit = "ir.binary"
+    _inherit = ["ir.binary"]
 
     def _find_record_check_access(self, record, access_token, field):
         """Custom access check allowing to retrieve an operator's avatar.

--- a/addons/im_livechat/models/mail_message.py
+++ b/addons/im_livechat/models/mail_message.py
@@ -5,7 +5,7 @@ from odoo.addons.mail.tools.discuss import Store
 
 
 class MailMessage(models.Model):
-    _inherit = 'mail.message'
+    _inherit = ['mail.message']
 
     parent_author_name = fields.Char(compute="_compute_parent_author_name")
     parent_body = fields.Html(compute="_compute_parent_body")

--- a/addons/im_livechat/models/rating_rating.py
+++ b/addons/im_livechat/models/rating_rating.py
@@ -4,9 +4,9 @@
 from odoo import api, models
 
 
-class Rating(models.Model):
+class RatingRating(models.Model):
 
-    _inherit = "rating.rating"
+    _inherit = ["rating.rating"]
 
     @api.depends('res_model', 'res_id')
     def _compute_res_name(self):
@@ -17,10 +17,10 @@ class Rating(models.Model):
                 current_object = self.env[rating.res_model].sudo().browse(rating.res_id)
                 rating.res_name = ('%s / %s') % (current_object.livechat_channel_id.name, current_object.id)
             else:
-                super(Rating, rating)._compute_res_name()
+                super(RatingRating, rating)._compute_res_name()
 
     def action_open_rated_object(self):
-        action = super(Rating, self).action_open_rated_object()
+        action = super().action_open_rated_object()
         if self.res_model == 'discuss.channel':
             if self.env[self.res_model].browse(self.res_id):
                 ctx = self.env.context.copy()

--- a/addons/im_livechat/models/res_partner.py
+++ b/addons/im_livechat/models/res_partner.py
@@ -6,9 +6,9 @@ from odoo import api, models, fields, _
 from odoo.addons.mail.tools.discuss import Store
 
 
-class Partners(models.Model):
+class ResPartner(models.Model):
     """Update of res.partner class to take into account the livechat username."""
-    _inherit = 'res.partner'
+    _inherit = ['res.partner']
 
     user_livechat_username = fields.Char(compute='_compute_user_livechat_username')
 
@@ -47,7 +47,7 @@ class Partners(models.Model):
         super()._to_store(store, fields=fields, **kwargs)
         if fields and "user_livechat_username" in fields:
             if partners := self.filtered(lambda p: not p.user_livechat_username):
-                super(Partners, partners)._to_store(store, fields=["name"])
+                super(ResPartner, partners)._to_store(store, fields=["name"])
 
     def _bus_send_history_message(self, channel, page_history):
         message_body = _("No history found")

--- a/addons/im_livechat/models/res_users.py
+++ b/addons/im_livechat/models/res_users.py
@@ -4,11 +4,11 @@
 from odoo import fields, models, api
 
 
-class Users(models.Model):
+class ResUsers(models.Model):
     """ Update of res.users class
         - add a preference about username for livechat purpose
     """
-    _inherit = 'res.users'
+    _inherit = ['res.users']
 
     livechat_username = fields.Char(string='Livechat Username', compute='_compute_livechat_username', inverse='_inverse_livechat_username', store=False)
     livechat_lang_ids = fields.Many2many('res.lang', string='Livechat Languages', compute='_compute_livechat_lang_ids', inverse='_inverse_livechat_lang_ids', store=False)

--- a/addons/im_livechat/models/res_users_settings.py
+++ b/addons/im_livechat/models/res_users_settings.py
@@ -5,7 +5,7 @@ from odoo import fields, models
 
 
 class ResUsersSettings(models.Model):
-    _inherit = 'res.users.settings'
+    _inherit = ['res.users.settings']
 
     livechat_username = fields.Char("Livechat Username", help="This username will be used as your name in the livechat channels.")
     livechat_lang_ids = fields.Many2many(comodel_name='res.lang', string='Livechat languages',
