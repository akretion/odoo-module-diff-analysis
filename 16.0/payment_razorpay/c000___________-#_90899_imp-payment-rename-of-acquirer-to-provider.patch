PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Breaking data model changes score: 2, change matches:
-    _inherit = 'payment.acquirer'
-    provider = fields.Selection(

Total Changes: 320

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_razorpay/models/__init__.py
+++ b/addons/payment_razorpay/models/__init__.py
@@ -1,4 +1,4 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_transaction

--- a/addons/payment_razorpay/models/payment_acquirer.py
+++ b/addons/payment_razorpay/models/payment_provider.py
@@ -17,10 +17,10 @@ from odoo.addons.payment_razorpay.const import SUPPORTED_CURRENCIES
 _logger = logging.getLogger(__name__)
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('razorpay', "Razorpay")], ondelete={'razorpay': 'set default'}
     )
     razorpay_key_id = fields.Char(
@@ -44,7 +44,7 @@ class PaymentAcquirer(models.Model):
     def _compute_feature_support_fields(self):
         """ Override of `payment` to enable additional features. """
         super()._compute_feature_support_fields()
-        self.filtered(lambda acq: acq.provider == 'razorpay').update({
+        self.filtered(lambda p: p.code == 'razorpay').update({
             'support_manual_capture': True,
             'support_refund': 'partial',
         })
@@ -52,15 +52,15 @@ class PaymentAcquirer(models.Model):
     # === BUSINESS METHODS ===#
 
     @api.model
-    def _get_compatible_acquirers(self, *args, currency_id=None, **kwargs):
-        """ Override of `payment` to filter out Razorpay acquirers for unsupported currencies. """
-        acquirers = super()._get_compatible_acquirers(*args, currency_id=currency_id, **kwargs)
+    def _get_compatible_providers(self, *args, currency_id=None, **kwargs):
+        """ Override of `payment` to filter out Razorpay providers for unsupported currencies. """
+        providers = super()._get_compatible_providers(*args, currency_id=currency_id, **kwargs)
 
         currency = self.env['res.currency'].browse(currency_id).exists()
         if currency and currency.name not in SUPPORTED_CURRENCIES:
-            acquirers = acquirers.filtered(lambda a: a.provider != 'razorpay')
+            providers = providers.filtered(lambda p: p.code != 'razorpay')
 
-        return acquirers
+        return providers
 
     def _razorpay_make_request(self, endpoint, payload=None, method='POST'):
         """ Make a request to Razorpay API at the specified endpoint.

--- a/addons/payment_razorpay/models/payment_transaction.py
+++ b/addons/payment_razorpay/models/payment_transaction.py
@@ -26,11 +26,11 @@ class PaymentTransaction(models.Model):
 
         :param dict processing_values: The generic and specific processing values of the
                                        transaction.
-        :return: The dict of acquirer-specific rendering values.
+        :return: The dict of provider-specific rendering values.
         :rtype: dict
         """
         res = super()._get_specific_rendering_values(processing_values)
-        if self.provider != 'razorpay':
+        if self.provider_code != 'razorpay':
             return res
 
         # Initiate the payment and retrieve the related order id.
@@ -39,7 +39,7 @@ class PaymentTransaction(models.Model):
             "Payload of '/orders' request for transaction with reference %s:\n%s",
             self.reference, pprint.pformat(payload)
         )
-        order_data = self.acquirer_id._razorpay_make_request(endpoint='orders', payload=payload)
+        order_data = self.provider_id._razorpay_make_request(endpoint='orders', payload=payload)
         _logger.info(
             "Response of '/orders' request for transaction with reference %s:\n%s",
             self.reference, pprint.pformat(order_data)
@@ -47,10 +47,10 @@ class PaymentTransaction(models.Model):
 
         # Initiate the payment
         converted_amount = payment_utils.to_minor_currency_units(self.amount, self.currency_id)
-        base_url = self.acquirer_id.get_base_url()
+        base_url = self.provider_id.get_base_url()
         return_url_params = {'reference': self.reference}
         rendering_values = {
-            'key_id': self.acquirer_id.razorpay_key_id,
+            'key_id': self.provider_id.razorpay_key_id,
             'name': self.company_id.name,
             'description': self.reference,
             'company_logo': url_join(base_url, f'web/image/res.company/{self.company_id.id}/logo'),
@@ -77,7 +77,7 @@ class PaymentTransaction(models.Model):
             'amount': converted_amount,
             'currency': self.currency_id.name,
         }
-        if self.acquirer_id.capture_manually:  # The related payment must be only authorized.
+        if self.provider_id.capture_manually:  # The related payment must be only authorized.
             payload.update({
                 'payment': {
                     'capture': 'manual',
@@ -99,7 +99,7 @@ class PaymentTransaction(models.Model):
         :return: The refund transaction if any
         :rtype: recordset of `payment.transaction`
         """
-        if self.provider != 'razorpay':
+        if self.provider_code != 'razorpay':
             return super()._send_refund_request(
                 amount_to_refund=amount_to_refund,
                 create_refund_transaction=create_refund_transaction,
@@ -122,8 +122,8 @@ class PaymentTransaction(models.Model):
             "Payload of '/payments/<id>/refund' request for transaction with reference %s:\n%s",
             self.reference, pprint.pformat(payload)
         )
-        response_content = refund_tx.acquirer_id._razorpay_make_request(
-            f'payments/{self.acquirer_reference}/refund', payload=payload
+        response_content = refund_tx.provider_id._razorpay_make_request(
+            f'payments/{self.provider_reference}/refund', payload=payload
         )
         _logger.info(
             "Response of '/payments/<id>/refund' request for transaction with reference %s:\n%s",
@@ -142,7 +142,7 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._send_capture_request()
-        if self.provider != 'razorpay':
+        if self.provider_code != 'razorpay':
             return
 
         converted_amount = payment_utils.to_minor_currency_units(self.amount, self.currency_id)
@@ -151,8 +151,8 @@ class PaymentTransaction(models.Model):
             "Payload of '/payments/<id>/capture' request for transaction with reference %s:\n%s",
             self.reference, pprint.pformat(payload)
         )
-        response_content = self.acquirer_id._razorpay_make_request(
-            f'payments/{self.acquirer_reference}/capture', payload=payload
+        response_content = self.provider_id._razorpay_make_request(
+            f'payments/{self.provider_reference}/capture', payload=payload
         )
         _logger.info(
             "Response of '/payments/<id>/capture' request for transaction with reference %s:\n%s",
@@ -170,22 +170,22 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._send_void_request()
-        if self.provider != 'razorpay':
+        if self.provider_code != 'razorpay':
             return
 
         raise UserError(_("Transactions processed by Razorpay can't be manually voided from Odoo."))
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of `payment` to find the transaction based on razorpay data.
 
-        :param str provider: The provider of the acquirer that handled the transaction
+        :param str provider_code: The code of the provider that handled the transaction
         :param dict notification_data: The normalized notification data sent by the provider
         :return: The transaction if found
         :rtype: recordset of `payment.transaction`
         :raise: ValidationError if the data match no transaction
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'razorpay' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'razorpay' or len(tx) == 1:
             return tx
 
         entity_type = notification_data.get('entity_type', 'payment')
@@ -193,16 +193,16 @@ class PaymentTransaction(models.Model):
             reference = notification_data.get('description')
             if not reference:
                 raise ValidationError("Razorpay: " + _("Received data with missing reference."))
-            tx = self.search([('reference', '=', reference), ('provider', '=', 'razorpay')])
+            tx = self.search([('reference', '=', reference), ('provider_code', '=', 'razorpay')])
         else:  # 'refund'
             reference = notification_data.get('notes', {}).get('reference')
             if reference:  # The refund was initiated from Odoo.
-                tx = self.search([('reference', '=', reference), ('provider', '=', 'razorpay')])
+                tx = self.search([('reference', '=', reference), ('provider_code', '=', 'razorpay')])
             else:  # The refund was initiated from Razorpay.
-                # Find the source transaction based on its acquirer reference.
+                # Find the source transaction based on its provider reference.
                 source_tx = self.search([
-                    ('acquirer_reference', '=', notification_data['payment_id']),
-                    ('provider', '=', 'razorpay'),
+                    ('provider_reference', '=', notification_data['payment_id']),
+                    ('provider_code', '=', 'razorpay'),
                 ])
                 if source_tx:
                     # Manually create a refund transaction with a new reference.
@@ -228,16 +228,16 @@ class PaymentTransaction(models.Model):
         :rtype: recordset of `payment.transaction`
         :raise ValidationError: If inconsistent data were received.
         """
-        refund_acquirer_reference = notification_data.get('id')
+        refund_provider_reference = notification_data.get('id')
         amount_to_refund = notification_data.get('amount')
-        if not refund_acquirer_reference or not amount_to_refund:
+        if not refund_provider_reference or not amount_to_refund:
             raise ValidationError("Razorpay: " + _("Received incomplete refund data."))
 
         converted_amount = payment_utils.to_major_currency_units(
             amount_to_refund, source_tx.currency_id
         )
         return source_tx._create_refund_transaction(
-            amount_to_refund=converted_amount, acquirer_reference=refund_acquirer_reference
+            amount_to_refund=converted_amount, provider_reference=refund_provider_reference
         )
 
     def _process_notification_data(self, notification_data):
@@ -249,14 +249,14 @@ class PaymentTransaction(models.Model):
         :return: None
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'razorpay':
+        if self.provider_code != 'razorpay':
             return
 
         if 'id' in notification_data:  # We have the full entity data (S2S request or webhook).
             entity_data = notification_data
         else:  # The payment data are not complete (redirect from checkout).
             # Fetch the full payment data.
-            entity_data = self.acquirer_id._razorpay_make_request(
+            entity_data = self.provider_id._razorpay_make_request(
                 f'payments/{notification_data["razorpay_payment_id"]}', method='GET'
             )
             _logger.info(
@@ -266,7 +266,7 @@ class PaymentTransaction(models.Model):
         entity_id = entity_data.get('id')
         if not entity_id:
             raise ValidationError("Razorpay: " + _("Received data with missing entity id."))
-        self.acquirer_reference = entity_id
+        self.provider_reference = entity_id
 
         entity_status = entity_data.get('status')
         if not entity_status:
