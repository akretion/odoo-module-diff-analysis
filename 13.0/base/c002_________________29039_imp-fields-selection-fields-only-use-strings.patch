PR: https://github.com/odoo/odoo/pull/29039

From: a0e05e2ab9055fa060b1f3b5adf7aa322e2617fd
From: Xavier Morel
Date: 2019-01-26 14:25:44

Structural Changes: 2
Total Changes: 36

[IMP] fields: selection fields only use strings

closes odoo/odoo#29039

================================= pseudo patch: =================================

--- a/odoo/addons/base/models/res_config.py
+++ b/odoo/addons/base/models/res_config.py
@@ -355,7 +355,7 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
             By default 'group' is the group Employee.  Groups are given by their xml id.
             The attribute 'group' may contain several xml ids, separated by commas.
 
-        *   For a selection field like 'group_XXX' composed of 2 integers values ('0' and '1'),
+        *   For a selection field like 'group_XXX' composed of 2 string values ('0' and '1'),
             ``execute`` adds/removes 'implied_group' to/from the implied groups of 'group', 
             depending on the field's value.
             By default 'group' is the group Employee.  Groups are given by their xml id.
@@ -364,9 +364,9 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
         *   For a boolean field like 'module_XXX', ``execute`` triggers the immediate
             installation of the module named 'XXX' if the field has value ``True``.
 
-        *   For a selection field like 'module_XXX' composed of 2 integers values ('0' and '1'), 
+        *   For a selection field like 'module_XXX' composed of 2 string values ('0' and '1'), 
             ``execute`` triggers the immediate installation of the module named 'XXX' 
-            if the field has the integer value ``1``.
+            if the field has the value ``'1'``.
 
         *   For a field with no specific prefix BUT an attribute 'config_parameter',
             ``execute``` will save its value in an ir.config.parameter (global setting for the
@@ -419,7 +419,7 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
             [('name', '=', module_name.replace("module_", '')),
             ('state', 'in', ['to install', 'installed', 'to upgrade'])])
 
-        if modules and not field_value:
+        if modules and not int(field_value):
             deps = modules.sudo().downstream_dependencies()
             dep_names = (deps | modules).mapped('shortdesc')
             message = '\n'.join(dep_names)
@@ -508,13 +508,13 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
         for name, groups, implied_group in classified['group']:
             res[name] = all(implied_group in group.implied_ids for group in groups)
             if self._fields[name].type == 'selection':
-                res[name] = int(res[name])
+                res[name] = str(int(res[name]))     # True, False -> '1', '0'
 
         # modules: which modules are installed/to install
         for name, module in classified['module']:
             res[name] = module.state in ('installed', 'to install', 'to upgrade')
             if self._fields[name].type == 'selection':
-                res[name] = int(res[name])
+                res[name] = str(int(res[name]))     # True, False -> '1', '0'
 
         # config: get & convert stored ir.config_parameter (or default)
         WARNING_MESSAGE = "Error when converting value %r of field %s for ir.config.parameter %r"
@@ -580,7 +580,7 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
             for name, groups, implied_group in classified['group']:
                 if self[name] == current_settings[name]:
                     continue
-                if self[name]:
+                if int(self[name]):
                     groups.write({'implied_ids': [(4, implied_group.id)]})
                 else:
                     groups.write({'implied_ids': [(3, implied_group.id)]})
@@ -625,7 +625,7 @@ class ResConfigSettings(models.TransientModel, ResConfigModuleInstallationMixin)
         to_uninstall_modules = self.env['ir.module.module']
         lm = len('module_')
         for name, module in classified['module']:
-            if self[name]:
+            if int(self[name]):
                 to_install.append((name[lm:], module))
             else:
                 if module and module.state in ('installed', 'to upgrade'):

--- a/odoo/addons/base/models/res_lang.py
+++ b/odoo/addons/base/models/res_lang.py
@@ -33,13 +33,13 @@ class Lang(models.Model):
     direction = fields.Selection([('ltr', 'Left-to-Right'), ('rtl', 'Right-to-Left')], required=True, default='ltr')
     date_format = fields.Char(string='Date Format', required=True, default=DEFAULT_DATE_FORMAT)
     time_format = fields.Char(string='Time Format', required=True, default=DEFAULT_TIME_FORMAT)
-    week_start = fields.Selection([(1, 'Monday'),
-                                   (2, 'Tuesday'),
-                                   (3, 'Wednesday'),
-                                   (4, 'Thursday'),
-                                   (5, 'Friday'),
-                                   (6, 'Saturday'),
-                                   (7, 'Sunday')], string='First Day of Week', required=True, default=7)
+    week_start = fields.Selection([('1', 'Monday'),
+                                   ('2', 'Tuesday'),
+                                   ('3', 'Wednesday'),
+                                   ('4', 'Thursday'),
+                                   ('5', 'Friday'),
+                                   ('6', 'Saturday'),
+                                   ('7', 'Sunday')], string='First Day of Week', required=True, default='7')
     grouping = fields.Char(string='Separator Format', required=True, default='[]',
         help="The Separator Format should be like [,n] where 0 < n :starting from Unit digit. "
              "-1 will end the separation. e.g. [3,2,-1] will represent 106500 to be 1,06,500; "

--- a/odoo/addons/base/wizard/base_import_language.py
+++ b/odoo/addons/base/wizard/base_import_language.py
@@ -41,5 +41,9 @@ class BaseLanguageImport(models.TransientModel):
                                       lang_name=this.name, context=this._context)
             except Exception as e:
                 _logger.exception('File unsuccessfully imported, due to format mismatch.')
-                raise UserError(_('File not imported due to format mismatch or a malformed file. (Valid formats are .csv, .po, .pot)\n\nTechnical Details:\n%s') % tools.ustr(e))
+                raise UserError(
+                    _('File %r not imported due to format mismatch or a malformed file.'
+                      ' (Valid formats are .csv, .po, .pot)\n\nTechnical Details:\n%s') % \
+                    (this.filename, tools.ustr(e))
+                )
         return True
