PR: https://github.com/odoo/odoo/pull/106072

From: 3d5b0125012fecd3ee2611d140d454dd7b9d9f43
From: Thibault DelavallÃ©e
Date: 2022-11-21 18:55:13

Structural Changes: 4
Total Changes: 55

[REF] mail, various: cleanup usage of options in render mixin

Due to recent improvements (Jinja -> Qweb, safe rendering) rendering API
supports several ways of giving options to the rendering process. Those
have mainly two usage

  * ``preserve_comments`` : keep comments in rendered HTML, used notably
    in mass mailing or digest to keep browser-specific comments;
  * ``post_process`` : perform a post processing on rendered HTML, used notably
    to process local links and add tracking to shortened links;

All those are now given directly inside an optional ``options`` parameter
given to ``_render_field`` and its sub-method ``_render_template``.

They can also be defined as field level, using ``render_options`` field
parameter. Some fields are updated

  * composer mixin body (which impacts all inheriting models, notably
    mail composer, survey and elearning invite wizards as well as appraisal
    and appraisal feedback): post processing is now always done by default.
    It was already done manually in calls that can be simplified;
  * mail template body_html: post processing is now always done by default. It
    was already done manually in calls that can be simplified;
  * mailing body_html and preview are now post processed by default. It was
    already the case in testing wizard. Preview is updated to avoid post
    processing of links, as it was before. Remaining use case is the sending
    which uses the mail composer, therefore was already post processed;

Finally some 'compute_lang' are explicitly added in _render_field calls in
order to be explicit on what we want, instead of being unsure.

Task-2710804 (Mail: Clean MailThread API)
Prepares Task-2088884 (Mail: Use editable computed stored fields in composer)

Part-of: odoo/odoo#106072

================================= pseudo patch: =================================

--- a/addons/mail/models/mail_composer_mixin.py
+++ b/addons/mail/models/mail_composer_mixin.py
@@ -22,7 +22,9 @@ class MailComposerMixin(models.AbstractModel):
 
     # Content
     subject = fields.Char('Subject', compute='_compute_subject', readonly=False, store=True)
-    body = fields.Html('Contents', compute='_compute_body', render_engine='qweb', store=True, readonly=False, sanitize=False)
+    body = fields.Html(
+        'Contents', compute='_compute_body', readonly=False, store=True,
+        render_engine='qweb', render_options={'post_process': True}, sanitize=False)
     template_id = fields.Many2one('mail.template', 'Mail Template', domain="[('model', '=', render_model)]")
     # Access
     is_mail_template_editor = fields.Boolean('Is Editor', compute='_compute_is_mail_template_editor')

--- a/addons/mail/models/mail_render_mixin.py
+++ b/addons/mail/models/mail_render_mixin.py
@@ -284,7 +284,8 @@ class MailRenderMixin(models.AbstractModel):
         :param dict add_context: additional context to give to renderer. It
           allows to add or update values to base rendering context generated
           by ``MailRenderMixin._render_eval_context()``;
-        :param dict options: options for rendering (not used currently);
+        :param dict options: options for rendering propagated to IrQweb render
+          (see docstring for available options);
 
         :return dict: {res_id: string of rendered template based on record}
         """
@@ -337,7 +338,8 @@ class MailRenderMixin(models.AbstractModel):
         :param dict add_context: additional context to give to renderer. It
           allows to add or update values to base rendering context generated
           by ``MailRenderMixin._render_eval_context()``;
-        :param dict options: options for rendering (not used currently);
+        :param dict options: options for rendering propagated to IrQweb render
+          (see docstring for available options);
 
         :return dict: {res_id: string of rendered template based on record}
         """
@@ -378,7 +380,8 @@ class MailRenderMixin(models.AbstractModel):
         :param dict add_context: additional context to give to renderer. It
           allows to add or update values to base rendering context generated
           by ``MailRenderMixin._render_inline_template_eval_context()``;
-        :param dict options: options for rendering;
+        :param dict options: options for rendering (no options available
+          currently);
 
         :return dict: {res_id: string of rendered template based on record}
         """
@@ -434,7 +437,7 @@ class MailRenderMixin(models.AbstractModel):
 
     @api.model
     def _render_template(self, template_src, model, res_ids, engine='inline_template',
-                         add_context=None, options=None, post_process=False):
+                         add_context=None, options=None):
         """ Render the given string on records designed by model / res_ids using
         the given rendering engine. Possible engine are small_web, qweb, or
         qweb_view.
@@ -449,12 +452,20 @@ class MailRenderMixin(models.AbstractModel):
         :param dict add_context: additional context to give to renderer. It
           allows to add or update values to base rendering context generated
           by ``MailRenderMixin._render_<engine>_eval_context()``;
-        :param dict options: options for rendering;
-        :param boolean post_process: perform a post processing on rendered result
-          (notably html links management). See``_render_template_postprocess``;
+        :param dict options: options for rendering. Use in this method and also
+          propagated to rendering sub-methods. May contain notably
+
+            boolean post_process: perform a post processing on rendered result
+            (notably html links management). See``_render_template_postprocess``;
+            boolean preserve_comments: if set, comments are preserved. Default
+            behavior is to remove them. It is used notably for browser-specific
+            code implemented like comments;
 
         :return dict: {res_id: string of rendered template based on record}
         """
+        if options is None:
+            options = {}
+
         if not isinstance(res_ids, (list, tuple)):
             raise ValueError(_('Template rendering should be called only using on a list of IDs.'))
         if engine not in ('inline_template', 'qweb', 'qweb_view'):
@@ -470,7 +481,7 @@ class MailRenderMixin(models.AbstractModel):
             rendered = self._render_template_inline_template(template_src, model, res_ids,
                                                              add_context=add_context, options=options)
 
-        if post_process:
+        if options.get('post_process'):
             rendered = self._render_template_postprocess(rendered)
 
         return rendered
@@ -523,7 +534,7 @@ class MailRenderMixin(models.AbstractModel):
 
     def _render_field(self, field, res_ids, engine='inline_template',
                       compute_lang=False, set_lang=False,
-                      add_context=None, options=None, post_process=False):
+                      add_context=None, options=None):
         """ Given some record ids, render a template located on field on all
         records. ``field`` should be a field of self (i.e. ``body_html`` on
         ``mail.template``). res_ids are record IDs linked to ``model`` field
@@ -542,9 +553,16 @@ class MailRenderMixin(models.AbstractModel):
           ``compute_lang`` is False;
 
         :param dict add_context: additional context to give to renderer;
-        :param dict options: options for rendering;
-        :param boolean post_process: perform a post processing on rendered result
-          (notably html links management). See``_render_template_postprocess``);
+        :param dict options: options for rendering. Use in this method and also
+          propagated to rendering sub-methods. Base values come from the field
+          (coming from ``render_options`` parameter) and are updated by this
+          optional dictionary. May contain notably
+
+            boolean post_process: perform a post processing on rendered result
+            (notably html links management). See``_render_template_postprocess``;
+            boolean preserve_comments: if set, comments are preserved. Default
+            behavior is to remove them. It is used notably for browser-specific
+            code implemented like comments;
 
         :return dict: {res_id: string of rendered template based on record}
         """
@@ -568,7 +586,6 @@ class MailRenderMixin(models.AbstractModel):
         # rendering options
         engine = getattr(self._fields[field], 'render_engine', engine)
         options.update(**getattr(self._fields[field], 'render_options', {}))
-        post_process = options.get('post_process') or post_process
 
         return dict(
             (res_id, rendered)
@@ -580,6 +597,5 @@ class MailRenderMixin(models.AbstractModel):
                 engine=engine,
                 add_context=add_context,
                 options=options,
-                post_process=post_process
             ).items()
         )

--- a/addons/mail/models/mail_template.py
+++ b/addons/mail/models/mail_template.py
@@ -56,7 +56,9 @@ class MailTemplate(models.Model):
     email_cc = fields.Char('Cc', help="Carbon copy recipients (placeholders may be used here)")
     reply_to = fields.Char('Reply To', help="Email address to which replies will be redirected when sending emails in mass; only used when the reply is not logged in the original discussion thread.")
     # content
-    body_html = fields.Html('Body', render_engine='qweb', translate=True, prefetch=True, sanitize=False)
+    body_html = fields.Html(
+        'Body', render_engine='qweb', render_options={'post_process': True},
+        prefetch=True, translate=True, sanitize=False)
     attachment_ids = fields.Many2many('ir.attachment', 'email_template_attachment_rel', 'email_template_id',
                                       'attachment_id', 'Attachments',
                                       help="You may attach files to this template, to be added to all "
@@ -246,8 +248,7 @@ class MailTemplate(models.Model):
         for lang, (template, template_res_ids) in self._classify_per_lang(res_ids).items():
             for field in fields:
                 generated_field_values = template._render_field(
-                    field, template_res_ids,
-                    post_process=(field == 'body_html')
+                    field, template_res_ids
                 )
                 for res_id, field_value in generated_field_values.items():
                     results.setdefault(res_id, dict())[field] = field_value
