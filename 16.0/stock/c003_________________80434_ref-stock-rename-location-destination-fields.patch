PR: https://github.com/odoo/odoo/pull/80434

From: cd9833e4adc9ec1bfda1d5014c3a02a687dd85a1
From: William Henrotin
Date: 2021-12-07 16:20:06

Structural Changes: 2
Total Changes: 50

[REF] *stock*: rename location destination fields

The stock convention on location name is always to name the destination
`location_dest_id`. It was not the
case on the stock rule model

Task: 2648449
Part-of: odoo/odoo#80434

================================= pseudo patch: =================================

--- a/addons/stock/models/stock_move.py
+++ b/addons/stock/models/stock_move.py
@@ -787,7 +787,7 @@ class StockMove(models.Model):
             else:
                 rule = self.sudo().env['procurement.group']._search_rule(move.route_ids, move.product_packaging_id, move.product_id, warehouse_id, domain)
             # Make sure it is not returning the return
-            if rule and (not move.origin_returned_move_id or move.origin_returned_move_id.location_dest_id.id != rule.location_id.id):
+            if rule and (not move.origin_returned_move_id or move.origin_returned_move_id.location_dest_id.id != rule.location_dest_id.id):
                 new_move = rule._run_push(move)
                 if new_move:
                     new_moves.append(new_move)
@@ -1867,7 +1867,7 @@ class StockMove(models.Model):
             product_id = move.product_id
             domain = [
                 ('location_src_id', '=', move.location_id.id),
-                ('location_id', '=', move.location_dest_id.id),
+                ('location_dest_id', '=', move.location_dest_id.id),
                 ('action', '!=', 'push')
             ]
             rules = self.env['procurement.group']._search_rule(False, move.product_packaging_id, product_id, move.warehouse_id, domain)

--- a/addons/stock/models/stock_orderpoint.py
+++ b/addons/stock/models/stock_orderpoint.py
@@ -279,13 +279,13 @@ class StockWarehouseOrderpoint(models.Model):
         self = self.filtered(lambda o: not o.route_id)
         rules_groups = self.env['stock.rule'].read_group([
             ('route_id.product_selectable', '!=', False),
-            ('location_id', 'in', self.location_id.ids),
+            ('location_dest_id', 'in', self.location_id.ids),
             ('action', 'in', ['pull_push', 'pull'])
-        ], ['location_id', 'route_id'], ['location_id', 'route_id'], lazy=False)
+        ], ['location_dest_id', 'route_id'], ['location_dest_id', 'route_id'], lazy=False)
         for g in rules_groups:
             if not g.get('route_id'):
                 continue
-            orderpoints = self.filtered(lambda o: o.location_id.id == g['location_id'][0])
+            orderpoints = self.filtered(lambda o: o.location_id.id == g['location_dest_id'][0])
             orderpoints.route_id = g['route_id']
 
     def _get_lead_days_values(self):

--- a/addons/stock/models/stock_rule.py
+++ b/addons/stock/models/stock_rule.py
@@ -59,7 +59,7 @@ class StockRule(models.Model):
     company_id = fields.Many2one('res.company', 'Company',
         default=lambda self: self.env.company,
         domain="[('id', '=?', route_company_id)]")
-    location_id = fields.Many2one('stock.location', 'Destination Location', required=True, check_company=True)
+    location_dest_id = fields.Many2one('stock.location', 'Destination Location', required=True, check_company=True)
     location_src_id = fields.Many2one('stock.location', 'Source Location', check_company=True)
     route_id = fields.Many2one('stock.route', 'Route', required=True, ondelete='cascade')
     route_company_id = fields.Many2one(related='route_id.company_id', string='Route Company')
@@ -107,7 +107,7 @@ class StockRule(models.Model):
         Enable the delay alert if the picking type is a delivery
         """
         self.location_src_id = self.picking_type_id.default_location_src_id.id
-        self.location_id = self.picking_type_id.default_location_dest_id.id
+        self.location_dest_id = self.picking_type_id.default_location_dest_id.id
 
     @api.onchange('route_id', 'company_id')
     def _onchange_route(self):
@@ -123,7 +123,7 @@ class StockRule(models.Model):
         _get_message_dict functions since it often requires those data.
         """
         source = self.location_src_id and self.location_src_id.display_name or _('Source Location')
-        destination = self.location_id and self.location_id.display_name or _('Destination Location')
+        destination = self.location_dest_id and self.location_dest_id.display_name or _('Destination Location')
         operation = self.picking_type_id and self.picking_type_id.name or _('Operation Type')
         return source, destination, operation
 
@@ -147,7 +147,7 @@ class StockRule(models.Model):
             }
         return message_dict
 
-    @api.depends('action', 'location_id', 'location_src_id', 'picking_type_id', 'procure_method')
+    @api.depends('action', 'location_dest_id', 'location_src_id', 'picking_type_id', 'procure_method')
     def _compute_action_message(self):
         """ Generate dynamicaly a message that describe the rule purpose to the
         end user.
@@ -178,13 +178,13 @@ class StockRule(models.Model):
         new_date = fields.Datetime.to_string(move.date + relativedelta(days=self.delay))
         if self.auto == 'transparent':
             old_dest_location = move.location_dest_id
-            move.write({'date': new_date, 'location_dest_id': self.location_id.id})
+            move.write({'date': new_date, 'location_dest_id': self.location_dest_id.id})
             # make sure the location_dest_id is consistent with the move line location dest
             if move.move_line_ids:
                 move.move_line_ids.location_dest_id = move.location_dest_id._get_putaway_strategy(move.product_id) or move.location_dest_id
 
             # avoid looping if a push rule is not well configured; otherwise call again push_apply to see if a next step is defined
-            if self.location_id != old_dest_location:
+            if self.location_dest_id != old_dest_location:
                 # TDE FIXME: should probably be done in the move model IMO
                 return move._push_apply()[:1]
         else:
@@ -203,7 +203,7 @@ class StockRule(models.Model):
         new_move_vals = {
             'origin': move_to_copy.origin or move_to_copy.picking_id.name or "/",
             'location_id': move_to_copy.location_dest_id.id,
-            'location_dest_id': self.location_id.id,
+            'location_dest_id': self.location_dest_id.id,
             'date': new_date,
             'company_id': company_id,
             'picking_id': False,
@@ -270,7 +270,7 @@ class StockRule(models.Model):
         """
         return []
 
-    def _get_stock_move_values(self, product_id, product_qty, product_uom, location_id, name, origin, company_id, values):
+    def _get_stock_move_values(self, product_id, product_qty, product_uom, location_dest_id, name, origin, company_id, values):
         ''' Returns a dictionary of values that will be used to create a stock move from a procurement.
         This function assumes that the given procurement has a rule (action == 'pull' or 'pull_push') set on it.
 
@@ -298,13 +298,13 @@ class StockRule(models.Model):
         qty_left = product_qty
 
         move_dest_ids = []
-        if not self.location_id.should_bypass_reservation():
+        if not self.location_dest_id.should_bypass_reservation():
             move_dest_ids = values.get('move_dest_ids', False) and [(4, x.id) for x in values['move_dest_ids']] or []
 
         # when create chained moves for inter-warehouse transfers, set the warehouses as partners
         if not partner and move_dest_ids:
             move_dest = values['move_dest_ids']
-            if location_id == company_id.internal_transit_location_id:
+            if location_dest_id == company_id.internal_transit_location_id:
                 partners = move_dest.location_dest_id.warehouse_id.partner_id
                 if len(partners) == 1:
                     partner = partners
@@ -312,13 +312,13 @@ class StockRule(models.Model):
 
         move_values = {
             'name': name[:2000],
-            'company_id': self.company_id.id or self.location_src_id.company_id.id or self.location_id.company_id.id or company_id.id,
+            'company_id': self.company_id.id or self.location_src_id.company_id.id or self.location_dest_id.company_id.id or company_id.id,
             'product_id': product_id.id,
             'product_uom': product_uom.id,
             'product_uom_qty': qty_left,
             'partner_id': partner.id if partner else False,
             'location_id': self.location_src_id.id,
-            'location_dest_id': location_id.id,
+            'location_dest_id': location_dest_id.id,
             'move_dest_ids': move_dest_ids,
             'rule_id': self.id,
             'procure_method': self.procure_method,
@@ -502,7 +502,7 @@ class ProcurementGroup(models.Model):
 
     @api.model
     def _get_rule_domain(self, location, values):
-        domain = ['&', ('location_id', '=', location.id), ('action', '!=', 'push')]
+        domain = ['&', ('location_dest_id', '=', location.id), ('action', '!=', 'push')]
         # In case the method is called by the superuser, we need to restrict the rules to the
         # ones of the company. This is not useful as a regular user since there is a record
         # rule to filter out the rules based on the company.

--- a/addons/stock/models/stock_warehouse.py
+++ b/addons/stock/models/stock_warehouse.py
@@ -395,7 +395,7 @@ class Warehouse(models.Model):
                 },
                 'update_values': {
                     'name': self._format_rulename(location_id, location_dest_id, 'MTO'),
-                    'location_id': location_dest_id.id,
+                    'location_dest_id': location_dest_id.id,
                     'location_src_id': location_id.id,
                     'picking_type_id': picking_type_id.id,
                 }
@@ -571,7 +571,7 @@ class Warehouse(models.Model):
             existing_rule = self.env['stock.rule'].search([
                 ('picking_type_id', '=', rule_vals['picking_type_id']),
                 ('location_src_id', '=', rule_vals['location_src_id']),
-                ('location_id', '=', rule_vals['location_id']),
+                ('location_dest_id', '=', rule_vals['location_dest_id']),
                 ('route_id', '=', rule_vals['route_id']),
                 ('action', '=', rule_vals['action']),
                 ('active', '=', False),
@@ -774,7 +774,7 @@ class Warehouse(models.Model):
             route_rule_values = {
                 'name': self._format_rulename(routing.from_loc, routing.dest_loc, name_suffix),
                 'location_src_id': routing.from_loc.id,
-                'location_id': routing.dest_loc.id,
+                'location_dest_id': routing.dest_loc.id,
                 'action': routing.action,
                 'auto': 'manual',
                 'picking_type_id': routing.picking_type.id,
@@ -822,13 +822,13 @@ class Warehouse(models.Model):
         Check routes being delivery bu this warehouse and change the rule going to transit location """
         Rule = self.env["stock.rule"]
         routes = self.env['stock.route'].search([('supplier_wh_id', '=', self.id)])
-        rules = Rule.search(['&', '&', ('route_id', 'in', routes.ids), ('action', '!=', 'push'), ('location_id.usage', '=', 'transit')])
+        rules = Rule.search(['&', '&', ('route_id', 'in', routes.ids), ('action', '!=', 'push'), ('location_dest_id.usage', '=', 'transit')])
         rules.write({
             'location_src_id': new_location.id,
             'procure_method': change_to_multiple and "make_to_order" or "make_to_stock"})
         if not change_to_multiple:
             # If single delivery we should create the necessary MTO rules for the resupply
-            routings = [self.Routing(self.lot_stock_id, location, self.out_type_id, 'pull') for location in rules.mapped('location_id')]
+            routings = [self.Routing(self.lot_stock_id, location, self.out_type_id, 'pull') for location in rules.location_dest_id]
             mto_vals = self._get_global_route_rules_values().get('mto_pull_id')
             values = mto_vals['create_values']
             mto_rule_vals = self._get_rule_values(routings, values, name_suffix='MTO')
@@ -839,7 +839,7 @@ class Warehouse(models.Model):
             # We need to delete all the MTO stock rules, otherwise they risk to be used in the system
             Rule.search([
                 '&', ('route_id', '=', self._find_global_route('stock.route_warehouse0_mto', _('Make To Order')).id),
-                ('location_id.usage', '=', 'transit'),
+                ('location_dest_id.usage', '=', 'transit'),
                 ('action', '!=', 'push'),
                 ('location_src_id', '=', self.lot_stock_id.id)]).write({'active': False})
 
@@ -853,7 +853,7 @@ class Warehouse(models.Model):
                 '&',
                     ('action', '!=', 'push'),
                     ('location_src_id.usage', '=', 'transit')
-        ]).write({'location_id': new_location.id})
+        ]).write({'location_dest_id': new_location.id})
 
     def _update_name_and_code(self, new_name=False, new_code=False):
         if new_code:
