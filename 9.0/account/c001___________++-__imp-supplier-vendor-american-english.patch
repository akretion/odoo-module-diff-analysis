PR: https://github.com/odoo/odoo/pull/

From: 1fe10b541708d7bcecac3cd57c70a50eb3e2ec0c
From: Fabien Pinckaers
Date: 2015-07-09 23:10:09

Structural Changes: 10.9
Total Changes: 50

[IMP] Supplier --> Vendor. American English

================================= pseudo patch: =================================

--- a/addons/account/models/account.py
+++ b/addons/account/models/account.py
@@ -25,7 +25,7 @@ class AccountAccountType(models.Model):
     ], required=True, default='other',
         help="The 'Internal Type' is used for features available on "\
         "different types of accounts: liquidity type is for cash or bank accounts"\
-        ", payable/receivable is for supplier/customer accounts.")
+        ", payable/receivable is for vendor/customer accounts.")
     note = fields.Text(string='Description')
 
 
@@ -170,7 +170,7 @@ class AccountAccount(models.Model):
         values = ['account.account,%s' % (account_id,) for account_id in self.ids]
         partner_prop_acc = self.env['ir.property'].search([('value_reference', 'in', values)], limit=1)
         if partner_prop_acc:
-            raise UserError(_('You cannot remove/deactivate an account which is set on a customer or supplier.'))
+            raise UserError(_('You cannot remove/deactivate an account which is set on a customer or vendor.'))
         return super(AccountAccount, self).unlink()
 
     @api.multi
@@ -199,8 +199,8 @@ class AccountJournal(models.Model):
             ('general', 'Miscellaneous'),
         ], required=True,
         help="Select 'Sale' for customer invoices journals."\
-        " Select 'Purchase' for supplier bills journals."\
-        " Select 'Cash' or 'Bank' for journals that are used in customer or supplier payments."\
+        " Select 'Purchase' for vendor bills journals."\
+        " Select 'Cash' or 'Bank' for journals that are used in customer or vendor payments."\
         " Select 'General' for miscellaneous operations journals."\
         " Select 'Opening/Closing Situation' for entries generated for new fiscal years.")
     type_control_ids = fields.Many2many('account.account.type', 'account_journal_type_rel', 'journal_id', 'type_id', string='Account Types Allowed (empty for no control)')

--- a/addons/account/models/account_invoice.py
+++ b/addons/account/models/account_invoice.py
@@ -23,9 +23,9 @@ TYPE2JOURNAL = {
 # mapping invoice type to refund type
 TYPE2REFUND = {
     'out_invoice': 'out_refund',        # Customer Invoice
-    'in_invoice': 'in_refund',          # Supplier Bill
+    'in_invoice': 'in_refund',          # Vendor Bill
     'out_refund': 'out_invoice',        # Customer Refund
-    'in_refund': 'in_invoice',          # Supplier Refund
+    'in_refund': 'in_invoice',          # Vendor Refund
 }
 
 MAGIC_COLUMNS = ('id', 'create_uid', 'create_date', 'write_uid', 'write_date')
@@ -185,9 +185,9 @@ class AccountInvoice(models.Model):
         readonly=True, states={'draft': [('readonly', False)]})
     type = fields.Selection([
             ('out_invoice','Customer Invoice'),
-            ('in_invoice','Supplier Bill'),
+            ('in_invoice','Vendor Bill'),
             ('out_refund','Customer Refund'),
-            ('in_refund','Supplier Refund'),
+            ('in_refund','Vendor Refund'),
         ], readonly=True, index=True, change_default=True,
         default=lambda self: self._context.get('type', 'out_invoice'),
         track_visibility='always')
@@ -196,7 +196,7 @@ class AccountInvoice(models.Model):
     move_name = fields.Char(string='Journal Entry', readonly=True,
         default=False, copy=False,
         help="Technical field holding the number given to the invoice, automatically set when the invoice is validated then stored to set the same number again if the invoice is cancelled, set to draft and re-validated.")
-    reference = fields.Char(string='Supplier Reference',
+    reference = fields.Char(string='Vendor Reference',
         help="The partner reference of this invoice.", readonly=True, states={'draft': [('readonly', False)]})
     reference_type = fields.Selection('_get_reference_type', string='Payment Reference',
         required=True, readonly=True, states={'draft': [('readonly', False)]},
@@ -281,7 +281,7 @@ class AccountInvoice(models.Model):
     reconciled = fields.Boolean(string='Paid/Reconciled', store=True, readonly=True, compute='_compute_residual',
         help="It indicates that the invoice has been paid and the journal entry of the invoice has been reconciled with one or several journal entries of payment.")
     partner_bank_id = fields.Many2one('res.partner.bank', string='Bank Account',
-        help='Bank Account Number to which the invoice will be paid. A Company bank account if this is a Customer Invoice or Supplier Refund, otherwise a Partner bank account number.',
+        help='Bank Account Number to which the invoice will be paid. A Company bank account if this is a Customer Invoice or Vendor Refund, otherwise a Partner bank account number.',
         readonly=True, states={'draft': [('readonly', False)]})
 
     residual = fields.Monetary(string='Amount Due',
@@ -802,9 +802,9 @@ class AccountInvoice(models.Model):
     def name_get(self):
         TYPES = {
             'out_invoice': _('Invoice'),
-            'in_invoice': _('Supplier Bill'),
+            'in_invoice': _('Vendor Bill'),
             'out_refund': _('Refund'),
-            'in_refund': _('Supplier Refund'),
+            'in_refund': _('Vendor Refund'),
         }
         result = []
         for inv in self:

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -397,8 +397,8 @@ class AccountMoveLine(models.Model):
             :param res_type: either 'partner' or 'account'
             :param res_ids: ids of the partners/accounts to reconcile, use None to fetch data indiscriminately
                 of the id, use [] to prevent from fetching any data at all.
-            :param account_type: if a partner is both customer and supplier, you can use 'payable' to reconcile
-                the supplier-related journal entries and 'receivable' for the customer-related entries.
+            :param account_type: if a partner is both customer and vendor, you can use 'payable' to reconcile
+                the vendor-related journal entries and 'receivable' for the customer-related entries.
         """
         if res_ids != None and len(res_ids) == 0:
             # Note : this short-circuiting is better for performances, but also required

--- a/addons/account/models/account_payment.py
+++ b/addons/account/models/account_payment.py
@@ -35,7 +35,7 @@ class account_abstract_payment(models.AbstractModel):
     payment_method_code = fields.Char(related='payment_method_id.code',
         help="Technical field used to adapt the interface to the payment method selected.")
 
-    partner_type = fields.Selection([('customer', 'Customer'), ('supplier', 'Supplier')])
+    partner_type = fields.Selection([('customer', 'Customer'), ('supplier', 'Vendor')])
     partner_id = fields.Many2one('res.partner', string='Partner')
 
     amount = fields.Monetary(string='Payment Amount', required=True)
@@ -123,7 +123,7 @@ class account_register_payments(models.TransientModel):
         if any(inv.partner_id != invoices[0].partner_id for inv in invoices):
             raise UserError(_("In order to pay multiple invoices at once, they must belong to the same partner."))
         if any(MAP_INVOICE_TYPE_PARTNER_TYPE[inv.type] != MAP_INVOICE_TYPE_PARTNER_TYPE[invoices[0].type] for inv in invoices):
-            raise UserError(_("You cannot mix customer and supplier invoices in a single payment."))
+            raise UserError(_("You cannot mix customer invoices and vendor bills in a single payment."))
         if any(inv.currency_id != invoices[0].currency_id for inv in invoices):
             raise UserError(_("In order to pay multiple invoices at once, they must use the same currency."))
 
@@ -461,9 +461,9 @@ class account_payment(models.Model):
                     name += _("Customer Refund")
             elif self.partner_type == 'supplier':
                 if self.payment_type == 'inbound':
-                    name += _("Supplier Refund")
+                    name += _("Vendor Refund")
                 elif self.payment_type == 'outbound':
-                    name += _("Supplier Payment")
+                    name += _("Vendor Payment")
             if invoice:
                 name += ': '
                 for inv in invoice:

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -174,7 +174,7 @@ class AccountChartTemplate(models.Model):
             return default_account
 
         journals = [{'name': _('Customer Invoices'), 'type': 'sale', 'code': _('INV'), 'favorite': True},
-                    {'name': _('Supplier Bills'), 'type': 'purchase', 'code': _('EXJ'), 'favorite': True},
+                    {'name': _('Vendor Bills'), 'type': 'purchase', 'code': _('EXJ'), 'favorite': True},
                     {'name': _('Exchange Rate Journal'), 'type': 'general', 'code': _('EXCH'), 'favorite': False},
                     {'name': _('Miscellaneous Journal'), 'type': 'general', 'code': _('MISC'), 'favorite': False},]
         if journals_dict != None:

--- a/addons/account/models/partner.py
+++ b/addons/account/models/partner.py
@@ -358,7 +358,7 @@ class ResPartner(models.Model):
     credit = fields.Monetary(compute='_credit_debit_get', search=_credit_search,
         string='Total Receivable', help="Total amount this customer owes you.")
     debit = fields.Monetary(compute='_credit_debit_get', search=_debit_search, string='Total Payable',
-        help="Total amount you have to pay to this supplier.")
+        help="Total amount you have to pay to this vendor.")
     debit_limit = fields.Monetary('Payable Limit')
     total_invoiced = fields.Monetary(compute='_invoice_total', string="Total Invoiced",
         groups='account.group_account_invoice')
@@ -385,8 +385,8 @@ class ResPartner(models.Model):
         string ='Customer Payment Term',
         help="This payment term will be used instead of the default one for sale orders and customer invoices", oldname="property_payment_term")
     property_supplier_payment_term_id = fields.Many2one('account.payment.term', company_dependent=True,
-         string ='Supplier Payment Term',
-         help="This payment term will be used instead of the default one for purchase orders and supplier bills", oldname="property_supplier_payment_term")
+         string ='Vendor Payment Term',
+         help="This payment term will be used instead of the default one for purchase orders and vendor bills", oldname="property_supplier_payment_term")
     ref_company_ids = fields.One2many('res.company', 'partner_id',
         string='Companies that refers to partner', oldname="ref_companies")
     has_unreconciled_entries = fields.Boolean(compute='_compute_has_unreconciled_entries',

--- a/addons/account/models/product.py
+++ b/addons/account/models/product.py
@@ -24,7 +24,7 @@ class ProductTemplate(models.Model):
 
     taxes_id = fields.Many2many('account.tax', 'product_taxes_rel', 'prod_id', 'tax_id', string='Customer Taxes',
         domain=[('type_tax_use', '=', 'sale')])
-    supplier_taxes_id = fields.Many2many('account.tax', 'product_supplier_taxes_rel', 'prod_id', 'tax_id', string='Supplier Taxes',
+    supplier_taxes_id = fields.Many2many('account.tax', 'product_supplier_taxes_rel', 'prod_id', 'tax_id', string='Vendor Taxes',
         domain=[('type_tax_use', '=', 'purchase')])
     property_account_income_id = fields.Many2one('account.account', company_dependent=True,
         string="Income Account", oldname="property_account_income",

--- a/addons/account/models/res_config.py
+++ b/addons/account/models/res_config.py
@@ -69,7 +69,7 @@ class AccountConfigSettings(models.TransientModel):
     period_lock_date = fields.Date(related='company_id.period_lock_date', help="Only users with the 'Adviser' role can edit accounts prior to and inclusive of this date")
     fiscalyear_lock_date = fields.Date(string="Fiscal Year lock date", related='company_id.fiscalyear_lock_date', help="No users, including Advisers, can edit accounts prior to and inclusive of this date")
 
-    module_account_check_writing = fields.Boolean(string='Pay your suppliers by check',
+    module_account_check_writing = fields.Boolean(string='Pay your vendors by check',
         help='This allows you to check writing and printing.\n'
              '-This installs the module account_check_writing.')
     module_account_accountant = fields.Boolean(string='Full accounting features: journals, legal statements, chart of accounts, etc.',
@@ -107,7 +107,7 @@ class AccountConfigSettings(models.TransientModel):
     group_analytic_accounting = fields.Boolean(string='Analytic accounting',
         implied_group='analytic.group_analytic_accounting',
         help="Allows you to use the analytic accounting.")
-    group_check_supplier_invoice_total = fields.Boolean(string='Check the total of supplier bills',
+    group_check_supplier_invoice_total = fields.Boolean(string='Check the total of vendor bills',
         implied_group="account.group_supplier_inv_check_total")
     currency_exchange_journal_id = fields.Many2one('account.journal',
         related='company_id.currency_exchange_journal_id',
