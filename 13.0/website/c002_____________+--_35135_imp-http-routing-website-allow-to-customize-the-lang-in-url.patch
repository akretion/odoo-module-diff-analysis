PR: https://github.com/odoo/odoo/pull/35135

From: 269aa594111a152ad4b7714856ea745bfef57155
From: Romain Derie
Date: 2019-08-26 16:35:19

Structural Changes: 7
Total Changes: 77

[IMP] http_routing, website: allow to customize the lang in URL

With this commit it is now possible to change the lang displayed in the URL.
Eg, you could use `/fr` instead of `/fr_BE`, or even a fancier `/french`.

Task-32838

Courtesy of pla@odoo.com

closes odoo/odoo#35135

Signed-off-by: Romain Derie (rde) <rde@odoo.com>

================================= pseudo patch: =================================

--- a/addons/website/models/ir_http.py
+++ b/addons/website/models/ir_http.py
@@ -15,7 +15,7 @@ import odoo
 from odoo import api, models, registry
 from odoo import SUPERUSER_ID
 from odoo.http import request
-from odoo.tools import config
+from odoo.tools import config, ormcache
 from odoo.tools.safe_eval import safe_eval
 from odoo.osv.expression import FALSE_DOMAIN, OR
 
@@ -132,18 +132,6 @@ class Http(models.AbstractModel):
         if request.routing_iteration == 1:
             request.website = request.website.with_context(request.context)
 
-    @classmethod
-    def _get_languages(cls):
-        if getattr(request, 'website', False):
-            return request.website.language_ids
-        return super(Http, cls)._get_languages()
-
-    @classmethod
-    def _get_language_codes(cls):
-        if getattr(request, 'website', False):
-            return request.website._get_languages()
-        return super(Http, cls)._get_language_codes()
-
     @classmethod
     def _get_default_lang(cls):
         if getattr(request, 'website', False):
@@ -205,7 +193,7 @@ class Http(models.AbstractModel):
     @classmethod
     def _handle_exception(cls, exception):
         code = 500  # default code
-        is_website_request = bool(getattr(request, 'is_frontend', False) and getattr(request, 'website', False))
+        is_website_request = bool(getattr(request, 'is_frontend', False) and get_request_website())
         if not is_website_request:
             # Don't touch non website requests exception handling
             return super(Http, cls)._handle_exception(exception)

--- a/addons/website/models/ir_qweb.py
+++ b/addons/website/models/ir_qweb.py
@@ -4,9 +4,10 @@ import re
 from collections import OrderedDict
 
 from odoo import models
-from odoo.addons.http_routing.models.ir_http import url_for
 from odoo.http import request
 from odoo.addons.base.models.assetsbundle import AssetsBundle
+from odoo.addons.http_routing.models.ir_http import url_for
+from odoo.addons.website.models import ir_http
 from odoo.tools import html_escape as escape
 
 re_background_image = re.compile(r"(background-image\s*:\s*url\(\s*['\"]?\s*)([^)'\"]+)")
@@ -47,7 +48,7 @@ class QWeb(models.AbstractModel):
            options.get('edit_translations') or options.get('debug') or (request and request.session.debug):
             return atts
 
-        website = request and getattr(request, 'website', None)
+        website = ir_http.get_request_website()
         if not website and options.get('website_id'):
             website = self.env['website'].browse(options['website_id'])
 

--- a/addons/website/models/ir_ui_view.py
+++ b/addons/website/models/ir_ui_view.py
@@ -302,7 +302,7 @@ class View(models.Model):
         if request and getattr(request, 'is_frontend', False):
 
             editable = request.website.is_publisher()
-            translatable = editable and self._context.get('lang') != request.website.default_lang_code
+            translatable = editable and self._context.get('lang') != request.website.default_lang_id.code
             editable = not translatable and editable
 
             # in edit mode ir.ui.view will tag nodes
@@ -355,7 +355,7 @@ class View(models.Model):
                 url_for=url_for,
                 res_company=request.website.company_id.sudo(),
                 default_lang_code=request.env['ir.http']._get_default_lang().code,
-                languages=request.env['ir.http']._get_language_codes(),
+                languages=request.env['res.lang'].get_available(),
                 translatable=translatable,
                 editable=editable,
                 menu_data=self.env['ir.ui.menu'].load_menus_root() if request.website.is_user() else None,
@@ -367,7 +367,7 @@ class View(models.Model):
     def get_default_lang_code(self):
         website_id = self.env.context.get('website_id')
         if website_id:
-            lang_code = self.env['website'].browse(website_id).default_lang_code
+            lang_code = self.env['website'].browse(website_id).default_lang_id.code
             return lang_code
         else:
             return super(View, self).get_default_lang_code()

--- a/addons/website/models/res_config_settings.py
+++ b/addons/website/models/res_config_settings.py
@@ -19,15 +19,11 @@ class ResConfigSettings(models.TransientModel):
     website_country_group_ids = fields.Many2many(related='website_id.country_group_ids', readonly=False)
     website_company_id = fields.Many2one(related='website_id.company_id', string='Website Company', readonly=False)
     website_logo = fields.Binary(related='website_id.logo', readonly=False)
-    language_ids = fields.Many2many(related='website_id.language_ids', relation='res.lang',
-        readonly=False)
+    language_ids = fields.Many2many(related='website_id.language_ids', relation='res.lang', readonly=False)
     website_language_count = fields.Integer(string='Number of languages', compute='_compute_website_language_count', readonly=True)
-    website_default_lang_id = fields.Many2one(
-        string='Default language', related='website_id.default_lang_id', readonly=False,
-        relation='res.lang')
-    website_default_lang_code = fields.Char(
-        'Default language code', related='website_id.default_lang_code', readonly=False,
-        )
+    website_default_lang_id = fields.Many2one(string='Default language', related='website_id.default_lang_id',
+                                              readonly=False, relation='res.lang')
+    website_default_lang_code = fields.Char('Default language code', related='website_id.default_lang_id.code', readonly=False)
     specific_user_account = fields.Boolean(related='website_id.specific_user_account', readonly=False,
                                            help='Are newly created user accounts website specific')
 

--- a/addons/website/models/res_lang.py
+++ b/addons/website/models/res_lang.py
@@ -1,8 +1,10 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, models, _
+from odoo import api, models, tools, _
+from odoo.addons.website.models import ir_http
 from odoo.exceptions import UserError
+from odoo.http import request
 
 
 class Lang(models.Model):
@@ -13,3 +15,12 @@ class Lang(models.Model):
             if self.env['website'].search([('language_ids', 'in', self._ids)]):
                 raise UserError(_("Cannot deactivate a language that is currently used on a website."))
         return super(Lang, self).write(vals)
+
+    @api.model
+    @tools.ormcache_context(keys=("website_id",))
+    def get_available(self):
+        """ Return the available languages as a list of (code, name) sorted by name. """
+        website = ir_http.get_request_website()
+        if website:
+            return sorted([(lang.code, lang.url_code, lang.name) for lang in request.website.language_ids])
+        return super(Lang, self).get_available()

--- a/addons/website/models/website.py
+++ b/addons/website/models/website.py
@@ -56,7 +56,6 @@ class Website(models.Model):
     company_id = fields.Many2one('res.company', string="Company", default=lambda self: self.env.company, required=True)
     language_ids = fields.Many2many('res.lang', 'website_lang_rel', 'website_id', 'lang_id', 'Languages', default=_active_languages)
     default_lang_id = fields.Many2one('res.lang', string="Default Language", default=_default_language, required=True)
-    default_lang_code = fields.Char("Default language code", related='default_lang_id.code', store=True, readonly=False)
     auto_redirect_lang = fields.Boolean('Autoredirect Language', default=True, help="Should users be redirected to their browser's language")
 
     def _default_social_facebook(self):
@@ -156,7 +155,8 @@ class Website(models.Model):
         public_user_to_change_websites = self.env['website']
         self._handle_favicon(values)
 
-        self._get_languages.clear_cache(self)
+        self.clear_caches()
+
         if 'company_id' in values and 'user_id' not in values:
             public_user_to_change_websites = self.filtered(lambda w: w.sudo().user_id.company_id.id != values['company_id'])
             if public_user_to_change_websites:
@@ -437,19 +437,11 @@ class Website(models.Model):
     # Languages
     # ----------------------------------------------------------
 
-    def get_languages(self):
-        self.ensure_one()
-        return self._get_languages()
-
-    @tools.cache('self.id')
-    def _get_languages(self):
-        return [(lg.code, lg.name) for lg in self.language_ids]
-
     def get_alternate_languages(self, req=None):
         langs = []
         if req is None:
             req = request.httprequest
-        default = self.get_current_website().default_lang_code
+        default = self.get_current_website().default_lang_id.url_code
         shorts = []
 
         def get_url_localized(router, lang):
@@ -460,11 +452,11 @@ class Website(models.Model):
             return router.build(request.endpoint, arguments)
 
         router = request.httprequest.app.get_db_router(request.db).bind('')
-        for code, dummy in self.get_languages():
-            lg_path = ('/' + code) if code != default else ''
-            lg_codes = code.split('_')
+        for lg in self.language_ids:
+            lg_path = ('/' + lg.url_code) if lg.url_code != default else ''
+            lg_codes = lg.code.split('_')
             shorts.append(lg_codes[0])
-            uri = get_url_localized(router, code) if request.endpoint else request.httprequest.path
+            uri = get_url_localized(router, lg.url_code) if request.endpoint else request.httprequest.path
             if req.query_string:
                 uri += u'?' + req.query_string.decode('utf-8')
             lang = {

--- a/addons/website/models/website_visitor.py
+++ b/addons/website/models/website_visitor.py
@@ -122,10 +122,9 @@ class WebsiteVisitor(models.Model):
     def _create_visitor(self, website_page_id=False):
         country_code = request.session.get('geoip', {}).get('country_code', False)
         country_id = request.env['res.country'].sudo().search([('code', '=', country_code)], limit=1).id if country_code else False
-        lang_id = request.env['res.lang'].sudo().search([('code', '=', request.lang)], limit=1).id
         vals = {
             'last_connection_datetime': datetime.now(),
-            'lang_id': lang_id,
+            'lang_id': request.lang.id,
             'country_id': country_id,
             'website_id': request.website.id
         }
