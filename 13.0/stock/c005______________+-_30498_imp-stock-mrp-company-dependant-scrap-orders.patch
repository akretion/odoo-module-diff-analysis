PR: https://github.com/odoo/odoo/pull/30498

From: fa5037650db987c0aece183758d59ce6026add4e
From: Hetal Dhanak
Date: 2019-07-11 08:15:22

Structural Changes: 4
Total Changes: 40

[IMP] stock, mrp: company dependant scrap orders.

This commit adds fields 'company_id' on stock.scrap model.
The company will filter locations and stock moves linked to the scrap
document.

We add also a specific sequence by company.

Task-1930055

closes odoo/odoo#30498

Signed-off-by: Simon Lejeune (sle) <sle@openerp.com>

================================= pseudo patch: =================================

--- a/addons/stock/models/res_company.py
+++ b/addons/stock/models/res_company.py
@@ -77,6 +77,21 @@ class Company(models.Model):
                 'scrap_location': True,
             })
 
+    def _create_scrap_sequence(self):
+        scrap_vals = []
+        for company in self:
+            scrap_vals.append({
+                'name': '%s Sequence scrap' % company.name,
+                'code': 'stock.scrap',
+                'company_id': company.id,
+                'prefix': 'SP/',
+                'padding': 5,
+                'number_next': 1,
+                'number_increment': 1
+            })
+        if scrap_vals:
+            self.env['ir.sequence'].create(scrap_vals)
+
     @api.model
     def create_missing_warehouse(self):
         """ This hook is used to add a warehouse on existing companies
@@ -125,6 +140,13 @@ class Company(models.Model):
         for company in company_without_property:
             company._create_scrap_location()
 
+    @api.model
+    def create_missing_scrap_sequence(self):
+        company_ids  = self.env['res.company'].search([])
+        company_has_scrap_seq = self.env['ir.sequence'].search([('code', '=', 'stock.scrap')]).mapped('company_id')
+        company_todo_sequence = company_ids - company_has_scrap_seq
+        company_todo_sequence._create_scrap_sequence()
+
     def _create_per_company_locations(self):
         self.ensure_one()
         self._create_transit_location()
@@ -132,9 +154,14 @@ class Company(models.Model):
         self._create_production_location()
         self._create_scrap_location()
 
+    def _create_per_company_sequences(self):
+        self.ensure_one()
+        self._create_scrap_sequence()
+
     @api.model
     def create(self, vals):
         company = super(Company, self).create(vals)
         company.sudo()._create_per_company_locations()
+        company.sudo()._create_per_company_sequences()
         self.env['stock.warehouse'].sudo().create({'name': company.name, 'code': company.name[:5], 'company_id': company.id, 'partner_id': company.partner_id.id})
         return company

--- a/addons/stock/models/stock_picking.py
+++ b/addons/stock/models/stock_picking.py
@@ -1093,7 +1093,7 @@ class Picking(models.Model):
             'view_id': view.id,
             'views': [(view.id, 'form')],
             'type': 'ir.actions.act_window',
-            'context': {'default_picking_id': self.id, 'product_ids': products.ids},
+            'context': {'default_picking_id': self.id, 'product_ids': products.ids, 'default_company_id': self.company_id.id},
             'target': 'new',
         }
 

--- a/addons/stock/models/stock_scrap.py
+++ b/addons/stock/models/stock_scrap.py
@@ -25,6 +25,7 @@ class StockScrap(models.Model):
         'Reference',  default=lambda self: _('New'),
         copy=False, readonly=True, required=True,
         states={'done': [('readonly', True)]})
+    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company, required=True, readonly=True)
     origin = fields.Char(string='Source Document')
     product_id = fields.Many2one(
         'product.product', 'Product', domain=[('type', 'in', ['product', 'consu'])],
@@ -39,16 +40,17 @@ class StockScrap(models.Model):
         states={'done': [('readonly', True)]}, domain="[('product_id', '=', product_id)]")
     package_id = fields.Many2one(
         'stock.quant.package', 'Package',
-        states={'done': [('readonly', True)]})
+        states={'done': [('readonly', True)]},
+        domain="[('company_id', '=', company_id)]")
     owner_id = fields.Many2one('res.partner', 'Owner', states={'done': [('readonly', True)]})
     move_id = fields.Many2one('stock.move', 'Scrap Move', readonly=True)
-    picking_id = fields.Many2one('stock.picking', 'Picking', states={'done': [('readonly', True)]})
+    picking_id = fields.Many2one('stock.picking', 'Picking', states={'done': [('readonly', True)]}, domain="[('company_id', '=', company_id)]")
     location_id = fields.Many2one(
-        'stock.location', 'Location', domain="[('usage', '=', 'internal')]",
+        'stock.location', 'Location', domain="[('usage', '=', 'internal'), ('company_id', 'in', [company_id, False])]",
         required=True, states={'done': [('readonly', True)]}, default=_get_default_location_id)
     scrap_location_id = fields.Many2one(
         'stock.location', 'Scrap Location', default=_get_default_scrap_location_id,
-        domain="[('scrap_location', '=', True)]", required=True, states={'done': [('readonly', True)]})
+        domain="[('scrap_location', '=', True), ('company_id', 'in', [company_id, False])]", required=True, states={'done': [('readonly', True)]})
     scrap_qty = fields.Float('Quantity', default=1.0, required=True, states={'done': [('readonly', True)]})
     state = fields.Selection([
         ('draft', 'Draft'),
@@ -93,6 +95,7 @@ class StockScrap(models.Model):
         return {
             'name': self.name,
             'origin': self.origin or self.picking_id.name or self.name,
+            'company_id': self.company_id.id,
             'product_id': self.product_id.id,
             'product_uom': self.product_uom_id.id,
             'product_uom_qty': self.scrap_qty,
