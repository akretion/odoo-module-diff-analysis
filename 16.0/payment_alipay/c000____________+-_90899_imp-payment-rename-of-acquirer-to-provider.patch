PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Structural Changes: 4
Total Changes: 188

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_alipay/models/__init__.py
+++ b/addons/payment_alipay/models/__init__.py
@@ -1,4 +1,4 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_transaction

--- a/addons/payment_alipay/models/payment_acquirer.py
+++ b/addons/payment_alipay/models/payment_provider.py
@@ -8,10 +8,10 @@ from odoo import api, fields, models
 _logger = logging.getLogger(__name__)
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('alipay', "Alipay")], ondelete={'alipay': 'set default'})
     alipay_payment_method = fields.Selection(
         string="Account",
@@ -33,24 +33,24 @@ class PaymentAcquirer(models.Model):
     def _compute_feature_support_fields(self):
         """ Override of `payment` to enable additional features. """
         super()._compute_feature_support_fields()
-        self.filtered(lambda acq: acq.provider == 'alipay').update({
+        self.filtered(lambda p: p.code == 'alipay').update({
             'support_fees': True,
         })
 
     # === BUSINESS METHODS ===#
 
     @api.model
-    def _get_compatible_acquirers(self, *args, currency_id=None, **kwargs):
-        """ Override of payment to unlist Alipay acquirers for unsupported currencies. """
-        acquirers = super()._get_compatible_acquirers(*args, currency_id=currency_id, **kwargs)
+    def _get_compatible_providers(self, *args, currency_id=None, **kwargs):
+        """ Override of payment to unlist Alipay providers for unsupported currencies. """
+        providers = super()._get_compatible_providers(*args, currency_id=currency_id, **kwargs)
 
         currency = self.env['res.currency'].browse(currency_id).exists()
         if currency and currency.name != 'CNY':
-            acquirers = acquirers.filtered(
-                lambda a: a.provider != 'alipay' or a.alipay_payment_method != 'express_checkout'
+            providers = providers.filtered(
+                lambda p: p.code != 'alipay' or p.alipay_payment_method != 'express_checkout'
             )
 
-        return acquirers
+        return providers
 
     def _alipay_compute_signature(self, data):
         # Rearrange parameters in the data set alphabetically

--- a/addons/payment_alipay/models/payment_transaction.py
+++ b/addons/payment_alipay/models/payment_transaction.py
@@ -22,14 +22,14 @@ class PaymentTransaction(models.Model):
         Note: self.ensure_one() from `_get_processing_values`
 
         :param dict processing_values: The generic and specific processing values of the transaction
-        :return: The dict of acquirer-specific processing values
+        :return: The dict of provider-specific processing values
         :rtype: dict
         """
         res = super()._get_specific_rendering_values(processing_values)
-        if self.provider != 'alipay':
+        if self.provider_code != 'alipay':
             return res
 
-        base_url = self.acquirer_id.get_base_url()
+        base_url = self.provider_id.get_base_url()
         if self.fees:
             # Similarly to what is done in `payment::payment.transaction.create`, we need to round
             # the sum of the amount and of the fees to avoid inconsistent string representations.
@@ -41,12 +41,12 @@ class PaymentTransaction(models.Model):
             '_input_charset': 'utf-8',
             'notify_url': urls.url_join(base_url, AlipayController._webhook_url),
             'out_trade_no': self.reference,
-            'partner': self.acquirer_id.alipay_merchant_partner_id,
+            'partner': self.provider_id.alipay_merchant_partner_id,
             'return_url': urls.url_join(base_url, AlipayController._return_url),
             'subject': self.reference,
             'total_fee': total_fee,
         }
-        if self.acquirer_id.alipay_payment_method == 'standard_checkout':
+        if self.provider_id.alipay_payment_method == 'standard_checkout':
             # https://global.alipay.com/docs/ac/global/create_forex_trade
             rendering_values.update({
                 'service': 'create_forex_trade',
@@ -57,29 +57,29 @@ class PaymentTransaction(models.Model):
             rendering_values.update({
                 'service': 'create_direct_pay_by_user',
                 'payment_type': 1,
-                'seller_email': self.acquirer_id.alipay_seller_email,
+                'seller_email': self.provider_id.alipay_seller_email,
             })
 
-        sign = self.acquirer_id._alipay_compute_signature(rendering_values)
+        sign = self.provider_id._alipay_compute_signature(rendering_values)
         rendering_values.update({
             'sign_type': 'MD5',
             'sign': sign,
-            'api_url': self.acquirer_id._alipay_get_api_url(),
+            'api_url': self.provider_id._alipay_get_api_url(),
         })
         return rendering_values
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of payment to find the transaction based on Alipay data.
 
-        :param str provider: The provider of the acquirer that handled the transaction
+        :param str provider_code: The code of the provider that handled the transaction
         :param dict notification_data: The notification data sent by the provider
         :return: The transaction if found
         :rtype: recordset of `payment.transaction`
         :raise: ValidationError if inconsistent data were received
         :raise: ValidationError if the data match no transaction
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'alipay' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'alipay' or len(tx) == 1:
             return tx
 
         reference = notification_data.get('reference') or notification_data.get('out_trade_no')
@@ -92,7 +92,7 @@ class PaymentTransaction(models.Model):
                 )
             )
 
-        tx = self.search([('reference', '=', reference), ('provider', '=', 'alipay')])
+        tx = self.search([('reference', '=', reference), ('provider_code', '=', 'alipay')])
         if not tx:
             raise ValidationError(
                 "Alipay: " + _("No transaction found matching reference %s.", reference)
@@ -110,10 +110,10 @@ class PaymentTransaction(models.Model):
         :raise: ValidationError if inconsistent data were received
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'alipay':
+        if self.provider_code != 'alipay':
             return
 
-        self.acquirer_reference = notification_data.get('trade_no')
+        self.provider_reference = notification_data.get('trade_no')
         status = notification_data.get('trade_status')
         if status in ['TRADE_FINISHED', 'TRADE_SUCCESS']:
             self._set_done()
