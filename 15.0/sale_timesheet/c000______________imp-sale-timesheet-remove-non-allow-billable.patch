PR: https://github.com/odoo/odoo/pull/

From: d1953139fa986ded3424e4d178b64b8e011df1ee
From: Laurent Stukkens (LTU)
Date: 2021-01-13 13:53:52

Breaking data model changes scores: del:2 + add:0, change matches:
-    non_allow_billable = fields.Boolean("Non-Billable", help="Your timesheet will not be billed.")
-    non_allow_billable = fields.Boolean("Non-Billable", help="Your timesheets linked to this task will not be billed.")

Total Changes: 46

[IMP] sale_timesheet: remove non_allow_billable

This commit removes all reference to project.task non_allow_billable.
This also implies:

    * account.analytic.line non_allow_billable
    * account.analytic.line timesheet_invoice_type selection value
      'non_billable_timesheet'

task-2424382

================================= pseudo patch: =================================

--- a/addons/sale_timesheet/models/account.py
+++ b/addons/sale_timesheet/models/account.py
@@ -18,21 +18,14 @@ class AccountAnalyticLine(models.Model):
         ('billable_time', 'Billed on Timesheets'),
         ('billable_fixed', 'Billed at a Fixed price'),
         ('non_billable', 'Non Billable Tasks'),
-        ('non_billable_timesheet', 'Non Billable Timesheet'),
         ('non_billable_project', 'No task found')], string="Billable Type", compute='_compute_timesheet_invoice_type', compute_sudo=True, store=True, readonly=True)
     timesheet_invoice_id = fields.Many2one('account.move', string="Invoice", readonly=True, copy=False, help="Invoice created from the timesheet")
-    non_allow_billable = fields.Boolean("Non-Billable", help="Your timesheet will not be billed.")
     so_line = fields.Many2one(compute="_compute_so_line", store=True, readonly=False)
 
     # TODO: [XBO] Since the task_id is not required in this model,  then it should more efficient to depends to bill_type and pricing_type of project (See in master)
-    @api.depends('so_line.product_id', 'project_id', 'task_id', 'non_allow_billable', 'task_id.bill_type', 'task_id.pricing_type', 'task_id.non_allow_billable')
+    @api.depends('so_line.product_id', 'project_id', 'task_id', 'task_id.bill_type', 'task_id.pricing_type')
     def _compute_timesheet_invoice_type(self):
-        non_allowed_billable = self.filtered('non_allow_billable')
-        non_allowed_billable.timesheet_invoice_type = 'non_billable_timesheet'
-        non_allowed_billable_task = (self - non_allowed_billable).filtered(lambda t: t.task_id.bill_type == 'customer_project' and t.task_id.pricing_type == 'employee_rate' and t.task_id.non_allow_billable)
-        non_allowed_billable_task.timesheet_invoice_type = 'non_billable'
-
-        for timesheet in self - non_allowed_billable - non_allowed_billable_task:
+        for timesheet in self:
             if timesheet.project_id:  # AAL will be set to False
                 invoice_type = 'non_billable_project' if not timesheet.task_id else 'non_billable'
                 if timesheet.task_id and timesheet.so_line.product_id.type == 'service':
@@ -113,7 +106,7 @@ class AccountAnalyticLine(models.Model):
                 return task.sale_line_id
             if task.pricing_type == 'fixed_rate':
                 return task.sale_line_id
-            elif task.pricing_type == 'employee_rate' and not task.non_allow_billable:
+            elif task.pricing_type == 'employee_rate':
                 map_entry = project.sale_line_employee_ids.filtered(lambda map_entry: map_entry.employee_id == employee)
                 if map_entry:
                     return map_entry.sale_line_id

--- a/addons/sale_timesheet/models/project.py
+++ b/addons/sale_timesheet/models/project.py
@@ -83,8 +83,7 @@ class Project(models.Model):
     @api.depends('pricing_type', 'allow_timesheets', 'allow_billable', 'sale_line_employee_ids', 'sale_line_employee_ids.employee_id', 'bill_type')
     def _compute_warning_employee_rate(self):
         projects = self.filtered(lambda p: p.allow_billable and p.allow_timesheets and p.bill_type == 'customer_project' and p.pricing_type == 'employee_rate')
-        tasks = projects.task_ids.filtered(lambda t: not t.non_allow_billable)
-        employees = self.env['account.analytic.line'].read_group([('task_id', 'in', tasks.ids), ('non_allow_billable', '=', False)], ['employee_id', 'project_id'], ['employee_id', 'project_id'], ['employee_id', 'project_id'], lazy=False)
+        employees = self.env['account.analytic.line'].read_group([('task_id', 'in', projects.task_ids.ids)], ['employee_id', 'project_id'], ['employee_id', 'project_id'], ['employee_id', 'project_id'], lazy=False)
         dict_project_employee = defaultdict(list)
         for line in employees:
             dict_project_employee[line['project_id'][0]] += [line['employee_id'][0]]
@@ -235,9 +234,6 @@ class ProjectTask(models.Model):
             ('service_type', '=', 'timesheet'),
             '|', ('company_id', '=', False), ('company_id', '=', company_id)]""",
         help='Select a Service product with which you would like to bill your time spent on this task.')
-
-    # TODO: [XBO] remove me in master
-    non_allow_billable = fields.Boolean("Non-Billable", help="Your timesheets linked to this task will not be billed.")
     remaining_hours_so = fields.Float('Remaining Hours on SO', compute='_compute_remaining_hours_so')
     remaining_hours_available = fields.Boolean(related="sale_line_id.remaining_hours_available")
 
@@ -288,12 +284,12 @@ class ProjectTask(models.Model):
         for task in self:
             task.analytic_account_active = task.analytic_account_active or task.analytic_account_id.active
 
-    @api.depends('sale_line_id', 'project_id', 'allow_billable', 'non_allow_billable')
+    @api.depends('sale_line_id', 'project_id', 'allow_billable')
     def _compute_sale_order_id(self):
         for task in self:
-            if not task.allow_billable or task.non_allow_billable:
+            if not task.allow_billable:
                 task.sale_order_id = False
-            elif task.allow_billable:
+            else:
                 if task.sale_line_id:
                     task.sale_order_id = task.sale_line_id.sudo().order_id
                 elif task.project_id.sale_order_id:
@@ -333,21 +329,6 @@ class ProjectTask(models.Model):
             project_dest = self.env['project.project'].browse(values['project_id'])
             if project_dest.bill_type == 'customer_project' and project_dest.pricing_type == 'employee_rate':
                 self.write({'sale_line_id': False})
-        if 'non_allow_billable' in values and self.filtered('allow_timesheets').sudo().timesheet_ids:
-            timesheet_ids = self.filtered('allow_timesheets').timesheet_ids.filtered(
-                lambda t: (not t.timesheet_invoice_id or t.timesheet_invoice_id.state == 'cancel')
-            )
-            if values['non_allow_billable']:
-                timesheet_ids.write({'so_line': False})
-                self.sale_line_id = False
-            else:
-                # We write project on timesheet lines to call _timesheet_preprocess. This function will set correct the SOL
-                for project in timesheet_ids.project_id:
-                    current_timesheet_ids = timesheet_ids.filtered(lambda t: t.project_id == project)
-                    current_timesheet_ids.task_id.update({'sale_line_id': project.sale_line_id.id})
-                    for employee in current_timesheet_ids.employee_id:
-                        current_timesheet_ids.filtered(lambda t: t.employee_id == employee).write({'project_id': project.id})
-
         return res
 
     def _get_last_sol_of_customer(self):

--- a/addons/sale_timesheet/models/sale_order.py
+++ b/addons/sale_timesheet/models/sale_order.py
@@ -34,7 +34,7 @@ class SaleOrder(models.Model):
         for sale_order in self:
             timesheets = sale_order.timesheet_ids if self.user_has_groups('hr_timesheet.group_hr_timesheet_approver') else sale_order.timesheet_ids.filtered(lambda t: t.user_id.id == self.env.uid)
             total_time = 0.0
-            for timesheet in timesheets.filtered(lambda t: not t.non_allow_billable):
+            for timesheet in timesheets:
                 # Timesheets may be stored in a different unit of measure, so first we convert all of them to the reference unit
                 total_time += timesheet.unit_amount * timesheet.product_uom_id.factor_inv
             # Now convert to the proper unit of measure
@@ -147,7 +147,7 @@ class SaleOrderLine(models.Model):
             if not line.is_expense and line.product_id.type == 'service' and line.product_id.service_type == 'timesheet':
                 line.qty_delivered_method = 'timesheet'
 
-    @api.depends('analytic_line_ids.project_id', 'analytic_line_ids.non_allow_billable', 'project_id.pricing_type', 'project_id.bill_type')
+    @api.depends('analytic_line_ids.project_id', 'project_id.pricing_type', 'project_id.bill_type')
     def _compute_qty_delivered(self):
         super(SaleOrderLine, self)._compute_qty_delivered()
 
@@ -159,7 +159,7 @@ class SaleOrderLine(models.Model):
 
     def _timesheet_compute_delivered_quantity_domain(self):
         """ Hook for validated timesheet in addionnal module """
-        return [('project_id', '!=', False), ('non_allow_billable', '=', False)]
+        return [('project_id', '!=', False)]
 
     ###########################################
     # Service : Project and task generation
