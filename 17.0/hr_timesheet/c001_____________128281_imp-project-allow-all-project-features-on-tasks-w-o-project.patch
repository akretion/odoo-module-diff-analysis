PR: https://github.com/odoo/odoo/pull/128281

From: fb88a7448c75fdcbe1d9c3664402a1dea2733326
From: Audric Onockx (auon)
Date: 2023-07-20 11:06:46

Breaking data model changes scores: del:1 + add:0, change matches:
-    project_root_id = fields.Many2one(domain=[('is_internal_project', '=', False)])

Total Changes: 45

[IMP] project,_*: allow all project features on tasks w/o project

_*: hr_timesheet,sale_project,sale_timesheet
Generally, you don't want subtasks to be displayed at the same level
as their parent tasks. You want to consider the subtasks as part of
their parent's project, but don't want to see them directly in this
project. Rather, you want them to be accessible only via their parent.
(There are exceptions to that and we want to stay flexible.)

First solution that comes to mind is to have `project_id` set to False
for the latter tasks, but then how to get the value of the fields that
are related to the project?

So, second solution would be to have a field `project_root_id`,
which would be the project of the parent, or the grand-parent, etc.
The issue now is that we have to fields "project", and it isn't obvious
when to use one or the other.

The most simple way to answer this need is to keep one field "project",
that will always be set for (non-private) tasks,
and create a boolean field : `display_in_project`.
But we want it to be technical (no checkbox in the view).
So, when the user unsets the project on a subtask, the view will act
as if the project was unset, but in the back-end,
we'll set `display_in_project` to False and set `project_id` back.

The fact that all tasks have a project allows us to know if action x
can be perform on this task t, dependind on t.project_id.allow_x.

task-3367246

closes odoo/odoo#128281

Related: odoo/enterprise#43996
Related: odoo/upgrade#4930
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/hr_timesheet/models/hr_timesheet.py
+++ b/addons/hr_timesheet/models/hr_timesheet.py
@@ -50,7 +50,7 @@ class AccountAnalyticLine(models.Model):
     task_id = fields.Many2one(
         'project.task', 'Task', index='btree_not_null',
         compute='_compute_task_id', store=True, readonly=False,
-        domain="[('company_id', '=', company_id), ('project_root_id.allow_timesheets', '=', True), ('project_root_id', '=?', project_id)]")
+        domain="[('company_id', '=', company_id), ('project_id.allow_timesheets', '=', True), ('project_id', '=?', project_id)]")
     parent_task_id = fields.Many2one('project.task', related='task_id.parent_id', store=True)
     project_id = fields.Many2one(
         'project.project', 'Project', domain=_domain_project_id, index=True,
@@ -98,9 +98,9 @@ class AccountAnalyticLine(models.Model):
     @api.depends('task_id')
     def _compute_project_id(self):
         for line in self:
-            if not line.task_id.project_root_id or line.project_id == line.task_id.project_root_id:
+            if not line.task_id.project_id or line.project_id == line.task_id.project_id:
                 continue
-            line.project_id = line.task_id.project_root_id
+            line.project_id = line.task_id.project_id
 
     @api.depends('project_id')
     def _compute_task_id(self):
@@ -112,7 +112,7 @@ class AccountAnalyticLine(models.Model):
         # TODO KBA in master - check to do it "properly", currently:
         # This onchange is used to reset the task_id when the project changes.
         # Doing it in the compute will remove the task_id when the project of a task changes.
-        if self.project_id != self.task_id.project_root_id:
+        if self.project_id != self.task_id.project_id:
             self.task_id = False
 
     @api.depends('employee_id')
@@ -319,9 +319,9 @@ class AccountAnalyticLine(models.Model):
             tasks = self.env['project.task'].sudo().browse(task_ids)
             for task in tasks:
                 task_per_id[task.id] = task
-                if not task.project_root_id:
+                if not task.project_id:
                     raise ValidationError(_('Timesheets cannot be created on a private task.'))
-            account_ids = account_ids.union(tasks.analytic_account_id.ids, tasks.project_root_id.analytic_account_id.ids)
+            account_ids = account_ids.union(tasks.analytic_account_id.ids, tasks.project_id.analytic_account_id.ids)
 
         project_per_id = {}
         if project_ids:
@@ -341,7 +341,7 @@ class AccountAnalyticLine(models.Model):
             vals = vals_list[index]
             data = task_per_id[vals['task_id']] if vals.get('task_id') else project_per_id[vals['project_id']]
             if not vals.get('project_id'):
-                vals['project_id'] = data.project_root_id.id
+                vals['project_id'] = data.project_id.id
             if not vals.get('account_id'):
                 account = data._get_task_analytic_account_id() if vals.get('task_id') else data.analytic_account_id
                 if not account or not account.active:

--- a/addons/hr_timesheet/models/project_task.py
+++ b/addons/hr_timesheet/models/project_task.py
@@ -26,9 +26,8 @@ class Task(models.Model):
     _inherit = "project.task"
 
     project_id = fields.Many2one(domain="['|', ('company_id', '=', False), ('company_id', '=?',  company_id), ('is_internal_project', '=', False)]")
-    project_root_id = fields.Many2one(domain=[('is_internal_project', '=', False)])
     analytic_account_active = fields.Boolean("Active Analytic Account", compute='_compute_analytic_account_active', compute_sudo=True, recursive=True)
-    allow_timesheets = fields.Boolean("Allow timesheets", related="project_root_id.allow_timesheets", help="Timesheets can be logged on this task.", readonly=True, recursive=True)
+    allow_timesheets = fields.Boolean("Allow timesheets", related="project_id.allow_timesheets", help="Timesheets can be logged on this task.", readonly=True, recursive=True)
     remaining_hours = fields.Float("Remaining Hours", compute='_compute_remaining_hours', store=True, readonly=True, help="Number of allocated hours minus the number of hours spent.")
     remaining_hours_percentage = fields.Float(compute='_compute_remaining_hours_percentage', search='_search_remaining_hours_percentage')
     effective_hours = fields.Float("Hours Spent", compute='_compute_effective_hours', compute_sudo=True, store=True)
@@ -49,13 +48,19 @@ class Task(models.Model):
     def SELF_READABLE_FIELDS(self):
         return super().SELF_READABLE_FIELDS | PROJECT_TASK_READABLE_FIELDS
 
+    @api.constrains('project_id')
+    def _check_project_root(self):
+        private_tasks = self.filtered(lambda t: not t.project_id)
+        if private_tasks and self.env['account.analytic.line'].sudo().search_count([('task_id', 'in', private_tasks.ids)], limit=1):
+            raise UserError(_("This task cannot be private because there are some timesheets linked to it."))
+
     def _uom_in_days(self):
         return self.env.company.timesheet_encode_uom_id == self.env.ref('uom.product_uom_day')
 
     def _compute_encode_uom_in_days(self):
         self.encode_uom_in_days = self._uom_in_days()
 
-    @api.depends('analytic_account_id.active', 'project_root_id.analytic_account_id.active')
+    @api.depends('analytic_account_id.active', 'project_id.analytic_account_id.active')
     def _compute_analytic_account_active(self):
         """ Overridden in sale_timesheet """
         for task in self:
@@ -161,26 +166,6 @@ class Task(models.Model):
         # Is override in sale_timesheet
         return self.timesheet_ids
 
-    def write(self, values):
-        # a timesheet must have an analytic account (and a project)
-        is_removed_project = 'project_id' in values and not values['project_id']
-        is_removed_parent = 'parent_id' in values and not values['parent_id']
-        if (
-            ((is_removed_project and (not self.parent_id or is_removed_parent))
-            or (is_removed_parent and not (self.project_id or is_removed_project)))
-            and self._get_timesheet()
-        ):
-            raise UserError(_('This task must be part of a project because there are some timesheets linked to it.'))
-        res = super(Task, self).write(values)
-
-        if 'project_id' in values:
-            project = self.env['project.project'].browse(values.get('project_id'))
-            if project.allow_timesheets:
-                # We write on all non yet invoiced timesheet the new project_id (if project allow timesheet)
-                self._get_timesheet().write({'project_id': values.get('project_id')})
-
-        return res
-
     @api.depends('allow_timesheets', 'planned_hours', 'encode_uom_in_days', 'remaining_hours')
     @api.depends_context('hr_timesheet_display_remaining_hours')
     def _compute_display_name(self):
