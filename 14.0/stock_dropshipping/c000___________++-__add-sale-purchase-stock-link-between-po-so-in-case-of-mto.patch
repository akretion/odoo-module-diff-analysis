PR: https://github.com/odoo/odoo/pull/

From: 5a1645a8f8f3560eb778da90b6160b322ce0722e
From: RÃ©my Voet (ryv)
Date: 2020-01-23 14:59:57

Structural Changes: 8
Total Changes: 60

[ADD] sale_purchase_stock: link between PO<->SO in case of MTO

In order to improve the navigation between of SO and PO in the case of
MTO, add a direct link between PO<->SO. When the SO is confirmed
(with storable product(s) with MTO + buy),
PO is/are generated, in this case, add a stat button on each model form
to avoid to manually search the related SO with the source field (name).

task-1913392

================================= pseudo patch: =================================

--- a/addons/stock_dropshipping/models/purchase.py
+++ b/addons/stock_dropshipping/models/purchase.py
@@ -5,7 +5,7 @@ from odoo import api, models
 
 
 class PurchaseOrderLine(models.Model):
-    _inherit = "purchase.order.line"
+    _inherit = 'purchase.order.line'
 
     def _prepare_stock_moves(self, picking):
         res = super(PurchaseOrderLine, self)._prepare_stock_moves(picking)
@@ -24,18 +24,3 @@ class PurchaseOrderLine(models.Model):
         res = super()._prepare_purchase_order_line_from_procurement(product_id, product_qty, product_uom, company_id, values, po)
         res['sale_line_id'] = values.get('sale_line_id', False)
         return res
-
-
-class StockRule(models.Model):
-    _inherit = 'stock.rule'
-
-    @api.model
-    def _get_procurements_to_merge_groupby(self, procurement):
-        """ Do not group purchase order line if they are linked to different
-        sale order line. The purpose is to compute the delivered quantities.
-        """
-        return procurement.values.get('sale_line_id'), super(StockRule, self)._get_procurements_to_merge_groupby(procurement)
-
-    @api.model
-    def _get_procurements_to_merge_sorted(self, procurement):
-        return procurement.values.get('sale_line_id'), super(StockRule, self)._get_procurements_to_merge_sorted(procurement)

--- a/addons/stock_dropshipping/models/sale.py
+++ b/addons/stock_dropshipping/models/sale.py
@@ -1,24 +1,11 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, models, fields
+from odoo import models
 
 
 class SaleOrderLine(models.Model):
-    _inherit = "sale.order.line"
-
-    purchase_line_ids = fields.One2many('purchase.order.line', 'sale_line_id')
-
-    def _get_qty_procurement(self, previous_product_uom_qty):
-        # People without purchase rights should be able to do this operation
-        purchase_lines_sudo = self.sudo().purchase_line_ids
-        if purchase_lines_sudo.filtered(lambda r: r.state != 'cancel'):
-            qty = 0.0
-            for po_line in purchase_lines_sudo.filtered(lambda r: r.state != 'cancel'):
-                qty += po_line.product_uom._compute_quantity(po_line.product_qty, self.product_uom, rounding_method='HALF-UP')
-            return qty
-        else:
-            return super(SaleOrderLine, self)._get_qty_procurement(previous_product_uom_qty=previous_product_uom_qty)
+    _inherit = 'sale.order.line'
 
     def _compute_is_mto(self):
         super(SaleOrderLine, self)._compute_is_mto()
@@ -31,3 +18,14 @@ class SaleOrderLine(models.Model):
                         pull_rule.picking_type_id.sudo().default_location_dest_id.usage == 'customer':
                     line.is_mto = True
                     break
+
+    def _get_qty_procurement(self, previous_product_uom_qty):
+        # People without purchase rights should be able to do this operation
+        purchase_lines_sudo = self.sudo().purchase_line_ids
+        if purchase_lines_sudo.filtered(lambda r: r.state != 'cancel'):
+            qty = 0.0
+            for po_line in purchase_lines_sudo.filtered(lambda r: r.state != 'cancel'):
+                qty += po_line.product_uom._compute_quantity(po_line.product_qty, self.product_uom, rounding_method='HALF-UP')
+            return qty
+        else:
+            return super(SaleOrderLine, self)._get_qty_procurement(previous_product_uom_qty=previous_product_uom_qty)

--- a/addons/stock_dropshipping/models/stock.py
+++ b/addons/stock_dropshipping/models/stock.py
@@ -4,6 +4,21 @@
 from odoo import api, models
 
 
+class StockRule(models.Model):
+    _inherit = 'stock.rule'
+
+    @api.model
+    def _get_procurements_to_merge_groupby(self, procurement):
+        """ Do not group purchase order line if they are linked to different
+        sale order line. The purpose is to compute the delivered quantities.
+        """
+        return procurement.values.get('sale_line_id'), super(StockRule, self)._get_procurements_to_merge_groupby(procurement)
+
+    @api.model
+    def _get_procurements_to_merge_sorted(self, procurement):
+        return procurement.values.get('sale_line_id'), super(StockRule, self)._get_procurements_to_merge_sorted(procurement)
+
+
 class ProcurementGroup(models.Model):
     _inherit = "procurement.group"
 
