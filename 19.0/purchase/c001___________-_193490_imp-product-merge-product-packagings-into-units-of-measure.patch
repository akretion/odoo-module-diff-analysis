PR: https://github.com/odoo/odoo/pull/193490

From: dc24a1d1c93cf6eeb6456b1591a0ab8ccc4086ba
From: Mohammad Abdulmoneim (abdu)
Date: 2025-01-14 09:03:42

Breaking data model changes scores: del:4 + add:0, change matches:
-    _inherit = 'product.packaging'
-    purchase = fields.Boolean("Purchase", default=True, help="If true, the packaging can be used for purchase orders")
-    product_packaging_id = fields.Many2one('product.packaging', string='Packaging', domain="[('purchase', '=', True), ('product_id', '=', product_id)]", check_company=True,
-    product_packaging_qty = fields.Float('Packaging Quantity', compute="_compute_product_packaging_qty", store=True, readonly=False)

Total Changes: 92

[IMP] product,*: merge product packagings into units of measure

This commit removes `product.packaging` model completely and merges it
into units of measure feature. Previously, users could define one or
more packagins for each product which can be used in sale/purchase
orders in addition to stock transfers. This led to some confusion as
there is no intrinsic difference between packagings and units of
measure. Also, sale,purchase order lines and stock moves had two
different fields for units and quantities, one for the main move unit
and another for the packaging which introduced some technical complexity
to ensure the consistency between those fields. After this commit, if a
user wants to define a packaging for a product, they just need to create
a `uom_uom` record with the desired name and quantity and add it to the
`uom_ids` field on the product so that it can be used in
sale/purchase/stock orders. This commit also adds two new fields to
`stock_move` model to store the additional packaging unit and quantity
from sale/purchase/manufacturing orders. It's readonly and only shown in
reports and barcode in case it was different than the main stock move
unit.

Task-4252043

Part-of: odoo/odoo#193490
Related: odoo/enterprise#77092
Signed-off-by: Arnold Moyaux (arm) <arm@odoo.com>
Signed-off-by: Mohammad Abdulmoneim (abdu) <abdu@odoo.com>

================================= pseudo patch: =================================

--- a/addons/purchase/models/product.py
+++ b/addons/purchase/models/product.py
@@ -120,9 +120,3 @@ class ProductSupplierinfo(models.Model):
     @api.onchange('partner_id')
     def _onchange_partner_id(self):
         self.currency_id = self.partner_id.property_purchase_currency_id.id or self.env.company.currency_id.id
-
-
-class ProductPackaging(models.Model):
-    _inherit = 'product.packaging'
-
-    purchase = fields.Boolean("Purchase", default=True, help="If true, the packaging can be used for purchase orders")

--- a/addons/purchase/models/purchase_order.py
+++ b/addons/purchase/models/purchase_order.py
@@ -736,8 +736,6 @@ class PurchaseOrder(models.Model):
                 for rfq_line in rfqs.order_line:
                     existing_line = oldest_rfq.order_line.filtered(lambda l: l.product_id == rfq_line.product_id and
                                                                                 l.product_uom_id == rfq_line.product_uom_id and
-                                                                                l.product_packaging_id == rfq_line.product_packaging_id and
-                                                                                l.product_packaging_qty == rfq_line.product_packaging_qty and
                                                                                 l.analytic_distribution == rfq_line.analytic_distribution and
                                                                                 l.discount == rfq_line.discount and
                                                                                 abs(l.date_planned - rfq_line.date_planned).total_seconds() <= 86400  # 24 hours in seconds
@@ -1063,19 +1061,7 @@ class PurchaseOrder(models.Model):
                 price=seller.price_discounted,
                 min_qty=seller.min_qty,
             )
-        # Check if the product uses some packaging.
-        packaging = self.env['product.packaging'].search(
-            [('product_id', '=', product.id), ('purchase', '=', True)], limit=1
-        )
-        if packaging:
-            qty = packaging.product_uom_id._compute_quantity(packaging.qty, product.uom_po_id)
-            product_infos.update(
-                packaging={
-                    'id': packaging.id,
-                    'name': packaging.display_name,
-                    'qty': qty,
-                }
-            )
+
         return product_infos
 
     def get_confirm_url(self, confirm_type=None):
@@ -1177,14 +1163,9 @@ class PurchaseOrder(models.Model):
         :rtype: float
         """
         self.ensure_one()
-        product_packaging_qty = kwargs.get('product_packaging_qty', False)
-        product_packaging_id = kwargs.get('product_packaging_id', False)
         pol = self.order_line.filtered(lambda line: line.product_id.id == product_id)
         if pol:
-            if product_packaging_qty:
-                pol.product_packaging_id = product_packaging_id
-                pol.product_packaging_qty = product_packaging_qty
-            elif quantity != 0:
+            if quantity != 0:
                 pol.product_qty = quantity
             elif self.state in ['draft', 'sent']:
                 price_unit = self._get_product_price_and_data(pol.product_id)['price']

--- a/addons/purchase/models/purchase_order_line.py
+++ b/addons/purchase/models/purchase_order_line.py
@@ -18,8 +18,7 @@ class PurchaseOrderLine(models.Model):
     name = fields.Text(
         string='Description', required=True, compute='_compute_price_unit_and_date_planned_and_name', store=True, readonly=False)
     sequence = fields.Integer(string='Sequence', default=10)
-    product_qty = fields.Float(string='Quantity', digits='Product Unit', required=True,
-                               compute='_compute_product_qty', store=True, readonly=False)
+    product_qty = fields.Float(string='Quantity', digits='Product Unit', required=True)
     product_uom_qty = fields.Float(string='Total Quantity', compute='_compute_product_uom_qty', store=True)
     date_planned = fields.Datetime(
         string='Expected Arrival', index=True,
@@ -67,9 +66,6 @@ class PurchaseOrderLine(models.Model):
     currency_id = fields.Many2one(related='order_id.currency_id', string='Currency')
     date_order = fields.Datetime(related='order_id.date_order', string='Order Date', readonly=True)
     date_approve = fields.Datetime(related="order_id.date_approve", string='Confirmation Date', readonly=True)
-    product_packaging_id = fields.Many2one('product.packaging', string='Packaging', domain="[('purchase', '=', True), ('product_id', '=', product_id)]", check_company=True,
-                                           compute="_compute_product_packaging_id", store=True, readonly=False)
-    product_packaging_qty = fields.Float('Packaging Quantity', compute="_compute_product_packaging_qty", store=True, readonly=False)
     tax_calculation_rounding_method = fields.Selection(
         related='company_id.tax_calculation_rounding_method',
         string='Tax calculation rounding method', readonly=True)
@@ -374,54 +370,10 @@ class PurchaseOrderLine(models.Model):
                 product_ctx = {'seller_id': seller.id, 'lang': get_lang(line.env, line.partner_id.lang).code}
                 line.name = line._get_product_purchase_description(line.product_id.with_context(product_ctx))
 
-    @api.depends('product_id', 'product_qty', 'product_uom_id')
-    def _compute_product_packaging_id(self):
+    @api.depends('product_id')
+    def _compute_product_uom_id(self):
         for line in self:
-            # remove packaging if not match the product
-            if line.product_packaging_id.product_id != line.product_id:
-                line.product_packaging_id = False
-            # suggest biggest suitable packaging matching the PO's company
-            if line.product_id and line.product_qty and line.product_uom_id:
-                suggested_packaging = line.product_id.packaging_ids\
-                        .filtered(lambda p: p.purchase and (p.product_id.company_id <= p.company_id <= line.company_id))\
-                        ._find_suitable_product_packaging(line.product_qty, line.product_uom_id)
-                line.product_packaging_id = suggested_packaging or line.product_packaging_id
-
-    @api.onchange('product_packaging_id')
-    def _onchange_product_packaging_id(self):
-        if self.product_packaging_id and self.product_qty:
-            newqty = self.product_packaging_id._check_qty(self.product_qty, self.product_uom_id, "UP")
-            if float_compare(newqty, self.product_qty, precision_rounding=self.product_uom_id.rounding) != 0:
-                return {
-                    'warning': {
-                        'title': _('Warning'),
-                        'message': _(
-                            "This product is packaged by %(pack_size).2f %(pack_name)s. You should purchase %(quantity).2f %(unit)s.",
-                            pack_size=self.product_packaging_id.qty,
-                            pack_name=self.product_id.uom_id.name,
-                            quantity=newqty,
-                            unit=self.product_uom_id.name
-                        ),
-                    },
-                }
-
-    @api.depends('product_packaging_id', 'product_uom_id', 'product_qty')
-    def _compute_product_packaging_qty(self):
-        self.product_packaging_qty = 0
-        for line in self:
-            if not line.product_packaging_id:
-                continue
-            line.product_packaging_qty = line.product_packaging_id._compute_qty(line.product_qty, line.product_uom_id)
-
-    @api.depends('product_packaging_qty')
-    def _compute_product_qty(self):
-        for line in self:
-            if line.product_packaging_id:
-                packaging_uom = line.product_packaging_id.product_uom_id
-                qty_per_packaging = line.product_packaging_id.qty
-                product_qty = packaging_uom._compute_quantity(line.product_packaging_qty * qty_per_packaging, line.product_uom_id)
-                if float_compare(product_qty, line.product_qty, precision_rounding=line.product_uom_id.rounding) != 0:
-                    line.product_qty = product_qty
+            line.product_uom_id = line.product_id.seller_ids.filtered(lambda s: s.partner_id == line.partner_id).product_uom_id or line.product_id.uom_id if line.product_id else False
 
     @api.depends('product_uom_id', 'product_qty', 'product_id.uom_id')
     def _compute_product_uom_qty(self):
@@ -524,13 +476,6 @@ class PurchaseOrderLine(models.Model):
                 'display_name': self.product_uom_id.display_name,
                 'id': self.product_uom_id.id,
             }
-            if self.product_packaging_id:
-                packaging = self.product_packaging_id
-                catalog_info['packaging'] = {
-                    'id': packaging.id,
-                    'name': packaging.display_name,
-                    'qty': packaging.product_uom_id._compute_quantity(packaging.qty, self.product_uom_id),
-                }
             return catalog_info
         elif self:
             self.product_id.ensure_one()
