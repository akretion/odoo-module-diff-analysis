PR: https://github.com/odoo/odoo/pull/

From: f0ffbea17381cb117f2eed4ea18a76e2b0f37f00
From: SÃ©bastien Theys
Date: 2019-08-02 16:47:58

Structural Changes: 12
Total Changes: 45

[IMP] *: remove unnecessary image sizes

The big images are probably never going to be used for the following models:

- pos category
- fleet brand
- livechat channel
- mail channel
- payment acquirer

And if big images are needed some day the model should use image.mixin instead.

PR: #34925

================================= pseudo patch: =================================

--- a/addons/fleet/models/fleet_vehicle.py
+++ b/addons/fleet/models/fleet_vehicle.py
@@ -72,9 +72,7 @@ class FleetVehicle(models.Model):
     horsepower_tax = fields.Float('Horsepower Taxation')
     power = fields.Integer('Power', help='Power in kW of the vehicle')
     co2 = fields.Float('CO2 Emissions', help='CO2 emissions of the vehicle')
-    image = fields.Binary(related='model_id.image', string="Logo", readonly=False)
-    image_128 = fields.Binary(related='model_id.image_128', string="Logo (medium)", readonly=False)
-    image_64 = fields.Binary(related='model_id.image_64', string="Logo (small)", readonly=False)
+    image_128 = fields.Image(related='model_id.image_128', readonly=False)
     contract_renewal_due_soon = fields.Boolean(compute='_compute_contract_reminder', search='_search_contract_renewal_due_soon',
         string='Has Contracts to renew', multi='contract_info')
     contract_renewal_overdue = fields.Boolean(compute='_compute_contract_reminder', search='_search_get_overdue_contract_reminder',
@@ -203,13 +201,6 @@ class FleetVehicle(models.Model):
         res.append(('id', search_operator, res_ids))
         return res
 
-    @api.onchange('model_id')
-    def _onchange_model(self):
-        if self.model_id:
-            self.image_128 = self.model_id.image
-        else:
-            self.image_128 = False
-
     @api.model
     def create(self, vals):
         res = super(FleetVehicle, self).create(vals)

--- a/addons/fleet/models/fleet_vehicle_model.py
+++ b/addons/fleet/models/fleet_vehicle_model.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import api, fields, models, tools
+from odoo import api, fields, models
 
 
 class FleetVehicleModel(models.Model):
@@ -14,9 +14,7 @@ class FleetVehicleModel(models.Model):
     vendors = fields.Many2many('res.partner', 'fleet_vehicle_model_vendors', 'model_id', 'partner_id', string='Vendors')
     manager_id = fields.Many2one('res.users', 'Fleet Manager', default=lambda self: self.env.uid,
                                  domain=lambda self: [('groups_id', 'in', self.env.ref('fleet.fleet_group_manager').id)])
-    image = fields.Binary(related='brand_id.image', string="Logo", readonly=False)
-    image_128 = fields.Binary(related='brand_id.image_128', string="Logo (medium)", readonly=False)
-    image_64 = fields.Binary(related='brand_id.image_64', string="Logo (small)", readonly=False)
+    image_128 = fields.Image(related='brand_id.image_128', readonly=False)
 
     @api.depends('name', 'brand_id')
     def name_get(self):
@@ -28,13 +26,6 @@ class FleetVehicleModel(models.Model):
             res.append((record.id, name))
         return res
 
-    @api.onchange('brand_id')
-    def _onchange_brand(self):
-        if self.brand_id:
-            self.image_128 = self.brand_id.image
-        else:
-            self.image_128 = False
-
 
 class FleetVehicleModelBrand(models.Model):
     _name = 'fleet.vehicle.model.brand'
@@ -42,23 +33,4 @@ class FleetVehicleModelBrand(models.Model):
     _order = 'name asc'
 
     name = fields.Char('Make', required=True)
-    image = fields.Binary("Logo",
-        help="This field holds the image used as logo for the brand, limited to 1024x1024px.")
-    image_128 = fields.Binary("Medium-sized image",
-        help="Medium-sized logo of the brand. It is automatically "
-             "resized as a 128x128px image, with aspect ratio preserved. "
-             "Use this field in form views or some kanban views.")
-    image_64 = fields.Binary("Small-sized image",
-        help="Small-sized logo of the brand. It is automatically "
-             "resized as a 64x64px image, with aspect ratio preserved. "
-             "Use this field anywhere a small image is required.")
-
-    @api.model_create_multi
-    def create(self, vals_list):
-        for vals in vals_list:
-            tools.image_resize_images(vals)
-        return super(FleetVehicleModelBrand, self).create(vals_list)
-
-    def write(self, vals):
-        tools.image_resize_images(vals)
-        return super(FleetVehicleModelBrand, self).write(vals)
+    image_128 = fields.Image("Logo", max_width=128, max_height=128)
