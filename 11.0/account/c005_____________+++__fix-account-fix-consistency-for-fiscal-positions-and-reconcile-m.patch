PR: https://github.com/odoo/odoo/pull/

From: a78389546b546a796e52126e57a770d982909819
From: qdp-odoo
Date: 2017-05-02 08:12:04

Structural Changes: 9
Total Changes: 32

[FIX] account: fix consistency for fiscal positions and reconcile model with their respective templates.

- Some fields were simply missing on templates, making impossible to give them a value on chart template installation.
- Added a real link between account.reconcile.model.template and its chart template instead of using account_id.chart_template_id
- Added tests for checking the consistency of those objects in the future.

================================= pseudo patch: =================================

--- a/addons/account/models/chart_template.py
+++ b/addons/account/models/chart_template.py
@@ -428,13 +428,29 @@ class AccountChartTemplate(models.Model):
         """
         self.ensure_one()
         account_reconcile_models = self.env['account.reconcile.model.template'].search([
-            ('account_id.chart_template_id', '=', self.id)
+            ('chart_template_id', '=', self.id)
         ])
         for account_reconcile_model in account_reconcile_models:
             vals = self._prepare_reconcile_model_vals(company, account_reconcile_model, acc_template_ref, tax_template_ref)
             self.create_record_with_xmlid(company, account_reconcile_model, 'account.reconcile.model', vals)
         return True
 
+    @api.multi
+    def _get_fp_vals(self, company, position):
+        return {
+            'company_id': company.id,
+            'sequence': position.sequence,
+            'name': position.name,
+            'note': position.note,
+            'auto_apply': position.auto_apply,
+            'vat_required': position.vat_required,
+            'country_id': position.country_id.id,
+            'country_group_id': position.country_group_id.id,
+            'state_ids': position.state_ids and [(6,0, position.state_ids.ids)] or [],
+            'zip_from': position.zip_from,
+            'zip_to': position.zip_to,
+        }
+
     @api.multi
     def generate_fiscal_position(self, tax_template_ref, acc_template_ref, company):
         """ This method generate Fiscal Position, Fiscal Position Accounts and Fiscal Position Taxes from templates.
@@ -448,7 +464,8 @@ class AccountChartTemplate(models.Model):
         self.ensure_one()
         positions = self.env['account.fiscal.position.template'].search([('chart_template_id', '=', self.id)])
         for position in positions:
-            new_fp = self.create_record_with_xmlid(company, position, 'account.fiscal.position', {'company_id': company.id, 'name': position.name, 'note': position.note})
+            fp_vals = self._get_fp_vals(company, position)
+            new_fp = self.create_record_with_xmlid(company, position, 'account.fiscal.position', fp_vals)
             for tax in position.tax_ids:
                 self.create_record_with_xmlid(company, tax, 'account.fiscal.position.tax', {
                     'tax_src_id': tax_template_ref[tax.tax_src_id.id],
@@ -583,11 +600,21 @@ class AccountFiscalPositionTemplate(models.Model):
     _name = 'account.fiscal.position.template'
     _description = 'Template for Fiscal Position'
 
+    sequence = fields.Integer()
     name = fields.Char(string='Fiscal Position Template', required=True)
     chart_template_id = fields.Many2one('account.chart.template', string='Chart Template', required=True)
     account_ids = fields.One2many('account.fiscal.position.account.template', 'position_id', string='Account Mapping')
     tax_ids = fields.One2many('account.fiscal.position.tax.template', 'position_id', string='Tax Mapping')
     note = fields.Text(string='Notes')
+    auto_apply = fields.Boolean(string='Detect Automatically', help="Apply automatically this fiscal position.")
+    vat_required = fields.Boolean(string='VAT required', help="Apply only if partner has a VAT number.")
+    country_id = fields.Many2one('res.country', string='Country',
+        help="Apply only if delivery or invoicing country match.")
+    country_group_id = fields.Many2one('res.country.group', string='Country Group',
+        help="Apply only if delivery or invocing country match the group.")
+    state_ids = fields.Many2many('res.country.state', string='Federal States')
+    zip_from = fields.Integer(string='Zip Range From', default=0)
+    zip_to = fields.Integer(string='Zip Range To', default=0)
 
 
 class AccountFiscalPositionTaxTemplate(models.Model):
@@ -887,6 +914,7 @@ class AccountBankAccountsWizard(models.TransientModel):
 class AccountReconcileModelTemplate(models.Model):
     _name = "account.reconcile.model.template"
 
+    chart_template_id = fields.Many2one('account.chart.template', string='Chart Template', required=True)
     name = fields.Char(string='Button Label', required=True)
     sequence = fields.Integer(required=True, default=10)
     has_second_line = fields.Boolean(string='Add a second line', default=False)
