PR: https://github.com/odoo/odoo/pull/71856

From: 89d72df22b0ee22fb7cfd62b6ad595b00a7971e4
From: nounoubensebia
Date: 2021-07-01 09:37:41

Structural Changes: 10
Total Changes: 61

[IMP] *_event_*: revamp event template form

This commit revamps the event template form to be similar to the event form
itself and removes unnecessary fields, purpose is to give more clarity to the
user.

It also fixes the order of the fields in the event form to be exactly
the same as in the front-end, so that the user don't get confused.

Task-2541208

closes odoo/odoo#71856

Ent-pr: https://github.com/odoo/enterprise/pull/19128
Upg-pr: https://github.com/odoo/upgrade/pull/2516
Related: odoo/enterprise#19128
Related: odoo/upgrade#2516
Signed-off-by: Thibault Delavallee (tde) <tde@openerp.com>

================================= pseudo patch: =================================

--- a/addons/event/models/event_event.py
+++ b/addons/event/models/event_event.py
@@ -6,7 +6,7 @@ import pytz
 
 from odoo import _, api, Command, fields, models
 from odoo.addons.base.models.res_partner import _tz_get
-from odoo.tools import format_datetime
+from odoo.tools import format_datetime, is_html_empty
 from odoo.exceptions import ValidationError
 from odoo.tools.translate import html_translate
 
@@ -25,13 +25,10 @@ class EventType(models.Model):
     _order = 'sequence, id'
 
     name = fields.Char('Event Template', required=True, translate=True)
+    note = fields.Html(string='Note')
     sequence = fields.Integer()
     # tickets
-    use_ticket = fields.Boolean('Ticketing')
-    event_type_ticket_ids = fields.One2many(
-        'event.type.ticket', 'event_type_id',
-        string='Tickets', compute='_compute_event_type_ticket_ids',
-        readonly=False, store=True)
+    event_type_ticket_ids = fields.One2many('event.type.ticket', 'event_type_id', string='Tickets')
     tag_ids = fields.Many2many('event.tag', string="Tags")
     # registration
     has_seats_limitation = fields.Boolean('Limited Seats')
@@ -43,46 +40,10 @@ class EventType(models.Model):
         'Automatically Confirm Registrations', default=True,
         help="Events and registrations will automatically be confirmed "
              "upon creation, easing the flow for simple events.")
-    # location
-    use_timezone = fields.Boolean('Use Default Timezone')
     default_timezone = fields.Selection(
         _tz_get, string='Timezone', default=lambda self: self.env.user.tz or 'UTC')
     # communication
-    use_mail_schedule = fields.Boolean(
-        'Automatically Send Emails', default=True)
-    event_type_mail_ids = fields.One2many(
-        'event.type.mail', 'event_type_id',
-        string='Mail Schedule', compute='_compute_event_type_mail_ids',
-        readonly=False, store=True)
-
-    @api.depends('use_mail_schedule')
-    def _compute_event_type_mail_ids(self):
-        for template in self:
-            if not template.use_mail_schedule:
-                template.event_type_mail_ids = [(5, 0)]
-            elif not template.event_type_mail_ids:
-                template.event_type_mail_ids = [(0, 0, {
-                    'notification_type': 'mail',
-                    'interval_unit': 'now',
-                    'interval_type': 'after_sub',
-                    'template_id': self.env.ref('event.event_subscription').id,
-                }), (0, 0, {
-                    'notification_type': 'mail',
-                    'interval_nbr': 10,
-                    'interval_unit': 'days',
-                    'interval_type': 'before_event',
-                    'template_id': self.env.ref('event.event_reminder').id,
-                })]
-
-    @api.depends('use_ticket')
-    def _compute_event_type_ticket_ids(self):
-        for template in self:
-            if not template.use_ticket:
-                template.event_type_ticket_ids = [(5, 0)]
-            elif not template.event_type_ticket_ids:
-                template.event_type_ticket_ids = [(0, 0, {
-                    'name': _('Registration'),
-                })]
+    event_type_mail_ids = fields.One2many('event.type.mail', 'event_type_id', string='Mail Schedule')
 
     @api.depends('has_seats_limitation')
     def _compute_default_registration(self):
@@ -106,7 +67,7 @@ class EventEvent(models.Model):
         return self.env['ir.ui.view']._render_template('event.event_default_descripton')
 
     name = fields.Char(string='Event', translate=True, required=True)
-    note = fields.Html(string='Note')
+    note = fields.Html(string='Note', store=True, compute="_compute_note", readonly=False)
     description = fields.Html(string='Description', translate=html_translate, sanitize_attributes=False, sanitize_form=False, default=_default_description)
     active = fields.Boolean(default=True)
     user_id = fields.Many2one(
@@ -355,7 +316,7 @@ class EventEvent(models.Model):
     @api.depends('event_type_id')
     def _compute_date_tz(self):
         for event in self:
-            if event.event_type_id.use_timezone and event.event_type_id.default_timezone:
+            if event.event_type_id.default_timezone:
                 event.date_tz = event.event_type_id.default_timezone
             if not event.date_tz:
                 event.date_tz = self.env.user.tz or 'UTC'
@@ -417,7 +378,7 @@ class EventEvent(models.Model):
                 lambda mail: not(mail._origin.mail_done) and not(mail._origin.mail_registration_ids)
             )
             command = [Command.unlink(mail.id) for mail in mails_to_remove]
-            if event.event_type_id.use_mail_schedule:
+            if event.event_type_id.event_type_mail_ids:
                 command += [
                     Command.create({
                         attribute_name: line[attribute_name] if not isinstance(line[attribute_name], models.BaseModel) else line[attribute_name].id
@@ -460,7 +421,7 @@ class EventEvent(models.Model):
             # lines to keep: those with existing registrations
             tickets_to_remove = event.event_ticket_ids.filtered(lambda ticket: not ticket._origin.registration_ids)
             command = [Command.unlink(ticket.id) for ticket in tickets_to_remove]
-            if event.event_type_id.use_ticket:
+            if event.event_type_id.event_type_ticket_ids:
                 command += [
                     Command.create({
                         attribute_name: line[attribute_name] if not isinstance(line[attribute_name], models.BaseModel) else line[attribute_name].id
@@ -469,6 +430,12 @@ class EventEvent(models.Model):
                 ]
             event.event_ticket_ids = command
 
+    @api.depends('event_type_id')
+    def _compute_note(self):
+        for event in self:
+            if event.event_type_id and not is_html_empty(event.event_type_id.note):
+                event.note = event.event_type_id.note
+
     @api.constrains('seats_max', 'seats_available', 'seats_limited')
     def _check_seats_limit(self):
         if any(event.seats_limited and event.seats_max and event.seats_available < 0 for event in self):
