PR: https://github.com/odoo/odoo/pull/160547

From: 2b438810eb69010b5855d0b1353c68a04209763a
From: Audric Onockx (auon)
Date: 2024-04-05 19:15:05

Breaking data model changes score: 3.4000000000000004, change matches:
-    _inherit = 'product.product'
-    _inherit = "project.task"
-    sale_line_id = fields.Many2one(
-    _inherit = 'project.task.recurrence'
+    sale_line_id = fields.Many2one(

Total Changes: 2349

[REF] sale_[timesheet,project]: split model per file

Each of those modules now contains a folder `models`,
which contains one file per odoo model.

closes odoo/odoo#160547

Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale_project/models/__init__.py
+++ b/addons/sale_project/models/__init__.py
@@ -1,10 +1,11 @@
-# -*- coding: utf-8 -*-
-
-from . import account_move
-from . import product
-from . import project
+from . import account_move_line
+from . import product_product
+from . import product_template
 from . import project_milestone
-from . import sale_order
+from . import project_project
+from . import project_task_recurrence
+from . import project_task
+from . import res_config_settings
 from . import sale_order_line
 from . import sale_order_template_line
-from . import res_config_settings
+from . import sale_order

--- a/addons/sale_project/models/account_move.py
+++ b/addons/sale_project/models/account_move_line.py

--- a/None
+++ b/addons/sale_project/models/product_product.py
@@ -0,0 +1,38 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, models
+
+
+class ProductProduct(models.Model):
+    _inherit = 'product.product'
+
+    @api.onchange('service_tracking')
+    def _onchange_service_tracking(self):
+        if self.service_tracking == 'no':
+            self.project_id = False
+            self.project_template_id = False
+        elif self.service_tracking == 'task_global_project':
+            self.project_template_id = False
+        elif self.service_tracking in ['task_in_project', 'project_only']:
+            self.project_id = False
+
+    def _inverse_service_policy(self):
+        for product in self:
+            if product.service_policy:
+
+                product.invoice_policy, product.service_type = self.product_tmpl_id._get_service_to_general(product.service_policy)
+
+    @api.onchange('type')
+    def _onchange_type(self):
+        res = super()._onchange_type()
+        if self.type != 'service':
+            self.service_tracking = 'no'
+        return res
+
+    def write(self, vals):
+        if 'type' in vals and vals['type'] != 'service':
+            vals.update({
+                'service_tracking': 'no',
+                'project_id': False
+            })
+        return super().write(vals)

--- a/addons/sale_project/models/product.py
+++ b/addons/sale_project/models/product_template.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models, _
@@ -167,7 +166,7 @@ class ProductTemplate(models.Model):
 
     @api.onchange('type')
     def _onchange_type(self):
-        res = super(ProductTemplate, self)._onchange_type()
+        res = super()._onchange_type()
         if self.type != 'service':
             self.service_tracking = 'no'
         return res
@@ -178,39 +177,4 @@ class ProductTemplate(models.Model):
                 'service_tracking': 'no',
                 'project_id': False
             })
-        return super(ProductTemplate, self).write(vals)
-
-
-class ProductProduct(models.Model):
-    _inherit = 'product.product'
-
-    @api.onchange('service_tracking')
-    def _onchange_service_tracking(self):
-        if self.service_tracking == 'no':
-            self.project_id = False
-            self.project_template_id = False
-        elif self.service_tracking == 'task_global_project':
-            self.project_template_id = False
-        elif self.service_tracking in ['task_in_project', 'project_only']:
-            self.project_id = False
-
-    def _inverse_service_policy(self):
-        for product in self:
-            if product.service_policy:
-
-                product.invoice_policy, product.service_type = self.product_tmpl_id._get_service_to_general(product.service_policy)
-
-    @api.onchange('type')
-    def _onchange_type(self):
-        res = super(ProductProduct, self)._onchange_type()
-        if self.type != 'service':
-            self.service_tracking = 'no'
-        return res
-
-    def write(self, vals):
-        if 'type' in vals and vals['type'] != 'service':
-            vals.update({
-                'service_tracking': 'no',
-                'project_id': False
-            })
-        return super(ProductProduct, self).write(vals)
+        return super().write(vals)

--- a/addons/sale_project/models/project.py
+++ b/addons/sale_project/models/project_project.py
@@ -1,17 +1,14 @@
-# -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 import json
 from collections import defaultdict
 
 from odoo import api, fields, models, _, _lt
-from odoo.exceptions import ValidationError, AccessError
 from odoo.osv import expression
 from odoo.tools import Query, SQL
 
 
-
-class Project(models.Model):
+class ProjectProject(models.Model):
     _inherit = 'project.project'
 
     allow_billable = fields.Boolean("Billable")
@@ -123,7 +120,7 @@ class Project(models.Model):
             'context': {
                 'show_sale': True,
                 'link_to_project': self.id,
-                'form_view_ref': 'sale_project.sale_order_line_view_form_editable', # Necessary for some logic in the form view
+                'form_view_ref': 'sale_project.sale_order_line_view_form_editable',  # Necessary for some logic in the form view
                 'default_partner_id': self.partner_id.id,
                 'default_company_id': self.company_id.id,
                 'default_order_id': self.sale_order_id.id,
@@ -641,7 +638,7 @@ class Project(models.Model):
         return profitability_items
 
     def _get_stat_buttons(self):
-        buttons = super(Project, self)._get_stat_buttons()
+        buttons = super()._get_stat_buttons()
         if self.env.user.has_group('sales_team.group_sale_salesman_all_leads'):
             self_sudo = self.sudo()
             buttons.append({
@@ -740,195 +737,3 @@ class Project(models.Model):
             action_window['views'] = [[False, 'form']]
             action_window['res_id'] = vendor_bill_ids[0]
         return action_window
-
-
-class ProjectTask(models.Model):
-    _inherit = "project.task"
-
-    sale_order_id = fields.Many2one('sale.order', 'Sales Order', compute='_compute_sale_order_id', store=True, help="Sales order to which the task is linked.", group_expand="_group_expand_sales_order")
-    sale_line_id = fields.Many2one(
-        'sale.order.line', 'Sales Order Item',
-        copy=True, tracking=True, index='btree_not_null', recursive=True,
-        compute='_compute_sale_line', store=True, readonly=False,
-        domain="""[
-            '|', ('order_partner_id.commercial_partner_id.id', 'parent_of', partner_id if partner_id else []),
-                 ('order_partner_id', '=?', partner_id),
-            ('is_service', '=', True), ('is_expense', '=', False), ('state', '=', 'sale'), ('is_downpayment', '=', False),
-        ]""",
-        help="Sales Order Item to which the time spent on this task will be added in order to be invoiced to your customer.\n"
-             "By default the sales order item set on the project will be selected. In the absence of one, the last prepaid sales order item that has time remaining will be used.\n"
-             "Remove the sales order item in order to make this task non billable. You can also change or remove the sales order item of each timesheet entry individually.")
-    project_sale_order_id = fields.Many2one('sale.order', string="Project's sale order", related='project_id.sale_order_id')
-    sale_order_state = fields.Selection(related='sale_order_id.state')
-    task_to_invoice = fields.Boolean("To invoice", compute='_compute_task_to_invoice', search='_search_task_to_invoice', groups='sales_team.group_sale_salesman_all_leads')
-    allow_billable = fields.Boolean(related="project_id.allow_billable")
-    partner_id = fields.Many2one(inverse='_inverse_partner_id')
-
-    # Project sharing  fields
-    display_sale_order_button = fields.Boolean(string='Display Sales Order', compute='_compute_display_sale_order_button')
-
-    @property
-    def SELF_READABLE_FIELDS(self):
-        return super().SELF_READABLE_FIELDS | {'allow_billable', 'sale_order_id', 'sale_line_id', 'display_sale_order_button'}
-
-    @api.model
-    def _group_expand_sales_order(self, sales_orders, domain):
-        start_date = self._context.get('gantt_start_date')
-        scale = self._context.get('gantt_scale')
-        if not (start_date and scale):
-            return sales_orders
-        search_on_comodel = self._search_on_comodel(domain, "sale_order_id", "sale.order")
-        if search_on_comodel:
-            return search_on_comodel
-        return sales_orders
-
-    @api.depends('sale_line_id', 'project_id', 'allow_billable')
-    def _compute_sale_order_id(self):
-        for task in self:
-            if not task.allow_billable:
-                task.sale_order_id = False
-                continue
-            sale_order_id = task.sale_order_id or self.env["sale.order"]
-            if task.sale_line_id:
-                sale_order_id = task.sale_line_id.sudo().order_id
-            elif task.project_id.sale_order_id:
-                sale_order_id = task.project_id.sale_order_id
-                consistent_partners = [sale_order_id.partner_id.commercial_partner_id, sale_order_id.partner_shipping_id.commercial_partner_id]
-                if task.partner_id and task.partner_id not in consistent_partners:
-                    sale_order_id = self.env["sale.order"]
-            if sale_order_id and not task.partner_id:
-                task.partner_id = sale_order_id.partner_id
-            task.sale_order_id = sale_order_id
-
-    @api.depends('allow_billable')
-    def _compute_partner_id(self):
-        billable_task = self.filtered(lambda t: t.allow_billable or (not self._origin and t.parent_id.allow_billable))
-        (self - billable_task).partner_id = False
-        super(ProjectTask, billable_task)._compute_partner_id()
-
-    def _inverse_partner_id(self):
-        for task in self:
-            # check that sale_line_id/sale_order_id and customer are consistent
-            consistent_partners = [task.sale_order_id.partner_id.commercial_partner_id, task.sale_order_id.partner_shipping_id.commercial_partner_id]
-            if task.sale_order_id and task.partner_id.commercial_partner_id not in consistent_partners:
-                task.sale_order_id = task.sale_line_id = False
-
-    @api.depends('sale_line_id.order_partner_id', 'parent_id.sale_line_id', 'project_id.sale_line_id', 'milestone_id.sale_line_id', 'allow_billable')
-    def _compute_sale_line(self):
-        for task in self:
-            if not (task.allow_billable or task.parent_id.allow_billable):
-                task.sale_line_id = False
-                continue
-            if not task.sale_line_id:
-                # if the project_id is set then it means the task is classic task or a subtask with another project than its parent.
-                # To determine the sale_line_id, we first need to look at the parent before the project to manage the case of subtasks.
-                # Two sub-tasks in the same project do not necessarily have the same sale_line_id (need to look at the parent task).
-                sale_line = False
-                if task.parent_id.sale_line_id and task.parent_id.partner_id.commercial_partner_id == task.partner_id.commercial_partner_id:
-                    sale_line = task.parent_id.sale_line_id
-                elif task.project_id.sale_line_id and task.project_id.partner_id.commercial_partner_id == task.partner_id.commercial_partner_id:
-                    sale_line = task.project_id.sale_line_id
-                task.sale_line_id = sale_line or task.milestone_id.sale_line_id
-
-    @api.depends('sale_order_id')
-    def _compute_display_sale_order_button(self):
-        if not self.sale_order_id:
-            self.display_sale_order_button = False
-            return
-        try:
-            sale_orders = self.env['sale.order'].search([('id', 'in', self.sale_order_id.ids)])
-            for task in self:
-                task.display_sale_order_button = task.sale_order_id in sale_orders
-        except AccessError:
-            self.display_sale_order_button = False
-
-    @api.constrains('sale_line_id')
-    def _check_sale_line_type(self):
-        for task in self.sudo():
-            if task.sale_line_id:
-                if not task.sale_line_id.is_service or task.sale_line_id.is_expense:
-                    raise ValidationError(_(
-                        'You cannot link the order item %(order_id)s - %(product_id)s to this task because it is a re-invoiced expense.',
-                        order_id=task.sale_line_id.order_id.name,
-                        product_id=task.sale_line_id.product_id.display_name,
-                    ))
-
-    # ---------------------------------------------------
-    # Actions
-    # ---------------------------------------------------
-
-    def _get_action_view_so_ids(self):
-        return self.sale_order_id.ids
-
-    def action_view_so(self):
-        so_ids = self._get_action_view_so_ids()
-        action_window = {
-            "type": "ir.actions.act_window",
-            "res_model": "sale.order",
-            "name": _("Sales Order"),
-            "views": [[False, "tree"], [False, "kanban"], [False, "form"]],
-            "context": {"create": False, "show_sale": True},
-            "domain": [["id", "in", so_ids]],
-        }
-        if len(so_ids) == 1:
-            action_window["views"] = [[False, "form"]]
-            action_window["res_id"] = so_ids[0]
-
-        return action_window
-
-    def action_project_sharing_view_so(self):
-        self.ensure_one()
-        if not self.display_sale_order_button:
-            return {}
-        return {
-            "name": "Portal Sale Order",
-            "type": "ir.actions.act_url",
-            "url": self.sale_order_id.access_url,
-        }
-
-    def _rating_get_partner(self):
-        partner = self.partner_id or self.sale_line_id.order_id.partner_id
-        return partner or super()._rating_get_partner()
-
-    @api.depends('sale_order_id.invoice_status', 'sale_order_id.order_line')
-    def _compute_task_to_invoice(self):
-        for task in self:
-            if task.sale_order_id:
-                task.task_to_invoice = bool(task.sale_order_id.invoice_status not in ('no', 'invoiced'))
-            else:
-                task.task_to_invoice = False
-
-    @api.model
-    def _search_task_to_invoice(self, operator, value):
-        query = """
-            SELECT so.id
-            FROM sale_order so
-            WHERE so.invoice_status != 'invoiced'
-                AND so.invoice_status != 'no'
-        """
-        operator_new = 'inselect'
-        if(bool(operator == '=') ^ bool(value)):
-            operator_new = 'not inselect'
-        return [('sale_order_id', operator_new, (query, ()))]
-
-    @api.onchange('sale_line_id')
-    def _onchange_partner_id(self):
-        if not self.partner_id and self.sale_line_id:
-            self.partner_id = self.sale_line_id.order_partner_id
-
-    def _get_projects_to_make_billable_domain(self, additional_domain=None):
-        return expression.AND([
-            super()._get_projects_to_make_billable_domain(additional_domain),
-            [
-                ('partner_id', '!=', False),
-                ('allow_billable', '=', False),
-                ('project_id', '!=', False),
-            ],
-        ])
-
-class ProjectTaskRecurrence(models.Model):
-    _inherit = 'project.task.recurrence'
-
-    @api.model
-    def _get_recurring_fields_to_copy(self):
-        return super(ProjectTaskRecurrence, self)._get_recurring_fields_to_copy() + ['sale_line_id']

--- a/None
+++ b/addons/sale_project/models/project_task.py
@@ -0,0 +1,190 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, fields, models, _
+from odoo.exceptions import ValidationError, AccessError
+from odoo.osv import expression
+
+
+class ProjectTask(models.Model):
+    _inherit = "project.task"
+
+    sale_order_id = fields.Many2one('sale.order', 'Sales Order', compute='_compute_sale_order_id', store=True, help="Sales order to which the task is linked.", group_expand="_group_expand_sales_order")
+    sale_line_id = fields.Many2one(
+        'sale.order.line', 'Sales Order Item',
+        copy=True, tracking=True, index='btree_not_null', recursive=True,
+        compute='_compute_sale_line', store=True, readonly=False,
+        domain="""[
+            '|', ('order_partner_id.commercial_partner_id.id', 'parent_of', partner_id if partner_id else []),
+                 ('order_partner_id', '=?', partner_id),
+            ('is_service', '=', True), ('is_expense', '=', False), ('state', '=', 'sale'), ('is_downpayment', '=', False),
+        ]""",
+        help="Sales Order Item to which the time spent on this task will be added in order to be invoiced to your customer.\n"
+             "By default the sales order item set on the project will be selected. In the absence of one, the last prepaid sales order item that has time remaining will be used.\n"
+             "Remove the sales order item in order to make this task non billable. You can also change or remove the sales order item of each timesheet entry individually.")
+    project_sale_order_id = fields.Many2one('sale.order', string="Project's sale order", related='project_id.sale_order_id')
+    sale_order_state = fields.Selection(related='sale_order_id.state')
+    task_to_invoice = fields.Boolean("To invoice", compute='_compute_task_to_invoice', search='_search_task_to_invoice', groups='sales_team.group_sale_salesman_all_leads')
+    allow_billable = fields.Boolean(related="project_id.allow_billable")
+    partner_id = fields.Many2one(inverse='_inverse_partner_id')
+
+    # Project sharing  fields
+    display_sale_order_button = fields.Boolean(string='Display Sales Order', compute='_compute_display_sale_order_button')
+
+    @property
+    def SELF_READABLE_FIELDS(self):
+        return super().SELF_READABLE_FIELDS | {'allow_billable', 'sale_order_id', 'sale_line_id', 'display_sale_order_button'}
+
+    @api.model
+    def _group_expand_sales_order(self, sales_orders, domain):
+        start_date = self._context.get('gantt_start_date')
+        scale = self._context.get('gantt_scale')
+        if not (start_date and scale):
+            return sales_orders
+        search_on_comodel = self._search_on_comodel(domain, "sale_order_id", "sale.order")
+        if search_on_comodel:
+            return search_on_comodel
+        return sales_orders
+
+    @api.depends('sale_line_id', 'project_id', 'allow_billable')
+    def _compute_sale_order_id(self):
+        for task in self:
+            if not task.allow_billable:
+                task.sale_order_id = False
+                continue
+            sale_order_id = task.sale_order_id or self.env["sale.order"]
+            if task.sale_line_id:
+                sale_order_id = task.sale_line_id.sudo().order_id
+            elif task.project_id.sale_order_id:
+                sale_order_id = task.project_id.sale_order_id
+                consistent_partners = [sale_order_id.partner_id.commercial_partner_id, sale_order_id.partner_shipping_id.commercial_partner_id]
+                if task.partner_id and task.partner_id not in consistent_partners:
+                    sale_order_id = self.env["sale.order"]
+            if sale_order_id and not task.partner_id:
+                task.partner_id = sale_order_id.partner_id
+            task.sale_order_id = sale_order_id
+
+    @api.depends('allow_billable')
+    def _compute_partner_id(self):
+        billable_task = self.filtered(lambda t: t.allow_billable or (not self._origin and t.parent_id.allow_billable))
+        (self - billable_task).partner_id = False
+        super(ProjectTask, billable_task)._compute_partner_id()
+
+    def _inverse_partner_id(self):
+        for task in self:
+            # check that sale_line_id/sale_order_id and customer are consistent
+            consistent_partners = [task.sale_order_id.partner_id.commercial_partner_id, task.sale_order_id.partner_shipping_id.commercial_partner_id]
+            if task.sale_order_id and task.partner_id.commercial_partner_id not in consistent_partners:
+                task.sale_order_id = task.sale_line_id = False
+
+    @api.depends('sale_line_id.order_partner_id', 'parent_id.sale_line_id', 'project_id.sale_line_id', 'milestone_id.sale_line_id', 'allow_billable')
+    def _compute_sale_line(self):
+        for task in self:
+            if not (task.allow_billable or task.parent_id.allow_billable):
+                task.sale_line_id = False
+                continue
+            if not task.sale_line_id:
+                # if the project_id is set then it means the task is classic task or a subtask with another project than its parent.
+                # To determine the sale_line_id, we first need to look at the parent before the project to manage the case of subtasks.
+                # Two sub-tasks in the same project do not necessarily have the same sale_line_id (need to look at the parent task).
+                sale_line = False
+                if task.parent_id.sale_line_id and task.parent_id.partner_id.commercial_partner_id == task.partner_id.commercial_partner_id:
+                    sale_line = task.parent_id.sale_line_id
+                elif task.project_id.sale_line_id and task.project_id.partner_id.commercial_partner_id == task.partner_id.commercial_partner_id:
+                    sale_line = task.project_id.sale_line_id
+                task.sale_line_id = sale_line or task.milestone_id.sale_line_id
+
+    @api.depends('sale_order_id')
+    def _compute_display_sale_order_button(self):
+        if not self.sale_order_id:
+            self.display_sale_order_button = False
+            return
+        try:
+            sale_orders = self.env['sale.order'].search([('id', 'in', self.sale_order_id.ids)])
+            for task in self:
+                task.display_sale_order_button = task.sale_order_id in sale_orders
+        except AccessError:
+            self.display_sale_order_button = False
+
+    @api.constrains('sale_line_id')
+    def _check_sale_line_type(self):
+        for task in self.sudo():
+            if task.sale_line_id:
+                if not task.sale_line_id.is_service or task.sale_line_id.is_expense:
+                    raise ValidationError(_(
+                        'You cannot link the order item %(order_id)s - %(product_id)s to this task because it is a re-invoiced expense.',
+                        order_id=task.sale_line_id.order_id.name,
+                        product_id=task.sale_line_id.product_id.display_name,
+                    ))
+
+    # ---------------------------------------------------
+    # Actions
+    # ---------------------------------------------------
+
+    def _get_action_view_so_ids(self):
+        return self.sale_order_id.ids
+
+    def action_view_so(self):
+        so_ids = self._get_action_view_so_ids()
+        action_window = {
+            "type": "ir.actions.act_window",
+            "res_model": "sale.order",
+            "name": _("Sales Order"),
+            "views": [[False, "tree"], [False, "kanban"], [False, "form"]],
+            "context": {"create": False, "show_sale": True},
+            "domain": [["id", "in", so_ids]],
+        }
+        if len(so_ids) == 1:
+            action_window["views"] = [[False, "form"]]
+            action_window["res_id"] = so_ids[0]
+
+        return action_window
+
+    def action_project_sharing_view_so(self):
+        self.ensure_one()
+        if not self.display_sale_order_button:
+            return {}
+        return {
+            "name": "Portal Sale Order",
+            "type": "ir.actions.act_url",
+            "url": self.sale_order_id.access_url,
+        }
+
+    def _rating_get_partner(self):
+        partner = self.partner_id or self.sale_line_id.order_id.partner_id
+        return partner or super()._rating_get_partner()
+
+    @api.depends('sale_order_id.invoice_status', 'sale_order_id.order_line')
+    def _compute_task_to_invoice(self):
+        for task in self:
+            if task.sale_order_id:
+                task.task_to_invoice = bool(task.sale_order_id.invoice_status not in ('no', 'invoiced'))
+            else:
+                task.task_to_invoice = False
+
+    @api.model
+    def _search_task_to_invoice(self, operator, value):
+        query = """
+            SELECT so.id
+            FROM sale_order so
+            WHERE so.invoice_status != 'invoiced'
+                AND so.invoice_status != 'no'
+        """
+        operator_new = 'inselect'
+        if (bool(operator == '=') ^ bool(value)):
+            operator_new = 'not inselect'
+        return [('sale_order_id', operator_new, (query, ()))]
+
+    @api.onchange('sale_line_id')
+    def _onchange_partner_id(self):
+        if not self.partner_id and self.sale_line_id:
+            self.partner_id = self.sale_line_id.order_partner_id
+
+    def _get_projects_to_make_billable_domain(self, additional_domain=None):
+        return expression.AND([
+            super()._get_projects_to_make_billable_domain(additional_domain),
+            [
+                ('partner_id', '!=', False),
+                ('allow_billable', '=', False),
+                ('project_id', '!=', False),
+            ],
+        ])

--- a/None
+++ b/addons/sale_project/models/project_task_recurrence.py
@@ -0,0 +1,11 @@
+# Part of Odoo. See LICENSE file for full copyright and licensing details.
+
+from odoo import api, models
+
+
+class ProjectTaskRecurrence(models.Model):
+    _inherit = 'project.task.recurrence'
+
+    @api.model
+    def _get_recurring_fields_to_copy(self):
+        return super()._get_recurring_fields_to_copy() + ['sale_line_id']
