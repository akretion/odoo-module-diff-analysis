PR: https://github.com/odoo/odoo/pull/106658

From: 0ea4c3110a76d2b7f46aa1fd6b7976624dbb07d7
From: Thibault Delavall√©e
Date: 2022-11-28 14:52:58

Structural Changes: 1
Total Changes: 49

[MOV] account, mail: properly locate attachments management on model

PURPOSE

Purpose of this task is to cleanup attachment management done in generic mail
models overrides and move it in account as model overrides.

SPECIFICATIONS

Accounting holds code to handle attachments linked to their custom composer
(``account.invoice.send``) that uses through inheritance the mail composer
(``mail.compose.message``) that has a specific processing of attachments
to link pending composer attachments to the right records.

Indeed attachments linked to the composer are pending attachments, and are
linked to the record when posting the message. This allows to know which
attachments have been added by the user, have specific rules for access
rights, ...

However this code has been wrongly added directly at mixing level at
odoo/odoo@bdcc0120048c38971ed723e12bccd0defca806c6. Instead ``_message_post_process_attachments`` method
should always be called based on a record, allowing to locate the override
at model level.

Task-2792146 (Mail: Move model-dependent code from composer / template)
Task-2710804 (Mail: Clean MailThread API)

Part-of: odoo/odoo#106658

================================= pseudo patch: =================================

--- a/addons/account/models/__init__.py
+++ b/addons/account/models/__init__.py
@@ -33,5 +33,4 @@ from . import digest
 from . import res_users
 from . import ir_actions_report
 from . import res_currency
-from . import mail_thread
 from . import account_report

--- a/addons/account/models/account_move.py
+++ b/addons/account/models/account_move.py
@@ -3998,6 +3998,24 @@ class AccountMove(models.Model):
         render_context['subtitles'] = subtitles
         return render_context
 
+    def _message_post_process_attachments(self, attachments, attachment_ids, message_values):
+        """ This method extension ensures that, when using the "Send & Print" feature
+        if the user adds an attachment, the latter will be linked to the record. """
+        self.ensure_one()
+        message_values['model'] = self._name
+        message_values['res_id'] = self.id
+
+        if attachment_ids:
+            # taking advantage of cache looks better in this case, to check
+            filtered_attachment_ids = self.env['ir.attachment'].sudo().browse(attachment_ids).filtered(
+                lambda a: a.res_model == 'account.invoice.send' and a.create_uid.id == self._uid)
+            # link account.invoice.send attachments to mail.compose.message, so that it is then
+            # updated with respect to access rights records in base method
+            if filtered_attachment_ids:
+                filtered_attachment_ids.res_model = 'mail.compose.message'
+
+        return super()._message_post_process_attachments(attachments, attachment_ids, message_values)
+
     # -------------------------------------------------------------------------
     # HOOKS
     # -------------------------------------------------------------------------

--- a/addons/account/models/mail_thread.py
+++ b/None
@@ -1,30 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import models
-
-class MailThread(models.AbstractModel):
-    _inherit = 'mail.thread'
-
-    def _message_post_process_attachments(self, attachments, attachment_ids, message_values):
-        """ This method extension ensures that, when using the "Send & Print" feature, if the user
-        adds an attachment, the latter will be linked to the record.
-
-        # Task-2792146: will move to model-based method
-        """
-        record = self.env.context.get('attached_to')
-        # link mail.compose.message attachments to attached_to
-        if record and record._name == 'account.move':
-            message_values['model'] = record._name
-            message_values['res_id'] = record.id
-        res = super()._message_post_process_attachments(attachments, attachment_ids, message_values)
-        # link account.invoice.send attachments to attached_to
-        model = message_values['model']
-        res_id = message_values['res_id']
-        att_ids = [att[1] for att in res.get('attachment_ids') or []]
-        if att_ids and model == 'account.move':
-            filtered_attachment_ids = self.env['ir.attachment'].sudo().browse(att_ids).filtered(
-                lambda a: a.res_model in ('account.invoice.send',) and a.create_uid.id == self._uid)
-            if filtered_attachment_ids:
-                filtered_attachment_ids.write({'res_model': model, 'res_id': res_id})
-        return res
