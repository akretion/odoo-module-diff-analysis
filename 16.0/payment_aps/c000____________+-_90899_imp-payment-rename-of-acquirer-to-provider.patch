PR: https://github.com/odoo/odoo/pull/90899

From: f7b8f07501315233c8208e99b311935815039a3a
From: Horacio Tellez
Date: 2022-09-09 11:38:08

Structural Changes: 4
Total Changes: 176

[IMP] payment: rename of acquirer to provider

Changing the name of model payment.acquirer to payment.provider
and everything that it touches. It is technically incorrect to
use the term "acquirer" for systems that only provide a service
of payment.
After this commit the model payment.acquirer and all related to
it will be renamed to payment.provider.

Task - 2842088

closes odoo/odoo#90899

Related: odoo/upgrade#3542
Related: odoo/documentation#1981
Related: odoo/enterprise#27131
Signed-off-by: Victor Feyens (vfe) <vfe@odoo.com>

================================= pseudo patch: =================================

--- a/addons/payment_aps/models/__init__.py
+++ b/addons/payment_aps/models/__init__.py
@@ -1,4 +1,4 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import payment_acquirer
+from . import payment_provider
 from . import payment_transaction

--- a/addons/payment_aps/models/payment_acquirer.py
+++ b/addons/payment_aps/models/payment_provider.py
@@ -9,15 +9,15 @@ from odoo import fields, models
 _logger = logging.getLogger(__name__)
 
 
-class PaymentAcquirer(models.Model):
-    _inherit = 'payment.acquirer'
+class PaymentProvider(models.Model):
+    _inherit = 'payment.provider'
 
-    provider = fields.Selection(
+    code = fields.Selection(
         selection_add=[('aps', "Amazon Payment Services")], ondelete={'aps': 'set default'}
     )
     aps_merchant_identifier = fields.Char(
         string="APS Merchant Identifier",
-        help="The code of the merchant account to use with this acquirer.",
+        help="The code of the merchant account to use with this provider.",
         required_if_provider='aps',
     )
     aps_access_code = fields.Char(

--- a/addons/payment_aps/models/payment_transaction.py
+++ b/addons/payment_aps/models/payment_transaction.py
@@ -19,7 +19,7 @@ class PaymentTransaction(models.Model):
     _inherit = 'payment.transaction'
 
     @api.model
-    def _compute_reference(self, provider, prefix=None, separator='-', **kwargs):
+    def _compute_reference(self, provider_code, prefix=None, separator='-', **kwargs):
         """ Override of `payment` to ensure that APS' requirements for references are satisfied.
 
         APS' requirements for transaction are as follows:
@@ -28,16 +28,16 @@ class PaymentTransaction(models.Model):
           generated based on document names that may contain non-allowed characters
           (eg: INV/2020/...).
 
-        :param str provider: The provider of the acquirer handling the transaction.
+        :param str provider_code: The code of the provider handling the transaction.
         :param str prefix: The custom prefix used to compute the full reference.
         :param str separator: The custom separator used to separate the prefix from the suffix.
         :return: The unique reference for the transaction.
         :rtype: str
         """
-        if provider == 'aps':
+        if provider_code == 'aps':
             prefix = payment_utils.singularize_reference_prefix()
 
-        return super()._compute_reference(provider, prefix=prefix, separator=separator, **kwargs)
+        return super()._compute_reference(provider_code, prefix=prefix, separator=separator, **kwargs)
 
     def _get_specific_rendering_values(self, processing_values):
         """ Override of `payment` to return APS-specific processing values.
@@ -45,19 +45,19 @@ class PaymentTransaction(models.Model):
         Note: self.ensure_one() from `_get_processing_values`
 
         :param dict processing_values: The generic processing values of the transaction.
-        :return: The dict of acquirer-specific processing values.
+        :return: The dict of provider-specific processing values.
         :rtype: dict
         """
         res = super()._get_specific_rendering_values(processing_values)
-        if self.provider != 'aps':
+        if self.provider_code != 'aps':
             return res
 
         converted_amount = payment_utils.to_minor_currency_units(self.amount, self.currency_id)
-        base_url = self.acquirer_id.get_base_url()
+        base_url = self.provider_id.get_base_url()
         rendering_values = {
             'command': 'PURCHASE',
-            'access_code': self.acquirer_id.aps_access_code,
-            'merchant_identifier': self.acquirer_id.aps_merchant_identifier,
+            'access_code': self.provider_id.aps_access_code,
+            'merchant_identifier': self.provider_id.aps_merchant_identifier,
             'merchant_reference': self.reference,
             'amount': str(converted_amount),
             'currency': self.currency_id.name,
@@ -66,25 +66,25 @@ class PaymentTransaction(models.Model):
             'return_url': urls.url_join(base_url, APSController._return_url),
         }
         rendering_values.update({
-            'signature': self.acquirer_id._aps_calculate_signature(
+            'signature': self.provider_id._aps_calculate_signature(
                 rendering_values, incoming=False
             ),
-            'api_url': self.acquirer_id._aps_get_api_url(),
+            'api_url': self.provider_id._aps_get_api_url(),
         })
         return rendering_values
 
-    def _get_tx_from_notification_data(self, provider, notification_data):
+    def _get_tx_from_notification_data(self, provider_code, notification_data):
         """ Override of `payment` to find the transaction based on APS data.
 
-        :param str provider: The provider of the acquirer that handled the transaction.
+        :param str provider_code: The code of the provider that handled the transaction.
         :param dict notification_data: The notification data sent by the provider.
         :return: The transaction if found.
         :rtype: recordset of `payment.transaction`
         :raise ValidationError: If inconsistent data are received.
         :raise ValidationError: If the data match no transaction.
         """
-        tx = super()._get_tx_from_notification_data(provider, notification_data)
-        if provider != 'aps' or len(tx) == 1:
+        tx = super()._get_tx_from_notification_data(provider_code, notification_data)
+        if provider_code != 'aps' or len(tx) == 1:
             return tx
 
         reference = notification_data.get('merchant_reference')
@@ -93,7 +93,7 @@ class PaymentTransaction(models.Model):
                 "APS: " + _("Received data with missing reference %(ref)s.", ref=reference)
             )
 
-        tx = self.search([('reference', '=', reference), ('provider', '=', 'aps')])
+        tx = self.search([('reference', '=', reference), ('provider_code', '=', 'aps')])
         if not tx:
             raise ValidationError(
                 "APS: " + _("No transaction found matching reference %s.", reference)
@@ -111,10 +111,10 @@ class PaymentTransaction(models.Model):
         :raise ValidationError: If inconsistent data are received.
         """
         super()._process_notification_data(notification_data)
-        if self.provider != 'aps':
+        if self.provider_code != 'aps':
             return
 
-        self.acquirer_reference = notification_data.get('fort_id')
+        self.provider_reference = notification_data.get('fort_id')
 
         status = notification_data.get('status')
         if not status:
