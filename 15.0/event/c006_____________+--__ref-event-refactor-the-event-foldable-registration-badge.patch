PR: https://github.com/odoo/odoo/pull/

From: 1b66782dcae6f261f922c56c409b12af29b5d26f
From: Aur√©lien Warnon
Date: 2021-07-30 09:02:52

Structural Changes: 8
Total Changes: 20

[REF] event_*: refactor the event foldable registration badge

PURPOSE

The event foldable badge is currently not very user-friendly in terms of usage
and style.
This commit aims to re-work it visually as well as getting rid of multiple
technical flows (unnecessary fields / no studio anchors / ...).

SPECS

Preliminary cleaning : Unify both foldable badge templates into one.

The "event badges" report can be printed from 2 different sources, from the
event.event itself as a preview and from the event.registration as an actual
badge for a specific attendee.

The implementation was done using two different templates, leading to a lot of
duplicated code and potential issues when editing one template that would not
modify the other accordingly.

This commit unifies both templates into one.
When the report is printed from the event as a "preview", we simply check that
the attendee variable is missing and print placeholders instead.

Main changes : Rework the whole foldable badge template

1. Get rid of unnecessary fields

The foldable badge template used several fields on the event.event model itself
that would allow customizing the report per event.
However, there were actually no way for the user to access and edit those
fields, as they are not part of any views.

We therefore removed them (badge_front, badge_back, badge_innerleft,
badge_innerright, event_logo).

And instead offer a single new field (ticket_extra_instructions), available on
the form view of the event, that allows to easily customize the foldable badge
and adding instructions specific to this event (how to come / what to bring /
...).

2. Visual changes

The report was re-worked to make it look a bit more recent, as the previous
look was very basic and was not very attractive.

This was done using a specific scss file that allows defining rules without
bloating the template with long style attributes.

In addition, we added some pictures that help the attendee understanding how to
correctly fold the printed A4 sheet into a badge and slide it into the holder.

All the information that were previously on the report should still be there.

3. Relocate action from website_event to event

As a bonus, we moved the reporting action from website_event to event, in order
to have everything that is related to this foldable badge in the same module.

Side note: scss disclaimer

As the reporting engine does not allow complex class/rules building, we had to
implement this nice layout using very well placed background-image and
"pixel perfect" sized elements.

You will see a lot of hardcoded numbers, mainly on heights, but it can't be
helped.

LINKS

ENT PR odoo/enterprise#19349
UPG PR odoo/upgrade#2599
Task-26779

================================= pseudo patch: =================================

--- a/addons/event/models/event_event.py
+++ b/addons/event/models/event_event.py
@@ -44,6 +44,9 @@ class EventType(models.Model):
         _tz_get, string='Timezone', default=lambda self: self.env.user.tz or 'UTC')
     # communication
     event_type_mail_ids = fields.One2many('event.type.mail', 'event_type_id', string='Mail Schedule')
+    # ticket reports
+    ticket_instructions = fields.Html('Ticket Instructions', translate=True,
+        help="This information will be printed on your tickets.")
 
     @api.depends('has_seats_limitation')
     def _compute_default_registration(self):
@@ -162,12 +165,10 @@ class EventEvent(models.Model):
         tracking=True, domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
     country_id = fields.Many2one(
         'res.country', 'Country', related='address_id.country_id', readonly=False, store=True)
-    # badge fields
-    badge_front = fields.Html(string='Badge Front')
-    badge_back = fields.Html(string='Badge Back')
-    badge_innerleft = fields.Html(string='Badge Inner Left')
-    badge_innerright = fields.Html(string='Badge Inner Right')
-    event_logo = fields.Html(string='Event Logo')
+    # ticket reports
+    ticket_instructions = fields.Html('Ticket Instructions', translate=True,
+        compute='_compute_ticket_instructions', store=True, readonly=False,
+        help="This information will be printed on your tickets.")
 
     @api.depends('stage_id', 'kanban_state')
     def _compute_kanban_state_label(self):
@@ -434,6 +435,13 @@ class EventEvent(models.Model):
             if event.event_type_id and not is_html_empty(event.event_type_id.note):
                 event.note = event.event_type_id.note
 
+    @api.depends('event_type_id')
+    def _compute_ticket_instructions(self):
+        for event in self:
+            if is_html_empty(event.ticket_instructions) and not \
+               is_html_empty(event.event_type_id.ticket_instructions):
+                event.ticket_instructions = event.event_type_id.ticket_instructions
+
     @api.constrains('seats_max', 'seats_available', 'seats_limited')
     def _check_seats_limit(self):
         if any(event.seats_limited and event.seats_max and event.seats_available < 0 for event in self):
