PR: https://github.com/odoo/odoo/pull/144608

From: 0257fcb9cfef5bac3c267f2e85cdc04d3701c4f1
From: Pieter Claeys (clpi)
Date: 2024-07-11 12:17:04

Breaking data model changes score: 16.6, change matches:
-    is_downpayment = fields.Boolean()
-    _inherit = ['portal.mixin', 'product.catalog.mixin', 'mail.thread', 'mail.activity.mixin', 'utm.mixin']
-    name = fields.Char(
-    company_id = fields.Many2one(
-    amount_untaxed = fields.Monetary(string="Untaxed Amount", store=True, compute='_compute_amounts', tracking=5)
-    amount_tax = fields.Monetary(string="Taxes", store=True, compute='_compute_amounts')
-    amount_total = fields.Monetary(string="Total", store=True, compute='_compute_amounts', tracking=4)
-    amount_to_invoice = fields.Monetary(string="Amount to invoice", store=True, compute='_compute_amount_to_invoice')
-    amount_invoiced = fields.Monetary(string="Already invoiced", compute='_compute_amount_invoiced')
+    amount_untaxed = fields.Monetary(tracking=5)
+    amount_total = fields.Monetary(tracking=4)
+    amount_to_invoice = fields.Monetary(store=True)
-    _inherit = 'analytic.mixin'
-    currency_id = fields.Many2one(
-    display_type = fields.Selection(
-    is_downpayment = fields.Boolean(
-    name = fields.Text(
-    price_unit = fields.Float(
-    discount = fields.Float(
+    price_unit = fields.Float(compute='_compute_price_unit', store=True, precompute=True)
-    price_tax = fields.Float(
-    price_total = fields.Monetary(
-    qty_to_invoice = fields.Float(

Total Changes: 484

[IMP] purchase, account, sale: add account.order(.line).mixin

A lot of behavior is shared between the sale order (line) and purchase
order (line). To avoid having to maintain this code in parallel and
allow for sharing of the overlapping code, we introduce two new mixins:
1. account.order.mixin, for sale.order and purchase.order
2. account.order.line.mixin, for sale.order.line and purchase.order.line

Additionally, this PR adds the option to create down payments for
purchase orders by moving the existing functionality from sale orders
into the newly created mixins. This new function is disabled by default
for purchase, but can be turned on with a new checkbox in the settings.

task-3600910

Part-of: odoo/odoo#144608
Related: odoo/enterprise#55711
Related: odoo/upgrade#5627
Signed-off-by: Tiffany Chang (tic) <tic@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale/models/account_move.py
+++ b/addons/sale/models/account_move.py
@@ -2,7 +2,6 @@
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
 from odoo import api, fields, models, _
-from odoo.exceptions import UserError
 
 
 class AccountMove(models.Model):
@@ -25,13 +24,6 @@ class AccountMove(models.Model):
     source_id = fields.Many2one(ondelete='set null')
     sale_order_count = fields.Integer(compute="_compute_origin_so_count", string='Sale Order Count')
 
-    def unlink(self):
-        downpayment_lines = self.mapped('line_ids.sale_line_ids').filtered(lambda line: line.is_downpayment and line.invoice_lines <= self.mapped('line_ids'))
-        res = super(AccountMove, self).unlink()
-        if downpayment_lines:
-            downpayment_lines.unlink()
-        return res
-
     @api.depends('invoice_user_id')
     def _compute_team_id(self):
         for move in self:
@@ -58,42 +50,6 @@ class AccountMove(models.Model):
             })
         return super()._reverse_moves(default_values_list=default_values_list, cancel=cancel)
 
-    def action_post(self):
-        # inherit of the function from account.move to validate a new tax and the priceunit of a downpayment
-        res = super(AccountMove, self).action_post()
-
-        # We cannot change lines content on locked SO, changes on invoices are not forwarded to the SO if the SO is locked
-        dp_lines = self.line_ids.sale_line_ids.filtered(lambda l: l.is_downpayment and not l.display_type)
-        dp_lines._compute_name()  # Update the description of DP lines (Draft -> Posted)
-        downpayment_lines = dp_lines.filtered(lambda sol: not sol.order_id.locked)
-        other_so_lines = downpayment_lines.order_id.order_line - downpayment_lines
-        real_invoices = set(other_so_lines.invoice_lines.move_id)
-        for so_dpl in downpayment_lines:
-            so_dpl.price_unit = sum(
-                l.price_unit if l.move_id.move_type == 'out_invoice' else -l.price_unit
-                for l in so_dpl.invoice_lines
-                if l.move_id.state == 'posted' and l.move_id not in real_invoices  # don't recompute with the final invoice
-            )
-            so_dpl.tax_id = so_dpl.invoice_lines.tax_ids
-
-        return res
-
-    def button_draft(self):
-        res = super().button_draft()
-
-        self.line_ids.filtered('is_downpayment').sale_line_ids.filtered(
-            lambda sol: not sol.display_type)._compute_name()
-
-        return res
-
-    def button_cancel(self):
-        res = super().button_cancel()
-
-        self.line_ids.filtered('is_downpayment').sale_line_ids.filtered(
-            lambda sol: not sol.display_type)._compute_name()
-
-        return res
-
     def _post(self, soft=True):
         # OVERRIDE
         # Auto-reconcile the invoice with payments coming from transactions.

--- a/addons/sale/models/account_move_line.py
+++ b/addons/sale/models/account_move_line.py
@@ -9,7 +9,6 @@ from odoo.tools import float_compare, float_is_zero
 class AccountMoveLine(models.Model):
     _inherit = 'account.move.line'
 
-    is_downpayment = fields.Boolean()
     sale_line_ids = fields.Many2many(
         'sale.order.line',
         'sale_order_line_invoice_rel',
@@ -227,3 +226,6 @@ class AccountMoveLine(models.Model):
     def _get_downpayment_lines(self):
         # OVERRIDE
         return self.sale_line_ids.filtered('is_downpayment').invoice_lines.filtered(lambda line: line.move_id._is_downpayment())
+
+    def _get_order_lines(self):
+        return self.sale_line_ids or super()._get_order_lines()

--- a/addons/sale/models/sale_order.py
+++ b/addons/sale/models/sale_order.py
@@ -32,7 +32,14 @@ SALE_ORDER_STATE = [
 
 class SaleOrder(models.Model):
     _name = 'sale.order'
-    _inherit = ['portal.mixin', 'product.catalog.mixin', 'mail.thread', 'mail.activity.mixin', 'utm.mixin']
+    _inherit = [
+        'portal.mixin',
+        'product.catalog.mixin',
+        'mail.thread',
+        'mail.activity.mixin',
+        'utm.mixin',
+        'account.order.mixin'
+    ]
     _description = "Sales Order"
     _order = 'date_order desc, id desc'
     _check_company_auto = True
@@ -51,22 +58,7 @@ class SaleOrder(models.Model):
 
     #=== FIELDS ===#
 
-    name = fields.Char(
-        string="Order Reference",
-        required=True, copy=False, readonly=False,
-        index='trigram',
-        default=lambda self: _('New'))
-
-    company_id = fields.Many2one(
-        comodel_name='res.company',
-        required=True, index=True,
-        default=lambda self: self.env.company)
-    partner_id = fields.Many2one(
-        comodel_name='res.partner',
-        string="Customer",
-        required=True, change_default=True, index=True,
-        tracking=1,
-        check_company=True)
+    partner_id = fields.Many2one(string="Customer")
     state = fields.Selection(
         selection=SALE_ORDER_STATE,
         string="Status",
@@ -155,19 +147,15 @@ class SaleOrder(models.Model):
         index='btree_not_null')
 
     fiscal_position_id = fields.Many2one(
-        comodel_name='account.fiscal.position',
-        string="Fiscal Position",
         compute='_compute_fiscal_position_id',
-        store=True, readonly=False, precompute=True, check_company=True,
+        store=True, readonly=False, precompute=True,
         help="Fiscal positions are used to adapt taxes and accounts for particular customers or sales orders/invoices."
             "The default value comes from the customer.",
     )
     payment_term_id = fields.Many2one(
-        comodel_name='account.payment.term',
-        string="Payment Terms",
         compute='_compute_payment_term_id',
-        store=True, readonly=False, precompute=True, check_company=True,  # Unrequired company
-        domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]")
+        store=True, readonly=False, precompute=True
+    )
     pricelist_id = fields.Many2one(
         comodel_name='product.pricelist',
         string="Pricelist",
@@ -177,11 +165,9 @@ class SaleOrder(models.Model):
         domain="['|', ('company_id', '=', False), ('company_id', '=', company_id)]",
         help="If you change the pricelist, only newly added lines will be affected.")
     currency_id = fields.Many2one(
-        comodel_name='res.currency',
         compute='_compute_currency_id',
         store=True,
         precompute=True,
-        ondelete='restrict'
     )
     currency_rate = fields.Float(
         string="Currency Rate",
@@ -211,13 +197,11 @@ class SaleOrder(models.Model):
         comodel_name='sale.order.line',
         inverse_name='order_id',
         string="Order Lines",
-        copy=True, auto_join=True)
+        auto_join=True)
 
-    amount_untaxed = fields.Monetary(string="Untaxed Amount", store=True, compute='_compute_amounts', tracking=5)
-    amount_tax = fields.Monetary(string="Taxes", store=True, compute='_compute_amounts')
-    amount_total = fields.Monetary(string="Total", store=True, compute='_compute_amounts', tracking=4)
-    amount_to_invoice = fields.Monetary(string="Amount to invoice", store=True, compute='_compute_amount_to_invoice')
-    amount_invoiced = fields.Monetary(string="Already invoiced", compute='_compute_amount_invoiced')
+    amount_untaxed = fields.Monetary(tracking=5)
+    amount_total = fields.Monetary(tracking=4)
+    amount_to_invoice = fields.Monetary(store=True)
 
     invoice_count = fields.Integer(string="Invoice Count", compute='_get_invoiced')
     invoice_ids = fields.Many2many(
@@ -227,10 +211,9 @@ class SaleOrder(models.Model):
         search='_search_invoice_ids',
         copy=False)
     invoice_status = fields.Selection(
-        selection=INVOICE_STATUS,
-        string="Invoice Status",
-        compute='_compute_invoice_status',
-        store=True)
+        selection_add=INVOICE_STATUS,
+        string="Invoice Status"
+    )
 
     # Payment fields
     transaction_ids = fields.Many2many(
@@ -471,32 +454,7 @@ class SaleOrder(models.Model):
                 )
             order.team_id = cached_teams[key]
 
-    @api.depends('order_line.price_subtotal', 'order_line.price_tax', 'order_line.price_total')
-    def _compute_amounts(self):
-        """Compute the total amounts of the SO."""
-        for order in self:
-            order_lines = order.order_line.filtered(lambda x: not x.display_type)
-
-            if order.company_id.tax_calculation_rounding_method == 'round_globally':
-                tax_results = self.env['account.tax']._compute_taxes(
-                    [
-                        line._convert_to_tax_base_line_dict()
-                        for line in order_lines
-                    ],
-                    order.company_id,
-                )
-                totals = tax_results['totals']
-                amount_untaxed = totals.get(order.currency_id, {}).get('amount_untaxed', 0.0)
-                amount_tax = totals.get(order.currency_id, {}).get('amount_tax', 0.0)
-            else:
-                amount_untaxed = sum(order_lines.mapped('price_subtotal'))
-                amount_tax = sum(order_lines.mapped('price_tax'))
-
-            order.amount_untaxed = amount_untaxed
-            order.amount_tax = amount_tax
-            order.amount_total = order.amount_untaxed + order.amount_tax
-
-    @api.depends('order_line.invoice_lines')
+    @api.depends('order_line.move_line_ids')
     def _get_invoiced(self):
         # The invoice_ids are obtained thanks to the invoice lines of the SO
         # lines, and we also search for possible refunds created directly from
@@ -553,6 +511,7 @@ class SaleOrder(models.Model):
         - invoiced: if all SO lines are invoiced, the SO is invoiced.
         - upselling: if all SO lines are invoiced or upselling, the status is upselling.
         """
+        super()._compute_invoice_status()
         confirmed_orders = self.filtered(lambda so: so.state == 'sale')
         (self - confirmed_orders).invoice_status = 'no'
         if not confirmed_orders:
@@ -650,25 +609,20 @@ class SaleOrder(models.Model):
             else:
                 record.tax_country_id = record.company_id.account_fiscal_country_id
 
-    @api.depends('invoice_ids.state', 'currency_id', 'amount_total')
     def _compute_amount_to_invoice(self):
+        super()._compute_amount_to_invoice()
         for order in self:
             # If the invoice status is 'Fully Invoiced' force the amount to invoice to equal zero and return early.
             if order.invoice_status == 'invoiced':
                 order.amount_to_invoice = 0.0
                 continue
 
-            invoices = order.invoice_ids.filtered(lambda x: x.state == 'posted')
+            invoices = order.account_move_ids.filtered(lambda x: x.state == 'posted')
             # Note: A negative amount can happen, since we can invoice more than the sales order amount.
             # Care has to be taken when summing amount_to_invoice of multiple orders.
             # E.g. consider one invoiced order with -100 and one uninvoiced order of 100: 100 + -100 = 0
             order.amount_to_invoice = order.amount_total - invoices._get_sale_order_invoiced_amount(order)
 
-    @api.depends('amount_total', 'amount_to_invoice')
-    def _compute_amount_invoiced(self):
-        for order in self:
-            order.amount_invoiced = order.amount_total - order.amount_to_invoice
-
     @api.depends('company_id', 'partner_id', 'amount_total')
     def _compute_partner_credit_warning(self):
         for order in self:
@@ -826,23 +780,6 @@ class SaleOrder(models.Model):
 
         return super().create(vals_list)
 
-    def _get_copiable_order_lines(self):
-        """Returns the order lines that can be copied to a new order."""
-        return self.order_line.filtered(lambda l: not l.is_downpayment)
-
-    def copy_data(self, default=None):
-        default = dict(default or {})
-        default_has_no_order_line = 'order_line' not in default
-        default.setdefault('order_line', [])
-        vals_list = super().copy_data(default=default)
-        if default_has_no_order_line:
-            for order, vals in zip(self, vals_list):
-                vals['order_line'] = [
-                    Command.create(line_vals)
-                    for line_vals in order._get_copiable_order_lines().copy_data()
-                ]
-        return vals_list
-
     @api.ondelete(at_uninstall=False)
     def _unlink_except_draft_or_cancel(self):
         for order in self:
@@ -1216,7 +1153,7 @@ class SaleOrder(models.Model):
         overridden to implement custom invoice generation (making sure to call super() to establish
         a clean extension chain).
         """
-        self.ensure_one()
+        values = super()._prepare_invoice()
 
         txs_to_be_linked = self.transaction_ids.filtered(
             lambda tx: (
@@ -1225,11 +1162,10 @@ class SaleOrder(models.Model):
             )
         )
 
-        values = {
+        values.update({
             'ref': self.client_order_ref or '',
             'move_type': 'out_invoice',
             'narration': self.note,
-            'currency_id': self.currency_id.id,
             'campaign_id': self.campaign_id.id,
             'medium_id': self.medium_id.id,
             'source_id': self.source_id.id,
@@ -1237,15 +1173,11 @@ class SaleOrder(models.Model):
             'partner_id': self.partner_invoice_id.id,
             'partner_shipping_id': self.partner_shipping_id.id,
             'fiscal_position_id': (self.fiscal_position_id or self.fiscal_position_id._get_fiscal_position(self.partner_invoice_id)).id,
-            'invoice_origin': self.name,
-            'invoice_payment_term_id': self.payment_term_id.id,
             'invoice_user_id': self.user_id.id,
             'payment_reference': self.reference,
             'transaction_ids': [Command.set(txs_to_be_linked.ids)],
-            'company_id': self.company_id.id,
-            'invoice_line_ids': [],
             'user_id': self.user_id.id,
-        }
+        })
         if self.journal_id:
             values['journal_id'] = self.journal_id.id
         return values
@@ -1343,39 +1275,7 @@ class SaleOrder(models.Model):
                 return self.env['account.move']
 
         # 1) Create invoices.
-        invoice_vals_list = []
-        invoice_item_sequence = 0 # Incremental sequencing to keep the lines order on the invoice.
-        for order in self:
-            order = order.with_company(order.company_id).with_context(lang=order.partner_invoice_id.lang)
-
-            invoice_vals = order._prepare_invoice()
-            invoiceable_lines = order._get_invoiceable_lines(final)
-
-            if not any(not line.display_type for line in invoiceable_lines):
-                continue
-
-            invoice_line_vals = []
-            down_payment_section_added = False
-            for line in invoiceable_lines:
-                if not down_payment_section_added and line.is_downpayment:
-                    # Create a dedicated section for the down payments
-                    # (put at the end of the invoiceable_lines)
-                    invoice_line_vals.append(
-                        Command.create(
-                            order._prepare_down_payment_section_line(sequence=invoice_item_sequence)
-                        ),
-                    )
-                    down_payment_section_added = True
-                    invoice_item_sequence += 1
-                invoice_line_vals.append(
-                    Command.create(
-                        line._prepare_invoice_line(sequence=invoice_item_sequence)
-                    ),
-                )
-                invoice_item_sequence += 1
-
-            invoice_vals['invoice_line_ids'] += invoice_line_vals
-            invoice_vals_list.append(invoice_vals)
+        invoice_vals_list = self._generate_invoice_values(final)
 
         if not invoice_vals_list and self._context.get('raise_if_nothing_to_invoice', True):
             raise UserError(self._nothing_to_invoice_error_message())
@@ -1509,6 +1409,15 @@ class SaleOrder(models.Model):
             )
         return moves
 
+    def _get_order_direction(self):
+        return -1
+
+    def _create_new_order_line(self, values):
+        return self.env['sale.order.line'].create(values)
+
+    def _is_locked(self):
+        return self.locked
+
     # MAIL #
 
     def _discard_tracking(self):
@@ -1662,25 +1571,6 @@ class SaleOrder(models.Model):
         self.ensure_one()
         return self.transaction_ids.sudo()._get_last()
 
-    def _get_order_lines_to_report(self):
-        down_payment_lines = self.order_line.filtered(lambda line:
-            line.is_downpayment
-            and not line.display_type
-            and not line._get_downpayment_state()
-        )
-
-        def show_line(line):
-            if not line.is_downpayment:
-                return True
-            elif line.display_type and down_payment_lines:
-                return True  # Only show the down payment section if down payments were posted
-            elif line in down_payment_lines:
-                return True  # Only show posted down payments
-            else:
-                return False
-
-        return self.order_line.filtered(show_line)
-
     def _get_default_payment_link_values(self):
         self.ensure_one()
         amount_max = self.amount_total - self.amount_paid
@@ -1842,29 +1732,6 @@ class SaleOrder(models.Model):
             analytic = self.env['account.analytic.account'].create(order._prepare_analytic_account_data(prefix))
             order.analytic_account_id = analytic
 
-    def _prepare_down_payment_section_line(self, **optional_values):
-        """ Prepare the values to create a new down payment section.
-
-        :param dict optional_values: any parameter that should be added to the returned down payment section
-        :return: `account.move.line` creation values
-        :rtype: dict
-        """
-        self.ensure_one()
-        context = {'lang': self.partner_id.lang}
-        down_payments_section_line = {
-            'display_type': 'line_section',
-            'name': _("Down Payments"),
-            'product_id': False,
-            'product_uom_id': False,
-            'quantity': 0,
-            'discount': 0,
-            'price_unit': 0,
-            'account_id': False,
-            **optional_values
-        }
-        del context
-        return down_payments_section_line
-
     def _get_prepayment_required_amount(self):
         """ Return the minimum amount needed to confirm automatically the quotation.
 
@@ -1903,7 +1770,7 @@ class SaleOrder(models.Model):
 
         for order in self:
             downpayment_wizard = order.env['sale.advance.payment.inv'].create({
-                'sale_order_ids': order,
+                'order_ids': order,
                 'advance_payment_method': 'fixed',
                 'fixed_amount': order.amount_paid,
             })
@@ -2011,11 +1878,3 @@ class SaleOrder(models.Model):
         """
         self.ensure_one()
         return self.currency_id.compare_amounts(self.amount_paid, self.amount_total) >= 0
-
-    def _get_lang(self):
-        self.ensure_one()
-
-        if self.partner_id.lang and not self.partner_id.is_public:
-            return self.partner_id.lang
-
-        return self.env.lang

--- a/addons/sale/models/sale_order_line.py
+++ b/addons/sale/models/sale_order_line.py
@@ -7,16 +7,16 @@ from datetime import timedelta
 
 from markupsafe import Markup
 
-from odoo import _, _lt, api, fields, models
+from odoo import _, api, fields, models
 from odoo.exceptions import UserError
 from odoo.fields import Command
 from odoo.osv import expression
-from odoo.tools import float_compare, float_is_zero, format_date, groupby
+from odoo.tools import float_compare, float_is_zero, groupby
 
 
 class SaleOrderLine(models.Model):
     _name = 'sale.order.line'
-    _inherit = 'analytic.mixin'
+    _inherit = ['analytic.mixin', 'account.order.line.mixin']
     _description = "Sales Order Line"
     _rec_names_search = ['name', 'order_id.name']
     _order = 'order_id, sequence, id'
@@ -46,10 +46,6 @@ class SaleOrderLine(models.Model):
     company_id = fields.Many2one(
         related='order_id.company_id',
         store=True, index=True, precompute=True)
-    currency_id = fields.Many2one(
-        related='order_id.currency_id',
-        depends=['order_id.currency_id'],
-        store=True, precompute=True)
     order_partner_id = fields.Many2one(
         related='order_id.partner_id',
         string="Customer",
@@ -65,29 +61,17 @@ class SaleOrderLine(models.Model):
     tax_country_id = fields.Many2one(related='order_id.tax_country_id')
 
     # Fields specifying custom line logic
-    display_type = fields.Selection(
-        selection=[
-            ('line_section', "Section"),
-            ('line_note', "Note"),
-        ],
-        default=False)
     is_configurable_product = fields.Boolean(
         string="Is the product configurable?",
         related='product_template_id.has_configurable_attributes',
         depends=['product_id'])
-    is_downpayment = fields.Boolean(
-        string="Is a down payment",
-        help="Down payments are made when creating invoices from a sales order."
-            " They are not copied when duplicating a sales order.")
     is_expense = fields.Boolean(
         string="Is expense",
         help="Is true if the sales order line comes from an expense or a vendor bills")
 
     # Generic configuration fields
     product_id = fields.Many2one(
-        comodel_name='product.product',
-        string="Product",
-        change_default=True, ondelete='restrict', index='btree_not_null',
+        ondelete='restrict',
         domain="[('sale_ok', '=', True)]")
     product_template_id = fields.Many2one(
         string="Product Template",
@@ -118,22 +102,14 @@ class SaleOrderLine(models.Model):
         store=True, readonly=False, precompute=True, ondelete='restrict')
     is_product_archived = fields.Boolean(compute="_compute_is_product_archived")
 
-    name = fields.Text(
-        string="Description",
-        compute='_compute_name',
-        store=True, readonly=False, required=True, precompute=True)
-
     product_uom_qty = fields.Float(
         string="Quantity",
         compute='_compute_product_uom_qty',
         digits='Product Unit of Measure', default=1.0,
         store=True, readonly=False, required=True, precompute=True)
     product_uom = fields.Many2one(
-        comodel_name='uom.uom',
-        string="Unit of Measure",
         compute='_compute_product_uom',
-        store=True, readonly=False, precompute=True, ondelete='restrict',
-        domain="[('category_id', '=', product_uom_category_id)]")
+        store=True, readonly=False, precompute=True, ondelete='restrict')
     linked_line_id = fields.Many2one(
         string="Linked Order Line",
         comodel_name='sale.order.line',
@@ -148,40 +124,23 @@ class SaleOrderLine(models.Model):
 
     # Pricing fields
     tax_id = fields.Many2many(
-        comodel_name='account.tax',
-        string="Taxes",
         compute='_compute_tax_id',
-        store=True, readonly=False, precompute=True,
-        context={'active_test': False},
-        check_company=True)
+        store=True, readonly=False, precompute=True)
 
     # Tech field caching pricelist rule used for price & discount computation
     pricelist_item_id = fields.Many2one(
         comodel_name='product.pricelist.item',
         compute='_compute_pricelist_item_id')
 
-    price_unit = fields.Float(
-        string="Unit Price",
-        compute='_compute_price_unit',
-        digits='Product Price',
-        store=True, readonly=False, required=True, precompute=True)
-
-    discount = fields.Float(
-        string="Discount (%)",
-        compute='_compute_discount',
-        digits='Discount',
-        store=True, readonly=False, precompute=True)
+    price_unit = fields.Float(compute='_compute_price_unit', store=True, precompute=True)
 
     price_subtotal = fields.Monetary(
-        string="Subtotal",
         compute='_compute_amount',
         store=True, precompute=True)
-    price_tax = fields.Float(
-        string="Total Tax",
+    price_total = fields.Monetary(
         compute='_compute_amount',
         store=True, precompute=True)
-    price_total = fields.Monetary(
-        string="Total",
+    price_tax = fields.Monetary(
         compute='_compute_amount',
         store=True, precompute=True)
     price_reduce_taxexcl = fields.Monetary(
@@ -238,11 +197,6 @@ class SaleOrderLine(models.Model):
         compute='_compute_qty_invoiced',
         digits='Product Unit of Measure',
         store=True)
-    qty_to_invoice = fields.Float(
-        string="Quantity To Invoice",
-        compute='_compute_qty_to_invoice',
-        digits='Product Unit of Measure',
-        store=True)
 
     analytic_line_ids = fields.One2many(
         comodel_name='account.analytic.line', inverse_name='so_line',
@@ -297,6 +251,17 @@ class SaleOrderLine(models.Model):
                 name = f'{name} {additional_name}'
             so_line.display_name = name
 
+    def _additional_name_per_id(self):
+        return {
+            so_line.id: so_line._get_partner_display()
+            for so_line in self
+        }
+
+    def _get_partner_display(self):
+        self.ensure_one()
+        commercial_partner = self.order_partner_id.commercial_partner_id
+        return f'({commercial_partner.ref or commercial_partner.name})'
+
     @api.depends('product_id')
     def _compute_product_template_id(self):
         for line in self:
@@ -340,20 +305,16 @@ class SaleOrderLine(models.Model):
 
     @api.depends('product_id', 'linked_line_id', 'linked_line_ids')
     def _compute_name(self):
+        super()._compute_name()
         for line in self:
-            if not line.product_id and not line.is_downpayment:
+            if not line.product_id:
                 continue
 
             lang = line.order_id._get_lang()
             if lang != self.env.lang:
                 line = line.with_context(lang=lang)
 
-            if line.product_id:
-                line.name = line._get_sale_order_line_multiline_description_sale()
-                continue
-
-            if line.is_downpayment:
-                line.name = line._get_downpayment_description()
+            line.name = line._get_sale_order_line_multiline_description_sale()
 
     def _get_sale_order_line_multiline_description_sale(self):
         """ Compute a default multiline description for this sales order line.
@@ -420,33 +381,6 @@ class SaleOrderLine(models.Model):
 
         return name
 
-    def _get_downpayment_description(self):
-        self.ensure_one()
-        if self.display_type:
-            return _("Down Payments")
-
-        dp_state = self._get_downpayment_state()
-        name = _lt("Down Payment")
-        if dp_state == 'draft':
-            name = _(
-                "Down Payment: %(date)s (Draft)",
-                date=format_date(self.env, self.create_date.date()),
-            )
-        elif dp_state == 'cancel':
-            name = _("Down Payment (Cancelled)")
-        else:
-            invoice = self._get_invoice_lines().filtered(
-                lambda aml: aml.quantity >= 0
-            ).move_id.filtered(lambda move: move.move_type == 'out_invoice')
-            if len(invoice) == 1 and invoice.payment_reference and invoice.invoice_date:
-                name = _(
-                    "Down Payment (ref: %(reference)s on %(date)s)",
-                    reference=invoice.payment_reference,
-                    date=format_date(self.env, invoice.invoice_date),
-                )
-
-        return name
-
     @api.depends('display_type', 'product_id', 'product_packaging_qty')
     def _compute_product_uom_qty(self):
         for line in self:
@@ -514,6 +448,7 @@ class SaleOrderLine(models.Model):
 
     @api.depends('product_id', 'product_uom', 'product_uom_qty')
     def _compute_price_unit(self):
+        super()._compute_price_unit()
         for line in self:
             # check if there is already invoiced amount. if so, the price shouldn't change as it might have been
             # manually edited
@@ -616,6 +551,7 @@ class SaleOrderLine(models.Model):
 
     @api.depends('product_id', 'product_uom', 'product_uom_qty')
     def _compute_discount(self):
+        super()._compute_discount()
         for line in self:
             if not line.product_id or line.display_type:
                 line.discount = 0.0
@@ -665,25 +601,9 @@ class SaleOrderLine(models.Model):
             **kwargs,
         )
 
-    @api.depends('product_uom_qty', 'discount', 'price_unit', 'tax_id')
+    @api.depends('product_uom_qty')
     def _compute_amount(self):
-        """
-        Compute the amounts of the SO line.
-        """
-        for line in self:
-            tax_results = self.env['account.tax']._compute_taxes(
-                [line._convert_to_tax_base_line_dict()],
-                line.company_id,
-            )
-            totals = list(tax_results['totals'].values())[0]
-            amount_untaxed = totals['amount_untaxed']
-            amount_tax = totals['amount_tax']
-
-            line.update({
-                'price_subtotal': amount_untaxed,
-                'price_tax': amount_tax,
-                'price_total': amount_untaxed + amount_tax,
-            })
+        super()._compute_amount()
 
     @api.depends('price_subtotal', 'product_uom_qty')
     def _compute_price_reduce_taxexcl(self):
@@ -756,20 +676,6 @@ class SaleOrderLine(models.Model):
         for so_line in lines_by_analytic:
             so_line.qty_delivered = mapping.get(so_line.id or so_line._origin.id, 0.0)
 
-    def _get_downpayment_state(self):
-        self.ensure_one()
-
-        if self.display_type:
-            return ''
-
-        invoice_lines = self._get_invoice_lines()
-        if all(line.parent_state == 'draft' for line in invoice_lines):
-            return 'draft'
-        if all(line.parent_state == 'cancel' for line in invoice_lines):
-            return 'cancel'
-
-        return ''
-
     def _get_delivered_quantity_by_analytic(self, additional_domain):
         """ Compute and write the delivered quantity of current SO lines, based on their related
             analytic lines.
@@ -822,15 +728,6 @@ class SaleOrderLine(models.Model):
                         qty_invoiced -= invoice_line.product_uom_id._compute_quantity(invoice_line.quantity, line.product_uom)
             line.qty_invoiced = qty_invoiced
 
-    def _get_invoice_lines(self):
-        self.ensure_one()
-        if self._context.get('accrual_entry_date'):
-            return self.invoice_lines.filtered(
-                lambda l: l.move_id.invoice_date and l.move_id.invoice_date <= self._context['accrual_entry_date']
-            )
-        else:
-            return self.invoice_lines
-
     # no trigger product_id.invoice_policy to avoid retroactively changing SO
     @api.depends('qty_invoiced', 'qty_delivered', 'product_uom_qty', 'state')
     def _compute_qty_to_invoice(self):
@@ -838,6 +735,7 @@ class SaleOrderLine(models.Model):
         Compute the quantity to invoice. If the invoice policy is order, the quantity to invoice is
         calculated from the ordered quantity. Otherwise, the quantity delivered is used.
         """
+        super()._compute_qty_to_invoice()
         for line in self:
             if line.state == 'sale' and not line.display_type:
                 if line.product_id.invoice_policy == 'order':
@@ -1038,7 +936,7 @@ class SaleOrderLine(models.Model):
                 vals['product_uom_qty'] = 0.0
 
         lines = super().create(vals_list)
-        if self.env.context.get('sale_no_log_for_new_lines'):
+        if self.env.context.get('no_log_for_new_lines'):
             return lines
 
         for line in lines:
@@ -1159,6 +1057,8 @@ class SaleOrderLine(models.Model):
     def compute_uom_qty(self, new_qty, stock_move, rounding=True):
         return self.product_uom._compute_quantity(new_qty, stock_move.product_uom, rounding)
 
+    # INVOICING #
+
     def _get_invoice_line_sequence(self, new=0, old=0):
         """
         Method intended to be overridden in third-party module if we want to prevent the resequencing
@@ -1177,7 +1077,7 @@ class SaleOrderLine(models.Model):
         :param optional_values: any parameter that should be added to the returned invoice line
         :rtype: dict
         """
-        self.ensure_one()
+        res = super()._prepare_invoice_line(**optional_values)
 
         # Compatibility fix for creating invoices from a SO since the computation of the line name has been changed in the account module.
         # Has to be removed as soon as the new behavior for the line name has been implemented in the sale module.
@@ -1186,19 +1086,14 @@ class SaleOrderLine(models.Model):
             line_name = re.sub(re.escape(self.product_id.display_name), '', line_name)
             line_name = re.sub(r'^\n', '', line_name)
             line_name = re.sub(r'(?<=\n) ', '', line_name)
-        res = {
-            'display_type': self.display_type or 'product',
+
+        res.update({
             'sequence': self.sequence,
             'name': line_name,
-            'product_id': self.product_id.id,
-            'product_uom_id': self.product_uom.id,
-            'quantity': self.qty_to_invoice,
-            'discount': self.discount,
             'price_unit': self.price_unit,
             'tax_ids': [Command.set(self.tax_id.ids)],
             'sale_line_ids': [Command.link(self.id)],
-            'is_downpayment': self.is_downpayment,
-        }
+        })
         self._set_analytic_distribution(res, **optional_values)
         if self.is_downpayment:
             res['account_id'] = self.invoice_lines.filtered('is_downpayment').account_id[:1].id
@@ -1219,33 +1114,21 @@ class SaleOrderLine(models.Model):
             else:
                 inv_line_vals['analytic_distribution'] = {analytic_account_id: 100}
 
-    def _prepare_procurement_values(self, group_id=False):
-        """ Prepare specific key for moves or other components that will be created from a stock rule
-        coming from a sale order line. This method could be override in order to add other custom key that could
-        be used in move/po creation.
-        """
-        return {}
-
     def _validate_analytic_distribution(self):
-        for line in self.filtered(lambda l: not l.display_type and l.state in ['draft', 'sent']):
-            line._validate_distribution(**{
-                'product': line.product_id.id,
-                'business_domain': 'sale_order',
-                'company_id': line.company_id.id,
-            })
-
-    #=== CORE METHODS OVERRIDES ===#
+        for line in self.filtered(
+            lambda sol: not sol.display_type and sol.state in ['draft', 'sent']
+        ):
+            line._validate_distribution(
+                product=line.product_id.id,
+                business_domain='sale_order',
+                company_id=line.company_id.id,
+            )
 
-    def _get_partner_display(self):
-        self.ensure_one()
-        commercial_partner = self.order_partner_id.commercial_partner_id
-        return f'({commercial_partner.ref or commercial_partner.name})'
+    def has_valued_move_ids(self):
+        return self.move_ids
 
-    def _additional_name_per_id(self):
-        return {
-            so_line.id: so_line._get_partner_display()
-            for so_line in self
-        }
+    def _has_valid_qty_to_invoice(self, final=False):
+        return self.qty_to_invoice > 0 or (self.qty_to_invoice < 0 and final)
 
     #=== HOOKS ===#
 
@@ -1322,6 +1205,13 @@ class SaleOrderLine(models.Model):
                 # price will be computed in batch with pricelist utils so not given here
             }
 
+    def _prepare_procurement_values(self, group_id=False):
+        """ Prepare specific key for moves or other components that will be created from a stock rule
+        coming from a sale order line. This method could be override in order to add other custom key that could
+        be used in move/po creation.
+        """
+        return {}
+
     #=== TOOLING ===#
 
     def _convert_to_sol_currency(self, amount, currency):
@@ -1346,6 +1236,3 @@ class SaleOrderLine(models.Model):
                 round=False,
             )
         return amount
-
-    def has_valued_move_ids(self):
-        return self.move_ids
