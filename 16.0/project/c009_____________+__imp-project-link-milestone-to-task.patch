PR: https://github.com/odoo/odoo/pull/

From: a118555a40d7ddfb53689ce672fdb897a851e292
From: Xavier BOL (xbo)
Date: 2022-05-31 08:29:08

Structural Changes: 4
Total Changes: 57

[IMP] project: link milestone to task

Before this commit, the milestones are only linked to a project without
any link to the tasks of the same project. However, the tasks could be
considered as steps to reach a project milestone.

This commit adds a link between the `project.task` and
`project.milestone` models. This link is added in the `project.task`
model with the Many2One field called `milestone_id`. With this field,
the user will be able to link a milestone to a task.

task-2829542

================================= pseudo patch: =================================

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -323,6 +323,7 @@ class Project(models.Model):
     allow_subtasks = fields.Boolean('Sub-tasks', default=lambda self: self.env.user.has_group('project.group_subtask_project'))
     allow_recurring_tasks = fields.Boolean('Recurring Tasks', default=lambda self: self.env.user.has_group('project.group_project_recurring_tasks'))
     allow_task_dependencies = fields.Boolean('Task Dependencies', default=lambda self: self.env.user.has_group('project.group_project_task_dependencies'))
+    allow_milestones = fields.Boolean('Milestones', default=lambda self: self.env.user.has_group('project.group_project_milestone'))
     tag_ids = fields.Many2many('project.tags', relation='project_project_project_tags_rel', string='Tags')
 
     # Project Sharing fields
@@ -363,7 +364,7 @@ class Project(models.Model):
     ], default='to_define', compute='_compute_last_update_status', store=True, readonly=False, required=True)
     last_update_color = fields.Integer(compute='_compute_last_update_color')
     milestone_ids = fields.One2many('project.milestone', 'project_id', copy=True)
-    milestone_count = fields.Integer(compute='_compute_milestone_count')
+    milestone_count = fields.Integer(compute='_compute_milestone_count', groups='project.group_project_milestone')
     is_milestone_exceeded = fields.Boolean(compute="_compute_is_milestone_exceeded", search='_search_is_milestone_exceeded')
 
     _sql_constraints = [
@@ -782,10 +783,11 @@ class Project(models.Model):
             return {}
         panel_data = {
             'user': self._get_user_values(),
-            'milestones': self._get_milestones(),
             'buttons': sorted(self._get_stat_buttons(), key=lambda k: k['sequence']),
             'currency_id': self.currency_id.id,
         }
+        if self.allow_milestones:
+            panel_data['milestones'] = self._get_milestones()
         if self._show_profitability():
             profitability_items = self._get_profitability_items()
             if self._get_profitability_sequence_per_invoice_type() and profitability_items and 'revenues' in profitability_items and 'costs' in profitability_items:  # sort the data values
@@ -1120,6 +1122,19 @@ class Task(models.Model):
     # customer portal: include comment and incoming emails in communication history
     website_message_ids = fields.One2many(domain=lambda self: [('model', '=', self._name), ('message_type', 'in', ['email', 'comment'])])
     is_private = fields.Boolean(compute='_compute_is_private')
+    allow_milestones = fields.Boolean(related='project_id.allow_milestones')
+    milestone_id = fields.Many2one(
+        'project.milestone',
+        'Milestone',
+        domain="[('project_id', '=', project_id)]",
+        compute='_compute_milestone_id',
+        readonly=False,
+        store=True,
+        tracking=True,
+        help="Track major progress points that must be reached to achieve success (e.g. Product Launch). "
+             "After all the tasks connected to this milestone are completed, you will be invited to mark it as reached if you wish. "
+             "You can deliver your services automatically when a milestone is reached by linking it to a sales order item."
+    )
 
     # Task Dependencies fields
     allow_task_dependencies = fields.Boolean(related='project_id.allow_task_dependencies')
@@ -1994,6 +2009,12 @@ class Task(models.Model):
             if task.parent_id:
                 task.project_id = task.display_project_id or task.parent_id.project_id
 
+    @api.depends('project_id')
+    def _compute_milestone_id(self):
+        for task in self:
+            if task.project_id != task.milestone_id.project_id:
+                task.milestone_id = False
+
     # ---------------------------------------------------
     # Mail gateway
     # ---------------------------------------------------

--- a/addons/project/models/project_milestone.py
+++ b/addons/project/models/project_milestone.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from odoo import _, api, fields, models
+from odoo import api, fields, models
 
 class ProjectMilestone(models.Model):
     _name = 'project.milestone'
@@ -17,10 +17,12 @@ class ProjectMilestone(models.Model):
     deadline = fields.Date(tracking=True, copy=False)
     is_reached = fields.Boolean(string="Reached", default=False, copy=False)
     reached_date = fields.Date(compute='_compute_reached_date', store=True)
+    task_ids = fields.One2many('project.task', 'milestone_id', 'Tasks')
 
     # computed non-stored fields
     is_deadline_exceeded = fields.Boolean(compute="_compute_is_deadline_exceeded")
     is_deadline_future = fields.Boolean(compute="_compute_is_deadline_future")
+    task_count = fields.Integer('# of Tasks', compute='_compute_task_count', groups='project.group_project_milestone')
 
     @api.depends('is_reached')
     def _compute_reached_date(self):
@@ -38,11 +40,29 @@ class ProjectMilestone(models.Model):
         for ms in self:
             ms.is_deadline_future = ms.deadline and ms.deadline > fields.Date.context_today(self)
 
+    @api.depends('task_ids.milestone_id')
+    def _compute_task_count(self):
+        task_read_group = self.env['project.task']._read_group([('milestone_id', 'in', self.ids), ('allow_milestones', '=', True)], ['milestone_id'], ['milestone_id'])
+        task_count_per_milestone = {res['milestone_id'][0]: res['milestone_id_count'] for res in task_read_group}
+        for milestone in self:
+            milestone.task_count = task_count_per_milestone.get(milestone.id, 0)
+
     def toggle_is_reached(self, is_reached):
         self.ensure_one()
         self.update({'is_reached': is_reached})
         return self._get_data()
 
+    def action_view_tasks(self):
+        self.ensure_one()
+        action = self.env['ir.actions.act_window']._for_xml_id('project.action_view_task_from_milestone')
+        action['context'] = {'default_project_id': self.project_id.id, 'default_milestone_id': self.id}
+        if self.task_count == 1:
+            action['view_mode'] = 'form'
+            action['res_id'] = self.task_ids.id
+            if 'views' in action:
+                action['views'] = [(view_id, view_type) for view_id, view_type in action['views'] if view_type == 'form']
+        return action
+
     @api.model
     def _get_fields_to_export(self):
         return ['id', 'name', 'deadline', 'is_reached', 'reached_date', 'is_deadline_exceeded', 'is_deadline_future']

--- a/addons/project/models/project_update.py
+++ b/addons/project/models/project_update.py
@@ -110,6 +110,14 @@ class ProjectUpdate(models.Model):
     @api.model
     def _get_milestone_values(self, project):
         Milestone = self.env['project.milestone']
+        if not project.allow_milestones:
+            return {
+                'show_section': False,
+                'list': [],
+                'updated': [],
+                'last_update_date': None,
+                'created': []
+            }
         list_milestones = Milestone.search(
             [('project_id', '=', project.id),
              '|', ('deadline', '<', fields.Date.context_today(self) + relativedelta(years=1)), ('deadline', '=', False)])._get_data_list()

--- a/addons/project/models/res_config_settings.py
+++ b/addons/project/models/res_config_settings.py
@@ -14,6 +14,7 @@ class ResConfigSettings(models.TransientModel):
     group_project_stages = fields.Boolean("Project Stages", implied_group="project.group_project_stages")
     group_project_recurring_tasks = fields.Boolean("Recurring Tasks", implied_group="project.group_project_recurring_tasks")
     group_project_task_dependencies = fields.Boolean("Task Dependencies", implied_group="project.group_project_task_dependencies")
+    group_project_milestone = fields.Boolean('Milestones', implied_group='project.group_project_milestone')
     rating_status = fields.Selection(
         [('stage', 'Rating when changing stage'),
          ('periodic', 'Periodic rating')
@@ -41,6 +42,7 @@ class ResConfigSettings(models.TransientModel):
         basic_project_features = {
             "group_subtask_project": "allow_subtasks",
             "group_project_task_dependencies": "allow_task_dependencies",
+            'group_project_milestone': 'allow_milestones',
         }
         config_feature_vals = {config_flag: self[config_flag]
                                for config_flag in global_features.keys() | basic_project_features.keys()}
