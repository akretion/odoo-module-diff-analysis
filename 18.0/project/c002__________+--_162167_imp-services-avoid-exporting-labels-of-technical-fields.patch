PR: https://github.com/odoo/odoo/pull/162167

From: e82567f9d5842bd95fe01ba3b9f54a65437e313f
From: Vincent Larcin
Date: 2024-05-08 16:51:37

Breaking data model changes score: 7.4, change matches:
-    active = fields.Boolean(default=True, copy=False,
+    active = fields.Boolean(default=True, copy=False, export_string_translation=False)
-    task_ids = fields.One2many('project.task', 'project_id', string='Tasks',
+    task_ids = fields.One2many('project.task', 'project_id', string='Tasks', export_string_translation=False,
-    subtask_allocated_hours = fields.Float("Sub-tasks Allocated Time", compute='_compute_subtask_allocated_hours',
+    subtask_allocated_hours = fields.Float("Sub-tasks Allocated Time", compute='_compute_subtask_allocated_hours', export_string_translation=False,
-    attachment_ids = fields.One2many('ir.attachment', compute='_compute_attachment_ids', string="Main Attachments",
+    attachment_ids = fields.One2many('ir.attachment', compute='_compute_attachment_ids', string="Attachments that don't come from a message",

Total Changes: 162

[IMP] services: avoid exporting labels of technical fields

Task-3631801

closes odoo/odoo#162167

Related: odoo/enterprise#60904
Signed-off-by: Xavier Bol (xbo) <xbo@odoo.com>

================================= pseudo patch: =================================

--- a/addons/project/models/account_analytic_account.py
+++ b/addons/project/models/account_analytic_account.py
@@ -9,8 +9,8 @@ class AccountAnalyticAccount(models.Model):
     _inherit = 'account.analytic.account'
     _description = 'Analytic Account'
 
-    project_ids = fields.One2many('project.project', 'analytic_account_id', string='Projects')
-    project_count = fields.Integer("Project Count", compute='_compute_project_count')
+    project_ids = fields.One2many('project.project', 'analytic_account_id', string='Projects', export_string_translation=False)
+    project_count = fields.Integer("Project Count", compute='_compute_project_count', export_string_translation=False)
 
     @api.depends('project_ids')
     def _compute_project_count(self):

--- a/addons/project/models/digest_digest.py
+++ b/addons/project/models/digest_digest.py
@@ -9,7 +9,7 @@ class Digest(models.Model):
     _inherit = 'digest.digest'
 
     kpi_project_task_opened = fields.Boolean('Open Tasks')
-    kpi_project_task_opened_value = fields.Integer(compute='_compute_project_task_opened_value')
+    kpi_project_task_opened_value = fields.Integer(compute='_compute_project_task_opened_value', export_string_translation=False)
 
     def _compute_project_task_opened_value(self):
         if not self.env.user.has_group('project.group_project_user'):

--- a/addons/project/models/project_collaborator.py
+++ b/addons/project/models/project_collaborator.py
@@ -8,9 +8,9 @@ class ProjectCollaborator(models.Model):
     _name = 'project.collaborator'
     _description = 'Collaborators in project shared'
 
-    project_id = fields.Many2one('project.project', 'Project Shared', domain=[('privacy_visibility', '=', 'portal')], required=True, readonly=True)
+    project_id = fields.Many2one('project.project', 'Project Shared', domain=[('privacy_visibility', '=', 'portal')], required=True, readonly=True, export_string_translation=False)
     partner_id = fields.Many2one('res.partner', 'Collaborator', required=True, readonly=True)
-    partner_email = fields.Char(related='partner_id.email')
+    partner_email = fields.Char(related='partner_id.email', export_string_translation=False)
 
     _sql_constraints = [
         ('unique_collaborator', 'UNIQUE(project_id, partner_id)', 'A collaborator cannot be selected more than once in the project sharing access. Please remove duplicate(s) and try again.'),

--- a/addons/project/models/project_milestone.py
+++ b/addons/project/models/project_milestone.py
@@ -21,15 +21,15 @@ class ProjectMilestone(models.Model):
     project_id = fields.Many2one('project.project', required=True, default=_get_default_project_id, ondelete='cascade')
     deadline = fields.Date(tracking=True, copy=False)
     is_reached = fields.Boolean(string="Reached", default=False, copy=False)
-    reached_date = fields.Date(compute='_compute_reached_date', store=True)
-    task_ids = fields.One2many('project.task', 'milestone_id', 'Tasks')
+    reached_date = fields.Date(compute='_compute_reached_date', store=True, export_string_translation=False)
+    task_ids = fields.One2many('project.task', 'milestone_id', 'Tasks', export_string_translation=False)
 
     # computed non-stored fields
-    is_deadline_exceeded = fields.Boolean(compute="_compute_is_deadline_exceeded")
-    is_deadline_future = fields.Boolean(compute="_compute_is_deadline_future")
-    task_count = fields.Integer('# of Tasks', compute='_compute_task_count', groups='project.group_project_milestone')
-    done_task_count = fields.Integer('# of Done Tasks', compute='_compute_task_count', groups='project.group_project_milestone')
-    can_be_marked_as_done = fields.Boolean(compute='_compute_can_be_marked_as_done')
+    is_deadline_exceeded = fields.Boolean(compute="_compute_is_deadline_exceeded", export_string_translation=False)
+    is_deadline_future = fields.Boolean(compute="_compute_is_deadline_future", export_string_translation=False)
+    task_count = fields.Integer('# of Tasks', compute='_compute_task_count', groups='project.group_project_milestone, export_string_translation=False')
+    done_task_count = fields.Integer('# of Done Tasks', compute='_compute_task_count', groups='project.group_project_milestone', export_string_translation=False)
+    can_be_marked_as_done = fields.Boolean(compute='_compute_can_be_marked_as_done', export_string_translation=False)
 
     @api.depends('is_reached')
     def _compute_reached_date(self):

--- a/addons/project/models/project_project.py
+++ b/addons/project/models/project_project.py
@@ -64,12 +64,11 @@ class Project(models.Model):
 
     name = fields.Char("Name", index='trigram', required=True, tracking=True, translate=True, default_export_compatible=True)
     description = fields.Html(help="Description to provide more information and context about this project")
-    active = fields.Boolean(default=True, copy=False,
-        help="If the active field is set to False, it will allow you to hide the project without removing it.")
-    sequence = fields.Integer(default=10)
+    active = fields.Boolean(default=True, copy=False, export_string_translation=False)
+    sequence = fields.Integer(default=10, export_string_translation=False)
     partner_id = fields.Many2one('res.partner', string='Customer', auto_join=True, tracking=True, domain="['|', ('company_id', '=?', company_id), ('company_id', '=', False)]")
     company_id = fields.Many2one('res.company', string='Company', compute="_compute_company_id", inverse="_inverse_company_id", store=True, readonly=False)
-    currency_id = fields.Many2one('res.currency', compute="_compute_currency_id", string="Currency", readonly=True)
+    currency_id = fields.Many2one('res.currency', compute="_compute_currency_id", string="Currency", readonly=True, export_string_translation=False)
     analytic_account_id = fields.Many2one('account.analytic.account', string="Analytic Account", copy=False, ondelete='set null',
         domain="['|', ('company_id', '=', False), ('company_id', '=?', company_id)]", check_company=True,
         help="Analytic account to which this project, its tasks and its timesheets are linked. \n"
@@ -80,20 +79,20 @@ class Project(models.Model):
 
     favorite_user_ids = fields.Many2many(
         'res.users', 'project_favorite_user_rel', 'project_id', 'user_id',
-        string='Members')
+        string='Members', export_string_translation=False)
     is_favorite = fields.Boolean(compute='_compute_is_favorite', readonly=False, search='_search_is_favorite',
-        compute_sudo=True, string='Show Project on Dashboard')
+        compute_sudo=True, string='Show Project on Dashboard', export_string_translation=False)
     label_tasks = fields.Char(string='Use Tasks as', default='Tasks', translate=True,
         help="Name used to refer to the tasks of your project e.g. tasks, tickets, sprints, etc...")
     tasks = fields.One2many('project.task', 'project_id', string="Task Activities")
     resource_calendar_id = fields.Many2one(
-        'resource.calendar', string='Working Time', compute='_compute_resource_calendar_id')
-    type_ids = fields.Many2many('project.task.type', 'project_task_type_rel', 'project_id', 'type_id', string='Tasks Stages')
-    task_count = fields.Integer(compute='_compute_task_count', string="Task Count")
-    open_task_count = fields.Integer(compute='_compute_task_count', string="Open Task Count")
-    task_ids = fields.One2many('project.task', 'project_id', string='Tasks',
+        'resource.calendar', string='Working Time', compute='_compute_resource_calendar_id', export_string_translation=False)
+    type_ids = fields.Many2many('project.task.type', 'project_task_type_rel', 'project_id', 'type_id', string='Tasks Stages', export_string_translation=False)
+    task_count = fields.Integer(compute='_compute_task_count', string="Task Count", export_string_translation=False)
+    open_task_count = fields.Integer(compute='_compute_task_count', string="Open Task Count", export_string_translation=False)
+    task_ids = fields.One2many('project.task', 'project_id', string='Tasks', export_string_translation=False,
                                domain=lambda self: [('is_closed', '=', False)])
-    color = fields.Integer(string='Color Index')
+    color = fields.Integer(string='Color Index', export_string_translation=False)
     user_id = fields.Many2one('res.users', string='Project Manager', default=lambda self: self.env.user, tracking=True)
     alias_id = fields.Many2one(help="Internal email associated with this project. Incoming emails are automatically synchronized "
                                     "with Tasks (or optionally Issues if the Issue Tracker module is installed).")
@@ -116,8 +115,8 @@ class Project(models.Model):
             "When a project is shared in edit, the portal user is redirected to the kanban and list views of the tasks. They can modify a selected number of fields on the tasks.\n\n"
             "In any case, an internal user with no project access rights can still access a task, "
             "provided that they are given the corresponding URL (and that they are part of the followers if the project is private).")
-    privacy_visibility_warning = fields.Char('Privacy Visibility Warning', compute='_compute_privacy_visibility_warning')
-    access_instruction_message = fields.Char('Access Instruction Message', compute='_compute_access_instruction_message')
+    privacy_visibility_warning = fields.Char('Privacy Visibility Warning', compute='_compute_privacy_visibility_warning', export_string_translation=False)
+    access_instruction_message = fields.Char('Access Instruction Message', compute='_compute_access_instruction_message', export_string_translation=False)
     date_start = fields.Date(string='Start Date')
     date = fields.Date(string='Expiration Date', index=True, tracking=True,
         help="Date on which this project ends. The timeframe defined on the project is taken into account when viewing its planning.")
@@ -127,11 +126,11 @@ class Project(models.Model):
     task_properties_definition = fields.PropertiesDefinition('Task Properties')
 
     # Project Sharing fields
-    collaborator_ids = fields.One2many('project.collaborator', 'project_id', string='Collaborators', copy=False)
-    collaborator_count = fields.Integer('# Collaborators', compute='_compute_collaborator_count', compute_sudo=True)
+    collaborator_ids = fields.One2many('project.collaborator', 'project_id', string='Collaborators', copy=False, export_string_translation=False)
+    collaborator_count = fields.Integer('# Collaborators', compute='_compute_collaborator_count', compute_sudo=True, export_string_translation=False)
 
     # rating fields
-    rating_request_deadline = fields.Datetime(compute='_compute_rating_request_deadline', store=True)
+    rating_request_deadline = fields.Datetime(compute='_compute_rating_request_deadline', store=True, export_string_translation=False)
     rating_active = fields.Boolean('Customer Ratings', default=lambda self: self.env.user.has_group('project.group_project_rating'))
     rating_status = fields.Selection(
         [('stage', 'when reaching a given stage'),
@@ -152,8 +151,8 @@ class Project(models.Model):
     stage_id = fields.Many2one('project.project.stage', string='Stage', ondelete='restrict', groups="project.group_project_stages",
         tracking=True, index=True, copy=False, default=_default_stage_id, group_expand='_read_group_expand_full')
 
-    update_ids = fields.One2many('project.update', 'project_id')
-    last_update_id = fields.Many2one('project.update', string='Last Update', copy=False)
+    update_ids = fields.One2many('project.update', 'project_id', export_string_translation=False)
+    last_update_id = fields.Many2one('project.update', string='Last Update', copy=False, export_string_translation=False)
     last_update_status = fields.Selection(selection=[
         ('on_track', 'On Track'),
         ('at_risk', 'At Risk'),
@@ -161,16 +160,16 @@ class Project(models.Model):
         ('on_hold', 'On Hold'),
         ('to_define', 'Set Status'),
         ('done', 'Done'),
-    ], default='to_define', compute='_compute_last_update_status', store=True, readonly=False, required=True)
-    last_update_color = fields.Integer(compute='_compute_last_update_color')
-    milestone_ids = fields.One2many('project.milestone', 'project_id', copy=True)
-    milestone_count = fields.Integer(compute='_compute_milestone_count', groups='project.group_project_milestone')
-    milestone_count_reached = fields.Integer(compute='_compute_milestone_reached_count', groups='project.group_project_milestone')
-    is_milestone_exceeded = fields.Boolean(compute="_compute_is_milestone_exceeded", search='_search_is_milestone_exceeded')
-    milestone_progress = fields.Integer("Milestones Reached", compute='_compute_milestone_reached_count', groups="project.group_project_milestone")
-    next_milestone_id = fields.Many2one('project.milestone', compute='_compute_next_milestone_id', groups="project.group_project_milestone")
-    can_mark_milestone_as_done = fields.Boolean(compute='_compute_next_milestone_id', groups="project.group_project_milestone")
-    is_milestone_deadline_exceeded = fields.Boolean(compute='_compute_next_milestone_id', groups="project.group_project_milestone")
+    ], default='to_define', compute='_compute_last_update_status', store=True, readonly=False, required=True, export_string_translation=False)
+    last_update_color = fields.Integer(compute='_compute_last_update_color', export_string_translation=False)
+    milestone_ids = fields.One2many('project.milestone', 'project_id', copy=True, export_string_translation=False)
+    milestone_count = fields.Integer(compute='_compute_milestone_count', groups='project.group_project_milestone', export_string_translation=False)
+    milestone_count_reached = fields.Integer(compute='_compute_milestone_reached_count', groups='project.group_project_milestone', export_string_translation=False)
+    is_milestone_exceeded = fields.Boolean(compute="_compute_is_milestone_exceeded", search='_search_is_milestone_exceeded', export_string_translation=False)
+    milestone_progress = fields.Integer("Milestones Reached", compute='_compute_milestone_reached_count', groups="project.group_project_milestone", export_string_translation=False)
+    next_milestone_id = fields.Many2one('project.milestone', compute='_compute_next_milestone_id', groups="project.group_project_milestone", export_string_translation=False)
+    can_mark_milestone_as_done = fields.Boolean(compute='_compute_next_milestone_id', groups="project.group_project_milestone", export_string_translation=False)
+    is_milestone_deadline_exceeded = fields.Boolean(compute='_compute_next_milestone_id', groups="project.group_project_milestone", export_string_translation=False)
 
     _sql_constraints = [
         ('project_date_greater', 'check(date >= date_start)', "The project's start date must be before its end date.")

--- a/addons/project/models/project_project_stage.py
+++ b/addons/project/models/project_project_stage.py
@@ -9,8 +9,8 @@ class ProjectProjectStage(models.Model):
     _description = 'Project Stage'
     _order = 'sequence, id'
 
-    active = fields.Boolean(default=True)
-    sequence = fields.Integer(default=50)
+    active = fields.Boolean(default=True, export_string_translation=False)
+    sequence = fields.Integer(default=50, export_string_translation=False)
     name = fields.Char(required=True, translate=True)
     mail_template_id = fields.Many2one('mail.template', string='Email Template', domain=[('model', '=', 'project.project')],
         help="If set, an email will be automatically sent to the customer when the project reaches this stage.")

--- a/addons/project/models/project_tags.py
+++ b/addons/project/models/project_tags.py
@@ -19,8 +19,8 @@ class ProjectTags(models.Model):
     name = fields.Char('Name', required=True, translate=True)
     color = fields.Integer(string='Color', default=_get_default_color,
         help="Transparent tags are not visible in the kanban view of your projects and tasks.")
-    project_ids = fields.Many2many('project.project', 'project_project_project_tags_rel', string='Projects')
-    task_ids = fields.Many2many('project.task', string='Tasks')
+    project_ids = fields.Many2many('project.project', 'project_project_project_tags_rel', string='Projects', export_string_translation=False)
+    task_ids = fields.Many2many('project.task', string='Tasks', export_string_translation=False)
 
     _sql_constraints = [
         ('name_uniq', 'unique (name)', "A tag with the same name already exists."),

--- a/addons/project/models/project_task.py
+++ b/addons/project/models/project_task.py
@@ -139,14 +139,14 @@ class Task(models.Model):
     def _read_group_personal_stage_type_ids(self, stages, domain):
         return stages.search(['|', ('id', 'in', stages.ids), ('user_id', '=', self.env.user.id)])
 
-    active = fields.Boolean(default=True)
+    active = fields.Boolean(default=True, export_string_translation=False)
     name = fields.Char(string='Title', tracking=True, required=True, index='trigram')
     description = fields.Html(string='Description', sanitize_attributes=False)
     priority = fields.Selection([
         ('0', 'Low'),
         ('1', 'High'),
     ], default='0', index=True, string="Priority", tracking=True)
-    sequence = fields.Integer(string='Sequence', default=10)
+    sequence = fields.Integer(string='Sequence', default=10, export_string_translation=False)
     stage_id = fields.Many2one('project.task.type', string='Stage', compute='_compute_stage_id',
         store=True, readonly=False, ondelete='restrict', tracking=True, index=True,
         default=_get_default_stage_id, group_expand='_read_group_stage_ids',
@@ -177,21 +177,21 @@ class Task(models.Model):
             "Based on this information you can identify tasks that are stalling and get statistics on the time it usually takes to move tasks from one stage/state to another.")
 
     project_id = fields.Many2one('project.project', string='Project', domain="['|', ('company_id', '=', False), ('company_id', '=?',  company_id)]", index=True, tracking=True, change_default=True)
-    display_in_project = fields.Boolean(default=True, readonly=True)
+    display_in_project = fields.Boolean(default=True, readonly=True, export_string_translation=False)
     task_properties = fields.Properties('Properties', definition='project_id.task_properties_definition', copy=True)
     allocated_hours = fields.Float("Allocated Time", tracking=True)
-    subtask_allocated_hours = fields.Float("Sub-tasks Allocated Time", compute='_compute_subtask_allocated_hours',
+    subtask_allocated_hours = fields.Float("Sub-tasks Allocated Time", compute='_compute_subtask_allocated_hours', export_string_translation=False,
         help="Sum of the hours allocated for all the sub-tasks (and their own sub-tasks) linked to this task. Usually less than or equal to the allocated hours of this task.")
     # Tracking of this field is done in the write function
     user_ids = fields.Many2many('res.users', relation='project_task_user_rel', column1='task_id', column2='user_id',
         string='Assignees', context={'active_test': False}, tracking=True, default=_default_user_ids, domain="[('share', '=', False), ('active', '=', True)]")
     # User names displayed in project sharing views
-    portal_user_names = fields.Char(compute='_compute_portal_user_names', compute_sudo=True, search='_search_portal_user_names')
+    portal_user_names = fields.Char(compute='_compute_portal_user_names', compute_sudo=True, search='_search_portal_user_names', export_string_translation=False)
     # Second Many2many containing the actual personal stage for the current user
     # See project_task_stage_personal.py for the model defininition
     personal_stage_type_ids = fields.Many2many('project.task.type', 'project_task_user_rel', column1='task_id', column2='stage_id',
         ondelete='restrict', group_expand='_read_group_personal_stage_type_ids', copy=False,
-        domain="[('user_id', '=', uid)]", string='Personal Stages')
+        domain="[('user_id', '=', uid)]", string='Personal Stages', export_string_translation=False)
     # Personal Stage computed from the user
     personal_stage_id = fields.Many2one('project.task.stage.personal', string='Personal Stage State', compute_sudo=False,
         compute='_compute_personal_stage_id', help="The current user's personal stage.")
@@ -207,17 +207,17 @@ class Task(models.Model):
         domain="['|', ('company_id', '=?', company_id), ('company_id', '=', False)]", )
     email_cc = fields.Char(help='Email addresses that were in the CC of the incoming emails from this task and that are not currently linked to an existing customer.')
     company_id = fields.Many2one('res.company', string='Company', compute='_compute_company_id', store=True, readonly=False, recursive=True, copy=True, default=_default_company_id)
-    color = fields.Integer(string='Color Index')
+    color = fields.Integer(string='Color Index', export_string_translation=False)
     rating_active = fields.Boolean(string='Project Rating Status', related="project_id.rating_active")
-    attachment_ids = fields.One2many('ir.attachment', compute='_compute_attachment_ids', string="Main Attachments",
-        help="Attachments that don't come from a message.")
+    attachment_ids = fields.One2many('ir.attachment', compute='_compute_attachment_ids', string="Attachments that don't come from a message",
+        export_string_translation=False)
     # In the domain of displayed_image_id, we couln't use attachment_ids because a one2many is represented as a list of commands so we used res_model & res_id
     displayed_image_id = fields.Many2one('ir.attachment', domain="[('res_model', '=', 'project.task'), ('res_id', '=', id), ('mimetype', 'ilike', 'image')]", string='Cover Image')
 
     parent_id = fields.Many2one('project.task', string='Parent Task', index=True, domain="['!', ('id', 'child_of', id)]", tracking=True)
-    child_ids = fields.One2many('project.task', 'parent_id', string="Sub-tasks", domain="[('recurring_task', '=', False)]")
-    subtask_count = fields.Integer("Sub-task Count", compute='_compute_subtask_count')
-    closed_subtask_count = fields.Integer("Closed Sub-tasks Count", compute='_compute_subtask_count')
+    child_ids = fields.One2many('project.task', 'parent_id', string="Sub-tasks", domain="[('recurring_task', '=', False)]", export_string_translation=False)
+    subtask_count = fields.Integer("Sub-task Count", compute='_compute_subtask_count', export_string_translation=False)
+    closed_subtask_count = fields.Integer("Closed Sub-tasks Count", compute='_compute_subtask_count', export_string_translation=False)
     project_privacy_visibility = fields.Selection(related='project_id.privacy_visibility', string="Project Visibility")
     # Computed field about working time elapsed between record creation and assignation/closing.
     working_hours_open = fields.Float(compute='_compute_elapsed', string='Working Hours to Assign', digits=(16, 2), store=True, aggregator="avg")
@@ -225,8 +225,8 @@ class Task(models.Model):
     working_days_open = fields.Float(compute='_compute_elapsed', string='Working Days to Assign', store=True, aggregator="avg")
     working_days_close = fields.Float(compute='_compute_elapsed', string='Working Days to Close', store=True, aggregator="avg")
     # customer portal: include comment and (incoming/outgoing) emails in communication history
-    website_message_ids = fields.One2many(domain=lambda self: [('model', '=', self._name), ('message_type', 'in', ['email', 'comment', 'email_outgoing'])])
-    allow_milestones = fields.Boolean(related='project_id.allow_milestones')
+    website_message_ids = fields.One2many(domain=lambda self: [('model', '=', self._name), ('message_type', 'in', ['email', 'comment', 'email_outgoing'])], export_string_translation=False)
+    allow_milestones = fields.Boolean(related='project_id.allow_milestones', export_string_translation=False)
     milestone_id = fields.Many2one(
         'project.milestone',
         'Milestone',
@@ -241,9 +241,10 @@ class Task(models.Model):
     has_late_and_unreached_milestone = fields.Boolean(
         compute='_compute_has_late_and_unreached_milestone',
         search='_search_has_late_and_unreached_milestone',
+        export_string_translation=False,
     )
     # Task Dependencies fields
-    allow_task_dependencies = fields.Boolean(related='project_id.allow_task_dependencies')
+    allow_task_dependencies = fields.Boolean(related='project_id.allow_task_dependencies', export_string_translation=False)
     # Tracking of this field is done in the write function
     depend_on_ids = fields.Many2many('project.task', relation="task_dependencies_rel", column1="task_id",
                                      column2="depends_on_id", string="Blocked By", tracking=True, copy=False,
@@ -251,12 +252,12 @@ class Task(models.Model):
     depend_on_count = fields.Integer(string="Depending on Tasks", compute='_compute_depend_on_count', compute_sudo=True)
     dependent_ids = fields.Many2many('project.task', relation="task_dependencies_rel", column1="depends_on_id",
                                      column2="task_id", string="Block", copy=False,
-                                     domain="[('project_id', '!=', False), ('id', '!=', id)]")
-    dependent_tasks_count = fields.Integer(string="Dependent Tasks", compute='_compute_dependent_tasks_count')
+                                     domain="[('project_id', '!=', False), ('id', '!=', id)]", export_string_translation=False)
+    dependent_tasks_count = fields.Integer(string="Dependent Tasks", compute='_compute_dependent_tasks_count', export_string_translation=False)
 
     # Project sharing fields
-    display_parent_task_button = fields.Boolean(compute='_compute_display_parent_task_button', compute_sudo=True)
-    current_user_same_company_partner = fields.Boolean(compute='_compute_current_user_same_company_partner', compute_sudo=True)
+    display_parent_task_button = fields.Boolean(compute='_compute_display_parent_task_button', compute_sudo=True, export_string_translation=False)
+    current_user_same_company_partner = fields.Boolean(compute='_compute_current_user_same_company_partner', compute_sudo=True, export_string_translation=False)
 
     # recurrence fields
     recurring_task = fields.Boolean(string="Recurrent")

--- a/addons/project/models/project_task_recurrence.py
+++ b/addons/project/models/project_task_recurrence.py
@@ -18,7 +18,7 @@ class ProjectTaskRecurrence(models.Model):
         ('week', 'Weeks'),
         ('month', 'Months'),
         ('year', 'Years'),
-    ], default='week')
+    ], default='week', export_string_translation=False)
     repeat_type = fields.Selection([
         ('forever', 'Forever'),
         ('until', 'Until'),

--- a/addons/project/models/project_task_stage_personal.py
+++ b/addons/project/models/project_task_stage_personal.py
@@ -9,9 +9,9 @@ class ProjectTaskStagePersonal(models.Model):
     _table = 'project_task_user_rel'
     _rec_name = 'stage_id'
 
-    task_id = fields.Many2one('project.task', required=True, ondelete='cascade', index=True)
-    user_id = fields.Many2one('res.users', required=True, ondelete='cascade', index=True)
-    stage_id = fields.Many2one('project.task.type', domain="[('user_id', '=', user_id)]", ondelete='set null')
+    task_id = fields.Many2one('project.task', required=True, ondelete='cascade', index=True, export_string_translation=False)
+    user_id = fields.Many2one('res.users', required=True, ondelete='cascade', index=True, export_string_translation=False)
+    stage_id = fields.Many2one('project.task.type', domain="[('user_id', '=', user_id)]", ondelete='set null', export_string_translation=False)
 
     _sql_constraints = [
         ('project_personal_stage_unique', 'UNIQUE (task_id, user_id)', 'A task can only have a single personal stage per user.'),

--- a/addons/project/models/project_task_type.py
+++ b/addons/project/models/project_task_type.py
@@ -19,7 +19,7 @@ class ProjectTaskType(models.Model):
     def _default_user_id(self):
         return 'default_project_id' not in self.env.context and self.env.uid
 
-    active = fields.Boolean('Active', default=True)
+    active = fields.Boolean('Active', default=True, export_string_translation=False)
     name = fields.Char(string='Name', required=True, translate=True)
     sequence = fields.Integer(default=1)
     project_ids = fields.Many2many('project.project', 'project_task_type_rel', 'type_id', 'project_id', string='Projects',
@@ -43,7 +43,7 @@ class ProjectTaskType(models.Model):
         help="Automatically modify the state when the customer replies to the feedback for this stage.\n"
             " * Good feedback from the customer will update the state to 'Approved' (green bullet).\n"
             " * Neutral or bad feedback will set the kanban state to 'Changes Requested' (orange bullet).\n")
-    disabled_rating_warning = fields.Text(compute='_compute_disabled_rating_warning')
+    disabled_rating_warning = fields.Text(compute='_compute_disabled_rating_warning', export_string_translation=False)
 
     user_id = fields.Many2one('res.users', 'Stage Owner', default=_default_user_id, compute='_compute_user_id', store=True, index=True)
 

--- a/addons/project/models/project_update.py
+++ b/addons/project/models/project_update.py
@@ -49,18 +49,18 @@ class ProjectUpdate(models.Model):
         ('off_track', 'Off Track'),
         ('on_hold', 'On Hold'),
         ('done', 'Done'),
-    ], required=True, tracking=True)
-    color = fields.Integer(compute='_compute_color')
+    ], required=True, tracking=True, export_string_translation=False)
+    color = fields.Integer(compute='_compute_color', export_string_translation=False)
     progress = fields.Integer(tracking=True)
-    progress_percentage = fields.Float(compute='_compute_progress_percentage')
+    progress_percentage = fields.Float(compute='_compute_progress_percentage', export_string_translation=False)
     user_id = fields.Many2one('res.users', string='Author', required=True, default=lambda self: self.env.user)
     description = fields.Html()
     date = fields.Date(default=fields.Date.context_today, tracking=True)
-    project_id = fields.Many2one('project.project', required=True)
-    name_cropped = fields.Char(compute="_compute_name_cropped")
-    task_count = fields.Integer("Task Count", readonly=True)
-    closed_task_count = fields.Integer("Closed Task Count", readonly=True)
-    closed_task_percentage = fields.Integer("Closed Task Percentage", compute="_compute_closed_task_percentage")
+    project_id = fields.Many2one('project.project', required=True, export_string_translation=False)
+    name_cropped = fields.Char(compute="_compute_name_cropped", export_string_translation=False)
+    task_count = fields.Integer("Task Count", readonly=True, export_string_translation=False)
+    closed_task_count = fields.Integer("Closed Task Count", readonly=True, export_string_translation=False)
+    closed_task_percentage = fields.Integer("Closed Task Percentage", compute="_compute_closed_task_percentage", export_string_translation=False)
 
     @api.depends('status')
     def _compute_color(self):

--- a/addons/project/models/res_partner.py
+++ b/addons/project/models/res_partner.py
@@ -10,9 +10,9 @@ class ResPartner(models.Model):
     """ Inherits partner and adds Tasks information in the partner form """
     _inherit = 'res.partner'
 
-    project_ids = fields.One2many('project.project', 'partner_id', string='Projects')
-    task_ids = fields.One2many('project.task', 'partner_id', string='Tasks')
-    task_count = fields.Integer(compute='_compute_task_count', string='# Tasks')
+    project_ids = fields.One2many('project.project', 'partner_id', string='Projects', export_string_translation=False)
+    task_ids = fields.One2many('project.task', 'partner_id', string='Tasks', export_string_translation=False)
+    task_count = fields.Integer(compute='_compute_task_count', string='# Tasks', export_string_translation=False)
 
     @api.constrains('company_id', 'project_ids')
     def _ensure_same_company_than_projects(self):
