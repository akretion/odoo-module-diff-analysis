PR: https://github.com/odoo/odoo/pull/

From: 3dd3e2648329995ddc309081787e19005d48ccd0
From: jem-odoo
Date: 2018-04-06 12:30:47

Breaking data model changes score: 7, change matches:
-    _inherit = 'account.analytic.account'
-    company_uom_id = fields.Many2one('uom.uom', related='company_id.project_time_mode_id', string="Company UOM")
-    project_ids = fields.One2many('project.project', 'analytic_account_id', string='Projects')
-    project_count = fields.Integer("Project Count", compute='_compute_project_count')
-    _inherits = {'account.analytic.account': "analytic_account_id"}
-    analytic_account_id = fields.Many2one(

Total Changes: 74

[IMP] project: a project is not an analytic account anymore !

This commit removes the inheritS between account.analytic.account and
project.project. This means :
* When a project is created, an analytic account is not necessarily
genareted
* project has now its own name, company_id and partner_id fields
* an analytic account can be linked to several project
* project module does not depend anymore of analytic, but hr_timesheet
does.

This change implied
* an analytic account is required on project to timesheet on
its tasks. So, when checking 'allow_timsheets', if an AA is not
provided at project creation, an AA will be generated.
* to timesheet on project, an active AA is required. We don't want
timesheeting on project linked to unused AA to avoid bad analytic
entries.

This prepare the fact a sale order can create multiple project, sharing
the same analytic account (the one from the SO).

================================= pseudo patch: =================================

--- a/addons/project/models/__init__.py
+++ b/addons/project/models/__init__.py
@@ -1,7 +1,6 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
 
-from . import analytic
 from . import project
 from . import res_config_settings
 from . import res_company

--- a/addons/project/models/analytic.py
+++ b/None
@@ -1,53 +0,0 @@
-# -*- coding: utf-8 -*-
-# Part of Odoo. See LICENSE file for full copyright and licensing details.
-
-from odoo import api, fields, models, _
-from odoo.exceptions import UserError
-
-
-class AccountAnalyticAccount(models.Model):
-    _inherit = 'account.analytic.account'
-    _description = 'Analytic Account'
-
-    company_uom_id = fields.Many2one('uom.uom', related='company_id.project_time_mode_id', string="Company UOM")
-    project_ids = fields.One2many('project.project', 'analytic_account_id', string='Projects')
-    project_count = fields.Integer("Project Count", compute='_compute_project_count')
-
-    def _compute_project_count(self):
-        for account in self:
-            account.project_count = len(account.with_context(active_test=False).project_ids)
-
-    @api.multi
-    def unlink(self):
-        projects = self.env['project.project'].search([('analytic_account_id', 'in', self.ids)])
-        has_tasks = self.env['project.task'].search_count([('project_id', 'in', projects.ids)])
-        if has_tasks:
-            raise UserError(_('Please remove existing tasks in the project linked to the accounts you want to delete.'))
-        return super(AccountAnalyticAccount, self).unlink()
-
-    @api.model
-    def name_search(self, name, args=None, operator='ilike', limit=100):
-        if args is None:
-            args = []
-        if self.env.context.get('current_model') == 'project.project':
-            return self.search(args + [('name', operator, name)], limit=limit).name_get()
-
-        return super(AccountAnalyticAccount, self).name_search(name, args=args, operator=operator, limit=limit)
-
-    @api.multi
-    def projects_action(self):
-        projects = self.with_context(active_test=False).mapped('project_ids')
-        result = {
-            "type": "ir.actions.act_window",
-            "res_model": "project.project",
-            "views": [[False, "tree"], [False, "form"]],
-            "domain": [["id", "in", projects.ids]],
-            "context": {"create": False},
-            "name": "Projects",
-        }
-        if len(projects) == 1:
-            result['views'] = [(False, "form")]
-            result['res_id'] = projects.id
-        else:
-            result = {'type': 'ir.actions.act_window_close'}
-        return result

--- a/addons/project/models/project.py
+++ b/addons/project/models/project.py
@@ -69,7 +69,6 @@ class Project(models.Model):
     _name = "project.project"
     _description = "Project"
     _inherit = ['portal.mixin', 'mail.alias.mixin', 'mail.thread']
-    _inherits = {'account.analytic.account': "analytic_account_id"}
     _order = "sequence, name, id"
     _period_number = 5
 
@@ -83,15 +82,10 @@ class Project(models.Model):
 
     @api.multi
     def unlink(self):
-        analytic_accounts_to_delete = self.env['account.analytic.account']
         for project in self:
             if project.tasks:
                 raise UserError(_('You cannot delete a project containing tasks. You can either delete all the project\'s tasks and then delete the project or simply deactivate the project.'))
-            if project.analytic_account_id and not project.analytic_account_id.line_ids:
-                analytic_accounts_to_delete |= project.analytic_account_id
-        res = super(Project, self).unlink()
-        analytic_accounts_to_delete.unlink()
-        return res
+        return super(Project, self).unlink()
 
     def _compute_attached_docs_count(self):
         Attachment = self.env['ir.attachment']
@@ -179,14 +173,14 @@ class Project(models.Model):
     def _get_default_favorite_user_ids(self):
         return [(6, 0, [self.env.uid])]
 
+    name = fields.Char("Name", index=True, required=True, track_visibility='onchange')
     active = fields.Boolean(default=True,
         help="If the active field is set to False, it will allow you to hide the project without removing it.")
     sequence = fields.Integer(default=10, help="Gives the sequence order when displaying a list of Projects.")
-    analytic_account_id = fields.Many2one(
-        'account.analytic.account', string='Contract/Analytic',
-        help="Link this project to an analytic account if you need financial management on projects. "
-             "It enables you to connect projects with budgets, planning, cost and revenue analysis, timesheets on projects, etc.",
-        ondelete="cascade", required=True, auto_join=True)
+    partner_id = fields.Many2one('res.partner', string='Customer', auto_join=True, track_visibility='onchange')
+    company_id = fields.Many2one('res.company', string='Company', required=True, default=lambda self: self.env.user.company_id)
+    currency_id = fields.Many2one('res.currency', related="company_id.currency_id", string="Currency", readonly=True)
+
     favorite_user_ids = fields.Many2many(
         'res.users', 'project_favorite_user_rel', 'project_id', 'user_id',
         default=_get_default_favorite_user_ids,
@@ -315,8 +309,6 @@ class Project(models.Model):
         if 'active' in vals:
             # archiving/unarchiving a project does it on its tasks, too
             self.with_context(active_test=False).mapped('tasks').write({'active': vals['active']})
-            # archiving/unarchiving a project implies that we don't want to use the analytic account anymore
-            self.with_context(active_test=False).mapped('analytic_account_id').write({'active': vals['active']})
         if vals.get('partner_id') or vals.get('privacy_visibility'):
             for project in self.filtered(lambda project: project.privacy_visibility == 'portal'):
                 project.message_subscribe(project.partner_id.ids)
