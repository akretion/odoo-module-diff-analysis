PR: https://github.com/odoo/odoo/pull/

From: 84f528bcff12e39b5ed172a4789aab27c9f89a19
From: Mitali Patel
Date: 2018-08-03 13:20:42

Structural Changes: 1
Total Changes: 70

[IMP] Portal - Share link : Easily share the url of a document

Purpose
=======
- Quickly share the url to someone else (a client, a colleague,...)
- Ensure that the recipient can access at least
  the portal view of the shared record.
- Typically used when a client cannot retrieve the mail to access his order.
  The share link can be used in this case.

Specifications
==============
For any object inheriting form portal.mixin:
    - Add a button SHARE (not visible in edit mode)
    - When clicking on this button, a popup opens with :
        - A warning message for tasks and projects only (see below)
        - the link (like in gmail) that can be copied
        - Recipients
        - mail composer (with preselected template) ==> see below
        - button [Send Link] [Copy Link] Discard
        - After sharing document, put internal note like
          "Document shared to xyz,...." with template message
    - Anyone with the link, even anonymous user (not logged in) can have access
      to the document with the access token provided in the url.

Impacted models:
    - account.invoice (Community)
    - project.project (Community)
    - project.task (Community)
    - purchase.order (Community)
    - sale.order (Community)
    - helpdesk.ticket (Enterprise)

Warning messages and access rules:
    Allowed :
        - SO canceled or draft will be accessible with the link
          with access_token
        - If the customer account is B2B (signup not enabled), the recipient
          will anyway see the document as the user specifically wants the
          recipient to see the document.
    Restrictions :
        - For Project and Task, if the privacy is not public, then, there is a
          contradiction between the access_token mechanism
          and the privacy of the document.
        - A warning message will be displayed in the share wizard to inform the
          user if the document cannot be visible by the recipients and to
          ask him to set the privacy to 'Visible by following customer'.
          The send button will, in that case, be hidden.
        - To avoid to block the share for a new project, default privacy value
          is now set to 'Visible by followong customer'

Technical implementation
========================
- Move the access_token mechanism (field + methods + mail controller)
  to the portal.mixin to be able to use it in a generic way for each object
  inheriting the portal.mixin
- Generalise a part of the _*model*_get_page_view_values method
  into a single one in portal
- Generalize the _*model*_check_access into the portal controller of the
  portal module
- Remove the init_column + default value for the access_token
  > old records have an access_token,
  > new one won't but it will be generated on demand via the get_access_token
  Done for performance reasons
- Add share button into action menu separately. + kanban view context menu
  (except for task and project where button not in action menu but 'simple'
  button for task and project because other modules already provide action
  to send documents by email, which is not the case for project and task.)
- Add a sign_token used to authentify the recipient in the portal view chatter,
  if any. The message will be posted as if the user was logged in.
- Set the _get_share_url as private for security reason
- Add a redirect parameter to _get_share_url to get
    If false : The direct portal view url
    If True : The redirect url (mail/view/?)
- Cleaning up unnecessary code

- Bug fix :
    - Before, if user was not logged and record had partner_id,
      if partner id was null, post message was done as admin.
      Now, the post message is done as public user.
    - If the user had an uid but had no access_token, he could be able
      to gain the access token of the record.
      check_access_rights was missing in the get_access_action.

Task ID : 30985
Closes #25629

================================= pseudo patch: =================================

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -91,9 +91,6 @@ class SaleOrder(models.Model):
         )
         return super(SaleOrder, self).get_empty_list_help(help)
 
-    def _get_default_access_token(self):
-        return str(uuid.uuid4())
-
     @api.model
     def _default_note(self):
         return self.env['ir.config_parameter'].sudo().get_param('sale.use_sale_note') and self.env.user.company_id.sale_note or ''
@@ -113,9 +110,6 @@ class SaleOrder(models.Model):
     name = fields.Char(string='Order Reference', required=True, copy=False, readonly=True, states={'draft': [('readonly', False)]}, index=True, default=lambda self: _('New'))
     origin = fields.Char(string='Source Document', help="Reference of the document that generated this sales order request.")
     client_order_ref = fields.Char(string='Customer Reference', copy=False)
-    access_token = fields.Char(
-        'Security Token', copy=False,
-        default=_get_default_access_token)
     state = fields.Selection([
         ('draft', 'Quotation'),
         ('sent', 'Quotation Sent'),
@@ -163,10 +157,10 @@ class SaleOrder(models.Model):
     signature = fields.Binary('Signature', help='Signature received through the portal.', copy=False, attachment=True)
     signed_by = fields.Char('Signed by', help='Name of the person that signed the SO.', copy=False)
 
-    def _compute_portal_url(self):
-        super(SaleOrder, self)._compute_portal_url()
+    def _compute_access_url(self):
+        super(SaleOrder, self)._compute_access_url()
         for order in self:
-            order.portal_url = '/my/orders/%s' % (order.id)
+            order.access_url = '/my/orders/%s' % (order.id)
 
     def _compute_is_expired(self):
         now = datetime.now()
@@ -344,27 +338,6 @@ class SaleOrder(models.Model):
                 return self.browse(order_ids).name_get()
         return super(SaleOrder, self)._name_search(name, args=args, operator=operator, limit=limit, name_get_uid=name_get_uid)
 
-    @api.model_cr_context
-    def _init_column(self, column_name):
-        """ Initialize the value of the given column for existing rows.
-
-            Overridden here because we need to generate different access tokens
-            and by default _init_column calls the default method once and applies
-            it for every record.
-        """
-        if column_name != 'access_token':
-            super(SaleOrder, self)._init_column(column_name)
-        else:
-            query = """UPDATE %(table_name)s
-                          SET %(column_name)s = md5(md5(random()::varchar || id::varchar) || clock_timestamp()::varchar)::uuid::varchar
-                        WHERE %(column_name)s IS NULL
-                    """ % {'table_name': self._table, 'column_name': column_name}
-            self.env.cr.execute(query)
-
-    def _generate_access_token(self):
-        for order in self:
-            order.access_token = self._get_default_access_token()
-
     @api.multi
     def _prepare_invoice(self):
         """
@@ -623,43 +596,6 @@ class SaleOrder(models.Model):
         res = [(l[0].name, l[1]['amount'], l[1]['base'], len(res)) for l in res]
         return res
 
-    @api.multi
-    def get_access_action(self, access_uid=None):
-        """ Instead of the classic form view, redirect to the online order for
-        portal users or if force_website=True in the context. """
-        # TDE note: read access on sales order to portal users granted to followed sales orders
-        self.ensure_one()
-
-        if self.state != 'cancel' and (self.state != 'draft' or self.env.context.get('mark_so_as_sent')):
-            user, record = self.env.user, self
-            if access_uid:
-                user = self.env['res.users'].sudo().browse(access_uid)
-                record = self.sudo(user)
-            if user.share or self.env.context.get('force_website'):
-                try:
-                    record.check_access_rule('read')
-                except AccessError:
-                    if self.env.context.get('force_website'):
-                        return {
-                            'type': 'ir.actions.act_url',
-                            'url': '/my/orders/%s' % self.id,
-                            'target': 'self',
-                            'res_id': self.id,
-                        }
-                    else:
-                        pass
-                else:
-                    return {
-                        'type': 'ir.actions.act_url',
-                        'url': '/my/orders/%s?access_token=%s' % (self.id, self.access_token),
-                        'target': 'self',
-                        'res_id': self.id,
-                    }
-        return super(SaleOrder, self).get_access_action(access_uid)
-
-    def get_mail_url(self):
-        return self.get_share_url()
-
     def get_portal_confirmation_action(self):
         if self.company_id.portal_confirmation_sign and not self.signature:
             return 'sign'
