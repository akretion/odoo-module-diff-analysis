PR: https://github.com/odoo/odoo/pull/144608

From: 9262fd1d60d4e04ac6a8f213f726bcea0ccfb0a0
From: Pieter Claeys (clpi)
Date: 2024-07-11 12:17:04

Breaking data model changes score: 3, change matches:
-    invoice_lines = fields.Many2many(
+    account_move_line_ids = fields.Many2many(

Total Changes: 29

[REF] sale, purchase: rename invoice_lines to account_move_line_ids

Rename the invoice_lines fields to correct account_move_line_ids.

task-3600910

Part-of: odoo/odoo#144608
Related: odoo/enterprise#55711
Related: odoo/upgrade#5627
Signed-off-by: Tiffany Chang (tic) <tic@odoo.com>

================================= pseudo patch: =================================

--- a/addons/sale/models/account_move_line.py
+++ b/addons/sale/models/account_move_line.py
@@ -225,7 +225,7 @@ class AccountMoveLine(models.Model):
 
     def _get_downpayment_lines(self):
         # OVERRIDE
-        return self.sale_line_ids.filtered('is_downpayment').invoice_lines.filtered(lambda line: line.move_id._is_downpayment())
+        return self.sale_line_ids.filtered('is_downpayment').account_move_line_ids.filtered(lambda line: line.move_id._is_downpayment())
 
     def _get_order_lines(self):
         return self.sale_line_ids or super()._get_order_lines()

--- a/addons/sale/models/sale_order.py
+++ b/addons/sale/models/sale_order.py
@@ -454,14 +454,14 @@ class SaleOrder(models.Model):
                 )
             order.team_id = cached_teams[key]
 
-    @api.depends('order_line.move_line_ids')
+    @api.depends('order_line.account_move_line_ids')
     def _get_invoiced(self):
         # The invoice_ids are obtained thanks to the invoice lines of the SO
         # lines, and we also search for possible refunds created directly from
         # existing invoices. This is necessary since such a refund is not
         # directly linked to the SO.
         for order in self:
-            invoices = order.order_line.invoice_lines.move_id.filtered(lambda r: r.move_type in ('out_invoice', 'out_refund'))
+            invoices = order.order_line.account_move_line_ids.move_id.filtered(lambda r: r.move_type in ('out_invoice', 'out_refund'))
             order.invoice_ids = invoices
             order.invoice_count = len(invoices)
 
@@ -483,7 +483,7 @@ class SaleOrder(models.Model):
         elif operator == '=' and not value:
             # special case for [('invoice_ids', '=', False)], i.e. "Invoices is not set"
             #
-            # We cannot just search [('order_line.invoice_lines', '=', False)]
+            # We cannot just search [('order_line.account_move_line_ids', '=', False)]
             # because it returns orders with uninvoiced lines, which is not
             # same "Invoices is not set" (some lines may have invoices and some
             # doesn't)
@@ -491,14 +491,14 @@ class SaleOrder(models.Model):
             # A solution is making inverted search first ("orders with invoiced
             # lines") and then invert results ("get all other orders")
             #
-            # Domain below returns subset of ('order_line.invoice_lines', '!=', False)
+            # Domain below returns subset of ('order_line.account_move_line_ids', '!=', False)
             order_ids = self._search([
-                ('order_line.invoice_lines.move_id.move_type', 'in', ('out_invoice', 'out_refund'))
+                ('order_line.account_move_line_ids.move_id.move_type', 'in', ('out_invoice', 'out_refund'))
             ])
             return [('id', 'not in', order_ids)]
         return [
-            ('order_line.invoice_lines.move_id.move_type', 'in', ('out_invoice', 'out_refund')),
-            ('order_line.invoice_lines.move_id', operator, value),
+            ('order_line.account_move_line_ids.move_id.move_type', 'in', ('out_invoice', 'out_refund')),
+            ('order_line.account_move_line_ids.move_id', operator, value),
         ]
 
     @api.depends('state', 'order_line.invoice_status')
@@ -1362,7 +1362,7 @@ class SaleOrder(models.Model):
                     if not order_line.is_downpayment:
                         continue
                     inv_amt = order_amt = 0
-                    for invoice_line in order_line.invoice_lines:
+                    for invoice_line in order_line.account_move_line_ids:
                         sign = 1 if invoice_line.move_id.is_inbound() else -1
                         if invoice_line.move_id == move:
                             inv_amt += invoice_line.price_total * sign

--- a/addons/sale/models/sale_order_line.py
+++ b/addons/sale/models/sale_order_line.py
@@ -202,7 +202,7 @@ class SaleOrderLine(models.Model):
         comodel_name='account.analytic.line', inverse_name='so_line',
         string="Analytic lines")
 
-    invoice_lines = fields.Many2many(
+    account_move_line_ids = fields.Many2many(
         comodel_name='account.move.line',
         relation='sale_order_line_invoice_rel', column1='order_line_id', column2='invoice_line_id',
         string="Invoice Lines",
@@ -710,7 +710,7 @@ class SaleOrderLine(models.Model):
 
         return result
 
-    @api.depends('invoice_lines.move_id.state', 'invoice_lines.quantity')
+    @api.depends('account_move_line_ids.move_id.state', 'account_move_line_ids.quantity')
     def _compute_qty_invoiced(self):
         """
         Compute the quantity invoiced. If case of a refund, the quantity invoiced is decreased. Note
@@ -786,7 +786,8 @@ class SaleOrderLine(models.Model):
         self.ensure_one()
         return self.product_id.id != self.company_id.sale_discount_product_id.id
 
-    @api.depends('invoice_lines', 'invoice_lines.price_total', 'invoice_lines.move_id.state', 'invoice_lines.move_id.move_type')
+    @api.depends('account_move_line_ids', 'account_move_line_ids.price_total', 'account_move_line_ids.move_id.state',
+                 'account_move_line_ids.move_id.move_type')
     def _compute_untaxed_amount_invoiced(self):
         """ Compute the untaxed amount already invoiced from the sale order line, taking the refund attached
             the so line into account. This amount is computed as
@@ -1028,7 +1029,7 @@ class SaleOrderLine(models.Model):
         return self.filtered(
             lambda line:
                 line.state == 'sale'
-                and (line.invoice_lines or not line.is_downpayment)
+                and (line.account_move_line_ids or not line.is_downpayment)
                 and not line.display_type
         )
 
@@ -1096,7 +1097,7 @@ class SaleOrderLine(models.Model):
         })
         self._set_analytic_distribution(res, **optional_values)
         if self.is_downpayment:
-            res['account_id'] = self.invoice_lines.filtered('is_downpayment').account_id[:1].id
+            res['account_id'] = self.account_move_line_ids.filtered('is_downpayment').account_id[:1].id
         if optional_values:
             res.update(optional_values)
         if self.display_type:
