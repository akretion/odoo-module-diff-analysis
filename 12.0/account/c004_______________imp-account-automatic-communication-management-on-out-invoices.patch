PR: https://github.com/odoo/odoo/pull/

From: b5bb5bd421ad5c643f72602f6a0f97a4a0eb8711
From: Laurent Smet
Date: 2018-07-26 20:45:41

Breaking data model changes score: 2.4, change matches:
-    reference = fields.Char(string='Vendor Reference', copy=False,
+    reference = fields.Char(string='Payment Ref.', copy=False,
-    reference_type = fields.Selection('_get_reference_type', string='Payment Reference',
-    incoterm_id = fields.Many2one('account.incoterms', string='Default incoterm',

Total Changes: 38

[IMP] account: automatic communication management on out_invoices

On the accounting config, you can select an automatic way to compute the
reference on invoice and then, improve the reconciliation in a later task:
- free communication: set what you want as reference (default)
- based on partner: find the partner more easily
- based on number: retrieve the invoice directly

Was task: 1847703
Was part of PR #25921

================================= pseudo patch: =================================

--- a/addons/account/models/account_invoice.py
+++ b/addons/account/models/account_invoice.py
@@ -98,10 +98,6 @@ class AccountInvoice(models.Model):
         journal = self._default_journal()
         return journal.currency_id or journal.company_id.currency_id or self.env.user.company_id.currency_id
 
-    @api.model
-    def _get_reference_type(self):
-        return [('none', _('Free Reference'))]
-
     @api.one
     @api.depends(
         'state', 'currency_id', 'invoice_line_ids.price_subtotal',
@@ -256,11 +252,8 @@ class AccountInvoice(models.Model):
     move_name = fields.Char(string='Journal Entry Name', readonly=False,
         default=False, copy=False,
         help="Technical field holding the number given to the invoice, automatically set when the invoice is validated then stored to set the same number again if the invoice is cancelled, set to draft and re-validated.")
-    reference = fields.Char(string='Vendor Reference', copy=False,
+    reference = fields.Char(string='Payment Ref.', copy=False,
         help="The partner reference of this invoice.", readonly=True, states={'draft': [('readonly', False)]})
-    reference_type = fields.Selection('_get_reference_type', string='Payment Reference',
-        required=True, readonly=True, states={'draft': [('readonly', False)]},
-        default='none')
     comment = fields.Text('Additional Information', readonly=True, states={'draft': [('readonly', False)]})
 
     state = fields.Selection([
@@ -394,6 +387,18 @@ class AccountInvoice(models.Model):
             invoice.vendor_display_name = vendor_display_name
             invoice.invoice_icon = invoice.source_email and '@' or ''
 
+    @api.multi
+    def _get_computed_reference(self):
+        self.ensure_one()
+        if self.company_id.invoice_reference_type == 'invoice_number':
+            identification_number = int(re.match('.*?([0-9]+)$', self.number).group(1))
+            prefix = self.number
+        else:
+            #self.company_id.invoice_reference_type == 'partner'
+            identification_number = self.partner_id.id
+            prefix = 'CUST'
+        return '%s/%s' % (prefix, str(identification_number % 97).rjust(2, '0'))
+
     # Load all Vendor Bill lines
     @api.onchange('vendor_bill_id')
     def _onchange_vendor_bill(self):
@@ -1310,7 +1315,12 @@ class AccountInvoice(models.Model):
     def invoice_validate(self):
         for invoice in self.filtered(lambda invoice: invoice.partner_id not in invoice.message_partner_ids):
             invoice.message_subscribe([invoice.partner_id.id])
+
+            # Auto-compute reference, if not already existing and if configured on company
+            if not invoice.reference and invoice.company_id.invoice_reference_type != 'none' and invoice.type == 'out_invoice':
+                invoice.reference = invoice._get_computed_reference()
         self._check_duplicate_supplier_reference()
+
         return self.write({'state': 'open'})
 
     @api.model

--- a/addons/account/models/company.py
+++ b/addons/account/models/company.py
@@ -15,6 +15,9 @@ from odoo.tools import DEFAULT_SERVER_DATE_FORMAT, date_utils
 class ResCompany(models.Model):
     _inherit = "res.company"
 
+    def _get_invoice_reference_types(self):
+        return [('invoice_number', _('Based on Invoice Number')), ('partner', _('Based on Partner')), ('none', _('Free Communication'))]
+
     #TODO check all the options/fields are in the views (settings + company form view)
     fiscalyear_last_day = fields.Integer(default=31, required=True)
     fiscalyear_last_month = fields.Selection([(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], default=12, required=True)
@@ -54,6 +57,11 @@ If you have any queries regarding your account, Please contact us.
 Thank you in advance for your cooperation.
 Best Regards,'''))
     tax_exigibility = fields.Boolean(string='Use Cash Basis')
+    
+    incoterm_id = fields.Many2one('account.incoterms', string='Default incoterm',
+        help='International Commercial Terms are a series of predefined commercial terms used in international transactions.')
+    invoice_reference_type = fields.Selection(string='Default Communication Type', selection='_get_invoice_reference_types',
+                                              default='none', help='You can set here the default communication that will appear on customer invoices, once validated, to help the customer to refer to that particular invoice when making the payment.')
 
     #Fields of the setup step for opening move
     account_opening_move_id = fields.Many2one(string='Opening Journal Entry', comodel_name='account.move', help="The journal entry containing the initial balance of all this company's accounts.")
@@ -66,8 +74,6 @@ Best Regards,'''))
     account_setup_fy_data_done = fields.Boolean('Financial Year Setup Marked As Done', help="Technical field holding the status of the financial year setup step.")
     account_setup_coa_done = fields.Boolean(string='Chart of Account Checked', help="Technical field holding the status of the chart of account setup step.")
     account_setup_bar_closed = fields.Boolean(string='Setup Bar Closed', help="Technical field set to True when setup bar has been closed by the user.")
-    incoterm_id = fields.Many2one('account.incoterms', string='Default incoterm',
-        help='International Commercial Terms are a series of predefined commercial terms used in international transactions.')
 
     # account invoice onboarding
     account_invoice_onboarding_closed = fields.Boolean(

--- a/addons/account/models/res_config_settings.py
+++ b/addons/account/models/res_config_settings.py
@@ -75,6 +75,8 @@ class ResConfigSettings(models.TransientModel):
     tax_exigibility = fields.Boolean(string='Cash Basis', related='company_id.tax_exigibility')
     tax_cash_basis_journal_id = fields.Many2one('account.journal', related='company_id.tax_cash_basis_journal_id', string="Tax Cash Basis Journal")
     account_hide_setup_bar = fields.Boolean(string='Hide Setup Bar', related='company_id.account_setup_bar_closed',help="Tick if you wish to hide the setup bar on the dashboard")
+    invoice_reference_type = fields.Selection(string='Communication',
+        related='company_id.invoice_reference_type', help='Default Reference Type on Invoices.')
 
     @api.multi
     def set_values(self):
