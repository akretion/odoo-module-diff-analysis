PR: https://github.com/odoo/odoo/pull/186725

From: 77a927276c6ea3e288de75aab5fbccd426eb745a
From: Shaan Thakkar (THSH)
Date: 2025-03-26 15:38:50

Breaking data model changes scores: del:1 + add:1, change matches:
-    has_lead_request = fields.Boolean(
+    event_lead_rule_ids = fields.Many2many('event.lead.rule', string="Lead Rules")

Total Changes: 61

[IMP] event_crm: execute lead generation rule explicitly

Specification
==============

Add a primary button "Execute Rule" in the event.lead.rule form view
If any event is specified in the event_id then the rule will be executed
for that particular event only. If event_id is empty then the rule will be
executed for all the ongoing and future events.
This is to facilitate the lead generation specialy for new event lead rule
we would want to execute directly after its creation.

We also remove the Generate Leads button from the event form view and move it
to the gear menu. It allows to execute the action directly on multiple events
at the same time.

UPG PR: odoo/upgrade#6740

Task-4247018

closes odoo/odoo#186725

Signed-off-by: Warnon Aur√©lien (awa) <awa@odoo.com>

================================= pseudo patch: =================================

--- a/addons/event_crm/models/event_event.py
+++ b/addons/event_crm/models/event_event.py
@@ -13,19 +13,6 @@ class EventEvent(models.Model):
         help="Leads generated from this event")
     lead_count = fields.Integer(
         string="# Leads", compute='_compute_lead_count', groups='sales_team.group_sale_salesman')
-    has_lead_request = fields.Boolean(
-        "Ongoing Generation Request", compute="_compute_has_lead_request", compute_sudo=True,
-        help="Set to True when a Lead Generation Request is currently running.")
-
-    @api.depends('registration_ids')
-    def _compute_has_lead_request(self):
-        lead_requests_data = self.env['event.lead.request']._read_group(
-            [('event_id', 'in', self.ids)],
-            ['event_id'], ['__count'],
-        )
-        mapped_data = {event.id: count for event, count in lead_requests_data}
-        for event in self:
-            event.has_lead_request = mapped_data.get(event.id, 0) != 0
 
     @api.depends('lead_ids')
     def _compute_lead_count(self):
@@ -37,7 +24,7 @@ class EventEvent(models.Model):
         for event in self:
             event.lead_count = mapped_data.get(event.id, 0)
 
-    def action_generate_leads(self):
+    def action_generate_leads(self, event_lead_rules=False):
         """ Re-generate leads based on event.lead.rules.
         The method is ran synchronously if there is a low amount of registrations, otherwise it
         goes through a CRON job that runs in batches. """
@@ -45,23 +32,25 @@ class EventEvent(models.Model):
         if not self.env.user.has_group('event.group_event_manager'):
             raise UserError(_("Only Event Managers are allowed to re-generate all leads."))
 
-        self.ensure_one()
         registrations_count = self.env['event.registration'].search_count([
-            ('event_id', '=', self.id),
+            ('event_id', 'in', self.ids),
             ('state', 'not in', ['draft', 'cancel']),
         ])
 
         if registrations_count <= self.env['event.lead.request']._REGISTRATIONS_BATCH_SIZE:
             leads = self.env['event.registration'].search([
-                ('event_id', '=', self.id),
+                ('event_id', 'in', self.ids),
                 ('state', 'not in', ['draft', 'cancel']),
-            ])._apply_lead_generation_rules()
+            ])._apply_lead_generation_rules(event_lead_rules)
             if leads:
                 notification = _("Yee-ha, %(leads_count)s Leads have been created!", leads_count=len(leads))
             else:
                 notification = _("Aww! No Leads created, check your Lead Generation Rules and try again.")
         else:
-            self.env['event.lead.request'].sudo().create({'event_id': self.id})
+            self.env['event.lead.request'].sudo().create([{
+                'event_id': event.id,
+                'event_lead_rule_ids': event_lead_rules,
+            } for event in self])
             self.env.ref('event_crm.ir_cron_generate_leads')._trigger()
             notification = _("Got it! We've noted your request. Your leads will be created soon!")
 

--- a/addons/event_crm/models/event_lead_request.py
+++ b/addons/event_crm/models/event_lead_request.py
@@ -22,6 +22,7 @@ class EventLeadRequest(models.Model):
     _REGISTRATIONS_BATCH_SIZE = 200
 
     event_id = fields.Many2one('event.event', required=True, string="Event", ondelete="cascade")
+    event_lead_rule_ids = fields.Many2many('event.lead.rule', string="Lead Rules")
     processed_registration_id = fields.Integer("Processed Registration",
         help="The ID of the last processed event.registration, used to know where to resume.")
 
@@ -54,7 +55,7 @@ class EventLeadRequest(models.Model):
                 order='id asc'
             )
 
-            registrations_to_process._apply_lead_generation_rules()
+            registrations_to_process._apply_lead_generation_rules(event_lead_rules=generate_request.event_lead_rule_ids)
 
             if len(registrations_to_process) < registrations_batch_size:
                 # done processing

--- a/addons/event_crm/models/event_lead_rule.py
+++ b/addons/event_crm/models/event_lead_rule.py
@@ -186,6 +186,10 @@ class EventLeadRule(models.Model):
 
         return self.env['crm.lead'].create(lead_vals_list)
 
+    def action_execute_rule(self):
+        events = self.event_id or self.env['event.event'].search([('is_finished', '!=', True)])
+        return events.action_generate_leads(event_lead_rules=self)
+
     def _filter_registrations(self, registrations):
         """ Keep registrations matching rule conditions. Those are
 

--- a/addons/event_crm/models/event_registration.py
+++ b/addons/event_crm/models/event_registration.py
@@ -79,22 +79,29 @@ class EventRegistration(models.Model):
         buy tickets, not when bootstrapping a database. """
         return super(EventRegistration, self.with_context(event_lead_rule_skip=True))._load_records_write(values)
 
-    def _apply_lead_generation_rules(self):
+    def _apply_lead_generation_rules(self, event_lead_rules=False):
         leads = self.env['crm.lead']
         open_registrations = self.filtered(lambda reg: reg.state == 'open')
         done_registrations = self.filtered(lambda reg: reg.state == 'done')
 
-        leads += self.env['event.lead.rule'].search(
-            [('lead_creation_trigger', '=', 'create')]
-        ).sudo()._run_on_registrations(self)
+        if event_lead_rules:
+            create_lead_rules = event_lead_rules.filtered(lambda rule: rule.lead_creation_trigger == 'create')
+        else:
+            create_lead_rules = self.env['event.lead.rule'].search([('lead_creation_trigger', '=', 'create')])
+
+        leads += create_lead_rules.sudo()._run_on_registrations(self)
         if open_registrations:
-            leads += self.env['event.lead.rule'].search(
-                [('lead_creation_trigger', '=', 'confirm')]
-            ).sudo()._run_on_registrations(open_registrations)
+            if event_lead_rules:
+                confirm_lead_rules = event_lead_rules.filtered(lambda rule: rule.lead_creation_trigger == 'confirm')
+            else:
+                confirm_lead_rules = self.env['event.lead.rule'].search([('lead_creation_trigger', '=', 'confirm')])
+            leads += confirm_lead_rules.sudo()._run_on_registrations(open_registrations)
         if done_registrations:
-            leads += self.env['event.lead.rule'].search(
-                [('lead_creation_trigger', '=', 'done')]
-            ).sudo()._run_on_registrations(done_registrations)
+            if event_lead_rules:
+                done_lead_rules = event_lead_rules.filtered(lambda rule: rule.lead_creation_trigger == 'done')
+            else:
+                done_lead_rules = self.env['event.lead.rule'].search([('lead_creation_trigger', '=', 'done')])
+            leads += done_lead_rules.sudo()._run_on_registrations(done_registrations)
         return leads
 
     def _update_leads(self, new_vals, lead_tracked_vals):
