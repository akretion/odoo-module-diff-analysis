PR: https://github.com/odoo/odoo/pull/109814

From: 8a38fd1e0ef1e2515d11c7107044950eb580e353
From: Arnold Moyaux
Date: 2023-01-13 16:32:51

Breaking data model changes score: 3, change matches:
-    _inherit = "product.category"
-    property_account_creditor_price_difference_categ = fields.Many2one(
-    property_account_creditor_price_difference = fields.Many2one(

Total Changes: 36

[REV] purchase_stock: prepare for the merge of purchase_price_diff

This reverts commit f1d8f7b43c29342aecb69f233fdd7702b4e4d913.

The previous commit shouldn't been merged to maintain the integrity
of runbot testing. It will be merge soon in the same time than the
migration script

Part-of: odoo/odoo#109814

================================= pseudo patch: =================================

--- a/addons/purchase_stock/models/account_invoice.py
+++ b/addons/purchase_stock/models/account_invoice.py
@@ -42,13 +42,8 @@ class AccountMove(models.Model):
                     continue
 
                 # Retrieve accounts needed to generate the price difference.
-                if line.product_id.cost_method == 'standard':
-                    debit_expense_account = line.product_id.property_account_creditor_price_difference \
-                        or line.product_id.categ_id.property_account_creditor_price_difference_categ
-                    debit_expense_account = line.move_id.fiscal_position_id.map_account(debit_expense_account)
-                else:
-                    accounts = line.product_id.product_tmpl_id.get_product_accounts(fiscal_pos=move.fiscal_position_id)
-                    debit_expense_account = accounts['expense']
+                accounts = line.product_id.product_tmpl_id.get_product_accounts(fiscal_pos=move.fiscal_position_id)
+                debit_expense_account = accounts['expense']
                 if not debit_expense_account:
                     continue
 
@@ -75,21 +70,14 @@ class AccountMove(models.Model):
                     valuation_price_unit = line.product_id.uom_id._compute_price(valuation_price_unit, line.product_uom_id)
 
                 else:
-                    price_unit = line.product_id.uom_id._compute_price(line.product_id.standard_price, line.product_uom_id)
-                    price_unit = -price_unit if line.move_id.move_type == 'in_refund' else price_unit
-                    valuation_price_unit = line.company_currency_id._convert(
-                        price_unit, move.currency_id,
-                        move.company_id, fields.Date.today(), round=False
-                    )
+                    continue
+
 
                 price_unit = line._get_gross_unit_price()
 
                 price_unit_val_dif = price_unit - valuation_price_unit
                 # If there are some valued moves, we only consider their quantity already used
-                if line.product_id.cost_method == 'standard':
-                    relevant_qty = line.quantity
-                else:
-                    relevant_qty = line._get_out_and_not_invoiced_qty(valuation_stock_moves)
+                relevant_qty = line._get_out_and_not_invoiced_qty(valuation_stock_moves)
                 price_subtotal = relevant_qty * price_unit_val_dif
 
                 # We consider there is a price difference if the subtotal is not zero. In case a

--- a/addons/purchase_stock/models/product.py
+++ b/addons/purchase_stock/models/product.py
@@ -5,24 +5,10 @@ from odoo import api, fields, models
 from odoo.osv import expression
 
 
-class ProductCategory(models.Model):
-    _inherit = "product.category"
-
-    property_account_creditor_price_difference_categ = fields.Many2one(
-        'account.account', string="Price Difference Account",
-        company_dependent=True,
-        help="This account will be used to value price difference between purchase price and accounting cost.")
-
-
 class ProductTemplate(models.Model):
     _name = 'product.template'
     _inherit = 'product.template'
 
-    property_account_creditor_price_difference = fields.Many2one(
-        'account.account', string="Price Difference Account", company_dependent=True,
-        help="This account is used in automated inventory valuation to "\
-             "record the price difference between a purchase order and its related vendor bill when validating this vendor bill.")
-
     @api.model
     def _get_buy_route(self):
         buy_route = self.env.ref('purchase_stock.route_warehouse0_buy', raise_if_not_found=False)
