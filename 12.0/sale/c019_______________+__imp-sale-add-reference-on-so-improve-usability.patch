PR: https://github.com/odoo/odoo/pull/

From: ef42e03b69307a90d67b46ce9858065fd2c1ce1a
From: Laurent Smet
Date: 2018-08-14 12:44:11

Structural Changes: 3
Total Changes: 41

[IMP] sale: add reference on SO + improve usability

Like invoices, a reference is now computed on sales orders.
The configuration of such reference is done through the Wire Transfer acquirer.

The usability of the communication feature (on invoices/SO) has been a bit improved to be more clear.

Was task: 1870121
Was PR #26152

================================= pseudo patch: =================================

--- a/addons/sale/models/payment.py
+++ b/addons/sale/models/payment.py
@@ -1,12 +1,19 @@
 # -*- coding: utf-8 -*-
 # Part of Odoo. See LICENSE file for full copyright and licensing details.
-import logging
+import re
 
 from odoo import api, fields, models, _
-from odoo.exceptions import UserError
-from odoo.tools import float_compare
 
-_logger = logging.getLogger(__name__)
+
+class PaymentAcquirer(models.Model):
+    _inherit = 'payment.acquirer'
+
+    so_reference_type = fields.Selection(string='Communication',
+        selection=[
+            ('so_name', _('Based on Document Reference')),
+            ('partner', _('Based on Customer ID'))], default='so_name',
+        help='You can set here the communication type that will appear on sales orders.'
+             'The communication will be given to the customer when they choose the payment method.')
 
 
 class PaymentTransaction(models.Model):
@@ -16,6 +23,18 @@ class PaymentTransaction(models.Model):
                                       string='Sales Orders', copy=False, readonly=True)
     sale_order_ids_nbr = fields.Integer(compute='_compute_sale_order_ids_nbr', string='# of Sales Orders')
 
+    @api.multi
+    def _compute_sale_order_reference(self, order):
+        self.ensure_one()
+        if self.acquirer_id.so_reference_type == 'so_name':
+            identification_number = int(re.match('.*?([0-9]+)$', order.name).group(1))
+            prefix = order.name
+        else:
+            # self.acquirer_id.so_reference_type == 'partner'
+            identification_number = order.partner_id.id
+            prefix = 'CUST'
+        return '%s/%s' % (prefix, str(identification_number % 97).rjust(2, '0'))
+
     @api.depends('sale_order_ids')
     def _compute_sale_order_ids_nbr(self):
         for trans in self:
@@ -43,8 +62,13 @@ class PaymentTransaction(models.Model):
         # to sent the quotations automatically.
         super(PaymentTransaction, self)._set_transaction_pending()
 
-        sales_orders = self.mapped('sale_order_ids').filtered(lambda so: so.state == 'draft')
-        sales_orders.force_quotation_send()
+        for record in self:
+            sales_orders = record.sale_order_ids.filtered(lambda so: so.state == 'draft')
+            sales_orders.force_quotation_send()
+
+            if record.acquirer_id.provider == 'transfer':
+                for so in sales_orders:
+                    so.reference = record._compute_sale_order_reference(so)
 
     @api.multi
     def _set_transaction_authorized(self):

--- a/addons/sale/models/sale.py
+++ b/addons/sale/models/sale.py
@@ -118,6 +118,8 @@ class SaleOrder(models.Model):
     name = fields.Char(string='Order Reference', required=True, copy=False, readonly=True, states={'draft': [('readonly', False)]}, index=True, default=lambda self: _('New'))
     origin = fields.Char(string='Source Document', help="Reference of the document that generated this sales order request.")
     client_order_ref = fields.Char(string='Customer Reference', copy=False)
+    reference = fields.Char(string='Payment Ref.', copy=False,
+        help='The payment communication of this sale order.')
     state = fields.Selection([
         ('draft', 'Quotation'),
         ('sent', 'Quotation Sent'),
@@ -508,6 +510,9 @@ class SaleOrder(models.Model):
         for group_key in invoices:
             invoices[group_key].write({'name': ', '.join(invoices_name[group_key]),
                                        'origin': ', '.join(invoices_origin[group_key])})
+            sale_orders = references[invoices[group_key]]
+            if len(sale_orders) == 1:
+                invoices[group_key].reference = sale_orders.reference
 
         if not invoices:
             raise UserError(_('There is no invoiceable line. If a product has a Delivered quantities invoicing policy, please make sure that a quantity has been delivered.'))
